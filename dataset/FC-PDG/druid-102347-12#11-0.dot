digraph {
74 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(0,5)).once().andReturn(records.subList(4,records.size())).once()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(STREAM,currentOffsets,currentOffsets.keySet())),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,nextOffsets)))))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"9\",shardId0,\"1\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "recordSupplier.assign(EasyMock.anyObject())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"10\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc5))@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@27@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final Map<String,String> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "maxRecordsPerPoll = 1@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"2\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "task.getRunner().getStatus() != SeekableStreamIndexTaskRunner.Status.PAUSED@@@27@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"2\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "task.getRunner().getStatus() != SeekableStreamIndexTaskRunner.Status.PAUSED@@@20@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "Thread.sleep(10)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "expect(recordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"4\",shardId0,\"0\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,currentOffsets)))))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@54@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"9\",shardId0,\"1\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(6,task.getRunner().getRowIngestionMeters().getProcessed())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,currentOffsets)))))@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"10\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Thread.sleep(10)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@21@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
80 [style = filled, label = "testIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "task.getRunner().getStatus() != SeekableStreamIndexTaskRunner.Status.PAUSED@@@21@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Thread.sleep(10)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "replayAll()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(0,3)).once().andReturn(records.subList(2,10)).once().andReturn(records.subList(9,11))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
84 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"),ImmutableSet.of())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "recordSupplier.close()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"0\"),ImmutableSet.of())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(stream,currentOffsets,currentOffsets.keySet())),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,nextOffsets)))))@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "maxTotalRows = 3L@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expectLastCall().anyTimes()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"9\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"0\"),ImmutableSet.of())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"10\"))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2049/P1D\",0)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "EasyMock.expectLastCall().once()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "recordSupplier.assign(anyObject())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(0,3)).once().andReturn(records.subList(2,10)).once().andReturn(records.subList(9,11))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
63 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "expectLastCall().once()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(checkpoint2.getPartitionSequenceNumberMap(),nextOffsets)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "EasyMock.expect(recordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "expectLastCall().anyTimes()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testIncrementalHandOffMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "recordSupplier.seek(anyObject(),anyString())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"10\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
66 [style = filled, label = "recordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
77 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@47@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "verifyAll()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"9\"))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
58->28 [style = bold, label=""];
4->56 [style = dashed, label="0"];
1->67 [style = bold, label=""];
71->9 [style = solid, label="task"];
42->9 [style = solid, label="baseSequenceName"];
26->55 [style = dashed, label="0"];
45->65 [style = bold, label=""];
9->35 [style = solid, label="task"];
65->54 [style = bold, label=""];
67->31 [style = bold, label=""];
68->69 [style = bold, label=""];
9->6 [style = solid, label="task"];
18->61 [style = dashed, label="0"];
71->9 [style = bold, label=""];
54->57 [style = bold, label=""];
1->27 [style = bold, label=""];
40->28 [style = dotted, label="true"];
75->29 [style = bold, label=""];
44->7 [style = bold, label=""];
84->83 [style = solid, label="startPartitions"];
62->55 [style = bold, label=""];
56->12 [style = bold, label=""];
14->64 [style = dashed, label="0"];
26->68 [style = dashed, label="0"];
40->38 [style = bold, label=""];
40->8 [style = dashed, label="0"];
8->40 [style = bold, label=""];
59->61 [style = bold, label=""];
48->39 [style = bold, label=""];
13->1 [style = bold, label=""];
17->10 [style = solid, label="desc4"];
19->24 [style = bold, label=""];
7->14 [style = bold, label=""];
47->19 [style = solid, label="desc5"];
0->52 [style = bold, label=""];
5->84 [style = dashed, label="0"];
18->9 [style = solid, label="endPartitions"];
3->19 [style = bold, label=""];
17->73 [style = solid, label="desc4"];
27->67 [style = dashed, label="0"];
23->13 [style = bold, label=""];
33->46 [style = bold, label=""];
5->14 [style = solid, label="startPartitions"];
20->43 [style = bold, label=""];
38->21 [style = solid, label="currentOffsets"];
7->44 [style = dashed, label="0"];
13->74 [style = dashed, label="0"];
41->22 [style = bold, label=""];
62->9 [style = solid, label="startPartitions"];
62->64 [style = solid, label="startPartitions"];
6->73 [style = solid, label="desc5"];
80->42 [style = bold, label=""];
64->60 [style = bold, label=""];
6->10 [style = solid, label="desc3"];
37->59 [style = dashed, label="0"];
31->84 [style = bold, label=""];
39->29 [style = bold, label=""];
78->8 [style = bold, label=""];
3->77 [style = bold, label=""];
66->63 [style = bold, label=""];
0->70 [style = bold, label=""];
2->20 [style = bold, label=""];
82->73 [style = solid, label="desc7"];
42->71 [style = solid, label="baseSequenceName"];
55->59 [style = bold, label=""];
36->44 [style = bold, label=""];
37->69 [style = dashed, label="0"];
30->82 [style = bold, label=""];
25->36 [style = bold, label=""];
31->5 [style = bold, label=""];
0->73 [style = dashed, label="0"];
9->47 [style = solid, label="task"];
61->9 [style = solid, label="endPartitions"];
27->31 [style = bold, label=""];
46->36 [style = bold, label=""];
42->72 [style = bold, label=""];
9->8 [style = bold, label=""];
6->0 [style = solid, label="desc3"];
30->3 [style = solid, label="desc6"];
76->2 [style = bold, label=""];
71->34 [style = solid, label="task"];
30->73 [style = solid, label="desc6"];
35->0 [style = bold, label=""];
50->60 [style = solid, label="nextOffsets"];
71->82 [style = solid, label="task"];
46->4 [style = bold, label=""];
21->11 [style = bold, label=""];
84->68 [style = bold, label=""];
70->75 [style = bold, label=""];
50->21 [style = solid, label="nextOffsets"];
56->50 [style = bold, label=""];
30->0 [style = solid, label="desc4"];
43->57 [style = dashed, label="0"];
18->9 [style = bold, label=""];
0->48 [style = bold, label=""];
22->17 [style = bold, label=""];
9->30 [style = solid, label="task"];
26->37 [style = bold, label=""];
30->47 [style = bold, label=""];
82->77 [style = solid, label="desc7"];
51->42 [style = bold, label=""];
63->53 [style = bold, label=""];
38->33 [style = bold, label=""];
32->42 [style = bold, label=""];
17->29 [style = solid, label="desc2"];
14->21 [style = bold, label=""];
38->46 [style = solid, label="currentOffsets"];
49->72 [style = dashed, label="0"];
9->8 [style = solid, label="task"];
84->71 [style = solid, label="startPartitions"];
21->60 [style = dashed, label="0"];
49->45 [style = bold, label=""];
79->33 [style = solid, label="currentOffsets"];
81->34 [style = bold, label=""];
46->56 [style = bold, label=""];
38->64 [style = solid, label="currentOffsets"];
22->29 [style = solid, label="desc3"];
71->30 [style = solid, label="task"];
17->6 [style = bold, label=""];
5->9 [style = solid, label="startPartitions"];
7->64 [style = bold, label=""];
57->66 [style = bold, label=""];
22->73 [style = solid, label="desc3"];
19->3 [style = dashed, label="0"];
5->26 [style = bold, label=""];
71->17 [style = solid, label="task"];
6->10 [style = solid, label="desc5"];
22->39 [style = solid, label="desc1"];
38->14 [style = solid, label="currentOffsets"];
48->0 [style = dashed, label="0"];
45->2 [style = bold, label=""];
22->0 [style = solid, label="desc1"];
50->25 [style = solid, label="nextOffsets"];
9->17 [style = solid, label="task"];
23->63 [style = dashed, label="0"];
79->83 [style = solid, label="currentOffsets"];
73->0 [style = bold, label=""];
34->73 [style = solid, label="desc1"];
58->38 [style = bold, label=""];
23->74 [style = bold, label=""];
58->28 [style = dotted, label="true"];
79->38 [style = bold, label=""];
17->0 [style = solid, label="desc2"];
12->56 [style = bold, label=""];
20->54 [style = dashed, label="0"];
8->78 [style = bold, label=""];
13->53 [style = dashed, label="0"];
85->81 [style = bold, label=""];
4->12 [style = bold, label=""];
29->10 [style = bold, label=""];
53->1 [style = bold, label=""];
3->10 [style = dashed, label="0"];
4->12 [style = dotted, label="true"];
4->50 [style = bold, label=""];
44->83 [style = bold, label=""];
35->0 [style = solid, label="desc7"];
69->71 [style = solid, label="endPartitions"];
41->75 [style = solid, label="desc2"];
28->58 [style = bold, label=""];
71->22 [style = solid, label="task"];
15->23 [style = bold, label=""];
30->3 [style = solid, label="desc4"];
52->39 [style = bold, label=""];
28->40 [style = bold, label=""];
8->58 [style = bold, label=""];
41->73 [style = solid, label="desc2"];
8->79 [style = bold, label=""];
35->24 [style = solid, label="desc7"];
50->16 [style = bold, label=""];
10->3 [style = bold, label=""];
16->25 [style = bold, label=""];
34->41 [style = bold, label=""];
40->28 [style = bold, label=""];
61->9 [style = bold, label=""];
47->35 [style = bold, label=""];
38->60 [style = solid, label="currentOffsets"];
72->76 [style = bold, label=""];
9->22 [style = solid, label="task"];
48->52 [style = dashed, label="0"];
71->6 [style = solid, label="task"];
11->34 [style = bold, label=""];
69->71 [style = bold, label=""];
12->4 [style = bold, label=""];
79->38 [style = solid, label="currentOffsets"];
43->15 [style = bold, label=""];
83->14 [style = bold, label=""];
56->12 [style = dotted, label="true"];
8->78 [style = dotted, label="true"];
40->58 [style = dashed, label="0"];
14->85 [style = bold, label=""];
47->0 [style = solid, label="desc5"];
37->18 [style = bold, label=""];
15->66 [style = dashed, label="0"];
74->1 [style = bold, label=""];
60->11 [style = bold, label=""];
38->33 [style = solid, label="currentOffsets"];
42->49 [style = bold, label=""];
34->70 [style = solid, label="desc1"];
2->65 [style = dashed, label="0"];
45->76 [style = dashed, label="0"];
47->6 [style = dashed, label="0"];
5->62 [style = dashed, label="0"];
31->62 [style = bold, label=""];
50->16 [style = solid, label="nextOffsets"];
71->41 [style = solid, label="task"];
82->73 [style = bold, label=""];
6->30 [style = bold, label=""];
}
