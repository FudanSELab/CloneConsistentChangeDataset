digraph {
32 [style = filled, label = "ConsumerPartitionAssignor assignor = new CooperativeStickyAssignor()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "fetches1.put(tp0,new FetchInfo(2,1))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "consumer.subscribe(asList(topic,topic2),countingRebalanceListener)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "prepareRebalance(client,node,assignor,asList(tp0,t2p0),null)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "fetches1.clear()@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "AtomicInteger count = new AtomicInteger(0)@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "fetches1.clear()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "fetches1.put(tp0,new FetchInfo(0,1))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "consumer.subscribe(asList(topic,topic3),getConsumerRebalanceListener(consumer))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
65 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "fetches1.put(t2p0,new FetchInfo(0,10))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertEquals(10L,consumer.position(t2p0))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "assertEquals(5L,consumer.position(tp0))@@@77@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "MockClient client = new MockClient(time,metadata)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "consumer.poll(Duration.ZERO)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "consumer.subscribe(Arrays.asList(topic,topic2),getConsumerRebalanceListener(consumer))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "fetches1.put(t3p0,new FetchInfo(0,100))@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "assertEquals(countingRebalanceListener.revokedCount,1)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "client.respondFrom(syncGroupResponse(Arrays.asList(tp0,t3p0),Errors.NONE),coordinator)@@@56@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "TestUtils.waitForCondition(null,\"Does not complete rebalance in time\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "consumer.unsubscribe()@@@80@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "fetches1.put(tp0,new FetchInfo(1,1))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "fetches1.put(tp0,new FetchInfo(3,1))@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic2),consumer.subscription())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertEquals(2L,consumer.position(tp0))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Node node = metadata.fetch().nodes().get(0)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "client.requests().clear()@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "testReturnRecordsDuringRebalance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(11,records.count())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "partitionOffsets1.put(t2p0,10L)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "fetches1.clear()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "initMetadata(client,Utils.mkMap(Utils.mkEntry(topic,1),Utils.mkEntry(topic2,1),Utils.mkEntry(topic3,1)))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "assertEquals(1L,consumer.position(tp0))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "client.respondFrom(syncGroupResponse(asList(tp0,t3p0),Errors.NONE),coordinator)@@@56@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertEquals(0L,consumer.position(t3p0))@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(1,records.count())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "fetches1.clear()@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "consumer.close()@@@81@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "fetches1.put(t2p0,new FetchInfo(10,20))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Node coordinator = prepareRebalance(client,node,assignor,asList(tp0,t2p0),null)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
57 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Map<TopicPartition,Long> partitionOffsets1 = new HashMap<>()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(100L,consumer.position(t3p0))@@@78@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "ConsumerPartitionAssignor assignor = new RoundRobinAssignor()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "assertEquals(countingRebalanceListener.assignedCount,1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertEquals(Utils.mkSet(tp0,t2p0),consumer.assignment())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "consumer.enforceRebalance()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "consumer.subscribe(asList(topic,topic2),getConsumerRebalanceListener(consumer))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "records = consumer.poll(Duration.ZERO)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertEquals(4L,consumer.position(tp0))@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "client.respondFrom(joinGroupFollowerResponse(assignor,2,\"memberId\",\"leaderId\",Errors.NONE),coordinator)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "SubscriptionState subscription = new SubscriptionState(new LogContext(),OffsetResetStrategy.EARLIEST)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(1,records.count())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestUtils.waitForCondition(null,\"Does not complete rebalance in time\")@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Time time = new MockTime(1L)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "count.set(0)@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "consumer.poll(Duration.ZERO)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "fetches1.put(tp0,new FetchInfo(4,1))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(commitReceived.get())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "TestUtils.waitForCondition(null,\"Does not complete rebalance in time\")@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertEquals(Utils.mkSet(tp0,t2p0),consumer.assignment())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "testReturnRecordsDuringRebalance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
68 [style = filled, label = "consumer.subscribe(Arrays.asList(topic,topic3),getConsumerRebalanceListener(consumer))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
76 [style = filled, label = "assertEquals(countingRebalanceListener.revokedCount,0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(Utils.mkSet(tp0,t3p0),consumer.assignment())@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "ConsumerMetadata metadata = createMetadata(subscription)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertEquals(Collections.singleton(tp0),consumer.assignment())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "initMetadata(client,mkMap(mkEntry(topic,1),mkEntry(topic2,1),mkEntry(topic3,1)))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertEquals(Collections.singleton(tp0),consumer.assignment())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "MockRebalanceListener countingRebalanceListener = new MockRebalanceListener()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Map<TopicPartition,FetchInfo> fetches1 = new HashMap<>()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Node coordinator = prepareRebalance(client,node,assignor,Arrays.asList(tp0,t2p0),null)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "AtomicBoolean commitReceived = prepareOffsetCommitResponse(client,coordinator,partitionOffsets1)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "records = consumer.poll(Duration.ZERO)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "consumer.poll(Duration.ZERO)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ConsumerRecords<String,String> records = consumer.poll(Duration.ZERO)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "KafkaConsumer<String,String> consumer = newConsumer(time,client,subscription,metadata,assignor,true,groupInstanceId)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "testEnforceRebalanceTriggersRebalanceOnNextPoll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(3L,consumer.position(tp0))@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40->4 [style = bold, label=""];
36->59 [style = bold, label=""];
38->9 [style = solid, label="subscription"];
32->22 [style = bold, label=""];
15->10 [style = bold, label=""];
30->81 [style = dashed, label="0"];
21->43 [style = bold, label=""];
1->20 [style = bold, label=""];
55->51 [style = bold, label=""];
65->56 [style = bold, label=""];
52->13 [style = bold, label=""];
5->4 [style = solid, label="coordinator"];
14->67 [style = bold, label=""];
0->66 [style = bold, label=""];
51->61 [style = bold, label=""];
66->50 [style = bold, label=""];
43->1 [style = bold, label=""];
38->18 [style = solid, label="subscription"];
82->75 [style = bold, label=""];
38->65 [style = solid, label="subscription"];
73->71 [style = bold, label=""];
5->1 [style = solid, label="coordinator"];
30->8 [style = bold, label=""];
49->40 [style = bold, label=""];
44->47 [style = bold, label=""];
32->5 [style = solid, label="assignor"];
5->70 [style = dashed, label="0"];
39->42 [style = solid, label="client"];
5->28 [style = solid, label="coordinator"];
16->3 [style = bold, label=""];
32->28 [style = solid, label="assignor"];
8->66 [style = solid, label="node"];
51->57 [style = solid, label="fetches1"];
51->46 [style = solid, label="fetches1"];
38->34 [style = solid, label="subscription"];
39->22 [style = solid, label="client"];
45->63 [style = bold, label=""];
58->16 [style = bold, label=""];
19->12 [style = bold, label=""];
22->71 [style = solid, label="consumer"];
70->4 [style = solid, label="coordinator"];
12->21 [style = bold, label=""];
32->70 [style = solid, label="assignor"];
22->73 [style = bold, label=""];
37->29 [style = bold, label=""];
41->49 [style = bold, label=""];
8->70 [style = solid, label="node"];
69->20 [style = bold, label=""];
51->66 [style = solid, label="fetches1"];
70->69 [style = solid, label="coordinator"];
54->58 [style = bold, label=""];
61->48 [style = bold, label=""];
5->74 [style = dashed, label="0"];
29->27 [style = bold, label=""];
84->42 [style = bold, label=""];
83->22 [style = bold, label=""];
27->46 [style = bold, label=""];
51->43 [style = solid, label="fetches1"];
8->74 [style = bold, label=""];
68->9 [style = bold, label=""];
59->35 [style = bold, label=""];
7->23 [style = bold, label=""];
10->45 [style = bold, label=""];
2->33 [style = bold, label=""];
5->7 [style = bold, label=""];
70->7 [style = bold, label=""];
43->69 [style = bold, label=""];
34->39 [style = solid, label="metadata"];
22->30 [style = solid, label="consumer"];
8->5 [style = solid, label="node"];
75->79 [style = bold, label=""];
42->73 [style = dashed, label="0"];
67->11 [style = bold, label=""];
78->82 [style = bold, label=""];
47->36 [style = bold, label=""];
32->22 [style = solid, label="assignor"];
72->26 [style = bold, label=""];
22->42 [style = bold, label=""];
25->0 [style = bold, label=""];
56->6 [style = bold, label=""];
8->74 [style = solid, label="node"];
38->23 [style = solid, label="subscription"];
70->28 [style = solid, label="coordinator"];
42->81 [style = bold, label=""];
39->4 [style = solid, label="client"];
34->22 [style = solid, label="metadata"];
50->14 [style = bold, label=""];
39->74 [style = solid, label="client"];
63->24 [style = bold, label=""];
16->68 [style = bold, label=""];
60->25 [style = bold, label=""];
39->5 [style = solid, label="client"];
39->83 [style = bold, label=""];
3->9 [style = bold, label=""];
8->43 [style = solid, label="node"];
39->70 [style = solid, label="client"];
22->3 [style = solid, label="consumer"];
22->68 [style = solid, label="consumer"];
57->15 [style = bold, label=""];
38->47 [style = solid, label="subscription"];
39->32 [style = bold, label=""];
34->39 [style = bold, label=""];
38->34 [style = bold, label=""];
28->17 [style = bold, label=""];
30->71 [style = dashed, label="0"];
35->60 [style = bold, label=""];
71->8 [style = bold, label=""];
76->78 [style = bold, label=""];
31->19 [style = bold, label=""];
85->26 [style = bold, label=""];
22->84 [style = bold, label=""];
23->55 [style = bold, label=""];
39->73 [style = solid, label="client"];
1->69 [style = dashed, label="0"];
8->57 [style = solid, label="node"];
48->57 [style = bold, label=""];
32->83 [style = dashed, label="0"];
38->22 [style = solid, label="subscription"];
74->80 [style = bold, label=""];
6->52 [style = bold, label=""];
20->44 [style = bold, label=""];
8->46 [style = solid, label="node"];
53->2 [style = bold, label=""];
24->54 [style = bold, label=""];
49->4 [style = solid, label="partitionOffsets1"];
11->53 [style = bold, label=""];
9->41 [style = bold, label=""];
26->38 [style = bold, label=""];
84->81 [style = solid, label="countingRebalanceListener"];
64->26 [style = bold, label=""];
62->31 [style = bold, label=""];
3->68 [style = dashed, label="0"];
18->62 [style = bold, label=""];
77->76 [style = bold, label=""];
8->5 [style = bold, label=""];
4->37 [style = bold, label=""];
42->30 [style = bold, label=""];
26->39 [style = solid, label="time"];
8->70 [style = bold, label=""];
83->74 [style = solid, label="assignor"];
51->16 [style = solid, label="fetches1"];
80->77 [style = bold, label=""];
81->8 [style = bold, label=""];
8->16 [style = solid, label="node"];
83->22 [style = solid, label="assignor"];
46->65 [style = bold, label=""];
17->18 [style = bold, label=""];
13->28 [style = bold, label=""];
26->22 [style = solid, label="time"];
}
