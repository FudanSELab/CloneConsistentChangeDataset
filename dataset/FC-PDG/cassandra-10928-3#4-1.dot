digraph {
2 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1,path3)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertCellFetchedQueried(false,false,filter,v2,path0,path4)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testSelectIndividualCells['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1,path2,path3)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testSelectCellSlice['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertFetchedQueried(true,true,filter,v2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"(v2(1(, v2(3((\",filter.toString())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testSelectIndividualCells['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testRoundTrips(filter)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ColumnFilter filter = ColumnFilter.selectionBuilder().slice(v2,path1,path3).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertFetchedQueried(false,false,filter,v1,s1,s2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"(v2(1:3((\",filter.toString())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertCellFetchedQueried(false,false,filter,s2,path0,path1,path2,path3,path4)@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"v2(1(, v2(3(\",filter.toCQLString())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "ColumnFilter filter = ColumnFilter.selectionBuilder().select(v2,path1).select(v2,path3).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertCellFetchedQueried(false,false,filter,v2,path0,path2,path4)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->2 [style = solid, label="filter"];
11->4 [style = solid, label="filter"];
8->5 [style = solid, label="filter"];
8->3 [style = bold, label=""];
12->15 [style = bold, label=""];
0->15 [style = dashed, label="0"];
3->6 [style = bold, label=""];
8->4 [style = solid, label="filter"];
4->2 [style = bold, label=""];
7->8 [style = bold, label=""];
11->3 [style = solid, label="filter"];
6->5 [style = bold, label=""];
2->12 [style = dashed, label="0"];
2->0 [style = bold, label=""];
8->1 [style = solid, label="filter"];
6->13 [style = dashed, label="0"];
10->8 [style = bold, label=""];
8->0 [style = solid, label="filter"];
11->3 [style = bold, label=""];
0->1 [style = bold, label=""];
8->3 [style = solid, label="filter"];
5->4 [style = bold, label=""];
11->15 [style = solid, label="filter"];
13->5 [style = bold, label=""];
9->5 [style = bold, label=""];
3->13 [style = bold, label=""];
4->12 [style = bold, label=""];
6->9 [style = bold, label=""];
11->1 [style = solid, label="filter"];
8->11 [style = dashed, label="0"];
14->11 [style = bold, label=""];
11->12 [style = solid, label="filter"];
11->5 [style = solid, label="filter"];
15->1 [style = bold, label=""];
}
