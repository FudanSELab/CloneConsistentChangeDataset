digraph {
14 [style = filled, label = "BibEntryAssert.assertEquals(entries,tempFile,modsImporter)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "importFile = Paths.get(.getResource(filename).toURI())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(test,CompareMatcher.isSimilarTo(control).withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "String filename@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<BibEntry> entries = bibtexImporter.importDatabase(importFile,charset).getDatabase().getEntries()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testPerformExport['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Builder test = Input.from(Files.newInputStream(tempFilename))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Builder control = Input.from(Files.newInputStream(xmlFile))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testPerformExport['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "testExportAsModsAndThenImportAsMods['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Path tempFilename = tempFile.toAbsolutePath()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "String filename@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "exporter.export(databaseContext,tempFile,charset,entries)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(String.join(\"\",Files.readAllLines(xmlFile)),String.join(\"\",Files.readAllLines(tempFile)))@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "modsExportFormat.export(databaseContext,tempFile,charset,entries)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String xmlFileName = filename.replace(\".bib\",\".xml\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Path xmlFile = Paths.get(.getResource(xmlFileName).toURI())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->11 [style = solid, label="entries"];
0->9 [style = bold, label=""];
6->9 [style = solid, label="xmlFile"];
10->3 [style = bold, label=""];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
0->11 [style = dashed, label="0"];
7->4 [style = bold, label=""];
15->16 [style = dotted, label="true"];
5->14 [style = solid, label="entries"];
9->8 [style = bold, label=""];
15->3 [style = bold, label=""];
5->0 [style = solid, label="entries"];
6->12 [style = solid, label="xmlFile"];
13->1 [style = dotted, label="true"];
7->5 [style = bold, label=""];
3->5 [style = bold, label=""];
0->14 [style = bold, label=""];
5->6 [style = bold, label=""];
13->3 [style = bold, label=""];
8->2 [style = bold, label=""];
3->7 [style = bold, label=""];
5->0 [style = bold, label=""];
1->16 [style = dashed, label="0"];
6->11 [style = bold, label=""];
4->8 [style = solid, label="tempFilename"];
8->2 [style = solid, label="test"];
10->1 [style = dotted, label="true"];
4->5 [style = bold, label=""];
}
