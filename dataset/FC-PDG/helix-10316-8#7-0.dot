digraph {
0 [style = filled, label = "when(_testReplica.isReplicaTopState()).thenReturn(true)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(normalizedScore,1.0)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(normalizedScore,1f)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(normalizedScore,0.5f)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "float normalizedScore = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "when(_testNode.getAssignedTopStatePartitionsCount()).thenReturn(0)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "double normalizedScore = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testGetAssignmentScoreWhenReplicaNotTopState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testGetAssignmentScoreWhenReplicaIsTopStateLightLoad['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(score,1f)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(score,1.0)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "float score = _constraint.getAssignmentScore(_testNode,_testReplica,_clusterContext)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "double score = _constraint.getAssignmentScore(_testNode,_testReplica,_clusterContext)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "verifyZeroInteractions(_clusterContext)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "when(_testReplica.isReplicaTopState()).thenReturn(false)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(_clusterContext.getEstimatedMaxTopStateCount()).thenReturn(20)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testGetAssignmentScoreWhenReplicaIsTopStateLightLoad['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verifyZeroInteractions(_testNode)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(score,0.5f)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
5->3 [style = bold, label=""];
16->13 [style = bold, label=""];
2->5 [style = bold, label=""];
2->3 [style = solid, label="normalizedScore"];
6->8 [style = dashed, label="0"];
1->8 [style = bold, label=""];
3->2 [style = dashed, label="0"];
18->15 [style = bold, label=""];
0->15 [style = dashed, label="0"];
16->6 [style = solid, label="score"];
7->0 [style = bold, label=""];
13->2 [style = solid, label="normalizedScore"];
15->16 [style = bold, label=""];
12->0 [style = bold, label=""];
6->5 [style = solid, label="score"];
6->2 [style = bold, label=""];
1->6 [style = bold, label=""];
5->6 [style = dashed, label="0"];
5->10 [style = dashed, label="0"];
3->9 [style = dashed, label="0"];
0->4 [style = bold, label=""];
11->10 [style = bold, label=""];
17->14 [style = bold, label=""];
2->11 [style = dashed, label="0"];
4->1 [style = bold, label=""];
10->9 [style = bold, label=""];
13->6 [style = bold, label=""];
8->11 [style = bold, label=""];
11->9 [style = solid, label="normalizedScore"];
8->10 [style = solid, label="score"];
}
