digraph {
11 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment2).getBytes(StandardCharsets.UTF_8),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment2.getId().toString()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final SegmentPublishResult result2 = coordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment2),new ObjectMetadata(ImmutableMap.of(\"foo\",\"bar\")),new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")),coordinator.getDataSourceMetadata(\"fooDataSource\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final SegmentPublishResult result2 = failOnceCoordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment2),new ObjectMetadata(ImmutableMap.of(\"foo\",\"bar\")),new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment).getBytes(\"UTF-8\"),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment.getIdentifier()))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(new SegmentPublishResult(ImmutableSet.of(defaultSegment2),true),result2)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final IndexerSQLMetadataStorageCoordinator failOnceCoordinator = new IndexerSQLMetadataStorageCoordinator(mapper,derbyConnectorRule.metadataTablesConfigSupplier().get(),derbyConnector){@Override protected DataSourceMetadataUpdateResult updateDataSourceMetadataWithHandle(Handle handle,String dataSource,DataSourceMetadata startMetadata,DataSourceMetadata endMetadata){metadataUpdateCounter.getAndIncrement()if (attemptCounter.getAndIncrement() == 0) {return DataSourceMetadataUpdateResult.TRY_AGAIN}{return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8fe6b7handledataSourcestartMetadataendMetadata}}}@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(4,metadataUpdateCounter.get())@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment2).getBytes(\"UTF-8\"),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment2.getIdentifier()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "final AtomicLong attemptCounter = new AtomicLong()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testTransactionalAnnounceSuccess['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "attemptCounter.set(0)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment).getBytes(StandardCharsets.UTF_8),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment.getId().toString()))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(new SegmentPublishResult(ImmutableSet.of(defaultSegment),true),result1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment2).getBytes(\"UTF-8\"),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment2.getIdentifier()))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testTransactionalAnnounceRetryAndSuccess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(new SegmentPublishResult(ImmutableSet.of(defaultSegment2),true),result2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment).getBytes(\"UTF-8\"),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment.getIdentifier()))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final SegmentPublishResult result1 = failOnceCoordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment),new ObjectMetadata(null),new ObjectMetadata(ImmutableMap.of(\"foo\",\"bar\")))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(new SegmentPublishResult(ImmutableSet.of(defaultSegment),true),result1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(2,metadataUpdateCounter.get())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")),failOnceCoordinator.getDataSourceMetadata(\"fooDataSource\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testTransactionalAnnounceSuccess['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final SegmentPublishResult result1 = coordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment),new ObjectMetadata(null),new ObjectMetadata(ImmutableMap.of(\"foo\",\"bar\")))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
19->23 [style = solid, label="result2"];
11->1 [style = bold, label=""];
13->17 [style = solid, label="result1"];
0->2 [style = bold, label=""];
8->3 [style = bold, label=""];
3->6 [style = bold, label=""];
6->0 [style = bold, label=""];
12->16 [style = bold, label=""];
7->8 [style = bold, label=""];
9->8 [style = bold, label=""];
2->4 [style = bold, label=""];
15->22 [style = bold, label=""];
6->10 [style = dashed, label="0"];
8->3 [style = solid, label="result1"];
3->10 [style = bold, label=""];
13->17 [style = bold, label=""];
18->20 [style = bold, label=""];
1->16 [style = dashed, label="0"];
16->21 [style = bold, label=""];
19->23 [style = bold, label=""];
10->0 [style = bold, label=""];
0->2 [style = solid, label="result2"];
5->21 [style = dashed, label="0"];
23->12 [style = bold, label=""];
4->1 [style = bold, label=""];
14->13 [style = bold, label=""];
4->11 [style = dashed, label="0"];
22->14 [style = bold, label=""];
20->19 [style = bold, label=""];
2->11 [style = bold, label=""];
17->18 [style = bold, label=""];
}
