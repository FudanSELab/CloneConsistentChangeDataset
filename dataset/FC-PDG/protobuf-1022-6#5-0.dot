digraph {
16 [style = filled, label = "request.getRequestedOutputFormat()@@@24@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "doTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "{throw new RuntimeException(\"Request didn't have payload.\")}@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support JSON format.\").build()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setJsonPayload(JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "{try {testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload())}catch (InvalidProtocolBufferException e) break}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Conformance.ConformanceRequest request@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "InvalidProtocolBufferException|IllegalArgumentException e@@@38@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "{throw new RuntimeException(\"Unexpected payload case.\")}@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "{return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support JSON format.\").build()}@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "request.getPayloadCase()@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "{throw new RuntimeException(\"Unexpected request output.\")}@@@28@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "{throw new RuntimeException(\"Unexpected payload case.\")}@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "throw new RuntimeException(\"Unspecified output format.\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "{throw new RuntimeException(\"Unexpected request output.\")}@@@41@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "doTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "doTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Conformance.TestAllTypes testMessage@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSerializeError(e.getMessage()).build()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->10 [style = dotted, label="true"];
8->14 [style = bold, label=""];
16->20 [style = dotted, label="true"];
2->3 [style = dotted, label="true"];
18->20 [style = bold, label=""];
9->11 [style = bold, label=""];
11->12 [style = bold, label=""];
8->0 [style = bold, label=""];
16->18 [style = bold, label=""];
6->11 [style = bold, label=""];
16->18 [style = dotted, label="true"];
7->6 [style = bold, label=""];
16->8 [style = bold, label=""];
5->4 [style = dotted, label="true"];
20->8 [style = bold, label=""];
6->13 [style = bold, label=""];
6->17 [style = bold, label=""];
17->12 [style = bold, label=""];
11->17 [style = bold, label=""];
15->7 [style = bold, label=""];
16->10 [style = bold, label=""];
15->4 [style = dotted, label="true"];
12->13 [style = bold, label=""];
2->3 [style = bold, label=""];
14->1 [style = bold, label=""];
6->9 [style = bold, label=""];
8->1 [style = bold, label=""];
12->16 [style = bold, label=""];
19->4 [style = dotted, label="true"];
3->0 [style = bold, label=""];
6->12 [style = bold, label=""];
16->20 [style = bold, label=""];
8->14 [style = dotted, label="true"];
16->8 [style = dotted, label="true"];
13->8 [style = bold, label=""];
19->7 [style = bold, label=""];
8->1 [style = dotted, label="true"];
10->14 [style = bold, label=""];
8->10 [style = bold, label=""];
5->7 [style = bold, label=""];
1->0 [style = bold, label=""];
}
