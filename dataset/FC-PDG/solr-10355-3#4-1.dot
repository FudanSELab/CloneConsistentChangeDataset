digraph {
4 [style = filled, label = "return matchingStreamExpressions@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "clazzes@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "classSupplier != null@@@7@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "!clazz.isAssignableFrom(functionNames.get(streamExpression.getFunctionName()))@@@8@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Class clazzes@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "clazzes@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "clazzes@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Class clazzes@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<StreamExpression> matchingStreamExpressions = new ArrayList<>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "matchingStreamExpressions.add(streamExpression)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "!clazz.isAssignableFrom(classSupplier.get())@@@9@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "return false@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "return false@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "StreamExpression expression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "getExpressionOperandsRepresentingTypes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<StreamExpression> allStreamExpressions = getExpressionOperands(expression)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "getExpressionOperandsRepresentingTypes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(streamExpression.getFunctionName())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "doesRepresentTypes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Class clazz@@@7@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "functionNames.containsKey(expression.getFunctionName())@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Class clazz@@@8@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "functionNames.containsKey(streamExpression.getFunctionName())@@@6@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "return true@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Class clazz@@@4@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "return matchingStreamExpressions@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "matchingStreamExpressions.add(streamExpression)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "StreamExpression expression@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "Class clazzes@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "!clazz.isAssignableFrom(functionNames.get(expression.getFunctionName()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6->17 [style = bold, label=""];
11->16 [style = bold, label=""];
22->25 [style = bold, label=""];
0->9 [style = bold, label=""];
15->10 [style = bold, label=""];
9->0 [style = dotted, label="true"];
9->0 [style = bold, label=""];
27->25 [style = dotted, label="true"];
7->6 [style = solid, label="expression"];
25->22 [style = bold, label=""];
21->27 [style = bold, label=""];
9->4 [style = bold, label=""];
0->2 [style = bold, label=""];
12->17 [style = bold, label=""];
12->11 [style = bold, label=""];
22->29 [style = bold, label=""];
27->23 [style = dotted, label="true"];
12->18 [style = dotted, label="true"];
12->16 [style = bold, label=""];
19->17 [style = bold, label=""];
2->9 [style = bold, label=""];
25->29 [style = bold, label=""];
11->19 [style = bold, label=""];
15->7 [style = dotted, label="true"];
10->16 [style = solid, label="matchingStreamExpressions"];
2->4 [style = bold, label=""];
10->6 [style = bold, label=""];
19->16 [style = bold, label=""];
15->13 [style = dotted, label="true"];
9->8 [style = dotted, label="true"];
10->4 [style = solid, label="matchingStreamExpressions"];
1->7 [style = dotted, label="true"];
12->11 [style = dotted, label="true"];
27->28 [style = dotted, label="true"];
12->14 [style = dotted, label="true"];
29->20 [style = bold, label=""];
17->12 [style = bold, label=""];
13->6 [style = solid, label="expression"];
0->25 [style = dashed, label="0"];
21->24 [style = dotted, label="true"];
21->26 [style = dotted, label="true"];
12->19 [style = dotted, label="true"];
0->4 [style = bold, label=""];
27->29 [style = dotted, label="true"];
9->2 [style = dotted, label="true"];
9->17 [style = dashed, label="0"];
25->22 [style = dotted, label="true"];
11->17 [style = bold, label=""];
6->9 [style = bold, label=""];
7->26 [style = dashed, label="0"];
1->10 [style = bold, label=""];
1->5 [style = dotted, label="true"];
27->20 [style = bold, label=""];
27->25 [style = bold, label=""];
9->3 [style = dotted, label="true"];
17->12 [style = solid, label="classSupplier"];
}
