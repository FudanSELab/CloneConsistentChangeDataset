digraph {
21 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@25@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "verifyNoMoreInteractions(streamTwo)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "cos.removeOutputStream(streamTwo)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@15b462)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(1)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final OutputStream streamTwo = mock(,\"streamTwo\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(0)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "cos.write(9)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "inOrderStreams.verify(streamOne,times(2)).flush()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne,streamTwo)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "cos.flush()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "cos.close()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "verifyZeroInteractions(streamTwo)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(4)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testNewCompositeOutputStreamWithTwoStreams['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@15b44f,2,3)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(cos.size()).isEqualTo(2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
8->10 [style = bold, label=""];
9->11 [style = bold, label=""];
5->23 [style = bold, label=""];
21->6 [style = bold, label=""];
17->26 [style = solid, label="streamTwo"];
4->19 [style = bold, label=""];
16->7 [style = bold, label=""];
1->3 [style = bold, label=""];
28->7 [style = bold, label=""];
17->2 [style = solid, label="streamTwo"];
25->16 [style = bold, label=""];
11->26 [style = solid, label="streamOne"];
17->10 [style = solid, label="streamTwo"];
15->5 [style = bold, label=""];
17->25 [style = solid, label="streamTwo"];
22->4 [style = bold, label=""];
17->20 [style = solid, label="streamTwo"];
19->1 [style = bold, label=""];
2->0 [style = bold, label=""];
10->26 [style = dashed, label="0"];
18->4 [style = bold, label=""];
17->2 [style = bold, label=""];
22->20 [style = bold, label=""];
10->16 [style = bold, label=""];
23->21 [style = bold, label=""];
27->11 [style = bold, label=""];
24->11 [style = bold, label=""];
3->8 [style = bold, label=""];
0->22 [style = bold, label=""];
20->12 [style = bold, label=""];
12->18 [style = bold, label=""];
11->17 [style = bold, label=""];
11->16 [style = solid, label="streamOne"];
14->15 [style = bold, label=""];
26->28 [style = bold, label=""];
11->2 [style = solid, label="streamOne"];
13->14 [style = bold, label=""];
8->25 [style = bold, label=""];
10->25 [style = dashed, label="0"];
8->26 [style = bold, label=""];
}
