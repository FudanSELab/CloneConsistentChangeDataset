digraph {
10 [style = filled, label = "verify(o,never()).onError(any())@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Single<List<Integer>> result = Flowable.concat(source).toList()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Integer> list = new ArrayList<Integer>(n)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Flowable<Flowable<Integer>> source = Flowable.range(0,n).map(new Function<Integer,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Integer v){return Flowable.just(v)}})@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "inOrder.verify(o).onSuccess(list)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<Integer> list = new ArrayList<>(n)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "i < n / 2@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i < n@@@16@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "concatVeryLongObservableOfObservables['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "concatVeryLongObservableOfObservables['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int i = 0@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "result.subscribe(o)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Observable<Observable<Integer>> source = Observable.range(0,n).map(new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer v){return Observable.just(v)}})@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "InOrder inOrder = inOrder(o)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Single<List<Integer>> result = Observable.concat(source).take(n / 2).toList()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "list.add(i)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "concatVeryLongObservableOfObservablesTakeHalf['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final int n = 10000@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "i++@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->8 [style = solid, label="n"];
5->3 [style = bold, label=""];
13->10 [style = bold, label=""];
19->1 [style = dotted, label="true"];
8->19 [style = dashed, label="0"];
15->2 [style = bold, label=""];
16->18 [style = bold, label=""];
14->13 [style = solid, label="list"];
3->18 [style = dashed, label="0"];
7->1 [style = solid, label="i"];
11->12 [style = bold, label=""];
0->13 [style = solid, label="list"];
9->1 [style = solid, label="i"];
7->8 [style = bold, label=""];
9->8 [style = bold, label=""];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
1->9 [style = bold, label=""];
7->9 [style = solid, label="i"];
7->19 [style = solid, label="i"];
14->7 [style = bold, label=""];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
2->0 [style = solid, label="n"];
5->16 [style = dashed, label="0"];
2->19 [style = solid, label="n"];
8->1 [style = bold, label=""];
8->1 [style = dotted, label="true"];
0->14 [style = dashed, label="0"];
19->1 [style = bold, label=""];
18->4 [style = bold, label=""];
19->13 [style = bold, label=""];
17->2 [style = bold, label=""];
9->19 [style = solid, label="i"];
19->9 [style = dotted, label="true"];
12->14 [style = bold, label=""];
9->19 [style = bold, label=""];
2->14 [style = solid, label="n"];
4->12 [style = solid, label="o"];
9->8 [style = solid, label="i"];
4->11 [style = solid, label="o"];
8->9 [style = dotted, label="true"];
4->11 [style = bold, label=""];
7->8 [style = solid, label="i"];
7->19 [style = bold, label=""];
8->13 [style = bold, label=""];
2->5 [style = bold, label=""];
2->16 [style = bold, label=""];
}
