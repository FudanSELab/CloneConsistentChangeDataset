digraph {
21 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_1,1,TASK_0_0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_2,1,TASK_0_1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "taskAssignor.assign()@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final StickyTaskAssignor firstAssignor = createTaskAssignor(TASK_0_0,TASK_0_1,TASK_0_2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final StickyTaskAssignor secondAssignor = createTaskAssignor(TASK_0_0,TASK_0_1,TASK_0_2)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_2,1,TASK_0_2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(clients.get(UUID_1).activeTasks(),hasItems(TASK_0_1))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "firstAssignor.assign()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "shouldNotMigrateActiveTaskToOtherProcess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(clients.get(UUID_1).activeTasks(),hasItems(TASK_0_0))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_1,1,TASK_0_1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "clients.clear()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_2,1,TASK_0_2,TASK_0_3)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(clients.get(UUID_1).activeTasks(),hasItems(TASK_0_0,TASK_0_1))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "shouldNotMoveAnyTasksWhenNewTasksAdded['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(allActiveTasks(),equalTo(asList(TASK_0_0,TASK_0_1,TASK_0_2)))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(probingRebalanceNeeded,is(false))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "secondAssignor.assign()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "shouldNotMoveAnyTasksWhenNewTasksAdded['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_1,1,TASK_0_0,TASK_0_1)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(allActiveTasks(),equalTo(asList(TASK_0_0,TASK_0_1,TASK_0_2)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(clients.get(UUID_2).activeTasks(),hasItems(TASK_0_2,TASK_0_3))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final boolean probingRebalanceNeeded = assign(TASK_0_3,TASK_0_1,TASK_0_4,TASK_0_2,TASK_0_0,TASK_0_5)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(clients.get(UUID_2).activeTasks(),hasItems(TASK_0_2))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final StickyTaskAssignor taskAssignor = createTaskAssignor(TASK_0_3,TASK_0_1,TASK_0_4,TASK_0_2,TASK_0_0,TASK_0_5)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertThat(clients.get(UUID_2).activeTasks(),hasItems(TASK_0_1))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
10->20 [style = bold, label=""];
16->18 [style = bold, label=""];
22->15 [style = bold, label=""];
15->13 [style = bold, label=""];
0->6 [style = bold, label=""];
9->4 [style = bold, label=""];
3->24 [style = dashed, label="0"];
1->19 [style = dashed, label="0"];
14->22 [style = bold, label=""];
20->14 [style = bold, label=""];
21->24 [style = bold, label=""];
0->11 [style = dashed, label="0"];
3->0 [style = bold, label=""];
4->12 [style = dashed, label="0"];
19->16 [style = bold, label=""];
7->9 [style = bold, label=""];
6->4 [style = bold, label=""];
13->17 [style = bold, label=""];
8->5 [style = bold, label=""];
18->10 [style = bold, label=""];
3->7 [style = bold, label=""];
24->11 [style = bold, label=""];
7->9 [style = solid, label="probingRebalanceNeeded"];
5->21 [style = dashed, label="0"];
23->12 [style = bold, label=""];
4->1 [style = bold, label=""];
12->19 [style = bold, label=""];
0->7 [style = dashed, label="0"];
11->23 [style = bold, label=""];
6->23 [style = dashed, label="0"];
25->21 [style = bold, label=""];
2->5 [style = bold, label=""];
}
