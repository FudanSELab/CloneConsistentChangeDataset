digraph {
12 [style = filled, label = "testPartialApplyForBadOps['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "MigrationSet migrationSet = MigrationSet.build(\"1\",Collections.singletonList(migration))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "CuratorOp op1 = client.transactionOp().create().forPath(\"/test\",\"something\".getBytes())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "complete(manager.migrate(migrationSet))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testTransactionForBadOps['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertNull(client.unwrap().checkExists().forPath(\"/test\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.fail(\"Should throw\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(client.unwrap().getData().forPath(\"/test\"),\"something\".getBytes())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c/d\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.fail(\"Should throw\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Migration m2 = null@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testPartialApplyForBadOps['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Migration m1 = null@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertNull(client.unwrap().checkExists().forPath(\"/test\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "MigrationSet migrationSet = MigrationSet.build(\"1\",Arrays.asList(m1,m2))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Throwable e@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "CuratorOp op1 = client.transactionOp().create().forPath(\"/test2\",\"something\".getBytes())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Migration migration = null@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
8->16 [style = bold, label=""];
0->6 [style = bold, label=""];
7->16 [style = dashed, label="0"];
1->19 [style = dashed, label="0"];
7->11 [style = dashed, label="0"];
6->3 [style = solid, label="migrationSet"];
20->3 [style = bold, label=""];
9->10 [style = bold, label=""];
3->16 [style = bold, label=""];
10->13 [style = dashed, label="0"];
12->1 [style = bold, label=""];
17->19 [style = bold, label=""];
1->9 [style = bold, label=""];
18->20 [style = bold, label=""];
9->14 [style = dashed, label="0"];
19->14 [style = bold, label=""];
15->8 [style = dotted, label="true"];
3->2 [style = bold, label=""];
8->5 [style = bold, label=""];
8->5 [style = dotted, label="true"];
10->0 [style = bold, label=""];
10->6 [style = solid, label="m1"];
0->18 [style = dashed, label="0"];
5->7 [style = bold, label=""];
4->1 [style = bold, label=""];
5->11 [style = bold, label=""];
2->7 [style = bold, label=""];
14->13 [style = bold, label=""];
18->20 [style = solid, label="migrationSet"];
0->6 [style = solid, label="m2"];
13->18 [style = solid, label="migration"];
2->11 [style = bold, label=""];
15->8 [style = bold, label=""];
13->18 [style = bold, label=""];
}
