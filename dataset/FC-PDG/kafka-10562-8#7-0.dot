digraph {
13 [style = filled, label = "topology.addSink(\"sink\",\"output\",new StringSerializer(),new StringSerializer(),\"recursiveProcessor\")@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final List<KeyValue<String,String>> events = globalTopic.readKeyValuesToList()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(events,is(Arrays.asList(new KeyValue<>(\"A\",\"alpha\"),new KeyValue<>(\"A\",\"recurse-alpha\"))))@@@44@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "topology.addSink(\"globalSink\",\"global-topic\",new StringSerializer(),new StringSerializer(),\"recursiveProcessor\")@@@35@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "in.pipeInput(\"B\",\"beta\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final TestOutputTopic<String,String> globalTopic = topologyTestDriver.createOutputTopic(\"global-topic\",new StringDeserializer(),new StringDeserializer())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final Topology topology = new Topology()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "properties.setProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,\"dummy\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "topology.addSource(\"source\",new StringDeserializer(),new StringDeserializer(),\"input\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(events,is(Arrays.asList(new KeyValue<>(\"B\",\"beta\"),new KeyValue<>(\"B\",\"recurse-beta\"))))@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final List<KeyValue<String,String>> events = out.readKeyValuesToList()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final TestInputTopic<String,String> in = topologyTestDriver.createInputTopic(\"input\",new StringSerializer(),new StringSerializer())@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(keyValueStore,notNullValue())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "properties.setProperty(StreamsConfig.APPLICATION_ID_CONFIG,\"dummy\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Properties properties = new Properties()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "topology.addProcessor(\"recursiveProcessor\",null,\"source\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "in.pipeInput(\"A\",\"alpha\")@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "topology.addGlobalStore(Stores.keyValueStoreBuilder(Stores.inMemoryKeyValueStore(\"global-store\"),Serdes.String(),Serdes.String()).withLoggingDisabled(),\"globalSource\",new StringDeserializer(),new StringDeserializer(),\"global-topic\",\"globalProcessor\",null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "shouldApplyGlobalUpdatesCorrectlyInRecursiveTopologies['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final KeyValueStore<String,String> keyValueStore = topologyTestDriver.getKeyValueStore(\"global-store\")@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "shouldEnqueueLaterOutputsAfterEarlierOnes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "shouldApplyGlobalUpdatesCorrectlyInRecursiveTopologies['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "topology.addSink(\"sink\",\"output\",new StringSerializer(),new StringSerializer(),\"recursiveProcessor\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "topology.addSink(\"recursiveSink\",\"input\",new StringSerializer(),new StringSerializer(),\"recursiveProcessor\")@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(keyValueStore.get(\"A\"),is(\"recurse-alpha\"))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final TestInputTopic<String,String> in = topologyTestDriver.createInputTopic(\"input\",new StringSerializer(),new StringSerializer())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final TestOutputTopic<String,String> out = topologyTestDriver.createOutputTopic(\"output\",new StringDeserializer(),new StringDeserializer())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25->23 [style = bold, label=""];
1->25 [style = dashed, label="0"];
15->22 [style = dashed, label="0"];
2->0 [style = solid, label="keyValueStore"];
13->7 [style = bold, label=""];
15->1 [style = bold, label=""];
14->18 [style = bold, label=""];
23->24 [style = bold, label=""];
12->14 [style = bold, label=""];
23->24 [style = solid, label="events"];
12->4 [style = bold, label=""];
18->13 [style = bold, label=""];
14->13 [style = bold, label=""];
19->15 [style = bold, label=""];
0->24 [style = dashed, label="0"];
16->21 [style = solid, label="events"];
11->16 [style = bold, label=""];
7->22 [style = bold, label=""];
26->9 [style = bold, label=""];
8->3 [style = bold, label=""];
10->19 [style = bold, label=""];
6->9 [style = bold, label=""];
0->5 [style = solid, label="keyValueStore"];
10->7 [style = bold, label=""];
16->21 [style = bold, label=""];
3->12 [style = bold, label=""];
5->11 [style = bold, label=""];
9->17 [style = bold, label=""];
22->25 [style = bold, label=""];
2->23 [style = dashed, label="0"];
4->14 [style = bold, label=""];
17->8 [style = bold, label=""];
7->15 [style = bold, label=""];
2->0 [style = bold, label=""];
20->9 [style = bold, label=""];
0->5 [style = bold, label=""];
13->10 [style = bold, label=""];
1->2 [style = bold, label=""];
11->16 [style = solid, label="events"];
}
