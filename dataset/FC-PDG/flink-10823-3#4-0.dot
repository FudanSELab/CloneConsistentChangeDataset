digraph {
4 [style = filled, label = "validateWrongBackoffDelay['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Elasticsearch6DynamicSinkFactory sinkFactory = new Elasticsearch6DynamicSinkFactory()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "thrown.expectMessage(\"Invalid value for option 'sink.bulk-flush.backoff.delay'.\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "validateWrongBackoffDelay['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "sinkFactory.createDynamicTableSink(context().withSchema(TableSchema.builder().field(\"a\",DataTypes.BIGINT().notNull()).field(\"b\",DataTypes.ARRAY(DataTypes.BIGINT().notNull()).notNull()).field(\"c\",DataTypes.MAP(DataTypes.BIGINT(),DataTypes.STRING()).notNull()).field(\"d\",DataTypes.MULTISET(DataTypes.BIGINT().notNull()).notNull()).field(\"e\",DataTypes.ROW(DataTypes.FIELD(\"a\",DataTypes.BIGINT())).notNull()).field(\"f\",DataTypes.RAW(Types.BIG_INT).notNull()).field(\"g\",DataTypes.BYTES().notNull()).primaryKey(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\").build()).withOption(ElasticsearchOptions.INDEX_OPTION.key(),\"MyIndex\").withOption(ElasticsearchOptions.HOSTS_OPTION.key(),\"http://localhost:1234\").withOption(ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(),\"1s\").build())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Elasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "thrown.expectMessage(\"Invalid value for option 'sink.bulk-flush.back-off.delay'.\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "thrown.expect()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "validatePrimaryKeyOnIllegalColumn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "sinkFactory.createDynamicTableSink(context().withSchema(TableSchema.builder().field(\"a\",DataTypes.TIME()).build()).withOption(ElasticsearchOptions.INDEX_OPTION.key(),\"MyIndex\").withOption(ElasticsearchOptions.HOSTS_OPTION.key(),\"http://localhost:1234\").withOption(ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(),\"-1s\").build())@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "thrown.expectMessage(\"The table has a primary key on columns of illegal types: \" + \"(ARRAY, MAP, MULTISET, ROW, RAW, VARBINARY(.\" + \" Elasticsearch sink does not support primary keys on columns of types: \" + \"(ARRAY, MAP, MULTISET, STRUCTURED_TYPE, ROW, RAW, BINARY, VARBINARY(.\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
7->9 [style = bold, label=""];
3->5 [style = dashed, label="0"];
5->1 [style = bold, label=""];
1->8 [style = dashed, label="0"];
0->10 [style = bold, label=""];
2->0 [style = bold, label=""];
3->10 [style = dashed, label="0"];
4->2 [style = bold, label=""];
9->0 [style = bold, label=""];
10->8 [style = bold, label=""];
3->1 [style = bold, label=""];
2->9 [style = dashed, label="0"];
0->5 [style = bold, label=""];
6->2 [style = bold, label=""];
}
