digraph {
22 [style = filled, label = "testOrientationParsing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Mapper fieldMapper = mapper.mappers().getMapper(\"field\")@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_shape\").field(\"orientation\",\"right\").endObject().endObject().endObject().endObject())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "fieldMapper = mapper.mappers().getMapper(\"field\")@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(orientation,equalTo(ShapeBuilder.Orientation.CLOCKWISE))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ShapeBuilder.Orientation orientation = ((GeoShapeWithDocValuesFieldMapper)fieldMapper).fieldType().orientation()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ShapeBuilder.Orientation orientation = ((GeoShapeFieldMapper)fieldMapper).fieldType().orientation()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(orientation,equalTo(ShapeBuilder.Orientation.CCW))@@@18@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "orientation = ((GeoShapeWithDocValuesFieldMapper)fieldMapper).fieldType().orientation()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(orientation,equalTo(ShapeBuilder.Orientation.RIGHT))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(orientation,equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_shape\").field(\"orientation\",\"left\").endObject().endObject().endObject().endObject())@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "orientation = ((GeoShapeFieldMapper)fieldMapper).fieldType().orientation()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "fieldMapper = defaultMapper.mappers().getMapper(\"location\")@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(orientation,equalTo(ShapeBuilder.Orientation.CLOCKWISE))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(orientation,equalTo(ShapeBuilder.Orientation.LEFT))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(orientation,equalTo(ShapeBuilder.Orientation.CW))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testOrientationParsing['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testOrientationParsing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(orientation,equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(orientation,equalTo(ShapeBuilder.Orientation.RIGHT))@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->2 [style = solid, label="orientation"];
26->6 [style = bold, label=""];
22->19 [style = bold, label=""];
8->14 [style = bold, label=""];
15->16 [style = solid, label="orientation"];
26->16 [style = solid, label="orientation"];
11->20 [style = bold, label=""];
27->12 [style = bold, label=""];
10->28 [style = dashed, label="0"];
2->11 [style = bold, label=""];
20->21 [style = solid, label="fieldMapper"];
0->18 [style = solid, label="orientation"];
12->1 [style = bold, label=""];
28->4 [style = solid, label="orientation"];
10->15 [style = solid, label="orientation"];
26->6 [style = solid, label="orientation"];
28->26 [style = solid, label="orientation"];
19->23 [style = bold, label=""];
15->6 [style = bold, label=""];
4->2 [style = bold, label=""];
18->6 [style = solid, label="orientation"];
28->4 [style = bold, label=""];
0->10 [style = bold, label=""];
12->1 [style = solid, label="mapping"];
6->16 [style = bold, label=""];
20->21 [style = bold, label=""];
0->25 [style = dashed, label="0"];
0->10 [style = solid, label="orientation"];
25->28 [style = bold, label=""];
23->17 [style = solid, label="fieldMapper"];
7->0 [style = solid, label="fieldMapper"];
14->24 [style = dashed, label="0"];
26->5 [style = solid, label="orientation"];
10->4 [style = bold, label=""];
3->12 [style = bold, label=""];
21->18 [style = bold, label=""];
8->24 [style = solid, label="fieldMapper"];
7->0 [style = bold, label=""];
7->25 [style = bold, label=""];
11->13 [style = bold, label=""];
28->11 [style = solid, label="orientation"];
18->15 [style = solid, label="orientation"];
13->9 [style = solid, label="mapping"];
16->5 [style = bold, label=""];
18->14 [style = solid, label="orientation"];
10->11 [style = solid, label="orientation"];
7->25 [style = solid, label="fieldMapper"];
10->2 [style = solid, label="orientation"];
13->9 [style = bold, label=""];
15->6 [style = solid, label="orientation"];
1->7 [style = bold, label=""];
9->8 [style = bold, label=""];
8->14 [style = solid, label="fieldMapper"];
18->14 [style = bold, label=""];
8->24 [style = bold, label=""];
23->17 [style = bold, label=""];
17->0 [style = bold, label=""];
14->15 [style = bold, label=""];
24->26 [style = bold, label=""];
15->26 [style = dashed, label="0"];
10->4 [style = solid, label="orientation"];
15->5 [style = solid, label="orientation"];
0->4 [style = solid, label="orientation"];
28->2 [style = solid, label="orientation"];
}
