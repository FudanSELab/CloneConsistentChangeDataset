digraph {
32 [style = filled, label = "planner.addRelTraitDef(COLLATION_TRAIT_DEF)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "testCollationConversion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testTraitConversion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(input2 instanceof LeafRel)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertTrue(result.getTraitSet().contains(ROOT_COLLATION))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "planner.addRule(ExpandConversionRule.INSTANCE)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final RelNode convertedRel = planner.changeTraits(singleRel,cluster.traitSetOf(PHYS_CALLING_CONVENTION))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(result.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final VolcanoPlanner planner = new VolcanoPlanner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "RelNode result = planner.chooseDelegate().findBestExp()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "planner.addRule(new RandomSingleTraitRule())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(input.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertTrue(result.getTraitSet().contains(ROOT_COLLATION))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "planner.addRelTraitDef(NEW_TRAIT_DEF_INSTANCE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(input.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RelNode input = result.getInput(0)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final RelNode input2 = input.getInput(0)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(input2.getTraitSet().contains(LEAF_COLLATION))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertTrue(input.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "planner.addRule(new LeafTraitRule())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final RelNode result = planner.chooseDelegate().findBestExp()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(input.getTraitSet().contains(SIMPLE_DISTRIBUTION_RANDOM))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(input2.getTraitSet().contains(SIMPLE_DISTRIBUTION_SINGLETON))@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final NoneSingleRel singleRel = new NoneSingleRel(cluster,leafRel)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final RelNode convertedRel = planner.changeTraits(singleRel,cluster.traitSetOf(PHYS_CALLING_CONVENTION).plus(ROOT_COLLATION))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(result.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testTraitConversion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "final RelNode input = result.getInput(0)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "planner.addRelTraitDef(ConventionTraitDef.INSTANCE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "planner.addRule(new SingleNodeRule())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertTrue(result instanceof RootSingleRel)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final RelOptCluster cluster = newCluster(planner)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "planner.addRule(new SingleLeafTraitRule())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final NoneLeafRel leafRel = new NoneLeafRel(cluster,\"a\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "planner.setTopDownOpt(false)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertTrue(input2 instanceof SingletonLeafRel)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertTrue(input instanceof PhysicalSort)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "planner.setRoot(convertedRel)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(result instanceof RandomSingleRel)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->28 [style = solid, label="input"];
15->10 [style = bold, label=""];
27->36 [style = bold, label=""];
16->7 [style = solid, label="input"];
11->34 [style = dashed, label="0"];
10->19 [style = bold, label=""];
19->20 [style = bold, label=""];
11->21 [style = bold, label=""];
18->11 [style = bold, label=""];
2->3 [style = solid, label="planner"];
16->7 [style = bold, label=""];
19->29 [style = dashed, label="0"];
15->32 [style = dashed, label="0"];
31->12 [style = solid, label="convertedRel"];
20->3 [style = bold, label=""];
4->2 [style = bold, label=""];
12->35 [style = bold, label=""];
9->7 [style = bold, label=""];
32->30 [style = bold, label=""];
25->2 [style = bold, label=""];
9->16 [style = bold, label=""];
30->29 [style = bold, label=""];
1->23 [style = bold, label=""];
31->12 [style = bold, label=""];
38->2 [style = bold, label=""];
37->9 [style = bold, label=""];
3->5 [style = solid, label="cluster"];
33->23 [style = bold, label=""];
18->35 [style = dashed, label="0"];
7->22 [style = bold, label=""];
29->20 [style = bold, label=""];
26->27 [style = bold, label=""];
3->5 [style = bold, label=""];
21->9 [style = bold, label=""];
5->0 [style = solid, label="leafRel"];
0->8 [style = solid, label="singleRel"];
10->30 [style = dashed, label="0"];
13->27 [style = dashed, label="0"];
28->33 [style = bold, label=""];
7->28 [style = bold, label=""];
5->0 [style = bold, label=""];
34->37 [style = bold, label=""];
3->0 [style = solid, label="cluster"];
23->13 [style = bold, label=""];
13->26 [style = bold, label=""];
7->28 [style = dashed, label="0"];
6->36 [style = dashed, label="0"];
18->11 [style = solid, label="result"];
23->17 [style = solid, label="input2"];
2->14 [style = bold, label=""];
12->18 [style = bold, label=""];
0->8 [style = bold, label=""];
0->31 [style = solid, label="singleRel"];
35->34 [style = solid, label="result"];
23->17 [style = bold, label=""];
17->26 [style = dashed, label="0"];
14->15 [style = bold, label=""];
17->13 [style = bold, label=""];
22->1 [style = bold, label=""];
8->31 [style = dashed, label="0"];
13->6 [style = bold, label=""];
8->12 [style = solid, label="convertedRel"];
35->34 [style = bold, label=""];
20->24 [style = bold, label=""];
14->32 [style = bold, label=""];
13->26 [style = solid, label="input2"];
24->3 [style = bold, label=""];
8->12 [style = bold, label=""];
0->31 [style = bold, label=""];
}
