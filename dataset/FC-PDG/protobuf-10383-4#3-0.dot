digraph {
18 [style = filled, label = "int limit = input.pushLimit(1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "input.skipRawBytes(1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "input.popLimit(limit)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(inputType.name(),5,input.readRawByte())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "input.popLimit(limit)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "input.popLimit(limit)@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int limit = input.pushLimit(4)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testSkipRawBytesPastEndOfBufferWithLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testSkipRawBytesPastEndOfBufferWithLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "CodedInputStream input = inputType.newDecoder(rawBytes)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "input.skipRawBytes(3)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "CodedInputStream input = CodedInputStream.newInstance(new SmallBlockInputStream(rawBytes,3))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(2,input.readRawByte())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(inputType.name(),input.isAtEnd())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEquals(inputType.name(),1,input.readRawByte())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testSkipRawBytesBug['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int limit = input.pushLimit(4)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "input.skipRawBytes(3)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "byte(( rawBytes = new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@3833f7@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "CodedInputStream input = CodedInputStream.newInstance(rawBytes)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->10 [style = bold, label=""];
8->19 [style = dashed, label="0"];
4->14 [style = bold, label=""];
12->5 [style = bold, label=""];
4->6 [style = bold, label=""];
2->3 [style = bold, label=""];
11->4 [style = bold, label=""];
18->17 [style = bold, label=""];
6->0 [style = bold, label=""];
7->4 [style = bold, label=""];
6->14 [style = dashed, label="0"];
16->19 [style = bold, label=""];
2->13 [style = bold, label=""];
8->9 [style = dashed, label="0"];
5->1 [style = bold, label=""];
5->10 [style = dashed, label="0"];
2->13 [style = dashed, label="0"];
3->8 [style = bold, label=""];
4->6 [style = solid, label="rawBytes"];
18->16 [style = solid, label="limit"];
0->3 [style = solid, label="limit"];
8->9 [style = bold, label=""];
5->8 [style = solid, label="limit"];
15->4 [style = bold, label=""];
4->12 [style = bold, label=""];
0->18 [style = dashed, label="0"];
14->18 [style = bold, label=""];
10->2 [style = bold, label=""];
1->2 [style = bold, label=""];
9->12 [style = bold, label=""];
13->8 [style = bold, label=""];
4->14 [style = solid, label="rawBytes"];
4->12 [style = solid, label="rawBytes"];
17->16 [style = bold, label=""];
0->5 [style = bold, label=""];
}
