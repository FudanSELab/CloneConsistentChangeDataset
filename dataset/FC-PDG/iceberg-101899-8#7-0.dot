digraph {
16 [style = filled, label = "assertBounds(1,Types.IntegerType.get(),null,null,metrics)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertCounts(7,1L,0L,1L,metrics)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(1L,(long)metrics.recordCount())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertBounds(5,Types.LongType.get(),null,null,metrics)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertBounds(7,Types.DoubleType.get(),null,null,metrics)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Metrics metrics = getMetrics(NESTED_SCHEMA,MetricsConfig.fromProperties(ImmutableMap.of(\"write.metadata.metrics.default\",\"counts\")),buildNestedTestRecord())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testFullMetricsMode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertCounts(5,1L,0L,metrics)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertBounds(5,Types.LongType.get(),20L,20L,metrics)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertBounds(3,Types.LongType.get(),100L,100L,metrics)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertBounds(7,Types.DoubleType.get(),null,null,metrics)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertBounds(7,Types.DoubleType.get(),Double.NaN,Double.NaN,metrics)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertBounds(1,Types.IntegerType.get(),Integer.MAX_VALUE,Integer.MAX_VALUE,metrics)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertBounds(6,Types.BinaryType.get(),null,null,metrics)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertBounds(6,Types.BinaryType.get(),ByteBuffer.wrap(\"A\".getBytes()),ByteBuffer.wrap(\"A\".getBytes()),metrics)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertCounts(3,1L,0L,metrics)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testFullMetricsMode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertCounts(6,1L,0L,metrics)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertCounts(1,1L,0L,metrics)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(metrics.columnSizes().values().stream().allMatch(null))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Metrics metrics = getMetrics(NESTED_SCHEMA,MetricsConfig.fromProperties(ImmutableMap.of(\"write.metadata.metrics.default\",\"full\")),buildNestedTestRecord())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testCountsMetricsMode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertBounds(3,Types.LongType.get(),null,null,metrics)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17->5 [style = bold, label=""];
20->17 [style = bold, label=""];
17->11 [style = solid, label="metrics"];
16->11 [style = bold, label=""];
17->18 [style = solid, label="metrics"];
3->1 [style = bold, label=""];
1->14 [style = dashed, label="0"];
7->10 [style = bold, label=""];
9->2 [style = bold, label=""];
0->6 [style = bold, label=""];
8->19 [style = bold, label=""];
9->18 [style = dashed, label="0"];
3->14 [style = bold, label=""];
6->1 [style = solid, label="metrics"];
17->7 [style = solid, label="metrics"];
21->8 [style = bold, label=""];
17->8 [style = solid, label="metrics"];
15->6 [style = bold, label=""];
6->8 [style = solid, label="metrics"];
6->17 [style = dashed, label="0"];
17->3 [style = solid, label="metrics"];
6->13 [style = solid, label="metrics"];
13->19 [style = dashed, label="0"];
18->2 [style = bold, label=""];
11->9 [style = bold, label=""];
3->22 [style = bold, label=""];
2->4 [style = bold, label=""];
17->2 [style = solid, label="metrics"];
17->21 [style = solid, label="metrics"];
17->22 [style = solid, label="metrics"];
12->7 [style = bold, label=""];
11->18 [style = bold, label=""];
4->21 [style = dashed, label="0"];
1->22 [style = dashed, label="0"];
6->11 [style = solid, label="metrics"];
6->5 [style = bold, label=""];
13->3 [style = bold, label=""];
5->12 [style = bold, label=""];
2->21 [style = bold, label=""];
7->16 [style = bold, label=""];
6->4 [style = solid, label="metrics"];
6->10 [style = solid, label="metrics"];
6->3 [style = solid, label="metrics"];
4->8 [style = bold, label=""];
6->7 [style = solid, label="metrics"];
17->19 [style = solid, label="metrics"];
17->16 [style = solid, label="metrics"];
10->16 [style = dashed, label="0"];
6->9 [style = solid, label="metrics"];
19->3 [style = bold, label=""];
6->14 [style = solid, label="metrics"];
6->2 [style = solid, label="metrics"];
8->13 [style = bold, label=""];
10->11 [style = bold, label=""];
}
