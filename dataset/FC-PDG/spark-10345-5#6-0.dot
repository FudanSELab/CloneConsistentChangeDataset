digraph {
22 [style = filled, label = "return null@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final int size = (int)offsetAndSize@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "return null@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Platform.copyMemory(baseObject,baseOffset + offset,bytes,Platform.BYTE_ARRAY_OFFSET,size)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "final byte(( bytes = new byte((((@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "getArray['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "final int offset = getElementOffset(ordinal)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertIndexIsValid(ordinal)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "offset < 0@@@5@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "getBinary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "return bytes@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final int size = getElementSize(offset,ordinal)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final UnsafeArrayData array = new UnsafeArrayData()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "array.pointTo(baseObject,baseOffset + offset,size)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "return null@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "final int size = (int)offsetAndSize@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "return array@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "getArray['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
20->25 [style = solid, label="offsetAndSize"];
3->14 [style = solid, label="ordinal"];
17->25 [style = bold, label=""];
3->1 [style = solid, label="ordinal"];
15->10 [style = bold, label=""];
10->12 [style = dotted, label="true"];
20->17 [style = bold, label=""];
24->25 [style = dotted, label="false"];
23->16 [style = solid, label="bytes"];
24->17 [style = dotted, label="false"];
10->14 [style = bold, label=""];
1->14 [style = dashed, label="0"];
2->0 [style = solid, label="array"];
23->21 [style = solid, label="bytes"];
25->23 [style = bold, label=""];
3->18 [style = dashed, label="0"];
20->17 [style = solid, label="offsetAndSize"];
19->18 [style = dotted, label="true"];
25->21 [style = solid, label="size"];
7->8 [style = bold, label=""];
24->22 [style = bold, label=""];
2->4 [style = bold, label=""];
1->7 [style = bold, label=""];
13->11 [style = bold, label=""];
11->2 [style = bold, label=""];
24->20 [style = dotted, label="false"];
3->10 [style = solid, label="ordinal"];
4->0 [style = bold, label=""];
9->6 [style = bold, label=""];
19->24 [style = bold, label=""];
6->12 [style = dashed, label="0"];
24->20 [style = bold, label=""];
15->3 [style = dotted, label="true"];
8->13 [style = dashed, label="0"];
3->6 [style = solid, label="ordinal"];
6->1 [style = bold, label=""];
5->2 [style = bold, label=""];
7->5 [style = bold, label=""];
14->11 [style = solid, label="offsetAndSize"];
1->5 [style = solid, label="offset"];
8->5 [style = bold, label=""];
23->21 [style = bold, label=""];
5->11 [style = dashed, label="0"];
14->13 [style = solid, label="offsetAndSize"];
17->21 [style = solid, label="offset"];
10->12 [style = bold, label=""];
6->24 [style = dashed, label="0"];
24->22 [style = dotted, label="true"];
12->14 [style = bold, label=""];
21->16 [style = bold, label=""];
1->4 [style = solid, label="offset"];
14->13 [style = bold, label=""];
9->3 [style = dotted, label="true"];
3->5 [style = solid, label="ordinal"];
18->20 [style = solid, label="ordinal"];
11->4 [style = solid, label="size"];
7->8 [style = dotted, label="true"];
24->23 [style = dotted, label="false"];
24->16 [style = dotted, label="false"];
1->7 [style = solid, label="offset"];
5->4 [style = solid, label="size"];
24->21 [style = dotted, label="false"];
13->4 [style = solid, label="offset"];
18->24 [style = solid, label="ordinal"];
}
