digraph {
11 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,false))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "kafkaProducer.initTransactions()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "kafkaProducer.commitTransaction()@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "maxTotalRows = 3L@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "i++@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L,1,0L))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@71@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,4L,1,2L))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "i++@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "kafkaProducer.send(record).get()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Thread.sleep(10)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Thread.sleep(10)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "testIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testIncrementalHandOffMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
63 [style = filled, label = "kafkaProducer.commitTransaction()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "kafkaProducer.beginTransaction()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "kafkaProducer.initTransactions()@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets) || checkpoint2.getPartitionSequenceNumberMap().equals(currentOffsets))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "i < records.size()@@@41@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@47@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,false))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i < numToAdd@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int i = numToAdd@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "kafkaProducer.beginTransaction()@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "int i = 0@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,nextOffsets)))))@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,nextOffsets)))))@@@53@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20->24 [style = solid, label="desc4"];
63->15 [style = bold, label=""];
70->66 [style = bold, label=""];
25->53 [style = solid, label="startPartitions"];
61->46 [style = solid, label="task"];
32->37 [style = bold, label=""];
7->24 [style = solid, label="desc1"];
5->9 [style = bold, label=""];
15->53 [style = solid, label="consumerProps"];
28->20 [style = bold, label=""];
53->47 [style = solid, label="task"];
7->19 [style = solid, label="desc1"];
10->54 [style = bold, label=""];
25->7 [style = solid, label="startPartitions"];
40->25 [style = bold, label=""];
39->14 [style = bold, label=""];
14->17 [style = bold, label=""];
38->0 [style = solid, label="desc7"];
57->59 [style = bold, label=""];
21->71 [style = bold, label=""];
53->46 [style = solid, label="task"];
5->48 [style = dotted, label="true"];
25->44 [style = bold, label=""];
22->30 [style = bold, label=""];
21->7 [style = solid, label="currentOffsets"];
68->21 [style = bold, label=""];
46->0 [style = solid, label="desc2"];
24->30 [style = solid, label="desc4"];
25->54 [style = solid, label="task"];
6->26 [style = dotted, label="true"];
33->43 [style = solid, label="desc1"];
21->39 [style = solid, label="currentOffsets"];
17->14 [style = bold, label=""];
33->46 [style = bold, label=""];
25->20 [style = solid, label="task"];
18->21 [style = dashed, label="0"];
66->50 [style = bold, label=""];
28->24 [style = solid, label="desc3"];
52->31 [style = solid, label="nextOffsets"];
46->43 [style = solid, label="desc6"];
49->15 [style = dashed, label="0"];
50->66 [style = bold, label=""];
50->53 [style = solid, label="endPartitions"];
65->25 [style = solid, label="consumerProps"];
52->10 [style = solid, label="nextOffsets"];
46->27 [style = solid, label="desc2"];
61->47 [style = solid, label="task"];
21->35 [style = bold, label=""];
25->47 [style = solid, label="task"];
40->25 [style = solid, label="endPartitions"];
45->29 [style = solid, label="i"];
51->74 [style = dashed, label="0"];
47->27 [style = solid, label="desc7"];
33->0 [style = solid, label="desc1"];
0->3 [style = bold, label=""];
47->0 [style = solid, label="desc3"];
13->34 [style = bold, label=""];
50->61 [style = solid, label="endPartitions"];
53->12 [style = solid, label="task"];
9->51 [style = bold, label=""];
66->13 [style = bold, label=""];
21->10 [style = solid, label="currentOffsets"];
75->25 [style = solid, label="startPartitions"];
69->7 [style = bold, label=""];
56->62 [style = bold, label=""];
61->13 [style = bold, label=""];
44->49 [style = bold, label=""];
51->16 [style = bold, label=""];
26->6 [style = bold, label=""];
7->55 [style = bold, label=""];
61->33 [style = solid, label="task"];
27->22 [style = bold, label=""];
61->38 [style = solid, label="task"];
45->29 [style = bold, label=""];
29->52 [style = bold, label=""];
46->24 [style = solid, label="desc6"];
53->19 [style = solid, label="task"];
4->56 [style = bold, label=""];
38->42 [style = solid, label="desc7"];
35->34 [style = dashed, label="0"];
65->72 [style = bold, label=""];
53->24 [style = solid, label="task"];
43->27 [style = bold, label=""];
14->57 [style = bold, label=""];
38->0 [style = bold, label=""];
1->26 [style = solid, label="i"];
21->35 [style = solid, label="currentOffsets"];
2->45 [style = solid, label="i"];
18->7 [style = bold, label=""];
19->38 [style = bold, label=""];
44->67 [style = dashed, label="0"];
29->11 [style = bold, label=""];
9->74 [style = bold, label=""];
19->23 [style = solid, label="desc6"];
12->30 [style = solid, label="desc5"];
39->37 [style = bold, label=""];
73->5 [style = bold, label=""];
24->12 [style = bold, label=""];
62->1 [style = bold, label=""];
10->55 [style = dashed, label="0"];
54->38 [style = solid, label="desc2"];
25->70 [style = bold, label=""];
72->75 [style = bold, label=""];
31->32 [style = bold, label=""];
41->68 [style = bold, label=""];
35->39 [style = bold, label=""];
53->33 [style = solid, label="task"];
28->0 [style = solid, label="desc3"];
25->70 [style = solid, label="task"];
52->55 [style = solid, label="nextOffsets"];
4->6 [style = solid, label="numToAdd"];
7->54 [style = bold, label=""];
24->0 [style = solid, label="desc4"];
6->15 [style = bold, label=""];
49->50 [style = bold, label=""];
23->42 [style = bold, label=""];
60->5 [style = bold, label=""];
14->17 [style = dotted, label="true"];
61->24 [style = solid, label="task"];
1->6 [style = bold, label=""];
15->61 [style = solid, label="consumerProps"];
26->6 [style = solid, label="i"];
47->24 [style = bold, label=""];
6->8 [style = dotted, label="true"];
61->13 [style = solid, label="task"];
20->3 [style = solid, label="desc4"];
37->69 [style = bold, label=""];
64->65 [style = bold, label=""];
53->38 [style = solid, label="task"];
9->25 [style = solid, label="baseSequenceName"];
47->22 [style = solid, label="desc3"];
15->40 [style = bold, label=""];
36->5 [style = bold, label=""];
4->1 [style = bold, label=""];
14->2 [style = bold, label=""];
61->12 [style = solid, label="task"];
6->63 [style = bold, label=""];
16->4 [style = bold, label=""];
50->61 [style = bold, label=""];
54->28 [style = bold, label=""];
41->34 [style = bold, label=""];
34->21 [style = bold, label=""];
53->13 [style = bold, label=""];
75->67 [style = bold, label=""];
2->29 [style = solid, label="i"];
29->11 [style = dotted, label="true"];
47->24 [style = solid, label="desc7"];
25->28 [style = solid, label="task"];
71->39 [style = bold, label=""];
25->46 [style = solid, label="task"];
1->6 [style = solid, label="i"];
61->19 [style = solid, label="task"];
66->50 [style = dotted, label="true"];
7->10 [style = bold, label=""];
29->58 [style = bold, label=""];
53->13 [style = solid, label="task"];
30->23 [style = bold, label=""];
33->24 [style = solid, label="desc5"];
11->45 [style = bold, label=""];
12->0 [style = solid, label="desc5"];
74->64 [style = bold, label=""];
25->61 [style = solid, label="startPartitions"];
48->9 [style = bold, label=""];
75->71 [style = solid, label="startPartitions"];
34->41 [style = bold, label=""];
25->7 [style = solid, label="task"];
53->61 [style = dashed, label="0"];
13->41 [style = solid, label="currentOffsets"];
46->47 [style = bold, label=""];
20->33 [style = bold, label=""];
21->55 [style = solid, label="currentOffsets"];
4->2 [style = solid, label="numToAdd"];
29->45 [style = dotted, label="true"];
9->53 [style = solid, label="baseSequenceName"];
33->3 [style = solid, label="desc5"];
34->41 [style = dotted, label="true"];
6->8 [style = bold, label=""];
52->31 [style = bold, label=""];
9->61 [style = solid, label="baseSequenceName"];
5->48 [style = bold, label=""];
37->18 [style = bold, label=""];
59->2 [style = bold, label=""];
19->0 [style = solid, label="desc6"];
3->43 [style = bold, label=""];
58->52 [style = bold, label=""];
13->71 [style = solid, label="currentOffsets"];
54->24 [style = solid, label="desc2"];
55->54 [style = bold, label=""];
52->32 [style = solid, label="nextOffsets"];
12->19 [style = bold, label=""];
2->29 [style = bold, label=""];
67->15 [style = bold, label=""];
13->34 [style = solid, label="currentOffsets"];
25->33 [style = solid, label="task"];
50->53 [style = bold, label=""];
8->26 [style = bold, label=""];
}
