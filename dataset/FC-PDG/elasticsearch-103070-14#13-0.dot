digraph {
21 [style = filled, label = "assertEquals(2,fields.length)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(1,fields.length)@@@12@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",type).field(\"index\",false)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(Strings.toString(mapping),mapper.mappingSource().toString())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "doTestNotIndexed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "IndexableField pointField = fields(1(@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "IndexableField dvField = fields(0(@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "String type@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "mapping = mapping.field(\"format\",DATE_FORMAT)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(DocValuesType.BINARY,dvField.fieldType().docValuesType())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(Strings.toString(mapping)))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "doTestNotIndexed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "doTestDefaults['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(2,pointField.fieldType().pointIndexDimensionCount())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject(\"field\").field(getFromField(),getFrom(type)).field(getToField(),getTo(type)).endObject().endObject()),XContentType.JSON))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(rangeFieldMapping(type,null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "ParsedDocument doc = mapper.parse(source(null))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertEquals(1,fields.length)@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "mapping = mapping.endObject().endObject().endObject().endObject()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertFalse(pointField.fieldType().stored())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "String type@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",type)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "type.equals(\"date_range\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16->24 [style = solid, label="type"];
20->23 [style = bold, label=""];
23->19 [style = bold, label=""];
17->16 [style = dotted, label="true"];
18->22 [style = bold, label=""];
24->2 [style = bold, label=""];
1->8 [style = bold, label=""];
1->7 [style = dotted, label="true"];
8->24 [style = dashed, label="0"];
14->12 [style = bold, label=""];
2->10 [style = bold, label=""];
0->3 [style = bold, label=""];
11->15 [style = bold, label=""];
9->21 [style = bold, label=""];
22->20 [style = bold, label=""];
14->7 [style = dotted, label="true"];
3->5 [style = bold, label=""];
5->4 [style = bold, label=""];
2->10 [style = dotted, label="true"];
0->5 [style = solid, label="mapping"];
9->6 [style = bold, label=""];
8->2 [style = bold, label=""];
7->12 [style = solid, label="type"];
21->18 [style = bold, label=""];
17->24 [style = bold, label=""];
4->9 [style = bold, label=""];
15->13 [style = bold, label=""];
9->20 [style = solid, label="fields"];
6->21 [style = dashed, label="0"];
7->16 [style = dashed, label="0"];
12->11 [style = bold, label=""];
2->0 [style = bold, label=""];
9->18 [style = solid, label="fields"];
0->3 [style = solid, label="mapping"];
10->0 [style = bold, label=""];
}
