digraph {
51 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "maxTotalRows = null@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,4L,1,2L))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testCanStartFromLaterThanEarliestOffset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "kafkaProducer.initTransactions()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L,1,0L))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,1L))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "kafkaProducer.beginTransaction()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testCanStartFromLaterThanEarliestOffset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@43@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "insertData()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "int numToAdd = records.size()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Thread.sleep(10)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets) || checkpoint2.getPartitionSequenceNumberMap().equals(currentOffsets))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "kafkaProducer.commitTransaction()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,1L),ImmutableSet.of())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "kafkaProducer.send(record).get()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->13 [style = solid, label="startPartitions"];
26->46 [style = solid, label="task"];
32->22 [style = bold, label=""];
42->45 [style = bold, label=""];
22->30 [style = bold, label=""];
26->22 [style = solid, label="task"];
47->49 [style = bold, label=""];
9->19 [style = dashed, label="0"];
54->29 [style = bold, label=""];
35->23 [style = bold, label=""];
40->26 [style = solid, label="endPartitions"];
38->16 [style = dotted, label="true"];
51->48 [style = bold, label=""];
26->32 [style = solid, label="task"];
37->38 [style = bold, label=""];
0->8 [style = bold, label=""];
11->26 [style = solid, label="baseSequenceName"];
40->26 [style = bold, label=""];
23->36 [style = bold, label=""];
7->44 [style = dashed, label="0"];
31->46 [style = bold, label=""];
45->35 [style = bold, label=""];
21->50 [style = bold, label=""];
10->11 [style = bold, label=""];
14->16 [style = bold, label=""];
24->28 [style = bold, label=""];
19->18 [style = bold, label=""];
26->37 [style = solid, label="task"];
26->31 [style = solid, label="task"];
51->30 [style = solid, label="desc2"];
11->44 [style = bold, label=""];
3->11 [style = bold, label=""];
13->4 [style = solid, label="task"];
38->53 [style = bold, label=""];
19->13 [style = solid, label="startPartitions"];
36->30 [style = solid, label="desc1"];
1->42 [style = bold, label=""];
53->33 [style = solid, label="currentOffsets"];
20->3 [style = bold, label=""];
3->10 [style = bold, label=""];
32->30 [style = solid, label="desc6"];
48->30 [style = solid, label="desc3"];
15->9 [style = bold, label=""];
36->49 [style = solid, label="desc1"];
7->6 [style = bold, label=""];
53->33 [style = bold, label=""];
26->37 [style = bold, label=""];
30->47 [style = bold, label=""];
22->43 [style = solid, label="desc7"];
6->17 [style = bold, label=""];
36->51 [style = bold, label=""];
12->13 [style = solid, label="endPartitions"];
33->52 [style = bold, label=""];
27->43 [style = bold, label=""];
50->27 [style = bold, label=""];
28->39 [style = bold, label=""];
2->3 [style = bold, label=""];
3->10 [style = dotted, label="true"];
38->16 [style = bold, label=""];
52->4 [style = bold, label=""];
15->19 [style = bold, label=""];
53->42 [style = solid, label="currentOffsets"];
48->31 [style = bold, label=""];
12->13 [style = bold, label=""];
17->0 [style = bold, label=""];
31->30 [style = solid, label="desc4"];
39->40 [style = bold, label=""];
16->13 [style = solid, label="consumerProps"];
44->25 [style = bold, label=""];
4->1 [style = bold, label=""];
9->12 [style = bold, label=""];
48->21 [style = solid, label="desc3"];
26->51 [style = solid, label="task"];
46->32 [style = bold, label=""];
25->54 [style = bold, label=""];
34->21 [style = bold, label=""];
26->48 [style = solid, label="task"];
31->50 [style = solid, label="desc4"];
26->36 [style = solid, label="task"];
16->15 [style = bold, label=""];
53->52 [style = solid, label="currentOffsets"];
32->27 [style = solid, label="desc6"];
54->26 [style = solid, label="consumerProps"];
9->24 [style = dashed, label="0"];
41->3 [style = bold, label=""];
18->13 [style = solid, label="endPartitions"];
6->0 [style = bold, label=""];
51->34 [style = solid, label="desc2"];
5->14 [style = bold, label=""];
49->34 [style = bold, label=""];
22->30 [style = solid, label="desc7"];
8->5 [style = bold, label=""];
46->30 [style = solid, label="desc5"];
24->26 [style = solid, label="startPartitions"];
18->13 [style = bold, label=""];
12->18 [style = dashed, label="0"];
24->42 [style = solid, label="startPartitions"];
46->50 [style = solid, label="desc5"];
29->24 [style = bold, label=""];
11->7 [style = bold, label=""];
16->38 [style = bold, label=""];
11->13 [style = solid, label="baseSequenceName"];
13->4 [style = bold, label=""];
}
