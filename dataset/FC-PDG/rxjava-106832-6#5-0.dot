digraph {
13 [style = filled, label = "PublishProcessor<Integer> pp = PublishProcessor.create()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ts.assertError()@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final TestSubscriber<Integer> tsInner = new TestSubscriber<Integer>()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "scheduler.advanceTimeBy(2,TimeUnit.SECONDS)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "overlapBackpressure2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Throwable> errors = TestHelper.trackPluginErrors()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "overlapBackpressure2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "ts.assertError()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final TestSubscriber<Integer> tsInner = new TestSubscriber<>()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertTrue(errors.isEmpty())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "scheduler.advanceTimeBy(2,TimeUnit.SECONDS)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "skipBackpressure2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TestSubscriber<Flowable<Integer>> ts = pp.window(2,1,TimeUnit.SECONDS,scheduler).doOnNext(new Consumer<Flowable<Integer>>(){@Override public void accept(Flowable<Integer> w){w.subscribe(tsInner)}}).test(1L)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "{RxJavaPlugins.reset()}@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "tsInner.assertError()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestScheduler scheduler = new TestScheduler()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TestSubscriber<Flowable<Integer>> ts = pp.window(1,2,TimeUnit.SECONDS,scheduler).test(1L)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
4->8 [style = bold, label=""];
6->4 [style = bold, label=""];
16->14 [style = bold, label=""];
2->12 [style = dashed, label="0"];
1->2 [style = bold, label=""];
0->10 [style = bold, label=""];
11->0 [style = bold, label=""];
2->10 [style = dashed, label="0"];
14->13 [style = bold, label=""];
5->6 [style = bold, label=""];
9->0 [style = bold, label=""];
12->5 [style = bold, label=""];
10->1 [style = bold, label=""];
7->3 [style = bold, label=""];
1->15 [style = bold, label=""];
8->7 [style = bold, label=""];
2->5 [style = bold, label=""];
1->12 [style = bold, label=""];
}
