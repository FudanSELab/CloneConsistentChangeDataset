digraph {
0 [style = filled, label = "ByteBuffer buffer = encoder.encode(value,null)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "fail(\"Should not throw exception\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "extendedBuffer.limit(start + size)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testSizedValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ByteBuffer buffer = encoder.encode(value)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "extendedBuffer.position(start)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "ByteBuffer extendedBuffer = ByteBuffer.allocate(size)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "decoder.decode(extendedBuffer,null)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int start = extendedBuffer.position()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testExtendedValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "int i = 1@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testSizedValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertEquals(value,decoder.decode(buffer,null).intValue())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals(i,extendedBuffer.remaining())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ProtocolDecoderException e@@@20@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i < 5@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(value,decoder.decode(buffer).intValue())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "extendedBuffer.put(buffer.slice())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "i++@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ProtocolDecoderException e@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "int size = buffer.remaining() + i@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
11->16 [style = bold, label=""];
8->10 [style = bold, label=""];
15->13 [style = bold, label=""];
10->20 [style = bold, label=""];
3->1 [style = bold, label=""];
16->8 [style = bold, label=""];
19->12 [style = bold, label=""];
20->9 [style = bold, label=""];
1->17 [style = dotted, label="true"];
12->8 [style = dotted, label="true"];
0->5 [style = dashed, label="0"];
12->15 [style = bold, label=""];
13->20 [style = solid, label="extendedBuffer"];
12->15 [style = dotted, label="true"];
11->8 [style = solid, label="start"];
14->12 [style = solid, label="i"];
1->0 [style = bold, label=""];
4->6 [style = dashed, label="0"];
12->0 [style = bold, label=""];
13->11 [style = bold, label=""];
17->19 [style = bold, label=""];
4->0 [style = bold, label=""];
1->17 [style = bold, label=""];
11->10 [style = solid, label="start"];
12->11 [style = dotted, label="true"];
14->9 [style = solid, label="i"];
6->5 [style = bold, label=""];
19->12 [style = solid, label="i"];
7->5 [style = bold, label=""];
2->0 [style = bold, label=""];
0->14 [style = bold, label=""];
12->13 [style = dotted, label="true"];
12->20 [style = dotted, label="true"];
5->6 [style = bold, label=""];
12->10 [style = dotted, label="true"];
12->16 [style = dotted, label="true"];
12->19 [style = dotted, label="true"];
0->4 [style = bold, label=""];
14->19 [style = solid, label="i"];
4->20 [style = dashed, label="0"];
14->12 [style = bold, label=""];
15->10 [style = solid, label="size"];
9->19 [style = bold, label=""];
14->15 [style = solid, label="i"];
19->15 [style = solid, label="i"];
15->13 [style = solid, label="size"];
3->1 [style = dotted, label="true"];
19->9 [style = solid, label="i"];
18->0 [style = bold, label=""];
12->9 [style = dotted, label="true"];
}
