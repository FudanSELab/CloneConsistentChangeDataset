digraph {
17 [style = filled, label = "cos.close()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testAddOutputStreamWithOneStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(4)@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@28@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10ab11,0,2)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10aad4)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "inOrderStreams.verify(streamOne,times(2)).flush()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10aaf8,2,3)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "cos.addOutputStream(streamTwo)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "cos.addOutputStream(streamOne)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "cos.flush()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testAddOutputStreamWithOneStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(1)@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testAddTwoOutputStreamsWhenEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne,streamTwo)@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "cos.write(9)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10ab94)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10ab81,2,3)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "cos.write(9)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(0)@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final OutputStream streamTwo = mock(,\"streamTwo\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "cos.addOutputStream(streamTwo)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(cos.isEmpty()).isTrue()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(cos.size()).isEqualTo(2)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(cos.size()).isEqualTo(0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
11->20 [style = bold, label=""];
5->8 [style = bold, label=""];
20->9 [style = bold, label=""];
32->12 [style = bold, label=""];
6->21 [style = bold, label=""];
27->30 [style = bold, label=""];
3->14 [style = bold, label=""];
15->24 [style = dashed, label="0"];
18->19 [style = bold, label=""];
34->7 [style = bold, label=""];
4->27 [style = dashed, label="0"];
3->12 [style = solid, label="streamTwo"];
30->32 [style = bold, label=""];
12->34 [style = bold, label=""];
3->17 [style = solid, label="streamTwo"];
21->32 [style = solid, label="streamOne"];
7->31 [style = bold, label=""];
16->2 [style = bold, label=""];
21->3 [style = bold, label=""];
15->16 [style = bold, label=""];
24->22 [style = bold, label=""];
21->17 [style = solid, label="streamOne"];
12->7 [style = bold, label=""];
19->0 [style = bold, label=""];
1->17 [style = bold, label=""];
9->28 [style = bold, label=""];
9->23 [style = bold, label=""];
21->15 [style = solid, label="streamOne"];
29->27 [style = bold, label=""];
31->26 [style = bold, label=""];
26->0 [style = bold, label=""];
17->24 [style = bold, label=""];
10->30 [style = dashed, label="0"];
13->12 [style = bold, label=""];
10->13 [style = bold, label=""];
22->20 [style = bold, label=""];
0->1 [style = bold, label=""];
3->15 [style = solid, label="streamTwo"];
17->15 [style = bold, label=""];
7->18 [style = bold, label=""];
21->14 [style = solid, label="streamOne"];
33->21 [style = bold, label=""];
14->29 [style = dashed, label="0"];
8->11 [style = bold, label=""];
3->13 [style = solid, label="streamTwo"];
3->29 [style = bold, label=""];
25->21 [style = bold, label=""];
2->5 [style = bold, label=""];
14->4 [style = bold, label=""];
5->22 [style = dashed, label="0"];
}
