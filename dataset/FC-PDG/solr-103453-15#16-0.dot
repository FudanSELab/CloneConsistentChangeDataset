digraph {
14 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.standard.StandardFilter\")@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"word\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc1f5,null,false))@@@296@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
163 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc01e,null,false))@@@229@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"word\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc0b1,null,true))@@@250@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
143 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc107,null,false))@@@262@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecba7a,null,false))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
188 [style = filled, label = "request.setFieldValue(\"<html><body>wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r</body></html>\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox brown\",null,\"word\",0,9,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc304,null,false))@@@334@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
189 [style = filled, label = "assertEquals(\"whatever\",indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecba50,null,true))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(2,tokenList.size())@@@185@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbfc2,null,false))@@@216@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertNotNull(\"expecting result for field type 'text'\",textType)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
171 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@118@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbf3a,null,false))@@@198@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "assertNotNull(\"Expcting StopFilter analysis breakdown\",tokenList)@@@119@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
148 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field type 'text'\",queryPart)@@@173@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
156 [style = filled, label = "indexPart = whitetok.get(\"index\")@@@269@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
118 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@332@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
123 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecba26,null,false))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "tokenList = indexPart.get(.getName())@@@322@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"<ALPHANUM>\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecba8f,null,false))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"dog\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbe64,null,false))@@@169@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "queryPart = whitetok.get(\"query\")@@@305@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testHandleAnalysisRequest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
136 [style = filled, label = "queryPart = keywordtok.get(\"query\")@@@328@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "tokenList = indexPart.get(.getName())@@@272@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbb65,null,false))@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
166 [style = filled, label = "NamedList<List<NamedList>> indexPart = textType.get(\"index\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
126 [style = filled, label = "assertEquals(tokenList.size(),10)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 2 tokens\",2,tokenList.size())@@@310@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
117 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field type 'nametext'\",queryPart)@@@257@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
181 [style = filled, label = "NamedList<NamedList> result = handler.handleAnalysisRequest(request,h.getCore().getLatestSchema())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
176 [style = filled, label = "List<NamedList> tokenList = (List<NamedList>)indexPart.get(.getName())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
153 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbd29,null,false))@@@130@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbf23,null,false))@@@195@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "request.addFieldType(\"text\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbab9,null,true))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
127 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbbbd,null,false))@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
187 [style = filled, label = "NamedList<NamedList> fieldTypes = result.get(\"field_types\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"word\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc20a,null,true))@@@299@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbeba,null,false))@@@180@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "tokenList = queryPart.get(.getName())@@@258@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
120 [style = filled, label = "assertNotNull(\"expecting result for field 'whitetok'\",whitetok)@@@268@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"word\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc033,null,false))@@@232@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
144 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field 'whitetok'\",queryPart)@@@306@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
152 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbd71,null,true))@@@139@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the quick red fox jumped over the lazy brown dogs\",null,\"word\",0,49,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc2c3,null,false))@@@325@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
182 [style = filled, label = "assertNotNull(\"field_types should never be null\",fieldTypes)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
96 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc009,null,false))@@@226@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbc88,null,false))@@@109@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbce1,null,false))@@@121@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "request.setFieldValue(\"the quick red fox jumped over the lazy brown dogs\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "request.addFieldType(\"nametext\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
180 [style = filled, label = "request.addFieldType(\"charfilthtmlmap\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbef9,null,false))@@@189@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
134 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@174@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
165 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.standard.StandardFilter\")@@@183@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.LowerCaseFilter\")@@@85@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "NamedList<NamedList> keywordtok = fieldNames.get(\"keywordtok\")@@@317@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"<ALPHANUM>\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbb7b,null,false))@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbc2c,null,true))@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbaf7,null,false))@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
178 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"whatever\",null,\"word\",12,20,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc396,null,false))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbb39,null,true))@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
151 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbb0d,null,false))@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbc43,null,false))@@@100@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
169 [style = filled, label = "request.setQuery(\"fox brown\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbd41,null,false))@@@133@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbb91,null,false))@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbdb5,null,false))@@@148@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,indexPart.size())@@@321@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
114 [style = filled, label = "assertNotNull(\"expecting result for field type 'nametext'\",nameTextType)@@@220@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
129 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field 'whitetok'\",indexPart)@@@270@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecba65,null,false))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbace,null,false))@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,indexPart.size())@@@271@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbc5a,null,false))@@@103@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "NamedList<NamedList> fieldNames = result.get(\"field_names\")@@@265@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'nametext'\",indexPart)@@@222@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
159 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbbe7,null,false))@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
161 [style = filled, label = "assertEquals(tokenList.size(),8)@@@120@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
124 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"jump\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbe00,null,false))@@@157@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(tokenList.size(),10)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertNotNull(\"Expcting PorterStemFilter analysis breakdown\",tokenList)@@@146@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
142 [style = filled, label = "queryPart = nameTextType.get(\"query\")@@@256@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
170 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 1 token\",1,tokenList.size())@@@324@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertNotNull(\"Expcting PorterStemFilter analysis breakdown\",tokenList)@@@211@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbd89,null,false))@@@142@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertEquals(10,tokenList.size())@@@225@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
149 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,queryPart.size())@@@330@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"word\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc087,null,false))@@@244@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
184 [style = filled, label = "assertEquals(\"wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r\",indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
155 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbcf9,null,false))@@@124@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
160 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbc15,null,false))@@@94@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
128 [style = filled, label = "indexPart = nameTextType.get(\"index\")@@@221@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
125 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecba11,null,false))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
162 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbc9f,null,true))@@@112@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@145@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "assertNotNull(\"Expcting StandardTokenizer analysis breakdown\",tokenList)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
139 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbb23,null,false))@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 10 tokens\",10,tokenList.size())@@@274@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
138 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbfa9,null,false))@@@213@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
113 [style = filled, label = "assertNotNull(\"Expecting StandardTokenizer analysis breakdown\",tokenList)@@@175@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
172 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@85@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbe4b,null,true))@@@166@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
174 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@201@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"word\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc0c6,null,false))@@@253@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field 'keywordtok'\",queryPart)@@@329@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
186 [style = filled, label = "assertEquals(tokenList.size(),1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"word\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc1e0,null,false))@@@293@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbd59,null,false))@@@136@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "tokenList = queryPart.get(.getName())@@@331@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
122 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field 'keywordtok'\",indexPart)@@@320@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "assertEquals(\"Expecting StandardTokenizer to produce 2 tokens from '\" + request.getQuery() + \"'\",2,tokenList.size())@@@176@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
130 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@273@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbba7,null,true))@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
167 [style = filled, label = "assertEquals(tokenList.size(),10)@@@87@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
147 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbd11,null,true))@@@127@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
157 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbaa4,null,false))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
145 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbbfe,null,false))@@@91@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "request.addFieldName(\"keywordtok\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
104 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"word\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc1cb,null,false))@@@290@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@210@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbf7d,null,false))@@@207@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertEquals(2,tokenList.size())@@@194@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbea5,null,false))@@@177@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc260,null,false))@@@311@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
131 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc162,null,false))@@@275@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "assertEquals(2,tokenList.size())@@@203@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "assertEquals(2,tokenList.size())@@@212@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
185 [style = filled, label = "testCharFilterAnalysis['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 1 token\",1,tokenList.size())@@@333@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "assertNotNull(\"Expcting StandardFilter analysis breakdown\",tokenList)@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
115 [style = filled, label = "NamedList indexPart = textType.get(\"index\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc275,null,false))@@@314@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
133 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"word\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc1a1,null,true))@@@284@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbdce,null,false))@@@151@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
173 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@192@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
95 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc177,null,false))@@@278@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
135 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"word\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc1b6,null,false))@@@287@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertNotNull(\"expecting result for field 'keywordtok'\",keywordtok)@@@318@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "request.setShowMatch(true)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(tokenList.size(),8)@@@147@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "NamedList<NamedList> whitetok = fieldNames.get(\"whitetok\")@@@267@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
175 [style = filled, label = "testHandleAnalysisRequest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
168 [style = filled, label = "indexPart = keywordtok.get(\"index\")@@@319@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
121 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,queryPart.size())@@@307@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"word\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc18c,null,false))@@@281@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.core.WhitespaceTokenizer\")@@@223@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
146 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbcb6,null,false))@@@115@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "NamedList<NamedList> nameTextType = fieldTypes.get(\"nametext\")@@@219@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbde7,null,true))@@@154@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
164 [style = filled, label = "assertNotNull(\"field_nameds should never be null\",fieldNames)@@@266@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
158 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbf65,null,false))@@@204@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@323@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
111 [style = filled, label = "NamedList<List<NamedList>> queryPart = textType.get(\"query\")@@@172@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\",indexPart)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "tokenList = queryPart.get(.getName())@@@308@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.StopFilter\")@@@118@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
61 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"word\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc048,null,true))@@@235@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertNotNull(\"Expcting LowerCaseFilter analysis breakdown\",tokenList)@@@86@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "FieldAnalysisRequest request = new FieldAnalysisRequest()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
150 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecba3b,null,false))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
179 [style = filled, label = "request.setShowMatch(false)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
183 [style = filled, label = "assertTrue(\"result is null and it shouldn't be\",result != null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbe19,null,false))@@@160@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
140 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"<ALPHANUM>\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbc71,null,false))@@@106@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"word\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc09c,null,false))@@@247@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"word\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc05d,null,false))@@@238@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertNotNull(\"expecting result for field type 'charfilthtmlmap'\",textType)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "assertNotNull(\"Expcting StopFilter analysis breakdown\",tokenList)@@@202@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "NamedList<NamedList> textType = fieldTypes.get(\"text\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
132 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'text'\",indexPart)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"word\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc072,null,false))@@@241@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"lazi\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbe32,null,false))@@@163@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc0f2,null,false))@@@259@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
119 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbb4f,null,false))@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
137 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.StopFilter\")@@@201@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
177 [style = filled, label = "assertNotNull(\"Expecting MockTokenizer analysis breakdown\",tokenList)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@309@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "request.addFieldName(\"whitetok\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertNotNull(\"Expcting LowerCaseFilter analysis breakdown\",tokenList)@@@193@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
141 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.LowerCaseFilter\")@@@192@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecbee3,null,false))@@@186@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "List<NamedList> tokenList = indexPart.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
154 [style = filled, label = "assertNotNull(\"Expcting StandardFilter analysis breakdown\",tokenList)@@@184@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "assertNotNull(\"Expcting WhitespaceTokenizer analysis breakdown\",tokenList)@@@224@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"word\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecc21f,null,false))@@@302@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
121->108 [style = bold, label=""];
60->83 [style = bold, label=""];
51->5 [style = bold, label=""];
54->188 [style = dashed, label="0"];
68->131 [style = bold, label=""];
181->183 [style = bold, label=""];
148->134 [style = bold, label=""];
67->114 [style = solid, label="nameTextType"];
13->162 [style = bold, label=""];
130->68 [style = bold, label=""];
176->177 [style = bold, label=""];
90->184 [style = dashed, label="0"];
170->64 [style = bold, label=""];
21->8 [style = bold, label=""];
137->78 [style = bold, label=""];
73->21 [style = bold, label=""];
185->33 [style = bold, label=""];
129->56 [style = bold, label=""];
77->179 [style = dashed, label="0"];
92->141 [style = bold, label=""];
18->29 [style = solid, label="keywordtok"];
65->144 [style = bold, label=""];
110->37 [style = bold, label=""];
72->82 [style = bold, label=""];
64->136 [style = bold, label=""];
118->28 [style = bold, label=""];
1->23 [style = bold, label=""];
67->114 [style = bold, label=""];
156->129 [style = bold, label=""];
134->113 [style = solid, label="tokenList"];
159->145 [style = bold, label=""];
166->132 [style = solid, label="indexPart"];
107->3 [style = bold, label=""];
0->53 [style = bold, label=""];
136->11 [style = bold, label=""];
119->19 [style = bold, label=""];
24->49 [style = bold, label=""];
43->137 [style = bold, label=""];
34->24 [style = bold, label=""];
85->61 [style = bold, label=""];
131->95 [style = bold, label=""];
168->122 [style = bold, label=""];
92->173 [style = bold, label=""];
70->71 [style = bold, label=""];
128->106 [style = solid, label="indexPart"];
26->130 [style = solid, label="tokenList"];
65->144 [style = solid, label="queryPart"];
78->105 [style = bold, label=""];
115->102 [style = bold, label=""];
74->70 [style = bold, label=""];
48->72 [style = bold, label=""];
106->97 [style = bold, label=""];
5->167 [style = bold, label=""];
95->75 [style = bold, label=""];
56->26 [style = bold, label=""];
99->45 [style = bold, label=""];
186->178 [style = bold, label=""];
72->82 [style = solid, label="tokenList"];
126->176 [style = dashed, label="0"];
79->88 [style = bold, label=""];
90->89 [style = bold, label=""];
176->177 [style = solid, label="tokenList"];
135->104 [style = bold, label=""];
113->74 [style = bold, label=""];
153->86 [style = bold, label=""];
179->181 [style = bold, label=""];
174->78 [style = solid, label="tokenList"];
123->150 [style = bold, label=""];
71->165 [style = bold, label=""];
160->40 [style = bold, label=""];
53->92 [style = bold, label=""];
115->102 [style = solid, label="indexPart"];
132->90 [style = bold, label=""];
8->151 [style = bold, label=""];
100->138 [style = bold, label=""];
114->128 [style = bold, label=""];
146->79 [style = bold, label=""];
120->156 [style = bold, label=""];
54->77 [style = bold, label=""];
33->180 [style = bold, label=""];
99->110 [style = dashed, label="0"];
17->118 [style = bold, label=""];
49->38 [style = bold, label=""];
110->37 [style = solid, label="textType"];
147->153 [style = bold, label=""];
87->76 [style = bold, label=""];
112->63 [style = bold, label=""];
151->139 [style = bold, label=""];
82->170 [style = bold, label=""];
66->54 [style = bold, label=""];
38->32 [style = bold, label=""];
96->163 [style = bold, label=""];
145->160 [style = bold, label=""];
141->173 [style = dashed, label="0"];
164->98 [style = bold, label=""];
79->171 [style = dashed, label="0"];
127->172 [style = bold, label=""];
175->33 [style = bold, label=""];
111->148 [style = solid, label="queryPart"];
25->84 [style = bold, label=""];
180->188 [style = bold, label=""];
125->123 [style = bold, label=""];
101->14 [style = bold, label=""];
91->2 [style = bold, label=""];
93->103 [style = bold, label=""];
94->124 [style = bold, label=""];
189->176 [style = bold, label=""];
171->88 [style = bold, label=""];
51->172 [style = dashed, label="0"];
97->112 [style = solid, label="tokenList"];
14->73 [style = bold, label=""];
12->33 [style = bold, label=""];
149->17 [style = bold, label=""];
42->94 [style = bold, label=""];
89->126 [style = bold, label=""];
152->34 [style = bold, label=""];
58->67 [style = bold, label=""];
75->133 [style = bold, label=""];
36->107 [style = bold, label=""];
168->122 [style = solid, label="indexPart"];
28->59 [style = bold, label=""];
32->42 [style = bold, label=""];
24->49 [style = solid, label="tokenList"];
41->50 [style = bold, label=""];
35->81 [style = bold, label=""];
83->55 [style = bold, label=""];
104->35 [style = bold, label=""];
142->117 [style = bold, label=""];
187->182 [style = bold, label=""];
172->5 [style = bold, label=""];
99->45 [style = solid, label="textType"];
182->110 [style = bold, label=""];
81->39 [style = bold, label=""];
20->169 [style = bold, label=""];
174->78 [style = bold, label=""];
30->155 [style = bold, label=""];
47->18 [style = bold, label=""];
142->117 [style = solid, label="queryPart"];
43->174 [style = bold, label=""];
27->62 [style = bold, label=""];
61->69 [style = bold, label=""];
133->135 [style = bold, label=""];
37->115 [style = bold, label=""];
102->99 [style = bold, label=""];
45->166 [style = bold, label=""];
69->22 [style = bold, label=""];
127->51 [style = bold, label=""];
141->41 [style = bold, label=""];
167->159 [style = bold, label=""];
45->37 [style = dashed, label="0"];
10->164 [style = bold, label=""];
173->41 [style = bold, label=""];
105->158 [style = bold, label=""];
17->118 [style = solid, label="tokenList"];
162->146 [style = bold, label=""];
132->102 [style = dashed, label="0"];
76->140 [style = bold, label=""];
55->100 [style = bold, label=""];
184->189 [style = bold, label=""];
62->16 [style = bold, label=""];
4->31 [style = bold, label=""];
165->154 [style = bold, label=""];
173->41 [style = solid, label="tokenList"];
10->164 [style = solid, label="fieldNames"];
137->78 [style = solid, label="tokenList"];
79->88 [style = solid, label="tokenList"];
172->5 [style = solid, label="tokenList"];
124->27 [style = bold, label=""];
183->187 [style = bold, label=""];
98->120 [style = solid, label="whitetok"];
166->115 [style = dashed, label="0"];
115->102 [style = solid, label="fieldTypes"];
50->57 [style = bold, label=""];
63->96 [style = bold, label=""];
136->11 [style = solid, label="queryPart"];
52->101 [style = bold, label=""];
57->43 [style = bold, label=""];
66->180 [style = dashed, label="0"];
141->41 [style = solid, label="tokenList"];
157->52 [style = bold, label=""];
158->60 [style = bold, label=""];
128->106 [style = bold, label=""];
22->1 [style = bold, label=""];
144->121 [style = bold, label=""];
155->147 [style = bold, label=""];
122->48 [style = bold, label=""];
166->132 [style = bold, label=""];
126->125 [style = bold, label=""];
7->36 [style = bold, label=""];
187->182 [style = solid, label="fieldTypes"];
16->46 [style = bold, label=""];
177->186 [style = bold, label=""];
33->110 [style = solid, label="request"];
88->161 [style = bold, label=""];
11->149 [style = bold, label=""];
33->66 [style = bold, label=""];
39->44 [style = bold, label=""];
84->47 [style = bold, label=""];
111->148 [style = bold, label=""];
137->174 [style = dashed, label="0"];
26->130 [style = bold, label=""];
2->142 [style = bold, label=""];
98->120 [style = bold, label=""];
169->109 [style = bold, label=""];
156->129 [style = solid, label="indexPart"];
109->110 [style = bold, label=""];
15->127 [style = bold, label=""];
117->93 [style = bold, label=""];
108->6 [style = solid, label="tokenList"];
181->183 [style = solid, label="result"];
40->87 [style = bold, label=""];
80->152 [style = bold, label=""];
103->143 [style = bold, label=""];
90->89 [style = solid, label="tokenList"];
14->73 [style = solid, label="tokenList"];
33->181 [style = solid, label="request"];
97->112 [style = bold, label=""];
146->171 [style = bold, label=""];
23->91 [style = bold, label=""];
46->111 [style = bold, label=""];
139->9 [style = bold, label=""];
31->15 [style = bold, label=""];
29->168 [style = bold, label=""];
18->29 [style = bold, label=""];
51->5 [style = solid, label="tokenList"];
108->6 [style = bold, label=""];
188->179 [style = bold, label=""];
102->184 [style = bold, label=""];
116->20 [style = bold, label=""];
143->10 [style = bold, label=""];
163->85 [style = bold, label=""];
44->65 [style = bold, label=""];
9->119 [style = bold, label=""];
110->37 [style = solid, label="result"];
86->80 [style = bold, label=""];
138->58 [style = bold, label=""];
171->88 [style = solid, label="tokenList"];
77->116 [style = bold, label=""];
19->4 [style = bold, label=""];
161->30 [style = bold, label=""];
140->13 [style = bold, label=""];
134->113 [style = bold, label=""];
150->7 [style = bold, label=""];
3->157 [style = bold, label=""];
165->154 [style = solid, label="tokenList"];
6->25 [style = bold, label=""];
154->0 [style = bold, label=""];
83->55 [style = solid, label="tokenList"];
}
