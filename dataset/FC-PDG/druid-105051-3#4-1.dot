digraph {
12 [style = filled, label = "Assert.assertArrayEquals(EXPECTED,Arrays.copyOfRange(found,EXPECTED.length * 1,EXPECTED.length * 2))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertArrayEquals(expected,Arrays.copyOfRange(found,expected.length * 2,expected.length * 3))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "tripleGzByteStream.write(GZ_BYTES)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertArrayEquals(EXPECTED,Arrays.copyOfRange(found,EXPECTED.length * 2,EXPECTED.length * 3))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertArrayEquals(expected,Arrays.copyOfRange(found,expected.length * 2,expected.length * 3))@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "tripleGzByteStream.write(GZ_BYTES)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertArrayEquals(expected,Arrays.copyOfRange(found,expected.length * 0,expected.length * 1))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "tripleGzByteStream.write(gzBytes)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertArrayEquals(EXPECTED,Arrays.copyOfRange(found,EXPECTED.length * 0,EXPECTED.length * 1))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "final ByteArrayOutputStream tripleGzByteStream = new ByteArrayOutputStream(GZ_BYTES.length * 3)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "tripleGzByteStream.write(gzBytes)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertArrayEquals(expected,Arrays.copyOfRange(found,expected.length * 1,expected.length * 2))@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testGunzipBugStreamWorkarround['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Read terminated too soon (bug 7036144)\",expected.length * 3,ByteStreams.copy(inputStream,outputStream))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "testGunzipBug['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "tripleGzByteStream.write(gzBytes)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(expected.length * 3,found.length)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testGunzipBug['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final byte(( found = outputStream.toByteArray()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ByteArrayOutputStream tripleGzByteStream = new ByteArrayOutputStream(gzBytes.length * 3)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(\"Read terminated too soon (bug 7036144)\",EXPECTED.length * 3,ByteStreams.copy(inputStream,outputStream))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(EXPECTED.length * 3,found.length)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertEquals(expected.length * 3,CompressionUtils.gunzip(new ZeroRemainingInputStream(new ByteArrayInputStream(tripleGzByteStream.toByteArray())),bos))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final byte(( found = bos.toByteArray()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "tripleGzByteStream.write(GZ_BYTES)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->13 [style = dashed, label="0"];
0->2 [style = solid, label="found"];
4->3 [style = bold, label=""];
0->16 [style = bold, label=""];
0->12 [style = solid, label="found"];
16->13 [style = bold, label=""];
8->16 [style = dashed, label="0"];
23->8 [style = solid, label="found"];
23->1 [style = solid, label="found"];
7->17 [style = dashed, label="0"];
23->5 [style = solid, label="found"];
10->19 [style = dashed, label="0"];
9->4 [style = bold, label=""];
6->11 [style = dashed, label="0"];
6->24 [style = bold, label=""];
0->13 [style = solid, label="found"];
11->19 [style = bold, label=""];
0->1 [style = solid, label="found"];
24->23 [style = bold, label=""];
19->0 [style = bold, label=""];
22->8 [style = bold, label=""];
1->12 [style = dashed, label="0"];
5->1 [style = bold, label=""];
15->17 [style = bold, label=""];
13->12 [style = bold, label=""];
23->22 [style = bold, label=""];
8->5 [style = bold, label=""];
3->7 [style = bold, label=""];
4->20 [style = dashed, label="0"];
6->10 [style = bold, label=""];
10->0 [style = bold, label=""];
7->6 [style = bold, label=""];
12->18 [style = bold, label=""];
0->8 [style = bold, label=""];
2->18 [style = dashed, label="0"];
3->15 [style = dashed, label="0"];
1->2 [style = bold, label=""];
0->18 [style = solid, label="found"];
20->15 [style = bold, label=""];
0->5 [style = solid, label="found"];
14->20 [style = bold, label=""];
21->4 [style = bold, label=""];
17->11 [style = bold, label=""];
}
