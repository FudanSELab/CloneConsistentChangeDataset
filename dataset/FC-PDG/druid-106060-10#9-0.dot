digraph {
9 [style = filled, label = "JoinableClause factExprToRegon = new JoinableClause(FACT_TO_REGION_PREFIX,new IndexedTableJoinable(regionsTable),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"\"%sregionIsoCode\" == regionIsoCode && \"%scountryIsoCode\" == regionIsoCode\",FACT_TO_REGION_PREFIX,FACT_TO_REGION_PREFIX),FACT_TO_REGION_PREFIX,ExprMacroTable.nil()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<JoinableClause> joinableClauses = ImmutableList.of(factExprToRegon)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "test_filterPushDown_factToRegionOneColumnToTwoRHSColumnsAndFilterOnRHS['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "JoinableClause factExprToRegon = new JoinableClause(FACT_TO_REGION_PREFIX,new IndexedTableJoinable(regionsTable),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"\"%sregionIsoCode\" == regionIsoCode && \"%sregionIsoCode\" == countryIsoCode\",FACT_TO_REGION_PREFIX,FACT_TO_REGION_PREFIX),FACT_TO_REGION_PREFIX,ExprMacroTable.nil()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(new OrFilter(ImmutableList.of(new InDimFilter(\"regionIsoCode\",ImmutableSet.of(\"MMMM\"),null,null).toFilter(),new SelectorFilter(\"regionIsoCode\",\"A\"))),originalFilter,ImmutableSet.of())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(joinableClauses,originalFilter)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(originalFilter,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",FACT_TO_REGION_PREFIX + \"regionName\"),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a79cc5))@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(new InDimFilter(\"regionIsoCode\",ImmutableSet.of(\"MMMM\"),null,null).toFilter(),new SelectorFilter(\"r1.regionName\",\"Fourems Province\"),ImmutableList.of())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Filter originalFilter = new OrFilter(ImmutableList.of(new SelectorFilter(\"r1.regionName\",\"Fourems Province\"),new SelectorFilter(\"r1.regionIsoCode\",\"A\")))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(new AndFilter(ImmutableList.of(new InDimFilter(\"countryIsoCode\",ImmutableSet.of(\"MMMM\"),null,null).toFilter(),new InDimFilter(\"regionIsoCode\",ImmutableSet.of(\"MMMM\"),null,null).toFilter())),new SelectorFilter(\"r1.regionName\",\"Fourems Province\"),ImmutableList.of())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "test_filterPushDown_factToRegionTwoColumnsToOneRHSColumnAndFilterOnRHS['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),joinableClauses,joinFilterPreAnalysis)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Filter originalFilter = new SelectorFilter(\"r1.regionName\",\"Fourems Province\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "test_filterPushDown_factToRegionOneColumnToTwoRHSColumnsAndFilterOnRHS['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(expectedFilterSplit,actualFilterSplit)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->2 [style = solid, label="factExprToRegon"];
0->5 [style = solid, label="originalFilter"];
15->7 [style = bold, label=""];
15->4 [style = solid, label="expectedFilterSplit"];
9->2 [style = bold, label=""];
1->3 [style = solid, label="joinFilterPreAnalysis"];
1->7 [style = solid, label="joinFilterPreAnalysis"];
2->1 [style = solid, label="joinableClauses"];
1->3 [style = bold, label=""];
3->6 [style = bold, label=""];
2->3 [style = solid, label="joinableClauses"];
3->15 [style = bold, label=""];
7->4 [style = bold, label=""];
0->12 [style = dashed, label="0"];
11->9 [style = bold, label=""];
12->1 [style = bold, label=""];
10->7 [style = bold, label=""];
2->12 [style = bold, label=""];
6->10 [style = dashed, label="0"];
7->4 [style = solid, label="actualFilterSplit"];
12->5 [style = solid, label="originalFilter"];
3->10 [style = bold, label=""];
2->0 [style = bold, label=""];
9->14 [style = dashed, label="0"];
6->15 [style = dashed, label="0"];
10->4 [style = solid, label="expectedFilterSplit"];
12->1 [style = solid, label="originalFilter"];
0->1 [style = bold, label=""];
12->10 [style = solid, label="originalFilter"];
0->1 [style = solid, label="originalFilter"];
6->4 [style = solid, label="expectedFilterSplit"];
8->9 [style = bold, label=""];
14->2 [style = bold, label=""];
6->7 [style = bold, label=""];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
9->2 [style = solid, label="factExprToRegon"];
}
