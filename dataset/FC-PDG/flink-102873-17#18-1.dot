digraph {
12 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1999))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final int WINDOW_SIZE = 4@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3999))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",4),Long.MAX_VALUE))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",streamRecordSerializer)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(\"Close was not called.\",1,closeCalled.get())@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1998))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new ReduceApplyWindowFunction<>(new SumReducer(),new PassThroughWindowFunction<String,GlobalWindow,Tuple2<String,Integer>>())),CountTrigger.of(windowSlide),CountEvictor.of(windowSize),0,null)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testHarness.open()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 20))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",streamRecordSerializer)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testHarness.close()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "long initialTime = 0L@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final int windowSlide = 2@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testCountTriggerWithApply['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final int WINDOW_SIZE = 4@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "AtomicInteger closeCalled = new AtomicInteger(0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",2),Long.MAX_VALUE))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testCountTrigger['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testCountTrigger['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final int windowSize = 4@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) TypeSerializer<StreamRecord<Tuple2<String,Integer>>> streamRecordSerializer = (TypeSerializer<StreamRecord<Tuple2<String,Integer>>>)new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final int WINDOW_SLIDE = 2@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(WINDOW_SLIDE),CountEvictor.of(WINDOW_SIZE),0,null)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 10999))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 999))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),Long.MAX_VALUE))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->31 [style = solid, label="stateDesc"];
10->17 [style = solid, label="initialTime"];
10->11 [style = solid, label="initialTime"];
10->13 [style = solid, label="initialTime"];
0->1 [style = solid, label="streamRecordSerializer"];
19->14 [style = solid, label="expectedOutput"];
28->10 [style = bold, label=""];
0->37 [style = bold, label=""];
36->34 [style = bold, label=""];
10->12 [style = solid, label="initialTime"];
29->30 [style = bold, label=""];
2->33 [style = solid, label="WINDOW_SIZE"];
7->24 [style = solid, label="initialTime"];
2->6 [style = bold, label=""];
29->31 [style = solid, label="windowSize"];
10->24 [style = solid, label="initialTime"];
4->13 [style = bold, label=""];
8->3 [style = bold, label=""];
18->33 [style = bold, label=""];
10->8 [style = solid, label="initialTime"];
12->20 [style = bold, label=""];
30->31 [style = solid, label="windowSlide"];
1->18 [style = bold, label=""];
33->10 [style = bold, label=""];
6->0 [style = bold, label=""];
1->18 [style = solid, label="stateDesc"];
37->18 [style = solid, label="streamRecordSerializer"];
7->20 [style = solid, label="initialTime"];
7->9 [style = solid, label="expectedOutput"];
30->6 [style = bold, label=""];
10->23 [style = solid, label="initialTime"];
18->33 [style = solid, label="stateDesc"];
2->30 [style = dashed, label="0"];
10->7 [style = bold, label=""];
18->28 [style = bold, label=""];
7->8 [style = solid, label="initialTime"];
15->5 [style = bold, label=""];
7->4 [style = solid, label="initialTime"];
32->29 [style = bold, label=""];
7->3 [style = solid, label="initialTime"];
26->27 [style = bold, label=""];
27->29 [style = dashed, label="0"];
23->24 [style = bold, label=""];
21->9 [style = bold, label=""];
7->13 [style = solid, label="initialTime"];
13->12 [style = bold, label=""];
20->16 [style = bold, label=""];
31->28 [style = solid, label="operator"];
34->2 [style = bold, label=""];
33->10 [style = solid, label="operator"];
6->33 [style = solid, label="WINDOW_SLIDE"];
10->3 [style = solid, label="initialTime"];
10->14 [style = solid, label="initialTime"];
0->1 [style = bold, label=""];
19->23 [style = bold, label=""];
16->21 [style = bold, label=""];
7->17 [style = solid, label="initialTime"];
9->14 [style = bold, label=""];
37->18 [style = bold, label=""];
25->15 [style = bold, label=""];
10->4 [style = solid, label="initialTime"];
19->22 [style = solid, label="expectedOutput"];
3->17 [style = bold, label=""];
27->18 [style = solid, label="WINDOW_SIZE"];
7->5 [style = solid, label="expectedOutput"];
7->12 [style = solid, label="initialTime"];
35->38 [style = bold, label=""];
31->28 [style = bold, label=""];
34->33 [style = solid, label="closeCalled"];
24->8 [style = bold, label=""];
7->11 [style = solid, label="initialTime"];
1->31 [style = bold, label=""];
18->28 [style = solid, label="operator"];
22->35 [style = bold, label=""];
5->22 [style = bold, label=""];
7->19 [style = bold, label=""];
14->11 [style = bold, label=""];
18->31 [style = dashed, label="0"];
27->2 [style = bold, label=""];
17->4 [style = bold, label=""];
7->25 [style = solid, label="initialTime"];
18->33 [style = dashed, label="0"];
11->25 [style = bold, label=""];
2->18 [style = solid, label="WINDOW_SLIDE"];
}
