digraph {
0 [style = filled, label = "Map<String,Object> args = new HashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Map<String,Object> dependency = createDependency(\"org.springframework\",\"spring-framework-bom\",\"4.0.5.RELEASE\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(urls).hasSize(1)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(urls.length).isEqualTo(1)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(urls(0(.toExternalForm().endsWith(\".pom\")).isTrue()@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "dependency.put(\"ext\",\"pom\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "pomDependencyResolutionViaType['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "pomDependencyResolutionViaExt['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "pomDependencyResolutionViaType['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "URL(( urls = this.groovyClassLoader.getURLs()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "dependency.put(\"type\",\"pom\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "createGrapeEngine().grab(args,dependency)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->1 [style = solid, label="args"];
3->8 [style = dashed, label="0"];
6->1 [style = bold, label=""];
4->3 [style = bold, label=""];
4->8 [style = bold, label=""];
1->4 [style = bold, label=""];
2->1 [style = solid, label="dependency"];
9->0 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
11->1 [style = bold, label=""];
2->6 [style = bold, label=""];
2->11 [style = bold, label=""];
10->0 [style = bold, label=""];
8->7 [style = bold, label=""];
0->2 [style = bold, label=""];
6->11 [style = dashed, label="0"];
}
