digraph {
6 [style = filled, label = "Assert.assertEquals(\"\",incoming.getSourceServiceName())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(DetectPoint.server,incoming.getDetectPoint())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testIngress2SidecarMetric['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(\"productpage\",incoming.getDestServiceName())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testIngress2SidecarMetric['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testSidecar2SidecarClientMetric['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<ServiceMeshMetric.Builder> result = this.analysis.analysis(new ArrayList<>(),requestBuilder.getIdentifier(),requestBuilder.getHttpLogs().getLogEntry(0),Role.SIDECAR)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"productpage\",incoming.getSourceServiceName())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "StreamAccessLogsMessage.Builder requestBuilder = StreamAccessLogsMessage.newBuilder()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(1,result.getMetrics().size())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "AccessLogAnalyzer.Result result = this.analysis.analysis(AccessLogAnalyzer.Result.builder().build(),requestBuilder.getIdentifier(),requestBuilder.getHttpLogs().getLogEntry(0),Role.SIDECAR)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "ServiceMeshMetric.Builder incoming = result.getMetrics().get(0)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(DetectPoint.client,incoming.getDetectPoint())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(1,result.size())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(\"detail\",incoming.getDestServiceName())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ServiceMeshMetric.Builder incoming = result.get(0)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "JsonFormat.parser().merge(isr,requestBuilder)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
14->16 [style = bold, label=""];
16->15 [style = bold, label=""];
8->16 [style = dashed, label="0"];
7->1 [style = bold, label=""];
9->11 [style = bold, label=""];
11->6 [style = bold, label=""];
3->14 [style = bold, label=""];
3->6 [style = bold, label=""];
5->9 [style = dashed, label="0"];
1->0 [style = bold, label=""];
1->0 [style = solid, label="requestBuilder"];
6->14 [style = dashed, label="0"];
12->1 [style = bold, label=""];
13->1 [style = bold, label=""];
2->15 [style = dashed, label="0"];
0->10 [style = bold, label=""];
8->2 [style = bold, label=""];
0->4 [style = bold, label=""];
6->8 [style = bold, label=""];
10->9 [style = bold, label=""];
4->10 [style = dashed, label="0"];
4->5 [style = bold, label=""];
3->11 [style = dashed, label="0"];
}
