digraph {
12 [style = filled, label = "sqlLifecycle.runSimple(sql,QUERY_CONTEXT_DEFAULT,DEFAULT_PARAMETERS,authenticationResult).toList()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testDefaultCompressionForTDigestGenerateSketchAgg['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testComputingSketchOnNumericValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "final String sql = \"SELECT\" + \"TDIGEST_GENERATE_SKETCH(m1, 200)\" + \"FROM foo\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final List<String((> expectedResults = ImmutableList.of(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8f1e21)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new TDigestSketchAggregatorFactory(\"a0:agg\",\"m1\",TDigestSketchAggregatorFactory.DEFAULT_COMPRESSION))).context(ImmutableMap.of(\"skipEmptyBuckets\",true,PlannerContext.CTX_SQL_QUERY_ID,\"dummy\")).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testComputingSketchOnNumericValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,TIMESERIES_CONTEXT_DEFAULT,DEFAULT_PARAMETERS,AUTH_RESULT).toList()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new TDigestSketchAggregatorFactory(\"a0:agg\",\"m1\",200))).context(TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new TDigestSketchAggregatorFactory(\"a0:agg\",\"m1\",200))).context(ImmutableMap.of(\"skipEmptyBuckets\",true,PlannerContext.CTX_SQL_QUERY_ID,\"dummy\")).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final String sql = \"SELECT\" + \"TDIGEST_GENERATE_SKETCH(m1)\" + \"FROM foo\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,QUERY_CONTEXT_DEFAULT,DEFAULT_PARAMETERS,authenticationResult).toList()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "SqlLifecycle sqlLifecycle = getSqlLifecycle()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8->3 [style = bold, label=""];
12->11 [style = bold, label=""];
1->3 [style = bold, label=""];
5->9 [style = dashed, label="0"];
2->10 [style = bold, label=""];
0->10 [style = dashed, label="0"];
9->6 [style = bold, label=""];
7->9 [style = bold, label=""];
6->1 [style = bold, label=""];
1->12 [style = dashed, label="0"];
2->0 [style = bold, label=""];
13->12 [style = bold, label=""];
6->13 [style = dashed, label="0"];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
5->13 [style = bold, label=""];
6->8 [style = bold, label=""];
1->8 [style = dashed, label="0"];
4->5 [style = bold, label=""];
3->11 [style = dashed, label="0"];
14->5 [style = bold, label=""];
}
