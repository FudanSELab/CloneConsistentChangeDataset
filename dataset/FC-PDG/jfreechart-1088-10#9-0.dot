digraph {
11 [style = filled, label = "testSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "s1.setMajorTickPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.WHITE))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "s1.addChangeListener(l1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(s1.equals(s2))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "s1 = new StandardDialScale()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "s1.setExtent(123.4)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "s1 = new StandardDialScale()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "MyDialLayerChangeListener l1 = new MyDialLayerChangeListener()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "s2 = (StandardDialScale)s1.clone()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(s1.equals(s2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(s1.getClass() == s2.getClass())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "StandardDialScale s2 = CloneUtils.clone(s1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "s2 = TestUtils.serialised(s1)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertFalse(s2.hasListener(l1))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(s1 != s2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(s1 != s2)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testCloning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(s1.getClass() == s2.getClass())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(s1,s2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "StandardDialScale s1 = new StandardDialScale()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "s1.setExtent(123.4)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(s1.hasListener(l1))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "s1.setMajorTickStroke(new BasicStroke(2.0f))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "StandardDialScale s2 = TestUtils.serialised(s1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0->9 [style = solid, label="s1"];
13->22 [style = solid, label="l1"];
8->14 [style = bold, label=""];
1->9 [style = bold, label=""];
1->10 [style = bold, label=""];
6->4 [style = bold, label=""];
10->2 [style = bold, label=""];
14->18 [style = solid, label="s2"];
13->19 [style = bold, label=""];
15->18 [style = bold, label=""];
9->21 [style = dashed, label="0"];
6->14 [style = dashed, label="0"];
20->15 [style = bold, label=""];
8->14 [style = solid, label="s1"];
9->2 [style = bold, label=""];
19->22 [style = bold, label=""];
8->6 [style = bold, label=""];
22->17 [style = bold, label=""];
14->20 [style = solid, label="s2"];
6->4 [style = solid, label="s2"];
21->12 [style = bold, label=""];
2->21 [style = bold, label=""];
8->6 [style = solid, label="s1"];
12->16 [style = bold, label=""];
23->13 [style = bold, label=""];
9->10 [style = dashed, label="0"];
16->23 [style = bold, label=""];
8->4 [style = solid, label="s1"];
0->10 [style = solid, label="s1"];
13->19 [style = solid, label="l1"];
11->8 [style = bold, label=""];
10->2 [style = solid, label="s2"];
3->8 [style = bold, label=""];
9->2 [style = solid, label="s2"];
13->17 [style = solid, label="l1"];
8->20 [style = solid, label="s1"];
21->23 [style = solid, label="s2"];
4->20 [style = dashed, label="0"];
7->1 [style = bold, label=""];
0->5 [style = bold, label=""];
24->8 [style = bold, label=""];
0->2 [style = solid, label="s1"];
5->7 [style = bold, label=""];
14->20 [style = bold, label=""];
4->0 [style = bold, label=""];
2->12 [style = dashed, label="0"];
21->12 [style = solid, label="s2"];
7->12 [style = solid, label="s1"];
18->7 [style = bold, label=""];
}
