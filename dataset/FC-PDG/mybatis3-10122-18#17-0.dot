digraph {
51 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper(),is(true))@@@56@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "assertThat(environment.getId(),is(\"development\"))@@@50@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
103 [style = filled, label = "XMLConfigBuilder builder = new XMLConfigBuilder(inputStream)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
93 [style = filled, label = "shouldSuccessfullyLoadXMLConfigFile['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertThat(config.isCallSettersOnNulls(),is(true))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertThat(config.isUseGeneratedKeys(),is(true))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "props.put(\"prop2\",\"cccc\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "assertThat(config.getConfigurationFactory().getName()).isEqualTo(.getName())@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
125 [style = filled, label = "assertNull(config.getDefaultFetchSize())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "assertThat(objectFactory.getProperties().getProperty(\"objectFactoryProperty\")).isEqualTo(\"100\")@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior(),is(AutoMappingUnknownColumnBehavior.WARNING))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled(),is(false))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertThat(config.isUseColumnLabel(),is(false))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertThat(config.getVfsImpl().getName(),is(.getName()))@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
64 [style = filled, label = "assertThat(config.isCacheEnabled()).isFalse()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
97 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled()).isFalse()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "assertThat(environment.getId()).isEqualTo(\"development\")@@@50@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertThat(config.getDefaultExecutorType(),is(ExecutorType.BATCH))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "assertThat(objectFactory.getProperties().getProperty(\"objectFactoryProperty\"),is(\"100\"))@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
111 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(),is(instanceOf()))@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
94 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@57@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertThat(config.getMapperRegistry().getMappers().size(),is(4))@@@54@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
52 [style = filled, label = "assertTrue(config.getTypeAliasRegistry().getTypeAliases().get(\"blogauthor\").equals())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertThat(environment.getDataSource()).isInstanceOf()@@@51@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
101 [style = filled, label = "assertThat(config.getMapperRegistry().getMappers().size()).isEqualTo(4)@@@54@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "assertThat(config.getAutoMappingBehavior(),is(AutoMappingBehavior.PARTIAL))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "assertThat(config.getLogPrefix()).isEqualTo(\"mybatis_\")@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
70 [style = filled, label = "assertThat(plugin.getProperties().size()).isEqualTo(1)@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
96 [style = filled, label = "assertThat(config.getAutoMappingBehavior()).isEqualTo(AutoMappingBehavior.NONE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(config.getReflectorFactory(),is(instanceOf()))@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
124 [style = filled, label = "assertThat(config.isLazyLoadingEnabled(),is(false))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "InputStream inputStream = Resources.getResourceAsStream(resource)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled()).isTrue()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
72 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@56@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "assertThat(config.isAggressiveLazyLoading(),is(true))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "ExamplePlugin plugin = (ExamplePlugin)config.getInterceptors().get(0)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertThat(config.getObjectWrapperFactory()).isInstanceOf()@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "assertThat(environment.getTransactionFactory(),is(instanceOf()))@@@52@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
56 [style = filled, label = "assertThat(config.getProxyFactory(),is(instanceOf()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "assertThat(objectFactory.getProperties().size(),is(1))@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
100 [style = filled, label = "assertThat(environment.getTransactionFactory()).isInstanceOf()@@@52@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
82 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior()).isEqualTo(AutoMappingUnknownColumnBehavior.WARNING)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(),is(instanceOf()))@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
102 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(),is(instanceOf()))@@@40@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled(),is(false))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(config.getDefaultStatementTimeout(),is(10))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "shouldSuccessfullyLoadXMLConfigFile['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertThat(config.getDatabaseId(),is(\"derby\"))@@@53@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "assertThat(config.getAutoMappingBehavior(),is(AutoMappingBehavior.NONE))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "assertThat(config.isLazyLoadingEnabled(),is(true))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
99 [style = filled, label = "assertThat(objectFactory.getProperties().size()).isEqualTo(1)@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
108 [style = filled, label = "assertThat(config.isUseColumnLabel(),is(true))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(config.getLogImpl().getName(),is(.getName()))@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
89 [style = filled, label = "assertThat(config.getReflectorFactory()).isInstanceOf()@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
130 [style = filled, label = "assertThat(config.getDefaultExecutorType(),is(ExecutorType.SIMPLE))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "assertThat(config.getDefaultScriptingLanuageInstance()).isInstanceOf()@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
122 [style = filled, label = "assertNull(config.getLogPrefix())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
117 [style = filled, label = "shouldSuccessfullyLoadMinimalXMLConfigFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(config.getLogPrefix(),is(\"mybatis_\"))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertThat(environment.getDataSource(),is(instanceOf()))@@@51@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
114 [style = filled, label = "assertThat(config.isAggressiveLazyLoading(),is(false))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "inputStream.close()@@@59@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertTrue(config.getTypeAliasRegistry().getTypeAliases().get(\"blog\").equals())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "XMLConfigBuilder builder = new XMLConfigBuilder(inputStream,null,props)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "assertThat(config.getDefaultFetchSize()).isEqualTo(100)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
86 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled()).isFalse()@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(config.getDefaultScriptingLanguageInstance(),is(instanceOf()))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled(),is(true))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertThat(config.getConfigurationFactory().getName(),is(.getName()))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
107 [style = filled, label = "assertThat(config.isCallSettersOnNulls(),is(false))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertThat(config.isCacheEnabled(),is(false))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
84 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods()).isEqualTo((Set<String>)new HashSet<String>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\",\"xxx\")))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
119 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods(),is((Set<String>)new HashSet<String>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\"))))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
110 [style = filled, label = "assertThat(config.isUseGeneratedKeys(),is(false))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "assertThat(config.getVfsImpl().getName()).isEqualTo(.getName())@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(),is(instanceOf()))@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
63 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "ExampleObjectFactory objectFactory = (ExampleObjectFactory)config.getObjectFactory()@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase(),is(true))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
129 [style = filled, label = "assertNull(config.getConfigurationFactory())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Environment environment = config.getEnvironment()@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "assertThat(config.getLogImpl().getName()).isEqualTo(.getName())@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
77 [style = filled, label = "assertThat(config.isUseGeneratedKeys()).isTrue()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
71 [style = filled, label = "assertThat(config.isCallSettersOnNulls()).isTrue()@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
120 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled(),is(false))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(,JdbcType.VARCHAR),is(instanceOf()))@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper(),is(true))@@@57@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
118 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled(),is(true))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(),is(instanceOf()))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertThat(config.getDefaultFetchSize(),is(100))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "assertThat(plugin.getProperties().getProperty(\"pluginProperty\"),is(\"100\"))@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
58 [style = filled, label = "assertThat(config.getJdbcTypeForNull()).isEqualTo(JdbcType.NULL)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
105 [style = filled, label = "assertNull(config.getLogImpl())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
91 [style = filled, label = "assertThat(config.getDefaultStatementTimeout()).isEqualTo(10)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper(),is(true))@@@55@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
68 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@58@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
112 [style = filled, label = "assertThat(config.getDefaultScriptingLanguageInstance(),is(instanceOf()))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
121 [style = filled, label = "assertThat(config.getJdbcTypeForNull(),is(JdbcType.OTHER))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
98 [style = filled, label = "assertThat(config.getDatabaseId()).isEqualTo(\"derby\")@@@53@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
123 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior(),is(AutoMappingUnknownColumnBehavior.NONE))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
109 [style = filled, label = "Configuration config = builder.parse()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
79 [style = filled, label = "assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.STATEMENT)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(config.getLocalCacheScope(),is(LocalCacheScope.STATEMENT))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
69 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(,JdbcType.VARCHAR)).isInstanceOf()@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
116 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase(),is(false))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods(),is((Set<String>)new HashSet<String>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\",\"xxx\"))))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
126 [style = filled, label = "assertNull(config.getDefaultStatementTimeout())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "assertThat(config.isAggressiveLazyLoading()).isTrue()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "String resource = \"org/apache/ibatis/builder/CustomizedSettingsMapperConfig.xml\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
92 [style = filled, label = "assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.BATCH)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
83 [style = filled, label = "assertThat(config.isUseColumnLabel()).isFalse()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
115 [style = filled, label = "assertThat(config.getProxyFactory(),is(instanceOf()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertTrue(config.getTypeAliasRegistry().getTypeAliases().get(\"cart\").equals())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase()).isTrue()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertThat(config.getObjectWrapperFactory(),is(instanceOf()))@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
73 [style = filled, label = "assertThat(plugin.getProperties().getProperty(\"pluginProperty\")).isEqualTo(\"100\")@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper(),is(true))@@@58@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
104 [style = filled, label = "assertThat(config.getLocalCacheScope(),is(LocalCacheScope.SESSION))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
113 [style = filled, label = "assertThat(config.isCacheEnabled(),is(true))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@55@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(config.getJdbcTypeForNull(),is(JdbcType.NULL))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
128 [style = filled, label = "String resource = \"org/apache/ibatis/builder/MinimalMapperConfig.xml\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertThat(config.getProxyFactory()).isInstanceOf()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Properties props = new Properties()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
127 [style = filled, label = "assertNotNull(config)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "assertThat(config.isLazyLoadingEnabled()).isTrue()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(plugin.getProperties().size(),is(1))@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
106 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled(),is(true))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56->29 [style = bold, label=""];
15->58 [style = dashed, label="0"];
37->78 [style = dashed, label="0"];
38->123 [style = dashed, label="0"];
14->25 [style = bold, label=""];
54->27 [style = bold, label=""];
9->17 [style = solid, label="resource"];
24->41 [style = solid, label="props"];
6->62 [style = dashed, label="0"];
11->130 [style = dashed, label="0"];
5->20 [style = bold, label=""];
21->63 [style = dashed, label="0"];
85->78 [style = bold, label=""];
24->32 [style = bold, label=""];
46->119 [style = dashed, label="0"];
76->52 [style = bold, label=""];
55->40 [style = bold, label=""];
5->71 [style = dashed, label="0"];
106->108 [style = bold, label=""];
50->2 [style = bold, label=""];
56->61 [style = dashed, label="0"];
47->100 [style = dashed, label="0"];
51->72 [style = dashed, label="0"];
1->30 [style = bold, label=""];
16->70 [style = dashed, label="0"];
94->68 [style = bold, label=""];
23->68 [style = dashed, label="0"];
17->41 [style = solid, label="inputStream"];
28->59 [style = dashed, label="0"];
18->55 [style = dashed, label="0"];
28->14 [style = bold, label=""];
38->64 [style = dashed, label="0"];
12->79 [style = dashed, label="0"];
114->106 [style = bold, label=""];
55->96 [style = bold, label=""];
77->92 [style = bold, label=""];
99->80 [style = bold, label=""];
70->73 [style = bold, label=""];
19->1 [style = bold, label=""];
37->43 [style = bold, label=""];
3->5 [style = bold, label=""];
48->51 [style = bold, label=""];
20->107 [style = dashed, label="0"];
42->44 [style = bold, label=""];
17->103 [style = bold, label=""];
43->88 [style = dashed, label="0"];
49->124 [style = dashed, label="0"];
39->23 [style = bold, label=""];
38->56 [style = bold, label=""];
51->39 [style = bold, label=""];
19->69 [style = dashed, label="0"];
15->104 [style = dashed, label="0"];
18->82 [style = dashed, label="0"];
97->83 [style = bold, label=""];
35->10 [style = bold, label=""];
58->84 [style = bold, label=""];
42->99 [style = dashed, label="0"];
13->31 [style = bold, label=""];
113->115 [style = bold, label=""];
18->38 [style = bold, label=""];
61->74 [style = bold, label=""];
34->92 [style = dashed, label="0"];
117->128 [style = bold, label=""];
118->112 [style = bold, label=""];
0->77 [style = dashed, label="0"];
39->94 [style = dashed, label="0"];
3->87 [style = dashed, label="0"];
21->19 [style = bold, label=""];
59->89 [style = bold, label=""];
16->45 [style = bold, label=""];
128->17 [style = solid, label="resource"];
93->9 [style = bold, label=""];
108->110 [style = bold, label=""];
121->119 [style = bold, label=""];
30->42 [style = bold, label=""];
4->21 [style = bold, label=""];
9->17 [style = bold, label=""];
63->69 [style = bold, label=""];
26->6 [style = bold, label=""];
35->97 [style = dashed, label="0"];
44->80 [style = dashed, label="0"];
120->104 [style = bold, label=""];
109->127 [style = solid, label="config"];
110->130 [style = bold, label=""];
31->76 [style = dashed, label="0"];
0->108 [style = dashed, label="0"];
0->34 [style = bold, label=""];
6->4 [style = bold, label=""];
12->120 [style = dashed, label="0"];
75->66 [style = bold, label=""];
48->60 [style = dashed, label="0"];
47->54 [style = bold, label=""];
43->12 [style = bold, label=""];
82->64 [style = bold, label=""];
65->100 [style = bold, label=""];
125->116 [style = bold, label=""];
4->102 [style = dashed, label="0"];
83->77 [style = bold, label=""];
98->101 [style = bold, label=""];
10->0 [style = bold, label=""];
29->115 [style = dashed, label="0"];
87->71 [style = bold, label=""];
30->99 [style = bold, label=""];
90->30 [style = bold, label=""];
11->8 [style = bold, label=""];
109->127 [style = bold, label=""];
36->50 [style = bold, label=""];
96->82 [style = bold, label=""];
57->65 [style = bold, label=""];
27->101 [style = dashed, label="0"];
20->7 [style = bold, label=""];
10->106 [style = dashed, label="0"];
36->57 [style = bold, label=""];
22->26 [style = bold, label=""];
78->88 [style = bold, label=""];
88->79 [style = bold, label=""];
71->81 [style = bold, label=""];
105->129 [style = bold, label=""];
25->70 [style = bold, label=""];
49->35 [style = bold, label=""];
31->52 [style = bold, label=""];
45->36 [style = bold, label=""];
107->122 [style = bold, label=""];
15->53 [style = bold, label=""];
26->62 [style = bold, label=""];
80->59 [style = bold, label=""];
46->86 [style = dashed, label="0"];
123->113 [style = bold, label=""];
29->49 [style = bold, label=""];
89->25 [style = bold, label=""];
52->22 [style = bold, label=""];
25->16 [style = bold, label=""];
66->76 [style = bold, label=""];
95->97 [style = bold, label=""];
55->123 [style = bold, label=""];
54->98 [style = dashed, label="0"];
13->66 [style = dashed, label="0"];
74->95 [style = bold, label=""];
53->46 [style = bold, label=""];
50->57 [style = dashed, label="0"];
92->91 [style = bold, label=""];
60->72 [style = bold, label=""];
34->110 [style = dashed, label="0"];
101->60 [style = bold, label=""];
81->75 [style = bold, label=""];
17->103 [style = solid, label="inputStream"];
35->114 [style = dashed, label="0"];
64->61 [style = bold, label=""];
32->41 [style = bold, label=""];
115->124 [style = bold, label=""];
8->37 [style = bold, label=""];
43->116 [style = dashed, label="0"];
5->112 [style = dashed, label="0"];
126->125 [style = bold, label=""];
31->129 [style = dashed, label="0"];
102->63 [style = bold, label=""];
129->111 [style = bold, label=""];
2->47 [style = bold, label=""];
122->105 [style = bold, label=""];
46->3 [style = bold, label=""];
7->13 [style = bold, label=""];
1->90 [style = dashed, label="0"];
112->107 [style = bold, label=""];
56->113 [style = dashed, label="0"];
79->58 [style = bold, label=""];
8->126 [style = dashed, label="0"];
91->85 [style = bold, label=""];
68->67 [style = bold, label=""];
10->83 [style = dashed, label="0"];
7->75 [style = dashed, label="0"];
41->55 [style = bold, label=""];
53->84 [style = dashed, label="0"];
128->17 [style = bold, label=""];
116->120 [style = bold, label=""];
45->73 [style = dashed, label="0"];
12->15 [style = bold, label=""];
69->90 [style = bold, label=""];
9->128 [style = dashed, label="0"];
40->18 [style = bold, label=""];
33->9 [style = bold, label=""];
84->86 [style = bold, label=""];
34->11 [style = bold, label=""];
11->91 [style = dashed, label="0"];
124->114 [style = bold, label=""];
86->87 [style = bold, label=""];
130->126 [style = bold, label=""];
73->36 [style = bold, label=""];
17->24 [style = bold, label=""];
104->121 [style = bold, label=""];
119->118 [style = bold, label=""];
100->98 [style = bold, label=""];
103->109 [style = bold, label=""];
44->28 [style = bold, label=""];
27->48 [style = bold, label=""];
40->96 [style = dashed, label="0"];
49->95 [style = dashed, label="0"];
127->55 [style = bold, label=""];
2->65 [style = dashed, label="0"];
29->74 [style = dashed, label="0"];
8->85 [style = dashed, label="0"];
20->81 [style = dashed, label="0"];
62->102 [style = bold, label=""];
72->94 [style = bold, label=""];
14->89 [style = dashed, label="0"];
}
