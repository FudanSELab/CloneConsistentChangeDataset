digraph {
10 [style = filled, label = "assertEquals(\"foo\",super_action.getName())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Class<?> type@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"sampleActionOverride\",super_action.getId())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "val holderSpec = specificationLoader.loadSpecification(type,IntrospectionState.FULLY_INTROSPECTED)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(1L,holderSpec.streamAnyActions(MixedIn.EXCLUDED).filter(null).count())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(1L,holderSpec.streamActions(MixedIn.EXCLUDED).filter(null).count())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Class<?> type@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertNotNull(super_action)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "val super_action = holderSpec.getActionElseFail(\"sampleActionOverride\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"foo\",super_property.getName())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "metamodelContributingProperties_shouldBeUnique_whenOverridden['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(\"samplePropertyOverride\",super_property.getId())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "val super_property = holderSpec.getAssociationElseFail(\"samplePropertyOverride\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "metamodelContributingActions_shouldBeUnique_whenOverridden['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(1L,holderSpec.streamProperties(MixedIn.EXCLUDED).filter(null).count())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"bar\",super_property.getDescription())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"bar\",super_action.getDescription())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "type.isInterface() && type.getSuperclass() == null@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "metamodelContributingActions_shouldBeUnique_whenOverridden['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertNotNull(super_property)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->18 [style = dashed, label="0"];
13->16 [style = solid, label="super_property"];
16->15 [style = bold, label=""];
8->16 [style = dashed, label="0"];
1->8 [style = bold, label=""];
2->6 [style = bold, label=""];
0->15 [style = dashed, label="0"];
10->3 [style = bold, label=""];
19->17 [style = bold, label=""];
11->4 [style = dotted, label="true"];
3->12 [style = bold, label=""];
4->6 [style = solid, label="type"];
11->2 [style = bold, label=""];
13->16 [style = bold, label=""];
3->19 [style = dashed, label="0"];
1->13 [style = dashed, label="0"];
8->0 [style = bold, label=""];
18->6 [style = solid, label="type"];
3->9 [style = bold, label=""];
6->1 [style = bold, label=""];
0->10 [style = bold, label=""];
5->6 [style = bold, label=""];
7->2 [style = bold, label=""];
15->20 [style = bold, label=""];
6->13 [style = bold, label=""];
9->17 [style = dashed, label="0"];
7->4 [style = dotted, label="true"];
10->20 [style = dashed, label="0"];
14->2 [style = bold, label=""];
9->12 [style = dashed, label="0"];
1->8 [style = solid, label="super_action"];
2->5 [style = dotted, label="true"];
20->19 [style = bold, label=""];
14->18 [style = dotted, label="true"];
2->5 [style = bold, label=""];
}
