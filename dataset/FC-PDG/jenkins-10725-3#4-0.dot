digraph {
11 [style = filled, label = "assertThat(runWith(\"CustomView\"),equalTo(0))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final List<TopLevelItem> jenkinsJobs = Arrays.asList(job(\"some-job\"),job(\"some-other-job\"))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(stderr,is(empty()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "when(customView.getItems()).thenReturn(viewJobs)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(stdout,listsJobs(\"some-job\",\"some-other-job\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final Collection<TopLevelItem> viewJobs = Arrays.asList(job(\"some-job\"),job(\"some-other-job\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "when(jenkins.getItems()).thenReturn(jenkinsJobs)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "getJobsFromView['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(stderr,is(empty()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "getAllJobsForEmptyName['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "when(jenkins.getView(\"CustomView\")).thenReturn(customView)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "when(jenkins.getItems()).thenReturn((List<TopLevelItem>)jenkinsJobs)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "getAllJobsForEmptyName['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final View customView = view()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(runWith(null),equalTo(0))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(stdout,listsJobs(\"some-job\",\"some-other-job\"))@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Collection<TopLevelItem> jenkinsJobs = Arrays.asList(job(\"some-job\"),job(\"some-other-job\"))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13->10 [style = bold, label=""];
11->16 [style = bold, label=""];
3->6 [style = dashed, label="0"];
8->6 [style = solid, label="jenkinsJobs"];
10->14 [style = bold, label=""];
2->3 [style = bold, label=""];
8->6 [style = bold, label=""];
7->8 [style = bold, label=""];
2->8 [style = dashed, label="0"];
3->4 [style = bold, label=""];
10->15 [style = solid, label="customView"];
4->0 [style = bold, label=""];
6->4 [style = bold, label=""];
5->2 [style = bold, label=""];
15->11 [style = bold, label=""];
2->13 [style = dashed, label="0"];
0->1 [style = bold, label=""];
13->14 [style = solid, label="viewJobs"];
2->3 [style = solid, label="jenkinsJobs"];
14->15 [style = bold, label=""];
16->12 [style = bold, label=""];
9->13 [style = bold, label=""];
}
