digraph {
12 [style = filled, label = "v++@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertEquals(expectedBytes,fetchSizeAverage.value(),EPSILON)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testFetchResponseMetricsPartialResponse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "partitions.put(tp2,new FetchResponse.PartitionData(Errors.NONE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,MemoryRecords.withRecords(CompressionType.NONE,new SimpleRecord(\"val\".getBytes()))))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "MemoryRecords records = builder.build()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "client.prepareResponse(new FetchResponse(new LinkedHashMap<>(partitions),0))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "KafkaMetric recordsCountAverage = allMetrics.get(metrics.metricName(\"records-per-request-avg\",metricGroup))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "fetchRecords(records,Errors.NONE,100L,0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int v = 0@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "v++@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME,0L)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "testFetchResponseMetricsWithOnePartitionAtTheWrongOffset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "fetcher.fetchedRecords()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "KafkaMetric recordsCountAverage = allMetrics.get(metrics.metricInstance(metricsRegistry.recordsPerRequestAvg))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "subscriptions.seek(tp1,0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "subscriptions.assignFromUser(Utils.mkSet(tp1,tp2))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "subscriptions.seek(tp2,0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(3,recordsCountAverage.value(),EPSILON)@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(1,fetcher.sendFetches())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(expectedBytes,fetchSizeAverage.value(),EPSILON)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "subscriptions.seek(tp1,1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "subscriptions.assignFromUser(singleton(tp1))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testFetchResponseMetricsPartialResponse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "consumerClient.poll(0)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "partitions.put(tp1,new FetchResponse.PartitionData(Errors.NONE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,records))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "v < 3@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "KafkaMetric fetchSizeAverage = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchSizeAvg))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "KafkaMetric fetchSizeAverage = allMetrics.get(metrics.metricName(\"fetch-size-avg\",metricGroup))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "int expectedBytes = 0@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "subscriptions.seek(tp2,5)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Map<TopicPartition,FetchResponse.PartitionData> partitions = new HashMap<>()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "record.offset() >= 1@@@15@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertEquals(2,recordsCountAverage.value(),EPSILON)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27->13 [style = bold, label=""];
12->17 [style = solid, label="v"];
17->5 [style = bold, label=""];
17->21 [style = solid, label="v"];
25->28 [style = bold, label=""];
13->11 [style = solid, label="records"];
8->15 [style = bold, label=""];
28->36 [style = bold, label=""];
17->1 [style = bold, label=""];
0->21 [style = solid, label="v"];
1->17 [style = solid, label="v"];
0->17 [style = solid, label="v"];
5->25 [style = solid, label="records"];
38->10 [style = bold, label=""];
29->39 [style = bold, label=""];
2->6 [style = bold, label=""];
29->39 [style = solid, label="expectedBytes"];
6->18 [style = bold, label=""];
1->17 [style = dotted, label="true"];
10->19 [style = dashed, label="0"];
18->11 [style = bold, label=""];
26->34 [style = bold, label=""];
3->24 [style = dashed, label="0"];
2->8 [style = solid, label="expectedBytes"];
4->26 [style = bold, label=""];
14->10 [style = bold, label=""];
0->1 [style = solid, label="v"];
30->25 [style = bold, label=""];
14->19 [style = bold, label=""];
1->21 [style = dotted, label="true"];
5->18 [style = bold, label=""];
20->3 [style = bold, label=""];
12->1 [style = bold, label=""];
17->1 [style = solid, label="v"];
1->13 [style = bold, label=""];
9->23 [style = dashed, label="0"];
34->0 [style = bold, label=""];
7->3 [style = bold, label=""];
1->17 [style = bold, label=""];
4->0 [style = bold, label=""];
22->4 [style = bold, label=""];
6->2 [style = bold, label=""];
32->29 [style = bold, label=""];
1->27 [style = solid, label="v"];
3->9 [style = bold, label=""];
13->27 [style = solid, label="v"];
18->6 [style = dotted, label="true"];
13->17 [style = bold, label=""];
17->12 [style = bold, label=""];
13->17 [style = solid, label="v"];
1->13 [style = solid, label="v"];
6->2 [style = dotted, label="true"];
5->6 [style = bold, label=""];
10->16 [style = bold, label=""];
30->36 [style = solid, label="partitions"];
18->6 [style = bold, label=""];
35->37 [style = bold, label=""];
39->31 [style = bold, label=""];
1->21 [style = bold, label=""];
0->1 [style = bold, label=""];
33->24 [style = bold, label=""];
6->11 [style = bold, label=""];
6->8 [style = solid, label="expectedBytes"];
23->38 [style = bold, label=""];
12->1 [style = solid, label="v"];
1->12 [style = dotted, label="true"];
15->31 [style = dashed, label="0"];
9->14 [style = bold, label=""];
13->5 [style = bold, label=""];
37->32 [style = bold, label=""];
11->8 [style = bold, label=""];
5->8 [style = solid, label="expectedBytes"];
5->30 [style = bold, label=""];
17->27 [style = bold, label=""];
16->4 [style = bold, label=""];
36->35 [style = bold, label=""];
17->13 [style = dotted, label="true"];
19->22 [style = bold, label=""];
21->17 [style = bold, label=""];
2->11 [style = bold, label=""];
17->27 [style = dotted, label="true"];
0->12 [style = solid, label="v"];
16->22 [style = dashed, label="0"];
24->23 [style = bold, label=""];
}
