digraph {
37 [style = filled, label = "gobblinMCEWriter.flush()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"),\"20\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "gmce.setOldFilePrefixes(null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"),\"0-2000\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"),\"40\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "gmce.setNewFiles(Lists.newArrayList(DataFile.newBuilder().setFilePath(hourlyDataFile_2.toString()).setFileFormat(\"avro\").setFileMetrics(DataMetrics.newBuilder().setRecordCount(10L).build()).build()))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"),\"9\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "gmce.setTopicPartitionOffsetsRange(ImmutableMap.builder().put(\"testTopic-1\",\"1000-2000\").build())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(table.currentSnapshot().allManifests().size(),3)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(10L))))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(table.location(),new File(tmpDir,\"data/tracking/testIcebergTable/_iceberg_metadata/\").getAbsolutePath() + \"/\" + dbName)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(table.currentSnapshot().allManifests().size(),2)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(table.currentSnapshot().allManifests().size(),1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"),\"0-3000\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Table table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "DataFile dailyFile = DataFile.newBuilder().setFilePath(dailyDataFile.toString()).setFileFormat(\"avro\").setFileMetrics(DataMetrics.newBuilder().setRecordCount(0L).build()).build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "testChangeProperty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"),\"45\")@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"),\"40\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testWriteAddFileGMCE['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testWriteAddFileGMCE['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"),\"30\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "gobblinMCEWriter.flush()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "gobblinMCEWriter.flush()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"),\"20\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "gmce.setTopicPartitionOffsetsRange(ImmutableMap.builder().put(\"testTopic-1\",\"3000-4000\").build())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(30L))))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(45L))))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(20L))))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(30L))))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "gmce.setTopicPartitionOffsetsRange(ImmutableMap.builder().put(\"testTopic-1\",\"2000-3000\").build())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "gmce.setNewFiles(Lists.newArrayList(dailyFile))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"),\"0-3000\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "gmce.setTopicPartitionOffsetsRange(ImmutableMap.builder().put(\"testTopic-1\",\"2000-4000\").build())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertFalse(table.properties().containsKey(\"offset.range.testTopic-1\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(table.currentSnapshot().allManifests().size(),3)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"),\"0-4000\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(table.currentSnapshot().allManifests().size(),2)@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "gobblinMCEWriter.flush()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "gmce.setOperationType(OperationType.change_property)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(catalog.listTables(Namespace.of(dbName)).size(),1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"),\"30\")@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->22 [style = bold, label=""];
39->33 [style = bold, label=""];
2->4 [style = bold, label=""];
35->36 [style = solid, label="dailyFile"];
10->23 [style = bold, label=""];
44->42 [style = bold, label=""];
43->32 [style = bold, label=""];
19->5 [style = bold, label=""];
40->43 [style = bold, label=""];
17->45 [style = dashed, label="0"];
12->15 [style = bold, label=""];
9->20 [style = bold, label=""];
25->26 [style = bold, label=""];
34->23 [style = bold, label=""];
32->37 [style = bold, label=""];
30->38 [style = bold, label=""];
26->27 [style = bold, label=""];
22->39 [style = dashed, label="0"];
8->21 [style = bold, label=""];
16->10 [style = bold, label=""];
18->28 [style = bold, label=""];
42->34 [style = bold, label=""];
33->41 [style = bold, label=""];
20->19 [style = bold, label=""];
11->38 [style = dashed, label="0"];
7->13 [style = bold, label=""];
45->31 [style = bold, label=""];
21->25 [style = bold, label=""];
31->35 [style = bold, label=""];
27->24 [style = bold, label=""];
28->6 [style = bold, label=""];
15->0 [style = bold, label=""];
29->16 [style = bold, label=""];
37->30 [style = bold, label=""];
5->11 [style = bold, label=""];
23->12 [style = bold, label=""];
17->9 [style = bold, label=""];
14->8 [style = bold, label=""];
35->36 [style = bold, label=""];
0->17 [style = bold, label=""];
12->45 [style = bold, label=""];
4->14 [style = bold, label=""];
23->18 [style = bold, label=""];
24->12 [style = bold, label=""];
3->16 [style = bold, label=""];
15->23 [style = dashed, label="0"];
1->7 [style = bold, label=""];
13->2 [style = bold, label=""];
36->40 [style = bold, label=""];
6->1 [style = bold, label=""];
18->6 [style = bold, label=""];
38->39 [style = bold, label=""];
0->12 [style = dashed, label="0"];
}
