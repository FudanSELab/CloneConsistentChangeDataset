digraph {
20 [style = filled, label = "assertNotNull(sn.getServerForConnection(null,Collections.EMPTY_SET))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119acb),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "sn.addServer(l1,\"\",new String((((,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "sn.addServer(l1,new String((((,new ServerLoad(1,1,1,1))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "sn.updateLoad(l1,\"\",new ServerLoad(200,1,1,1))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119aa2),sn.getServersForQueue(\"c\",Collections.EMPTY_SET,-1))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "sn.removeServer(l1)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testUpdateLoad['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "ServerLocation l2 = new ServerLocation(\"localhost\",2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119ab6),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,-1))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ServerLocation l1 = new ServerLocation(\"localhost\",1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "sn.updateLoad(l1,new ServerLoad(200,1,1,1))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testUpdateLoad['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119ae0),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119b23),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "sn.addServer(l1,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119a21,new ServerLoad(1,1,1,1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "sn.addServer(l2,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119a31,new ServerLoad(1,1,1,1))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "sn.addServer(l2,\"\",new String((((,new ServerLoad(100,.2f,1,.2f),LOAD_POLL_INTERVAL)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119a8e),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertNull(sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "sn.updateLoad(l1,new ServerLoad(10,1,1,1))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "sn.updateLoad(l2,new ServerLoad(100,1,1,1))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testGroups['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "sn.addServer(l2,new String((((,new ServerLoad(100,.2f,1,.2f))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119b36),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "LocatorLoadSnapshot sn = new LocatorLoadSnapshot()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->34 [style = solid, label="l2"];
8->25 [style = solid, label="l2"];
22->25 [style = bold, label=""];
4->18 [style = dashed, label="0"];
7->1 [style = bold, label=""];
2->20 [style = dashed, label="0"];
26->32 [style = bold, label=""];
35->29 [style = bold, label=""];
5->9 [style = bold, label=""];
4->6 [style = bold, label=""];
7->12 [style = bold, label=""];
25->23 [style = bold, label=""];
8->18 [style = bold, label=""];
8->27 [style = solid, label="l2"];
9->31 [style = solid, label="l1"];
8->36 [style = solid, label="l2"];
9->30 [style = solid, label="l1"];
23->15 [style = bold, label=""];
8->32 [style = solid, label="l2"];
27->31 [style = bold, label=""];
28->26 [style = bold, label=""];
9->27 [style = solid, label="l1"];
8->16 [style = solid, label="l2"];
6->0 [style = bold, label=""];
9->21 [style = solid, label="l1"];
8->33 [style = solid, label="l2"];
9->4 [style = solid, label="l1"];
9->35 [style = solid, label="l1"];
8->14 [style = solid, label="l2"];
8->28 [style = solid, label="l2"];
9->8 [style = bold, label=""];
6->14 [style = dashed, label="0"];
34->22 [style = bold, label=""];
0->7 [style = bold, label=""];
8->2 [style = solid, label="l2"];
36->21 [style = bold, label=""];
19->5 [style = bold, label=""];
29->27 [style = bold, label=""];
11->5 [style = bold, label=""];
17->34 [style = bold, label=""];
3->5 [style = bold, label=""];
12->10 [style = bold, label=""];
9->0 [style = solid, label="l1"];
30->28 [style = bold, label=""];
9->13 [style = solid, label="l1"];
1->12 [style = dashed, label="0"];
14->0 [style = bold, label=""];
8->15 [style = solid, label="l2"];
33->24 [style = bold, label=""];
31->33 [style = bold, label=""];
24->17 [style = bold, label=""];
8->6 [style = solid, label="l2"];
32->36 [style = bold, label=""];
9->18 [style = solid, label="l1"];
8->31 [style = solid, label="l2"];
9->7 [style = solid, label="l1"];
10->2 [style = bold, label=""];
8->10 [style = solid, label="l2"];
8->4 [style = bold, label=""];
9->26 [style = solid, label="l1"];
21->35 [style = bold, label=""];
9->24 [style = solid, label="l1"];
20->30 [style = bold, label=""];
8->29 [style = solid, label="l2"];
1->10 [style = bold, label=""];
16->20 [style = bold, label=""];
4->13 [style = dashed, label="0"];
13->14 [style = bold, label=""];
9->12 [style = solid, label="l1"];
9->33 [style = solid, label="l1"];
8->13 [style = bold, label=""];
9->1 [style = solid, label="l1"];
8->17 [style = solid, label="l2"];
18->16 [style = bold, label=""];
}
