digraph {
25 [style = filled, label = "event.addAttribute(AttributeName.helixmanager.name(),mock())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Map<String,LiveInstance> liveInstances = mock()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "List<Partition> partitions = Arrays.asList(partition)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "CurrentStateOutput currentStateOutput = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "String currentState@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "when(resource.getStateModelDefRef()).thenReturn(TaskConstants.STATE_MODEL_NAME)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(cache.getClusterConfig()).thenReturn(clusterConfig)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "BaseControllerDataProvider cache = mock()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "when(resource.getResourceName()).thenReturn(TEST_RESOURCE)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "bestPossibleStateOutput.setState(TEST_RESOURCE,partition,instanceStateMap)@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput()@@@35@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "String fromState@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Message pendingMessage = mock()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "generateMessages['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "processEvent(event,resourcesStateMap)@@@42@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "when(message.getToState()).thenReturn(\"SLAVE\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "LiveInstance mockLiveInstance = mock()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(),bestPossibleStateOutput)@@@42@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "return output.getMessages(TEST_RESOURCE,partition)@@@44@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "when(currentStateOutput.getCurrentState(TEST_RESOURCE,partition,TEST_INSTANCE)).thenReturn(null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "stateMap.put(partition,instanceStateMap)@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "when(mockLiveInstance.getEphemeralOwner()).thenReturn(\"TEST\")@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "when(currentStateOutput.getCurrentState(TEST_RESOURCE,partition,TEST_INSTANCE)).thenReturn(currentState)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "event.addAttribute(AttributeName.ControllerDataProvider.name(),cache)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Map<String,LiveInstance> liveInstances = mock()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "resourcesStateMap.setState(TEST_RESOURCE,partition,instanceStateMap)@@@41@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "when(clusterConfig.isStateTransitionCancelEnabled()).thenReturn(true)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "TestOFFLINEToDROPPED['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Partition partition = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Map<String,Resource> resourceMap = new HashMap<>()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Resource resource = mock()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(currentStateOutput.getPendingMessage(TEST_RESOURCE,partition,TEST_INSTANCE)).thenReturn(message)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Message message = mock()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "event.addAttribute(AttributeName.CURRENT_STATE.name(),currentStateOutput)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "when(cache.getStateModelDef(TaskConstants.STATE_MODEL_NAME)).thenReturn(stateModelDefinition)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "instanceStateMap.put(TEST_INSTANCE,currentState)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "when(resource.getPartitions()).thenReturn(partitions)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "when(mockLiveInstance.getInstanceName()).thenReturn(TEST_INSTANCE)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ClusterEvent event = new ClusterEvent(TEST_CLUSTER,ClusterEventType.Unknown)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ClusterConfig clusterConfig = mock()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "TestOFFLINEToDROPPED['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "StateModelDefinition stateModelDefinition = new StateModelDefinition.Builder(\"TestStateModel\").addState(\"ONLINE\",1).addState(\"OFFLINE\").addState(\"DROPPED\").addState(\"ERROR\").initialState(\"OFFLINE\").addTransition(\"ERROR\",\"OFFLINE\",1).addTransition(\"ONLINE\",\"OFFLINE\",2).addTransition(\"OFFLINE\",\"DROPPED\",3).addTransition(\"OFFLINE\",\"ONLINE\",4).build()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "instanceStateMap.put(TEST_INSTANCE,HelixDefinedState.DROPPED.name())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "when(partition.getPartitionName()).thenReturn(TEST_PARTITION)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "when(currentStateOutput.getPendingMessage(TEST_RESOURCE,partition,TEST_INSTANCE)).thenReturn(pendingMessage)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(output.getMessages(TEST_RESOURCE,partition).size(),1)@@@45@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "MessageOutput output = event.getAttribute(AttributeName.MESSAGES_ALL.name())@@@43@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(),resourceMap)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "resourceMap.put(TEST_RESOURCE,resource)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "String toState@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "List<Partition> partitions = Collections.singletonList(partition)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "when(cache.getLiveInstances()).thenReturn(liveInstances)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "process(event)@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "PartitionStateMap partitionStateMap = new PartitionStateMap(TEST_RESOURCE)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "StateModelDefinition stateModelDefinition = new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Map<String,String> instanceStateMap = new HashMap<>()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Map<Partition,Map<String,String>> stateMap = partitionStateMap.getStateMap()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "MessageOutput output = event.getAttribute(AttributeName.MESSAGES_ALL.name())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "when(pendingMessage.getToState()).thenReturn(toState)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "when(pendingMessage.getFromState()).thenReturn(fromState)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "when(message.getFromState()).thenReturn(\"OFFLINE\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "when(liveInstances.values()).thenReturn(Collections.singletonList(mockLiveInstance))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ResourcesStateMap resourcesStateMap = new ResourcesStateMap()@@@35@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(liveInstances.values()).thenReturn(Arrays.asList(mockLiveInstance))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->30 [style = bold, label=""];
12->44 [style = solid, label="partition"];
32->13 [style = solid, label="liveInstances"];
12->28 [style = solid, label="partition"];
12->49 [style = solid, label="partition"];
7->35 [style = bold, label=""];
60->50 [style = dotted, label="true"];
42->48 [style = bold, label=""];
57->59 [style = bold, label=""];
20->44 [style = solid, label="instanceStateMap"];
13->1 [style = bold, label=""];
0->63 [style = dashed, label="0"];
41->28 [style = bold, label=""];
10->39 [style = solid, label="stateModelDefinition"];
55->57 [style = bold, label=""];
21->31 [style = bold, label=""];
10->39 [style = bold, label=""];
35->37 [style = bold, label=""];
17->14 [style = bold, label=""];
20->34 [style = solid, label="instanceStateMap"];
0->24 [style = bold, label=""];
39->58 [style = bold, label=""];
50->59 [style = solid, label="toState"];
32->11 [style = bold, label=""];
16->9 [style = bold, label=""];
58->11 [style = bold, label=""];
40->61 [style = bold, label=""];
9->59 [style = dashed, label="0"];
26->42 [style = bold, label=""];
33->53 [style = dashed, label="0"];
4->7 [style = solid, label="event"];
51->28 [style = bold, label=""];
25->36 [style = bold, label=""];
31->42 [style = solid, label="resourceMap"];
61->13 [style = bold, label=""];
60->62 [style = dotted, label="true"];
12->53 [style = solid, label="partition"];
41->51 [style = dashed, label="0"];
46->37 [style = bold, label=""];
43->46 [style = bold, label=""];
27->56 [style = bold, label=""];
60->52 [style = dotted, label="true"];
22->24 [style = solid, label="currentStateOutput"];
33->5 [style = solid, label="partitions"];
29->20 [style = bold, label=""];
20->41 [style = bold, label=""];
4->46 [style = solid, label="event"];
53->5 [style = solid, label="partitions"];
5->6 [style = bold, label=""];
18->4 [style = bold, label=""];
1->2 [style = solid, label="clusterConfig"];
40->3 [style = bold, label=""];
58->13 [style = solid, label="liveInstances"];
59->63 [style = bold, label=""];
16->57 [style = dashed, label="0"];
4->22 [style = bold, label=""];
37->47 [style = bold, label=""];
11->3 [style = solid, label="mockLiveInstance"];
6->26 [style = bold, label=""];
3->61 [style = dashed, label="0"];
30->33 [style = bold, label=""];
48->14 [style = bold, label=""];
23->15 [style = bold, label=""];
23->56 [style = dashed, label="0"];
17->7 [style = solid, label="resourcesStateMap"];
35->49 [style = bold, label=""];
36->21 [style = solid, label="cache"];
30->53 [style = bold, label=""];
20->28 [style = solid, label="instanceStateMap"];
33->5 [style = bold, label=""];
48->43 [style = solid, label="bestPossibleStateOutput"];
36->39 [style = bold, label=""];
63->24 [style = bold, label=""];
11->61 [style = solid, label="mockLiveInstance"];
34->44 [style = dashed, label="0"];
62->51 [style = solid, label="currentState"];
32->58 [style = dashed, label="0"];
54->36 [style = bold, label=""];
8->26 [style = solid, label="resource"];
24->25 [style = bold, label=""];
39->32 [style = bold, label=""];
20->51 [style = bold, label=""];
14->29 [style = bold, label=""];
1->2 [style = bold, label=""];
55->63 [style = solid, label="pendingMessage"];
38->40 [style = bold, label=""];
12->27 [style = bold, label=""];
31->8 [style = bold, label=""];
25->54 [style = bold, label=""];
60->4 [style = bold, label=""];
36->10 [style = bold, label=""];
19->21 [style = bold, label=""];
12->34 [style = solid, label="partition"];
2->19 [style = bold, label=""];
11->38 [style = bold, label=""];
9->0 [style = bold, label=""];
28->34 [style = bold, label=""];
53->5 [style = bold, label=""];
42->17 [style = bold, label=""];
34->7 [style = bold, label=""];
15->16 [style = bold, label=""];
44->43 [style = bold, label=""];
45->4 [style = bold, label=""];
15->55 [style = dashed, label="0"];
22->12 [style = bold, label=""];
28->44 [style = bold, label=""];
3->13 [style = bold, label=""];
15->0 [style = solid, label="message"];
27->23 [style = bold, label=""];
12->33 [style = solid, label="partition"];
52->57 [style = solid, label="fromState"];
62->56 [style = solid, label="currentState"];
37->49 [style = dashed, label="0"];
54->39 [style = solid, label="stateModelDefinition"];
56->55 [style = bold, label=""];
}
