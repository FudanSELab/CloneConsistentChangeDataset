digraph {
24 [style = filled, label = "assertThat(nested2Mapper.nested().isIncludeInParent(),equalTo(true))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.field1\"),nullValue())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"),nullValue())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length,equalTo(2))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"),nullValue())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testMultiObjectAndNested2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "DocumentMapper docMapper = createIndex(\"test\").mapperService().parse(\"type\",new CompressedXContent(mapping))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertThat(nested2Mapper.nested().isIncludeInParent(),equalTo(false))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field1\"),nullValue())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"),equalTo(\"5\"))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"),equalTo(\"2\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(doc.docs().get(5).get(\"nested1.field1\"),equalTo(\"4\"))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"value\").startArray(\"nested1\").startObject().field(\"field1\",\"1\").startArray(\"nested2\").startObject().field(\"field2\",\"2\").endObject().startObject().field(\"field2\",\"3\").endObject().endArray().endObject().startObject().field(\"field1\",\"4\").startArray(\"nested2\").startObject().field(\"field2\",\"5\").endObject().startObject().field(\"field2\",\"6\").endObject().endArray().endObject().endArray().endObject()),XContentType.JSON))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(doc.docs().get(3).get(\"field\"),nullValue())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(nested2Mapper.nested().isNested(),equalTo(true))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(nested2Mapper.nested().isIncludeInRoot(),equalTo(false))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(nested1Mapper.nested().isIncludeInRoot(),equalTo(false))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(nested1Mapper.nested().isIncludeInParent(),equalTo(false))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(nested1Mapper.nested().isIncludeInParent(),equalTo(true))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"),equalTo(\"2\"))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(nested1Mapper.nested().isNested(),equalTo(true))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(doc.docs().get(0).get(\"field\"),nullValue())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(nested2Mapper.nested().isIncludeInRoot(),equalTo(true))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(doc.docs().size(),equalTo(7))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(docMapper.hasNestedObjects(),equalTo(true))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(doc.docs().get(1).get(\"field\"),nullValue())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"),equalTo(\"5\"))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"),equalTo(\"3\"))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(doc.docs().get(4).get(\"field\"),nullValue())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(doc.docs().get(6).get(\"field\"),equalTo(\"value\"))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(doc.docs().get(2).get(\"field\"),nullValue())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"nested1\").field(\"type\",\"nested\").startObject(\"properties\").startObject(\"nested2\").field(\"type\",\"nested\").field(\"include_in_root\",true).endObject().endObject().endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(doc.docs().get(5).get(\"field\"),nullValue())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"nested1\").field(\"type\",\"nested\").field(\"include_in_parent\",true).startObject(\"properties\").startObject(\"nested2\").field(\"type\",\"nested\").field(\"include_in_parent\",true).endObject().endObject().endObject().endObject().endObject().endObject())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(doc.docs().get(2).get(\"nested1.field1\"),equalTo(\"1\"))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertThat(doc.docs().get(6).get(\"nested1.field1\"),nullValue())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "testMultiRootAndNested1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length,equalTo(4))@@@34@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"),equalTo(\"6\"))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testMultiObjectAndNested2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1->37 [style = dashed, label="0"];
8->10 [style = bold, label=""];
30->22 [style = bold, label=""];
21->42 [style = bold, label=""];
10->31 [style = bold, label=""];
3->25 [style = bold, label=""];
2->35 [style = dashed, label="0"];
1->15 [style = bold, label=""];
29->39 [style = dashed, label="0"];
10->38 [style = dashed, label="0"];
4->21 [style = bold, label=""];
26->33 [style = dashed, label="0"];
35->32 [style = bold, label=""];
23->3 [style = bold, label=""];
37->15 [style = bold, label=""];
24->29 [style = bold, label=""];
12->26 [style = bold, label=""];
19->2 [style = bold, label=""];
20->6 [style = bold, label=""];
28->12 [style = bold, label=""];
38->31 [style = bold, label=""];
34->12 [style = bold, label=""];
11->24 [style = bold, label=""];
13->11 [style = bold, label=""];
11->36 [style = bold, label=""];
8->38 [style = bold, label=""];
36->39 [style = bold, label=""];
9->37 [style = bold, label=""];
12->41 [style = dashed, label="0"];
33->0 [style = bold, label=""];
12->33 [style = solid, label="mapping"];
5->19 [style = bold, label=""];
26->0 [style = bold, label=""];
21->20 [style = bold, label=""];
20->42 [style = dashed, label="0"];
42->6 [style = bold, label=""];
18->27 [style = bold, label=""];
39->7 [style = bold, label=""];
19->35 [style = bold, label=""];
7->16 [style = bold, label=""];
31->30 [style = bold, label=""];
40->41 [style = bold, label=""];
12->33 [style = bold, label=""];
22->17 [style = bold, label=""];
29->7 [style = bold, label=""];
16->14 [style = bold, label=""];
14->18 [style = bold, label=""];
27->23 [style = bold, label=""];
25->8 [style = bold, label=""];
2->32 [style = bold, label=""];
41->26 [style = bold, label=""];
6->9 [style = bold, label=""];
32->13 [style = bold, label=""];
9->1 [style = bold, label=""];
24->36 [style = dashed, label="0"];
17->4 [style = bold, label=""];
41->26 [style = solid, label="mapping"];
0->5 [style = bold, label=""];
12->26 [style = solid, label="mapping"];
}
