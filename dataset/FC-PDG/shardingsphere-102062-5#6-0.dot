digraph {
5 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s algorithm segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProps(),expected.getProps())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getAutoAwareResource(),is(expected.getAutoAwareResource()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertNull(assertContext.getText(\"Actual readwrite splitting rule should not exit.\"),actual)@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertIs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s function segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),CoreMatchers.is(expected.getName()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual algorithm should exist.\"),actual)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"),actual)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final ExpectedAlgorithm expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertNull(assertContext.getText(\"Actual dataSource should not exist.\"),actual)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getReadDataSources(),is(expected.getReadDataSources()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final AlgorithmSegment actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProps(),expected.getProps())@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final ExpectedAlgorithm expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final ExceptedReadwriteSplittingRule expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertNull(assertContext.getText(\"Actual algorithm should not exist.\"),actual)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual readwrite splitting rule should exit.\"),actual)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLoadBalancer(),is(expected.getLoadBalancer()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final ReadwriteSplittingRuleSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final AlgorithmSegment actual@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getWriteDataSource(),is(expected.getWriteDataSource()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->17 [style = dotted, label="true"];
0->3 [style = bold, label=""];
5->14 [style = dotted, label="true"];
7->6 [style = dotted, label="true"];
5->19 [style = dotted, label="false"];
19->18 [style = bold, label=""];
5->18 [style = dotted, label="false"];
18->24 [style = bold, label=""];
5->12 [style = dotted, label="false"];
3->25 [style = dashed, label="0"];
15->25 [style = bold, label=""];
22->15 [style = solid, label="actual"];
9->11 [style = dotted, label="true"];
8->4 [style = solid, label="assertContext"];
5->15 [style = dotted, label="false"];
5->21 [style = dotted, label="false"];
8->14 [style = solid, label="actual"];
5->15 [style = bold, label=""];
0->15 [style = dashed, label="0"];
5->24 [style = dotted, label="false"];
26->21 [style = solid, label="assertContext"];
5->14 [style = bold, label=""];
16->22 [style = dotted, label="true"];
5->17 [style = bold, label=""];
2->17 [style = dashed, label="0"];
16->23 [style = dotted, label="true"];
3->4 [style = bold, label=""];
16->26 [style = dotted, label="true"];
9->8 [style = dotted, label="true"];
24->20 [style = bold, label=""];
20->21 [style = bold, label=""];
5->0 [style = dotted, label="false"];
5->2 [style = bold, label=""];
7->5 [style = bold, label=""];
5->13 [style = dotted, label="false"];
13->12 [style = bold, label=""];
3->12 [style = dashed, label="0"];
2->14 [style = dashed, label="0"];
23->5 [style = solid, label="expected"];
5->0 [style = bold, label=""];
11->5 [style = solid, label="expected"];
22->17 [style = solid, label="actual"];
12->4 [style = bold, label=""];
6->2 [style = solid, label="actual"];
10->4 [style = solid, label="assertContext"];
1->5 [style = solid, label="expected"];
5->13 [style = bold, label=""];
0->13 [style = dashed, label="0"];
25->19 [style = bold, label=""];
5->3 [style = dotted, label="false"];
5->25 [style = dotted, label="false"];
9->5 [style = bold, label=""];
6->0 [style = solid, label="actual"];
16->5 [style = bold, label=""];
5->20 [style = dotted, label="false"];
7->1 [style = dotted, label="true"];
7->8 [style = dotted, label="true"];
9->10 [style = dotted, label="true"];
8->13 [style = solid, label="actual"];
5->2 [style = dotted, label="true"];
8->26 [style = dashed, label="0"];
5->4 [style = dotted, label="false"];
}
