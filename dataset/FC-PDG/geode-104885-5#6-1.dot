digraph {
14 [style = filled, label = "final boolean(( actualUnionCallback = new boolean((((@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final boolean(( actualIntersectionCallback = new boolean((((@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "i < queries.length@@@70@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(expectedTypes(i(,sr(i((1(.getCollectionType().getElementType())@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testBug39851['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(expectedIntersectionCallback(i(,actualIntersectionCallback(i()@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final boolean(( expectedUnionCallback = {false}@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(expectedIndexUsed(i(,actualIndexUsed(i()@@@76@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "CacheUtils.compareResultsOfWithAndWithoutIndex(sr,this)@@@84@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Portfolio pf = new Portfolio(i)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int i = 100@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ObjectType(( expectedTypes = new ObjectType((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@113d99@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "CacheUtils.compareResultsOfWithAndWithoutIndex(sr,this)@@@80@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "QueryObserverHolder.setInstance(new QueryObserverAdapter(){@Override public void invokedQueryUtilsUnion(SelectResults r1,SelectResults r2){actualUnionCallback(i( = true}@Override public void invokedQueryUtilsIntersection(SelectResults r1,SelectResults r2){actualIntersectionCallback(i( = true}@Override public void beforeIndexLookup(Index index,int oper,Object key){actualIndexUsed(i( = true}@Override public void beforeApplyingProjectionOnFilterEvaluatedResults(Object preProjectionApplied){actualProjectionCallback(i( = true}@Override public void afterQueryEvaluation(Object result){++i}})@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(expectedProjectionCallabck(i(,actualProjectionCallback(i()@@@81@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "QueryService qs = CacheUtils.getQueryService()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(expectedTypes(i(,sr(i((1(.getCollectionType().getElementType())@@@75@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "i < 200@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i < queries.length@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "qs.createIndex(\"PortFolioID\",IndexType.FUNCTIONAL,\"ID\",SEPARATOR + \"pos\")@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "Query q = qs.newQuery(queries(i()@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "++i@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final boolean(( actualProjectionCallback = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@113d78@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final boolean(( expectedProjectionCallabck = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@113d6f@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "++i@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Query q = qs.newQuery(queries(i()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(expectedUnionCallback(i(,actualUnionCallback(i()@@@74@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "rgn.put(\"\" + i,pf)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "int i = 0@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(expectedProjectionCallabck(i(,actualProjectionCallback(i()@@@77@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "qs.createIndex(\"PortFolioID\",IndexType.FUNCTIONAL,\"ID\",\"/pos\")@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final boolean(( actualIndexUsed = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@113d66@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testUnionDuringIndexEvaluationForIN['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final boolean(( expectedIndexUsed = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@113d5d@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(expectedIntersectionCallback(i(,actualIntersectionCallback(i()@@@78@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Region rgn = CacheUtils.getRegion(SEPARATOR + \"pos\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Region rgn = CacheUtils.getRegion(\"/pos\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "int i = 0@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "String(( queries = new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@113d1e@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "sr(i((0( = (SelectResults)q.execute()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "++i@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "sr(i((1( = (SelectResults)q.execute()@@@73@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "QueryObserverHolder.setInstance(new QueryObserverAdapter(){@Override public void invokedQueryUtilsUnion(SelectResults r1,SelectResults r2){actualUnionCallback(i( = true}@Override public void invokedQueryUtilsIntersection(SelectResults r1,SelectResults r2){actualIntersectionCallback(i( = true}@Override public void beforeIndexLookup(Index index,int oper,Object key){actualIndexUsed(i( = true}@Override public void beforeApplyingProjectionOnFilterEvaluatedResults(Object preProjectionApplied){actualProjectionCallback(i( = true}@Override public void afterQueryEvaluation(Object result){++i}})@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testUnionDuringIndexEvaluationForIN['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "pf.setCreateTime(10l)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "SelectResults(((( sr = new SelectResults((((((@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final boolean(( expectedIntersectionCallback = {false}@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30->5 [style = dotted, label="true"];
27->10 [style = solid, label="expectedTypes"];
9->11 [style = bold, label=""];
0->13 [style = bold, label=""];
46->28 [style = dotted, label="true"];
46->5 [style = bold, label=""];
15->25 [style = bold, label=""];
35->41 [style = bold, label=""];
25->30 [style = bold, label=""];
27->44 [style = bold, label=""];
45->42 [style = solid, label="i"];
46->24 [style = dotted, label="true"];
14->17 [style = bold, label=""];
30->36 [style = bold, label=""];
26->1 [style = solid, label="i"];
11->20 [style = solid, label="i"];
21->2 [style = bold, label=""];
19->24 [style = solid, label="i"];
40->11 [style = bold, label=""];
18->22 [style = bold, label=""];
44->30 [style = solid, label="actualUnionCallback"];
28->15 [style = solid, label="i"];
19->5 [style = solid, label="sr"];
19->28 [style = solid, label="i"];
20->7 [style = solid, label="pf"];
33->2 [style = solid, label="i"];
6->35 [style = solid, label="expectedUnionCallback"];
13->5 [style = solid, label="expectedIndexUsed"];
35->10 [style = bold, label=""];
17->15 [style = solid, label="expectedIntersectionCallback"];
32->18 [style = bold, label=""];
13->24 [style = solid, label="expectedIndexUsed"];
32->20 [style = bold, label=""];
16->9 [style = bold, label=""];
46->30 [style = dotted, label="true"];
42->19 [style = bold, label=""];
11->32 [style = solid, label="i"];
24->28 [style = bold, label=""];
46->42 [style = bold, label=""];
43->16 [style = bold, label=""];
22->33 [style = bold, label=""];
16->40 [style = bold, label=""];
4->35 [style = solid, label="actualUnionCallback"];
4->19 [style = bold, label=""];
30->12 [style = dotted, label="true"];
44->35 [style = solid, label="actualIntersectionCallback"];
2->21 [style = dotted, label="true"];
2->39 [style = bold, label=""];
25->24 [style = bold, label=""];
19->25 [style = solid, label="i"];
28->35 [style = bold, label=""];
8->12 [style = solid, label="expectedProjectionCallabck"];
31->27 [style = bold, label=""];
8->28 [style = solid, label="expectedProjectionCallabck"];
7->23 [style = bold, label=""];
41->46 [style = bold, label=""];
19->46 [style = solid, label="i"];
45->46 [style = bold, label=""];
30->28 [style = dotted, label="true"];
44->45 [style = bold, label=""];
46->25 [style = dotted, label="true"];
18->24 [style = solid, label="queries"];
28->30 [style = solid, label="i"];
26->5 [style = solid, label="sr"];
19->35 [style = solid, label="i"];
30->24 [style = bold, label=""];
28->35 [style = solid, label="i"];
46->35 [style = dotted, label="true"];
39->13 [style = bold, label=""];
2->1 [style = bold, label=""];
4->12 [style = solid, label="actualProjectionCallback"];
30->10 [style = dotted, label="true"];
38->16 [style = bold, label=""];
28->24 [style = solid, label="i"];
32->20 [style = dotted, label="true"];
32->7 [style = dotted, label="true"];
23->32 [style = bold, label=""];
19->30 [style = solid, label="i"];
11->32 [style = bold, label=""];
4->5 [style = solid, label="actualIndexUsed"];
22->5 [style = solid, label="sr"];
17->35 [style = solid, label="expectedIntersectionCallback"];
26->2 [style = solid, label="i"];
28->10 [style = solid, label="i"];
46->19 [style = dotted, label="true"];
26->21 [style = bold, label=""];
2->0 [style = bold, label=""];
44->28 [style = solid, label="actualProjectionCallback"];
10->5 [style = bold, label=""];
30->25 [style = dotted, label="true"];
33->1 [style = solid, label="i"];
3->8 [style = bold, label=""];
34->16 [style = bold, label=""];
2->26 [style = dotted, label="true"];
26->36 [style = solid, label="sr"];
18->1 [style = solid, label="queries"];
8->37 [style = bold, label=""];
32->29 [style = dotted, label="true"];
28->36 [style = solid, label="sr"];
33->2 [style = bold, label=""];
28->12 [style = solid, label="i"];
18->42 [style = solid, label="queries"];
44->24 [style = solid, label="actualIndexUsed"];
30->24 [style = dotted, label="true"];
20->29 [style = bold, label=""];
32->23 [style = dotted, label="true"];
17->31 [style = bold, label=""];
6->30 [style = solid, label="expectedUnionCallback"];
12->15 [style = bold, label=""];
22->36 [style = solid, label="sr"];
30->25 [style = bold, label=""];
11->7 [style = solid, label="i"];
27->25 [style = solid, label="expectedTypes"];
0->39 [style = dashed, label="0"];
46->41 [style = dotted, label="true"];
1->26 [style = bold, label=""];
37->6 [style = bold, label=""];
45->46 [style = solid, label="i"];
6->14 [style = bold, label=""];
27->4 [style = bold, label=""];
19->42 [style = solid, label="i"];
9->40 [style = dashed, label="0"];
13->3 [style = bold, label=""];
5->12 [style = bold, label=""];
30->35 [style = dotted, label="true"];
2->1 [style = dotted, label="true"];
29->7 [style = bold, label=""];
46->42 [style = dotted, label="true"];
30->15 [style = dotted, label="true"];
4->15 [style = solid, label="actualIntersectionCallback"];
19->30 [style = bold, label=""];
28->5 [style = solid, label="i"];
}
