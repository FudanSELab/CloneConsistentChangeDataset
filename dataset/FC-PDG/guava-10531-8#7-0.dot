digraph {
17 [style = filled, label = "assertThat(graph.edgeValueOrDefault(1,2,DEFAULT)).isEqualTo(DEFAULT)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(graph.edgeValueOrDefault(2,1,DEFAULT)).isEqualTo(\"valueB\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "graph.putEdgeValue(2,1,\"valueB\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(graph.edgeValue(2,1).orElse(null)).isNull()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(graph.edgeValue(2,1).orElse(DEFAULT)).isEqualTo(DEFAULT)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(graph.edgeValue(1,2).orElse(null)).isNull()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertThat(graph.edgeValueOrDefault(1,2,null)).isNull()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(graph.edgeValueOrDefault(2,1,null)).isEqualTo(\"valueB\")@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(graph.edgeValue(2,1).get()).isEqualTo(\"valueC\")@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "graph.removeEdge(1,2)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(graph.edgeValue(1,2).orElse(null)).isNull()@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(graph.edgeValueOrDefault(2,1,null)).isEqualTo(\"valueC\")@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(graph.edgeValue(1,2).get()).isEqualTo(\"valueA\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "graph = ValueGraphBuilder.directed().build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(graph.edgeValueOrDefault(2,1,DEFAULT)).isEqualTo(DEFAULT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(graph.edgeValueOrDefault(1,2,null)).isNull()@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "graph.putEdgeValue(1,2,\"valueA\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "graph.putEdgeValue(2,1,\"valueC\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "edgeValue_missing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "edgeValue_missing['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(graph.edgeValue(1,2).orElse(DEFAULT)).isEqualTo(DEFAULT)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(graph.edgeValueOrDefault(1,2,DEFAULT)).isEqualTo(DEFAULT)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(graph.edgeValueOrDefault(1,2,null)).isEqualTo(\"valueA\")@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(graph.edgeValue(1,2).orElse(DEFAULT)).isEqualTo(DEFAULT)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(graph.edgeValueOrDefault(2,1,DEFAULT)).isEqualTo(\"valueC\")@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(graph.edgeValueOrDefault(2,1,null)).isNull()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertThat(graph.edgeValue(2,1).get()).isEqualTo(\"valueB\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(graph.edgeValueOrDefault(1,2,DEFAULT)).isEqualTo(\"valueA\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "edgeValue_missing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23->22 [style = bold, label=""];
4->6 [style = bold, label=""];
14->3 [style = bold, label=""];
24->18 [style = bold, label=""];
9->4 [style = bold, label=""];
21->16 [style = bold, label=""];
6->0 [style = bold, label=""];
4->27 [style = bold, label=""];
19->8 [style = bold, label=""];
14->13 [style = bold, label=""];
28->8 [style = bold, label=""];
17->12 [style = bold, label=""];
8->17 [style = bold, label=""];
1->24 [style = bold, label=""];
5->10 [style = bold, label=""];
27->20 [style = bold, label=""];
3->5 [style = bold, label=""];
2->3 [style = bold, label=""];
12->9 [style = bold, label=""];
26->25 [style = bold, label=""];
10->7 [style = bold, label=""];
0->15 [style = bold, label=""];
15->14 [style = bold, label=""];
11->8 [style = bold, label=""];
18->21 [style = bold, label=""];
14->23 [style = bold, label=""];
7->1 [style = bold, label=""];
1->16 [style = bold, label=""];
13->2 [style = bold, label=""];
20->26 [style = bold, label=""];
25->6 [style = bold, label=""];
22->13 [style = bold, label=""];
12->6 [style = bold, label=""];
}
