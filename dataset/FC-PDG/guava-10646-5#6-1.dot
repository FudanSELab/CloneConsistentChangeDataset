digraph {
32 [style = filled, label = "N nodeU = endpointPair.nodeU()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(network.predecessors(nodeV)).contains(nodeU)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "assertThat(nodeString).contains(node.toString())@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "assertThat(network.incidentNodes(inEdge).target()).isEqualTo(node)@@@119@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
100 [style = filled, label = "assertThat(network.edgesConnecting(node,successor)).isNotEmpty()@@@108@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "EndpointPair<N> endpointPair = network.incidentNodes(edge)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "assertTrue(!network.edgesConnecting(node,adjacentNode).isEmpty() || !network.edgesConnecting(adjacentNode,node).isEmpty())@@@106@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "boolean isSelfLoop = node.equals(otherNode)@@@85@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(network.successors(node)).isEqualTo(network.adjacentNodes(node))@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "boolean connected = !edgesConnecting.isEmpty()@@@86@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "assertThat(network.incidentNodes(outEdge).source()).isEqualTo(node)@@@126@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
111 [style = filled, label = "assertThat(network.edgeConnecting(node,otherNode).isPresent()).isFalse()@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "assertThat(network.edgeConnectingOrNull(node,otherNode)).isNull()@@@65@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertThat(network.successors(nodeU)).contains(nodeV)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "assertThat(network.incidentEdges(node)).contains(inEdge)@@@116@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertThat(network.outEdges(network.incidentNodes(inEdge).adjacentNode(node))).contains(inEdge)@@@123@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(network.incidentEdges(nodeV)).contains(edge)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "assertThat(network.incidentEdges(node)).contains(outEdge)@@@129@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "int nodeStart = networkString.indexOf(\"nodes:\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "IllegalArgumentException expected@@@76@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertThat(network.successors(node)).isEqualTo(asGraph.successors(node))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
131 [style = filled, label = "network.isDirected() || !isSelfLoop@@@87@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(network.inEdges(node).contains(incidentEdge) || network.outEdges(node).contains(incidentEdge))@@@111@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "assertThat(network.hasEdgeConnecting(node,otherNode)).isTrue()@@@71@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
130 [style = filled, label = "assertThat(network.predecessors(successor)).contains(node)@@@113@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
129 [style = filled, label = "assertThat(network.successors(predecessor)).contains(node)@@@109@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
135 [style = filled, label = "assertThat(network.edgeConnectingOrNull(node,otherNode)).isEqualTo(edge)@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
106 [style = filled, label = "{}@@@76@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
57 [style = filled, label = "assertTrue(network.predecessors(node).contains(adjacentNode) || network.successors(node).contains(adjacentNode))@@@99@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
134 [style = filled, label = "assertThat(network.edgesConnecting(node,successor)).isNotEmpty()@@@114@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(network.inEdges(node).contains(incidentEdge) || network.outEdges(node).contains(incidentEdge))@@@108@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "assertThat(network.incidentNodes(edge)).isEqualTo(EndpointPair.of(network,node,otherNode))@@@99@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "edgesConnecting.size()@@@64@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "assertThat(network.edgesConnecting(predecessor,node)).isNotEmpty()@@@104@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "assertThat(network.edgesConnecting(nodeU,nodeV)).contains(edge)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "assertThat(network.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "network.edgeConnectingOrNull(node,otherNode)@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(network.outDegree(node)).isEqualTo(network.degree(node))@@@60@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(network.incidentNodes(edge)).isEqualTo(EndpointPair.of(network,node,otherNode))@@@93@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertThat(network.predecessors(successor)).contains(node)@@@104@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(network.incidentEdges(node).size() + selfLoopCount).isEqualTo(network.inDegree(node) + network.outDegree(node))@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
117 [style = filled, label = "assertThat(network.incidentNodes(inEdge).target()).isEqualTo(node)@@@125@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
113 [style = filled, label = "assertThat(network.edgeConnecting(node,otherNode).get()).isEqualTo(edge)@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "assertThat(network.isDirected()).isEqualTo(asGraph.isDirected())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
118 [style = filled, label = "{}@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "N nodeV = endpointPair.nodeV()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
136 [style = filled, label = "assertThat(network.incidentNodes(outEdge).source()).isEqualTo(node)@@@132@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(network.inEdges(node)).hasSize(network.inDegree(node))@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "assertThat(network.incidentEdges(node)).contains(outEdge)@@@120@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "assertThat(network.hasEdgeConnecting(node,otherNode)).isTrue()@@@69@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
99 [style = filled, label = "IllegalArgumentException expected@@@76@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
116 [style = filled, label = "E edge = edgesConnecting.iterator().next()@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
119 [style = filled, label = "!network.allowsParallelEdges()@@@90@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
115 [style = filled, label = "assertThat(network.incidentNodes(incidentEdge)).contains(node)@@@119@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertThat(networkString).contains(\"allowsSelfLoops: \" + network.allowsSelfLoops())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(network.inDegree(node)).isEqualTo(network.degree(node))@@@59@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertTrue(edge.equals(adjacentEdge) || network.adjacentEdges(edge).contains(adjacentEdge))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "assertThat(network.incidentEdges(nodeU)).contains(edge)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertThat(network.outEdges(node)).hasSize(network.outDegree(node))@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertThat(network.edgeConnectingOrNull(node,otherNode)).isEqualTo(edgesConnecting.iterator().next())@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Graph<N> asGraph = network.asGraph()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "assertStronglyEquivalent(network,Graphs.copyOf(network))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
127 [style = filled, label = "IllegalArgumentException expected@@@82@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
89 [style = filled, label = "assertThat(network.incidentNodes(incidentEdge)).contains(node)@@@113@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "String networkString = network.toString()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(asGraph.edges()).contains(EndpointPair.of(network,nodeU,nodeV))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "network.isDirected()@@@124@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Network<N,E> network@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertThat(edgesConnecting.size()).isAtMost(1)@@@91@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "assertThat(network.predecessors(otherNode).contains(node)).isEqualTo(connected)@@@91@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
85 [style = filled, label = "AbstractGraphTest.validateGraph(asGraph)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertThat(networkString).contains(\"isDirected: \" + network.isDirected())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
124 [style = filled, label = "network.edgeConnectingOrNull(node,otherNode)@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertStronglyEquivalent(network,ImmutableNetwork.copyOf(network))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "assertThat(network.inEdges(otherNode)).contains(edge)@@@95@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "boolean isSelfLoop = node.equals(otherNode)@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "assertThat(edgeString).contains(edge.toString())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(network.adjacentNodes(nodeU)).contains(nodeV)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "assertTrue(!network.edgesConnecting(node,adjacentNode).isEmpty() || !network.edgesConnecting(adjacentNode,node).isEmpty())@@@100@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
78 [style = filled, label = "assertThat(network.incidentEdges(node)).contains(inEdge)@@@122@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(network.inEdges(nodeV)).contains(edge)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(network.predecessors(node)).isEqualTo(asGraph.predecessors(node))@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(network.successors(node).contains(otherNode)).isEqualTo(connected)@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertThat(network.successors(predecessor)).contains(node)@@@103@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "network.edgeConnectingOrNull(node,otherNode)@@@70@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int selfLoopCount = network.edgesConnecting(node,node).size()@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "network.isDirected()@@@49@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "validateNetwork['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertTrue(network.predecessors(node).contains(adjacentNode) || network.successors(node).contains(adjacentNode))@@@96@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "assertThat(edgesConnecting).isEqualTo(Sets.intersection(network.outEdges(node),network.inEdges(otherNode)))@@@82@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
88 [style = filled, label = "assertThat(network.predecessors(otherNode).contains(node)).isEqualTo(connected)@@@97@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
120 [style = filled, label = "assertThat(network.successors(node).contains(otherNode)).isEqualTo(connected)@@@96@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertThat(network.successors(predecessor)).contains(node)@@@100@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "!network.allowsParallelEdges()@@@84@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "fail()@@@80@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "int edgeStart = networkString.indexOf(\"edges:\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
123 [style = filled, label = "assertThat(network.inEdges(otherNode)).contains(edge)@@@101@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Set<E> edgesConnecting = sanityCheckSet(network.edgesConnecting(node,otherNode))@@@63@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertThat(network.edges().size()).isAtLeast(asGraph.edges().size())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(networkString).contains(\"allowsParallelEdges: \" + network.allowsParallelEdges())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "boolean isSelfLoop = node.equals(otherNode)@@@76@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String edgeString = networkString.substring(edgeStart)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "assertThat(network.hasEdgeConnecting(node,otherNode)).isFalse()@@@66@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "fail()@@@74@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(network.inEdges(node).contains(incidentEdge) || network.outEdges(node).contains(incidentEdge))@@@117@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
121 [style = filled, label = "assertThat(network.edges()).contains(incidentEdge)@@@118@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "validateNetwork['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "IllegalArgumentException expected@@@73@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "String nodeString = networkString.substring(nodeStart,edgeStart)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertThat(edgesConnecting).isEqualTo(Sets.intersection(network.outEdges(node),network.inEdges(otherNode)))@@@88@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
104 [style = filled, label = "assertThat(edgesConnecting.size()).isAtMost(1)@@@85@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
114 [style = filled, label = "!network.allowsSelfLoops() && isSelfLoop@@@93@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "assertThat(network.predecessors(successor)).contains(node)@@@107@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(network.predecessors(node)).isEqualTo(network.adjacentNodes(node))@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(network.adjacentNodes(nodeV)).contains(nodeU)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertThat(network.inEdges(network.incidentNodes(outEdge).adjacentNode(node))).contains(outEdge)@@@130@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertThat(network.inEdges(node)).isEqualTo(network.incidentEdges(node))@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(network.incidentEdges(node).size() + selfLoopCount).isEqualTo(network.degree(node))@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
133 [style = filled, label = "assertThat(network.edgesConnecting(predecessor,node)).isNotEmpty()@@@110@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
126 [style = filled, label = "assertTrue(network.predecessors(node).contains(adjacentNode) || network.successors(node).contains(adjacentNode))@@@105@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
132 [style = filled, label = "{}@@@76@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "fail()@@@74@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
86 [style = filled, label = "assertThat(network.nodes()).isEqualTo(asGraph.nodes())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
128 [style = filled, label = "network.isDirected()@@@131@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
90 [style = filled, label = "assertThat(connected).isFalse()@@@88@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "assertThat(network.nodeOrder()).isEqualTo(asGraph.nodeOrder())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "!network.allowsSelfLoops() && isSelfLoop@@@87@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "assertThat(connected).isFalse()@@@94@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "validateNetwork['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
122 [style = filled, label = "network.edgeConnecting(node,otherNode)@@@79@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertThat(network.incidentEdges(node)).contains(outEdge)@@@123@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "assertThat(network.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node))@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
125 [style = filled, label = "assertThat(network.outEdges(node)).contains(edge)@@@100@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "assertThat(network.outEdges(nodeU)).contains(edge)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertThat(network.nodes()).contains(incidentNode)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "assertThat(network.incidentEdges(node)).contains(inEdge)@@@113@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertThat(network.outEdges(node)).isEqualTo(network.incidentEdges(node))@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->84 [style = bold, label=""];
70->88 [style = bold, label=""];
27->91 [style = solid, label="connected"];
0->13 [style = bold, label=""];
41->19 [style = bold, label=""];
79->66 [style = bold, label=""];
51->116 [style = bold, label=""];
70->20 [style = bold, label=""];
115->78 [style = bold, label=""];
5->104 [style = bold, label=""];
31->6 [style = solid, label="edgeStart"];
117->78 [style = bold, label=""];
128->79 [style = bold, label=""];
16->90 [style = bold, label=""];
44->74 [style = bold, label=""];
51->96 [style = dotted, label="true"];
53->63 [style = bold, label=""];
123->126 [style = bold, label=""];
87->33 [style = solid, label="isSelfLoop"];
55->122 [style = bold, label=""];
109->132 [style = bold, label=""];
50->41 [style = dotted, label="false"];
24->16 [style = solid, label="isSelfLoop"];
103->35 [style = bold, label=""];
85->86 [style = bold, label=""];
63->5 [style = dotted, label="true"];
5->104 [style = dotted, label="true"];
91->35 [style = bold, label=""];
74->40 [style = bold, label=""];
34->75 [style = bold, label=""];
4->35 [style = solid, label="network"];
4->70 [style = solid, label="network"];
47->92 [style = bold, label=""];
108->129 [style = bold, label=""];
73->18 [style = solid, label="nodeV"];
13->59 [style = bold, label=""];
60->116 [style = dashed, label="0"];
103->57 [style = bold, label=""];
53->131 [style = bold, label=""];
47->74 [style = bold, label=""];
99->106 [style = bold, label=""];
76->87 [style = bold, label=""];
116->123 [style = solid, label="edge"];
51->76 [style = dotted, label="true"];
22->87 [style = bold, label=""];
31->48 [style = bold, label=""];
38->56 [style = bold, label=""];
14->46 [style = bold, label=""];
104->16 [style = bold, label=""];
93->64 [style = bold, label=""];
134->130 [style = bold, label=""];
51->55 [style = dotted, label="true"];
33->16 [style = dotted, label="true"];
71->49 [style = bold, label=""];
25->10 [style = bold, label=""];
51->116 [style = dotted, label="true"];
86->36 [style = bold, label=""];
24->80 [style = solid, label="connected"];
60->94 [style = bold, label=""];
75->48 [style = solid, label="nodeStart"];
107->79 [style = bold, label=""];
46->50 [style = bold, label=""];
70->125 [style = bold, label=""];
51->76 [style = bold, label=""];
45->64 [style = bold, label=""];
119->33 [style = bold, label=""];
24->27 [style = bold, label=""];
50->19 [style = dotted, label="false"];
97->4 [style = dotted, label="true"];
107->117 [style = dotted, label="true"];
78->47 [style = dotted, label="true"];
123->20 [style = bold, label=""];
18->38 [style = bold, label=""];
30->91 [style = bold, label=""];
96->22 [style = bold, label=""];
8->34 [style = bold, label=""];
70->28 [style = bold, label=""];
57->105 [style = bold, label=""];
33->16 [style = bold, label=""];
97->84 [style = bold, label=""];
63->5 [style = bold, label=""];
126->108 [style = bold, label=""];
5->33 [style = bold, label=""];
32->10 [style = solid, label="nodeU"];
84->37 [style = bold, label=""];
27->53 [style = bold, label=""];
53->101 [style = bold, label=""];
51->96 [style = bold, label=""];
52->65 [style = bold, label=""];
92->40 [style = bold, label=""];
50->26 [style = dotted, label="false"];
121->115 [style = bold, label=""];
32->25 [style = solid, label="nodeU"];
1->42 [style = bold, label=""];
112->27 [style = bold, label=""];
128->66 [style = bold, label=""];
50->59 [style = dotted, label="true"];
44->128 [style = bold, label=""];
51->94 [style = dotted, label="true"];
57->45 [style = bold, label=""];
27->114 [style = solid, label="isSelfLoop"];
76->98 [style = bold, label=""];
77->78 [style = bold, label=""];
117->79 [style = bold, label=""];
129->133 [style = bold, label=""];
16->80 [style = bold, label=""];
127->118 [style = bold, label=""];
116->135 [style = bold, label=""];
123->70 [style = bold, label=""];
39->72 [style = bold, label=""];
52->58 [style = bold, label=""];
64->45 [style = bold, label=""];
51->60 [style = dotted, label="true"];
71->7 [style = bold, label=""];
51->60 [style = bold, label=""];
100->71 [style = bold, label=""];
4->37 [style = solid, label="network"];
49->71 [style = bold, label=""];
133->129 [style = bold, label=""];
125->123 [style = bold, label=""];
47->107 [style = bold, label=""];
40->79 [style = bold, label=""];
71->100 [style = bold, label=""];
119->33 [style = dotted, label="true"];
19->26 [style = bold, label=""];
29->32 [style = bold, label=""];
56->21 [style = bold, label=""];
83->77 [style = bold, label=""];
44->95 [style = dotted, label="true"];
88->70 [style = bold, label=""];
90->30 [style = bold, label=""];
120->88 [style = bold, label=""];
12->4 [style = dotted, label="true"];
32->18 [style = solid, label="nodeU"];
6->67 [style = bold, label=""];
136->79 [style = bold, label=""];
55->87 [style = bold, label=""];
133->130 [style = bold, label=""];
44->66 [style = bold, label=""];
59->20 [style = bold, label=""];
110->84 [style = bold, label=""];
26->20 [style = bold, label=""];
32->73 [style = bold, label=""];
42->61 [style = bold, label=""];
53->88 [style = solid, label="connected"];
80->30 [style = bold, label=""];
134->17 [style = bold, label=""];
51->102 [style = dotted, label="true"];
73->21 [style = solid, label="nodeV"];
9->22 [style = bold, label=""];
22->102 [style = bold, label=""];
4->18 [style = solid, label="network"];
61->41 [style = bold, label=""];
63->119 [style = bold, label=""];
24->30 [style = solid, label="connected"];
78->74 [style = bold, label=""];
47->40 [style = bold, label=""];
44->95 [style = bold, label=""];
93->71 [style = bold, label=""];
116->135 [style = solid, label="edge"];
50->42 [style = dotted, label="false"];
51->9 [style = bold, label=""];
128->136 [style = bold, label=""];
110->4 [style = dotted, label="true"];
16->90 [style = dotted, label="true"];
52->66 [style = bold, label=""];
51->9 [style = dotted, label="true"];
81->11 [style = bold, label=""];
136->66 [style = bold, label=""];
51->124 [style = dotted, label="true"];
48->6 [style = bold, label=""];
33->80 [style = bold, label=""];
70->103 [style = bold, label=""];
51->124 [style = bold, label=""];
122->112 [style = bold, label=""];
36->39 [style = bold, label=""];
47->77 [style = bold, label=""];
27->30 [style = solid, label="connected"];
5->16 [style = bold, label=""];
118->27 [style = bold, label=""];
107->78 [style = bold, label=""];
95->40 [style = bold, label=""];
115->17 [style = bold, label=""];
107->117 [style = bold, label=""];
53->120 [style = solid, label="connected"];
114->80 [style = bold, label=""];
65->52 [style = bold, label=""];
51->112 [style = dotted, label="true"];
50->13 [style = dotted, label="true"];
50->0 [style = bold, label=""];
116->125 [style = solid, label="edge"];
103->20 [style = bold, label=""];
16->30 [style = bold, label=""];
43->65 [style = bold, label=""];
15->43 [style = bold, label=""];
20->51 [style = bold, label=""];
47->83 [style = bold, label=""];
66->81 [style = bold, label=""];
87->24 [style = bold, label=""];
101->5 [style = bold, label=""];
3->17 [style = bold, label=""];
113->27 [style = bold, label=""];
89->77 [style = bold, label=""];
37->2 [style = bold, label=""];
105->57 [style = bold, label=""];
114->80 [style = dotted, label="true"];
21->82 [style = bold, label=""];
28->57 [style = bold, label=""];
64->93 [style = bold, label=""];
131->63 [style = bold, label=""];
76->111 [style = bold, label=""];
51->135 [style = dotted, label="true"];
105->64 [style = bold, label=""];
11->54 [style = bold, label=""];
54->14 [style = bold, label=""];
62->8 [style = bold, label=""];
4->88 [style = solid, label="network"];
35->70 [style = bold, label=""];
98->24 [style = bold, label=""];
116->113 [style = solid, label="edge"];
119->114 [style = bold, label=""];
128->136 [style = dotted, label="true"];
10->15 [style = bold, label=""];
63->33 [style = bold, label=""];
80->120 [style = bold, label=""];
47->92 [style = dotted, label="true"];
51->113 [style = dotted, label="true"];
92->77 [style = bold, label=""];
57->28 [style = bold, label=""];
53->5 [style = bold, label=""];
131->119 [style = bold, label=""];
31->48 [style = solid, label="edgeStart"];
53->101 [style = dotted, label="true"];
114->120 [style = bold, label=""];
44->40 [style = bold, label=""];
88->35 [style = bold, label=""];
73->56 [style = solid, label="nodeV"];
79->44 [style = dotted, label="true"];
4->84 [style = solid, label="network"];
27->63 [style = bold, label=""];
78->83 [style = bold, label=""];
135->113 [style = bold, label=""];
106->24 [style = bold, label=""];
108->126 [style = bold, label=""];
30->88 [style = bold, label=""];
124->55 [style = bold, label=""];
7->3 [style = bold, label=""];
60->87 [style = bold, label=""];
111->27 [style = bold, label=""];
51->111 [style = dotted, label="true"];
51->122 [style = dotted, label="true"];
17->7 [style = bold, label=""];
50->0 [style = dotted, label="true"];
33->114 [style = bold, label=""];
78->47 [style = bold, label=""];
100->3 [style = bold, label=""];
102->24 [style = bold, label=""];
58->29 [style = bold, label=""];
82->69 [style = bold, label=""];
50->1 [style = bold, label=""];
67->85 [style = bold, label=""];
89->3 [style = bold, label=""];
17->121 [style = bold, label=""];
79->74 [style = bold, label=""];
73->18 [style = bold, label=""];
50->61 [style = dotted, label="false"];
51->98 [style = dotted, label="true"];
131->63 [style = dotted, label="true"];
51->22 [style = dotted, label="true"];
132->122 [style = bold, label=""];
17->83 [style = bold, label=""];
67->85 [style = solid, label="asGraph"];
75->31 [style = bold, label=""];
64->49 [style = bold, label=""];
69->25 [style = bold, label=""];
17->89 [style = bold, label=""];
79->44 [style = bold, label=""];
130->134 [style = bold, label=""];
94->24 [style = bold, label=""];
72->68 [style = bold, label=""];
27->53 [style = dotted, label="true"];
50->1 [style = dotted, label="false"];
95->66 [style = bold, label=""];
23->55 [style = bold, label=""];
68->58 [style = bold, label=""];
2->62 [style = bold, label=""];
}
