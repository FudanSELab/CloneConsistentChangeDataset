digraph {
1 [style = filled, label = "testLogTimeoutAlmostReachedWarningDuringRecovery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testLogTimeoutAlmostReachedWarningDuringRecovery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "harness.snapshot(0,1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final long transactionTimeout = 1000@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final OperatorStateHandles snapshot = harness.snapshot(0,1)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "testLogTimeoutAlmostReachedWarningDuringCommit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "harness.open()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "harness.notifyOfCompletedCheckpoint(1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final OperatorSubtaskState snapshot = harness.snapshot(0,1)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final long elapsedTime = (long)((double)transactionTimeout * warningRatio + 2)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "clock.setEpochMilli(elapsedTime)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "harness.initializeState(snapshot)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final List<String> logMessages = loggingEvents.stream().map(null).collect(Collectors.toList())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "sinkFunction.setTransactionTimeout(transactionTimeout)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final double warningRatio = 0.5@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "sinkFunction.enableTransactionTimeoutWarnings(warningRatio)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(logMessages,hasItem(containsString(\"has been open for 502 ms. \" + \"This is close to or even exceeding the transaction timeout of 1000 ms.\")))@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "clock.setEpochMilli(0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
8->15 [style = bold, label=""];
9->4 [style = solid, label="logMessages"];
12->16 [style = dashed, label="0"];
7->10 [style = bold, label=""];
16->6 [style = bold, label=""];
9->4 [style = bold, label=""];
3->11 [style = bold, label=""];
11->6 [style = solid, label="warningRatio"];
11->10 [style = solid, label="warningRatio"];
12->2 [style = solid, label="snapshot"];
1->0 [style = bold, label=""];
2->9 [style = bold, label=""];
12->6 [style = bold, label=""];
2->15 [style = dashed, label="0"];
5->16 [style = bold, label=""];
3->6 [style = solid, label="transactionTimeout"];
17->0 [style = bold, label=""];
10->5 [style = bold, label=""];
14->0 [style = bold, label=""];
8->2 [style = bold, label=""];
5->12 [style = bold, label=""];
3->7 [style = solid, label="transactionTimeout"];
15->9 [style = bold, label=""];
5->13 [style = bold, label=""];
6->8 [style = bold, label=""];
12->13 [style = dashed, label="0"];
13->6 [style = bold, label=""];
13->2 [style = solid, label="snapshot"];
11->7 [style = bold, label=""];
6->8 [style = solid, label="elapsedTime"];
}
