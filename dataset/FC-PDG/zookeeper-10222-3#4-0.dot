digraph {
29 [style = filled, label = "handshakeCompletedLock.wait(TIMEOUT)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Socket secureClientSocket = null@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "secureClientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "socket.getOutputStream().write(DATA_FROM_CLIENT,0,2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "int bytesRead = clientSocket.getInputStream().read(buf,0,buf.length)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testConnectWithoutSSLToNonStrictServerPartialWrite['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "!handshakeCompleted@@@30@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testConnectWithoutSSLToNonStrictServerPartialWrite['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "clientSocket = connectWithoutSSL()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "socket.getOutputStream().flush()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Socket badClientSocket = connectWithoutSSL()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "socket.getOutputStream().write(DATA_FROM_CLIENT,2,DATA_FROM_CLIENT.length - 2)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "byte(( buf = new byte((((@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "socket.getOutputStream().flush()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "buf = new byte((((@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testTLSDetectionNonBlockingNonStrictServerDisconnectedClient['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "handshakeCompletedLock@@@18@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Thread.sleep(TIMEOUT / 2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "bytesRead = secureClientSocket.getInputStream().read(buf,0,buf.length)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertFalse(handshakeCompleted)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "{forceClose(clientSocket)forceClose(secureClientSocket)serverThread.shutdown(TIMEOUT)}@@@36@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Socket clientSocket = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "clientSocket.getOutputStream().flush()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "serverThread.start()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "serverThread.start()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "secureClientSocket = connectWithSSL()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "handshakeCompletedLock@@@29@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "secureClientSocket.getOutputStream().flush()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(1))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "clientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertTrue(handshakeCompleted)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "byte(( buf = new byte((((@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "forceClose(badClientSocket)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "int bytesRead = socket.getInputStream().read(buf,0,buf.length)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->10 [style = bold, label=""];
41->30 [style = dotted, label="true"];
22->29 [style = dotted, label="true"];
27->32 [style = bold, label=""];
41->22 [style = dotted, label="true"];
28->40 [style = bold, label=""];
1->15 [style = solid, label="bytesRead"];
25->34 [style = bold, label=""];
23->27 [style = bold, label=""];
29->30 [style = bold, label=""];
5->17 [style = solid, label="buf"];
4->17 [style = dashed, label="0"];
1->43 [style = dashed, label="0"];
10->19 [style = dashed, label="0"];
6->21 [style = bold, label=""];
20->35 [style = solid, label="bytesRead"];
1->15 [style = bold, label=""];
9->4 [style = bold, label=""];
26->36 [style = bold, label=""];
42->20 [style = bold, label=""];
1->9 [style = solid, label="bytesRead"];
22->29 [style = bold, label=""];
9->43 [style = solid, label="buf"];
3->6 [style = bold, label=""];
10->3 [style = bold, label=""];
5->4 [style = solid, label="buf"];
21->25 [style = bold, label=""];
9->43 [style = bold, label=""];
16->19 [style = bold, label=""];
23->44 [style = solid, label="clientSocket"];
14->27 [style = dashed, label="0"];
12->7 [style = bold, label=""];
12->37 [style = bold, label=""];
1->9 [style = bold, label=""];
37->7 [style = bold, label=""];
22->30 [style = bold, label=""];
38->6 [style = bold, label=""];
43->12 [style = solid, label="bytesRead"];
6->2 [style = bold, label=""];
42->45 [style = solid, label="buf"];
13->32 [style = dashed, label="0"];
6->7 [style = solid, label="socket"];
32->9 [style = bold, label=""];
5->1 [style = bold, label=""];
9->37 [style = solid, label="buf"];
15->17 [style = bold, label=""];
0->14 [style = bold, label=""];
11->0 [style = bold, label=""];
7->28 [style = bold, label=""];
43->12 [style = bold, label=""];
24->31 [style = bold, label=""];
33->42 [style = bold, label=""];
31->33 [style = bold, label=""];
25->34 [style = solid, label="badClientSocket"];
13->5 [style = bold, label=""];
35->45 [style = bold, label=""];
4->12 [style = bold, label=""];
12->18 [style = dashed, label="0"];
40->24 [style = bold, label=""];
39->41 [style = bold, label=""];
34->23 [style = bold, label=""];
42->20 [style = solid, label="buf"];
41->22 [style = bold, label=""];
36->38 [style = bold, label=""];
14->13 [style = bold, label=""];
20->35 [style = bold, label=""];
18->7 [style = bold, label=""];
5->1 [style = solid, label="buf"];
19->3 [style = bold, label=""];
24->44 [style = solid, label="secureClientSocket"];
2->11 [style = bold, label=""];
28->40 [style = dotted, label="true"];
17->18 [style = bold, label=""];
30->44 [style = bold, label=""];
45->39 [style = bold, label=""];
9->15 [style = dashed, label="0"];
}
