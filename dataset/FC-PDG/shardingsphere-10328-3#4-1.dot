digraph {
16 [style = filled, label = "Collection<String> notExistedRuleNames = sqlStatement.getRuleNames().stream().filter(null).collect(Collectors.toList())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final String schemaName@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Collection<String> notExistedRuleNames = getToBeAlteredRuleNames(sqlStatement).stream().filter(null).collect(Collectors.toList())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "checkToBeAlteredRules['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "final String schemaName@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "checkToBeAlteredRules['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final AlterReadwriteSplittingRuleStatement sqlStatement@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "throw new ReadwriteSplittingRuleNotExistedException(schemaName,notExistedRuleNames)@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final AlterReadwriteSplittingRuleStatement sqlStatement@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final String schemaName@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final ReadwriteSplittingRuleConfiguration currentRuleConfig@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(null).collect(Collectors.toSet())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Collection<String> currentRuleNames = currentRuleConfig.getDataSources().stream().map(null).collect(Collectors.toList())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "!notExistedRuleNames.isEmpty()@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "throw new ReadwriteSplittingRuleNotExistedException(schemaName,sqlStatement.getRuleNames())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "checkToBeDroppedRuleNames['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final ReadwriteSplittingRuleConfiguration currentRuleConfig@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final DropReadwriteSplittingRuleStatement sqlStatement@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final ReadwriteSplittingRuleConfiguration currentRuleConfig@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
9->6 [style = solid, label="schemaName"];
10->8 [style = dotted, label="true"];
3->7 [style = dotted, label="true"];
7->18 [style = dashed, label="0"];
15->14 [style = bold, label=""];
2->6 [style = bold, label=""];
15->18 [style = dotted, label="true"];
7->11 [style = dashed, label="0"];
1->6 [style = solid, label="notExistedRuleNames"];
3->4 [style = dotted, label="true"];
16->2 [style = bold, label=""];
10->9 [style = dotted, label="true"];
4->6 [style = solid, label="schemaName"];
3->0 [style = bold, label=""];
2->13 [style = bold, label=""];
18->13 [style = solid, label="schemaName"];
15->17 [style = dotted, label="true"];
0->14 [style = dashed, label="0"];
3->5 [style = dotted, label="true"];
6->13 [style = dashed, label="0"];
10->11 [style = dotted, label="true"];
2->6 [style = dotted, label="true"];
1->16 [style = dashed, label="0"];
0->1 [style = bold, label=""];
10->0 [style = bold, label=""];
15->12 [style = dotted, label="true"];
1->2 [style = bold, label=""];
2->13 [style = dotted, label="true"];
}
