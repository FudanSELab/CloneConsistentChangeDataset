digraph {
0 [style = filled, label = "final PrecedenceClimbingParser.Token token = p.parse()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testRightAssociative['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(p.print(token),is(\"((((a * b) + c) + d) + (e * f))\"))@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testLeftAssociative['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final PrecedenceClimbingParser p = new PrecedenceClimbingParser.Builder().atom(\"a\").infix(\"^\",3,false).atom(\"b\").infix(\"^\",3,false).atom(\"c\").infix(\"^\",3,false).atom(\"d\").infix(\"+\",1,true).atom(\"e\").infix(\"*\",2,true).atom(\"f\").build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(p.print(token),is(\"((a ^ (b ^ (c ^ d))) + (e * f))\"))@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testLeftAssociative['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final PrecedenceClimbingParser p = new PrecedenceClimbingParser.Builder().atom(\"a\").infix(\"*\",2,true).atom(\"b\").infix(\"+\",1,true).atom(\"c\").infix(\"+\",1,true).atom(\"d\").infix(\"+\",1,true).atom(\"e\").infix(\"*\",2,true).atom(\"f\").build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->5 [style = dashed, label="0"];
4->3 [style = bold, label=""];
7->5 [style = bold, label=""];
0->1 [style = solid, label="token"];
0->6 [style = solid, label="token"];
5->0 [style = bold, label=""];
0->6 [style = bold, label=""];
1->6 [style = dashed, label="0"];
0->1 [style = bold, label=""];
3->0 [style = bold, label=""];
2->3 [style = bold, label=""];
}
