digraph {
1 [style = filled, label = "Span oneField = new Span.Builder().tags(singletonMap(entry.key,entry.value)).build()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(zipkinBytes.toByteArrayUnsafe()).containsExactly(oneField.encode())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Buffer zipkinBytes = Buffer.allocate(field.sizeInBytes(entry))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(zipkinBytes.toByteArray()).containsExactly(oneField.encode())@@@8@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "writeTagField_matchesWire_emptyValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "writeTagField_matchesWire['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "TagField field = new TagField(TAG_KEY)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "MapEntry<String,String> entry = entry(\"clnt/finagle.version\",\"6.45.0\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "field.write(zipkinBytes,entry)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "MapEntry<String,String> entry = entry(\"error\",\"\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "writeTagField_matchesWire['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
2->3 [style = solid, label="entry"];
6->1 [style = bold, label=""];
2->6 [style = solid, label="entry"];
3->6 [style = bold, label=""];
1->4 [style = bold, label=""];
0->2 [style = bold, label=""];
3->6 [style = solid, label="zipkinBytes"];
10->5 [style = bold, label=""];
9->10 [style = bold, label=""];
8->2 [style = bold, label=""];
4->7 [style = dashed, label="0"];
1->7 [style = bold, label=""];
10->3 [style = solid, label="entry"];
2->10 [style = dashed, label="0"];
2->5 [style = bold, label=""];
10->6 [style = solid, label="entry"];
}
