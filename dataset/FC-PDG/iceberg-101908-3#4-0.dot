digraph {
13 [style = filled, label = "Assert.assertArrayEquals(\"All deletes should apply to seq 0\",DELETE_FILES,index.forDataFile(0,UNPARTITIONED_FILE))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "((BaseFile<?>)partitionedFileA).setSpecId(1)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testUnpartitionedDeletes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertArrayEquals(\"No deletes should apply to seq 10\",new DataFile((((,index.forDataFile(1,10,FILE_A))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(\"No deletes should apply to FILE_B, partition not in index\",0,index.forDataFile(1,0,FILE_B).length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertArrayEquals(\"No deletes should apply to seq 7\",new DataFile((((,index.forDataFile(1,7,UNPARTITIONED_FILE))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(\"No deletes should apply to FILE_C, no indexed delete files\",0,index.forDataFile(1,0,FILE_C).length)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",Arrays.copyOfRange(DELETE_FILES,1,4),index.forDataFile(1,5,UNPARTITIONED_FILE))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",Arrays.copyOfRange(DELETE_FILES,1,4),index.forDataFile(5,UNPARTITIONED_FILE))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",Arrays.copyOfRange(DELETE_FILES,1,4),index.forDataFile(1,5,FILE_A))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertArrayEquals(\"All deletes should apply to seq 3\",DELETE_FILES,index.forDataFile(1,3,UNPARTITIONED_FILE))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertArrayEquals(\"No deletes should apply to seq 7\",new DataFile((((,index.forDataFile(1,7,FILE_A))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",Arrays.copyOfRange(DELETE_FILES,1,4),index.forDataFile(1,4,UNPARTITIONED_FILE))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertArrayEquals(\"No deletes should apply to seq 10\",new DataFile((((,index.forDataFile(1,10,UNPARTITIONED_FILE))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Assert.assertArrayEquals(\"Last delete should apply to seq 6\",Arrays.copyOfRange(DELETE_FILES,3,4),index.forDataFile(1,6,UNPARTITIONED_FILE))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "DeleteFileIndex index = new DeleteFileIndex(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c8b132,DELETE_FILES,ImmutableMap.of())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertArrayEquals(\"All deletes should apply to seq 0\",DELETE_FILES,index.forDataFile(1,0,UNPARTITIONED_FILE))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "DataFile partitionedFileA = FILE_A.copy()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "Assert.assertEquals(\"No deletes should apply to FILE_A with a different specId\",0,index.forDataFile(2,0,FILE_A).length)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertArrayEquals(\"All deletes should apply to seq 0\",DELETE_FILES,index.forDataFile(1,0,FILE_A))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertArrayEquals(\"All global deletes should apply to a partitioned file\",DELETE_FILES,index.forDataFile(2,0,FILE_B))@@@13@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertArrayEquals(\"All deletes should apply to seq 3\",DELETE_FILES,index.forDataFile(1,3,FILE_A))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",Arrays.copyOfRange(DELETE_FILES,1,4),index.forDataFile(4,UNPARTITIONED_FILE))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "DeleteFileIndex index = new DeleteFileIndex(null,null,ImmutableMap.of(Pair.of(1,StructLikeWrapper.wrap(FILE_A.partition())),Pair.of(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c8b264,DELETE_FILES),Pair.of(1,StructLikeWrapper.wrap(FILE_C.partition())),Pair.of(new long((((,new DeleteFile(((()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertArrayEquals(\"All deletes should apply to seq 3\",DELETE_FILES,index.forDataFile(3,UNPARTITIONED_FILE))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",Arrays.copyOfRange(DELETE_FILES,1,4),index.forDataFile(1,4,FILE_A))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertArrayEquals(\"Last delete should apply to seq 6\",Arrays.copyOfRange(DELETE_FILES,3,4),index.forDataFile(1,6,FILE_A))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertArrayEquals(\"No deletes should apply to seq 10\",new DataFile((((,index.forDataFile(10,UNPARTITIONED_FILE))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "DeleteFileIndex index = new DeleteFileIndex(ImmutableMap.of(PartitionSpec.unpartitioned().specId(),PartitionSpec.unpartitioned(),1,SPEC),new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c8b1c5,DELETE_FILES,ImmutableMap.of())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertArrayEquals(\"All global deletes should apply to a partitioned file\",DELETE_FILES,index.forDataFile(0,partitionedFileA))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "testPartitionedDeleteIndex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertArrayEquals(\"Last delete should apply to seq 6\",Arrays.copyOfRange(DELETE_FILES,3,4),index.forDataFile(6,UNPARTITIONED_FILE))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Assert.assertArrayEquals(\"No deletes should apply to seq 7\",new DataFile((((,index.forDataFile(7,UNPARTITIONED_FILE))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testUnpartitionedDeletes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23->25 [style = bold, label=""];
31->22 [style = bold, label=""];
4->6 [style = bold, label=""];
3->31 [style = dashed, label="0"];
29->31 [style = bold, label=""];
25->32 [style = bold, label=""];
14->17 [style = bold, label=""];
22->28 [style = bold, label=""];
15->19 [style = bold, label=""];
0->20 [style = dashed, label="0"];
0->28 [style = dashed, label="0"];
13->11 [style = bold, label=""];
32->26 [style = bold, label=""];
30->29 [style = bold, label=""];
7->3 [style = bold, label=""];
11->15 [style = bold, label=""];
1->9 [style = bold, label=""];
8->7 [style = bold, label=""];
6->10 [style = dashed, label="0"];
3->19 [style = dashed, label="0"];
6->2 [style = bold, label=""];
24->33 [style = bold, label=""];
3->5 [style = bold, label=""];
17->12 [style = bold, label=""];
21->20 [style = bold, label=""];
20->16 [style = bold, label=""];
18->10 [style = bold, label=""];
5->0 [style = bold, label=""];
10->13 [style = bold, label=""];
28->23 [style = bold, label=""];
2->13 [style = dashed, label="0"];
0->1 [style = bold, label=""];
1->16 [style = dashed, label="0"];
6->24 [style = dashed, label="0"];
33->30 [style = bold, label=""];
7->15 [style = dashed, label="0"];
5->21 [style = dashed, label="0"];
16->14 [style = bold, label=""];
27->24 [style = bold, label=""];
2->33 [style = dashed, label="0"];
8->30 [style = dashed, label="0"];
14->12 [style = solid, label="partitionedFileA"];
7->29 [style = dashed, label="0"];
5->22 [style = dashed, label="0"];
8->11 [style = dashed, label="0"];
1->23 [style = dashed, label="0"];
2->8 [style = bold, label=""];
19->21 [style = bold, label=""];
}
