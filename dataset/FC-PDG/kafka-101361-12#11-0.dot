digraph {
18 [style = filled, label = "verifyEquality(JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)),JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "verifyInEquality(SessionWindows.ofInactivityGapAndGrace(ofMillis(1),ofMillis(9)),SessionWindows.ofInactivityGapAndGrace(ofMillis(1),ofMillis(6)))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "equalsAndHashcodeShouldBeValidForPositiveCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "verifyInEquality(SessionWindows.with(ofMillis(9)),SessionWindows.with(ofMillis(1)))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "verifyInEquality(SessionWindows.ofInactivityGapWithNoGrace(ofMillis(9)),SessionWindows.ofInactivityGapWithNoGrace(ofMillis(1)))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "verifyInEquality(SessionWindows.ofInactivityGapAndGrace(ofMillis(9),ofMillis(9)),SessionWindows.ofInactivityGapAndGrace(ofMillis(1),ofMillis(9)))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "verifyEquality(JoinWindows.of(ofMillis(3)),JoinWindows.of(ofMillis(3)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "verifyInEquality(SessionWindows.with(ofMillis(2)).grace(ofMillis(6)).grace(ofMillis(7)),SessionWindows.with(ofMillis(1)).grace(ofMillis(6)))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "verifyInEquality(SessionWindows.ofInactivityGapAndGrace(ofMillis(9),ofMillis(9)),SessionWindows.ofInactivityGapAndGrace(ofMillis(1),ofMillis(9)))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "verifyInEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(9)),SessionWindows.with(ofMillis(1)).grace(ofMillis(6)))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verifyEquality(JoinWindows.of(ofMillis(9)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60)),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "verifyInEquality(SessionWindows.ofInactivityGapWithNoGrace(ofMillis(9)),SessionWindows.ofInactivityGapWithNoGrace(ofMillis(1)))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "verifyEquality(JoinWindows.of(ofMillis(3)).after(ofMillis(2)),JoinWindows.of(ofMillis(3)).after(ofMillis(2)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "verifyEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(2)),JoinWindows.of(ofMillis(3)).before(ofMillis(2)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "verifyEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60)),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "verifyEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(60)),JoinWindows.of(ofMillis(3)).grace(ofMillis(60)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "verifyInEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(9)),SessionWindows.with(ofMillis(1)).grace(ofMillis(7)))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "verifyEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(2)),JoinWindows.of(ofMillis(3)).grace(ofMillis(2)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "verifyInEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(0)).grace(ofMillis(7)),SessionWindows.with(ofMillis(1)).grace(ofMillis(6)))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "verifyEquality(JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3),ofMillis(4)),JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3),ofMillis(4)))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14->16 [style = bold, label=""];
15->13 [style = bold, label=""];
0->2 [style = bold, label=""];
7->11 [style = dashed, label="0"];
16->17 [style = bold, label=""];
9->8 [style = bold, label=""];
3->4 [style = bold, label=""];
7->3 [style = bold, label=""];
21->12 [style = bold, label=""];
18->20 [style = bold, label=""];
1->6 [style = bold, label=""];
2->9 [style = dashed, label="0"];
1->16 [style = dashed, label="0"];
12->14 [style = bold, label=""];
5->8 [style = dashed, label="0"];
5->7 [style = bold, label=""];
4->1 [style = bold, label=""];
10->9 [style = bold, label=""];
19->15 [style = bold, label=""];
13->21 [style = bold, label=""];
8->11 [style = bold, label=""];
17->18 [style = bold, label=""];
2->5 [style = bold, label=""];
}
