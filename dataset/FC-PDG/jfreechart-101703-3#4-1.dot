digraph {
4 [style = filled, label = "double minValue = Double.POSITIVE_INFINITY@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "getMinPaintValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "getMinPaintValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "return new Double(maxValue)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "minValue = ((Number)entry.getKey()).doubleValue()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return minValue@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "((Number)entry.getKey()).doubleValue() > maxValue@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Integer index@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Iterator i = this.paintIndex.entrySet().iterator()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "((Number)entry.getKey()).doubleValue() < minValue@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Integer index@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "double maxValue = Double.NEGATIVE_INFINITY@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "i.hasNext()@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "((Integer)entry.getValue()).equals(index)@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "maxValue = ((Number)entry.getKey()).doubleValue()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "return new Double(minValue)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "getMaxPaintValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Map.Entry entry = (Map.Entry)i.next()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->0 [style = bold, label=""];
5->12 [style = dashed, label="0"];
16->12 [style = dotted, label="true"];
4->17 [style = dashed, label="0"];
5->1 [style = solid, label="minValue"];
1->15 [style = dashed, label="0"];
9->4 [style = bold, label=""];
11->4 [style = bold, label=""];
3->6 [style = bold, label=""];
6->0 [style = bold, label=""];
4->10 [style = solid, label="minValue"];
4->2 [style = bold, label=""];
1->10 [style = dashed, label="0"];
8->14 [style = dashed, label="0"];
4->1 [style = solid, label="minValue"];
3->16 [style = bold, label=""];
3->6 [style = dotted, label="true"];
5->10 [style = solid, label="minValue"];
12->0 [style = bold, label=""];
0->15 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
12->16 [style = solid, label="maxValue"];
0->7 [style = bold, label=""];
9->8 [style = dotted, label="true"];
4->6 [style = solid, label="minValue"];
17->16 [style = solid, label="maxValue"];
6->5 [style = bold, label=""];
13->17 [style = bold, label=""];
17->15 [style = solid, label="maxValue"];
2->0 [style = bold, label=""];
14->3 [style = solid, label="index"];
0->10 [style = bold, label=""];
6->5 [style = dotted, label="true"];
6->16 [style = dashed, label="0"];
17->2 [style = bold, label=""];
5->0 [style = bold, label=""];
0->1 [style = bold, label=""];
12->15 [style = solid, label="maxValue"];
11->8 [style = dotted, label="true"];
0->3 [style = dotted, label="true"];
3->16 [style = dotted, label="true"];
5->6 [style = solid, label="minValue"];
13->14 [style = dotted, label="true"];
16->12 [style = bold, label=""];
8->3 [style = solid, label="index"];
0->7 [style = dotted, label="true"];
}
