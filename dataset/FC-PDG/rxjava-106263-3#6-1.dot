digraph {
1 [style = filled, label = "unsubscribeScan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "System.out.println(\"**** finished\")@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "FlowableEventStream.getEventStream(\"HTTP-ClusterB\",20).groupBy(new Function<Event,String>(){@Override public String apply(Event e){return e.instanceId}}).flatMap(new Function<GroupedFlowable<String,Event>,Publisher<HashMap<String,String>>>(){@Override public Publisher<HashMap<String,String>> apply(final GroupedFlowable<String,Event> ge){return ge.scan(new HashMap<String,String>(),new BiFunction<HashMap<String,String>,Event,HashMap<String,String>>(){@Override public HashMap<String,String> apply(HashMap<String,String> accum,Event perInstanceEvent){synchronized (accum) {accum.put(\"instance\",ge.getKey())}return accum}})}}).take(10).blockingForEach(new Consumer<HashMap<String,String>>(){@Override public void accept(HashMap<String,String> v){synchronized (v) {System.out.println(v)}}})@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "FlowableEventStream.getEventStream(\"HTTP-ClusterB\",20).scan(new HashMap<>(),new BiFunction<HashMap<String,String>,Event,HashMap<String,String>>(){@Override public HashMap<String,String> apply(HashMap<String,String> accum,Event perInstanceEvent){accum.put(\"instance\",perInstanceEvent.instanceId)return accum}}).take(10).blockingForEach(new Consumer<HashMap<String,String>>(){@Override public void accept(HashMap<String,String> v){System.out.println(v)}})@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "FlowableEventStream.getEventStream(\"HTTP-ClusterB\",20).scan(new HashMap<String,String>(),new BiFunction<HashMap<String,String>,Event,HashMap<String,String>>(){@Override public HashMap<String,String> apply(HashMap<String,String> accum,Event perInstanceEvent){accum.put(\"instance\",perInstanceEvent.instanceId)return accum}}).take(10).blockingForEach(new Consumer<HashMap<String,String>>(){@Override public void accept(HashMap<String,String> v){System.out.println(v)}})@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "zipObservableOfObservables['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "unsubscribeScan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->3 [style = dashed, label="0"];
1->0 [style = bold, label=""];
5->6 [style = bold, label=""];
0->5 [style = dashed, label="0"];
4->5 [style = bold, label=""];
2->3 [style = bold, label=""];
}
