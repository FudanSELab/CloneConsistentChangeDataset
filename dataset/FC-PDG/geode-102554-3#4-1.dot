digraph {
10 [style = filled, label = "cos.flush()@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(cos.isEmpty())@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "cos.removeOutputStream(streamOne)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@106ec4,2,3)@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testRemoveOutputStreamWithOneStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "mockContext.checking(new Expectations(){})@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testRemoveOutputStreamWhenEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final OutputStream streamOne = mockContext.mock(,\"streamOne\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "cos.close()@@@32@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertFalse(cos.isEmpty())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(cos.isEmpty()).isTrue()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@106e5e,2,3)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "verifyZeroInteractions(streamOne)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "cos.close()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@106ed7)@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "cos.removeOutputStream(streamOne)@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(0,cos.size())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "cos.write(9)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@106e71)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "testRemoveOutputStreamWithOneStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "assertTrue(cos.isEmpty())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "cos.flush()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertThat(cos.size()).isEqualTo(0)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(0,cos.size())@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "cos.write(9)@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(1,cos.size())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19->18 [style = bold, label=""];
22->15 [style = bold, label=""];
11->12 [style = solid, label="streamOne"];
3->1 [style = bold, label=""];
28->30 [style = bold, label=""];
0->6 [style = bold, label=""];
13->20 [style = dashed, label="0"];
27->28 [style = bold, label=""];
11->4 [style = bold, label=""];
19->16 [style = solid, label="streamOne"];
14->19 [style = bold, label=""];
7->0 [style = bold, label=""];
12->16 [style = bold, label=""];
26->24 [style = bold, label=""];
19->18 [style = solid, label="streamOne"];
0->17 [style = dashed, label="0"];
2->30 [style = dashed, label="0"];
17->23 [style = bold, label=""];
20->22 [style = bold, label=""];
19->15 [style = solid, label="streamOne"];
13->28 [style = dashed, label="0"];
12->13 [style = bold, label=""];
18->20 [style = bold, label=""];
15->17 [style = bold, label=""];
21->26 [style = bold, label=""];
10->5 [style = bold, label=""];
23->21 [style = bold, label=""];
25->12 [style = bold, label=""];
11->19 [style = dashed, label="0"];
24->25 [style = bold, label=""];
30->7 [style = bold, label=""];
4->27 [style = bold, label=""];
12->27 [style = dashed, label="0"];
4->12 [style = bold, label=""];
9->3 [style = bold, label=""];
11->7 [style = solid, label="streamOne"];
2->7 [style = bold, label=""];
6->9 [style = bold, label=""];
1->10 [style = bold, label=""];
8->11 [style = bold, label=""];
2->22 [style = dashed, label="0"];
29->11 [style = bold, label=""];
6->23 [style = dashed, label="0"];
13->2 [style = bold, label=""];
}
