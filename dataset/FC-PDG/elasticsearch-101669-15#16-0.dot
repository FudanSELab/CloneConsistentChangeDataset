digraph {
17 [style = filled, label = "sslDriver = mock()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "when(selector.getIoBuffer()).thenAnswer(null)@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "init['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "messageLength = randomInt(96) + 20@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "context = new SSLChannelContext(channel,selector,exceptionHandler,sslDriver,readWriteHandler,channelBuffer)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "rawChannel = mock()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(selector.getIoBuffer()).thenAnswer(null)@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "exceptionHandler = mock()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "init['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "outboundBuffer = new SSLOutboundBuffer(null)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "listener = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "init['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "context.setSelectionKey(mock())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "readConsumer = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestReadWriteHandler readWriteHandler = new TestReadWriteHandler(readConsumer)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "ByteBuffer buffer = ByteBuffer.allocate(1 << 14)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ByteBuffer buffer = ByteBuffer.allocate(1 << 14)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "when(selector.isOnCurrentThread()).thenReturn(true)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "context = new BytesChannelContext(channel,selector,mock(),mock(),handler,channelBuffer)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "nioTimer = mock()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "when(channel.getRawChannel()).thenReturn(rawChannel)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "context = new BytesChannelContext(channel,selector,mock(),handler,channelBuffer)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "TestReadWriteHandler handler = new TestReadWriteHandler(readConsumer)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "when(selector.getTaskScheduler()).thenReturn(nioTimer)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "selector = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "channelBuffer = InboundChannelBuffer.allocatingInstance()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(channel.getRawChannel()).thenReturn(rawChannel)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "channel = mock()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "when(sslDriver.getOutboundBuffer()).thenReturn(outboundBuffer)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->8 [style = solid, label="channelBuffer"];
1->4 [style = bold, label=""];
24->12 [style = bold, label=""];
7->1 [style = bold, label=""];
13->24 [style = bold, label=""];
9->11 [style = bold, label=""];
4->17 [style = bold, label=""];
4->6 [style = solid, label="rawChannel"];
1->15 [style = solid, label="channel"];
4->12 [style = solid, label="rawChannel"];
13->16 [style = solid, label="channelBuffer"];
1->8 [style = solid, label="channel"];
8->15 [style = dashed, label="0"];
4->13 [style = bold, label=""];
13->15 [style = solid, label="channelBuffer"];
28->7 [style = bold, label=""];
5->8 [style = solid, label="handler"];
1->16 [style = solid, label="channel"];
2->8 [style = solid, label="selector"];
26->9 [style = bold, label=""];
5->15 [style = solid, label="handler"];
9->20 [style = bold, label=""];
16->19 [style = bold, label=""];
11->2 [style = bold, label=""];
6->15 [style = bold, label=""];
19->25 [style = bold, label=""];
2->16 [style = solid, label="selector"];
17->16 [style = solid, label="sslDriver"];
3->9 [style = bold, label=""];
9->20 [style = solid, label="readConsumer"];
12->10 [style = bold, label=""];
5->6 [style = bold, label=""];
22->27 [style = bold, label=""];
21->22 [style = bold, label=""];
24->22 [style = solid, label="outboundBuffer"];
10->0 [style = bold, label=""];
6->8 [style = bold, label=""];
12->18 [style = bold, label=""];
13->5 [style = bold, label=""];
2->15 [style = solid, label="selector"];
20->16 [style = solid, label="readWriteHandler"];
18->16 [style = solid, label="exceptionHandler"];
8->18 [style = dashed, label="0"];
14->9 [style = bold, label=""];
27->23 [style = bold, label=""];
15->12 [style = bold, label=""];
17->13 [style = bold, label=""];
2->7 [style = bold, label=""];
2->28 [style = bold, label=""];
28->21 [style = solid, label="nioTimer"];
8->12 [style = bold, label=""];
9->5 [style = solid, label="readConsumer"];
25->21 [style = bold, label=""];
20->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
