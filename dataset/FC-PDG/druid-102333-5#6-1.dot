digraph {
9 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of()),START2.minus(START2))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(0,2L,1,4L,2,5L)),KM0.plus(KM2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testMinus['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of()),KM0.minus(KM2))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of(\"1\",\"3L\")),START1.minus(START3))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(0,2L,1,3L,2,5L)),KM2.plus(KM1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testMinus['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(0,2L,1,3L,2,5L)),KM1.plus(KM3))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of()),KM1.minus(KM2))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(endMetadata(ImmutableMap.of(\"1\",\"4L\")),END2.minus(END1))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of()),KM2.minus(KM2))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testPlus['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of()),START0.minus(START2))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"1\",\"3L\")),KM1.minus(KM3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(0,2L,1,4L,2,5L)),KM2.plus(KM2))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(endMetadata(ImmutableMap.of(\"2\",\"5L\")),END1.minus(END2))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of()),START1.minus(START2))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(0,2L,1,4L,2,5L)),KM1.plus(KM2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"2\",\"5L\")),KM2.minus(KM1))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of(),ImmutableSet.of()),START4.minus(START2))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of(\"1\",\"4L\"),ImmutableSet.of(\"1\")),START5.minus(START4))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of(\"2\",\"5L\")),START2.minus(START1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15->13 [style = bold, label=""];
10->14 [style = bold, label=""];
3->18 [style = dashed, label="0"];
0->6 [style = dashed, label="0"];
1->3 [style = bold, label=""];
18->19 [style = bold, label=""];
5->9 [style = dashed, label="0"];
11->12 [style = bold, label=""];
1->10 [style = dashed, label="0"];
9->8 [style = bold, label=""];
2->4 [style = bold, label=""];
12->7 [style = bold, label=""];
4->0 [style = bold, label=""];
20->21 [style = bold, label=""];
3->5 [style = bold, label=""];
1->17 [style = dashed, label="0"];
4->20 [style = dashed, label="0"];
0->21 [style = dashed, label="0"];
0->1 [style = bold, label=""];
6->10 [style = bold, label=""];
14->9 [style = bold, label=""];
13->6 [style = bold, label=""];
3->14 [style = dashed, label="0"];
4->13 [style = dashed, label="0"];
16->20 [style = bold, label=""];
8->11 [style = bold, label=""];
5->19 [style = dashed, label="0"];
21->17 [style = bold, label=""];
17->18 [style = bold, label=""];
}
