digraph {
17 [style = filled, label = "assertEquals(new TermQuery(new Term(FieldNamesFieldMapper.NAME,\"field\")),existsQuery)@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"ip\").field(\"doc_values\",false).endObject().endObject().endObject().endObject())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(3,fields.length)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertEquals(DocValuesType.SORTED_NUMERIC,dvField.fieldType().docValuesType())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testNoDocValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertTrue(storedField.fieldType().stored())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "fields = doc.rootDoc().getFields(FieldNamesFieldMapper.NAME)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(1,fields.length)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testStore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(1,pointField.fieldType().pointIndexDimensionCount())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ParsedDocument doc = mapper.parse(source(null))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"::1\").endObject()),XContentType.JSON))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "ParsedDocument doc = mapper.parse(source(null))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(1,fields.length)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "IndexableField dvField = fields(1(@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Query existsQuery = m.fieldType().existsQuery(null)@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertEquals(\"field\",fields(0(.stringValue())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))),pointField.binaryValue())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "IndexableField pointField = fields(0(@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "IndexableField storedField = fields(2(@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "IndexableField pointField = fields(0(@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(mapping,mapper.mappingSource().toString())@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(1457654400000L,storedField.numericValue().longValue())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "FieldMapper m = (FieldMapper)mapper.mappers().getMapper(\"field\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(1,pointField.fieldType().pointIndexDimensionCount())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testNoDocValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29->21 [style = bold, label=""];
13->7 [style = solid, label="mapping"];
23->9 [style = bold, label=""];
12->9 [style = solid, label="fields"];
13->3 [style = solid, label="mapping"];
27->9 [style = solid, label="fields"];
2->11 [style = bold, label=""];
16->18 [style = bold, label=""];
11->0 [style = bold, label=""];
5->4 [style = solid, label="existsQuery"];
14->12 [style = bold, label=""];
12->23 [style = bold, label=""];
6->22 [style = dashed, label="0"];
3->7 [style = bold, label=""];
26->27 [style = bold, label=""];
4->20 [style = bold, label=""];
5->4 [style = bold, label=""];
27->22 [style = bold, label=""];
7->14 [style = bold, label=""];
6->9 [style = bold, label=""];
19->16 [style = bold, label=""];
10->1 [style = bold, label=""];
18->9 [style = bold, label=""];
2->24 [style = dashed, label="0"];
9->10 [style = solid, label="fields"];
21->26 [style = bold, label=""];
15->13 [style = bold, label=""];
27->12 [style = solid, label="fields"];
13->3 [style = bold, label=""];
20->17 [style = bold, label=""];
20->17 [style = solid, label="existsQuery"];
9->8 [style = bold, label=""];
0->5 [style = bold, label=""];
22->12 [style = bold, label=""];
8->24 [style = bold, label=""];
24->28 [style = bold, label=""];
27->24 [style = solid, label="fields"];
8->10 [style = bold, label=""];
1->2 [style = bold, label=""];
28->25 [style = bold, label=""];
12->6 [style = bold, label=""];
}
