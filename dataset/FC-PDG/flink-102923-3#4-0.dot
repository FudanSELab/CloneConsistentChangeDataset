digraph {
14 [style = filled, label = "check(sequence(21(,inputGate.pollNext().get(),PAGE_SIZE)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(3,handler.getAbortedCheckpointCounter())@@@45@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(3L,inputGate.getLatestCheckpointId())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "check(sequence(17(,inputGate.pollNext().get(),PAGE_SIZE)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "BufferOrEvent(( sequence = {createEndOfPartition(2),createEndOfPartition(1),createBuffer(0),createBuffer(0),createBuffer(3),createBarrier(2,3),createBarrier(2,0),createBarrier(3,0),createBarrier(3,3),createBuffer(0),createBuffer(0),createBuffer(3),createEndOfPartition(0),createBuffer(3),createBarrier(4,3),createBuffer(3),createEndOfPartition(3)}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),containsInAnyOrder(0,2))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "check(sequence(22(,inputGate.pollNext().get(),PAGE_SIZE)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),empty())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),containsInAnyOrder(0,1))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "check(sequence(14(,inputGate.pollNext().get(),PAGE_SIZE)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "check(sequence(19(,inputGate.pollNext().get(),PAGE_SIZE)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),containsInAnyOrder(2))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "inputGate = createCheckpointedInputGate(3,sequence,handler,false)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testMultiChannelJumpingOverCheckpoint['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "check(sequence(6(,inputGate.pollNext().get(),PAGE_SIZE)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "check(sequence(24(,inputGate.pollNext().get(),PAGE_SIZE)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "check(sequence(3(,inputGate.pollNext().get(),PAGE_SIZE)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "check(sequence(15(,inputGate.pollNext().get(),PAGE_SIZE)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "check(sequence(4(,inputGate.pollNext().get(),PAGE_SIZE)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "check(sequence(13(,inputGate.pollNext().get(),PAGE_SIZE)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "check(sequence(1(,inputGate.pollNext().get(),PAGE_SIZE)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(4L,inputGate.getLatestCheckpointId())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "check(sequence(18(,inputGate.pollNext().get(),PAGE_SIZE)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "check(sequence(10(,inputGate.pollNext().get(),PAGE_SIZE)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "check(sequence(8(,inputGate.pollNext().get(),PAGE_SIZE)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "check(sequence(9(,inputGate.pollNext().get(),PAGE_SIZE)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "testStartAlignmentWithClosedChannels['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "inputGate = createCheckpointedInputGate(3,sequence,handler)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "check(sequence(2(,inputGate.pollNext().get(),PAGE_SIZE)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "check(sequence(15(,inputGate.pollNext().get(),PAGE_SIZE)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),empty())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testMultiChannelJumpingOverCheckpoint['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "check(sequence(12(,inputGate.pollNext().get(),PAGE_SIZE)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(3L,inputGate.getLatestCheckpointId())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "check(sequence(16(,inputGate.pollNext().get(),PAGE_SIZE)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "check(sequence(5(,inputGate.pollNext().get(),PAGE_SIZE)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "check(sequence(16(,inputGate.pollNext().get(),PAGE_SIZE)@@@29@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "check(sequence(23(,inputGate.pollNext().get(),PAGE_SIZE)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(1,handler.getTriggeredCheckpointCounter())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "check(sequence(7(,inputGate.pollNext().get(),PAGE_SIZE)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),containsInAnyOrder(1))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(2L,inputGate.getLatestCheckpointId())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),empty())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "check(sequence(0(,inputGate.pollNext().get(),PAGE_SIZE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "handler.setNextExpectedCheckpointId(1L)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "check(sequence(20(,inputGate.pollNext().get(),PAGE_SIZE)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(1L,inputGate.getLatestCheckpointId())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "inputGate = createCheckpointedInputGate(4,sequence)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(2L,inputGate.getLatestCheckpointId())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "check(sequence(11(,inputGate.pollNext().get(),PAGE_SIZE)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
28->6 [style = bold, label=""];
0->40 [style = solid, label="sequence"];
25->22 [style = bold, label=""];
0->23 [style = solid, label="sequence"];
0->32 [style = solid, label="sequence"];
0->43 [style = solid, label="sequence"];
0->30 [style = solid, label="sequence"];
34->18 [style = bold, label=""];
19->11 [style = bold, label=""];
48->35 [style = bold, label=""];
8->40 [style = bold, label=""];
0->29 [style = solid, label="sequence"];
8->1 [style = bold, label=""];
35->23 [style = bold, label=""];
0->41 [style = solid, label="sequence"];
21->36 [style = bold, label=""];
3->9 [style = dashed, label="0"];
1->21 [style = bold, label=""];
30->46 [style = bold, label=""];
45->0 [style = bold, label=""];
18->32 [style = bold, label=""];
9->14 [style = bold, label=""];
34->32 [style = bold, label=""];
0->10 [style = solid, label="sequence"];
11->43 [style = dashed, label="0"];
47->34 [style = bold, label=""];
0->20 [style = solid, label="sequence"];
33->16 [style = bold, label=""];
14->1 [style = dashed, label="0"];
23->30 [style = bold, label=""];
27->12 [style = bold, label=""];
0->19 [style = bold, label=""];
0->39 [style = solid, label="sequence"];
44->50 [style = bold, label=""];
0->24 [style = solid, label="sequence"];
7->0 [style = bold, label=""];
30->34 [style = bold, label=""];
20->31 [style = bold, label=""];
19->11 [style = solid, label="handler"];
50->49 [style = bold, label=""];
39->26 [style = bold, label=""];
0->3 [style = solid, label="sequence"];
0->47 [style = solid, label="sequence"];
31->33 [style = bold, label=""];
17->15 [style = bold, label=""];
0->22 [style = solid, label="sequence"];
11->17 [style = bold, label=""];
0->44 [style = bold, label=""];
0->11 [style = solid, label="sequence"];
36->37 [style = bold, label=""];
29->35 [style = bold, label=""];
33->8 [style = bold, label=""];
38->20 [style = bold, label=""];
41->27 [style = bold, label=""];
0->9 [style = solid, label="sequence"];
37->10 [style = bold, label=""];
2->1 [style = bold, label=""];
0->27 [style = solid, label="sequence"];
0->49 [style = solid, label="sequence"];
22->28 [style = bold, label=""];
0->44 [style = solid, label="sequence"];
0->25 [style = solid, label="sequence"];
42->0 [style = bold, label=""];
24->41 [style = bold, label=""];
1->9 [style = bold, label=""];
0->48 [style = solid, label="sequence"];
0->12 [style = solid, label="sequence"];
12->13 [style = bold, label=""];
43->17 [style = bold, label=""];
0->35 [style = solid, label="sequence"];
40->39 [style = bold, label=""];
0->33 [style = solid, label="sequence"];
0->36 [style = solid, label="sequence"];
16->5 [style = bold, label=""];
4->12 [style = bold, label=""];
49->15 [style = bold, label=""];
0->1 [style = solid, label="sequence"];
0->34 [style = solid, label="sequence"];
10->9 [style = bold, label=""];
0->37 [style = solid, label="sequence"];
19->43 [style = bold, label=""];
5->8 [style = bold, label=""];
0->15 [style = solid, label="sequence"];
0->38 [style = solid, label="sequence"];
3->25 [style = bold, label=""];
46->47 [style = bold, label=""];
20->33 [style = bold, label=""];
32->38 [style = bold, label=""];
27->4 [style = bold, label=""];
13->29 [style = bold, label=""];
26->2 [style = bold, label=""];
19->43 [style = solid, label="handler"];
0->8 [style = solid, label="sequence"];
0->2 [style = solid, label="sequence"];
15->24 [style = bold, label=""];
0->46 [style = solid, label="sequence"];
0->13 [style = solid, label="sequence"];
0->14 [style = solid, label="sequence"];
0->50 [style = solid, label="sequence"];
29->48 [style = bold, label=""];
}
