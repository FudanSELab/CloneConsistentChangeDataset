digraph {
0 [style = filled, label = "Assert.assertEquals(jobExecutionPlanDag.getStartNodes().size(),1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testNoJobSpecCompilation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "JobSpec jobSpec = (JobSpec)spec@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(!jobSpec.getConfig().hasPath(\"testProperty1\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "FlowSpec flowSpec = initFlowSpec()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(!jobSpec.getConfig().hasPath(\"testProperty2\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "FlowSpec flowSpec = initFlowSpec(TEST_FLOW_GROUP,TEST_FLOW_NAME,\"unsupportedSource\",\"unsupportedSink\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.FLOW_NAME_KEY),TEST_FLOW_NAME)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Spec spec = dagNode.getValue().getJobSpec()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.JOB_NAME_KEY),TEST_FLOW_NAME)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY),TEST_SOURCE_NAME)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(!jobSpec.getConfig().hasPath(\"testProperty3\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(jobSpec.getConfig().hasPath(ConfigurationKeys.FLOW_EXECUTION_ID_KEY))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testCompilerWithoutTemplateCatalog['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testCompilerWithoutTemplateCatalog['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Dag<JobExecutionPlan> jobExecutionPlanDag = this.compilerWithoutTemplateCalague.compileFlow(flowSpec)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Dag<JobExecutionPlan> jobExecutionPlanDag = this.compilerWithTemplateCalague.compileFlow(flowSpec)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.FLOW_GROUP_KEY),TEST_FLOW_GROUP)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertFalse(jobSpec.getConfig().hasPath(ConfigurationKeys.JOB_SCHEDULE_KEY))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(jobExecutionPlanDag.getNodes().size() == 1,\"Exepected 1 executor for FlowSpec.\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(spec instanceof JobSpec,\"Expected JobSpec compiled from FlowSpec.\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(jobExecutionPlanDag.getNodes().size() == 0,\"Exepected 1 executor for FlowSpec.\")@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(jobExecutionPlanDag.getChildren(dagNode).size(),0)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertNull(jobExecutionPlanDag.getChildren(dagNode))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertNotNull(jobExecutionPlanDag,\"Expected non null dag.\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Dag.DagNode<JobExecutionPlan> dagNode = jobExecutionPlanDag.getStartNodes().get(0)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.JOB_GROUP_KEY),TEST_FLOW_GROUP)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
4->10 [style = bold, label=""];
16->15 [style = bold, label=""];
6->3 [style = bold, label=""];
8->20 [style = solid, label="spec"];
11->16 [style = bold, label=""];
23->25 [style = bold, label=""];
10->21 [style = dashed, label="0"];
0->13 [style = bold, label=""];
17->1 [style = bold, label=""];
9->2 [style = bold, label=""];
22->16 [style = bold, label=""];
16->25 [style = dashed, label="0"];
26->6 [style = solid, label="jobExecutionPlanDag"];
3->24 [style = dashed, label="0"];
4->21 [style = bold, label=""];
14->17 [style = bold, label=""];
6->24 [style = bold, label=""];
15->6 [style = bold, label=""];
20->14 [style = bold, label=""];
5->18 [style = bold, label=""];
7->20 [style = bold, label=""];
13->10 [style = solid, label="dagNode"];
26->6 [style = bold, label=""];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
2->12 [style = bold, label=""];
25->26 [style = solid, label="flowSpec"];
15->6 [style = solid, label="jobExecutionPlanDag"];
25->26 [style = bold, label=""];
18->9 [style = bold, label=""];
15->26 [style = dashed, label="0"];
16->15 [style = solid, label="flowSpec"];
8->7 [style = solid, label="spec"];
19->4 [style = bold, label=""];
13->8 [style = bold, label=""];
12->19 [style = bold, label=""];
}
