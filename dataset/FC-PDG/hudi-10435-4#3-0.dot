digraph {
0 [style = filled, label = "runAsync(sourceContext,function)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testConsumeFromSpecifiedCommit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(\"Should produce the expected splits\",sourceContext.getPartitionPaths(),is(\"par1,par2,par3,par4\"))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "harness.setup()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "CollectingSourceContext sourceContext = new CollectingSourceContext(latch)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "CountDownLatch latch = new CountDownLatch(4)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "function.close()@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestData.writeData(TestData.DATA_SET_INSERT,conf)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "conf.setString(FlinkOptions.READ_START_COMMIT,specifiedCommit)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "TestData.writeData(TestData.DATA_SET_UPDATE_INSERT,conf)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(sourceContext.splits.stream().allMatch(null),\"All the splits should be with specified instant time\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(sourceContext.splits.stream().allMatch(null),\"All the instants should have range limit\")@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "StreamReadMonitoringFunction function = TestUtils.getMonitorFunc(conf)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "latch = new CountDownLatch(4)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(sourceContext.splits.stream().allMatch(null),\"All instants should have range limit\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "conf.setString(FlinkOptions.READ_STREAMING_START_COMMIT,specifiedCommit)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertTrue(latch.await(WAIT_TIME_MILLIS,TimeUnit.MILLISECONDS),\"Should finish splits generation\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Thread.sleep(1000L)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TestData.writeData(TestData.DATA_SET_UPDATE_INSERT,conf)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String specifiedCommit = TestUtils.getLatestCommit(tempFile.getAbsolutePath())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testConsumeFromSpecifiedCommit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "testConsumeFromLastCommit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "harness.open()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(\"Should produce the expected splits\",sourceContext.getPartitionPaths(),is(\"par1,par2,par3,par4\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(latch.await(WAIT_TIME_MILLIS,TimeUnit.MILLISECONDS),\"Should finish splits generation\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "sourceContext.reset(latch)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->15 [style = bold, label=""];
15->2 [style = bold, label=""];
18->24 [style = bold, label=""];
5->9 [style = bold, label=""];
20->9 [style = bold, label=""];
8->18 [style = bold, label=""];
17->9 [style = bold, label=""];
25->21 [style = solid, label="latch"];
8->3 [style = bold, label=""];
3->6 [style = bold, label=""];
3->12 [style = bold, label=""];
12->6 [style = bold, label=""];
22->23 [style = bold, label=""];
10->13 [style = solid, label="specifiedCommit"];
7->14 [style = bold, label=""];
11->0 [style = bold, label=""];
10->16 [style = bold, label=""];
10->13 [style = bold, label=""];
11->0 [style = solid, label="sourceContext"];
0->4 [style = bold, label=""];
21->22 [style = bold, label=""];
9->15 [style = bold, label=""];
24->25 [style = bold, label=""];
15->0 [style = solid, label="function"];
23->19 [style = bold, label=""];
4->8 [style = bold, label=""];
13->15 [style = bold, label=""];
10->16 [style = solid, label="specifiedCommit"];
2->7 [style = bold, label=""];
9->1 [style = bold, label=""];
1->10 [style = bold, label=""];
14->11 [style = bold, label=""];
19->3 [style = bold, label=""];
25->21 [style = bold, label=""];
13->16 [style = dashed, label="0"];
14->11 [style = solid, label="latch"];
}
