digraph {
18 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\",\"customers\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf())@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\",\"customers\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf())@@@8@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf(),tableProperties)@@@11@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.EXTERNAL_TABLE_PURGE + \"'='FALSE')\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "hmsTable.getParameters().entrySet().stream().filter(null).forEach(null)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"', \" + \"'dummy'='test')\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "testDeleteBackingTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "fs.exists(hmsTableLocation)@@@26@@@['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "fs.exists(hmsTableLocation)@@@24@@@['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testCreateDropTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"', \" + \"'dummy'='test', \" + \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "testTables.loadTable(identifier)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Properties tableProperties = new Properties()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA.asStruct(),icebergTable.schema().asStruct())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TableIdentifier identifier = TableIdentifier.of(\"default\",\"customers\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(PartitionSpec.unpartitioned(),icebergTable.spec())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(0,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@28@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testCreateDropTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12->38 [style = dashed, label="0"];
32->38 [style = dotted, label="false"];
25->30 [style = bold, label=""];
25->20 [style = solid, label="hmsTableLocation"];
9->0 [style = dotted, label="false"];
20->27 [style = dotted, label="true"];
14->17 [style = bold, label=""];
14->35 [style = solid, label="identifier"];
39->37 [style = solid, label="hmsTableLocation"];
9->10 [style = bold, label=""];
6->34 [style = dashed, label="0"];
9->4 [style = dotted, label="false"];
7->9 [style = bold, label=""];
21->26 [style = dotted, label="true"];
39->31 [style = bold, label=""];
37->38 [style = bold, label=""];
1->12 [style = dotted, label="true"];
15->41 [style = bold, label=""];
34->32 [style = bold, label=""];
8->4 [style = bold, label=""];
9->1 [style = dotted, label="false"];
9->15 [style = dotted, label="false"];
25->27 [style = solid, label="hmsTableLocation"];
32->35 [style = dotted, label="true"];
21->20 [style = dotted, label="false"];
41->37 [style = bold, label=""];
21->22 [style = dotted, label="true"];
11->12 [style = bold, label=""];
6->17 [style = dashed, label="0"];
21->25 [style = bold, label=""];
32->36 [style = dotted, label="true"];
21->24 [style = dotted, label="false"];
18->28 [style = bold, label=""];
4->0 [style = bold, label=""];
1->11 [style = bold, label=""];
6->2 [style = bold, label=""];
32->41 [style = dotted, label="false"];
9->8 [style = dotted, label="false"];
20->23 [style = bold, label=""];
39->38 [style = solid, label="hmsTableLocation"];
17->2 [style = bold, label=""];
3->7 [style = bold, label=""];
21->22 [style = bold, label=""];
9->13 [style = dotted, label="true"];
32->36 [style = bold, label=""];
36->35 [style = bold, label=""];
9->10 [style = dotted, label="true"];
25->23 [style = solid, label="hmsTableLocation"];
14->6 [style = bold, label=""];
28->29 [style = bold, label=""];
22->26 [style = bold, label=""];
30->24 [style = bold, label=""];
24->12 [style = bold, label=""];
16->8 [style = bold, label=""];
2->3 [style = bold, label=""];
12->20 [style = bold, label=""];
32->31 [style = dotted, label="false"];
32->37 [style = dotted, label="false"];
29->21 [style = bold, label=""];
32->33 [style = bold, label=""];
21->30 [style = dotted, label="false"];
19->14 [style = bold, label=""];
16->11 [style = solid, label="hmsTableLocation"];
10->13 [style = bold, label=""];
21->25 [style = dotted, label="false"];
0->1 [style = bold, label=""];
20->23 [style = dotted, label="true"];
32->39 [style = dotted, label="false"];
7->18 [style = bold, label=""];
40->14 [style = bold, label=""];
14->34 [style = solid, label="identifier"];
25->12 [style = solid, label="hmsTableLocation"];
14->6 [style = solid, label="identifier"];
32->33 [style = dotted, label="false"];
23->27 [style = bold, label=""];
39->41 [style = solid, label="hmsTableLocation"];
1->11 [style = dotted, label="true"];
16->12 [style = solid, label="hmsTableLocation"];
14->34 [style = bold, label=""];
5->14 [style = bold, label=""];
14->17 [style = solid, label="identifier"];
15->16 [style = bold, label=""];
9->16 [style = dotted, label="false"];
31->15 [style = bold, label=""];
14->2 [style = solid, label="identifier"];
33->39 [style = bold, label=""];
9->15 [style = bold, label=""];
21->12 [style = dotted, label="false"];
32->15 [style = dotted, label="false"];
16->1 [style = solid, label="hmsTableLocation"];
16->0 [style = solid, label="hmsTableLocation"];
}
