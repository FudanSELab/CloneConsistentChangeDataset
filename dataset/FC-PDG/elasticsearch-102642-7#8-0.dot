digraph {
22 [style = filled, label = "barrier.await()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "operationExecutingLatch.await()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testAsyncBlockOperationsOnFailure['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final CountDownLatch onFailureLatch = new CountDownLatch(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "thread.join()@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testAsyncBlockOperationsOnFailure['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final CountDownLatch operationCompleteLatch = new CountDownLatch(1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(reference.get(),instanceOf())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "permits.blockOperations(new ActionListener<Releasable>(){@Override public void onResponse(Releasable releasable){try {throw new RuntimeException(\"simulated\")}}@Override public void onFailure(final Exception e){reference.set(e)onFailureLatch.countDown()}},10,TimeUnit.MINUTES,ThreadPool.Names.GENERIC)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "final CountDownLatch operationExecutingLatch = new CountDownLatch(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "{final TimeoutException e = expectThrows(,null)assertThat(e,hasToString(containsString(\"timeout while blocking operations\")))}@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "operationLatch.countDown()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(reference.get(),hasToString(containsString(\"simulated\")))@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testTimeout['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final CountDownLatch operationLatch = new CountDownLatch(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final Thread thread = new Thread(controlledAcquire(barrier,operationExecutingLatch,operationLatch,operationCompleteLatch))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "permits.asyncBlockOperations(new ActionListener<Releasable>(){@Override public void onResponse(Releasable releasable){try {throw new RuntimeException(\"simulated\")}}@Override public void onFailure(final Exception e){reference.set(e)onFailureLatch.countDown()}},10,TimeUnit.MINUTES,ThreadPool.Names.GENERIC)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "{final AtomicReference<Exception> reference = new AtomicReference<>()final CountDownLatch onFailureLatch = new CountDownLatch(1)permits.asyncBlockOperations(new ActionListener<Releasable>(){@Override public void onResponse(Releasable releasable){releasable.close()}@Override public void onFailure(final Exception e){reference.set(e)onFailureLatch.countDown()}},1,TimeUnit.MILLISECONDS,ThreadPool.Names.GENERIC)onFailureLatch.await()assertThat(reference.get(),hasToString(containsString(\"timeout while blocking operations\")))}@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final CyclicBarrier barrier = new CyclicBarrier(2)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "operationCompleteLatch.await()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "thread.start()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final AtomicReference<Exception> reference = new AtomicReference<>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "onFailureLatch.await()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->13 [style = bold, label=""];
15->14 [style = bold, label=""];
0->6 [style = bold, label=""];
19->20 [style = bold, label=""];
11->21 [style = bold, label=""];
22->9 [style = bold, label=""];
8->3 [style = bold, label=""];
19->21 [style = solid, label="operationExecutingLatch"];
1->3 [style = bold, label=""];
18->19 [style = bold, label=""];
7->0 [style = bold, label=""];
4->2 [style = bold, label=""];
11->21 [style = solid, label="operationCompleteLatch"];
9->10 [style = bold, label=""];
2->7 [style = dashed, label="0"];
3->4 [style = bold, label=""];
10->16 [style = solid, label="e"];
4->7 [style = bold, label=""];
21->12 [style = bold, label=""];
20->21 [style = solid, label="operationLatch"];
6->5 [style = bold, label=""];
2->0 [style = bold, label=""];
10->16 [style = bold, label=""];
18->21 [style = solid, label="barrier"];
13->15 [style = bold, label=""];
12->22 [style = bold, label=""];
17->18 [style = bold, label=""];
20->11 [style = bold, label=""];
}
