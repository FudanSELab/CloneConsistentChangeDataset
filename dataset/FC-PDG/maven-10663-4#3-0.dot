digraph {
5 [style = filled, label = "MavenProject projectC = createSucceededMavenProject(\"C\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "MavenProject projectA = createFailedMavenProject(\"A\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "resumeFromIsIgnoredWhenFirstProjectFails['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(result.get().getProjectsToSkip(),contains(\"test:C\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "MavenProject projectB = createMavenProject(\"B\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData(executionResult)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "executionResult.setTopologicallySortedProjects(asList(projectA,projectB))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "executionResult.setTopologicallySortedProjects(asList(projectA,projectB,projectC))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "projectsSucceedingAfterFailedProjectsAreExcluded['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertThat(result.isPresent(),is(false))@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "MavenProject projectB = createFailedMavenProject(\"B\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "projectsSucceedingAfterFailedProjectsAreExcluded['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(result.get().getRemainingProjects(),is(asList(\"test:B\")))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "MavenProject projectA = createSucceededMavenProject(\"A\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(result.isPresent(),is(true))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
12->14 [style = solid, label="projectB"];
11->12 [style = bold, label=""];
11->14 [style = solid, label="projectA"];
7->4 [style = bold, label=""];
6->2 [style = bold, label=""];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
4->9 [style = dashed, label="0"];
3->5 [style = bold, label=""];
3->12 [style = dashed, label="0"];
5->6 [style = bold, label=""];
1->11 [style = dashed, label="0"];
0->1 [style = bold, label=""];
12->14 [style = bold, label=""];
5->6 [style = solid, label="projectC"];
7->2 [style = dashed, label="0"];
2->7 [style = bold, label=""];
14->13 [style = bold, label=""];
1->6 [style = solid, label="projectA"];
3->6 [style = solid, label="projectB"];
13->2 [style = bold, label=""];
10->11 [style = bold, label=""];
}
