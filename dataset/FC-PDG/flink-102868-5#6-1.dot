digraph {
29 [style = filled, label = "final boolean EVICT_AFTER = false@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "final int triggerCount = 2@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "testDeltaEvictorEvictAfter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),Long.MAX_VALUE))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final int TRIGGER_COUNT = 2@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",8),Long.MAX_VALUE))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",4),initialTime + 3999))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",5),initialTime + 1998))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",10),Long.MAX_VALUE))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",9),initialTime + 10999))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testDeltaEvictorEvictBefore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AtomicInteger closeCalled = new AtomicInteger(0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) TypeSerializer<StreamRecord<Tuple2<String,Integer>>> streamRecordSerializer = (TypeSerializer<StreamRecord<Tuple2<String,Integer>>>)new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final int THRESHOLD = 2@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final int threshold = 2@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",streamRecordSerializer)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(TRIGGER_COUNT),DeltaEvictor.of(THRESHOLD,new DeltaFunction<Tuple2<String,Integer>>(){@Override public double getDelta(Tuple2<String,Integer> oldDataPoint,Tuple2<String,Integer> newDataPoint){return newDataPoint.f1 - oldDataPoint.f1}},EVICT_AFTER),0,null)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "long initialTime = 0L@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 20))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final boolean evictAfter = false@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final boolean EVICT_AFTER = true@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testHarness.close()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",5),initialTime + 999))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",22),Long.MAX_VALUE))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Close was not called.\",1,closeCalled.get())@@@40@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",3),initialTime + 10999))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",11),Long.MAX_VALUE))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(triggerCount),DeltaEvictor.of(threshold,new DeltaFunction<Tuple2<String,Integer>>(){@Override public double getDelta(Tuple2<String,Integer> oldDataPoint,Tuple2<String,Integer> newDataPoint){return newDataPoint.f1 - oldDataPoint.f1}},evictAfter),0,null)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",16),Long.MAX_VALUE))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",15),Long.MAX_VALUE))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testHarness.open()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",5),Long.MAX_VALUE))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testDeltaEvictorEvictBefore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",6),initialTime + 1999))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",10),initialTime + 1000))@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->36 [style = dashed, label="0"];
16->32 [style = dashed, label="0"];
38->41 [style = bold, label=""];
29->43 [style = dashed, label="0"];
24->43 [style = bold, label=""];
30->18 [style = bold, label=""];
26->11 [style = bold, label=""];
6->4 [style = solid, label="streamRecordSerializer"];
32->36 [style = solid, label="threshold"];
34->36 [style = solid, label="evictAfter"];
39->23 [style = bold, label=""];
36->17 [style = solid, label="operator"];
26->9 [style = solid, label="initialTime"];
9->21 [style = bold, label=""];
34->32 [style = bold, label=""];
4->36 [style = bold, label=""];
36->17 [style = bold, label=""];
26->1 [style = solid, label="initialTime"];
35->12 [style = bold, label=""];
21->13 [style = bold, label=""];
5->10 [style = bold, label=""];
43->16 [style = bold, label=""];
7->1 [style = bold, label=""];
23->30 [style = bold, label=""];
27->0 [style = bold, label=""];
26->10 [style = solid, label="initialTime"];
24->33 [style = dashed, label="0"];
3->39 [style = dashed, label="0"];
18->19 [style = bold, label=""];
26->21 [style = solid, label="initialTime"];
20->14 [style = bold, label=""];
2->9 [style = bold, label=""];
42->40 [style = bold, label=""];
6->4 [style = bold, label=""];
3->23 [style = bold, label=""];
26->2 [style = solid, label="initialTime"];
10->25 [style = bold, label=""];
20->41 [style = dashed, label="0"];
12->33 [style = bold, label=""];
13->5 [style = bold, label=""];
22->17 [style = bold, label=""];
11->8 [style = bold, label=""];
31->3 [style = bold, label=""];
29->16 [style = bold, label=""];
4->22 [style = bold, label=""];
4->36 [style = solid, label="stateDesc"];
18->40 [style = dashed, label="0"];
29->34 [style = dashed, label="0"];
43->22 [style = solid, label="EVICT_AFTER"];
40->19 [style = bold, label=""];
12->24 [style = bold, label=""];
28->12 [style = bold, label=""];
12->22 [style = solid, label="closeCalled"];
37->12 [style = bold, label=""];
4->22 [style = solid, label="stateDesc"];
23->42 [style = bold, label=""];
25->20 [style = bold, label=""];
30->42 [style = dashed, label="0"];
25->38 [style = dashed, label="0"];
24->22 [style = solid, label="TRIGGER_COUNT"];
16->22 [style = solid, label="THRESHOLD"];
14->31 [style = bold, label=""];
26->5 [style = solid, label="initialTime"];
26->13 [style = solid, label="initialTime"];
1->2 [style = bold, label=""];
31->39 [style = bold, label=""];
12->36 [style = solid, label="closeCalled"];
41->14 [style = bold, label=""];
10->38 [style = bold, label=""];
16->15 [style = bold, label=""];
17->26 [style = bold, label=""];
26->3 [style = solid, label="initialTime"];
11->31 [style = solid, label="expectedOutput"];
15->6 [style = bold, label=""];
26->23 [style = solid, label="initialTime"];
24->29 [style = bold, label=""];
22->17 [style = solid, label="operator"];
29->22 [style = solid, label="EVICT_AFTER"];
8->7 [style = bold, label=""];
19->27 [style = bold, label=""];
11->19 [style = solid, label="expectedOutput"];
32->15 [style = bold, label=""];
26->39 [style = solid, label="initialTime"];
26->7 [style = solid, label="initialTime"];
33->36 [style = solid, label="triggerCount"];
33->34 [style = bold, label=""];
}
