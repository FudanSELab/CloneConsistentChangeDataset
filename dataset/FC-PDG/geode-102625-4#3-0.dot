digraph {
1 [style = filled, label = "Byte value = new Byte((byte)getRandom().nextInt())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "DataSerializer.writeByte(value,out)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DataSerializer.writeBoolean(value,out)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Boolean value2 = DataSerializer.readBoolean(in)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DataInput in = getDataInput()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Byte value2 = DataSerializer.readByte(in)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "out.flush()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testBoolean['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Byte value = (byte)getRandom().nextInt()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(value,value2)@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testByte['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testByte['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Boolean value = new Boolean(getRandom().nextInt() % 2 == 0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "DataOutputStream out = getDataOutput()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
5->12 [style = dashed, label="0"];
7->11 [style = bold, label=""];
11->2 [style = solid, label="value2"];
0->12 [style = bold, label=""];
7->3 [style = solid, label="in"];
3->2 [style = solid, label="value2"];
8->2 [style = solid, label="value"];
1->0 [style = bold, label=""];
1->10 [style = dashed, label="0"];
9->8 [style = bold, label=""];
12->6 [style = bold, label=""];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
7->11 [style = solid, label="in"];
8->0 [style = bold, label=""];
8->5 [style = solid, label="value"];
1->5 [style = solid, label="value"];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
1->2 [style = solid, label="value"];
10->0 [style = bold, label=""];
0->12 [style = solid, label="out"];
10->12 [style = solid, label="value"];
1->8 [style = dashed, label="0"];
4->1 [style = bold, label=""];
6->7 [style = bold, label=""];
0->5 [style = solid, label="out"];
3->11 [style = dashed, label="0"];
10->2 [style = solid, label="value"];
0->5 [style = bold, label=""];
}
