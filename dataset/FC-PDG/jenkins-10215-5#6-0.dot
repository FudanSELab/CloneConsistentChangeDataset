digraph {
22 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,,,3', expected correct notation M,N or M-N\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,-2,3\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"-1,2,3\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,-3\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(result,failedWith(3))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,,', expected correct notation M,N or M-N\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\",,2,3\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"-1,2,3\" is not a valid option\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(result,failedWith(2))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,,\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,,,3\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsComma['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsNegative['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,-3', expected string with a range M-N\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,-2,3', expected string with a range M-N\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(result,failedWith(3))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,-2,3', expected string with a range M-N\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,-3', expected string with a range M-N\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsNegative['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(result,failedWith(3))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse ',,2,3', expected correct notation M,N or M-N\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23->10 [style = solid, label="result"];
9->20 [style = dashed, label="0"];
14->3 [style = bold, label=""];
4->18 [style = dashed, label="0"];
0->10 [style = solid, label="result"];
3->17 [style = dashed, label="0"];
9->0 [style = bold, label=""];
23->1 [style = solid, label="result"];
5->6 [style = solid, label="result"];
3->8 [style = solid, label="result"];
1->15 [style = bold, label=""];
0->23 [style = dashed, label="0"];
11->6 [style = bold, label=""];
22->21 [style = bold, label=""];
17->18 [style = solid, label="result"];
19->17 [style = bold, label=""];
3->4 [style = bold, label=""];
1->7 [style = bold, label=""];
21->11 [style = solid, label="result"];
15->5 [style = bold, label=""];
0->1 [style = solid, label="result"];
6->2 [style = bold, label=""];
1->22 [style = bold, label=""];
0->10 [style = bold, label=""];
7->5 [style = bold, label=""];
8->20 [style = bold, label=""];
20->23 [style = bold, label=""];
21->11 [style = bold, label=""];
6->16 [style = bold, label=""];
2->13 [style = dashed, label="0"];
2->16 [style = dashed, label="0"];
6->13 [style = bold, label=""];
8->9 [style = bold, label=""];
17->8 [style = solid, label="result"];
23->10 [style = bold, label=""];
7->15 [style = dashed, label="0"];
5->21 [style = dashed, label="0"];
4->8 [style = bold, label=""];
5->11 [style = bold, label=""];
12->3 [style = bold, label=""];
5->11 [style = solid, label="result"];
18->8 [style = bold, label=""];
21->6 [style = solid, label="result"];
10->1 [style = bold, label=""];
7->22 [style = dashed, label="0"];
3->4 [style = solid, label="result"];
17->18 [style = bold, label=""];
}
