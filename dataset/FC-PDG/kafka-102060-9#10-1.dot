digraph {
2 [style = filled, label = "stateManager.checkpoint()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "task.prepareCommit()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "task.postCommit(true)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition,offset)).anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expectLastCall().times(2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "task = createStatefulTask(createConfig(\"100\"),true)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "task.postCommit(false)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "task.prepareCommit()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "task.postCommit(true)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "task.postCommit(false)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "task.completeRestoration(null)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(changelogPartition,0L)).andReturn(singletonMap(changelogPartition,10L)).andReturn(singletonMap(changelogPartition,12000L))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "EasyMock.verify(recordCollector)@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "EasyMock.expect(stateManager.changelogPartitions()).andReturn(singleton(changelogPartition))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "task.completeRestoration()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "task.prepareCommit()@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expectLastCall().once()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "task.initializeIfNeeded()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "EasyMock.replay(stateManager,recordCollector)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expectLastCall()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "task.prepareCommit()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.replay(stateManager,recordCollector)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expectLastCall()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Long offset = 543L@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "stateManager.registerStore(stateStore,stateStore.stateRestoreCallback)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(changelogPartition,10L)).andReturn(singletonMap(changelogPartition,20L))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->11 [style = bold, label=""];
16->11 [style = bold, label=""];
9->2 [style = bold, label=""];
4->15 [style = bold, label=""];
10->3 [style = bold, label=""];
28->26 [style = bold, label=""];
14->28 [style = bold, label=""];
26->8 [style = bold, label=""];
19->17 [style = bold, label=""];
21->25 [style = bold, label=""];
11->9 [style = bold, label=""];
3->4 [style = bold, label=""];
22->23 [style = bold, label=""];
27->15 [style = bold, label=""];
20->27 [style = bold, label=""];
1->22 [style = bold, label=""];
5->1 [style = bold, label=""];
25->20 [style = bold, label=""];
0->10 [style = bold, label=""];
2->0 [style = bold, label=""];
8->5 [style = bold, label=""];
18->6 [style = bold, label=""];
2->21 [style = bold, label=""];
24->11 [style = bold, label=""];
0->21 [style = dashed, label="0"];
6->13 [style = bold, label=""];
12->14 [style = bold, label=""];
14->19 [style = dashed, label="0"];
15->12 [style = bold, label=""];
13->8 [style = bold, label=""];
12->19 [style = bold, label=""];
1->23 [style = dashed, label="0"];
14->6 [style = bold, label=""];
10->25 [style = dashed, label="0"];
17->18 [style = bold, label=""];
}
