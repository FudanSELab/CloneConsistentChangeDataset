digraph {
13 [style = filled, label = "coordinator.checkpointState(new CheckpointMetaData(0,0),new CheckpointOptions(SAVEPOINT,CheckpointStorageLocationReference.getDefault()),new CheckpointMetricsBuilder(),operatorChain,null)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "CheckpointOptions forcedAlignedOptions = CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault()).withUnalignedUnsupported()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "coordinator.checkpointState(new CheckpointMetaData(42,0),forcedAlignedOptions,new CheckpointMetricsBuilder(),operatorChain,null)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "testSavepointNotResultingInPriorityEvents['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(true,broadcastedPriorityEvent.get())@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "MockEnvironment mockEnvironment = MockEnvironment.builder().build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testForceAlignedCheckpointResultingInPriorityEvents['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final long checkpointId = 42L@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(false,broadcastedPriorityEvent.get())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testForceAlignedCheckpointResultingInPriorityEvents['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final OperatorChain<?,?> operatorChain = new OperatorChain(new MockStreamTaskBuilder(mockEnvironment).build(),new NonRecordWriter<>()){@Override public void broadcastEvent(AbstractEvent event,boolean isPriorityEvent){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b9780aeventisPriorityEventbroadcastedPriorityEvent.set(isPriorityEvent)}}@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "coordinator.checkpointState(new CheckpointMetaData(checkpointId,0),forcedAlignedOptions,new CheckpointMetricsBuilder(),operatorChain,null)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "SubtaskCheckpointCoordinator coordinator = new MockSubtaskCheckpointCoordinatorBuilder().setUnalignedCheckpointEnabled(true).setEnvironment(mockEnvironment).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
2->0 [style = solid, label="forcedAlignedOptions"];
11->6 [style = bold, label=""];
3->6 [style = bold, label=""];
9->7 [style = solid, label="checkpointId"];
9->6 [style = bold, label=""];
9->8 [style = solid, label="checkpointId"];
8->1 [style = bold, label=""];
6->4 [style = bold, label=""];
7->0 [style = solid, label="operatorChain"];
2->0 [style = bold, label=""];
13->12 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
2->13 [style = dashed, label="0"];
5->7 [style = bold, label=""];
0->8 [style = dashed, label="0"];
7->13 [style = solid, label="operatorChain"];
10->9 [style = bold, label=""];
7->8 [style = solid, label="operatorChain"];
2->8 [style = solid, label="forcedAlignedOptions"];
4->5 [style = bold, label=""];
2->8 [style = bold, label=""];
}
