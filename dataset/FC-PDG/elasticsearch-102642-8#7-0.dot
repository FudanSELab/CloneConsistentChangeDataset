digraph {
10 [style = filled, label = "{final TimeoutException e = expectThrows(,null)assertThat(e,hasToString(containsString(\"timeout while blocking operations\")))}@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testTimeout['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "final CountDownLatch onFailureLatch = new CountDownLatch(1)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "testAsyncBlockOperationsOnFailure['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final CountDownLatch operationCompleteLatch = new CountDownLatch(1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(reference.get(),instanceOf())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "{final AtomicReference<Exception> reference = new AtomicReference<>()final CountDownLatch onFailureLatch = new CountDownLatch(1)permits.asyncBlockOperations(new ActionListener<Releasable>(){@Override public void onResponse(Releasable releasable){releasable.close()}@Override public void onFailure(final Exception e){reference.set(e)onFailureLatch.countDown()}},1,TimeUnit.MILLISECONDS,ThreadPool.Names.GENERIC)onFailureLatch.await()assertThat(reference.get(),hasToString(containsString(\"timeout while blocking operations\")))}@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "permits.blockOperations(new ActionListener<Releasable>(){@Override public void onResponse(Releasable releasable){releasable.close()}@Override public void onFailure(final Exception e){reference.set(e)onFailureLatch.countDown()}},1,TimeUnit.MILLISECONDS,ThreadPool.Names.GENERIC)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "operationCompleteLatch.await()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final Thread thread = new Thread(controlledAcquire(barrier,operationExecutingLatch,operationLatch,operationCompleteLatch))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "onFailureLatch.await()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "thread.start()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(reference.get(),hasToString(containsString(\"timeout while blocking operations\")))@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "operationLatch.countDown()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testTimeout['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "permits.asyncBlockOperations(new ActionListener<Releasable>(){@Override public void onResponse(Releasable releasable){try {throw new RuntimeException(\"simulated\")}}@Override public void onFailure(final Exception e){reference.set(e)onFailureLatch.countDown()}},10,TimeUnit.MINUTES,ThreadPool.Names.GENERIC)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "thread.join()@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final CountDownLatch onFailureLatch = new CountDownLatch(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "barrier.await()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final AtomicReference<Exception> reference = new AtomicReference<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final CountDownLatch operationExecutingLatch = new CountDownLatch(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(reference.get(),hasToString(containsString(\"simulated\")))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final AtomicReference<Exception> reference = new AtomicReference<>()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "final CyclicBarrier barrier = new CyclicBarrier(2)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "operationExecutingLatch.await()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final CountDownLatch operationLatch = new CountDownLatch(1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "onFailureLatch.await()@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14->16 [style = bold, label=""];
0->12 [style = solid, label="barrier"];
19->18 [style = bold, label=""];
1->8 [style = bold, label=""];
10->4 [style = solid, label="e"];
0->13 [style = bold, label=""];
25->22 [style = bold, label=""];
11->14 [style = bold, label=""];
8->3 [style = bold, label=""];
6->0 [style = bold, label=""];
16->17 [style = bold, label=""];
20->25 [style = bold, label=""];
22->23 [style = bold, label=""];
17->19 [style = bold, label=""];
12->7 [style = bold, label=""];
21->26 [style = bold, label=""];
23->24 [style = bold, label=""];
18->1 [style = bold, label=""];
5->12 [style = bold, label=""];
24->21 [style = bold, label=""];
5->12 [style = solid, label="operationCompleteLatch"];
11->10 [style = bold, label=""];
7->2 [style = bold, label=""];
15->0 [style = bold, label=""];
10->4 [style = bold, label=""];
9->5 [style = bold, label=""];
4->1 [style = bold, label=""];
13->9 [style = bold, label=""];
13->12 [style = solid, label="operationExecutingLatch"];
2->11 [style = bold, label=""];
9->12 [style = solid, label="operationLatch"];
}
