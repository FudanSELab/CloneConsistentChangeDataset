digraph {
26 [style = filled, label = "m2.update(7,2,22.0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "m1.update(0,0,99)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertTrue(m1.equals(m2))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "m1 = new MatrixSeries(\"Test 2\",10,5)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "m2 = new MatrixSeries(\"Test 2\",10,3)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "m1.update(0,0,11.0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "CategoryMarker m1 = new CategoryMarker(\"A\",new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.YELLOW),new BasicStroke(1.1f))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MatrixSeries m1 = new MatrixSeries(\"Test\",8,3)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(m2.equals(m1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "CategoryMarker m2 = (CategoryMarker)TestUtils.serialised(m1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "m2 = new MatrixSeries(\"Test 2\",8,3)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(m1.equals(m2))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(m1,m2)@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "m2.update(0,0,11.0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertFalse(m1.equals(m2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "m2.update(0,0,99)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testEquals['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(m1.equals(m2))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "MatrixSeries m2 = new MatrixSeries(\"Test\",8,3)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertTrue(m1.equals(m2))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "m1 = new MatrixSeries(\"Test 2\",10,3)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(m1.equals(m2))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertFalse(m1.equals(m2))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "m2 = new MatrixSeries(\"Test 2\",10,5)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "m1 = new MatrixSeries(\"Test 2\",8,3)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "m1.update(7,2,22.0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "CategoryMarker m2 = (CategoryMarker)TestUtilities.serialised(m1)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertFalse(m1.equals(m2))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertFalse(m1.equals(m2))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
17->10 [style = bold, label=""];
22->15 [style = bold, label=""];
28->18 [style = bold, label=""];
30->13 [style = bold, label=""];
12->28 [style = bold, label=""];
13->7 [style = solid, label="m2"];
13->20 [style = solid, label="m2"];
16->6 [style = bold, label=""];
0->5 [style = solid, label="m1"];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
25->9 [style = bold, label=""];
13->16 [style = solid, label="m2"];
8->15 [style = solid, label="m1"];
9->30 [style = bold, label=""];
21->24 [style = bold, label=""];
1->0 [style = bold, label=""];
29->23 [style = bold, label=""];
29->24 [style = solid, label="m2"];
29->23 [style = solid, label="m2"];
0->3 [style = solid, label="m1"];
13->16 [style = bold, label=""];
19->8 [style = bold, label=""];
26->22 [style = bold, label=""];
4->0 [style = bold, label=""];
14->26 [style = bold, label=""];
6->20 [style = bold, label=""];
2->5 [style = dashed, label="0"];
15->17 [style = bold, label=""];
5->3 [style = solid, label="m2"];
10->29 [style = bold, label=""];
23->21 [style = bold, label=""];
2->3 [style = solid, label="m2"];
11->7 [style = bold, label=""];
0->2 [style = solid, label="m1"];
18->22 [style = solid, label="m2"];
27->25 [style = solid, label="m2"];
27->30 [style = solid, label="m2"];
18->10 [style = solid, label="m2"];
18->14 [style = bold, label=""];
24->27 [style = bold, label=""];
8->12 [style = bold, label=""];
27->25 [style = bold, label=""];
0->5 [style = bold, label=""];
20->11 [style = bold, label=""];
}
