digraph {
4 [style = filled, label = "expect(taskQueue.add(capture(captured))).andReturn(true)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "replayAll()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(1))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testNoInitialState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(\"myCustomValue\",taskConfig.getConsumerProperties().get(\"myCustomKey\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "verifyAll()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "supervisor.runInternal()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "supervisor = getSupervisor(1,1,true,\"PT1H\",null,null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "supervisor = getSupervisor(1,1,true,\"PT1H\",null,null,true)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertFalse(\"maximumMessageTime\",taskConfig.getMaximumMessageTime().isPresent())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testSkipOffsetGaps['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getStartPartitions().getStream())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertFalse(\"skipOffsetGaps\",taskConfig.isSkipOffsetGaps())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(2))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "KafkaIndexTaskIOConfig taskConfig = task.getIOConfig()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Capture<KafkaIndexTask> captured = Capture.newInstance()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "supervisor = getSupervisor(1,1,true,\"PT1H\",null,null,false)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(0))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "supervisor.start()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(0))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(1))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(\"sequenceName-0\",taskConfig.getBaseSequenceName())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(tuningConfig.convertToTaskTuningConfig(),task.getTuningConfig())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertTrue(\"skipOffsetGaps\",taskConfig.isSkipOffsetGaps())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(\"isUseTransaction\",taskConfig.isUseTransaction())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(kafkaHost,taskConfig.getConsumerProperties().get(\"bootstrap.servers\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testSkipOffsetGaps['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(2))@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(dataSchema,task.getDataSchema())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertFalse(\"minimumMessageTime\",taskConfig.getMinimumMessageTime().isPresent())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "KafkaIndexTask task = captured.getValue()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "addSomeEvents(1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getEndPartitions().getStream())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
22->26 [style = bold, label=""];
5->8 [style = bold, label=""];
19->34 [style = bold, label=""];
25->28 [style = bold, label=""];
34->25 [style = bold, label=""];
35->6 [style = bold, label=""];
28->20 [style = bold, label=""];
32->12 [style = bold, label=""];
2->1 [style = bold, label=""];
1->15 [style = bold, label=""];
27->30 [style = bold, label=""];
3->18 [style = dashed, label="0"];
11->4 [style = bold, label=""];
0->2 [style = bold, label=""];
36->31 [style = bold, label=""];
24->32 [style = bold, label=""];
18->12 [style = bold, label=""];
8->6 [style = bold, label=""];
3->12 [style = bold, label=""];
30->37 [style = bold, label=""];
12->0 [style = bold, label=""];
6->36 [style = bold, label=""];
7->3 [style = bold, label=""];
20->22 [style = bold, label=""];
33->23 [style = bold, label=""];
23->29 [style = bold, label=""];
26->27 [style = bold, label=""];
15->11 [style = bold, label=""];
29->19 [style = bold, label=""];
6->16 [style = bold, label=""];
31->33 [style = bold, label=""];
16->36 [style = dashed, label="0"];
9->14 [style = bold, label=""];
13->5 [style = bold, label=""];
8->21 [style = bold, label=""];
10->9 [style = bold, label=""];
14->13 [style = bold, label=""];
3->32 [style = dashed, label="0"];
21->35 [style = bold, label=""];
17->18 [style = bold, label=""];
}
