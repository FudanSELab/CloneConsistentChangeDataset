digraph {
26 [style = filled, label = "Assert.assertEquals(false,nullMatcher.matches())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(\"4.0\",selector.lookupName(selector.getRow().get(0)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(true,nonNullMatcher.matches())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ValueMatcher nullMatcher = selector.makeValueMatcher((String)null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(false,nullMatcher.matches())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testDimensionSelectorWithExtraction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(false,fiveMatcher.matches())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(\"5.1\",selector.lookupName(selector.getRow().get(0)))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(\"5\",selector.lookupName(selector.getRow().get(0)))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(false,fiveMatcher.matches())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(\"4.0\",selector.lookupName(selector.getRow().get(0)))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testDimensionSelector['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(true,nullMatcher.matches())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final DimensionSelector selector = X_PLUS_Y.makeDimensionSelector(new DefaultDimensionSpec(\"expr\",\"expr\"),COLUMN_SELECTOR_FACTORY)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final DimensionSelector selector = X_PLUS_Y.makeDimensionSelector(new ExtractionDimensionSpec(\"expr\",\"x\",new BucketExtractionFn(1.0,0.0)),COLUMN_SELECTOR_FACTORY)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(null,selector.lookupName(selector.getRow().get(0)))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(true,nonNullMatcher.matches())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testDimensionSelectorWithExtraction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(false,fiveMatcher.matches())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(true,fiveMatcher.matches())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(false,nonNullMatcher.matches())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(\"5.1\",selector.lookupName(selector.getRow().get(0)))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "CURRENT_ROW.set(ROW2)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(false,fiveMatcher.matches())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "CURRENT_ROW.set(ROW0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(false,nonNullMatcher.matches())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(null,selector.lookupName(selector.getRow().get(0)))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(true,nullMatcher.matches())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(true,nonNullMatcher.matches())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(false,nullMatcher.matches())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(\"4\",selector.lookupName(selector.getRow().get(0)))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(true,fiveMatcher.matches())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "NullHandling.replaceWithDefault()@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"5\",selector.lookupName(selector.getRow().get(0)))@@@34@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "CURRENT_ROW.set(ROW1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "CURRENT_ROW.set(ROW3)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
0->28 [style = dotted, label="true"];
32->22 [style = bold, label=""];
13->37 [style = dashed, label="0"];
10->20 [style = bold, label=""];
14->25 [style = bold, label=""];
3->37 [style = bold, label=""];
21->0 [style = bold, label=""];
16->8 [style = bold, label=""];
0->19 [style = bold, label=""];
31->9 [style = bold, label=""];
0->19 [style = dotted, label="true"];
35->22 [style = bold, label=""];
26->29 [style = bold, label=""];
9->4 [style = bold, label=""];
0->35 [style = dotted, label="true"];
0->11 [style = bold, label=""];
37->15 [style = bold, label=""];
0->17 [style = dotted, label="false"];
15->30 [style = bold, label=""];
2->9 [style = bold, label=""];
0->1 [style = dotted, label="false"];
15->16 [style = bold, label=""];
24->18 [style = bold, label=""];
27->22 [style = bold, label=""];
0->23 [style = dotted, label="false"];
17->23 [style = bold, label=""];
9->34 [style = dashed, label="0"];
28->32 [style = bold, label=""];
1->22 [style = bold, label=""];
22->3 [style = bold, label=""];
5->21 [style = bold, label=""];
29->6 [style = bold, label=""];
28->35 [style = bold, label=""];
0->11 [style = dotted, label="false"];
7->28 [style = bold, label=""];
16->30 [style = dashed, label="0"];
27->32 [style = dashed, label="0"];
23->1 [style = bold, label=""];
3->13 [style = bold, label=""];
34->4 [style = bold, label=""];
11->17 [style = bold, label=""];
25->5 [style = bold, label=""];
13->15 [style = bold, label=""];
28->27 [style = bold, label=""];
0->32 [style = dotted, label="true"];
30->8 [style = bold, label=""];
0->27 [style = dotted, label="true"];
16->33 [style = dashed, label="0"];
20->24 [style = bold, label=""];
33->8 [style = bold, label=""];
19->7 [style = bold, label=""];
18->14 [style = bold, label=""];
36->34 [style = bold, label=""];
27->35 [style = dashed, label="0"];
0->7 [style = dotted, label="true"];
15->33 [style = bold, label=""];
8->26 [style = bold, label=""];
6->12 [style = bold, label=""];
}
