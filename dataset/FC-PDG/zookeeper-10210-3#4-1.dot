digraph {
28 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "byte(( buf = new byte((((@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,false,DATA_TO_CLIENT)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "byte(( buf = new byte((((@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testConnectWithSSLToStrictServer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertTrue(handshakeCompleted)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "socket.getOutputStream().write(DATA_FROM_CLIENT,2,DATA_FROM_CLIENT.length - 2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testConnectWithoutSSLToNonStrictServerPartialWrite['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "handshakeCompletedLock@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "{forceClose(socket)serverThread.shutdown(TIMEOUT)}@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "int bytesRead = socket.getInputStream().read(buf,0,buf.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "sslSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Thread.sleep(TIMEOUT / 2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "socket.getOutputStream().write(DATA_FROM_CLIENT,0,2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Socket socket = connectWithoutSSL()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "socket.getOutputStream().flush()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testConnectWithSSLToStrictServer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Socket sslSocket = connectWithSSL()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "socket.getOutputStream().flush()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertTrue(handshakeCompleted)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "serverThread.start()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,false,DATA_TO_CLIENT)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "int bytesRead = sslSocket.getInputStream().read(buf,0,buf.length)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "sslSocket.getOutputStream().flush()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "{forceClose(sslSocket)serverThread.shutdown(TIMEOUT)}@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8->20 [style = solid, label="buf"];
12->5 [style = bold, label=""];
15->7 [style = bold, label=""];
14->30 [style = bold, label=""];
27->2 [style = solid, label="bytesRead"];
11->14 [style = bold, label=""];
11->16 [style = dashed, label="0"];
25->23 [style = bold, label=""];
19->20 [style = bold, label=""];
4->15 [style = solid, label="bytesRead"];
4->15 [style = bold, label=""];
4->19 [style = bold, label=""];
23->32 [style = bold, label=""];
7->20 [style = dashed, label="0"];
0->11 [style = bold, label=""];
2->18 [style = bold, label=""];
30->25 [style = bold, label=""];
4->27 [style = dashed, label="0"];
20->3 [style = bold, label=""];
15->19 [style = dashed, label="0"];
7->27 [style = solid, label="buf"];
5->18 [style = dashed, label="0"];
32->26 [style = bold, label=""];
22->7 [style = bold, label=""];
7->3 [style = bold, label=""];
2->12 [style = bold, label=""];
28->14 [style = bold, label=""];
26->22 [style = bold, label=""];
8->4 [style = solid, label="buf"];
11->28 [style = dashed, label="0"];
6->1 [style = bold, label=""];
7->12 [style = solid, label="buf"];
21->9 [style = bold, label=""];
3->5 [style = dotted, label="true"];
12->29 [style = bold, label=""];
13->21 [style = dashed, label="0"];
10->8 [style = bold, label=""];
3->2 [style = bold, label=""];
5->13 [style = bold, label=""];
3->18 [style = dotted, label="true"];
12->18 [style = bold, label=""];
7->27 [style = bold, label=""];
2->12 [style = dotted, label="true"];
16->14 [style = bold, label=""];
8->7 [style = solid, label="buf"];
30->24 [style = solid, label="socket"];
6->30 [style = dashed, label="0"];
6->9 [style = solid, label="sslSocket"];
13->9 [style = bold, label=""];
31->28 [style = bold, label=""];
8->4 [style = bold, label=""];
18->21 [style = bold, label=""];
4->19 [style = solid, label="bytesRead"];
1->25 [style = dashed, label="0"];
29->24 [style = bold, label=""];
1->10 [style = bold, label=""];
10->23 [style = dashed, label="0"];
14->6 [style = bold, label=""];
27->2 [style = bold, label=""];
17->16 [style = bold, label=""];
3->2 [style = dotted, label="true"];
2->5 [style = bold, label=""];
}
