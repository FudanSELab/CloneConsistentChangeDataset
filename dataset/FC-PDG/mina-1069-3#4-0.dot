digraph {
5 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@9@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"a string\",results)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder(LineDelimiter.WINDOWS)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "results = decoder.decode(ByteBuffer.wrap(\" string\".getBytes()),context)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"a string\",results(0()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "testThatWindowsLineTerminatedStringReturnsNonEmptyResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Context context = decoder.createDecoderState()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"a string\",results(0()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testThatContextIsMaintainedBetweenMessages['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a stringa\".getBytes()),context)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(1,context.getBuffer().position())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testThatWindowsLineTerminatedStringReturnsNonEmptyResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertEquals(1,results.length)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(1,results.length)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertNotNull(results)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertNotNull(results)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder(LineDelimiter.UNIX)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"a string\",results(0()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->15 [style = bold, label=""];
19->18 [style = solid, label="results"];
15->13 [style = bold, label=""];
4->8 [style = solid, label="context"];
9->0 [style = bold, label=""];
3->1 [style = bold, label=""];
3->18 [style = dashed, label="0"];
2->3 [style = bold, label=""];
4->19 [style = bold, label=""];
4->16 [style = solid, label="context"];
2->18 [style = bold, label=""];
7->0 [style = bold, label=""];
8->6 [style = bold, label=""];
0->12 [style = dashed, label="0"];
19->6 [style = bold, label=""];
4->19 [style = solid, label="context"];
19->6 [style = solid, label="results"];
6->2 [style = bold, label=""];
16->14 [style = solid, label="results"];
17->12 [style = bold, label=""];
5->6 [style = bold, label=""];
16->15 [style = solid, label="results"];
12->4 [style = bold, label=""];
0->4 [style = bold, label=""];
11->10 [style = bold, label=""];
6->11 [style = bold, label=""];
8->6 [style = solid, label="results"];
8->11 [style = solid, label="results"];
21->16 [style = bold, label=""];
5->8 [style = dashed, label="0"];
4->5 [style = solid, label="context"];
4->8 [style = bold, label=""];
2->11 [style = dashed, label="0"];
18->21 [style = bold, label=""];
5->3 [style = solid, label="results"];
5->6 [style = solid, label="results"];
5->19 [style = dashed, label="0"];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
14->20 [style = bold, label=""];
}
