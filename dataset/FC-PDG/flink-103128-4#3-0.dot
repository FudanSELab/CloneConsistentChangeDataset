digraph {
49 [style = filled, label = "Assert.assertFalse(pollOperation.isDone())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Future<AsyncResult> secondPoll = FlinkFuture.supplyAsync(new Callable<AsyncResult>(){@Override public AsyncResult call(){return queue.poll()}},executor)@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(record2,firstPoll.get())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Thread.sleep(10L)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "StreamRecordQueueEntry<Integer> entry1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1,0L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "queue.put(entry)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertFalse(firstPoll.isDone())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "StreamRecordQueueEntry<Integer> record6 = new StreamRecordQueueEntry<>(new StreamRecord<>(6,7L))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "List<StreamElementQueueEntry<?>> entries = Arrays.asList(record1,record2,watermark1,record3,record4,watermark2,record5,record6)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "record2.collect(Collections.emptyList())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "entry4.collect(Collections.emptyList())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Set<AsyncResult> actual = new HashSet<>(2)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "record4.collect(Collections.emptyList())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Future<AsyncResult> firstPoll = FlinkFuture.supplyAsync(new Callable<AsyncResult>(){@Override public AsyncResult call(){return queue.poll()}},executor)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
59 [style = filled, label = "List<StreamElementQueueEntry<?>> expected = Arrays.asList(entry1,entry2,entry3,entry4)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Future<AsyncResult> thirdPoll = FlinkFuture.supplyAsync(new Callable<AsyncResult>(){@Override public AsyncResult call(){return queue.poll()}},executor)@@@52@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "CompletableFuture<AsyncResult> secondPoll = CompletableFuture.supplyAsync(null,executor)@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "record5.collect(Collections.emptyList())@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(record5,thirdPoll.get())@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "testCompletionOrder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(expected,actual)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "record1.collect(Collections.emptyList())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "entry2.collect(Collections.emptyList())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "Assert.assertEquals(expected,pollOperation.get())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "WatermarkQueueEntry entry3 = new WatermarkQueueEntry(new Watermark(2L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "expected.add(record3)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "StreamRecordQueueEntry<Integer> entry4 = new StreamRecordQueueEntry<>(new StreamRecord<>(3,3L))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "CompletableFuture<AsyncResult> firstPoll = CompletableFuture.supplyAsync(null,executor)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1,0L))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "StreamRecordQueueEntry<Integer> record5 = new StreamRecordQueueEntry<>(new StreamRecord<>(5,6L))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(queue.isEmpty())@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2,1L))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(record6,queue.poll())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "WatermarkQueueEntry watermark2 = new WatermarkQueueEntry(new Watermark(5L))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "OperatorActions operatorActions = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(record1,secondPoll.get())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "final OrderedStreamElementQueue queue = new OrderedStreamElementQueue(4,executor,operatorActions)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertFalse(thirdPoll.isDone())@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Thread.sleep(10L)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Thread.sleep(10L)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(8 == queue.size())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "queue.put(entry)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(watermark2,queue.poll())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "verify(operatorActions,never()).failOperator(any())@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(2L))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "CompletableFuture<AsyncResult> thirdPoll = CompletableFuture.supplyAsync(null,executor)@@@58@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "expected.add(record4)@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final UnorderedStreamElementQueue queue = new UnorderedStreamElementQueue(8,executor,operatorActions)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testCompletionOrder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "Assert.assertEquals(4,queue.size())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "actual.add(queue.poll())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testCompletionOrder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "StreamRecordQueueEntry<Integer> record4 = new StreamRecordQueueEntry<>(new StreamRecord<>(4,4L))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "entry1.collect(Collections.emptyList())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Thread.sleep(10L)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Future<List<AsyncResult>> pollOperation = FlinkFuture.supplyAsync(new Callable<List<AsyncResult>>(){@Override public List<AsyncResult> call(){List<AsyncResult> result = new ArrayList<>(4)while (!queue.isEmpty()) {result.add(queue.poll())}return result}},executor)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "verify(operatorActions,never()).failOperator(any())@@@72@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(watermark1,queue.poll())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "StreamRecordQueueEntry<Integer> entry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2,1L))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertTrue(1 == queue.size())@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "StreamRecordQueueEntry<Integer> record3 = new StreamRecordQueueEntry<>(new StreamRecord<>(3,3L))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "actual.add(queue.poll())@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Thread.sleep(10L)@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Set<AsyncResult> expected = new HashSet<>(2)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "record3.collect(Collections.emptyList())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->36 [style = solid, label="record1"];
53->59 [style = solid, label="entry2"];
52->64 [style = bold, label=""];
44->8 [style = bold, label=""];
62->54 [style = bold, label=""];
26->34 [style = bold, label=""];
61->19 [style = bold, label=""];
55->51 [style = bold, label=""];
44->10 [style = solid, label="actual"];
43->26 [style = bold, label=""];
26->49 [style = dashed, label="0"];
41->20 [style = bold, label=""];
26->56 [style = bold, label=""];
19->37 [style = solid, label="operatorActions"];
16->41 [style = bold, label=""];
40->10 [style = solid, label="expected"];
30->11 [style = bold, label=""];
3->5 [style = bold, label=""];
36->24 [style = bold, label=""];
33->42 [style = bold, label=""];
9->36 [style = solid, label="record5"];
54->53 [style = bold, label=""];
27->33 [style = bold, label=""];
9->38 [style = bold, label=""];
18->0 [style = bold, label=""];
1->28 [style = solid, label="watermark2"];
29->47 [style = bold, label=""];
42->46 [style = bold, label=""];
8->23 [style = bold, label=""];
59->60 [style = bold, label=""];
19->62 [style = solid, label="operatorActions"];
51->59 [style = solid, label="entry4"];
55->59 [style = solid, label="entry3"];
38->15 [style = solid, label="record6"];
5->25 [style = bold, label=""];
19->37 [style = bold, label=""];
0->7 [style = bold, label=""];
20->55 [style = dashed, label="0"];
59->58 [style = solid, label="expected"];
25->27 [style = bold, label=""];
58->63 [style = bold, label=""];
41->42 [style = solid, label="record2"];
41->53 [style = dashed, label="0"];
56->50 [style = bold, label=""];
43->22 [style = bold, label=""];
23->10 [style = bold, label=""];
39->6 [style = solid, label="record4"];
42->32 [style = bold, label=""];
19->62 [style = bold, label=""];
16->54 [style = dashed, label="0"];
48->5 [style = bold, label=""];
37->16 [style = bold, label=""];
15->29 [style = bold, label=""];
13->18 [style = bold, label=""];
32->46 [style = dashed, label="0"];
3->48 [style = dashed, label="0"];
46->43 [style = bold, label=""];
2->48 [style = bold, label=""];
20->11 [style = solid, label="watermark1"];
40->35 [style = bold, label=""];
7->17 [style = bold, label=""];
50->58 [style = bold, label=""];
0->56 [style = dashed, label="0"];
47->18 [style = bold, label=""];
2->3 [style = bold, label=""];
14->19 [style = bold, label=""];
6->44 [style = bold, label=""];
1->9 [style = bold, label=""];
31->26 [style = bold, label=""];
17->12 [style = bold, label=""];
37->62 [style = dashed, label="0"];
16->30 [style = solid, label="record1"];
21->39 [style = bold, label=""];
57->43 [style = bold, label=""];
39->1 [style = bold, label=""];
9->17 [style = solid, label="record5"];
60->52 [style = bold, label=""];
21->36 [style = solid, label="record3"];
20->36 [style = solid, label="watermark1"];
39->36 [style = solid, label="record4"];
53->55 [style = bold, label=""];
41->36 [style = solid, label="record2"];
10->28 [style = bold, label=""];
28->15 [style = bold, label=""];
17->58 [style = dashed, label="0"];
24->2 [style = bold, label=""];
35->6 [style = bold, label=""];
21->35 [style = solid, label="record3"];
22->31 [style = bold, label=""];
38->36 [style = bold, label=""];
38->36 [style = solid, label="record6"];
32->43 [style = bold, label=""];
11->40 [style = bold, label=""];
34->30 [style = bold, label=""];
51->59 [style = bold, label=""];
20->21 [style = bold, label=""];
54->59 [style = solid, label="entry1"];
34->57 [style = dashed, label="0"];
12->4 [style = bold, label=""];
45->19 [style = bold, label=""];
1->36 [style = solid, label="watermark2"];
21->51 [style = dashed, label="0"];
64->49 [style = bold, label=""];
13->47 [style = dashed, label="0"];
7->50 [style = dashed, label="0"];
49->57 [style = bold, label=""];
29->13 [style = bold, label=""];
}
