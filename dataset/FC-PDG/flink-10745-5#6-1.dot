digraph {
2 [style = filled, label = "reader.isAvailable().get()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "reader.start()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "status == InputStatus.END_OF_INPUT@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "true@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "MockSourceReader reader = new MockSourceReader(elementsQueue,null,getConfig(),new TestingReaderContext())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testMultipleSplitsWithDifferentFinishingMoments['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "InputStatus status = reader.pollNext(new TestingReaderOutput<>())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "MockSourceReader reader = new MockSourceReader(elementsQueue,null,getConfig(),null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "FutureCompletingBlockingQueue<RecordsWithSplitIds<int((>> elementsQueue = new FutureCompletingBlockingQueue<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "MockSplitReader mockSplitReader = MockSplitReader.newBuilder().setNumRecordsPerSplitPerFetch(2).setBlockingFetch(true).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "status == InputStatus.NOTHING_AVAILABLE@@@15@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<MockSourceSplit> splits = Arrays.asList(getSplit(0,10,Boundedness.BOUNDED),getSplit(1,12,Boundedness.BOUNDED))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testMultipleSplitsWithDifferentFinishingMoments['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "reader.notifyNoMoreSplits()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "reader.addSplits(splits)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "MockSplitReader mockSplitReader = MockSplitReader.newBuilder().setNumRecordsPerSplitPerFetch(2).setSeparatedFinishedRecord(false).setBlockingFetch(false).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "createReader['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "return new MockSourceReader(elementsQueue,null,getConfig(),null)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
0->3 [style = solid, label="status"];
4->6 [style = bold, label=""];
3->2 [style = dotted, label="true"];
16->17 [style = bold, label=""];
0->5 [style = solid, label="status"];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
13->11 [style = bold, label=""];
8->3 [style = dotted, label="true"];
1->11 [style = bold, label=""];
1->13 [style = dashed, label="0"];
8->0 [style = bold, label=""];
6->1 [style = bold, label=""];
6->16 [style = dashed, label="0"];
1->17 [style = dashed, label="0"];
3->2 [style = bold, label=""];
12->4 [style = bold, label=""];
8->5 [style = dotted, label="true"];
11->10 [style = bold, label=""];
3->8 [style = bold, label=""];
6->13 [style = bold, label=""];
15->4 [style = bold, label=""];
10->9 [style = solid, label="splits"];
4->13 [style = solid, label="elementsQueue"];
8->0 [style = dotted, label="true"];
10->9 [style = bold, label=""];
4->17 [style = solid, label="elementsQueue"];
4->1 [style = solid, label="elementsQueue"];
4->16 [style = bold, label=""];
2->8 [style = bold, label=""];
0->5 [style = bold, label=""];
14->4 [style = bold, label=""];
}
