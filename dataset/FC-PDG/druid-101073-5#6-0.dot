digraph {
25 [style = filled, label = "appenderatorSegments@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final Period windowPeriod = config.getWindowPeriod()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final List<SegmentIdentifier> segmentsToPush = new ArrayList<>()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "final long windowMillis = windowPeriod.toStandardDuration().getMillis()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final List<SegmentIdentifier> appenderatorSegments = appenderator.getSegments()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "DateTime minTimestampAsDate = segmentGranularity.bucketStart(DateTimes.utc(Math.max(windowMillis,rejectionPolicy.getCurrMaxTime().getMillis()) - windowMillis))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "log.info(\"Found (%,d( segments. Attempting to hand off all of them.\",appenderatorSegments.size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "appenderatorSegments@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Function<Throwable,Void> errorHandler = new Function<Throwable,Void>(){@Override public Void apply(Throwable throwable){final List<String> segmentIdentifierStrings = Lists.transform(segmentsToPush,null)log.makeAlert(throwable,\"Failed to publish merged indexes(%s(\",schema.getDataSource()).addData(\"segments\",segmentIdentifierStrings).emit()if (shuttingDown) {cleanShutdown = falsefor (SegmentIdWithShardSpec identifier : segmentsToPush){dropSegment(identifier)}}return null}}@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "log.info(\"Starting merge and push.\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "SegmentIdentifier segment@@@17@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "log.info(\"Adding entry (%s( for merge and push.\",segment)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "segmentsToPush.addAll(appenderatorSegments)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final List<SegmentIdWithShardSpec> segmentsToPush = new ArrayList<>()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "getAllowedMinTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "intervalStart < minTimestamp@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final List<SegmentIdWithShardSpec> appenderatorSegments = appenderator.getSegments()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "SegmentIdWithShardSpec segment@@@17@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "mergeAndPush['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "final Long intervalStart = segment.getInterval().getStartMillis()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Futures.addCallback(appenderator.push(segmentsToPush,Committers.nil(),false),new FutureCallback<SegmentsAndMetadata>(){@Override public void onSuccess(SegmentsAndMetadata result){for (DataSegment pushedSegment : result.getSegments()){try {segmentPublisher.publishSegment(pushedSegment)}catch (Exception e) }log.info(\"Published (%,d( sinks.\",segmentsToPush.size())}@Override public void onFailure(Throwable e){log.warn(e,\"Failed to push (%,d( segments.\",segmentsToPush.size())errorHandler.apply(e)}})@@@43@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "log.info(\"Skipping persist and merge for entry (%s( : Start time (%s( >= (%s( min timestamp required in this run. Segment will be picked up in a future run.\",segment,DateTimes.utc(intervalStart),minTimestampAsDate)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "log.info(\"Found (%,d( segments to persist and merge\",segmentsToPush.size())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Futures.addCallback(appenderator.push(segmentsToPush,Committers.nil(),false),new FutureCallback<SegmentsAndMetadata>(){@Override public void onSuccess(SegmentsAndMetadata result){for (DataSegment pushedSegment : result.getSegments()){try {segmentPublisher.publishSegment(pushedSegment)}catch (Exception e) }log.info(\"Published (%,d( sinks.\",segmentsToPush.size())}@Override public void onFailure(Throwable e){log.warn(e,\"Failed to push (%,d( segments.\",segmentsToPush.size())errorHandler.apply(e)}})@@@48@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "long minTimestamp = minTimestampAsDate.getMillis()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "log.info(\"Found (%,d( segments. Attempting to hand off segments that start before (%s(.\",appenderatorSegments.size(),minTimestampAsDate)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "mergeAndPush['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final Granularity segmentGranularity = schema.getGranularitySpec().getSegmentGranularity()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "return segmentGranularity.bucketStart(DateTimes.utc(Math.max(windowMillis,rejectionPolicy.getCurrMaxTime().getMillis()) - windowMillis))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "shuttingDown@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "segmentsToPush.add(segment)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->22 [style = bold, label=""];
24->28 [style = bold, label=""];
3->10 [style = solid, label="minTimestamp"];
7->10 [style = dotted, label="true"];
3->24 [style = bold, label=""];
16->24 [style = dashed, label="0"];
2->5 [style = solid, label="minTimestampAsDate"];
7->25 [style = dotted, label="false"];
2->3 [style = bold, label=""];
28->7 [style = bold, label=""];
1->20 [style = bold, label=""];
11->12 [style = bold, label=""];
5->18 [style = bold, label=""];
16->17 [style = bold, label=""];
16->22 [style = solid, label="appenderatorSegments"];
3->16 [style = bold, label=""];
7->9 [style = dotted, label="true"];
7->26 [style = dotted, label="false"];
29->21 [style = bold, label=""];
11->18 [style = bold, label=""];
28->14 [style = solid, label="segmentsToPush"];
17->7 [style = bold, label=""];
7->9 [style = bold, label=""];
20->18 [style = bold, label=""];
17->28 [style = dashed, label="0"];
7->5 [style = bold, label=""];
7->0 [style = dotted, label="false"];
10->11 [style = dotted, label="false"];
4->30 [style = bold, label=""];
18->10 [style = bold, label=""];
8->2 [style = bold, label=""];
14->23 [style = bold, label=""];
2->11 [style = solid, label="minTimestampAsDate"];
17->14 [style = solid, label="segmentsToPush"];
10->20 [style = dotted, label="true"];
22->12 [style = bold, label=""];
20->12 [style = bold, label=""];
12->14 [style = bold, label=""];
4->30 [style = solid, label="windowMillis"];
18->10 [style = solid, label="intervalStart"];
7->18 [style = dotted, label="true"];
15->26 [style = dashed, label="0"];
4->8 [style = bold, label=""];
24->22 [style = solid, label="appenderatorSegments"];
17->6 [style = solid, label="segmentsToPush"];
28->23 [style = solid, label="segmentsToPush"];
18->11 [style = solid, label="intervalStart"];
10->1 [style = dotted, label="true"];
7->22 [style = dotted, label="true"];
7->5 [style = dotted, label="false"];
10->1 [style = bold, label=""];
7->15 [style = dotted, label="false"];
27->21 [style = bold, label=""];
4->2 [style = solid, label="windowMillis"];
13->4 [style = bold, label=""];
14->6 [style = bold, label=""];
21->13 [style = bold, label=""];
10->11 [style = bold, label=""];
19->21 [style = bold, label=""];
}
