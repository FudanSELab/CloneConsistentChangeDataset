digraph {
1 [style = filled, label = "to.assertEmpty()@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Observable.fromCallable(new Callable<Integer>(){@Override public Integer call(){to.dispose()return 1}}).subscribe(to)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "disposedOnCall['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final TestObserver<Integer> to = new TestObserver<Integer>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "disposedOnCall['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Single.fromCallable(new Callable<Integer>(){@Override public Integer call(){to.dispose()return 1}}).subscribe(to)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final TestObserver<Integer> to = new TestObserver<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "disposedOnCall['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
2->4 [style = dashed, label="0"];
4->3 [style = solid, label="to"];
2->3 [style = solid, label="to"];
7->1 [style = bold, label=""];
2->7 [style = bold, label=""];
3->1 [style = bold, label=""];
2->7 [style = solid, label="to"];
3->7 [style = dashed, label="0"];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
6->2 [style = bold, label=""];
}
