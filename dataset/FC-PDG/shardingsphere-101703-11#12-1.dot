digraph {
4 [style = filled, label = "Collection<ExecutionUnit> expected = new LinkedHashSet<>(1,1)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData,new RouteSQLRewriteResult(sqlRewriteUnits),mock())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "expected.add(expectedUnit2)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\",new SQLUnit(\"sql2\",Collections.singletonList(\"parameter2\")))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Map<RouteUnit,SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2,1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ShardingSphereSchema schema = new ShardingSphereSchema(mock(),mock(),buildPhysicalSchemaMetaDataWithoutPrimaryKey(),mock())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(actual,is(expected))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\",Collections.singletonList(\"parameter2\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\",Collections.singletonList(\"parameter1\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(schema,new RouteSQLRewriteResult(sqlRewriteUnits),mock())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Collection<ExecutionUnit> expected = new LinkedHashSet<>(2,1)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expected.add(expectedUnit2)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(),mock(),mock())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\",new SQLUnit(\"sql2\",Collections.singletonList(\"parameter2\")))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\",\"actualName2\"),Collections.singletonList(new RouteMapper(\"logicName1\",\"actualName1\")))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ShardingSphereSchema schema = new ShardingSphereSchema(mock(),mock(),buildPhysicalSchemaMetaData(),mock())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\",new SQLUnit(\"sql1\",Collections.singletonList(\"parameter1\")))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(),is(1))@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "sqlRewriteUnits.put(routeUnit1,sqlRewriteUnit1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertBuildRouteSQLRewriteResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\",\"actualName1\"),Collections.singletonList(new RouteMapper(\"logicName1\",\"actualName1\")))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "sqlRewriteUnits.put(routeUnit2,sqlRewriteUnit2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expected.add(expectedUnit1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertBuildRouteSQLRewriteResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(actual,is(expected))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(),is(0))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\",\"actualName2\"),Collections.singletonList(new RouteMapper(\"logicName2\",\"actualName2\")))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\",Collections.emptyList(),Collections.emptyList(),resource,schema)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14->3 [style = bold, label=""];
9->4 [style = solid, label="sqlRewriteUnits"];
22->14 [style = solid, label="sqlRewriteUnits"];
20->21 [style = solid, label="metaData"];
15->10 [style = bold, label=""];
12->13 [style = solid, label="sqlRewriteUnit1"];
3->20 [style = solid, label="schema"];
10->4 [style = dashed, label="0"];
10->2 [style = solid, label="expected"];
6->13 [style = solid, label="routeUnit1"];
15->25 [style = bold, label=""];
21->15 [style = bold, label=""];
16->6 [style = bold, label=""];
27->28 [style = bold, label=""];
9->14 [style = solid, label="schema"];
4->15 [style = bold, label=""];
5->24 [style = dashed, label="0"];
23->4 [style = bold, label=""];
14->17 [style = bold, label=""];
3->4 [style = solid, label="schema"];
28->8 [style = solid, label="sqlRewriteUnit2"];
17->20 [style = solid, label="resource"];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
1->7 [style = bold, label=""];
11->15 [style = bold, label=""];
0->14 [style = solid, label="routeUnit2"];
20->21 [style = bold, label=""];
22->8 [style = bold, label=""];
15->7 [style = solid, label="expectedUnit2"];
5->19 [style = bold, label=""];
25->24 [style = bold, label=""];
26->27 [style = bold, label=""];
3->20 [style = bold, label=""];
4->2 [style = solid, label="actual"];
21->5 [style = solid, label="actual"];
14->23 [style = bold, label=""];
15->7 [style = solid, label="expectedUnit1"];
3->9 [style = dashed, label="0"];
18->6 [style = bold, label=""];
6->27 [style = dashed, label="0"];
7->2 [style = bold, label=""];
1->5 [style = solid, label="expected"];
27->8 [style = solid, label="routeUnit2"];
23->15 [style = solid, label="expectedUnit2"];
0->8 [style = bold, label=""];
8->9 [style = bold, label=""];
9->14 [style = bold, label=""];
17->3 [style = bold, label=""];
8->14 [style = solid, label="sqlRewriteUnit2"];
11->1 [style = solid, label="expectedUnit1"];
14->25 [style = solid, label="actual"];
4->25 [style = solid, label="expected"];
10->2 [style = solid, label="expectedUnit2"];
4->11 [style = bold, label=""];
10->1 [style = bold, label=""];
13->14 [style = bold, label=""];
28->22 [style = bold, label=""];
9->21 [style = solid, label="sqlRewriteUnits"];
2->5 [style = bold, label=""];
9->13 [style = bold, label=""];
6->12 [style = bold, label=""];
}
