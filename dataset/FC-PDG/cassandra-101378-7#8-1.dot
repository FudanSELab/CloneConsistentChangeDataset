digraph {
0 [style = filled, label = "DeletionTime expectedCmplxDelete = new DeletionTime(ts(1( - 1,nowInSec)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(Collections.singleton(expectedCell),Sets.newHashSet(cd))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "resolver.preprocess(readResponseMessage(peer1,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build())),cmd))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EndpointsForRange replicas = makeReplicas(2)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertEquals(expectedCmplxDelete,cd.complexDeletion())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "builder.newRow(Clustering.EMPTY)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(expectedCmplxDelete,cd.complexDeletion())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertNull(readRepair.sent.get(peer2))@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Row row = rowIter.next()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "builder.addCell(expectedCell)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "builder.addComplexDeletion(m,expectedCmplxDelete)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertColumns(row,\"m\")@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "builder.newRow(Clustering.EMPTY)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "DataResolver resolver = new DataResolver(ks,cmd,ConsistencyLevel.ALL,2,System.nanoTime(),readRepair)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "InetAddressAndPort peer2 = replicas.get(1).endpoint()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Mutation mutation = readRepair.getForEndpoint(peer1)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "InetAddressAndPort peer1 = replicas.get(0).endpoint()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "ReadCommand cmd = Util.cmd(cfs2,dk).withNowInSeconds(nowInSec).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "testResolveComplexDelete['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Row.Builder builder = BTreeRow.unsortedBuilder()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "resolver.preprocess(response(cmd,peer1,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build()))))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertNotNull(row.getCell(m,CellPath.create(bb(1))))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "builder.addComplexDeletion(m,new DeletionTime(ts(0( - 1,nowInSec))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "InetAddressAndPort peer1 = peer()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "resolver.preprocess(response(cmd,peer2,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build()))))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertNull(row.getCell(m,CellPath.create(bb(0))))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Cell expectedCell = mapCell(1,1,ts(1()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testResolveNewCollectionOverwritingDeleted['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Iterator<Row> rowIter = mutation.getPartitionUpdate(cfm2).iterator()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "resolver.preprocess(readResponseMessage(peer2,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build())),cmd))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "builder.addCell(mapCell(0,0,ts(0())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "DataResolver resolver = new DataResolver(cmd,plan(replicas,ConsistencyLevel.ALL),readRepair,System.nanoTime())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "InetAddressAndPort peer2 = peer()@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "long(( ts = {100,200}@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Row row = Iterators.getOnlyElement(readRepair.getForEndpoint(peer1).getPartitionUpdate(cfm2).iterator())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Row row = Iterators.getOnlyElement(rows)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestableReadRepair readRepair = new TestableReadRepair(cmd,ConsistencyLevel.QUORUM)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertEquals(Collections.singleton(expectedCell),Sets.newHashSet(cd))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(Collections.singleton(expectedCell),Sets.newHashSet(cd))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testResolveComplexDelete['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertNull(readRepair.sent.get(peer2))@@@39@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertFalse(rowIter.hasNext())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(rowIter.hasNext())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32->22 [style = bold, label=""];
41->42 [style = solid, label="cd"];
9->11 [style = bold, label=""];
12->5 [style = bold, label=""];
5->20 [style = bold, label=""];
28->34 [style = solid, label="cmd"];
10->19 [style = bold, label=""];
10->38 [style = dashed, label="0"];
34->15 [style = bold, label=""];
36->28 [style = bold, label=""];
28->9 [style = bold, label=""];
30->6 [style = bold, label=""];
38->39 [style = bold, label=""];
21->18 [style = bold, label=""];
9->37 [style = bold, label=""];
1->23 [style = bold, label=""];
28->32 [style = solid, label="cmd"];
7->26 [style = bold, label=""];
43->40 [style = bold, label=""];
36->37 [style = solid, label="replicas"];
0->24 [style = solid, label="expectedCmplxDelete"];
45->43 [style = bold, label=""];
28->17 [style = solid, label="cmd"];
15->0 [style = bold, label=""];
0->24 [style = bold, label=""];
26->15 [style = bold, label=""];
39->45 [style = solid, label="cd"];
28->26 [style = solid, label="cmd"];
21->35 [style = bold, label=""];
13->25 [style = bold, label=""];
30->3 [style = solid, label="ts"];
1->41 [style = bold, label=""];
18->40 [style = solid, label="peer2"];
14->10 [style = bold, label=""];
39->45 [style = bold, label=""];
19->2 [style = bold, label=""];
18->17 [style = solid, label="peer2"];
22->1 [style = solid, label="row"];
23->14 [style = bold, label=""];
3->7 [style = bold, label=""];
0->13 [style = solid, label="expectedCmplxDelete"];
33->36 [style = bold, label=""];
28->9 [style = solid, label="cmd"];
24->8 [style = bold, label=""];
11->30 [style = bold, label=""];
3->29 [style = bold, label=""];
42->38 [style = bold, label=""];
30->29 [style = solid, label="ts"];
20->4 [style = solid, label="cd"];
7->31 [style = dashed, label="0"];
0->43 [style = solid, label="expectedCmplxDelete"];
37->30 [style = bold, label=""];
4->13 [style = bold, label=""];
35->32 [style = bold, label=""];
31->34 [style = solid, label="peer1"];
8->21 [style = solid, label="expectedCell"];
31->34 [style = bold, label=""];
31->10 [style = solid, label="peer1"];
6->27 [style = bold, label=""];
30->8 [style = solid, label="ts"];
30->0 [style = solid, label="ts"];
7->10 [style = solid, label="peer1"];
22->1 [style = bold, label=""];
26->34 [style = dashed, label="0"];
18->25 [style = solid, label="peer2"];
8->45 [style = solid, label="expectedCell"];
28->37 [style = solid, label="cmd"];
8->4 [style = solid, label="expectedCell"];
7->26 [style = solid, label="peer1"];
29->31 [style = bold, label=""];
27->3 [style = bold, label=""];
18->17 [style = bold, label=""];
17->32 [style = dashed, label="0"];
9->37 [style = solid, label="readRepair"];
17->22 [style = bold, label=""];
18->35 [style = dashed, label="0"];
2->12 [style = bold, label=""];
35->32 [style = solid, label="peer2"];
9->11 [style = solid, label="readRepair"];
20->4 [style = bold, label=""];
16->28 [style = bold, label=""];
44->28 [style = bold, label=""];
8->21 [style = bold, label=""];
29->7 [style = bold, label=""];
11->37 [style = dashed, label="0"];
35->25 [style = solid, label="peer2"];
28->11 [style = solid, label="cmd"];
41->42 [style = bold, label=""];
8->42 [style = solid, label="expectedCell"];
}
