digraph {
2 [style = filled, label = "VarianceAggregatorCollector holder3 = new VarianceAggregatorCollector()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "i++@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new VarianceAggregatorFactory(\"a0:agg\",\"d1\",\"population\",\"double\"),new VarianceAggregatorFactory(\"a1:agg\",\"f1\",\"population\",\"float\"),new VarianceAggregatorFactory(\"a2:agg\",\"l1\",\"population\",\"long\"))).postAggregators(ImmutableList.of(new StandardDeviationPostAggregator(\"a0\",\"a0:agg\",\"population\"),new StandardDeviationPostAggregator(\"a1\",\"a1:agg\",\"population\"),new StandardDeviationPostAggregator(\"a2\",\"a2:agg\",\"population\"))).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@26@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "VarianceAggregatorCollector holder1 = new VarianceAggregatorCollector()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "i < expectedResults.size()@@@22@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Object raw2 = row.getRaw(\"f1\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "addToHolder(holder2,raw2)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "addToHolder(holder1,raw1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Object raw1 = row.getRaw(\"d1\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int i = 0@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertArrayEquals(expectedResults.get(i),results.get(i))@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testStdDevPop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new VarianceAggregatorFactory(\"a0:agg\",\"d1\",\"population\",\"double\"),new VarianceAggregatorFactory(\"a1:agg\",\"f1\",\"population\",\"float\"),new VarianceAggregatorFactory(\"a2:agg\",\"l1\",\"population\",\"long\"))).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final String sql = \"SELECT\" + \"VAR_POP(d1),\" + \"VAR_POP(f1),\" + \"VAR_POP(l1)\" + \"FROM numfoo\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertResultsEquals(expectedResults,results)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT,CalciteTestBase.DEFAULT_PARAMETERS,authenticationResult).toList()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Object raw3 = row.getRaw(\"l1\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "VarianceAggregatorCollector holder2 = new VarianceAggregatorCollector()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testStdDevPop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new VarianceAggregatorFactory(\"a0:agg\",\"d1\",\"population\",\"double\"),new VarianceAggregatorFactory(\"a1:agg\",\"f1\",\"population\",\"float\"),new VarianceAggregatorFactory(\"a2:agg\",\"l1\",\"population\",\"long\"))).postAggregators(ImmutableList.of(new StandardDeviationPostAggregator(\"a0\",\"a0:agg\",\"population\"),new StandardDeviationPostAggregator(\"a1\",\"a1:agg\",\"population\"),new StandardDeviationPostAggregator(\"a2\",\"a2:agg\",\"population\"))).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final String sql = \"SELECT\" + \"STDDEV_POP(d1),\" + \"STDDEV_POP(f1),\" + \"STDDEV_POP(l1)\" + \"FROM numfoo\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testVarPop['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9ba76c)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "addToHolder(holder3,raw3)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = solid, label="i"];
12->7 [style = bold, label=""];
16->24 [style = bold, label=""];
7->20 [style = solid, label="results"];
11->20 [style = dashed, label="0"];
14->16 [style = bold, label=""];
14->0 [style = solid, label="i"];
9->16 [style = solid, label="i"];
1->3 [style = solid, label="holder2"];
6->15 [style = bold, label=""];
12->23 [style = dashed, label="0"];
18->5 [style = solid, label="holder1"];
2->8 [style = solid, label="holder3"];
7->18 [style = bold, label=""];
25->19 [style = bold, label=""];
9->16 [style = bold, label=""];
0->9 [style = bold, label=""];
20->22 [style = bold, label=""];
16->0 [style = bold, label=""];
13->20 [style = solid, label="expectedResults"];
19->23 [style = bold, label=""];
8->17 [style = bold, label=""];
9->0 [style = solid, label="i"];
16->10 [style = bold, label=""];
11->14 [style = bold, label=""];
21->12 [style = bold, label=""];
2->17 [style = bold, label=""];
6->3 [style = solid, label="raw2"];
13->11 [style = bold, label=""];
10->24 [style = dashed, label="0"];
4->19 [style = bold, label=""];
16->9 [style = dotted, label="true"];
17->6 [style = bold, label=""];
16->0 [style = dotted, label="true"];
14->9 [style = solid, label="i"];
3->8 [style = bold, label=""];
8->13 [style = bold, label=""];
15->5 [style = bold, label=""];
23->7 [style = bold, label=""];
18->1 [style = bold, label=""];
15->8 [style = solid, label="raw3"];
17->5 [style = solid, label="raw1"];
5->3 [style = bold, label=""];
13->20 [style = bold, label=""];
19->12 [style = bold, label=""];
1->2 [style = bold, label=""];
}
