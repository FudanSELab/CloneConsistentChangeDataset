digraph {
15 [style = filled, label = "queryResult.size(resultSetSize)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(\"fetch\",phase.getName())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "results.consumeResult(queryResult)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int resultSetSize = randomIntBetween(2,10)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(42,responseRef.get().getHits().getAt(1).docId())@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "mockSearchPhaseContext.searchTransport = searchTransportService@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "SearchTransportService searchTransportService = new SearchTransportService(Settings.builder().put(\"cluster.remote.connect\",false).build(),null,null){@Override public void sendExecuteFetch(Transport.Connection connection,ShardFetchSearchRequest request,SearchTask task,SearchActionListener<FetchSearchResult> listener){FetchSearchResult fetchResult = new FetchSearchResult()if (request.id() == 321) {fetchResult.hits(new SearchHits(new SearchHit((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@123aca5,1,2.0F))}{assertEquals(123,request.id())fetchResult.hits(new SearchHits(new SearchHit((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@123acbb,1,1.0F))}listener.onResponse(fetchResult)}}@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "testFetchTwoDocument['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "queryResult.setShardIndex(1)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "mockSearchPhaseContext.searchTransport = searchTransportService@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "FetchSearchPhase phase = new FetchSearchPhase(results,controller,mockSearchPhaseContext,null)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "queryResult.setShardIndex(0)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "queryResult.size(resultSetSize)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(2,responseRef.get().getSuccessfulShards())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "mockSearchPhaseContext.assertNoFailure()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "queryResult.topDocs(new TopDocs(1,new ScoreDoc((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@123ad71,2.0F),new DocValueFormat(((()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "int resultSetSize = 1@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "queryResult = new QuerySearchResult(321,new SearchShardTarget(\"node2\",new Index(\"test\",\"na\"),1,null))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "phase.run()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "AtomicReference<SearchResponse> responseRef = new AtomicReference<>()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testFetchTwoDocument['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "SearchTransportService searchTransportService = new SearchTransportService(Settings.builder().put(\"search.remote.connect\",false).build(),null,null){@Override public void sendExecuteFetch(Transport.Connection connection,ShardFetchSearchRequest request,SearchTask task,SearchActionListener<FetchSearchResult> listener){FetchSearchResult fetchResult = new FetchSearchResult()if (request.id() == 321) {fetchResult.hits(new SearchHits(new SearchHit((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@123adea,1,2.0F))}{fail(\"requestID 123 should not be fetched but was\")}listener.onResponse(fetchResult)}}@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(0,responseRef.get().getFailedShards())@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty())@@@56@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "FetchSearchPhase phase = new FetchSearchPhase(results,controller,mockSearchPhaseContext,null)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(2,responseRef.get().getHits().totalHits)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(),2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testCleanupIrrelevantContexts['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertNotNull(responseRef.get())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "results.consumeResult(queryResult)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "queryResult.topDocs(new TopDocs(1,new ScoreDoc((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@123ada1,2.0F),new DocValueFormat(((()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(1,mockSearchPhaseContext.releasedSearchContexts.size())@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L))@@@54@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "QuerySearchResult queryResult = new QuerySearchResult(123,new SearchShardTarget(\"node1\",new Index(\"test\",\"na\"),0,null))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(2,responseRef.get().getSuccessfulShards())@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(1,responseRef.get().getHits().getHits().length)@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(84,responseRef.get().getHits().getAt(0).docId())@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35->31 [style = bold, label=""];
21->10 [style = bold, label=""];
25->3 [style = solid, label="searchTransportService"];
15->13 [style = bold, label=""];
31->23 [style = bold, label=""];
36->10 [style = solid, label="resultSetSize"];
23->5 [style = bold, label=""];
22->19 [style = bold, label=""];
2->6 [style = bold, label=""];
29->3 [style = bold, label=""];
16->34 [style = solid, label="results"];
25->3 [style = bold, label=""];
32->7 [style = bold, label=""];
6->15 [style = solid, label="resultSetSize"];
11->9 [style = solid, label="queryResult"];
16->2 [style = bold, label=""];
12->1 [style = bold, label=""];
17->23 [style = bold, label=""];
0->15 [style = bold, label=""];
36->11 [style = bold, label=""];
26->21 [style = bold, label=""];
20->27 [style = bold, label=""];
9->26 [style = bold, label=""];
1->28 [style = bold, label=""];
11->0 [style = bold, label=""];
25->37 [style = solid, label="searchTransportService"];
19->14 [style = bold, label=""];
28->33 [style = bold, label=""];
7->17 [style = solid, label="mockSearchPhaseContext"];
5->12 [style = bold, label=""];
25->37 [style = bold, label=""];
7->34 [style = solid, label="mockSearchPhaseContext"];
33->22 [style = bold, label=""];
30->7 [style = bold, label=""];
37->34 [style = bold, label=""];
6->11 [style = bold, label=""];
6->36 [style = dashed, label="0"];
2->36 [style = bold, label=""];
10->4 [style = bold, label=""];
7->18 [style = bold, label=""];
29->3 [style = solid, label="searchTransportService"];
25->29 [style = dashed, label="0"];
4->8 [style = bold, label=""];
3->17 [style = bold, label=""];
6->10 [style = solid, label="resultSetSize"];
13->9 [style = bold, label=""];
18->34 [style = solid, label="controller"];
34->38 [style = bold, label=""];
22->14 [style = bold, label=""];
38->35 [style = bold, label=""];
24->7 [style = bold, label=""];
27->22 [style = dashed, label="0"];
8->25 [style = bold, label=""];
8->29 [style = bold, label=""];
18->17 [style = solid, label="controller"];
28->22 [style = bold, label=""];
26->8 [style = solid, label="queryResult"];
16->17 [style = solid, label="results"];
14->20 [style = bold, label=""];
36->15 [style = solid, label="resultSetSize"];
18->16 [style = bold, label=""];
}
