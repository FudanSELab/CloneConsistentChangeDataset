digraph {
3 [style = filled, label = "assertEquals(\"data length field 2\",4,ze(1(.getLocalFileDataLength().getValue())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"mode field 1\",040755,((AsiExtraField)ze(0().getMode())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ZipExtraField(( ze = ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.READ)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testParseWithRead['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "System.arraycopy(data,0,data2,0,data2.length)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(\"type field 2\",ze(1(,instanceOf())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(\"type field 1\",ze(0(,instanceOf())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "byte(( data2 = new byte((((@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "ExtraFieldUtils.parse(data2)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertThat(\"type field 1\",ze(0(,instanceOf())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "ZipExtraField(( ze = ExtraFieldUtils.parse(data)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"byte number \" + i,data2(data.length - 5 + i(,ze(1(.getLocalFileDataData()(i()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"number of fields\",2,ze.length)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testParse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(\"type field 2\",ze(1( instanceof UnparseableExtraFieldData)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "thrown.expect()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "i < 4@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testParseWithRead['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "int i = 0@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"data length field 2\",1,ze(1(.getLocalFileDataLength().getValue())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"mode field 1\",040755,((AsiExtraField)ze(0().getMode())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(\"type field 2\",ze(1(,instanceOf())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "i++@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "thrown.expectMessage(\"bad extra field starting at \" + (4 + aLocal.length) + \". Block length of 1 bytes exceeds remaining data of 0 bytes.\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(\"type field 2\",ze(1( instanceof UnrecognizedExtraField)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"number of fields\",2,ze.length)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->12 [style = solid, label="ze"];
6->21 [style = dashed, label="0"];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
16->13 [style = bold, label=""];
24->6 [style = solid, label="ze"];
9->0 [style = bold, label=""];
23->5 [style = bold, label=""];
10->14 [style = bold, label=""];
16->13 [style = solid, label="data2"];
0->19 [style = dashed, label="0"];
21->15 [style = bold, label=""];
17->9 [style = bold, label=""];
11->6 [style = bold, label=""];
11->21 [style = bold, label=""];
5->6 [style = solid, label="ze"];
12->11 [style = bold, label=""];
1->20 [style = bold, label=""];
17->19 [style = solid, label="ze"];
17->26 [style = solid, label="data2"];
14->18 [style = solid, label="i"];
14->10 [style = solid, label="i"];
7->18 [style = solid, label="i"];
20->3 [style = bold, label=""];
5->21 [style = solid, label="ze"];
16->10 [style = solid, label="data2"];
7->10 [style = solid, label="i"];
15->16 [style = bold, label=""];
5->22 [style = solid, label="ze"];
18->14 [style = dotted, label="true"];
6->15 [style = bold, label=""];
2->12 [style = bold, label=""];
17->9 [style = solid, label="data2"];
9->26 [style = bold, label=""];
18->10 [style = dotted, label="true"];
25->24 [style = bold, label=""];
13->17 [style = bold, label=""];
5->2 [style = bold, label=""];
19->1 [style = bold, label=""];
16->17 [style = solid, label="data2"];
24->16 [style = solid, label="ze"];
18->10 [style = bold, label=""];
8->5 [style = bold, label=""];
3->7 [style = bold, label=""];
4->20 [style = dashed, label="0"];
24->11 [style = bold, label=""];
0->1 [style = bold, label=""];
17->0 [style = solid, label="ze"];
12->22 [style = dashed, label="0"];
7->18 [style = bold, label=""];
9->19 [style = bold, label=""];
17->26 [style = dashed, label="0"];
14->18 [style = bold, label=""];
17->4 [style = solid, label="ze"];
28->27 [style = bold, label=""];
2->22 [style = bold, label=""];
27->25 [style = bold, label=""];
22->11 [style = bold, label=""];
17->20 [style = solid, label="ze"];
7->14 [style = solid, label="i"];
}
