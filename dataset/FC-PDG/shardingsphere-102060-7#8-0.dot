digraph {
24 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUser(),CoreMatchers.is(expected.getUser()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getHostName(),CoreMatchers.is(expected.getHostName()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final AlgorithmSegment actual@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "final DataSourceSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertIs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProps(),expected.getProps())@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getDb(),CoreMatchers.is(expected.getDb()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPort(),CoreMatchers.is(expected.getPort()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual algorithm should exist.\"),actual)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "final ExpectedDataSource expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s algorithm segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "final ExpectedAlgorithm expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),CoreMatchers.is(expected.getName()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"),actual)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s function segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),CoreMatchers.is(expected.getName()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPassword(),CoreMatchers.is(expected.getPassword()))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final ExpectedAlgorithm expected@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProperties(),expected.getProps())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertNull(assertContext.getText(\"Actual algorithm should not exist.\"),actual)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertNull(assertContext.getText(\"Actual dataSource should not exist.\"),actual)@@@4@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUrl(),CoreMatchers.is(expected.getUrl()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
7->23 [style = dotted, label="false"];
7->13 [style = bold, label=""];
22->25 [style = bold, label=""];
1->8 [style = solid, label="assertContext"];
2->20 [style = bold, label=""];
7->10 [style = dotted, label="true"];
14->12 [style = dotted, label="true"];
15->7 [style = bold, label=""];
7->10 [style = bold, label=""];
25->23 [style = bold, label=""];
7->25 [style = dotted, label="false"];
5->1 [style = dotted, label="true"];
15->18 [style = dotted, label="true"];
5->6 [style = dotted, label="true"];
9->8 [style = solid, label="assertContext"];
14->6 [style = dotted, label="true"];
7->0 [style = bold, label=""];
7->11 [style = dotted, label="false"];
21->24 [style = bold, label=""];
7->26 [style = dotted, label="false"];
5->3 [style = dotted, label="true"];
15->16 [style = dotted, label="true"];
7->0 [style = dotted, label="true"];
26->19 [style = bold, label=""];
2->4 [style = bold, label=""];
13->11 [style = bold, label=""];
0->10 [style = dashed, label="0"];
18->2 [style = solid, label="actual"];
14->7 [style = bold, label=""];
20->22 [style = bold, label=""];
15->17 [style = dotted, label="true"];
6->18 [style = dashed, label="0"];
24->26 [style = bold, label=""];
18->0 [style = solid, label="actual"];
23->21 [style = bold, label=""];
4->20 [style = dashed, label="0"];
6->2 [style = solid, label="actual"];
7->24 [style = dotted, label="false"];
7->4 [style = dotted, label="false"];
7->8 [style = dotted, label="false"];
12->13 [style = solid, label="actual"];
7->2 [style = bold, label=""];
2->13 [style = dashed, label="0"];
12->10 [style = solid, label="actual"];
16->7 [style = solid, label="expected"];
7->2 [style = dotted, label="false"];
6->0 [style = solid, label="actual"];
7->20 [style = dotted, label="false"];
4->8 [style = bold, label=""];
5->7 [style = bold, label=""];
11->8 [style = bold, label=""];
7->19 [style = dotted, label="false"];
17->19 [style = solid, label="assertContext"];
7->13 [style = dotted, label="false"];
14->9 [style = dotted, label="true"];
4->11 [style = dashed, label="0"];
7->22 [style = dotted, label="false"];
7->21 [style = dotted, label="false"];
6->7 [style = solid, label="expected"];
3->7 [style = solid, label="expected"];
}
