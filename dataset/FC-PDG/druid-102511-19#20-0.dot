digraph {
70 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(5)))@@@70@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "i < numToAdd@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,currentOffsets)))))@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@54@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
85 [style = filled, label = "Thread.sleep(10)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "SegmentDescriptor desc6 = sd(\"2012/P1D\",0)@@@59@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "maxTotalRows = 3L@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "int i = numToAdd@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@58@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
94 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@55@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
93 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(6)))@@@71@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
82 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "insertData()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "i++@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@67@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@68@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,0L))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,3L,1,0L))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@65@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@70@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2010/P1D\",0)@@@56@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@69@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
75 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(2)))@@@68@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,currentOffsets,ImmutableSet.of())),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,nextOffsets)))))@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "i++@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@59@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@31@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@65@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
73 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2009/P1D\",0)@@@55@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "kafkaProducer.beginTransaction()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@67@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@66@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "kafkaProducer.initTransactions()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "int i = 0@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "kafkaProducer.commitTransaction()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
89 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(checkpoint2.getPartitionSequenceNumberMap(),nextOffsets)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@60@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
71 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@61@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "SegmentDescriptor desc4 = sd(\"2011/P1D\",0)@@@57@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@54@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "kafkaProducer.commitTransaction()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@63@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@56@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "testIncrementalHandOffMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int numToAdd = records.size() - 2@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "kafkaProducer.initTransactions()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "kafkaProducer.beginTransaction()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@66@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getProcessed())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "SegmentDescriptor desc7 = sd(\"2013/P1D\",0)@@@60@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
78 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@31@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@57@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(),currentOffsets)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,1L,1,0L))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))))@@@69@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@61@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "i < records.size()@@@38@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@63@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Thread.sleep(10)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,checkpoint.getPartitionSequenceNumberMap())))))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "SegmentDescriptor desc5 = sd(\"2011/P1D\",1)@@@58@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
83->91 [style = bold, label=""];
54->28 [style = solid, label="nextOffsets"];
68->71 [style = solid, label="desc6"];
56->57 [style = solid, label="desc5"];
90->88 [style = bold, label=""];
70->64 [style = bold, label=""];
39->51 [style = dashed, label="0"];
18->61 [style = dashed, label="0"];
29->30 [style = bold, label=""];
33->74 [style = bold, label=""];
73->71 [style = solid, label="desc2"];
91->16 [style = bold, label=""];
81->78 [style = bold, label=""];
17->35 [style = dotted, label="true"];
20->38 [style = solid, label="desc7"];
16->47 [style = solid, label="task"];
49->51 [style = bold, label=""];
89->45 [style = solid, label="desc2"];
14->28 [style = bold, label=""];
26->40 [style = bold, label=""];
18->23 [style = solid, label="desc4"];
47->1 [style = solid, label="desc3"];
52->59 [style = bold, label=""];
44->86 [style = bold, label=""];
34->50 [style = bold, label=""];
22->82 [style = bold, label=""];
72->74 [style = solid, label="desc7"];
44->3 [style = solid, label="currentOffsets"];
92->43 [style = bold, label=""];
32->63 [style = bold, label=""];
8->0 [style = bold, label=""];
0->53 [style = bold, label=""];
46->21 [style = bold, label=""];
23->33 [style = bold, label=""];
16->49 [style = bold, label=""];
53->67 [style = dashed, label="0"];
71->33 [style = bold, label=""];
61->74 [style = solid, label="desc4"];
50->12 [style = bold, label=""];
13->45 [style = bold, label=""];
56->62 [style = dashed, label="0"];
55->11 [style = bold, label=""];
73->66 [style = bold, label=""];
59->48 [style = solid, label="i"];
84->92 [style = bold, label=""];
47->23 [style = solid, label="desc3"];
59->26 [style = bold, label=""];
65->71 [style = solid, label="desc1"];
18->57 [style = solid, label="desc4"];
28->45 [style = bold, label=""];
11->23 [style = solid, label="desc2"];
17->35 [style = bold, label=""];
80->93 [style = bold, label=""];
73->74 [style = solid, label="desc2"];
16->20 [style = solid, label="task"];
35->31 [style = bold, label=""];
0->77 [style = dashed, label="0"];
42->2 [style = bold, label=""];
65->73 [style = bold, label=""];
68->72 [style = bold, label=""];
93->90 [style = bold, label=""];
60->68 [style = dashed, label="0"];
7->76 [style = dashed, label="0"];
92->85 [style = bold, label=""];
44->3 [style = bold, label=""];
43->16 [style = solid, label="consumerProps"];
22->9 [style = bold, label=""];
2->34 [style = bold, label=""];
51->44 [style = bold, label=""];
21->41 [style = bold, label=""];
60->1 [style = solid, label="desc6"];
43->22 [style = solid, label="currentOffsets"];
5->6 [style = dotted, label="true"];
88->81 [style = bold, label=""];
18->56 [style = bold, label=""];
16->11 [style = solid, label="task"];
46->83 [style = dashed, label="0"];
4->65 [style = bold, label=""];
18->1 [style = solid, label="desc4"];
39->4 [style = bold, label=""];
92->85 [style = dotted, label="true"];
81->78 [style = solid, label="endPartitions"];
26->40 [style = dotted, label="true"];
26->27 [style = bold, label=""];
55->65 [style = dashed, label="0"];
19->44 [style = solid, label="desc1"];
61->71 [style = solid, label="desc4"];
5->6 [style = bold, label=""];
20->23 [style = bold, label=""];
16->55 [style = solid, label="task"];
72->71 [style = bold, label=""];
2->16 [style = solid, label="baseSequenceName"];
57->7 [style = bold, label=""];
13->5 [style = bold, label=""];
11->1 [style = solid, label="desc2"];
1->32 [style = bold, label=""];
16->56 [style = solid, label="task"];
66->74 [style = solid, label="desc3"];
43->10 [style = bold, label=""];
66->61 [style = bold, label=""];
62->68 [style = bold, label=""];
63->77 [style = bold, label=""];
45->46 [style = bold, label=""];
55->1 [style = solid, label="desc1"];
20->23 [style = solid, label="desc7"];
78->84 [style = solid, label="task"];
37->16 [style = bold, label=""];
78->89 [style = solid, label="task"];
9->88 [style = dashed, label="0"];
60->20 [style = bold, label=""];
2->78 [style = solid, label="baseSequenceName"];
21->91 [style = dashed, label="0"];
30->17 [style = bold, label=""];
27->43 [style = bold, label=""];
25->39 [style = bold, label=""];
67->75 [style = bold, label=""];
47->18 [style = bold, label=""];
36->52 [style = bold, label=""];
78->84 [style = bold, label=""];
56->60 [style = bold, label=""];
62->74 [style = solid, label="desc5"];
30->17 [style = solid, label="i"];
12->36 [style = bold, label=""];
12->30 [style = solid, label="numToAdd"];
38->70 [style = dashed, label="0"];
69->2 [style = bold, label=""];
79->87 [style = bold, label=""];
25->49 [style = dashed, label="0"];
85->92 [style = bold, label=""];
55->23 [style = solid, label="desc1"];
62->71 [style = solid, label="desc5"];
82->83 [style = bold, label=""];
48->26 [style = bold, label=""];
68->74 [style = solid, label="desc6"];
60->7 [style = solid, label="desc6"];
6->5 [style = bold, label=""];
32->8 [style = bold, label=""];
78->19 [style = solid, label="task"];
20->1 [style = solid, label="desc7"];
20->72 [style = dashed, label="0"];
19->13 [style = solid, label="desc1"];
90->91 [style = solid, label="startPartitions"];
11->73 [style = dashed, label="0"];
65->74 [style = solid, label="desc1"];
11->47 [style = bold, label=""];
76->70 [style = bold, label=""];
56->1 [style = solid, label="desc5"];
89->44 [style = bold, label=""];
77->67 [style = bold, label=""];
3->10 [style = dashed, label="0"];
5->58 [style = bold, label=""];
44->13 [style = solid, label="currentOffsets"];
54->14 [style = solid, label="nextOffsets"];
31->17 [style = bold, label=""];
75->76 [style = bold, label=""];
19->51 [style = bold, label=""];
23->71 [style = dashed, label="0"];
31->17 [style = solid, label="i"];
15->37 [style = bold, label=""];
48->26 [style = solid, label="i"];
34->79 [style = bold, label=""];
61->62 [style = bold, label=""];
54->14 [style = bold, label=""];
22->21 [style = solid, label="startPartitions"];
30->31 [style = solid, label="i"];
90->78 [style = solid, label="startPartitions"];
19->89 [style = bold, label=""];
10->22 [style = bold, label=""];
47->53 [style = solid, label="desc3"];
80->78 [style = solid, label="consumerProps"];
44->41 [style = solid, label="currentOffsets"];
40->48 [style = bold, label=""];
89->44 [style = solid, label="desc2"];
15->81 [style = dashed, label="0"];
16->18 [style = solid, label="task"];
53->57 [style = bold, label=""];
26->48 [style = dotted, label="true"];
74->32 [style = bold, label=""];
16->49 [style = solid, label="task"];
44->21 [style = solid, label="currentOffsets"];
56->23 [style = solid, label="desc5"];
33->1 [style = bold, label=""];
16->60 [style = solid, label="task"];
54->41 [style = solid, label="nextOffsets"];
94->2 [style = bold, label=""];
43->10 [style = solid, label="currentOffsets"];
1->74 [style = dashed, label="0"];
24->54 [style = bold, label=""];
17->31 [style = dotted, label="true"];
7->38 [style = bold, label=""];
17->24 [style = bold, label=""];
58->29 [style = bold, label=""];
47->66 [style = dashed, label="0"];
9->15 [style = bold, label=""];
55->8 [style = solid, label="desc1"];
12->26 [style = solid, label="numToAdd"];
72->71 [style = solid, label="desc7"];
11->0 [style = solid, label="desc2"];
87->80 [style = bold, label=""];
3->13 [style = bold, label=""];
22->16 [style = solid, label="startPartitions"];
4->55 [style = bold, label=""];
41->25 [style = bold, label=""];
86->13 [style = bold, label=""];
51->19 [style = dotted, label="true"];
59->26 [style = solid, label="i"];
66->71 [style = solid, label="desc3"];
51->19 [style = bold, label=""];
37->16 [style = solid, label="endPartitions"];
60->23 [style = solid, label="desc6"];
}
