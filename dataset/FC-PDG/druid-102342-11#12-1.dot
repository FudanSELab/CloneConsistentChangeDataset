digraph {
27 [style = filled, label = "replayAll()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(ALL_RECORDS))@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "EasyMock.expect(getRecordsResult1.getRecords()).andReturn(SHARD1_RECORDS).once()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "i++@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(getShardIteratorResult1.getShardIterator()).andReturn(SHARD1_ITERATOR).anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "recordSupplier.start()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(getRecordsResult0.getNextShardIterator()).andReturn(null).anyTimes()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "verifyAll()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100,true)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "recordSupplier.seekToEarliest(partitions)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(partitions,recordSupplier.getAssignment())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(ALL_RECORDS.subList(1,2)))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "StreamPartition<String> shard0Partition = StreamPartition.of(STREAM,SHARD_ID0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID0),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 9@@@26@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<OrderedPartitionableRecord<String,String>> polledRecords = cleanRecords(recordSupplier.poll(POLL_TIMEOUT_MILLIS))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expect(getRecordsResult0.getMillisBehindLatest()).andReturn(SHARD0_LAG_MILLIS).once()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(getRecordsResult1.getNextShardIterator()).andReturn(null).anyTimes()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "recordsPerFetch = 100@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expect(getShardIteratorResult0.getShardIterator()).andReturn(SHARD0_ITERATOR).anyTimes()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "EasyMock.expect(getRecordsResult0.getRecords()).andReturn(SHARD0_RECORDS).once()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testPollDeaggregate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "recordSupplier.assign(partitions)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "EasyMock.expect(getRecordsResult1.getRecords()).andReturn(SHARD1_RECORDS.subList(2,SHARD1_RECORDS.size())).once()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "recordSupplier.seek(shard1Partition,SHARD1_RECORDS.get(2).getSequenceNumber())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testSeek['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(SHARDS_LAG_MILLIS,recordSupplier.getPartitionResourcesTimeLag())@@@31@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.expect(getRecordsResult0.getRecords()).andReturn(SHARD0_RECORDS.subList(1,SHARD0_RECORDS.size())).once()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(ALL_RECORDS.subList(4,12)))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "StreamPartition<String> shard1Partition = StreamPartition.of(STREAM,SHARD_ID1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "recordSupplier.seek(shard0Partition,SHARD0_RECORDS.get(1).getSequenceNumber())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Thread.sleep(100)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(9,polledRecords.size())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "int i = 0@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 12@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(StreamPartition.of(STREAM,SHARD_ID0),StreamPartition.of(STREAM,SHARD_ID1))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testSeek['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID1),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD1_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult1).anyTimes()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.expect(getRecordsResult1.getMillisBehindLatest()).andReturn(SHARD1_LAG_MILLIS).once()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard0Partition,shard1Partition)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,true,100,5000,5000,60000,100,true)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD0_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult0).anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "List<OrderedPartitionableRecord<String,String,ByteEntity>> polledRecords = cleanRecords(recordSupplier.poll(POLL_TIMEOUT_MILLIS))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(SHARDS_LAG_MILLIS,recordSupplier.getPartitionResourcesTimeLag())@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->39 [style = bold, label=""];
10->22 [style = bold, label=""];
31->33 [style = dashed, label="0"];
14->24 [style = bold, label=""];
15->38 [style = bold, label=""];
20->17 [style = bold, label=""];
39->16 [style = bold, label=""];
28->35 [style = solid, label="recordsPerFetch"];
24->2 [style = bold, label=""];
8->32 [style = bold, label=""];
5->33 [style = bold, label=""];
43->39 [style = solid, label="i"];
15->25 [style = bold, label=""];
22->37 [style = bold, label=""];
35->42 [style = bold, label=""];
44->35 [style = bold, label=""];
31->13 [style = bold, label=""];
23->4 [style = solid, label="shard0Partition"];
27->44 [style = bold, label=""];
23->19 [style = solid, label="shard0Partition"];
25->5 [style = solid, label="i"];
43->1 [style = solid, label="i"];
18->12 [style = bold, label=""];
5->15 [style = bold, label=""];
36->32 [style = bold, label=""];
17->30 [style = bold, label=""];
32->7 [style = bold, label=""];
5->39 [style = dashed, label="0"];
4->32 [style = solid, label="partitions"];
38->31 [style = bold, label=""];
42->36 [style = bold, label=""];
32->43 [style = bold, label=""];
1->39 [style = solid, label="i"];
39->16 [style = dotted, label="true"];
2->10 [style = bold, label=""];
44->42 [style = solid, label="partitions"];
23->0 [style = bold, label=""];
33->13 [style = bold, label=""];
5->15 [style = dotted, label="true"];
6->37 [style = dashed, label="0"];
17->31 [style = dashed, label="0"];
6->29 [style = bold, label=""];
16->25 [style = solid, label="i"];
41->28 [style = bold, label=""];
44->36 [style = solid, label="partitions"];
9->28 [style = bold, label=""];
34->28 [style = bold, label=""];
19->1 [style = bold, label=""];
28->21 [style = bold, label=""];
40->11 [style = bold, label=""];
16->5 [style = solid, label="i"];
23->44 [style = dashed, label="0"];
5->31 [style = bold, label=""];
20->38 [style = dashed, label="0"];
30->3 [style = bold, label=""];
16->1 [style = bold, label=""];
0->4 [style = bold, label=""];
1->16 [style = bold, label=""];
0->4 [style = solid, label="shard1Partition"];
5->25 [style = dotted, label="true"];
44->38 [style = solid, label="partitions"];
21->14 [style = bold, label=""];
16->5 [style = bold, label=""];
25->15 [style = bold, label=""];
29->40 [style = dashed, label="0"];
4->8 [style = bold, label=""];
22->6 [style = bold, label=""];
25->5 [style = bold, label=""];
27->23 [style = bold, label=""];
39->25 [style = bold, label=""];
28->8 [style = solid, label="recordsPerFetch"];
0->7 [style = solid, label="shard1Partition"];
39->1 [style = dotted, label="true"];
43->39 [style = bold, label=""];
7->19 [style = bold, label=""];
12->27 [style = bold, label=""];
7->36 [style = dashed, label="0"];
29->11 [style = bold, label=""];
37->40 [style = bold, label=""];
11->26 [style = bold, label=""];
26->18 [style = bold, label=""];
13->20 [style = bold, label=""];
}
