digraph {
7 [style = filled, label = "Assert.assertEquals(ValueType.DOUBLE,agg.getType())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(ValueType.STRING_ARRAY,agg.getCombiningFactory().getType())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testStringArrayType['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(ValueType.DOUBLE_ARRAY,agg.getCombiningFactory().getType())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\"expr_agg_name\",ImmutableSet.of(\"some_column\",\"some_other_column\"),null,\"0.0\",\"<DOUBLE>((\",\"__acc + some_column + some_other_column\",\"array_set_add(__acc, expr_agg_name)\",null,null,new HumanReadableBytes(2048),TestExprMacroTable.INSTANCE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(ValueType.STRING_ARRAY,agg.getFinalizedType())@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(ValueType.DOUBLE_ARRAY,agg.getFinalizedType())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testDoubleArrayType['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\"expr_agg_name\",ImmutableSet.of(\"some_column\",\"some_other_column\"),null,\"''\",\"<STRING>((\",null,\"concat(__acc, some_column, some_other_column)\",\"array_set_add(__acc, expr_agg_name)\",null,null,new HumanReadableBytes(2048),TestExprMacroTable.INSTANCE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testStringArrayType['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\"expr_agg_name\",ImmutableSet.of(\"some_column\",\"some_other_column\"),null,\"''\",\"<STRING>((\",\"concat(__acc, some_column, some_other_column)\",\"array_set_add(__acc, expr_agg_name)\",null,null,new HumanReadableBytes(2048),TestExprMacroTable.INSTANCE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(ValueType.STRING,agg.getType())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
3->8 [style = dashed, label="0"];
11->8 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
10->9 [style = bold, label=""];
7->11 [style = bold, label=""];
0->9 [style = dashed, label="0"];
0->5 [style = dashed, label="0"];
9->7 [style = bold, label=""];
2->7 [style = dashed, label="0"];
1->11 [style = dashed, label="0"];
2->1 [style = bold, label=""];
4->0 [style = bold, label=""];
0->2 [style = bold, label=""];
}
