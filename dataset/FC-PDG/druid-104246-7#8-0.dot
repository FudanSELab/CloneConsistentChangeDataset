digraph {
8 [style = filled, label = "FillCapacityWorkerSelectStrategy strategy = new FillCapacityWithAffinityWorkerSelectStrategy(new AffinityConfig(ImmutableMap.of(\"foo\",ImmutableSet.of(\"localhost\")),false))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(\"localhost\",worker.getWorker().getHost())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ImmutableWorkerInfo worker = strategy.findWorkerForTask(new RemoteTaskRunnerConfig(),ImmutableMap.of(\"lhost\",new ImmutableWorkerInfo(new Worker(\"http\",\"lhost\",\"lhost\",5,\"v1\",WorkerConfig.DEFAULT_CATEGORY),5,new HashSet<>(),new HashSet<>(),DateTimes.nowUtc()),\"localhost\",new ImmutableWorkerInfo(new Worker(\"http\",\"localhost\",\"localhost\",10,\"v1\",WorkerConfig.DEFAULT_CATEGORY),5,new HashSet<>(),new HashSet<>(),DateTimes.nowUtc())),new NoopTask(null,null,null,1,0,null,null,null){@Override public String getDataSource(){return \"foo\"}})@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final EqualDistributionWorkerSelectStrategy strategy = new EqualDistributionWorkerSelectStrategy(null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ImmutableWorkerInfo worker = strategy.findWorkerForTask(new RemoteTaskRunnerConfig(),ImmutableMap.of(\"localhost\",new ImmutableWorkerInfo(new Worker(\"http\",\"localhost\",\"localhost\",1,\"v1\"),0,new HashSet<>(),new HashSet<>(),DateTimes.nowUtc())),new NoopTask(null,null,null,1,0,null,null,null))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testFindWorkerForTaskWhenSameCurrCapacityUsed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testIsolation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertNull(worker)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testFindWorkerForTaskWhenSameCurrCapacityUsed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "ImmutableWorkerInfo worker = strategy.findWorkerForTask(new RemoteTaskRunnerConfig(),ImmutableMap.of(\"lhost\",new ImmutableWorkerInfo(new Worker(\"http\",\"lhost\",\"lhost\",5,\"v1\"),5,new HashSet<>(),new HashSet<>(),DateTimes.nowUtc()),\"localhost\",new ImmutableWorkerInfo(new Worker(\"http\",\"localhost\",\"localhost\",10,\"v1\"),5,new HashSet<>(),new HashSet<>(),DateTimes.nowUtc())),new NoopTask(null,null,null,1,0,null,null,null){@Override public String getDataSource(){return \"foo\"}})@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->3 [style = bold, label=""];
3->5 [style = dashed, label="0"];
0->8 [style = dashed, label="0"];
5->2 [style = bold, label=""];
9->6 [style = bold, label=""];
1->0 [style = bold, label=""];
3->2 [style = bold, label=""];
3->9 [style = dashed, label="0"];
7->8 [style = bold, label=""];
9->6 [style = solid, label="worker"];
4->0 [style = bold, label=""];
0->5 [style = bold, label=""];
8->9 [style = bold, label=""];
}
