digraph {
20 [style = filled, label = "blockWhileInFlight()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(rowCountForTraceByServiceSpan(storage)).isGreaterThanOrEqualTo(120L)@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(rowCountForTraceByServiceSpan(storage)).isGreaterThanOrEqualTo(4L)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "accept(trace)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "trace(0( = TestObjects.CLIENT_SPAN.toBuilder().kind(Span.Kind.SERVER).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String testSuffix = testSuffix(testInfo)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "IntStream.range(0,100).forEach(null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertThat(rowCountForTraceByServiceSpan(storage)).isGreaterThanOrEqualTo(4L)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "withoutStrictTraceId.accept(asList(trace)).execute()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertThat(rowCountForTraceByServiceSpan(storage)).isGreaterThanOrEqualTo(120L)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "skipsRedundantIndexingInATrace['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Span(( trace = new Span((((@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "accept(storage.spanConsumer(),trace)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(getTagValue(storage,\"environment\")).isEqualTo(\"dev\")@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "trace(0( = newClientSpan(testSuffix).toBuilder().kind(SERVER).build()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "IntStream.range(0,100).forEach(null)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "TestInfo testInfo@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "CassandraSpanConsumer withoutStrictTraceId = new CassandraSpanConsumer(storage.session(),storage.metadata(),false,storage.searchEnabled,storage.autocompleteKeys,storage.autocompleteTtl,storage.autocompleteCardinality)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "IntStream.range(0,100).forEach(null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(rowCountForTraceByServiceSpan(storage)).isGreaterThanOrEqualTo(120L)@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "skipsRedundantIndexingInATrace['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(rowCountForTraceByServiceSpan(storage)).isGreaterThanOrEqualTo(4L)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "insertTags_SelectTags_CalculateCount['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(rowCountForTraceByServiceSpan(storage)).isGreaterThanOrEqualTo(120L)@@@12@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(rowCountForTags(storage)).isEqualTo(1L)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17->8 [style = bold, label=""];
5->10 [style = bold, label=""];
0->9 [style = bold, label=""];
16->13 [style = bold, label=""];
14->19 [style = dotted, label="true"];
1->8 [style = bold, label=""];
4->16 [style = dashed, label="0"];
24->2 [style = bold, label=""];
22->9 [style = bold, label=""];
8->3 [style = bold, label=""];
12->20 [style = bold, label=""];
4->9 [style = solid, label="trace"];
3->6 [style = bold, label=""];
2->4 [style = bold, label=""];
0->22 [style = dashed, label="0"];
11->18 [style = bold, label=""];
4->0 [style = bold, label=""];
3->6 [style = solid, label="withoutStrictTraceId"];
6->12 [style = dashed, label="0"];
9->23 [style = bold, label=""];
6->5 [style = bold, label=""];
13->17 [style = bold, label=""];
16->17 [style = solid, label="trace"];
23->21 [style = bold, label=""];
7->2 [style = bold, label=""];
9->17 [style = dashed, label="0"];
19->15 [style = solid, label="testInfo"];
0->13 [style = dashed, label="0"];
15->4 [style = bold, label=""];
4->6 [style = solid, label="trace"];
14->15 [style = bold, label=""];
9->1 [style = bold, label=""];
1->23 [style = dashed, label="0"];
4->22 [style = bold, label=""];
4->16 [style = bold, label=""];
20->11 [style = bold, label=""];
6->12 [style = bold, label=""];
}
