digraph {
8 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(\"testProperty3\"),\"100\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(jobExecutionPlanDag.getNodes().size() == 1,\"Exepected 1 executor for FlowSpec.\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Spec spec = dagNode.getValue().getJobSpec()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "JobSpec jobSpec = (JobSpec)spec@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertNotNull(jobExecutionPlanDag,\"Expected non null dag.\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY),TEST_SOURCE_NAME)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Dag.DagNode<JobExecutionPlan> dagNode = jobExecutionPlanDag.getStartNodes().get(0)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testCompilerWithTemplateCatalog['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.FLOW_GROUP_KEY),TEST_FLOW_GROUP)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertTrue(!jobSpec.getConfig().hasPath(\"testProperty3\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(\"testProperty1\"),\"testValue1\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertTrue(!jobSpec.getConfig().hasPath(\"testProperty2\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(jobSpec.getConfig().hasPath(ConfigurationKeys.FLOW_EXECUTION_ID_KEY))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(jobExecutionPlanDag.getChildren(dagNode).size(),0)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Dag<JobExecutionPlan> jobExecutionPlanDag = this.compilerWithTemplateCalague.compileFlow(flowSpec)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Dag<JobExecutionPlan> jobExecutionPlanDag = this.compilerWithoutTemplateCalague.compileFlow(flowSpec)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.FLOW_NAME_KEY),TEST_FLOW_NAME)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(jobExecutionPlanDag.getStartNodes().size(),1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertTrue(!jobSpec.getConfig().hasPath(\"testProperty1\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "FlowSpec flowSpec = initFlowSpec()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(spec instanceof JobSpec,\"Expected JobSpec compiled from FlowSpec.\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testCompilerWithoutTemplateCatalog['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertNull(jobExecutionPlanDag.getChildren(dagNode))@@@22@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(\"testProperty2\"),\"test.Value1\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertFalse(jobSpec.getConfig().hasPath(ConfigurationKeys.JOB_SCHEDULE_KEY))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testCompilerWithTemplateCatalog['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.JOB_GROUP_KEY),TEST_FLOW_GROUP)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.JOB_NAME_KEY),TEST_FLOW_NAME)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->15 [style = solid, label="spec"];
5->8 [style = bold, label=""];
15->23 [style = bold, label=""];
26->10 [style = solid, label="jobExecutionPlanDag"];
7->11 [style = bold, label=""];
0->26 [style = bold, label=""];
9->0 [style = bold, label=""];
21->0 [style = bold, label=""];
23->27 [style = bold, label=""];
26->10 [style = bold, label=""];
6->20 [style = dashed, label="0"];
25->13 [style = bold, label=""];
1->26 [style = dashed, label="0"];
24->0 [style = bold, label=""];
3->14 [style = bold, label=""];
18->19 [style = bold, label=""];
18->6 [style = solid, label="dagNode"];
12->20 [style = bold, label=""];
4->18 [style = bold, label=""];
16->23 [style = dashed, label="0"];
19->2 [style = bold, label=""];
15->16 [style = bold, label=""];
12->6 [style = bold, label=""];
1->10 [style = solid, label="jobExecutionPlanDag"];
14->7 [style = bold, label=""];
5->27 [style = dashed, label="0"];
17->12 [style = bold, label=""];
22->18 [style = bold, label=""];
13->3 [style = bold, label=""];
19->2 [style = solid, label="spec"];
0->1 [style = bold, label=""];
0->1 [style = solid, label="flowSpec"];
2->15 [style = bold, label=""];
10->4 [style = bold, label=""];
16->5 [style = bold, label=""];
11->17 [style = bold, label=""];
8->25 [style = dashed, label="0"];
1->10 [style = bold, label=""];
4->22 [style = bold, label=""];
27->25 [style = bold, label=""];
8->13 [style = bold, label=""];
0->26 [style = solid, label="flowSpec"];
}
