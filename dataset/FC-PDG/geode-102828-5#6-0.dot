digraph {
8 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "sn.updateLoad(l1,\"\",new ServerLoad(10,1,1,1))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertNull(sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ServerLocation l2 = new ServerLocation(\"localhost\",2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(Collections.singletonList(l2),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "sn.removeServer(l1,\"\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119571),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "LocatorLoadSnapshot sn = new LocatorLoadSnapshot()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "sn.updateLoad(l2,\"\",new ServerLoad(100,1,1,1))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "sn.addServer(l1,\"\",new String((((,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "sn.removeServer(l1)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "sn.addServer(l1,\"\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1194ff,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119607),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11961a),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119599),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,-1))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "sn.addServer(l1,new String((((,new ServerLoad(1,1,1,1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "sn.addServer(l2,\"\",new String((((,new ServerLoad(100,.2f,10,.2f),LOAD_POLL_INTERVAL)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "sn.addServer(l2,new String((((,new ServerLoad(100,.2f,10,.2f))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1194af),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testRemoveServer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertNotNull(sn.getServerForConnection(null,Collections.EMPTY_SET))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1195ae),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "sn.addServer(l2,\"\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119511,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ServerLocation l1 = new ServerLocation(\"localhost\",1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "testGroups['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1195c3),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "sn.removeServer(l1,\"\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119585),sn.getServersForQueue(\"c\",Collections.EMPTY_SET,-1))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testRemoveServer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8->10 [style = bold, label=""];
29->15 [style = bold, label=""];
9->27 [style = solid, label="l2"];
32->21 [style = bold, label=""];
5->7 [style = solid, label="l1"];
26->32 [style = bold, label=""];
9->11 [style = bold, label=""];
16->27 [style = bold, label=""];
5->9 [style = bold, label=""];
28->30 [style = bold, label=""];
34->20 [style = bold, label=""];
11->14 [style = bold, label=""];
0->6 [style = bold, label=""];
22->16 [style = bold, label=""];
5->10 [style = solid, label="l1"];
9->0 [style = solid, label="l2"];
5->13 [style = solid, label="l1"];
35->22 [style = bold, label=""];
5->27 [style = solid, label="l1"];
9->32 [style = solid, label="l2"];
5->29 [style = solid, label="l1"];
30->23 [style = bold, label=""];
5->15 [style = solid, label="l1"];
5->8 [style = solid, label="l1"];
1->3 [style = bold, label=""];
9->18 [style = solid, label="l2"];
7->11 [style = dashed, label="0"];
9->29 [style = solid, label="l2"];
15->33 [style = bold, label=""];
5->16 [style = solid, label="l1"];
9->22 [style = solid, label="l2"];
6->34 [style = dashed, label="0"];
5->25 [style = solid, label="l1"];
9->2 [style = solid, label="l2"];
9->7 [style = bold, label=""];
9->33 [style = solid, label="l2"];
5->19 [style = solid, label="l1"];
5->21 [style = solid, label="l1"];
9->10 [style = solid, label="l2"];
9->26 [style = solid, label="l2"];
4->0 [style = bold, label=""];
9->14 [style = solid, label="l2"];
25->31 [style = bold, label=""];
9->24 [style = solid, label="l2"];
3->5 [style = bold, label=""];
9->31 [style = solid, label="l2"];
9->16 [style = solid, label="l2"];
2->14 [style = dashed, label="0"];
10->13 [style = bold, label=""];
7->2 [style = bold, label=""];
19->26 [style = bold, label=""];
5->4 [style = solid, label="l1"];
9->25 [style = bold, label=""];
23->19 [style = bold, label=""];
0->33 [style = dashed, label="0"];
5->11 [style = solid, label="l1"];
24->17 [style = bold, label=""];
9->34 [style = solid, label="l2"];
10->4 [style = bold, label=""];
7->25 [style = dashed, label="0"];
14->8 [style = bold, label=""];
12->3 [style = bold, label=""];
5->30 [style = solid, label="l1"];
31->28 [style = bold, label=""];
9->6 [style = solid, label="l2"];
27->29 [style = bold, label=""];
21->35 [style = bold, label=""];
5->35 [style = solid, label="l1"];
20->24 [style = bold, label=""];
9->23 [style = solid, label="l2"];
4->13 [style = dashed, label="0"];
33->34 [style = bold, label=""];
17->18 [style = bold, label=""];
2->8 [style = bold, label=""];
13->0 [style = bold, label=""];
36->3 [style = bold, label=""];
}
