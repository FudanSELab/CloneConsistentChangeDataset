digraph {
8 [style = filled, label = "forGraph_breadthFirst_iterableIsLazy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('a','a','b','b')@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Iterable<Character> result = Traverser.forGraph(graph).breadthFirst('a')@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEqualCharNodes(Iterables.limit(result,2),\"ab\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('a','b','d')@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('a')@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('a','a','b')@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEqualCharNodes(Iterables.limit(result,2),\"ab\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('a','a','b','b','d','d')@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "forGraph_depthFirstPreOrder_iterableIsLazy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('a','a','a','b','b')@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('a','b')@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "forGraph_breadthFirst_iterableIsLazy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->13 [style = dashed, label="0"];
0->3 [style = bold, label=""];
5->0 [style = solid, label="result"];
0->9 [style = bold, label=""];
2->5 [style = bold, label=""];
5->6 [style = solid, label="result"];
0->12 [style = bold, label=""];
3->6 [style = bold, label=""];
4->2 [style = bold, label=""];
1->10 [style = dashed, label="0"];
12->6 [style = bold, label=""];
11->2 [style = bold, label=""];
9->6 [style = bold, label=""];
2->13 [style = bold, label=""];
6->1 [style = bold, label=""];
3->12 [style = dashed, label="0"];
5->0 [style = bold, label=""];
8->2 [style = bold, label=""];
3->9 [style = dashed, label="0"];
13->0 [style = solid, label="result"];
6->10 [style = bold, label=""];
13->6 [style = solid, label="result"];
1->7 [style = dashed, label="0"];
6->7 [style = bold, label=""];
13->0 [style = bold, label=""];
}
