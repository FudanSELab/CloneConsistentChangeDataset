digraph {
16 [style = filled, label = "assertResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertLoadTablesOracle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "when(databaseType.getName()).thenReturn(\"Oracle\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TableMetaData tableMetaData = actual.values().iterator().next()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Map<String,TableMetaData> actual = loader.load(tableNames,shardingRule,new SchemaBuilderMaterials(databaseType,Collections.singletonMap(\"ds\",dataSource),rules,props))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "tableNames.add(TABLE_NAME)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(tableMetaData.getColumnMetaData(2).getName(),is(\"pwd_plain\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Collection<String> tableNames = new LinkedList<>()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Map<String,TableMetaData> actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertLoadTablesOracle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Map<String,TableMetaData> actual = loader.load(tableNames,shardingRule,new SchemaBuilderMaterials(databaseType,Collections.singletonMap(\"ds\",dataSource),rules,props),new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors() * 2,Runtime.getRuntime().availableProcessors() * 2,0L,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<>(),new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"ShardingSphere-SchemaBuilder-%d\").build()))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(tableMetaData.getColumnMetaData(1).getName(),is(\"pwd_cipher\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder)OrderedSPIRegistry.getRegisteredServices(,rules).get(shardingRule)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(tableMetaData.getColumnMetaData(0).getName(),is(\"id\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "IndexMetaData indexMetaData = tableMetaData.getIndexes().values().iterator().next()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertResult(actual)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(indexMetaData.getName(),is(\"order_index_t_order_t_order_0\"))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4->7 [style = solid, label="actual"];
3->1 [style = bold, label=""];
5->10 [style = solid, label="tableNames"];
1->4 [style = solid, label="rules"];
12->15 [style = bold, label=""];
18->17 [style = bold, label=""];
10->7 [style = bold, label=""];
4->7 [style = bold, label=""];
6->2 [style = bold, label=""];
10->7 [style = solid, label="actual"];
0->10 [style = bold, label=""];
1->6 [style = bold, label=""];
13->12 [style = bold, label=""];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
0->4 [style = bold, label=""];
5->4 [style = solid, label="tableNames"];
16->14 [style = bold, label=""];
14->18 [style = bold, label=""];
17->13 [style = bold, label=""];
9->1 [style = bold, label=""];
4->10 [style = dashed, label="0"];
16->11 [style = dotted, label="true"];
1->10 [style = solid, label="rules"];
2->8 [style = bold, label=""];
}
