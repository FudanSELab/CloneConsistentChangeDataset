digraph {
30 [style = filled, label = "List<String> transformerClassNames@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "HoodieDeltaStreamer deltaStreamer = new HoodieDeltaStreamer(TestHelpers.makeConfig(tableBasePath,WriteOperationType.INSERT,.getName(),transformerClassNames,PROPS_FILENAME_TEST_CSV,false,useSchemaProvider,1000,false,null,null,sourceOrderingField),jsc)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "int totalExpectedRecords = parquetRecords + ((autoResetToLatest)? 0: JSON_KAFKA_NUM_RECORDS)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TestHelpers.assertRecordCount(totalExpectedRecords,tableBasePath + \"/*/*.parquet\",sqlContext)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "deltaStreamer.shutdownGracefully()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "HoodieDeltaStreamer deltaStreamer = new HoodieDeltaStreamer(TestHelpers.makeConfig(tableBasePath,WriteOperationType.INSERT,.getName(),Collections.EMPTY_LIST,PROPS_FILENAME_TEST_PARQUET,false,false,100000,false,null,null,\"timestamp\"),jsc)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFilesDfsToKafka\" + testNum@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testCsvDFSSource['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "boolean hasHeader@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "deltaStreamer.sync()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "prepareJsonKafkaDFSFiles(JSON_KAFKA_NUM_RECORDS,true,topicName)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "deltaStreamer = new HoodieDeltaStreamer(TestHelpers.makeConfig(tableBasePath,WriteOperationType.UPSERT,.getName(),Collections.EMPTY_LIST,PROPS_FILENAME_TEST_JSON_KAFKA,false,true,100000,false,null,null,\"timestamp\"),jsc)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testDeltaStreamerTransitionFromParquetToKafkaSource['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "prepareParquetDFSSource(true,false,\"source_uber.avsc\",\"target_uber.avsc\",PROPS_FILENAME_TEST_PARQUET,PARQUET_SOURCE_ROOT)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "testDeltaStreamerTransitionFromParquetToKafkaSource['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testNum++@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "prepareJsonKafkaDFSSource(PROPS_FILENAME_TEST_JSON_KAFKA,autoResetToLatest? \"latest\": \"earliest\",topicName)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "totalExpectedRecords += 20@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "String sourceOrderingField = (hasHeader || useSchemaProvider)? \"timestamp\": \"_c0\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "prepareParquetDFSSource(true,false,\"source_uber.avsc\",\"target_uber.avsc\",PROPS_FILENAME_TEST_PARQUET,PARQUET_SOURCE_ROOT,false)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "deltaStreamer.sync()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "boolean autoResetToLatest@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testNum++@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "prepareParquetDFSFiles(parquetRecords,\"1.parquet\",true,HoodieTestDataGenerator.TRIP_SCHEMA,HoodieTestDataGenerator.AVRO_TRIP_SCHEMA)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "String tableBasePath = dfsBasePath + \"/test_csv_table\" + testNum@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "char sep@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "deltaStreamer.sync()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "TestHelpers.assertRecordCount(CSV_NUM_RECORDS,tableBasePath + \"/*/*.parquet\",sqlContext)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "prepareJsonKafkaDFSFiles(20,false,topicName)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String tableBasePath = dfsBasePath + \"/test_dfs_to_kakfa\" + testNum@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestHelpers.assertRecordCount(totalExpectedRecords,tableBasePath + \"/*/*.parquet\",sqlContext)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "prepareCsvDFSSource(hasHeader,sep,useSchemaProvider,transformerClassNames != null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "int parquetRecords = 10@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "boolean useSchemaProvider@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "topicName = \"topic\" + testNum@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestHelpers.assertRecordCount(parquetRecords,tableBasePath + \"/*/*.parquet\",sqlContext)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "prepareParquetDFSFiles(parquetRecords,PARQUET_SOURCE_ROOT,FIRST_PARQUET_FILE_NAME,true,HoodieTestDataGenerator.TRIP_SCHEMA,HoodieTestDataGenerator.AVRO_TRIP_SCHEMA)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->10 [style = bold, label=""];
16->20 [style = solid, label="totalExpectedRecords"];
15->2 [style = bold, label=""];
19->18 [style = bold, label=""];
16->13 [style = bold, label=""];
27->36 [style = bold, label=""];
3->25 [style = dashed, label="0"];
8->15 [style = bold, label=""];
1->35 [style = dashed, label="0"];
36->31 [style = solid, label="sourceOrderingField"];
20->9 [style = bold, label=""];
24->15 [style = bold, label=""];
35->6 [style = bold, label=""];
2->6 [style = bold, label=""];
23->22 [style = dotted, label="true"];
14->24 [style = solid, label="PARQUET_SOURCE_ROOT"];
15->1 [style = solid, label="tableBasePath"];
15->11 [style = solid, label="tableBasePath"];
11->21 [style = bold, label=""];
36->31 [style = bold, label=""];
33->36 [style = solid, label="useSchemaProvider"];
15->19 [style = solid, label="tableBasePath"];
1->0 [style = bold, label=""];
27->35 [style = solid, label="tableBasePath"];
4->10 [style = solid, label="topicName"];
30->31 [style = solid, label="transformerClassNames"];
29->34 [style = bold, label=""];
12->19 [style = solid, label="totalExpectedRecords"];
32->34 [style = solid, label="hasHeader"];
29->26 [style = dotted, label="true"];
8->24 [style = dashed, label="0"];
32->36 [style = solid, label="hasHeader"];
7->3 [style = bold, label=""];
14->7 [style = bold, label=""];
4->18 [style = solid, label="topicName"];
21->12 [style = bold, label=""];
23->14 [style = bold, label=""];
15->2 [style = solid, label="tableBasePath"];
7->25 [style = solid, label="parquetRecords"];
6->1 [style = bold, label=""];
22->12 [style = solid, label="autoResetToLatest"];
25->24 [style = bold, label=""];
28->35 [style = bold, label=""];
7->1 [style = solid, label="parquetRecords"];
7->3 [style = solid, label="parquetRecords"];
22->10 [style = solid, label="autoResetToLatest"];
33->31 [style = solid, label="useSchemaProvider"];
14->25 [style = solid, label="PARQUET_SOURCE_ROOT"];
15->20 [style = solid, label="tableBasePath"];
4->5 [style = solid, label="topicName"];
0->4 [style = bold, label=""];
17->14 [style = bold, label=""];
3->8 [style = bold, label=""];
7->12 [style = solid, label="parquetRecords"];
26->34 [style = solid, label="sep"];
29->30 [style = dotted, label="true"];
17->22 [style = dotted, label="true"];
13->20 [style = bold, label=""];
7->25 [style = bold, label=""];
30->34 [style = solid, label="transformerClassNames"];
29->33 [style = dotted, label="true"];
31->28 [style = bold, label=""];
12->19 [style = bold, label=""];
14->8 [style = solid, label="PARQUET_SOURCE_ROOT"];
4->5 [style = bold, label=""];
29->32 [style = dotted, label="true"];
27->31 [style = solid, label="tableBasePath"];
33->34 [style = solid, label="useSchemaProvider"];
34->27 [style = bold, label=""];
10->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
