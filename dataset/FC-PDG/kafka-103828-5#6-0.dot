digraph {
19 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting next DeleteTopics request\")@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "env.kafkaClient().prepareResponse(expectCreatePartitionsRequestWithTopics(\"topic1\",\"topic2\",\"topic3\"),prepareCreatePartitionsResponse(1000,createPartitionsTopicResult(\"topic1\",Errors.NONE),createPartitionsTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED),createPartitionsTopicResult(\"topic3\",Errors.TOPIC_ALREADY_EXISTS)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "env.kafkaClient().prepareResponse(expectDeleteTopicsRequestWithTopicIds(topicId1,topicId2,topicId3),prepareDeleteTopicsResponse(1000,deletableTopicResultWithId(topicId1,Errors.NONE),deletableTopicResultWithId(topicId2,Errors.THROTTLING_QUOTA_EXCEEDED),deletableTopicResultWithId(topicId3,Errors.UNKNOWN_TOPIC_ID)))@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "env.kafkaClient().prepareResponse(expectDeleteTopicsRequestWithTopicIds(topicId2),prepareDeleteTopicsResponse(1000,deletableTopicResultWithId(topicId2,Errors.THROTTLING_QUOTA_EXCEEDED)))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "time.sleep(defaultApiTimeout + 1)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "e = TestUtils.assertFutureThrows(resultIds.values().get(topicId2),)@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertNull(result.values().get(\"topic1\").get())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "TestUtils.assertFutureThrows(resultIds.values().get(topicId3),)@@@29@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertEquals(0,e.throttleTimeMs())@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "time.sleep(defaultApiTimeout + 1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "CreatePartitionsResult result = env.adminClient().createPartitions(counts,new CreatePartitionsOptions().retryOnQuotaViolation(true))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting DeleteTopics requests\")@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "MockTime time = new MockTime()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "DeleteTopicsWithIdsResult resultIds = env.adminClient().deleteTopicsWithIds(asList(topicId1,topicId2,topicId3),new DeleteTopicsOptions().retryOnQuotaViolation(true))@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "counts.put(\"topic1\",NewPartitions.increaseTo(1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting DeleteTopics requests\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting next CreatePartitions request\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "env.kafkaClient().prepareResponse(expectCreatePartitionsRequestWithTopics(\"topic2\"),prepareCreatePartitionsResponse(1000,createPartitionsTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "env.kafkaClient().setNodeApiVersions(NodeApiVersions.create())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "TestUtils.assertFutureThrows(result.values().get(\"topic3\"),)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(0,e.throttleTimeMs())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Map<String,NewPartitions> counts = new HashMap<>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting next DeleteTopics request\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Uuid topicId2 = Uuid.randomUuid()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "time.sleep(defaultApiTimeout + 1)@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "env.kafkaClient().prepareResponse(expectDeleteTopicsRequestWithTopics(\"topic1\",\"topic2\",\"topic3\"),prepareDeleteTopicsResponse(1000,deletableTopicResult(\"topic1\",Errors.NONE),deletableTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED),deletableTopicResult(\"topic3\",Errors.TOPIC_ALREADY_EXISTS)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(0,e.throttleTimeMs())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "long defaultApiTimeout = 60000@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "counts.put(\"topic2\",NewPartitions.increaseTo(2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "DeleteTopicsResult result = env.adminClient().deleteTopics(asList(\"topic1\",\"topic2\",\"topic3\"),new DeleteTopicsOptions().retryOnQuotaViolation(true))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertNull(resultIds.values().get(topicId1).get())@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "counts.put(\"topic3\",NewPartitions.increaseTo(3))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting CreatePartitions requests\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertNull(result.values().get(\"topic1\").get())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Uuid topicId3 = Uuid.randomUuid()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "env.kafkaClient().prepareResponse(expectDeleteTopicsRequestWithTopics(\"topic2\"),prepareDeleteTopicsResponse(1000,deletableTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED)))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Uuid topicId1 = Uuid.randomUuid()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14->27 [style = bold, label=""];
28->13 [style = bold, label=""];
21->18 [style = solid, label="topicId2"];
37->41 [style = bold, label=""];
9->13 [style = solid, label="defaultApiTimeout"];
21->15 [style = bold, label=""];
9->4 [style = bold, label=""];
26->16 [style = bold, label=""];
17->21 [style = bold, label=""];
15->18 [style = bold, label=""];
7->9 [style = bold, label=""];
13->17 [style = bold, label=""];
25->19 [style = bold, label=""];
12->2 [style = bold, label=""];
2->5 [style = bold, label=""];
1->12 [style = bold, label=""];
11->0 [style = bold, label=""];
32->39 [style = bold, label=""];
39->35 [style = bold, label=""];
38->29 [style = bold, label=""];
17->20 [style = solid, label="topicId1"];
15->18 [style = solid, label="topicId3"];
15->24 [style = solid, label="topicId3"];
6->13 [style = bold, label=""];
10->11 [style = bold, label=""];
8->6 [style = bold, label=""];
21->23 [style = solid, label="topicId2"];
21->14 [style = solid, label="topicId2"];
22->9 [style = bold, label=""];
31->32 [style = bold, label=""];
0->1 [style = bold, label=""];
30->31 [style = bold, label=""];
20->25 [style = bold, label=""];
13->37 [style = bold, label=""];
27->24 [style = bold, label=""];
0->34 [style = dashed, label="0"];
9->26 [style = solid, label="defaultApiTimeout"];
10->40 [style = bold, label=""];
23->20 [style = bold, label=""];
16->14 [style = bold, label=""];
41->38 [style = bold, label=""];
9->5 [style = solid, label="defaultApiTimeout"];
40->34 [style = bold, label=""];
3->8 [style = bold, label=""];
19->26 [style = bold, label=""];
35->36 [style = bold, label=""];
36->28 [style = bold, label=""];
21->20 [style = solid, label="topicId2"];
30->35 [style = solid, label="counts"];
33->9 [style = bold, label=""];
15->20 [style = solid, label="topicId3"];
4->10 [style = bold, label=""];
17->18 [style = solid, label="topicId1"];
5->3 [style = bold, label=""];
34->30 [style = bold, label=""];
18->23 [style = bold, label=""];
}
