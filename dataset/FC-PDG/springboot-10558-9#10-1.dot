digraph {
0 [style = filled, label = "assertThat(health.getDetails().get(\"threshold\")).isEqualTo(THRESHOLD.toBytes())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "diskSpaceIsUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(health.getDetails().get(\"exists\")).isEqualTo(true)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(health.getDetails().get(\"total\")).isEqualTo(TOTAL_SPACE.toBytes())@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "diskSpaceIsDown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(health.getDetails().get(\"free\")).isEqualTo(freeSpace)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "given(this.fileMock.getTotalSpace()).willReturn(TOTAL_SPACE.toBytes())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "given(this.fileMock.getUsableSpace()).willReturn(freeSpace)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "diskSpaceIsUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "long freeSpace = THRESHOLD.toBytes() + 10@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(health.getStatus()).isEqualTo(Status.UP)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(health.getStatus()).isEqualTo(Status.DOWN)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Health health = this.healthIndicator.health()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "long freeSpace = THRESHOLD.toBytes() - 10@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->3 [style = bold, label=""];
9->3 [style = bold, label=""];
12->13 [style = bold, label=""];
8->10 [style = bold, label=""];
3->5 [style = bold, label=""];
11->0 [style = bold, label=""];
7->11 [style = bold, label=""];
7->4 [style = bold, label=""];
5->6 [style = bold, label=""];
6->7 [style = bold, label=""];
4->11 [style = dashed, label="0"];
3->13 [style = dashed, label="0"];
3->5 [style = solid, label="freeSpace"];
3->2 [style = solid, label="freeSpace"];
13->2 [style = solid, label="freeSpace"];
13->5 [style = solid, label="freeSpace"];
2->8 [style = bold, label=""];
4->0 [style = bold, label=""];
0->2 [style = bold, label=""];
13->5 [style = bold, label=""];
}
