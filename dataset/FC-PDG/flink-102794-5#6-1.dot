digraph {
10 [style = filled, label = "assertEquals(3,testHarness.numKeyedStateEntries())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "shouldMergeWindows(mockAssigner,Lists.newArrayList(new TimeWindow(0,2),new TimeWindow(2,4),new TimeWindow(1,3)),Lists.newArrayList(new TimeWindow(0,2),new TimeWindow(2,4),new TimeWindow(1,3)),new TimeWindow(0,4))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Trigger<Integer,TimeWindow> mockTrigger = mockTrigger()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(3,testHarness.numKeyedStateEntries())@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(2,timeAdaptor.numTimers(testHarness))@@@54@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "timeAdaptor.setIsEventTime(mockAssigner)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(3,testHarness.numKeyedStateEntries())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testHarness.open()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MergingWindowAssigner<Integer,TimeWindow> mockAssigner = mockMergingAssigner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(1,3)))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "timeAdaptor.advanceTime(testHarness,Long.MIN_VALUE)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testWindowsAreMergedEagerly['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(0,2)))@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "InternalWindowFunction<Iterable<Integer>,Void,Integer,TimeWindow> mockWindowFunction = mockWindowFunction()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(2,timeAdaptor.numTimers(testHarness))@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(5,testHarness.numKeyedStateEntries())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "testMergingOfExistingWindows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "doAnswer(new Answer<TriggerResult>(){@Override public TriggerResult answer(InvocationOnMock invocation){Trigger.OnMergeContext context = (Trigger.OnMergeContext)invocation.getArguments()(1(timeAdaptor.registerTimer(context,0L)context.getPartitionedState(valueStateDescriptor).update(\"hello\")return TriggerResult.CONTINUE}}).when(mockTrigger).onMerge(anyTimeWindow(),anyOnMergeContext())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(2,timeAdaptor.numTimers(testHarness))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(0,testHarness.extractOutputStreamRecords().size())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(2,4)))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "shouldMergeWindows(mockAssigner,new ArrayList<>(Arrays.asList(new TimeWindow(0,2),new TimeWindow(2,4))),new ArrayList<>(Arrays.asList(new TimeWindow(0,2),new TimeWindow(2,4))),new TimeWindow(0,4))@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "verify(mockTrigger).onMerge(eq(new TimeWindow(0,4)),anyOnMergeContext())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "doAnswer(new Answer<TriggerResult>(){@Override public TriggerResult answer(InvocationOnMock invocation){Trigger.TriggerContext context = (Trigger.TriggerContext)invocation.getArguments()(3(timeAdaptor.registerTimer(context,0L)context.getPartitionedState(valueStateDescriptor).update(\"hello\")return TriggerResult.CONTINUE}}).when(mockTrigger).onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "doAnswer(new Answer<TriggerResult>(){@Override public TriggerResult answer(InvocationOnMock invocation){return TriggerResult.CONTINUE}}).when(mockTrigger).onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(0,testHarness.extractOutputStreamRecords().size())@@@52@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(4,timeAdaptor.numTimers(testHarness))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testWindowsAreMergedEagerly['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "shouldMergeWindows(mockAssigner,Lists.newArrayList(new TimeWindow(0,2),new TimeWindow(2,4)),Lists.newArrayList(new TimeWindow(0,2),new TimeWindow(2,4)),new TimeWindow(0,4))@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "doAnswer(new Answer<Object>(){@Override public Object answer(InvocationOnMock invocation){Trigger.TriggerContext context = (Trigger.TriggerContext)invocation.getArguments()(1(timeAdaptor.deleteTimer(context,0L)context.getPartitionedState(valueStateDescriptor).clear()return null}}).when(mockTrigger).clear(anyTimeWindow(),anyTriggerContext())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29->8 [style = bold, label=""];
2->20 [style = bold, label=""];
28->37 [style = bold, label=""];
4->24 [style = bold, label=""];
8->23 [style = solid, label="mockAssigner"];
9->11 [style = bold, label=""];
3->26 [style = dashed, label="0"];
20->9 [style = bold, label=""];
37->30 [style = bold, label=""];
20->27 [style = dashed, label="0"];
8->13 [style = solid, label="mockAssigner"];
27->9 [style = bold, label=""];
23->30 [style = solid, label="testHarness"];
22->23 [style = solid, label="mockWindowFunction"];
19->23 [style = solid, label="mockTrigger"];
23->6 [style = solid, label="testHarness"];
8->20 [style = solid, label="mockAssigner"];
23->21 [style = solid, label="testHarness"];
7->4 [style = bold, label=""];
5->14 [style = bold, label=""];
16->17 [style = bold, label=""];
15->16 [style = bold, label=""];
36->33 [style = bold, label=""];
22->23 [style = bold, label=""];
10->6 [style = bold, label=""];
11->36 [style = bold, label=""];
24->5 [style = bold, label=""];
6->2 [style = bold, label=""];
35->28 [style = bold, label=""];
13->19 [style = bold, label=""];
17->12 [style = bold, label=""];
12->10 [style = bold, label=""];
11->0 [style = bold, label=""];
30->31 [style = bold, label=""];
1->21 [style = bold, label=""];
0->1 [style = bold, label=""];
8->27 [style = solid, label="mockAssigner"];
23->4 [style = solid, label="testHarness"];
18->3 [style = dotted, label="true"];
2->27 [style = bold, label=""];
8->35 [style = solid, label="mockAssigner"];
14->15 [style = bold, label=""];
25->8 [style = bold, label=""];
23->7 [style = bold, label=""];
18->8 [style = bold, label=""];
34->35 [style = bold, label=""];
3->32 [style = dashed, label="0"];
19->22 [style = bold, label=""];
33->34 [style = bold, label=""];
23->33 [style = solid, label="testHarness"];
2->11 [style = bold, label=""];
25->26 [style = dotted, label="true"];
29->32 [style = dotted, label="true"];
8->13 [style = bold, label=""];
}
