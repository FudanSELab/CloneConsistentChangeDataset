digraph {
16 [style = filled, label = "testParseLocalLogicSpan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(1,receivedSources.size())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "logicSpanTagValue.addProperty(\"status\",false)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final List<Source> receivedSources = mockReceiver.getReceivedSources()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(\"/GraphQL-service\",source.getName())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final SegmentObject segment = SegmentObject.newBuilder().setService(\"mock-service\").setServiceInstance(\"mock-instance\").addSpans(spanObject).build()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "mockReceiver.clear()@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final Endpoint source = (Endpoint)receivedSources.get(0)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final SegmentObject segment = SegmentObject.newBuilder().setService(\"mock-service\").setServiceInstance(\"mock-instance\").addSpans(spanObject).build()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final MockReceiver mockReceiver = new MockReceiver()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "listener.parseLocal(spanObject,segment)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testParseSpanWithLogicEndpointTag['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "logicSpanTagValue.addProperty(\"latency\",100)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "logicSpanTagValue.addProperty(\"logic-span\",true)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final List<ISource> receivedSources = mockReceiver.getReceivedSources()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "listener.build()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final long startTime = System.currentTimeMillis()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/logic-call\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(false).setSpanType(SpanType.Local).addTags(KeyStringValuePair.newBuilder().setKey(LOGIC_ENDPOINT).setValue(logicSpanTagValue.toString()).build()).build()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testParseLocalLogicSpan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "logicSpanTagValue.addProperty(\"name\",\"/GraphQL-service\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(mockReceiver,CONFIG,CACHE,NAMING_CONTROL)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/logic-call\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(false).setSpanType(SpanType.Local).addTags(KeyStringValuePair.newBuilder().setKey(LOGIC_ENDPOINT).setValue(logicSpanTagValue.toString()).build()).build()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final JsonObject logicSpanTagValue = new JsonObject()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->22 [style = bold, label=""];
5->8 [style = bold, label=""];
19->18 [style = bold, label=""];
7->6 [style = solid, label="spanObject"];
15->14 [style = bold, label=""];
21->19 [style = bold, label=""];
4->6 [style = bold, label=""];
1->3 [style = bold, label=""];
3->22 [style = dashed, label="0"];
7->4 [style = bold, label=""];
11->9 [style = bold, label=""];
11->9 [style = solid, label="segment"];
11->15 [style = bold, label=""];
14->1 [style = bold, label=""];
20->5 [style = bold, label=""];
2->13 [style = bold, label=""];
3->10 [style = bold, label=""];
12->2 [style = bold, label=""];
13->21 [style = dashed, label="0"];
9->15 [style = dashed, label="0"];
4->6 [style = solid, label="segment"];
18->6 [style = bold, label=""];
2->21 [style = bold, label=""];
13->7 [style = bold, label=""];
6->9 [style = solid, label="spanObject"];
6->11 [style = bold, label=""];
9->14 [style = bold, label=""];
16->5 [style = bold, label=""];
22->17 [style = bold, label=""];
5->8 [style = solid, label="mockReceiver"];
8->12 [style = bold, label=""];
0->5 [style = bold, label=""];
}
