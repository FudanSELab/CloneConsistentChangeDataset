digraph {
12 [style = filled, label = "assertThat(updatedSlave.getUserId(),equalTo(command.user().getId()))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final Node originalSlave = j.createSlave(\"SlaveFromXml\",null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "createNode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(updatedSlave.getNodeName(),equalTo(\"CustomSlaveName\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(updatedSlave.getNodeName(),equalTo(\"SlaveFromXML\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(updatedSlave.getNumExecutors(),equalTo(42))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.ADMINISTER).withStdin(getClass().getResourceAsStream(\"node.xml\")).invoke()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertThat(\"A slave with original name should be left untouched\",j.jenkins.getNode(\"SlaveFromXml\"),equalTo(originalSlave))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final Slave updatedSlave = (Slave)j.jenkins.getNode(\"CustomSlaveName\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(\"No error output expected\",result.stderr(),isEmptyString())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(updatedSlave.getUserId(),equalTo(command.user().getId()))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(updatedSlave.getNumExecutors(),equalTo(42))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invoke()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(\"Command is expected to succeed\",result.returnCode(),equalTo(0))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "createNode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(\"No error output expected\",result.stderr(),isEmptyString())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "createNodeSpecifyingDifferentNameExplicitly['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.ADMINISTER).withStdin(getClass().getResourceAsStream(\"node.xml\")).invokeWithArgs(\"CustomSlaveName\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
11->16 [style = bold, label=""];
14->10 [style = bold, label=""];
14->13 [style = solid, label="originalSlave"];
3->6 [style = bold, label=""];
7->0 [style = bold, label=""];
17->12 [style = bold, label=""];
4->2 [style = bold, label=""];
10->5 [style = bold, label=""];
16->17 [style = bold, label=""];
9->1 [style = bold, label=""];
15->14 [style = bold, label=""];
0->9 [style = dashed, label="0"];
4->13 [style = dashed, label="0"];
13->11 [style = bold, label=""];
0->1 [style = bold, label=""];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
4->13 [style = bold, label=""];
8->9 [style = bold, label=""];
}
