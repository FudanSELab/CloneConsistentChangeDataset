digraph {
3 [style = filled, label = "MetaClass meta = MetaClass.forClass(,reflectorFactory)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ReflectorFactory reflectorFactory = new DefaultReflectorFactory()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richList(0(\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richList\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertTrue(meta.hasSetter(\"richList\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richMap\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(meta.hasSetter(\"richMap\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richField\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "shouldCheckSetterExistance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(meta.hasSetter(\"richType\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(meta.hasGetter(\"richMap\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(meta.hasSetter(\"richList(0(\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertFalse(meta.hasGetter(\"(0(\"))@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(meta.hasGetter(\"richList\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"richType.richProperty\",meta.findProperty(\"richType.richProperty\",false))@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertFalse(meta.hasSetter(\"(0(\"))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richList(0(\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "shouldCheckGetterExistance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richList\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(meta.hasGetter(\"richProperty\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richProperty\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richProperty\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "shouldCheckGetterExistance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richMap\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(meta.hasSetter(\"richField\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertTrue(meta.hasSetter(\"richProperty\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(meta.hasGetter(\"richField\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(meta.hasGetter(\"richType\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richField\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(meta.hasGetter(\"richList(0(\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->16 [style = bold, label=""];
4->26 [style = dashed, label="0"];
22->19 [style = bold, label=""];
3->11 [style = bold, label=""];
16->4 [style = bold, label=""];
23->24 [style = bold, label=""];
12->28 [style = dashed, label="0"];
13->0 [style = bold, label=""];
2->3 [style = solid, label="reflectorFactory"];
29->2 [style = bold, label=""];
20->18 [style = bold, label=""];
8->25 [style = dashed, label="0"];
28->17 [style = bold, label=""];
10->21 [style = dashed, label="0"];
12->1 [style = bold, label=""];
18->25 [style = bold, label=""];
14->12 [style = bold, label=""];
0->8 [style = bold, label=""];
5->19 [style = dashed, label="0"];
5->9 [style = bold, label=""];
17->20 [style = bold, label=""];
11->23 [style = dashed, label="0"];
11->14 [style = bold, label=""];
15->2 [style = bold, label=""];
6->2 [style = bold, label=""];
2->3 [style = bold, label=""];
19->27 [style = bold, label=""];
3->23 [style = bold, label=""];
14->24 [style = dashed, label="0"];
21->26 [style = bold, label=""];
10->4 [style = bold, label=""];
7->22 [style = dashed, label="0"];
7->5 [style = bold, label=""];
13->20 [style = dashed, label="0"];
8->7 [style = bold, label=""];
24->28 [style = bold, label=""];
1->17 [style = dashed, label="0"];
25->22 [style = bold, label=""];
0->18 [style = dashed, label="0"];
9->27 [style = dashed, label="0"];
27->21 [style = bold, label=""];
9->10 [style = bold, label=""];
1->13 [style = bold, label=""];
}
