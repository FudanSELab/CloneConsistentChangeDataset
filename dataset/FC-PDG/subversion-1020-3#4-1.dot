digraph {
18 [style = filled, label = "String expected = (\"^/A/D/H@2 ADHext\" + \"^/A/D/H@1 peggedADHext\" + \"-r1 ^/A/D/H revvedADHext\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "OneTest thisTest = new OneTest()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "sources.add(new CopySource(sourceUrl,null,null))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "List<ExternalItem> items = new ArrayList<ExternalItem>(1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "String sourceUrl = thisTest.getUrl() + \"/A/B\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<CopySource> sources = new ArrayList<CopySource>(1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "client.copy(sources,target,true,false,false,true,externalsToPin,null,new ConstMsg(\"Copy WC to REPO\"),null)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "setupPinExternalsTest(thisTest)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "items.add(new ExternalItem(\"ADHext\",\"^/A/D/H\",null,null))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "client.copy(sources,target,true,false,false,false,true,null,null,null,null)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "String target = thisTest.getWCPath() + \"/A/Bcopy\"@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String target = thisTest.getUrl() + \"/A/Bcopy\"@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Map<String,List<ExternalItem>> externalsToPin = new HashMap<String,List<ExternalItem>>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "client.copy(sources,target,true,false,false,true,null,null,null,null)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testCopyPinExternals_repo2wc['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "String expected = (\"^/A/D/H@2 ADHext\" + \"^/A/D/H@1 peggedADHext\" + \"-r1 ^/A/D/H@2 revvedADHext\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String actual = new String(client.propertyGet(target,\"svn:externals\",null,null))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(expected,actual)@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testCopyPinExternals_repo2repo_explicit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "externalsToPin.put(sourceUrl,items)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testCopyPinExternals_repo2wc['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "sources.add(new CopySource(thisTest.getUrl() + \"/A/B\",null,null))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
0->13 [style = solid, label="sources"];
18->4 [style = solid, label="expected"];
20->13 [style = solid, label="externalsToPin"];
8->9 [style = solid, label="target"];
21->0 [style = bold, label=""];
17->13 [style = solid, label="target"];
11->6 [style = bold, label=""];
14->17 [style = bold, label=""];
7->4 [style = bold, label=""];
16->21 [style = solid, label="sourceUrl"];
8->11 [style = solid, label="target"];
9->6 [style = bold, label=""];
6->18 [style = dashed, label="0"];
6->4 [style = solid, label="expected"];
16->14 [style = solid, label="sourceUrl"];
5->1 [style = bold, label=""];
0->14 [style = bold, label=""];
2->0 [style = bold, label=""];
7->4 [style = solid, label="actual"];
3->8 [style = bold, label=""];
20->12 [style = bold, label=""];
12->21 [style = solid, label="items"];
8->9 [style = bold, label=""];
0->9 [style = solid, label="sources"];
8->7 [style = solid, label="target"];
1->2 [style = solid, label="thisTest"];
9->13 [style = dashed, label="0"];
9->11 [style = dashed, label="0"];
8->17 [style = dashed, label="0"];
1->2 [style = bold, label=""];
19->21 [style = bold, label=""];
17->13 [style = bold, label=""];
17->7 [style = solid, label="target"];
6->7 [style = bold, label=""];
12->19 [style = bold, label=""];
0->11 [style = solid, label="sources"];
10->1 [style = bold, label=""];
8->11 [style = bold, label=""];
16->20 [style = bold, label=""];
18->7 [style = bold, label=""];
3->14 [style = dashed, label="0"];
13->18 [style = bold, label=""];
15->1 [style = bold, label=""];
2->16 [style = bold, label=""];
}
