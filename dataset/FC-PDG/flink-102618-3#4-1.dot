digraph {
27 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple3<String,Long,Long>,TimeWindow> operator = new WindowOperator<>(EventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),EventTimeTrigger.create(),LATENESS)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testHarness.configureForKeyedStream(new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testHarness.open()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expected.add(new Watermark(14600))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testHarness.configureForKeyedStream(new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHarness.processWatermark(new Watermark(4998))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\",1000L,4000L),3999))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "testCleanupTimerWithEmptyReduceStateForSessionWindows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final int GAP_SIZE = 3@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expected,actual,new Tuple2ResultSortComparator())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expected.add(new Watermark(4998))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Iterable<Tuple2<String,Integer>>,Tuple2<String,Integer>,TimeWindow> operator = new WindowOperator<>(EventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),windowStateDesc,new InternalIterableWindowFunction<>(new PassThroughFunction()),EventTimeTrigger.create(),LATENESS)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expected.add(new Watermark(4998))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "operator.setInputType(TypeInfoParser.parse(\"Tuple2<String, Integer>\"),new ExecutionConfig())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testCleanupTimerWithEmptyListStateForSessionWindows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testCleanupTimerWithEmptyListStateForSessionWindows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "ConcurrentLinkedQueue<Object> actual = testHarness.getOutput()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHarness.open()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness.processWatermark(new Watermark(14600))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",new SumReducer(),inputType.createSerializer(new ExecutionConfig()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "ListStateDescriptor<Tuple2<String,Integer>> windowStateDesc = new ListStateDescriptor<>(\"window-contents\",inputType.createSerializer(new ExecutionConfig()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testHarness.close()@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1000))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new OneInputStreamOperatorTestHarness<>(operator)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple3<String,Long,Long>> testHarness = new OneInputStreamOperatorTestHarness<>(operator)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final long LATENESS = 10@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->24 [style = bold, label=""];
0->16 [style = bold, label=""];
23->16 [style = bold, label=""];
1->8 [style = bold, label=""];
10->15 [style = bold, label=""];
4->6 [style = bold, label=""];
3->1 [style = solid, label="LATENESS"];
1->27 [style = dashed, label="0"];
17->9 [style = bold, label=""];
27->28 [style = bold, label=""];
3->14 [style = bold, label=""];
18->26 [style = bold, label=""];
8->20 [style = dashed, label="0"];
1->20 [style = bold, label=""];
27->23 [style = solid, label="operator"];
14->19 [style = bold, label=""];
11->27 [style = solid, label="GAP_SIZE"];
16->17 [style = bold, label=""];
24->27 [style = solid, label="stateDesc"];
5->17 [style = bold, label=""];
2->4 [style = bold, label=""];
13->11 [style = bold, label=""];
14->16 [style = solid, label="inputType"];
20->21 [style = bold, label=""];
8->0 [style = bold, label=""];
6->10 [style = solid, label="actual"];
19->1 [style = bold, label=""];
26->2 [style = bold, label=""];
19->1 [style = solid, label="windowStateDesc"];
11->1 [style = solid, label="GAP_SIZE"];
11->3 [style = bold, label=""];
28->23 [style = bold, label=""];
7->2 [style = bold, label=""];
25->11 [style = bold, label=""];
9->15 [style = solid, label="expected"];
6->10 [style = bold, label=""];
1->8 [style = solid, label="operator"];
12->18 [style = bold, label=""];
16->5 [style = bold, label=""];
21->16 [style = bold, label=""];
19->24 [style = dashed, label="0"];
9->12 [style = bold, label=""];
17->10 [style = solid, label="expected"];
18->7 [style = bold, label=""];
3->27 [style = solid, label="LATENESS"];
1->20 [style = solid, label="operator"];
24->27 [style = bold, label=""];
22->11 [style = bold, label=""];
15->29 [style = bold, label=""];
18->26 [style = dashed, label="0"];
10->15 [style = solid, label="actual"];
}
