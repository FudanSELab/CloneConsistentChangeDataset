digraph {
10 [style = filled, label = "assertEquals(message.getInt32ToMessageFieldMap(),message.getInt32ToMessageFieldMap())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "TestMap message = builder.build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(message.getInt32ToEnumFieldValue(),message.getInt32ToEnumFieldValueMap())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(message.getInt32ToBytesFieldMap(),message.getInt32ToBytesFieldMap())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(message.getInt32ToBytesField(),message.getInt32ToBytesFieldMap())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testGetMap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(message.getInt32ToEnumField(),message.getInt32ToEnumFieldMap())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "setMapValues(builder)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(message.getStringToInt32Field(),message.getStringToInt32FieldMap())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testGetMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(message.getInt32ToMessageField(),message.getInt32ToMessageFieldMap())@@@10@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testGetMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "TestMap.Builder builder = TestMap.newBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(message.getInt32ToEnumFieldValueMap(),message.getInt32ToEnumFieldValueMap())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "setMapValuesUsingAccessors(builder)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(message.getStringToInt32FieldMap(),message.getStringToInt32FieldMap())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(message.getInt32ToEnumFieldMap(),message.getInt32ToEnumFieldMap())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16->3 [style = bold, label=""];
4->6 [style = bold, label=""];
12->11 [style = bold, label=""];
1->3 [style = bold, label=""];
8->12 [style = dashed, label="0"];
15->6 [style = bold, label=""];
6->1 [style = solid, label="builder"];
7->8 [style = bold, label=""];
3->0 [style = bold, label=""];
2->10 [style = dashed, label="0"];
0->7 [style = bold, label=""];
3->9 [style = bold, label=""];
6->1 [style = bold, label=""];
5->2 [style = bold, label=""];
13->12 [style = bold, label=""];
8->5 [style = bold, label=""];
5->11 [style = dashed, label="0"];
11->10 [style = bold, label=""];
6->16 [style = bold, label=""];
1->16 [style = dashed, label="0"];
6->16 [style = solid, label="builder"];
7->13 [style = dashed, label="0"];
0->9 [style = dashed, label="0"];
14->6 [style = bold, label=""];
9->13 [style = bold, label=""];
}
