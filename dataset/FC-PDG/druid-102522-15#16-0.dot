digraph {
9 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2),publishedDescriptors())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2010/P1D\",0)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3),publishedDescriptors())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2012/P1D\",0)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testRunReplicas['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2010/P1D\",0,ImmutableList.of(\"c\")),sdd(\"2011/P1D\",0,ImmutableList.of(\"d\",\"e\"))),publishedDescriptors())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(2)))@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getThrownAway())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L,1,1L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(1,task2.getRunner().getRowIngestionMeters().getProcessed())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final KafkaIndexTask task2 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final KafkaIndexTask task2 = createTask(null,new KafkaIndexTaskIOConfig(1,\"sequence1\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(1,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(1,1L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(3,task1.getRunner().getRowIngestionMeters().getProcessed())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testRunReplicas['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(3,task2.getRunner().getRowIngestionMeters().getProcessed())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "insertData()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testRunTwoTasksTwoPartitions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2011/P1D\",0)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
12->2 [style = solid, label="task1"];
17->8 [style = bold, label=""];
11->20 [style = bold, label=""];
31->17 [style = solid, label="task2"];
25->28 [style = bold, label=""];
27->12 [style = bold, label=""];
6->18 [style = bold, label=""];
11->26 [style = dashed, label="0"];
29->0 [style = bold, label=""];
4->31 [style = dashed, label="0"];
31->2 [style = bold, label=""];
8->6 [style = bold, label=""];
4->2 [style = bold, label=""];
16->19 [style = bold, label=""];
15->16 [style = bold, label=""];
22->23 [style = bold, label=""];
4->17 [style = solid, label="task2"];
30->29 [style = bold, label=""];
15->22 [style = bold, label=""];
24->30 [style = bold, label=""];
19->24 [style = bold, label=""];
7->14 [style = bold, label=""];
21->12 [style = bold, label=""];
19->9 [style = solid, label="desc2"];
14->26 [style = bold, label=""];
16->9 [style = solid, label="desc1"];
24->30 [style = solid, label="desc3"];
3->5 [style = bold, label=""];
0->10 [style = bold, label=""];
19->30 [style = solid, label="desc2"];
12->4 [style = bold, label=""];
19->9 [style = bold, label=""];
5->0 [style = bold, label=""];
10->25 [style = bold, label=""];
13->7 [style = bold, label=""];
1->12 [style = bold, label=""];
18->13 [style = bold, label=""];
9->3 [style = bold, label=""];
20->15 [style = bold, label=""];
14->11 [style = bold, label=""];
12->31 [style = bold, label=""];
16->30 [style = solid, label="desc1"];
26->20 [style = bold, label=""];
16->22 [style = dashed, label="0"];
}
