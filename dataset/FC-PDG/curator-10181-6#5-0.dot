digraph {
7 [style = filled, label = "int iteration = 0@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "QueuePutListener<TestQueueItem> listener = new QueuePutListener<TestQueueItem>(){@Override public void putCompleted(TestQueueItem item){listenerCalls.incrementAndGet()}@Override public void putMultiCompleted(MultiItem<TestQueueItem> items){}}@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "service.submit(producer)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "queue.getPutListenerContainer().addListener(listener)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ExecutorService service = Executors.newCachedThreadPool()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Thread.sleep(1000)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "client.start()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "consumer.size() < itemQty@@@25@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testSimple['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(item.str,Integer.toString(i++))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "testPutListener['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "{CloseableUtils.closeQuietly(queue)CloseableUtils.closeQuietly(client)}@@@35@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(++iteration < 10)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(item.str,Integer.toString(i++))@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int i = 0@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "queue = QueueBuilder.builder(client,consumer,serializer,QUEUE_PATH).buildQueue()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(listenerCalls.get(),itemQty)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final int itemQty = 10@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(++iteration < 10)@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DistributedQueue<TestQueueItem> queue = null@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "QueueTestProducer producer = new QueueTestProducer(queue,itemQty,0)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final AtomicInteger listenerCalls = new AtomicInteger(0)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "queue.start()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testSimple['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->6 [style = bold, label=""];
23->9 [style = bold, label=""];
5->9 [style = solid, label="client"];
14->0 [style = dotted, label="true"];
2->4 [style = solid, label="itemQty"];
16->4 [style = bold, label=""];
14->18 [style = bold, label=""];
14->18 [style = dotted, label="true"];
25->2 [style = bold, label=""];
2->10 [style = bold, label=""];
14->0 [style = bold, label=""];
21->24 [style = bold, label=""];
22->15 [style = bold, label=""];
8->17 [style = bold, label=""];
2->14 [style = solid, label="itemQty"];
3->13 [style = bold, label=""];
17->20 [style = dashed, label="0"];
24->22 [style = bold, label=""];
7->14 [style = bold, label=""];
11->7 [style = bold, label=""];
14->6 [style = dotted, label="true"];
6->14 [style = bold, label=""];
13->9 [style = solid, label="queue"];
15->11 [style = bold, label=""];
4->11 [style = solid, label="producer"];
13->16 [style = bold, label=""];
12->3 [style = bold, label=""];
17->9 [style = bold, label=""];
14->8 [style = bold, label=""];
17->23 [style = bold, label=""];
13->4 [style = solid, label="queue"];
2->23 [style = solid, label="itemQty"];
5->12 [style = bold, label=""];
20->9 [style = bold, label=""];
19->2 [style = bold, label=""];
8->17 [style = solid, label="i"];
4->15 [style = bold, label=""];
8->20 [style = solid, label="i"];
4->21 [style = bold, label=""];
24->22 [style = solid, label="listener"];
0->18 [style = dashed, label="0"];
1->2 [style = bold, label=""];
10->5 [style = bold, label=""];
8->20 [style = bold, label=""];
18->6 [style = bold, label=""];
}
