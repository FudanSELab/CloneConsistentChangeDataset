digraph {
38 [style = filled, label = "Object constantValue = irConstantNode.getDecorationValue()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "type == @@@16@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "UnaryMathNode irUnaryMathNode@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "type == @@@30@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "type == @@@40@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "irUnaryMathNode.getChildNode() instanceof ConstantNode@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Class<?> type = irUnaryMathNode.getDecorationValue()@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "throw irUnaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"unary operation (\" + operation.symbol + \"( on \" + \"constant (\" + irConstantNode.getConstant() + \"(\"))@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "visitUnaryMath['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "operation == Operation.OR@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Consumer<ExpressionNode> scope@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "irBooleanNode.getLeftNode() instanceof ConstantNode && irBooleanNode.getRightNode() instanceof ConstantNode@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "operation == Operation.NOT@@@38@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "throw irBooleanNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"boolean operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "visitBoolean['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "throw irUnaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"unary operation (\" + operation.symbol + \"( on \" + \"constant (\" + irConstantNode.getDecorationString() + \"(\"))@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "operation == Operation.BWNOT@@@27@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "scope.accept(irConstantNode)@@@36@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "type == @@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "Operation operation = irBooleanNode.getOperation()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "type == @@@15@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "scope.accept(irConstantNode)@@@37@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Consumer<ExpressionNode> scope@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "irConstantNode.attachDecoration(new IRDConstant(-(int)constantValue))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "scope.accept(irConstantNode)@@@45@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "operation == Operation.SUB@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "irConstantNode.attachDecoration(new IRDConstant(~(int)constantValue))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "ConstantNode irRightConstantNode = (ConstantNode)irBooleanNode.getRightNode()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "irBooleanNode.getLeftNode().visit(this,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "operation == Operation.BWNOT@@@26@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "scope.accept(irConstantNode)@@@25@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "Operation operation = irUnaryMathNode.getDecorationValue()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "type == @@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "type == @@@18@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "irConstantNode.attachDecoration(new IRDConstant(-(long)constantValue))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "irConstantNode.attachDecoration(new IRDConstant(-(float)constantValue))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "type == @@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "scope.accept(irConstantNode)@@@49@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "throw irUnaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"unary operation (\" + operation.symbol + \"( on \" + \"constant (\" + irConstantNode.getDecorationString() + \"(\"))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "irUnaryMathNode.getChildNode().visit(this,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "type == @@@28@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "UnaryMathNode irUnaryMathNode@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "BooleanNode irBooleanNode@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "type == @@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "irConstantNode.attachDecoration(new IRDConstant(~(long)constantValue))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "operation == Operation.ADD@@@48@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Class<?> type = irUnaryMathNode.getDecorationValue()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "visitUnaryMath['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "type == @@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "operation == Operation.ADD@@@47@@@['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() && (boolean)irRightConstantNode.getConstant())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "irConstantNode.attachDecoration(new IRDConstant(!(boolean)constantValue))@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
64 [style = filled, label = "scope.accept(irLeftConstantNode)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Operation operation = irUnaryMathNode.getOperation()@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "throw irUnaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"unary operation (\" + operation.symbol + \"( on \" + \"constant (\" + irConstantNode.getConstant() + \"(\"))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "throw irUnaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"unary operation (\" + operation.symbol + \"( on \" + \"constant (\" + irConstantNode.getDecorationString() + \"(\"))@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "operation == Operation.AND@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Class<?> type = irBooleanNode.getDecorationValue()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "operation == Operation.NOT@@@39@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() || (boolean)irRightConstantNode.getConstant())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "irBooleanNode.getRightNode().visit(this,null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "scope.accept(irConstantNode)@@@46@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "type == @@@31@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "throw irBooleanNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "scope.accept(irLeftConstantNode)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "type == @@@12@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "irConstantNode.attachDecoration(new IRDConstant(-(double)constantValue))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "scope.accept(irConstantNode)@@@24@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "throw irUnaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"unary operation (\" + operation.symbol + \"( on \" + \"constant (\" + irConstantNode.getConstant() + \"(\"))@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
60 [style = filled, label = "ConstantNode irLeftConstantNode = (ConstantNode)irBooleanNode.getLeftNode()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "ConstantNode irConstantNode = (ConstantNode)irUnaryMathNode.getChildNode()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->8 [style = dotted, label="true"];
21->42 [style = bold, label=""];
53->69 [style = bold, label=""];
62->69 [style = solid, label="type"];
21->66 [style = dashed, label="0"];
57->62 [style = bold, label=""];
10->14 [style = solid, label="type"];
26->32 [style = solid, label="operation"];
2->19 [style = dotted, label="false"];
21->34 [style = dotted, label="false"];
53->63 [style = bold, label=""];
16->7 [style = bold, label=""];
30->35 [style = solid, label="irConstantNode"];
10->3 [style = dotted, label="true"];
32->11 [style = dotted, label="true"];
6->51 [style = dashed, label="0"];
19->11 [style = bold, label=""];
31->17 [style = solid, label="type"];
10->9 [style = solid, label="type"];
3->16 [style = bold, label=""];
61->59 [style = bold, label=""];
51->58 [style = dotted, label="true"];
31->2 [style = solid, label="type"];
61->65 [style = dotted, label="true"];
36->11 [style = solid, label="operation"];
44->46 [style = bold, label=""];
4->70 [style = dashed, label="0"];
1->28 [style = bold, label=""];
6->18 [style = dotted, label="false"];
60->64 [style = solid, label="irLeftConstantNode"];
62->58 [style = solid, label="type"];
43->39 [style = dotted, label="true"];
30->11 [style = solid, label="irConstantNode"];
62->53 [style = solid, label="type"];
60->54 [style = solid, label="irLeftConstantNode"];
33->46 [style = bold, label=""];
26->6 [style = solid, label="operation"];
2->14 [style = bold, label=""];
20->49 [style = dotted, label="true"];
50->45 [style = bold, label=""];
67->68 [style = bold, label=""];
18->32 [style = bold, label=""];
62->70 [style = solid, label="type"];
41->45 [style = bold, label=""];
13->15 [style = dotted, label="true"];
58->70 [style = dotted, label="false"];
30->8 [style = solid, label="irConstantNode"];
24->47 [style = dashed, label="0"];
7->1 [style = dotted, label="false"];
56->51 [style = dotted, label="false"];
51->54 [style = dotted, label="true"];
32->11 [style = bold, label=""];
59->67 [style = bold, label=""];
56->53 [style = bold, label=""];
19->35 [style = dotted, label="true"];
27->36 [style = dotted, label="true"];
30->37 [style = solid, label="irConstantNode"];
25->40 [style = bold, label=""];
8->64 [style = dashed, label="0"];
62->56 [style = bold, label=""];
22->41 [style = dashed, label="0"];
21->42 [style = dotted, label="true"];
9->33 [style = dotted, label="true"];
31->3 [style = solid, label="type"];
5->54 [style = dashed, label="0"];
7->1 [style = bold, label=""];
25->9 [style = dotted, label="false"];
11->37 [style = dotted, label="true"];
9->33 [style = bold, label=""];
27->30 [style = bold, label=""];
30->26 [style = bold, label=""];
14->22 [style = bold, label=""];
18->19 [style = bold, label=""];
22->41 [style = bold, label=""];
11->37 [style = bold, label=""];
25->40 [style = dashed, label="0"];
69->64 [style = bold, label=""];
0->29 [style = bold, label=""];
19->21 [style = dotted, label="true"];
36->3 [style = solid, label="operation"];
18->32 [style = dotted, label="false"];
58->70 [style = bold, label=""];
51->58 [style = bold, label=""];
9->8 [style = bold, label=""];
24->47 [style = bold, label=""];
10->44 [style = solid, label="type"];
13->23 [style = dotted, label="true"];
66->54 [style = bold, label=""];
36->19 [style = solid, label="operation"];
6->2 [style = bold, label=""];
56->51 [style = bold, label=""];
20->8 [style = bold, label=""];
13->12 [style = bold, label=""];
70->54 [style = bold, label=""];
20->49 [style = dashed, label="0"];
31->28 [style = solid, label="type"];
3->2 [style = bold, label=""];
43->12 [style = bold, label=""];
56->64 [style = dotted, label="true"];
49->46 [style = bold, label=""];
6->29 [style = dotted, label="true"];
12->59 [style = dashed, label="0"];
9->44 [style = bold, label=""];
10->24 [style = solid, label="type"];
4->34 [style = dashed, label="0"];
18->5 [style = dotted, label="true"];
34->35 [style = bold, label=""];
24->8 [style = bold, label=""];
43->23 [style = dotted, label="true"];
68->52 [style = dotted, label="true"];
20->24 [style = dotted, label="false"];
36->2 [style = solid, label="operation"];
16->24 [style = dotted, label="true"];
2->17 [style = bold, label=""];
10->57 [style = dashed, label="0"];
24->25 [style = dotted, label="false"];
10->6 [style = dotted, label="false"];
68->60 [style = dotted, label="true"];
68->62 [style = dotted, label="true"];
19->11 [style = dotted, label="false"];
68->56 [style = dotted, label="true"];
53->69 [style = dotted, label="false"];
22->48 [style = bold, label=""];
24->47 [style = dotted, label="true"];
6->18 [style = bold, label=""];
14->22 [style = dotted, label="false"];
16->24 [style = bold, label=""];
10->22 [style = solid, label="type"];
25->9 [style = bold, label=""];
21->34 [style = bold, label=""];
31->0 [style = solid, label="type"];
18->19 [style = dotted, label="true"];
22->29 [style = bold, label=""];
27->38 [style = dotted, label="true"];
10->34 [style = solid, label="type"];
58->66 [style = dotted, label="true"];
17->0 [style = dotted, label="false"];
10->6 [style = bold, label=""];
53->63 [style = dotted, label="true"];
1->9 [style = bold, label=""];
21->42 [style = dashed, label="0"];
26->18 [style = solid, label="operation"];
10->20 [style = solid, label="type"];
58->66 [style = bold, label=""];
21->5 [style = bold, label=""];
1->28 [style = dotted, label="false"];
30->45 [style = solid, label="irConstantNode"];
26->31 [style = bold, label=""];
3->62 [style = dashed, label="0"];
6->2 [style = dotted, label="true"];
17->0 [style = bold, label=""];
31->1 [style = solid, label="type"];
61->55 [style = dotted, label="true"];
31->10 [style = bold, label=""];
3->46 [style = dotted, label="true"];
24->25 [style = bold, label=""];
27->31 [style = dotted, label="true"];
1->9 [style = dotted, label="true"];
28->8 [style = bold, label=""];
22->41 [style = dotted, label="true"];
57->51 [style = solid, label="operation"];
31->16 [style = solid, label="type"];
14->29 [style = bold, label=""];
14->50 [style = bold, label=""];
20->49 [style = bold, label=""];
2->14 [style = dotted, label="true"];
17->22 [style = dotted, label="true"];
16->7 [style = dotted, label="false"];
60->52 [style = bold, label=""];
3->16 [style = dotted, label="false"];
12->27 [style = bold, label=""];
4->5 [style = bold, label=""];
22->48 [style = dotted, label="false"];
31->4 [style = solid, label="type"];
14->50 [style = dashed, label="0"];
2->17 [style = dotted, label="false"];
30->29 [style = solid, label="irConstantNode"];
36->10 [style = bold, label=""];
19->21 [style = bold, label=""];
68->60 [style = bold, label=""];
57->56 [style = solid, label="operation"];
30->38 [style = bold, label=""];
2->19 [style = bold, label=""];
31->7 [style = solid, label="type"];
14->50 [style = dotted, label="true"];
68->57 [style = dotted, label="true"];
63->64 [style = bold, label=""];
27->26 [style = dotted, label="true"];
27->10 [style = dotted, label="true"];
2->45 [style = dotted, label="true"];
10->3 [style = bold, label=""];
38->36 [style = bold, label=""];
47->46 [style = bold, label=""];
30->5 [style = solid, label="irConstantNode"];
17->22 [style = bold, label=""];
31->19 [style = solid, label="type"];
30->46 [style = solid, label="irConstantNode"];
19->4 [style = dotted, label="false"];
27->3 [style = dotted, label="true"];
42->35 [style = bold, label=""];
40->46 [style = bold, label=""];
10->25 [style = solid, label="type"];
9->33 [style = dashed, label="0"];
23->65 [style = dashed, label="0"];
27->30 [style = dotted, label="true"];
0->48 [style = dashed, label="0"];
3->20 [style = bold, label=""];
48->45 [style = bold, label=""];
25->40 [style = dotted, label="true"];
28->44 [style = dashed, label="0"];
10->48 [style = solid, label="type"];
28->69 [style = dashed, label="0"];
10->21 [style = solid, label="type"];
56->53 [style = dotted, label="true"];
7->25 [style = dotted, label="true"];
25->8 [style = bold, label=""];
7->25 [style = bold, label=""];
19->4 [style = bold, label=""];
52->57 [style = bold, label=""];
20->24 [style = bold, label=""];
3->2 [style = dotted, label="false"];
3->20 [style = dotted, label="true"];
26->10 [style = solid, label="operation"];
9->44 [style = dotted, label="false"];
}
