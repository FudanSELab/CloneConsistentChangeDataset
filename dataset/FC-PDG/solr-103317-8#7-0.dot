digraph {
0 [style = filled, label = "Query barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "fooClause = ((BooleanQuery)dmq.getDisjuncts().stream().filter(null).findFirst().get()).clauses().iterator().next().getQuery()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "testBoost['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Query barClause = ((BooleanQuery)dmq.getDisjuncts().stream().filter(null).findFirst().get()).clauses().iterator().next().getQuery()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(3.0,((BoostQuery)q).getBoost(),1e-15)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(q instanceof BoostQuery)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery)clauses(0(.getQuery())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery()@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "q = parse(\"foo bar\",\"tie\",\"0.5\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(2,clauses.length)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "dmq = ((DisjunctionMaxQuery)clauses(0(.getQuery())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "q = parse(\"(foo^2.0 bar)^3.0\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(0.5,((DisjunctionMaxQuery)clauses(0(.getQuery()).getTieBreakerMultiplier(),1e-15)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "q = parse(\"foo^3.0\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(3.0,((BoostQuery)q).getBoost(),1e-15)@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "clauses = clauses(q)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(2.0,((BoostQuery)fooClause).getBoost(),1e-15)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testTie['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertFalse(barClause instanceof BoostQuery)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "q = parse(\"foo^5.0 bar^6.0 +baz^7\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(6.0,((BoostQuery)barClause).getBoost(),1e-15)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "barClause = ((BooleanQuery)dmq.getDisjuncts().stream().filter(null).findFirst().get()).clauses().iterator().next().getQuery()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Query fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery()@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertEquals(1,clauses.length)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(1,clauses.length)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testBoost['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Query fooClause = ((BooleanQuery)dmq.getDisjuncts().stream().filter(null).findFirst().get()).clauses().iterator().next().getQuery()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(7.0,((BoostQuery)clauses(1(.getQuery()).getBoost(),1e-15)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertFalse(q instanceof BoostQuery)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "clauses = clauses(q)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(5.0,((BoostQuery)fooClause).getBoost(),1e-15)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->29 [style = dashed, label="0"];
23->25 [style = bold, label=""];
17->26 [style = bold, label=""];
17->9 [style = dashed, label="0"];
17->1 [style = bold, label=""];
3->24 [style = bold, label=""];
0->19 [style = bold, label=""];
31->9 [style = bold, label=""];
1->26 [style = dashed, label="0"];
34->33 [style = bold, label=""];
7->2 [style = solid, label="q"];
20->28 [style = dashed, label="0"];
30->34 [style = bold, label=""];
12->16 [style = bold, label=""];
32->30 [style = bold, label=""];
12->16 [style = solid, label="q"];
23->0 [style = bold, label=""];
9->16 [style = solid, label="clauses"];
1->13 [style = bold, label=""];
24->22 [style = bold, label=""];
11->18 [style = bold, label=""];
2->12 [style = bold, label=""];
26->13 [style = bold, label=""];
7->9 [style = bold, label=""];
19->5 [style = bold, label=""];
8->17 [style = bold, label=""];
5->2 [style = bold, label=""];
13->29 [style = bold, label=""];
10->30 [style = dashed, label="0"];
20->23 [style = bold, label=""];
13->3 [style = bold, label=""];
0->25 [style = dashed, label="0"];
15->28 [style = bold, label=""];
28->23 [style = bold, label=""];
15->20 [style = bold, label=""];
6->10 [style = bold, label=""];
27->10 [style = bold, label=""];
3->24 [style = solid, label="barClause"];
25->19 [style = bold, label=""];
9->21 [style = bold, label=""];
33->31 [style = bold, label=""];
4->8 [style = bold, label=""];
14->15 [style = bold, label=""];
7->9 [style = solid, label="q"];
16->4 [style = bold, label=""];
18->7 [style = bold, label=""];
29->24 [style = bold, label=""];
29->24 [style = solid, label="barClause"];
10->11 [style = solid, label="q"];
30->34 [style = solid, label="q"];
21->14 [style = bold, label=""];
10->11 [style = bold, label=""];
}
