digraph {
6 [style = filled, label = "testProjectableFilterableNonCooperative['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "CalciteAssert.that().with(newSchema(\"s\",Pair.of(\"beatles2\",table))).query(\"select \"j\" from \"s\".\"beatles2\" where \"i\" = 4\").explainContains(explain).returnsUnordered(\"j=John\",\"j=Paul\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testProjectableFilterableNonCooperative['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(buf.toString(),is(\"returnCount=4, projects=(2, 0(\"))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testPFTableRefusesFilterCooperative['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final String explain = \"PLAN=\" + \"EnumerableInterpreter\" + \" BindableTableScan(table=((s, beatles2((, filters=((=($0, 4)((, projects=((1((\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final String explain = \"PLAN=EnumerableInterpreter\" + \" BindableTableScan(table=((s, beatles2((, filters=((=($0, 4)((, projects=((2(()\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final StringBuilder buf = new StringBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Table table = new BeatlesProjectableFilterableTable(buf,false)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "CalciteAssert.that().with(newSchema(\"s\",Pair.of(\"beatles2\",table))).query(\"select \"k\" from \"s\".\"beatles2\" where \"i\" = 4\").explainContains(explain).returnsUnordered(\"k=1940\",\"k=1942\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(buf.toString(),is(\"returnCount=4, projects=(1, 0(\"))@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9->5 [style = bold, label=""];
0->3 [style = bold, label=""];
1->8 [style = dashed, label="0"];
5->2 [style = solid, label="buf"];
5->2 [style = bold, label=""];
6->5 [style = bold, label=""];
2->0 [style = bold, label=""];
3->1 [style = bold, label=""];
2->10 [style = bold, label=""];
7->8 [style = bold, label=""];
3->7 [style = dashed, label="0"];
4->5 [style = bold, label=""];
10->7 [style = bold, label=""];
0->10 [style = dashed, label="0"];
}
