digraph {
11 [style = filled, label = "KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testBuiltInConfluentAvroDeserializer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState){@Override public Object getSchema(){return SchemaBuilder.record(TEST_RECORD_NAME).namespace(TEST_NAMESPACE).fields().name(TEST_FIELD_NAME).type().stringType().noDefault().endRecord()}}@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,.getName())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(kafkaDecoderExtractor.getKafkaDeserializer().getClass(),)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "WorkUnitState mockWorkUnitState = getMockWorkUnitState(0L,10L)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.getSchemaRegistryClass())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testCustomDeserializer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "WorkUnitState mockWorkUnitState = getMockWorkUnitState()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "mockWorkUnitState.setProp(KafkaSchemaRegistry.KAFKA_SCHEMA_REGISTRY_CLASS,.getName())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.name())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(kafkaDecoderExtractor.getKafkaDeserializer().getClass(),KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.getDeserializerClass())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testBuiltInConfluentAvroDeserializer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->2 [style = solid, label="mockWorkUnitState"];
4->1 [style = bold, label=""];
3->5 [style = bold, label=""];
6->0 [style = bold, label=""];
11->12 [style = bold, label=""];
5->11 [style = solid, label="mockWorkUnitState"];
10->5 [style = bold, label=""];
5->6 [style = dashed, label="0"];
0->9 [style = dashed, label="0"];
5->0 [style = bold, label=""];
5->9 [style = bold, label=""];
2->4 [style = bold, label=""];
13->11 [style = bold, label=""];
12->8 [style = bold, label=""];
7->6 [style = bold, label=""];
6->2 [style = solid, label="mockWorkUnitState"];
0->2 [style = bold, label=""];
9->13 [style = bold, label=""];
}
