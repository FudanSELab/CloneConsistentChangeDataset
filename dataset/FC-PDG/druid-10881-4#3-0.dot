digraph {
22 [style = filled, label = "query instanceof TimeseriesQuery@@@21@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "intervals.add(expectation.getInterval())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final QueryRunner runner@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
141 [style = filled, label = "intervalNo++@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "expectations@@@82@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
121 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "final Capture<? extends QueryPlus> capture = new Capture()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "queryCaptures@@@129@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(capturedQuery.getContextValue(\"bySegment\") == null || capturedQuery.getContextValue(\"bySegment\").equals(false))@@@136@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "List<Interval> intervals = Lists.newArrayList()@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
98 [style = filled, label = "ServerExpectation expectation@@@60@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final int numTimesToQuery@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){HashMap<String,Object> context = new HashMap<>()for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(expected,runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval)))),context))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
135 [style = filled, label = "List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
71 [style = filled, label = "Assert.assertEquals(true,capturedQuery.getContextValue(\"bySegment\"))@@@133@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final Map<DruidServer,ServerExpectations> finalExpectation = serverExpectationList.get(serverExpectationList.size() - 1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
153 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> filteredExpected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableGroupByResults(segmentIds,intervals,results)).once()@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSelectResults(segmentIds,intervals,results)).once()@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "results.add(expectation.getResults())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "results.add(expectation.getResults())@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "List<Iterable<Result<TopNResultValue>>> results = Lists.newArrayList()@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
65 [style = filled, label = "final List<Map<DruidServer,ServerExpectations>> serverExpectationList = populateTimeline(queryIntervals,expectedResults,i,mocks)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "expectations@@@38@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "intervals.add(expectation.getInterval())@@@84@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
122 [style = filled, label = "List<Iterable<Result<TopNResultValue>>> results = new ArrayList<>()@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
111 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@68@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "final Query query@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "final Query query@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "ServerExpectation expectation@@@49@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "List<Object> mocks = Lists.newArrayList()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Capture queryCapture@@@129@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "++i@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
61 [style = filled, label = "results.add(expectation.getResults())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "expectBySegment@@@132@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
129 [style = filled, label = "expectations@@@82@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "QueryPlus capturedQueryPlus = (QueryPlus)queryCapture.getValue()@@@130@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "i < queryIntervals.size()@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DruidServer server = entry.getKey()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
134 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "expectedResultsRangeStart = i@@@96@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "results.add(expectation.getResults())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
132 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@80@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "ServerExpectation expectation@@@27@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "final Interval actualQueryInterval = new Interval(queryIntervals.get(0).getStart(),queryIntervals.get(i).getEnd())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
104 [style = filled, label = "expectations@@@60@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "List<String> segmentIds = Lists.newArrayList()@@@79@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@101@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "query instanceof TimeBoundaryQuery@@@95@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
149 [style = filled, label = "ServerExpectation expectation@@@24@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
108 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@57@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "query instanceof GroupByQuery@@@67@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "Capture queryCapture@@@129@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
55 [style = filled, label = "intervals.add(expectation.getInterval())@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
147 [style = filled, label = "testQueryCachingWithFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeBoundaryResults(segmentIds,intervals,results)).once()@@@87@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
145 [style = filled, label = "final Query query@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "final int expectedResultsRangeStart@@@93@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
143 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
105 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@79@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
81 [style = filled, label = "ServerExpectation expectation@@@71@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
140 [style = filled, label = "final int numTimesToQuery@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "List<Interval> intervals = Lists.newArrayList()@@@80@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "queryCaptures.add(capture)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "results.add(expectation.getResults())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "query instanceof TopNQuery@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "query instanceof TimeBoundaryQuery@@@78@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "results.add(expectation.getResults())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
113 [style = filled, label = "List<Iterable<Result<SelectResultValue>>> results = new ArrayList<>()@@@59@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "final Capture<? extends Map> context = new Capture()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<Interval> intervals = Lists.newArrayList()@@@69@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
119 [style = filled, label = "ServerExpectation expectation@@@27@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
76 [style = filled, label = "finalExpectation.entrySet()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
151 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> results = Lists.newArrayList()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeseriesResults(expectBySegment,segmentIds,intervals,results)).once()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "boolean expectBySegment@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
82 [style = filled, label = "mocks.add(serverView)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "query instanceof SearchQuery@@@45@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
128 [style = filled, label = "testQueryCaching['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
120 [style = filled, label = "expectations@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSearchResults(segmentIds,intervals,results)).once()@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
142 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@14@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "boolean expectBySegment@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
133 [style = filled, label = "List<Capture> queryCaptures = new ArrayList<>()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "results.add(expectation.getResults())@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
138 [style = filled, label = "Object args@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "List<String> segmentIds = Lists.newArrayList()@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "List<Interval> intervals = Lists.newArrayList()@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
100 [style = filled, label = "List<String> segmentIds = Lists.newArrayList()@@@68@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
78 [style = filled, label = "parseResults(queryIntervals,expectedResults,args)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "List<Interval> intervals = Lists.newArrayList()@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "intervals.add(expectation.getInterval())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "final List<Interval> queryIntervals = Lists.newArrayListWithCapacity(args.length / 2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "testQueryCaching['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
126 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@58@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
127 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@69@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
144 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){HashMap<String,List> context = new HashMap<String,List>()for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(new MergeIterable<>(Comparators.naturalNullsFirst(),FunctionalIterable.create(new RangeIterable(expectedResultsRangeStart,expectedResultsRangeEnd)).transformCat(new Function<Integer,Iterable<Iterable<Result<Object>>>>(){@Override public Iterable<Iterable<Result<Object>>> apply(@Nullable Integer input){List<Iterable<Result<Object>>> retVal = new ArrayList<>()final Map<DruidServer,ServerExpectations> exps = serverExpectationList.get(input)for (ServerExpectations expectations : exps.values()){for (ServerExpectation expectation : expectations){retVal.add(expectation.getResults())}}return retVal}})),runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval)))),context))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@103@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
115 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).once()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "expectations@@@71@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
139 [style = filled, label = "int intervalNo = 0@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
150 [style = filled, label = "intervalNo < i + 1@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "ServerExpectations expectations = entry.getValue()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "expectations@@@71@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
114 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
118 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
152 [style = filled, label = "Iterables.addAll((List)expected,filteredExpected.get(intervalNo))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
130 [style = filled, label = "List<Iterable<Result<SearchResultValue>>> results = new ArrayList<>()@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
70 [style = filled, label = "ServerExpectation expectation@@@38@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "intervals.add(expectation.getInterval())@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "QueryRunner queryable = expectations.getQueryRunner()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final List<List<Iterable<Result<Object>>>> expectedResults = Lists.newArrayListWithCapacity(queryIntervals.size())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "List<Iterable<Row>> results = Lists.newArrayList()@@@70@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
95 [style = filled, label = "List<Iterable<Result<SelectResultValue>>> results = Lists.newArrayList()@@@59@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
110 [style = filled, label = "final int numTimesToQuery@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
123 [style = filled, label = "Object args@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
86 [style = filled, label = "List<Interval> intervals = Lists.newArrayList()@@@58@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
125 [style = filled, label = "List<Object> mocks = new ArrayList<>()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
59 [style = filled, label = "List<String> segmentIds = Lists.newArrayList()@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
60 [style = filled, label = "ServerExpectation expectation@@@60@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "query instanceof SelectQuery@@@56@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "List<Capture> queryCaptures = Lists.newArrayList()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
64 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTopNResults(segmentIds,intervals,results)).once()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
137 [style = filled, label = "expectations@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
89 [style = filled, label = "List<Iterable<Result<TimeseriesResultValue>>> results = Lists.newArrayList()@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
62 [style = filled, label = "intervals.add(expectation.getInterval())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "List<Iterable<Result<TimeBoundaryResultValue>>> results = new ArrayList<>()@@@81@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "ServerExpectation expectation@@@82@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@83@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
131 [style = filled, label = "List<Iterable<Row>> results = new ArrayList<>()@@@70@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
73 [style = filled, label = "List<Iterable<Result<TimeBoundaryResultValue>>> results = Lists.newArrayList()@@@81@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
77 [style = filled, label = "List<Iterable<Result<SearchResultValue>>> results = Lists.newArrayList()@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Query capturedQuery = capturedQueryPlus.getQuery()@@@131@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
117 [style = filled, label = "expectations@@@49@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "List<String> segmentIds = Lists.newArrayList()@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
58 [style = filled, label = "List<String> segmentIds = Lists.newArrayList()@@@57@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
148 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).times(0,1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
124 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@15@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
136 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andAnswer(new IAnswer<Sequence>(){@Override public Sequence answer(){return toFilteredQueryableTimeseriesResults((TimeseriesQuery)capture.getValue().getQuery(),segmentIds,queryIntervals,results)}}).times(0,1)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
146 [style = filled, label = "final List<String> segmentIds = Lists.newArrayList()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "expectations@@@49@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "finalExpectation.entrySet()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "final Iterable<Result<Object>> expected = new ArrayList<>()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
121->116 [style = bold, label=""];
26->134 [style = bold, label=""];
94->82 [style = dotted, label="true"];
25->22 [style = bold, label=""];
61->30 [style = bold, label=""];
22->144 [style = dotted, label="false"];
39->54 [style = solid, label="context"];
147->143 [style = dotted, label="true"];
14->129 [style = dotted, label="true"];
94->22 [style = dotted, label="true"];
75->14 [style = solid, label="query"];
72->33 [style = bold, label=""];
94->125 [style = dotted, label="true"];
37->53 [style = bold, label=""];
22->59 [style = dotted, label="true"];
65->50 [style = bold, label=""];
85->82 [style = bold, label=""];
43->108 [style = bold, label=""];
46->94 [style = bold, label=""];
53->38 [style = bold, label=""];
54->65 [style = solid, label="i"];
9->81 [style = dotted, label="true"];
43->58 [style = bold, label=""];
1->65 [style = solid, label="expectedResults"];
9->100 [style = dotted, label="true"];
42->18 [style = solid, label="capture"];
30->84 [style = bold, label=""];
139->150 [style = solid, label="intervalNo"];
94->4 [style = dotted, label="true"];
43->80 [style = dotted, label="true"];
111->127 [style = bold, label=""];
22->61 [style = dotted, label="true"];
43->108 [style = dotted, label="true"];
94->32 [style = dotted, label="true"];
94->101 [style = dotted, label="true"];
22->89 [style = dotted, label="true"];
88->151 [style = dashed, label="0"];
90->8 [style = dotted, label="true"];
130->8 [style = bold, label=""];
43->98 [style = dotted, label="true"];
54->66 [style = solid, label="i"];
106->17 [style = bold, label=""];
140->101 [style = solid, label="numTimesToQuery"];
141->152 [style = solid, label="intervalNo"];
9->111 [style = bold, label=""];
75->102 [style = solid, label="query"];
13->15 [style = bold, label=""];
147->145 [style = dotted, label="true"];
101->10 [style = bold, label=""];
103->74 [style = solid, label="expectBySegment"];
102->66 [style = dotted, label="true"];
39->101 [style = solid, label="context"];
85->125 [style = dashed, label="0"];
22->116 [style = dotted, label="true"];
128->110 [style = dotted, label="true"];
94->148 [style = dotted, label="true"];
22->144 [style = bold, label=""];
2->127 [style = dashed, label="0"];
75->9 [style = solid, label="query"];
14->67 [style = dotted, label="true"];
33->4 [style = bold, label=""];
42->39 [style = bold, label=""];
22->62 [style = dotted, label="true"];
34->55 [style = bold, label=""];
45->53 [style = bold, label=""];
90->114 [style = dotted, label="true"];
75->26 [style = solid, label="query"];
95->80 [style = bold, label=""];
14->17 [style = dotted, label="true"];
80->99 [style = bold, label=""];
83->53 [style = bold, label=""];
90->93 [style = dotted, label="true"];
90->49 [style = dotted, label="true"];
43->126 [style = dotted, label="true"];
49->87 [style = bold, label=""];
22->88 [style = dotted, label="true"];
94->142 [style = dotted, label="true"];
27->21 [style = bold, label=""];
63->4 [style = bold, label=""];
100->2 [style = bold, label=""];
27->148 [style = bold, label=""];
38->139 [style = bold, label=""];
74->71 [style = bold, label=""];
66->6 [style = bold, label=""];
14->63 [style = dotted, label="false"];
74->20 [style = bold, label=""];
71->12 [style = bold, label=""];
108->126 [style = bold, label=""];
9->83 [style = dotted, label="true"];
14->13 [style = dotted, label="true"];
14->106 [style = dotted, label="true"];
26->70 [style = dotted, label="true"];
46->6 [style = solid, label="i"];
89->30 [style = bold, label=""];
47->19 [style = bold, label=""];
43->95 [style = dotted, label="true"];
14->35 [style = dotted, label="true"];
15->73 [style = bold, label=""];
14->105 [style = bold, label=""];
94->42 [style = dotted, label="true"];
43->86 [style = dotted, label="true"];
99->72 [style = bold, label=""];
90->118 [style = dotted, label="true"];
56->1 [style = bold, label=""];
10->54 [style = bold, label=""];
26->19 [style = dotted, label="true"];
145->22 [style = solid, label="query"];
71->48 [style = bold, label=""];
122->19 [style = bold, label=""];
22->136 [style = dotted, label="true"];
39->18 [style = bold, label=""];
72->80 [style = bold, label=""];
1->78 [style = bold, label=""];
94->27 [style = dotted, label="true"];
126->113 [style = bold, label=""];
40->47 [style = bold, label=""];
74->71 [style = dotted, label="true"];
150->101 [style = bold, label=""];
56->78 [style = solid, label="queryIntervals"];
26->120 [style = dotted, label="true"];
97->16 [style = dotted, label="true"];
90->130 [style = dotted, label="true"];
9->57 [style = dotted, label="true"];
147->140 [style = dotted, label="true"];
125->82 [style = bold, label=""];
14->132 [style = dotted, label="true"];
43->72 [style = dotted, label="true"];
6->54 [style = bold, label=""];
86->126 [style = dashed, label="0"];
41->90 [style = solid, label="query"];
5->74 [style = bold, label=""];
22->121 [style = dotted, label="true"];
9->91 [style = dotted, label="true"];
59->146 [style = dashed, label="0"];
94->133 [style = dotted, label="true"];
94->150 [style = dotted, label="true"];
73->106 [style = dashed, label="0"];
85->65 [style = solid, label="mocks"];
110->54 [style = solid, label="numTimesToQuery"];
40->115 [style = dashed, label="0"];
146->151 [style = bold, label=""];
24->74 [style = solid, label="expectBySegment"];
43->60 [style = dotted, label="true"];
9->55 [style = dotted, label="true"];
90->23 [style = dotted, label="true"];
128->103 [style = dotted, label="true"];
139->152 [style = solid, label="intervalNo"];
94->12 [style = dotted, label="true"];
134->115 [style = bold, label=""];
94->54 [style = dotted, label="true"];
2->91 [style = bold, label=""];
11->79 [style = bold, label=""];
14->63 [style = bold, label=""];
46->101 [style = solid, label="i"];
101->150 [style = solid, label="i"];
29->50 [style = bold, label=""];
14->105 [style = dotted, label="true"];
0->54 [style = solid, label="numTimesToQuery"];
148->42 [style = bold, label=""];
43->104 [style = dotted, label="true"];
75->43 [style = solid, label="query"];
43->33 [style = dotted, label="true"];
132->106 [style = bold, label=""];
94->124 [style = dotted, label="true"];
14->13 [style = bold, label=""];
43->99 [style = dotted, label="true"];
90->117 [style = dotted, label="true"];
46->66 [style = solid, label="i"];
123->78 [style = solid, label="args"];
67->92 [style = bold, label=""];
141->150 [style = solid, label="intervalNo"];
94->74 [style = dotted, label="true"];
26->122 [style = dotted, label="true"];
94->125 [style = bold, label=""];
102->66 [style = bold, label=""];
26->79 [style = dotted, label="true"];
88->89 [style = bold, label=""];
54->94 [style = solid, label="i"];
89->135 [style = dashed, label="0"];
58->86 [style = bold, label=""];
136->4 [style = bold, label=""];
54->48 [style = bold, label=""];
33->53 [style = bold, label=""];
90->45 [style = dotted, label="true"];
136->38 [style = bold, label=""];
75->22 [style = solid, label="query"];
54->10 [style = solid, label="i"];
151->84 [style = bold, label=""];
9->34 [style = dotted, label="true"];
26->90 [style = bold, label=""];
75->90 [style = solid, label="query"];
43->58 [style = dotted, label="true"];
14->31 [style = dotted, label="true"];
22->137 [style = dotted, label="true"];
68->134 [style = dashed, label="0"];
58->108 [style = dashed, label="0"];
22->51 [style = dotted, label="true"];
61->37 [style = bold, label=""];
95->113 [style = dashed, label="0"];
62->61 [style = bold, label=""];
64->53 [style = bold, label=""];
22->26 [style = dotted, label="false"];
128->112 [style = dotted, label="true"];
94->69 [style = dotted, label="true"];
77->8 [style = bold, label=""];
9->100 [style = bold, label=""];
46->10 [style = solid, label="i"];
46->150 [style = solid, label="i"];
22->59 [style = bold, label=""];
46->94 [style = solid, label="i"];
101->65 [style = solid, label="i"];
141->150 [style = bold, label=""];
102->6 [style = dotted, label="true"];
90->87 [style = dotted, label="true"];
9->14 [style = bold, label=""];
53->38 [style = dashed, label="0"];
94->53 [style = dotted, label="true"];
97->0 [style = dotted, label="true"];
94->39 [style = dotted, label="true"];
22->151 [style = dotted, label="true"];
37->136 [style = dashed, label="0"];
75->153 [style = dashed, label="0"];
9->14 [style = dotted, label="false"];
131->34 [style = bold, label=""];
139->141 [style = solid, label="intervalNo"];
26->40 [style = dotted, label="true"];
94->65 [style = dotted, label="true"];
101->12 [style = bold, label=""];
90->77 [style = dotted, label="true"];
101->94 [style = solid, label="i"];
26->68 [style = dotted, label="true"];
7->83 [style = bold, label=""];
138->78 [style = solid, label="args"];
55->7 [style = bold, label=""];
38->102 [style = bold, label=""];
150->152 [style = bold, label=""];
97->75 [style = dotted, label="true"];
43->113 [style = dotted, label="true"];
91->34 [style = bold, label=""];
105->132 [style = bold, label=""];
87->8 [style = bold, label=""];
94->5 [style = dotted, label="true"];
22->26 [style = bold, label=""];
97->56 [style = bold, label=""];
128->56 [style = bold, label=""];
9->107 [style = dotted, label="true"];
56->65 [style = solid, label="queryIntervals"];
144->38 [style = bold, label=""];
41->22 [style = solid, label="query"];
78->46 [style = bold, label=""];
150->152 [style = dotted, label="true"];
54->6 [style = solid, label="i"];
22->37 [style = dotted, label="true"];
96->65 [style = bold, label=""];
91->131 [style = dashed, label="0"];
26->90 [style = dotted, label="false"];
102->10 [style = dotted, label="false"];
43->9 [style = bold, label=""];
59->121 [style = dashed, label="0"];
92->17 [style = bold, label=""];
93->118 [style = dashed, label="0"];
90->43 [style = dotted, label="false"];
26->11 [style = dotted, label="true"];
1->78 [style = solid, label="expectedResults"];
9->7 [style = dotted, label="true"];
15->132 [style = dashed, label="0"];
94->28 [style = dotted, label="true"];
94->50 [style = dotted, label="true"];
26->47 [style = dotted, label="true"];
44->93 [style = bold, label=""];
92->35 [style = bold, label=""];
29->133 [style = dashed, label="0"];
46->54 [style = solid, label="i"];
41->26 [style = solid, label="query"];
94->29 [style = dotted, label="true"];
37->4 [style = bold, label=""];
96->54 [style = solid, label="actualQueryInterval"];
14->15 [style = dotted, label="true"];
7->34 [style = bold, label=""];
113->80 [style = bold, label=""];
90->44 [style = bold, label=""];
38->101 [style = solid, label="expected"];
4->27 [style = bold, label=""];
20->12 [style = bold, label=""];
125->65 [style = solid, label="mocks"];
94->85 [style = dotted, label="true"];
94->76 [style = dotted, label="true"];
133->50 [style = bold, label=""];
94->48 [style = dotted, label="true"];
102->101 [style = dotted, label="false"];
30->62 [style = bold, label=""];
118->130 [style = bold, label=""];
65->133 [style = bold, label=""];
86->95 [style = bold, label=""];
87->45 [style = bold, label=""];
128->123 [style = dotted, label="true"];
147->138 [style = dotted, label="true"];
144->4 [style = bold, label=""];
82->96 [style = bold, label=""];
21->42 [style = bold, label=""];
90->36 [style = dotted, label="true"];
97->24 [style = dotted, label="true"];
94->38 [style = dotted, label="true"];
19->11 [style = bold, label=""];
12->94 [style = bold, label=""];
83->4 [style = bold, label=""];
59->88 [style = bold, label=""];
79->19 [style = bold, label=""];
9->111 [style = dotted, label="true"];
41->9 [style = solid, label="query"];
20->48 [style = bold, label=""];
22->121 [style = bold, label=""];
139->150 [style = bold, label=""];
41->14 [style = solid, label="query"];
97->41 [style = dotted, label="true"];
22->135 [style = dotted, label="true"];
26->68 [style = bold, label=""];
114->118 [style = bold, label=""];
94->25 [style = dotted, label="true"];
94->21 [style = dotted, label="true"];
30->136 [style = bold, label=""];
73->17 [style = bold, label=""];
14->52 [style = dotted, label="true"];
22->119 [style = dotted, label="true"];
22->84 [style = dotted, label="true"];
26->3 [style = dotted, label="true"];
46->65 [style = solid, label="i"];
38->152 [style = solid, label="expected"];
94->85 [style = bold, label=""];
116->135 [style = bold, label=""];
90->43 [style = bold, label=""];
75->78 [style = solid, label="args"];
22->146 [style = dotted, label="true"];
41->43 [style = solid, label="query"];
74->20 [style = dotted, label="false"];
88->116 [style = dashed, label="0"];
14->73 [style = dotted, label="true"];
18->25 [style = bold, label=""];
147->56 [style = bold, label=""];
48->5 [style = bold, label=""];
39->25 [style = bold, label=""];
63->53 [style = bold, label=""];
135->30 [style = bold, label=""];
147->153 [style = dotted, label="true"];
96->101 [style = solid, label="actualQueryInterval"];
94->96 [style = dotted, label="true"];
65->29 [style = bold, label=""];
14->92 [style = dotted, label="true"];
93->77 [style = bold, label=""];
84->30 [style = bold, label=""];
50->4 [style = bold, label=""];
44->114 [style = dashed, label="0"];
27->54 [style = solid, label="expectations"];
68->40 [style = bold, label=""];
26->134 [style = dotted, label="true"];
100->111 [style = dashed, label="0"];
26->115 [style = dotted, label="true"];
13->105 [style = dashed, label="0"];
17->67 [style = bold, label=""];
102->101 [style = bold, label=""];
41->102 [style = solid, label="query"];
90->44 [style = dotted, label="true"];
6->152 [style = dashed, label="0"];
64->4 [style = bold, label=""];
115->122 [style = bold, label=""];
26->64 [style = dotted, label="true"];
35->53 [style = bold, label=""];
94->109 [style = dotted, label="true"];
77->130 [style = dashed, label="0"];
150->141 [style = dotted, label="true"];
21->148 [style = dashed, label="0"];
94->102 [style = dotted, label="true"];
9->131 [style = dotted, label="true"];
152->141 [style = bold, label=""];
22->146 [style = bold, label=""];
9->127 [style = dotted, label="true"];
22->149 [style = dotted, label="true"];
35->4 [style = bold, label=""];
94->139 [style = dotted, label="true"];
45->4 [style = bold, label=""];
94->18 [style = dotted, label="true"];
47->122 [style = dashed, label="0"];
79->64 [style = bold, label=""];
9->2 [style = dotted, label="true"];
43->9 [style = dotted, label="false"];
8->49 [style = bold, label=""];
127->131 [style = bold, label=""];
22->30 [style = dotted, label="true"];
128->75 [style = dotted, label="true"];
90->114 [style = bold, label=""];
}
