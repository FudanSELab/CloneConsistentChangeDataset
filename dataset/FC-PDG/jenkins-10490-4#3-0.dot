digraph {
3 [style = filled, label = "DescriptorExtensionList<NodeProperty<?>,NodePropertyDescriptor> descriptors = NodeProperty.all()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DynamicFilter.descriptors().remove(victim)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DynamicFilter.descriptors().add(victim)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "DescriptorExtensionList<RetentionStrategy<?>,Descriptor<RetentionStrategy<?>>> descriptors = RetentionStrategy.all()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(descriptor.nodePropertyDescriptors(null),not(hasItem(victim)))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "propertyFiltering['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assumeThat(\"we need at least two retention strategies to test this\",descriptors.size(),not(anyOf(is(0),is(1))))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(descriptor.nodePropertyDescriptors(null),hasItem(victim))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "DumbSlave.DescriptorImpl descriptor = j.getInstance().getDescriptorByType()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "NodePropertyDescriptor victim = descriptors.iterator().next()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Descriptor<RetentionStrategy<?>> victim = descriptors.iterator().next()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(descriptor.retentionStrategyDescriptors(null),hasItem(victim))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assumeThat(\"we need at least two node properties to test this\",descriptors.size(),not(anyOf(is(0),is(1))))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "propertyFiltering['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertThat(descriptor.nodePropertyDescriptors(null),hasItem(victim))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(descriptor.retentionStrategyDescriptors(null),not(hasItem(victim)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(descriptor.nodePropertyDescriptors(null),containsInAnyOrder(descriptors.toArray(new Descriptor(((()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "j.jenkins.setAuthorizationStrategy(new ProjectMatrixAuthorizationStrategy())@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(descriptor.retentionStrategyDescriptors(null),containsInAnyOrder(descriptors.toArray(new Descriptor(((()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(descriptor.retentionStrategyDescriptors(null),hasItem(victim))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "retentionFiltering['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5->8 [style = solid, label="victim"];
16->10 [style = solid, label="victim"];
6->18 [style = bold, label=""];
5->16 [style = dashed, label="0"];
15->1 [style = bold, label=""];
16->15 [style = solid, label="victim"];
20->16 [style = bold, label=""];
16->17 [style = solid, label="victim"];
19->20 [style = bold, label=""];
5->10 [style = solid, label="victim"];
5->1 [style = solid, label="victim"];
10->8 [style = bold, label=""];
9->17 [style = dashed, label="0"];
5->9 [style = solid, label="victim"];
5->9 [style = bold, label=""];
11->6 [style = bold, label=""];
0->20 [style = dashed, label="0"];
7->13 [style = dashed, label="0"];
8->1 [style = bold, label=""];
16->1 [style = solid, label="victim"];
18->19 [style = bold, label=""];
5->7 [style = solid, label="victim"];
8->15 [style = dashed, label="0"];
6->3 [style = bold, label=""];
16->13 [style = solid, label="victim"];
14->6 [style = bold, label=""];
3->18 [style = dashed, label="0"];
2->6 [style = bold, label=""];
12->11 [style = bold, label=""];
10->15 [style = bold, label=""];
16->17 [style = bold, label=""];
1->7 [style = bold, label=""];
0->5 [style = bold, label=""];
4->19 [style = dashed, label="0"];
3->4 [style = bold, label=""];
17->10 [style = bold, label=""];
4->0 [style = bold, label=""];
9->10 [style = bold, label=""];
1->13 [style = bold, label=""];
}
