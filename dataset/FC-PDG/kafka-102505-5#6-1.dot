digraph {
29 [style = filled, label = "assertThat(capturedChangelogs.getValue().keySet(),equalTo(changelogs))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "allFuture.complete(changelogs.stream().collect(Collectors.toMap(null,null)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "EasyMock.verify(adminClient)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "configureDefault()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "adminClient = EasyMock.createMock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "adminClient = EasyMock.createMock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.replay(result)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\",false),\"processor1\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "configureDefault()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "builder.addProcessor(\"processor1\",new MockProcessorSupplier<>(),\"source1\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "EasyMock.replay(result)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expect(adminClient.listOffsets(EasyMock.capture(capturedChangelogs))).andStubReturn(result)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "builder.addSource(null,\"source1\",null,null,null,\"topic1\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expect(adminClient.listOffsets(emptyMap())).andStubReturn(result)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "subscriptions.put(\"consumer10\",new Subscription(singletonList(\"topic1\"),defaultSubscriptionInfo.encode()))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "builder.addSource(null,\"source1\",null,null,null,\"topic1\")@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "overwriteInternalTopicManagerWithMock(true)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "builder.addStateStore(new MockKeyValueStoreBuilder(\"store\",false),\"processor1\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "builder.addProcessor(\"processor1\",new MockProcessorSupplier<>(),\"source1\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "final Set<TopicPartition> changelogs = mkSet(new TopicPartition(APPLICATION_ID + \"-store-changelog\",0),new TopicPartition(APPLICATION_ID + \"-store-changelog\",1),new TopicPartition(APPLICATION_ID + \"-store-changelog\",2))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "overwriteInternalTopicManagerWithMock(false)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expect(result.all()).andReturn(allFuture)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "shouldRequestEndOffsetsForPreexistingChangelogs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final KafkaFutureImpl<Map<TopicPartition,ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final ListOffsetsResult result = EasyMock.createNiceMock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expect(result.all()).andReturn(allFuture)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "builder.addProcessor(\"processor1\",new MockApiProcessorSupplier<>(),\"source1\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "partitionAssignor.assign(metadata,new GroupSubscription(subscriptions))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "subscriptions.put(\"consumer10\",new Subscription(singletonList(\"topic1\"),defaultSubscriptionInfo.encode()))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final Capture<Map<TopicPartition,OffsetSpec>> capturedChangelogs = EasyMock.newCapture()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22->26 [style = bold, label=""];
15->10 [style = bold, label=""];
15->20 [style = dashed, label="0"];
11->6 [style = solid, label="adminClient"];
30->29 [style = solid, label="changelogs"];
2->24 [style = solid, label="result"];
27->28 [style = bold, label=""];
3->14 [style = bold, label=""];
26->18 [style = bold, label=""];
2->7 [style = solid, label="allFuture"];
0->11 [style = bold, label=""];
5->10 [style = solid, label="result"];
24->13 [style = bold, label=""];
20->25 [style = bold, label=""];
10->7 [style = bold, label=""];
9->16 [style = bold, label=""];
5->23 [style = solid, label="adminClient"];
23->29 [style = bold, label=""];
7->9 [style = bold, label=""];
25->24 [style = bold, label=""];
11->5 [style = bold, label=""];
5->2 [style = bold, label=""];
2->22 [style = solid, label="result"];
6->31 [style = bold, label=""];
31->27 [style = bold, label=""];
30->5 [style = bold, label=""];
1->16 [style = dashed, label="0"];
15->20 [style = bold, label=""];
19->30 [style = bold, label=""];
2->15 [style = bold, label=""];
15->13 [style = solid, label="allFuture"];
12->27 [style = dashed, label="0"];
5->14 [style = solid, label="result"];
1->12 [style = bold, label=""];
4->8 [style = bold, label=""];
8->18 [style = dashed, label="0"];
12->3 [style = bold, label=""];
18->21 [style = bold, label=""];
13->6 [style = bold, label=""];
9->1 [style = bold, label=""];
21->23 [style = bold, label=""];
16->12 [style = bold, label=""];
28->22 [style = bold, label=""];
8->13 [style = bold, label=""];
14->4 [style = bold, label=""];
17->11 [style = bold, label=""];
}
