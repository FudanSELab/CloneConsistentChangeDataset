digraph {
4 [style = filled, label = "history.put(\"id2\",versions2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "List<VersionedSupervisorSpec> versions3 = ImmutableList.of(new VersionedSupervisorSpec(new TestSupervisorSpec(\"id3\",null,Collections.singletonList(\"datasource3\")),\"v1\"),new VersionedSupervisorSpec(new NoopSupervisorSpec(null,null),\"tombstone\"),new VersionedSupervisorSpec(new TestSupervisorSpec(\"id3\",null,Collections.singletonList(\"datasource2\")),\"v2\"),new VersionedSupervisorSpec(new NoopSupervisorSpec(null,null),\"tombstone\"),new VersionedSupervisorSpec(new TestSupervisorSpec(\"id3\",null,Collections.singletonList(\"datasource3\")),\"v2\"),new VersionedSupervisorSpec(new NoopSupervisorSpec(null,Collections.singletonList(\"datasource3\")),\"tombstone\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(503,response.getStatus())@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "response = supervisorResource.specGetHistory(request,\"id1\")@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<VersionedSupervisorSpec> versions2 = ImmutableList.of(new VersionedSupervisorSpec(new TestSupervisorSpec(\"id2\",null,Collections.singletonList(\"datasource2\")),\"v1\"),new VersionedSupervisorSpec(new NoopSupervisorSpec(null,Collections.singletonList(\"datasource2\")),\"tombstone\"),new VersionedSupervisorSpec(new TestSupervisorSpec(\"id2\",null,Collections.singletonList(\"datasource2\")),\"v2\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(versions2,response.getEntity())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "replayAll()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(200,response.getStatus())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(404,response.getStatus())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "history.put(\"id1\",versions1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "resetAll()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(503,response.getStatus())@@@29@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(4)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(new AuthenticationResult(\"notdruid\",\"druid\",null,null)).atLeastOnce()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Map<String,List<VersionedSupervisorSpec>> history = new HashMap<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(4)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "response = supervisorResource.specGetHistory(request,\"id3\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(3)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testSpecGetHistoryWithAuthFailure['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Response response = supervisorResource.specGetHistory(request,\"id1\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(404,response.getStatus())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(new AuthenticationResult(\"druid\",\"druid\",null,null)).atLeastOnce()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(ImmutableList.of(new VersionedSupervisorSpec(new TestSupervisorSpec(\"id3\",null,Collections.singletonList(\"datasource3\")),\"v1\"),new VersionedSupervisorSpec(new NoopSupervisorSpec(null,null),\"tombstone\"),new VersionedSupervisorSpec(new NoopSupervisorSpec(null,null),\"tombstone\"),new VersionedSupervisorSpec(new TestSupervisorSpec(\"id3\",null,Collections.singletonList(\"datasource3\")),\"v2\"),new VersionedSupervisorSpec(new NoopSupervisorSpec(null,Collections.singletonList(\"datasource3\")),\"tombstone\")),response.getEntity())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testSpecGetHistoryWithAuthFailure['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED,true)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "List<VersionedSupervisorSpec> versions1 = ImmutableList.of(new VersionedSupervisorSpec(new TestSupervisorSpec(\"id1\",null,Collections.singletonList(\"datasource1\")),\"v1\"),new VersionedSupervisorSpec(new NoopSupervisorSpec(null,Collections.singletonList(\"datasource3\")),\"tombstone\"),new VersionedSupervisorSpec(new TestSupervisorSpec(\"id1\",null,Collections.singletonList(\"datasource1\")),\"v2\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "verifyAll()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(versions1,response.getEntity())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testSpecGetHistory['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "history.put(\"id3\",versions3)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(200,response.getStatus())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "replayAll()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(3)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "response = supervisorResource.specGetHistory(request,\"id2\")@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "List<VersionedSupervisorSpec> versions1 = ImmutableList.of(new VersionedSupervisorSpec(new TestSupervisorSpec(\"id1\",null,Collections.singletonList(\"datasource1\")),\"v1\"),new VersionedSupervisorSpec(new NoopSupervisorSpec(null,Collections.singletonList(\"datasource1\")),\"tombstone\"),new VersionedSupervisorSpec(new TestSupervisorSpec(\"id1\",null,Collections.singletonList(\"datasource1\")),\"v2\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "response = supervisorResource.specGetHistory(request,\"id3\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "response = supervisorResource.specGetHistory(request,\"id4\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23->22 [style = bold, label=""];
21->24 [style = solid, label="versions1"];
39->33 [style = bold, label=""];
4->40 [style = bold, label=""];
36->37 [style = bold, label=""];
23->4 [style = solid, label="versions2"];
23->19 [style = bold, label=""];
18->2 [style = bold, label=""];
33->20 [style = solid, label="versions1"];
16->34 [style = dashed, label="0"];
8->0 [style = bold, label=""];
22->24 [style = bold, label=""];
40->36 [style = bold, label=""];
11->26 [style = bold, label=""];
21->33 [style = dashed, label="0"];
24->4 [style = bold, label=""];
30->13 [style = bold, label=""];
19->22 [style = bold, label=""];
15->21 [style = bold, label=""];
14->11 [style = bold, label=""];
26->9 [style = bold, label=""];
35->28 [style = bold, label=""];
25->1 [style = bold, label=""];
9->7 [style = bold, label=""];
0->31 [style = bold, label=""];
32->21 [style = bold, label=""];
10->12 [style = bold, label=""];
19->30 [style = solid, label="versions3"];
28->6 [style = bold, label=""];
23->0 [style = solid, label="versions2"];
6->14 [style = bold, label=""];
27->17 [style = bold, label=""];
33->23 [style = bold, label=""];
2->20 [style = bold, label=""];
5->27 [style = bold, label=""];
3->25 [style = bold, label=""];
21->29 [style = solid, label="versions1"];
5->1 [style = dashed, label="0"];
20->29 [style = bold, label=""];
29->10 [style = bold, label=""];
13->3 [style = bold, label=""];
16->28 [style = bold, label=""];
1->38 [style = bold, label=""];
34->35 [style = bold, label=""];
21->23 [style = bold, label=""];
0->34 [style = bold, label=""];
12->8 [style = bold, label=""];
4->30 [style = bold, label=""];
37->25 [style = bold, label=""];
31->16 [style = bold, label=""];
38->27 [style = bold, label=""];
10->0 [style = bold, label=""];
33->24 [style = solid, label="versions1"];
1->5 [style = bold, label=""];
17->18 [style = bold, label=""];
}
