digraph {
16 [style = filled, label = "Timing timing = new Timing()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(discovery.queryForInstances(\"test\").size(),2)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(discovery.queryForInstances(\"test\").size(),1)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Semaphore semaphore = new Semaphore(0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "discovery.start()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "ServiceInstance<String> instance = ServiceInstance.builder().payload(\"thing\").name(\"test\").port(10064).build()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "server.restart()@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ServiceInstance<String> instance2 = ServiceInstance.builder().payload(\"thing\").name(\"test\").port(10065).build()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "discovery = new ServiceDiscoveryImpl<String>(client,\"/test\",new JsonInstanceSerializer<String>(),instance,false){@Override protected void internalRegisterService(ServiceInstance<String> service){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11e75b8servicesemaphore.release()}}@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "discovery = new ServiceDiscoveryImpl<String>(client,\"/test\",new JsonInstanceSerializer<String>(),instance1,false){@Override protected void internalRegisterService(ServiceInstance<String> service){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11e7510servicesemaphore.release()}}@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testCrashedServer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ServiceInstance<String> instance1 = ServiceInstance.builder().payload(\"thing\").name(\"test\").port(10064).build()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "timing.acquireSemaphore(semaphore)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "CuratorFramework client = null@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(discovery.queryForInstances(\"test\").size(),2)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testCrashedServerMultiInstances['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "timing.acquireSemaphore(semaphore)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "discovery.registerService(instance2)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "client.getZookeeperClient().getZooKeeper().getTestable().injectSessionExpiration()@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "ServiceDiscovery<String> discovery = null@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "{CloseableUtils.closeQuietly(discovery)CloseableUtils.closeQuietly(client)}@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(discovery.queryForInstances(\"test\").size(),1)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "client.start()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "timing.acquireSemaphore(semaphore,2)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Compatibility.injectSessionExpiration(client.getZookeeperClient().getZooKeeper())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "{CloseableUtils.closeQuietly(discovery)CloseableUtils.closeQuietly(client)}@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testCrashedServerMultiInstances['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "server.stop()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "timing.acquireSemaphore(semaphore,2)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->1 [style = solid, label="client"];
22->25 [style = bold, label=""];
18->3 [style = bold, label=""];
21->0 [style = bold, label=""];
26->17 [style = bold, label=""];
4->27 [style = solid, label="client"];
2->1 [style = bold, label=""];
8->18 [style = bold, label=""];
5->23 [style = dashed, label="0"];
29->3 [style = bold, label=""];
4->13 [style = bold, label=""];
14->17 [style = solid, label="semaphore"];
25->29 [style = bold, label=""];
17->22 [style = bold, label=""];
15->16 [style = bold, label=""];
14->8 [style = solid, label="semaphore"];
10->6 [style = bold, label=""];
14->10 [style = solid, label="semaphore"];
0->15 [style = bold, label=""];
23->24 [style = solid, label="instance"];
19->0 [style = bold, label=""];
1->17 [style = bold, label=""];
24->27 [style = solid, label="discovery"];
20->10 [style = bold, label=""];
9->6 [style = dashed, label="0"];
7->9 [style = bold, label=""];
28->0 [style = bold, label=""];
3->10 [style = bold, label=""];
24->26 [style = bold, label=""];
18->20 [style = bold, label=""];
5->2 [style = bold, label=""];
23->24 [style = bold, label=""];
6->27 [style = bold, label=""];
14->23 [style = bold, label=""];
1->12 [style = solid, label="discovery"];
3->20 [style = dashed, label="0"];
4->12 [style = solid, label="client"];
11->8 [style = bold, label=""];
7->10 [style = dashed, label="0"];
5->1 [style = solid, label="instance1"];
2->11 [style = solid, label="instance2"];
9->12 [style = bold, label=""];
14->7 [style = solid, label="semaphore"];
16->4 [style = bold, label=""];
6->7 [style = bold, label=""];
13->14 [style = bold, label=""];
14->5 [style = bold, label=""];
17->11 [style = bold, label=""];
4->24 [style = solid, label="client"];
}
