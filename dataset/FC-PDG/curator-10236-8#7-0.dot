digraph {
0 [style = filled, label = "cache = newTreeCacheWithListeners(client.usingNamespace(\"outer\"),\"/test\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(cache.getCurrentChildren(\"/test\").keySet(),ImmutableSet.of(\"one\"))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/test\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testWithNamespace['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "client.create().forPath(\"/outer/test\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "client.create().forPath(\"/outer/test/one\",\"hey there\".getBytes())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testWithNamespace['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "cache = newTreeCacheWithListeners(client,\"/test\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "client.create().forPath(\"/outer\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "cache.start()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEvent(TreeCacheEvent.Type.INITIALIZED)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()),\"hey there\")@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()),\"hey there\")@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "client.create().forPath(\"/test\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertNoMoreEvents()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(cache.getCurrentChildren(\"/test\").keySet(),ImmutableSet.of(\"one\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertNoMoreEvents()@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "client.create().forPath(\"/outer/foo\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(cache.getCurrentChildren(\"/test/one\").keySet(),ImmutableSet.of())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEvent(TreeCacheEvent.Type.INITIALIZED)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "client.create().forPath(\"/test/one\",\"hey there\".getBytes())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/test/one\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testAsyncInitialPopulation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(cache.getCurrentChildren(\"/test/one\").keySet(),ImmutableSet.of())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14->16 [style = bold, label=""];
16->15 [style = bold, label=""];
1->8 [style = bold, label=""];
11->16 [style = dashed, label="0"];
8->3 [style = bold, label=""];
7->0 [style = bold, label=""];
13->19 [style = dashed, label="0"];
11->9 [style = bold, label=""];
2->4 [style = bold, label=""];
12->7 [style = bold, label=""];
3->10 [style = bold, label=""];
21->22 [style = bold, label=""];
0->1 [style = bold, label=""];
19->23 [style = bold, label=""];
5->13 [style = bold, label=""];
2->14 [style = bold, label=""];
12->18 [style = dashed, label="0"];
10->2 [style = bold, label=""];
17->13 [style = bold, label=""];
4->14 [style = dashed, label="0"];
22->1 [style = bold, label=""];
18->21 [style = bold, label=""];
13->6 [style = bold, label=""];
4->11 [style = bold, label=""];
20->19 [style = bold, label=""];
23->18 [style = bold, label=""];
6->23 [style = dashed, label="0"];
9->15 [style = dashed, label="0"];
6->12 [style = bold, label=""];
}
