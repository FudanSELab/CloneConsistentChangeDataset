digraph {
15 [style = filled, label = "tester.checkType(\"round(cast(42 as float), 1)\",\"FLOAT NOT NULL\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "tester.checkType(\"sign(cast(1 as float))\",\"FLOAT NOT NULL\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "tester.checkScalar(\"round(42, -1)\",40,\"INTEGER NOT NULL\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "tester.checkNull(\"round(cast(null as double))\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "tester.checkScalar(\"round(42, -1)\",40,\"INTEGER NOT NULL\")@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testSignFunc['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "tester.setFor(SqlStdOperatorTable.ROUND)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "tester.checkScalar(\"sign(cast(-1 as decimal(1, 0)))\",BigDecimal.valueOf(-1),\"DECIMAL(1, 0) NOT NULL\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "tester.checkNull(\"round(cast(null as double), 1)\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "tester.checkScalar(\"sign(1)\",1,\"INTEGER NOT NULL\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "tester.checkType(\"round('abc', 'def')\",\"DECIMAL(19, 19) NOT NULL\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "tester.checkScalar(\"round(cast(-42.346 as decimal(2, 3)), 2)\",BigDecimal.valueOf(-4235,2),\"DECIMAL(2, 3) NOT NULL\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "tester.checkNull(\"sign(cast(null as integer))\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "tester.checkScalar(\"sign(cast(0 as float))\",0d,\"FLOAT NOT NULL\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "tester.checkType(\"sign(case when false then 1 else null end)\",\"INTEGER\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "tester.checkNull(\"round(43.21, cast(null as integer))\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "tester.checkType(\"round(case when false then 42 else null end, -1)\",\"INTEGER\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "tester.checkType(\"round(42, -1)\",\"INTEGER NOT NULL\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "tester.checkFails(\"^round('abc', 'def')^\",\"Cannot apply 'ROUND' to arguments of type 'ROUND\(<CHAR\(3\)>, <CHAR\(3\)>\)'\. Supported form\(s\): 'ROUND\(<NUMERIC>, <INTEGER>\)'\",false)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "tester.checkScalar(\"round(42.324)\",BigDecimal.valueOf(42,0),\"DECIMAL(5, 3) NOT NULL\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "tester.setFor(SqlStdOperatorTable.SIGN)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "tester.checkFails(\"^sign('abc')^\",\"Cannot apply 'SIGN' to arguments of type 'SIGN\(<CHAR\(3\)>\)'\. Supported form\(s\): 'SIGN\(<NUMERIC>\)'\",false)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testRoundFunc['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "tester.checkScalar(\"round(42)\",42,\"INTEGER NOT NULL\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "tester.checkScalar(\"round(cast(42.346 as decimal(2, 3)))\",BigDecimal.valueOf(42,0),\"DECIMAL(2, 3) NOT NULL\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "tester.checkNull(\"round(cast(null as integer), 1)\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "tester.checkScalar(\"round(cast(42.346 as decimal(2, 3)), 2)\",BigDecimal.valueOf(4235,2),\"DECIMAL(2, 3) NOT NULL\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "strictTester.checkFails(\"^round('abc', 'def')^\",\"Cannot apply 'ROUND' to arguments of type 'ROUND\(<CHAR\(3\)>, <CHAR\(3\)>\)'\. Supported form\(s\): 'ROUND\(<NUMERIC>, <INTEGER>\)'\",false)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "tester.checkScalar(\"round(42.724)\",BigDecimal.valueOf(43,0),\"DECIMAL(5, 3) NOT NULL\")@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "tester.checkNull(\"sign(cast(null as double))\")@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "tester.checkType(\"sign(1)\",\"INTEGER NOT NULL\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testRoundFunc['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
22->26 [style = bold, label=""];
8->19 [style = dashed, label="0"];
17->5 [style = bold, label=""];
19->18 [style = bold, label=""];
15->23 [style = dashed, label="0"];
4->15 [style = bold, label=""];
30->27 [style = bold, label=""];
12->20 [style = bold, label=""];
4->27 [style = dashed, label="0"];
15->6 [style = bold, label=""];
6->19 [style = bold, label=""];
21->25 [style = bold, label=""];
25->29 [style = bold, label=""];
8->21 [style = dashed, label="0"];
24->22 [style = bold, label=""];
10->7 [style = bold, label=""];
0->22 [style = dashed, label="0"];
9->16 [style = bold, label=""];
13->1 [style = bold, label=""];
3->0 [style = bold, label=""];
23->28 [style = bold, label=""];
6->28 [style = dashed, label="0"];
11->5 [style = bold, label=""];
0->10 [style = bold, label=""];
28->21 [style = bold, label=""];
10->26 [style = dashed, label="0"];
7->2 [style = bold, label=""];
2->14 [style = bold, label=""];
5->4 [style = bold, label=""];
6->8 [style = bold, label=""];
31->30 [style = bold, label=""];
8->9 [style = bold, label=""];
1->12 [style = bold, label=""];
9->25 [style = dashed, label="0"];
27->23 [style = bold, label=""];
14->13 [style = bold, label=""];
29->24 [style = bold, label=""];
5->30 [style = dashed, label="0"];
18->16 [style = bold, label=""];
}
