digraph {
16 [style = filled, label = "relBuilder.push(empScan)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "RexNode joinCond = relBuilder.call(SqlStdOperatorTable.CASE,relBuilder.isNull(relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1))),relBuilder.isNull(rightKeyInputRef),relBuilder.isNull(rightKeyInputRef),relBuilder.isNull(relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1))),relBuilder.equals(relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1)),rightKeyInputRef))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "RexNode joinCond = relBuilder.call(SqlStdOperatorTable.CASE,relBuilder.call(SqlStdOperatorTable.IS_NULL,relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1))),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1))),relBuilder.call(SqlStdOperatorTable.EQUALS,relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1)),rightKeyInputRef))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "RexNode joinCond = relBuilder.call(SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1)),rightKeyInputRef)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testPushDownJoinConditionsWithIsNotDistinct['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(newJoin.getLeft(),is(instanceOf()))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Join newJoin = (Join)transformedInput@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "RelNode transformed = RelOptUtil.pushDownJoinConditions(join,relBuilder)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Join join = (Join)relBuilder.build()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "relBuilder.join(JoinRelType.INNER,joinCond)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(newJoin.getCondition().toString(),is(relBuilder.call(SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,RexInputRef.of(empRow.getFieldCount(),join.getRowType()),RexInputRef.of(empRow.getFieldCount() + 1 + rightJoinIndex,join.getRowType())).toString()))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testPushDownJoinConditionsWithExpandedIsNotDistinctUsingCase['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "RexInputRef rightKeyInputRef = RexInputRef.of(empRow.getFieldCount() + rightJoinIndex,empDeptJoinRelFields)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int rightJoinIndex = deptRow.getFieldNames().indexOf(\"DEPTNO\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(transformed.getRowType(),is(join.getRowType()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "RexInputRef leftKeyInputRef = RexInputRef.of(leftJoinIndex,empDeptJoinRelFields)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "relBuilder.push(deptScan)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testPushDownJoinConditionsWithExpandedIsNotDistinctUsingCase['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(leftInput.getProjects().get(empRow.getFieldCount()).toString(),is(relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1)).toString()))@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(transformedInput,is(instanceOf()))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int leftJoinIndex = empScan.getRowType().getFieldNames().indexOf(\"DEPTNO\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Project leftInput = (Project)newJoin.getLeft()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "RelNode transformedInput = transformed.getInput(0)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(transformed,is(instanceOf()))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->0 [style = solid, label="leftKeyInputRef"];
0->4 [style = solid, label="joinCond"];
19->9 [style = bold, label=""];
7->3 [style = solid, label="rightJoinIndex"];
20->16 [style = bold, label=""];
10->17 [style = solid, label="leftJoinIndex"];
15->11 [style = solid, label="transformedInput"];
12->4 [style = bold, label=""];
15->1 [style = solid, label="transformedInput"];
23->16 [style = bold, label=""];
1->18 [style = bold, label=""];
11->1 [style = bold, label=""];
20->4 [style = solid, label="joinCond"];
17->3 [style = bold, label=""];
2->8 [style = solid, label="join"];
21->10 [style = bold, label=""];
3->20 [style = bold, label=""];
3->23 [style = solid, label="rightKeyInputRef"];
2->8 [style = bold, label=""];
4->2 [style = bold, label=""];
9->6 [style = bold, label=""];
3->20 [style = solid, label="rightKeyInputRef"];
16->12 [style = bold, label=""];
3->23 [style = bold, label=""];
10->7 [style = bold, label=""];
23->4 [style = solid, label="joinCond"];
17->20 [style = solid, label="leftKeyInputRef"];
3->0 [style = solid, label="rightKeyInputRef"];
15->11 [style = bold, label=""];
18->19 [style = bold, label=""];
3->0 [style = bold, label=""];
8->13 [style = bold, label=""];
7->17 [style = bold, label=""];
14->10 [style = bold, label=""];
22->10 [style = bold, label=""];
8->5 [style = solid, label="transformed"];
13->5 [style = bold, label=""];
17->23 [style = solid, label="leftKeyInputRef"];
5->15 [style = bold, label=""];
0->16 [style = bold, label=""];
}
