digraph {
89 [style = filled, label = "Assert.assertEquals(\"Should project x\",1,(int)projectedP1.getField(\"x\"))@@@63@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
94 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.getField(\"points\"))@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
135 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@58@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "projectedP2 = points.get(1)@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "projectedP1 = points.get(0)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Schema yRenamed = new Schema(Types.NestedField.optional(22,\"points\",Types.ListType.ofOptional(21,Types.StructType.of(Types.NestedField.optional(18,\"z\",Types.IntegerType.get())))))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "points = (List<Record>)projected.getField(\"points\")@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.get(\"points\"))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
150 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP1.getField(\"y\"))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
121 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.getField(\"points\"))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
108 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.getField(\"points\"))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
130 [style = filled, label = "p2.setField(\"x\",3)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@58@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "projected = writeAndRead(\"x_only\",writeSchema,writeSchema.select(\"points.x\"),record)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "projectedP2 = points.get(1)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "p1.put(\"y\",2)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
101 [style = filled, label = "Assert.assertNull(\"Should not project points list\",projected.getField(\"points\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
122 [style = filled, label = "points = (List<Record>)projected.getField(\"points\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "projectedP1 = points.get(0)@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "Assert.assertNull(\"Should project null z\",projectedP2.getField(\"z\"))@@@55@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
106 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP2.getField(\"y\"))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
120 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.getField(\"id\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
110 [style = filled, label = "Assert.assertEquals(\"Should project z\",2,(int)projectedP1.getField(\"z\"))@@@51@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
87 [style = filled, label = "Record p2 = GenericRecord.create(p1.struct())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Should project x\",1,(int)projectedP1.get(\"x\"))@@@63@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
143 [style = filled, label = "record.setField(\"points\",ImmutableList.of(p1,p2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
142 [style = filled, label = "Assert.assertEquals(\"Should project y\",2,(int)projectedP1.getField(\"y\"))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "Record p1 = GenericRecord.create(writeSchema.findType(\"points.element\").asStructType())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP2.get(\"x\"))@@@40@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
112 [style = filled, label = "record.setField(\"points\",ImmutableList.of(p1,p2))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
113 [style = filled, label = "Assert.assertEquals(\"Should project x\",3,(int)projectedP2.getField(\"x\"))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP1.get(\"x\"))@@@49@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "projected = writeAndRead(\"y_renamed\",writeSchema,yRenamed,record)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
131 [style = filled, label = "record.setField(\"id\",34L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Assert.assertEquals(\"Should project points list\",record.get(\"points\"),projected.get(\"points\"))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
105 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.getField(\"id\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "projectedP2 = points.get(1)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP1.get(\"x\"))@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
85 [style = filled, label = "Assert.assertEquals(\"Should project x\",1,(int)projectedP1.getField(\"x\"))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
74 [style = filled, label = "Record record = GenericRecord.create(writeSchema)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "Assert.assertEquals(\"Should project x\",3,(int)projectedP2.get(\"x\"))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "Assert.assertNull(\"Should contain null z\",projectedP1.get(\"z\"))@@@65@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
54 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.get(\"points\"))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
134 [style = filled, label = "testListOfStructsProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.getField(\"points\"))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(\"Should read 2 points\",2,points.size())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertNull(\"Should contain null z\",projectedP2.get(\"z\"))@@@69@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(\"Should project x\",1,(int)projectedP1.get(\"x\"))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "Record projectedP2 = points.get(1)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "points = (List<Record>)projected.get(\"points\")@@@60@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(22,\"points\",Types.ListType.ofOptional(21,Types.StructType.of(Types.NestedField.required(19,\"x\",Types.IntegerType.get()),Types.NestedField.optional(18,\"y\",Types.IntegerType.get())))))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP2.getField(\"x\"))@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
133 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP2.getField(\"y\"))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "record.put(\"id\",34L)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
146 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP1.getField(\"x\"))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
148 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP1.getField(\"x\"))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP1.getField(\"x\"))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
117 [style = filled, label = "points = (List<Record>)projected.getField(\"points\")@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP2.get(\"x\"))@@@53@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "points = (List<Record>)projected.get(\"points\")@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
115 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
116 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
91 [style = filled, label = "Assert.assertNull(\"Should contain null z\",projectedP2.getField(\"z\"))@@@69@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "List<Record> points = (List<Record>)projected.get(\"points\")@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
96 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP1.getField(\"y\"))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
124 [style = filled, label = "Record record = GenericRecord.create(writeSchema.asStruct())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "Assert.assertNull(\"Should project null y\",projectedP2.getField(\"y\"))@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
125 [style = filled, label = "Assert.assertEquals(\"Should project null z\",null,projectedP2.getField(\"z\"))@@@55@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
107 [style = filled, label = "p2.setField(\"y\",null)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
64 [style = filled, label = "Record projectedP1 = points.get(0)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Assert.assertNull(\"Should contain null z\",projectedP1.getField(\"z\"))@@@65@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertNull(\"Should project null y\",projectedP2.get(\"y\"))@@@68@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
109 [style = filled, label = "testListOfStructsProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
144 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.getField(\"points\"))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Schema zAdded = new Schema(Types.NestedField.optional(22,\"points\",Types.ListType.ofOptional(21,Types.StructType.of(Types.NestedField.required(19,\"x\",Types.IntegerType.get()),Types.NestedField.optional(18,\"y\",Types.IntegerType.get()),Types.NestedField.optional(20,\"z\",Types.IntegerType.get())))))@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "projected = writeAndRead(\"y_only\",writeSchema,writeSchema.select(\"points.y\"),record)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Assert.assertNull(\"Should project null z\",projectedP2.get(\"z\"))@@@55@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
82 [style = filled, label = "Assert.assertNull(\"Should project null y\",projectedP2.getField(\"y\"))@@@68@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "p2.put(\"y\",null)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
139 [style = filled, label = "p1.setField(\"y\",2)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "projected = writeAndRead(\"all_points\",writeSchema,writeSchema.select(\"points\"),record)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "Assert.assertEquals(\"Should project points list\",record.getField(\"points\"),projected.getField(\"points\"))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
138 [style = filled, label = "p1.setField(\"x\",1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertNull(\"Should project null y\",projectedP2.get(\"y\"))@@@41@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
80 [style = filled, label = "Assert.assertEquals(\"Should project x\",3,(int)projectedP2.getField(\"x\"))@@@67@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
132 [style = filled, label = "Assert.assertEquals(\"Should project x\",3,(int)projectedP2.getField(\"x\"))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
140 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP2.getField(\"x\"))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "Assert.assertEquals(\"Should project y\",2,(int)projectedP1.getField(\"y\"))@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "Assert.assertNull(\"Should not project points list\",projected.get(\"points\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "Record p1 = new Record(fromOption(fromOption(record.getSchema().getField(\"points\").schema()).getElementType()))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
136 [style = filled, label = "Assert.assertNull(\"Should not project points list\",projected.getField(\"points\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
128 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP2.getField(\"y\"))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
118 [style = filled, label = "Record p2 = GenericRecord.create(writeSchema.findType(\"points\").asListType().elementType().asStructType())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP2.get(\"y\"))@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(\"Should read 2 points\",2,points.size())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
114 [style = filled, label = "Assert.assertEquals(\"Should project null y\",null,projectedP2.getField(\"y\"))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
111 [style = filled, label = "p1.setField(\"y\",2)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
123 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.getField(\"points\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
137 [style = filled, label = "Assert.assertEquals(\"Should project x\",1,(int)projectedP1.getField(\"x\"))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "p1.put(\"x\",1)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP2.get(\"y\"))@@@54@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "Record projected = writeAndRead(\"id_only\",writeSchema,idOnly,record)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "record.put(\"points\",ImmutableList.of(p1,p2))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
71 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP1.getField(\"y\"))@@@50@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
149 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP2.getField(\"x\"))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "p1.setField(\"x\",1)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
141 [style = filled, label = "List<Record> points = (List<Record>)projected.getField(\"points\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
119 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP1.getField(\"y\"))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(\"Should project x\",3,(int)projectedP2.get(\"x\"))@@@67@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
129 [style = filled, label = "Assert.assertEquals(\"Should project z\",2,(int)projectedP1.getField(\"z\"))@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Assert.assertEquals(\"Should read 2 points\",2,points.size())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Schema idOnly = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(\"Should project y\",2,(int)projectedP1.get(\"y\"))@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "p2.put(\"x\",3)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(\"Should project z\",2,(int)projectedP1.get(\"z\"))@@@51@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.get(\"points\"))@@@59@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(\"Should read 2 points\",2,points.size())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Should project y\",2,(int)projectedP1.get(\"y\"))@@@64@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
58 [style = filled, label = "projected = writeAndRead(\"z_added\",writeSchema,zAdded,record)@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
78 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
73 [style = filled, label = "points = (List<Record>)projected.getField(\"points\")@@@60@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
104 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP2.getField(\"y\"))@@@54@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
53 [style = filled, label = "Record p2 = new Record(p1.getSchema())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
68 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
145 [style = filled, label = "Record p1 = GenericRecord.create(writeSchema.findType(\"points\").asListType().elementType().asStructType())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "points = (List<Record>)projected.get(\"points\")@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "testListOfStructsProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP1.get(\"y\"))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
98 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.getField(\"points\"))@@@59@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
97 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP1.getField(\"x\"))@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.get(\"points\"))@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP1.get(\"y\"))@@@50@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
84 [style = filled, label = "Assert.assertEquals(\"Should project y\",2,(int)projectedP1.getField(\"y\"))@@@64@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
103 [style = filled, label = "record.setField(\"id\",34L)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
147 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
126 [style = filled, label = "p2.setField(\"y\",null)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
127 [style = filled, label = "Assert.assertEquals(\"Should project points list\",record.getField(\"points\"),projected.getField(\"points\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "projectedP1 = points.get(0)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "points = (List<Record>)projected.getField(\"points\")@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
86 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP2.getField(\"x\"))@@@53@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75 [style = filled, label = "List<Record> points = (List<Record>)projected.getField(\"points\")@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
90 [style = filled, label = "p2.setField(\"x\",3)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
86->104 [style = bold, label=""];
9->50 [style = bold, label=""];
38->120 [style = dashed, label="0"];
35->48 [style = bold, label=""];
119->129 [style = bold, label=""];
63->15 [style = bold, label=""];
53->50 [style = solid, label="p2"];
34->148 [style = dashed, label="0"];
72->41 [style = bold, label=""];
67->31 [style = bold, label=""];
75->6 [style = bold, label=""];
33->74 [style = bold, label=""];
39->123 [style = dashed, label="0"];
36->29 [style = bold, label=""];
98->73 [style = bold, label=""];
20->115 [style = bold, label=""];
18->120 [style = bold, label=""];
27->28 [style = bold, label=""];
2->150 [style = dashed, label="0"];
88->112 [style = solid, label="p1"];
45->33 [style = bold, label=""];
51->58 [style = solid, label="zAdded"];
7->128 [style = dashed, label="0"];
74->18 [style = solid, label="record"];
87->112 [style = solid, label="p2"];
104->99 [style = bold, label=""];
27->73 [style = dashed, label="0"];
135->121 [style = bold, label=""];
23->124 [style = dashed, label="0"];
33->23 [style = solid, label="writeSchema"];
7->52 [style = bold, label=""];
74->103 [style = bold, label=""];
9->107 [style = dashed, label="0"];
93->3 [style = bold, label=""];
8->102 [style = bold, label=""];
52->68 [style = bold, label=""];
16->98 [style = dashed, label="0"];
17->103 [style = dashed, label="0"];
80->82 [style = bold, label=""];
128->52 [style = bold, label=""];
57->149 [style = bold, label=""];
65->7 [style = bold, label=""];
57->86 [style = bold, label=""];
57->63 [style = bold, label=""];
23->41 [style = solid, label="record"];
50->5 [style = bold, label=""];
6->64 [style = bold, label=""];
34->26 [style = bold, label=""];
0->25 [style = bold, label=""];
96->21 [style = bold, label=""];
109->33 [style = bold, label=""];
39->77 [style = dashed, label="0"];
31->139 [style = dashed, label="0"];
124->8 [style = solid, label="record"];
49->130 [style = dashed, label="0"];
41->83 [style = bold, label=""];
47->136 [style = dashed, label="0"];
88->95 [style = bold, label=""];
70->32 [style = bold, label=""];
84->70 [style = bold, label=""];
126->143 [style = bold, label=""];
66->36 [style = bold, label=""];
15->104 [style = dashed, label="0"];
12->141 [style = dashed, label="0"];
15->133 [style = dashed, label="0"];
23->17 [style = bold, label=""];
46->50 [style = solid, label="p1"];
37->8 [style = solid, label="yRenamed"];
97->71 [style = bold, label=""];
56->140 [style = dashed, label="0"];
32->11 [style = bold, label=""];
114->37 [style = bold, label=""];
23->8 [style = solid, label="record"];
74->52 [style = solid, label="record"];
41->13 [style = bold, label=""];
18->105 [style = bold, label=""];
148->119 [style = bold, label=""];
4->16 [style = bold, label=""];
124->20 [style = solid, label="record"];
52->135 [style = bold, label=""];
20->61 [style = bold, label=""];
82->91 [style = bold, label=""];
116->144 [style = bold, label=""];
18->38 [style = bold, label=""];
129->57 [style = bold, label=""];
61->78 [style = dashed, label="0"];
42->68 [style = dashed, label="0"];
4->76 [style = dashed, label="0"];
122->3 [style = bold, label=""];
21->113 [style = bold, label=""];
146->142 [style = bold, label=""];
0->84 [style = dashed, label="0"];
100->79 [style = bold, label=""];
117->29 [style = bold, label=""];
25->70 [style = dashed, label="0"];
24->82 [style = dashed, label="0"];
74->20 [style = solid, label="record"];
23->20 [style = solid, label="record"];
62->125 [style = dashed, label="0"];
24->55 [style = bold, label=""];
115->127 [style = bold, label=""];
26->119 [style = dashed, label="0"];
102->94 [style = bold, label=""];
77->75 [style = bold, label=""];
94->92 [style = bold, label=""];
61->115 [style = dashed, label="0"];
107->112 [style = bold, label=""];
23->52 [style = solid, label="record"];
40->34 [style = bold, label=""];
145->138 [style = bold, label=""];
33->41 [style = solid, label="writeSchema"];
51->58 [style = bold, label=""];
64->85 [style = bold, label=""];
9->126 [style = dashed, label="0"];
76->98 [style = bold, label=""];
64->137 [style = bold, label=""];
33->23 [style = bold, label=""];
56->10 [style = bold, label=""];
32->80 [style = bold, label=""];
41->147 [style = bold, label=""];
133->125 [style = bold, label=""];
52->42 [style = bold, label=""];
19->57 [style = bold, label=""];
8->116 [style = bold, label=""];
21->65 [style = bold, label=""];
43->66 [style = bold, label=""];
23->18 [style = solid, label="record"];
106->52 [style = bold, label=""];
2->21 [style = bold, label=""];
58->76 [style = bold, label=""];
83->77 [style = bold, label=""];
67->95 [style = dashed, label="0"];
65->113 [style = dashed, label="0"];
31->53 [style = bold, label=""];
95->111 [style = bold, label=""];
63->86 [style = dashed, label="0"];
55->91 [style = dashed, label="0"];
44->41 [style = bold, label=""];
39->12 [style = bold, label=""];
108->93 [style = bold, label=""];
35->69 [style = dashed, label="0"];
38->47 [style = bold, label=""];
10->79 [style = dashed, label="0"];
111->87 [style = bold, label=""];
23->74 [style = dashed, label="0"];
29->40 [style = bold, label=""];
101->20 [style = bold, label=""];
7->106 [style = dashed, label="0"];
50->143 [style = dashed, label="0"];
79->37 [style = bold, label=""];
112->5 [style = bold, label=""];
49->90 [style = dashed, label="0"];
145->143 [style = solid, label="p1"];
138->139 [style = bold, label=""];
143->5 [style = bold, label=""];
137->150 [style = bold, label=""];
38->105 [style = dashed, label="0"];
1->122 [style = dashed, label="0"];
113->106 [style = bold, label=""];
40->97 [style = bold, label=""];
85->96 [style = bold, label=""];
99->51 [style = bold, label=""];
66->144 [style = dashed, label="0"];
105->101 [style = bold, label=""];
17->46 [style = bold, label=""];
59->137 [style = dashed, label="0"];
33->8 [style = solid, label="writeSchema"];
124->52 [style = solid, label="record"];
62->51 [style = bold, label=""];
16->27 [style = bold, label=""];
60->89 [style = bold, label=""];
131->145 [style = bold, label=""];
69->81 [style = bold, label=""];
92->29 [style = bold, label=""];
33->20 [style = solid, label="writeSchema"];
1->3 [style = bold, label=""];
142->30 [style = bold, label=""];
87->90 [style = bold, label=""];
33->18 [style = solid, label="writeSchema"];
13->39 [style = bold, label=""];
63->149 [style = dashed, label="0"];
5->18 [style = bold, label=""];
61->44 [style = bold, label=""];
44->127 [style = dashed, label="0"];
64->59 [style = bold, label=""];
31->111 [style = dashed, label="0"];
26->19 [style = bold, label=""];
11->24 [style = bold, label=""];
136->20 [style = bold, label=""];
26->71 [style = dashed, label="0"];
19->129 [style = dashed, label="0"];
124->18 [style = solid, label="record"];
132->128 [style = bold, label=""];
2->96 [style = dashed, label="0"];
67->138 [style = dashed, label="0"];
78->72 [style = bold, label=""];
74->58 [style = solid, label="record"];
60->14 [style = bold, label=""];
13->83 [style = dashed, label="0"];
46->67 [style = bold, label=""];
140->114 [style = bold, label=""];
28->60 [style = bold, label=""];
35->146 [style = dashed, label="0"];
44->72 [style = dashed, label="0"];
147->123 [style = bold, label=""];
54->108 [style = dashed, label="0"];
50->112 [style = dashed, label="0"];
20->78 [style = bold, label=""];
33->52 [style = solid, label="writeSchema"];
34->97 [style = dashed, label="0"];
47->101 [style = dashed, label="0"];
90->107 [style = bold, label=""];
58->4 [style = bold, label=""];
43->116 [style = dashed, label="0"];
37->8 [style = bold, label=""];
124->131 [style = bold, label=""];
48->30 [style = bold, label=""];
22->35 [style = bold, label=""];
127->41 [style = bold, label=""];
33->58 [style = solid, label="writeSchema"];
66->94 [style = dashed, label="0"];
23->58 [style = solid, label="record"];
40->148 [style = bold, label=""];
10->37 [style = bold, label=""];
89->84 [style = bold, label=""];
30->140 [style = bold, label=""];
48->142 [style = dashed, label="0"];
120->136 [style = bold, label=""];
53->87 [style = dashed, label="0"];
12->75 [style = dashed, label="0"];
103->88 [style = bold, label=""];
19->110 [style = dashed, label="0"];
10->114 [style = dashed, label="0"];
13->147 [style = dashed, label="0"];
74->41 [style = solid, label="record"];
21->132 [style = bold, label=""];
36->92 [style = dashed, label="0"];
144->117 [style = bold, label=""];
150->21 [style = bold, label=""];
56->100 [style = dashed, label="0"];
71->110 [style = bold, label=""];
25->32 [style = bold, label=""];
54->121 [style = dashed, label="0"];
65->132 [style = dashed, label="0"];
118->143 [style = solid, label="p2"];
15->62 [style = bold, label=""];
8->43 [style = bold, label=""];
22->146 [style = bold, label=""];
73->28 [style = bold, label=""];
12->6 [style = bold, label=""];
3->22 [style = bold, label=""];
1->93 [style = dashed, label="0"];
17->131 [style = dashed, label="0"];
36->117 [style = dashed, label="0"];
130->126 [style = bold, label=""];
149->133 [style = bold, label=""];
48->81 [style = dashed, label="0"];
53->49 [style = bold, label=""];
59->85 [style = dashed, label="0"];
139->118 [style = bold, label=""];
110->57 [style = bold, label=""];
42->135 [style = dashed, label="0"];
123->141 [style = bold, label=""];
33->74 [style = solid, label="writeSchema"];
14->0 [style = bold, label=""];
22->69 [style = bold, label=""];
30->100 [style = bold, label=""];
53->118 [style = dashed, label="0"];
43->102 [style = dashed, label="0"];
5->18 [style = solid, label="idOnly"];
47->20 [style = bold, label=""];
11->80 [style = dashed, label="0"];
68->108 [style = bold, label=""];
30->56 [style = bold, label=""];
59->2 [style = bold, label=""];
141->6 [style = bold, label=""];
121->122 [style = bold, label=""];
62->99 [style = dashed, label="0"];
42->54 [style = bold, label=""];
124->41 [style = solid, label="record"];
49->9 [style = bold, label=""];
81->30 [style = bold, label=""];
134->33 [style = bold, label=""];
33->124 [style = bold, label=""];
118->130 [style = bold, label=""];
14->89 [style = dashed, label="0"];
74->8 [style = solid, label="record"];
54->1 [style = bold, label=""];
}
