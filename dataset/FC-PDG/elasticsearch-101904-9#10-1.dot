digraph {
17 [style = filled, label = "IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state,IndicesOptions.lenientExpandOpen(),SystemIndexAccessLevel.NONE)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testConvertWildcardsJustIndicesTests['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testXXX\",\"-testXXX\"))),equalTo(newHashSet(\"testXXX\",\"-testXXX\")))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testXXX\",\"testY*\"))),equalTo(newHashSet(\"testXXX\",\"testYYY\")))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"kuku*Y*\"))),equalTo(newHashSet(\"kukuYYY\")))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testXXX\",\"-testX*\"))),equalTo(newHashSet(\"testXXX\")))@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testMultipleWildcards['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state,IndicesOptions.lenientExpandOpen(),NONE)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"*Y*X\"))).size(),equalTo(0))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"test*Y*X\"))).size(),equalTo(0))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "IndexNameExpressionResolver.WildcardExpressionResolver resolver = new IndexNameExpressionResolver.WildcardExpressionResolver()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testXXX\",\"testYYY\"))),equalTo(newHashSet(\"testXXX\",\"testYYY\")))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"test*X*\"))),equalTo(newHashSet(\"testXXX\",\"testXXY\",\"testXYY\")))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"*\",\"-kuku\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"testXXX\"))),equalTo(newHashSet(\"testXXX\")))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testConvertWildcardsJustIndicesTests['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testXXX\",\"testYYY\"))),equalTo(newHashSet(\"testXXX\",\"testYYY\")))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"*\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\",\"kuku\")))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testXXX\",\"ku*\"))),equalTo(newHashSet(\"testXXX\",\"kuku\")))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Metadata.Builder mdBuilder = Metadata.builder().put(indexBuilder(\"testXXX\")).put(indexBuilder(\"testXYY\")).put(indexBuilder(\"testYYY\")).put(indexBuilder(\"kuku\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"testX*\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\")))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Metadata.Builder mdBuilder = Metadata.builder().put(indexBuilder(\"testXXX\")).put(indexBuilder(\"testXXY\")).put(indexBuilder(\"testXYY\")).put(indexBuilder(\"testYYY\")).put(indexBuilder(\"kuku\")).put(indexBuilder(\"kukuYYY\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"*Y*\"))),equalTo(newHashSet(\"testXXY\",\"testXYY\",\"testYYY\",\"kukuYYY\")))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"test*X*Y\"))),equalTo(newHashSet(\"testXXY\",\"testXYY\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"test*\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testX*\",\"kuku\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"kuku\")))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->19 [style = dashed, label="0"];
3->0 [style = solid, label="context"];
15->23 [style = dashed, label="0"];
3->17 [style = dashed, label="0"];
6->17 [style = solid, label="state"];
6->3 [style = solid, label="state"];
16->8 [style = bold, label=""];
22->19 [style = bold, label=""];
3->11 [style = solid, label="context"];
3->1 [style = solid, label="context"];
3->2 [style = solid, label="context"];
17->8 [style = solid, label="context"];
3->19 [style = solid, label="context"];
17->13 [style = solid, label="context"];
11->4 [style = bold, label=""];
12->17 [style = bold, label=""];
14->10 [style = bold, label=""];
3->4 [style = solid, label="context"];
17->15 [style = solid, label="context"];
17->0 [style = solid, label="context"];
1->21 [style = dashed, label="0"];
2->9 [style = bold, label=""];
3->16 [style = bold, label=""];
17->2 [style = solid, label="context"];
3->22 [style = bold, label=""];
13->11 [style = bold, label=""];
10->6 [style = bold, label=""];
1->13 [style = bold, label=""];
17->7 [style = solid, label="context"];
19->25 [style = bold, label=""];
3->13 [style = solid, label="context"];
17->16 [style = solid, label="context"];
0->7 [style = bold, label=""];
17->4 [style = solid, label="context"];
3->8 [style = solid, label="context"];
18->10 [style = bold, label=""];
8->2 [style = bold, label=""];
5->0 [style = bold, label=""];
23->21 [style = bold, label=""];
3->9 [style = solid, label="context"];
17->1 [style = solid, label="context"];
9->15 [style = bold, label=""];
17->5 [style = solid, label="context"];
3->22 [style = solid, label="context"];
26->23 [style = bold, label=""];
3->26 [style = solid, label="context"];
25->26 [style = bold, label=""];
9->26 [style = dashed, label="0"];
2->25 [style = dashed, label="0"];
17->9 [style = solid, label="context"];
12->3 [style = bold, label=""];
17->11 [style = solid, label="context"];
3->15 [style = solid, label="context"];
3->16 [style = solid, label="context"];
3->5 [style = solid, label="context"];
20->24 [style = bold, label=""];
24->6 [style = bold, label=""];
3->25 [style = solid, label="context"];
3->7 [style = solid, label="context"];
4->5 [style = bold, label=""];
10->24 [style = dashed, label="0"];
17->16 [style = bold, label=""];
16->22 [style = dashed, label="0"];
15->1 [style = bold, label=""];
6->12 [style = bold, label=""];
}
