digraph {
17 [style = filled, label = "assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "validateGraphState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(graph.nodes()).isEqualTo(asGraph.nodes())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node))@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertStronglyEquivalent(graph,ImmutableValueGraph.copyOf(graph))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Graph<Integer> asGraph = graph.asGraph()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertStronglyEquivalent(graph,Graphs.copyOf(graph))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(graph.edges()).isEqualTo(asGraph.edges())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "validateGraphState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "boolean hasEdge = graph.hasEdgeConnecting(node,otherNode)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "validateGraphState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "AbstractGraphTest.validateGraph(asGraph)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
0->16 [style = bold, label=""];
1->8 [style = bold, label=""];
2->3 [style = bold, label=""];
3->11 [style = bold, label=""];
16->19 [style = solid, label="hasEdge"];
4->2 [style = bold, label=""];
16->17 [style = bold, label=""];
20->1 [style = bold, label=""];
12->0 [style = bold, label=""];
17->19 [style = bold, label=""];
8->7 [style = bold, label=""];
19->16 [style = bold, label=""];
19->5 [style = bold, label=""];
11->5 [style = bold, label=""];
5->6 [style = bold, label=""];
18->1 [style = bold, label=""];
9->15 [style = bold, label=""];
7->13 [style = solid, label="asGraph"];
15->12 [style = bold, label=""];
6->9 [style = bold, label=""];
10->1 [style = bold, label=""];
13->14 [style = bold, label=""];
0->5 [style = bold, label=""];
14->4 [style = bold, label=""];
}
