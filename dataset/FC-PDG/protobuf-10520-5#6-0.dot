digraph {
21 [style = filled, label = "List<ByteBuffer> byteBuffers = stringUnderTest.asReadOnlyByteBufferList()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testAsReadOnlyByteBufferList['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(bytesSeen + thisLength <= BYTES.length)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "byte(( roundTripBytes = new byte((((@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(classUnderTest + \".asReadOnlyByteBufferTest() must give back the same bytes\",Arrays.equals(referenceBytes,roundTripBytes))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(bytesSeen == BYTES.length)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "testAsReadOnlyByteBufferList['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertWithMessage(\"%s.asReadOnlyByteBufferTest() must give back the same bytes\",CLASSNAME).that(Arrays.equals(BYTES,roundTripBytes)).isTrue()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "bytesSeen += thisLength@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(bytesSeen + thisLength <= BYTES.length).isTrue()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "int thisLength = byteBuffer.remaining()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "byteBuffer.get(roundTripBytes,bytesSeen,thisLength)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(byteBuffer.isReadOnly())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(bytesSeen == referenceBytes.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(bytesSeen + thisLength <= referenceBytes.length)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "int bytesSeen = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testAsReadOnlyByteBufferList['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(BYTES).hasLength(bytesSeen)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(byteBuffer.isReadOnly()).isTrue()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertTrue(CLASSNAME + \".asReadOnlyByteBufferTest() must give back the same bytes\",Arrays.equals(BYTES,roundTripBytes))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "byte(( roundTripBytes = new byte((((@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<ByteBuffer> byteBuffers = testString.asReadOnlyByteBufferList()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->18 [style = solid, label="bytesSeen"];
4->10 [style = bold, label=""];
10->15 [style = dashed, label="0"];
6->10 [style = solid, label="roundTripBytes"];
8->2 [style = solid, label="thisLength"];
6->20 [style = dashed, label="0"];
0->19 [style = bold, label=""];
0->11 [style = solid, label="bytesSeen"];
8->0 [style = solid, label="thisLength"];
3->18 [style = dashed, label="0"];
8->14 [style = bold, label=""];
0->11 [style = bold, label=""];
19->17 [style = bold, label=""];
7->20 [style = bold, label=""];
7->2 [style = solid, label="bytesSeen"];
18->2 [style = bold, label=""];
8->18 [style = solid, label="thisLength"];
11->15 [style = bold, label=""];
0->19 [style = solid, label="bytesSeen"];
7->3 [style = solid, label="bytesSeen"];
8->3 [style = solid, label="thisLength"];
20->2 [style = solid, label="roundTripBytes"];
12->2 [style = bold, label=""];
20->8 [style = bold, label=""];
2->0 [style = bold, label=""];
9->18 [style = bold, label=""];
9->14 [style = dashed, label="0"];
3->12 [style = dashed, label="0"];
3->2 [style = bold, label=""];
0->4 [style = solid, label="bytesSeen"];
0->4 [style = bold, label=""];
16->21 [style = bold, label=""];
14->12 [style = bold, label=""];
7->6 [style = bold, label=""];
6->8 [style = bold, label=""];
0->8 [style = bold, label=""];
8->9 [style = bold, label=""];
10->17 [style = dashed, label="0"];
13->5 [style = bold, label=""];
5->21 [style = dashed, label="0"];
9->3 [style = bold, label=""];
5->7 [style = bold, label=""];
21->7 [style = bold, label=""];
0->2 [style = solid, label="bytesSeen"];
4->19 [style = dashed, label="0"];
6->2 [style = solid, label="roundTripBytes"];
4->11 [style = dashed, label="0"];
0->3 [style = solid, label="bytesSeen"];
7->18 [style = solid, label="bytesSeen"];
20->17 [style = solid, label="roundTripBytes"];
}
