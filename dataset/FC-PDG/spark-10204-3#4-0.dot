digraph {
2 [style = filled, label = "List<List<Tuple2<Integer,String>>> expected = Arrays.asList(Arrays.asList(new Tuple2<>(1,\"california\"),new Tuple2<>(3,\"california\"),new Tuple2<>(4,\"new york\"),new Tuple2<>(1,\"new york\")),Arrays.asList(new Tuple2<>(5,\"california\"),new Tuple2<>(5,\"california\"),new Tuple2<>(3,\"new york\"),new Tuple2<>(1,\"new york\")))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<List<Tuple2<Integer,String>>> result = JavaTestUtils.runStreams(ssc,2,2)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "JavaTestUtils.attachTestOutputStream(reversed)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "JavaPairDStream<String,Integer> pairStream = JavaPairDStream.fromJavaDStream(stream)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "JavaPairDStream<Integer,String> reversed = pairStream.mapPartitionsToPair(null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "JavaPairDStream<Integer,String> reversed = pairStream.mapToPair(new PairFunction<Tuple2<String,Integer>,Integer,String>(){@Override public Tuple2<Integer,String> call(Tuple2<String,Integer> in){return in.swap()}})@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "List<List<Tuple2<String,Integer>>> inputData = stringIntKVStream@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<List<Tuple2<Integer,String>>> result = JavaTestUtils.runStreams(ssc,2,2)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testPairMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "JavaTestUtils.attachTestOutputStream(reversed)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "JavaTestUtils.attachTestOutputStream(reversed)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "JavaPairDStream<Integer,String> reversed = pairStream.mapToPair(null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testPairMapPartitions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testPairMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "JavaDStream<Tuple2<String,Integer>> stream = JavaTestUtils.attachTestInputStream(ssc,inputData,1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(expected,result)@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "List<List<Tuple2<Integer,String>>> result = JavaTestUtils.runStreams(ssc,2,2)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(expected,result)@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0->16 [style = bold, label=""];
7->1 [style = bold, label=""];
2->17 [style = solid, label="expected"];
6->11 [style = dashed, label="0"];
2->0 [style = solid, label="expected"];
5->15 [style = bold, label=""];
1->0 [style = solid, label="result"];
15->0 [style = solid, label="reversed"];
4->2 [style = bold, label=""];
1->0 [style = bold, label=""];
9->10 [style = bold, label=""];
16->17 [style = bold, label=""];
11->9 [style = bold, label=""];
3->4 [style = bold, label=""];
16->17 [style = solid, label="result"];
4->8 [style = solid, label="inputData"];
11->9 [style = solid, label="reversed"];
5->6 [style = bold, label=""];
8->5 [style = bold, label=""];
10->13 [style = bold, label=""];
12->4 [style = bold, label=""];
6->7 [style = solid, label="reversed"];
6->15 [style = dashed, label="0"];
15->0 [style = bold, label=""];
8->5 [style = solid, label="stream"];
2->13 [style = solid, label="expected"];
5->11 [style = bold, label=""];
6->7 [style = bold, label=""];
10->13 [style = solid, label="result"];
2->8 [style = bold, label=""];
14->4 [style = bold, label=""];
}
