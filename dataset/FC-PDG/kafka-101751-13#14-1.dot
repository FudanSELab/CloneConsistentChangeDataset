digraph {
1 [style = filled, label = "shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "inputTopic.pipeInput(\"A\",\"ignored\",15L)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"ignored\",15L))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "final KeyValueStore<String,Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "inputTopic.pipeInput(\"A\",\"ignored\",10L)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(output(),hasItems(new KeyValueTimestamp<>(\"A\",\"1\",5),new KeyValueTimestamp<>(\"A\",\"0\",15),new KeyValueTimestamp<>(\"A\",\"2\",15),new KeyValueTimestamp<>(\"A\",\"0\",15),new KeyValueTimestamp<>(\"A\",\"3\",15)))@@@8@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "inputTopic.pipeInput(\"A\",\"ignored\",5L)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final TestInputTopic<String,String> inputTopic = driver.createInputTopic(INPUT_TOPIC,new StringSerializer(),new StringSerializer())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "builder.table(INPUT_TOPIC,CONSUMED).transformValues(new StatefulTransformerSupplier(),Materialized.as(QUERYABLE_NAME).withKeySerde(Serdes.String()).withValueSerde(Serdes.Integer())).groupBy(toForceSendingOfOldValues(),Grouped.with(Serdes.String(),Serdes.Integer())).reduce(MockReducer.INTEGER_ADDER,MockReducer.INTEGER_SUBTRACTOR).mapValues(mapBackToStrings()).toStream().process(capture)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"aa\",15L))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"aaa\",10))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"ignored\",5L))@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"a\",5L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(keyValueStore.get(\"A\"),is(3))@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertThat(output(),hasItems(new KeyValueTimestamp<>(\"A\",\"1\",5),new KeyValueTimestamp<>(\"A\",\"0\",15),new KeyValueTimestamp<>(\"A\",\"2\",15),new KeyValueTimestamp<>(\"A\",\"0\",15),new KeyValueTimestamp<>(\"A\",\"3\",15)))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "driver = new TopologyTestDriver(builder.build(),props())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "builder.table(INPUT_TOPIC,CONSUMED).transformValues(new StatelessTransformerSupplier()).groupBy(toForceSendingOfOldValues(),Grouped.with(Serdes.String(),Serdes.Integer())).reduce(MockReducer.INTEGER_ADDER,MockReducer.INTEGER_SUBTRACTOR).mapValues(mapBackToStrings()).toStream().process(capture)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"ignored\",10L))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17->5 [style = bold, label=""];
16->0 [style = bold, label=""];
1->8 [style = bold, label=""];
0->6 [style = bold, label=""];
18->17 [style = bold, label=""];
14->10 [style = bold, label=""];
15->16 [style = bold, label=""];
10->6 [style = bold, label=""];
7->3 [style = bold, label=""];
5->19 [style = bold, label=""];
6->4 [style = bold, label=""];
2->0 [style = bold, label=""];
2->14 [style = dashed, label="0"];
3->2 [style = bold, label=""];
8->5 [style = bold, label=""];
3->9 [style = dashed, label="0"];
7->19 [style = dashed, label="0"];
12->8 [style = bold, label=""];
2->16 [style = dashed, label="0"];
5->13 [style = bold, label=""];
9->14 [style = bold, label=""];
3->15 [style = dashed, label="0"];
8->17 [style = dashed, label="0"];
5->7 [style = bold, label=""];
13->9 [style = bold, label=""];
19->15 [style = bold, label=""];
4->11 [style = bold, label=""];
}
