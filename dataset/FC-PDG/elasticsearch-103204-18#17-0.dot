digraph {
32 [style = filled, label = "assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length,equalTo(4))@@@51@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertNull(docMapper.getNestedParent(\"nonexistent\"))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertThat(nested2Mapper.nested().isIncludeInRoot(),equalTo(true))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(doc.docs().get(2).get(\"field\"),nullValue())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length,equalTo(2))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "testMultiObjectAndNested2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\")@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"value\").startArray(\"nested1\").startObject().field(\"field1\",\"1\").startArray(\"nested2\").startObject().field(\"field2\",\"2\").endObject().startObject().field(\"field2\",\"3\").endObject().endArray().endObject().startObject().field(\"field1\",\"4\").startArray(\"nested2\").startObject().field(\"field2\",\"5\").endObject().startObject().field(\"field2\",\"6\").endObject().endArray().endObject().endArray().endObject()),XContentType.JSON))@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(doc.docs().get(3).get(\"field\"),nullValue())@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertNull(docMapper.getNestedParent(\"nested1\"))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"),equalTo(\"5\"))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"nested1\",docMapper.getNestedParent(\"nested1.nested2\"))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertThat(doc.docs().size(),equalTo(7))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(nested1Mapper.nested().isIncludeInParent(),equalTo(false))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(nested1Mapper.nested().isIncludeInParent(),equalTo(true))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"),nullValue())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DocumentMapper docMapper = createDocumentMapper(mapping(null))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"),equalTo(\"5\"))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"),nullValue())@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertNull(docMapper.mappers().getNestedParent(\"nonexistent\"))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"),equalTo(\"2\"))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(nested2Mapper.nested().isNested(),equalTo(true))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertNull(docMapper.mappers().getNestedParent(\"nested1\"))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(doc.docs().get(0).get(\"field\"),nullValue())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(doc.docs().get(4).get(\"field\"),nullValue())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertThat(doc.docs().get(5).get(\"field\"),nullValue())@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(docMapper.mappers().hasNested(),equalTo(true))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(docMapper.hasNestedObjects(),equalTo(true))@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(nested1Mapper.nested().isIncludeInRoot(),equalTo(false))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field1\"),nullValue())@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(\"nested1\",docMapper.mappers().getNestedParent(\"nested1.nested2\"))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertThat(doc.docs().get(2).get(\"nested1.field1\"),equalTo(\"1\"))@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(doc.docs().get(5).get(\"nested1.field1\"),equalTo(\"4\"))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertThat(nested2Mapper.nested().isIncludeInRoot(),equalTo(false))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"),equalTo(\"3\"))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(nested1Mapper.nested().isNested(),equalTo(true))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testMultiRootAndNested1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.field1\"),nullValue())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"),equalTo(\"6\"))@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(nested2Mapper.nested().isIncludeInParent(),equalTo(false))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertThat(nested2Mapper.nested().isIncludeInParent(),equalTo(true))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\")@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(doc.docs().get(1).get(\"field\"),nullValue())@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(doc.docs().get(6).get(\"nested1.field1\"),nullValue())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"),equalTo(\"2\"))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(doc.docs().get(6).get(\"field\"),equalTo(\"value\"))@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testMultiRootAndNested1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4->40 [style = bold, label=""];
8->10 [style = bold, label=""];
15->23 [style = bold, label=""];
23->25 [style = bold, label=""];
41->24 [style = bold, label=""];
9->2 [style = bold, label=""];
39->9 [style = bold, label=""];
0->17 [style = bold, label=""];
10->24 [style = bold, label=""];
6->18 [style = bold, label=""];
33->4 [style = bold, label=""];
18->33 [style = bold, label=""];
6->42 [style = bold, label=""];
12->20 [style = bold, label=""];
42->33 [style = bold, label=""];
4->29 [style = bold, label=""];
1->0 [style = bold, label=""];
43->26 [style = bold, label=""];
34->8 [style = bold, label=""];
25->6 [style = bold, label=""];
1->36 [style = bold, label=""];
38->39 [style = bold, label=""];
1->13 [style = bold, label=""];
22->7 [style = bold, label=""];
26->30 [style = bold, label=""];
18->42 [style = dashed, label="0"];
20->21 [style = bold, label=""];
13->39 [style = dashed, label="0"];
3->28 [style = bold, label=""];
10->41 [style = dashed, label="0"];
7->34 [style = bold, label=""];
35->1 [style = bold, label=""];
28->43 [style = bold, label=""];
31->27 [style = bold, label=""];
24->31 [style = bold, label=""];
5->12 [style = bold, label=""];
17->14 [style = bold, label=""];
16->1 [style = bold, label=""];
45->22 [style = bold, label=""];
19->26 [style = bold, label=""];
29->32 [style = bold, label=""];
37->38 [style = bold, label=""];
46->1 [style = bold, label=""];
14->38 [style = dashed, label="0"];
19->43 [style = dashed, label="0"];
34->44 [style = bold, label=""];
28->19 [style = bold, label=""];
44->41 [style = bold, label=""];
11->22 [style = bold, label=""];
2->45 [style = bold, label=""];
40->32 [style = bold, label=""];
29->40 [style = dashed, label="0"];
13->9 [style = bold, label=""];
36->37 [style = bold, label=""];
14->13 [style = bold, label=""];
27->5 [style = bold, label=""];
0->36 [style = dashed, label="0"];
17->37 [style = dashed, label="0"];
8->44 [style = dashed, label="0"];
2->11 [style = bold, label=""];
30->15 [style = bold, label=""];
21->3 [style = bold, label=""];
11->45 [style = dashed, label="0"];
}
