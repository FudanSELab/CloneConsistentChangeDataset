digraph {
0 [style = filled, label = "String xml = wc.goToXml(\"view/v/config.xml\").getContent()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertEquals(null,view.getDescription())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "wc.getPage(req)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(xml,not(containsString(\"<description>\")))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "doConfigDotXmlReset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "doConfigDotXml['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertTrue(xml,xml.contains(\"<description>two</description>\"))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ListView view = listView(\"v\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "req.setEncodingType(null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "doConfigDotXml['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "xml = xml.replace(\"<description>one</description>\",\"<description>two</description>\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "xml = new XmlFile(Jenkins.XSTREAM,new File(j.jenkins.getRootDir(),\"config.xml\")).asString()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "view.description = \"one\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(xml,xml.contains(\"<description>one</description>\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "xml = xml.replace(\"<description>one</description>\",\"\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "String xml = wc.goToXml(\"view/v/config.xml\").getWebResponse().getContentAsString()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "WebClient wc = j.createWebClient()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "WebRequest req = new WebRequest(wc.createCrumbedUrl(\"view/v/config.xml\"),HttpMethod.POST)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(xml,containsString(\"<description>one</description>\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"two\",view.getDescription())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "String xml = wc.goToXml(\"view/v/config.xml\").getWebResponse().getContentAsString()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "req.setRequestBody(xml)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(j.jenkins,view.getOwner())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13->10 [style = bold, label=""];
17->13 [style = solid, label="xml"];
8->19 [style = dashed, label="0"];
16->21 [style = solid, label="xml"];
2->6 [style = bold, label=""];
17->9 [style = bold, label=""];
0->12 [style = bold, label=""];
12->11 [style = bold, label=""];
0->16 [style = dashed, label="0"];
0->15 [style = dashed, label="0"];
5->15 [style = bold, label=""];
1->18 [style = bold, label=""];
6->19 [style = bold, label=""];
11->17 [style = dashed, label="0"];
11->9 [style = bold, label=""];
15->12 [style = solid, label="xml"];
3->4 [style = bold, label=""];
12->21 [style = dashed, label="0"];
4->7 [style = bold, label=""];
20->4 [style = bold, label=""];
5->16 [style = bold, label=""];
11->13 [style = solid, label="xml"];
9->1 [style = solid, label="req"];
7->5 [style = bold, label=""];
6->8 [style = solid, label="xml"];
5->0 [style = bold, label=""];
18->6 [style = bold, label=""];
0->12 [style = solid, label="xml"];
16->21 [style = bold, label=""];
6->8 [style = bold, label=""];
6->19 [style = solid, label="xml"];
2->18 [style = dashed, label="0"];
9->13 [style = bold, label=""];
1->2 [style = bold, label=""];
15->12 [style = bold, label=""];
10->1 [style = bold, label=""];
19->22 [style = bold, label=""];
21->17 [style = bold, label=""];
14->4 [style = bold, label=""];
}
