digraph {
6 [style = filled, label = "callbackInvokeAndWhenLambdaMismatchOnDifferentArgumentShouldSwallowException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String argument = \"foo\"@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "InvocationResult<Integer> result = LambdaSafe.callback(,callbackInstance,argument).invokeAnd(null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "InvocationResult<Integer> result = LambdaSafe.callback(,callbackInstance,argument).invokeAnd(null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(result.hasResult()).isFalse()@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "callbackInvokeAndWhenLambdaMismatchShouldSwallowException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "GenericMultiArgFactory<StringBuilder> callbackInstance = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "GenericFactory<StringBuilder> callbackInstance = null@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "callbackInvokeAndWhenLambdaMismatchShouldSwallowException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6->8 [style = bold, label=""];
8->1 [style = bold, label=""];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
2->7 [style = dashed, label="0"];
0->4 [style = bold, label=""];
1->7 [style = bold, label=""];
7->3 [style = bold, label=""];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
4->8 [style = dashed, label="0"];
}
