digraph {
13 [style = filled, label = "testReturn_Lv2WildcardList['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertEquals(2,paramType.getActualTypeArguments().length)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Method method = clazz.getMethod(\"selectWildcardList\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(,type.getRawType())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ParameterizedType paramType = (ParameterizedType)result@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(,paramType.getActualTypeArguments()(0()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(,paramType.getActualTypeArguments()(1()@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testReturn_Lv2WildcardList['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Method method = clazz.getMethod(\"selectMap\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "WildcardType wildcard = (WildcardType)type.getActualTypeArguments()(0(@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(,paramType.getRawType())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(,wildcard.getUpperBounds()(0()@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ParameterizedType type = (ParameterizedType)result@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(0,wildcard.getLowerBounds().length)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Class<?> clazz = @@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(type.getActualTypeArguments()(0( instanceof WildcardType)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(result instanceof ParameterizedType)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(1,type.getActualTypeArguments().length)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Type result = TypeParameterResolver.resolveReturnType(method,clazz)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(1,wildcard.getUpperBounds().length)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testReturn_LV2Map['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2->17 [style = bold, label=""];
10->15 [style = dashed, label="0"];
7->1 [style = bold, label=""];
16->11 [style = bold, label=""];
9->11 [style = bold, label=""];
8->17 [style = solid, label="result"];
11->4 [style = bold, label=""];
19->8 [style = solid, label="method"];
1->3 [style = bold, label=""];
7->20 [style = dashed, label="0"];
3->12 [style = bold, label=""];
6->14 [style = dashed, label="0"];
11->19 [style = bold, label=""];
5->18 [style = dashed, label="0"];
0->17 [style = dashed, label="0"];
10->7 [style = bold, label=""];
13->11 [style = bold, label=""];
19->8 [style = bold, label=""];
8->2 [style = solid, label="result"];
11->8 [style = solid, label="clazz"];
2->0 [style = bold, label=""];
5->6 [style = bold, label=""];
8->2 [style = bold, label=""];
15->20 [style = bold, label=""];
6->10 [style = bold, label=""];
8->0 [style = solid, label="result"];
4->8 [style = solid, label="method"];
4->8 [style = bold, label=""];
4->19 [style = dashed, label="0"];
14->15 [style = bold, label=""];
18->14 [style = bold, label=""];
17->18 [style = bold, label=""];
0->5 [style = bold, label=""];
}
