digraph {
11 [style = filled, label = "Arrays.fill(appBytes,(byte)0x1F)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThatThrownBy(null).isInstanceOf().hasMessageContaining(\"Error decrypting data\")@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "byte(( appBytes = new byte((((@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(CLOSED,FINISHED,0,0))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "wrappedData.put(netBytes)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "verify(spyNioSslEngine,times(1)).expandWriteBuffer(any(),any(),any())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "ByteBuffer wrappedBuffer = outputSharing2.getBuffer()@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(spyNioSslEngine,times(1)).handleBlockingTasks()@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(inputSharing.getBuffer().capacity())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Arrays.fill(netBytes,(byte)0x1F)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "wrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "unwrapWithDecryptionError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "verify(spyNioSslEngine,times(1)).handleBlockingTasks()@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "wrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "byte(( netBytes = new byte((((@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "appData.flip()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "verify(spyBufferPool,times(1)).expandWriteBufferIfNeeded(any(),any(),any())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "appData.put(appBytes)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "wrappedData.flip()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "appData.flip()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
17->8 [style = bold, label=""];
6->21 [style = dashed, label="0"];
8->10 [style = bold, label=""];
22->27 [style = solid, label="netBytes"];
3->25 [style = bold, label=""];
0->23 [style = dashed, label="0"];
16->4 [style = solid, label="appData"];
4->19 [style = bold, label=""];
11->22 [style = dashed, label="0"];
2->27 [style = dashed, label="0"];
4->26 [style = bold, label=""];
25->4 [style = bold, label=""];
23->3 [style = bold, label=""];
11->2 [style = solid, label="appBytes"];
3->12 [style = bold, label=""];
22->24 [style = solid, label="netBytes"];
1->13 [style = bold, label=""];
0->12 [style = solid, label="testEngine"];
9->6 [style = bold, label=""];
20->21 [style = bold, label=""];
15->17 [style = bold, label=""];
14->11 [style = solid, label="appBytes"];
2->0 [style = bold, label=""];
12->25 [style = dashed, label="0"];
14->7 [style = solid, label="appBytes"];
10->5 [style = bold, label=""];
12->4 [style = bold, label=""];
16->17 [style = solid, label="appData"];
21->22 [style = bold, label=""];
7->24 [style = dashed, label="0"];
7->2 [style = bold, label=""];
6->11 [style = bold, label=""];
11->7 [style = solid, label="appBytes"];
16->14 [style = bold, label=""];
27->23 [style = bold, label=""];
4->1 [style = bold, label=""];
6->10 [style = solid, label="appData"];
22->24 [style = bold, label=""];
13->8 [style = bold, label=""];
19->15 [style = bold, label=""];
14->11 [style = bold, label=""];
24->27 [style = bold, label=""];
11->7 [style = bold, label=""];
3->4 [style = solid, label="testEngine"];
18->16 [style = bold, label=""];
}
