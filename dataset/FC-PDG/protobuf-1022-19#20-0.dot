digraph {
45 [style = filled, label = "InvalidProtocolBufferException|IllegalArgumentException e@@@100@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Conformance.TestAllTypes testMessage@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "doTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "com.google.protobuf.AbstractMessage testMessage@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "{try {JsonFormat.Parser parser = JsonFormat.parser().usingTypeRegistry(typeRegistry)if (request.getTestCategory() == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST) {parser = parser.ignoringUnknownFields()}if (isProto3) {TestMessagesProto3.TestAllTypesProto3.Builder builder = TestMessagesProto3.TestAllTypesProto3.newBuilder()parser.merge(request.getJsonPayload(),builder)testMessage = builder.build()}if (isProto2) {TestMessagesProto2.TestAllTypesProto2.Builder builder = TestMessagesProto2.TestAllTypesProto2.newBuilder()parser.merge(request.getJsonPayload(),builder)testMessage = builder.build()}{throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\")}}catch (InvalidProtocolBufferException e) break}@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "isProto3@@@39@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Conformance.ConformanceRequest request@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "boolean isProto2 = request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSerializeError(e.getMessage()).build()@@@101@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "{if (isProto3) {try {TestMessagesProto3.TestAllTypesProto3.Builder builder = TestMessagesProto3.TestAllTypesProto3.newBuilder()TextFormat.merge(request.getTextPayload(),builder)testMessage = builder.build()}catch (TextFormat.ParseException e) }if (isProto2) {try {TestMessagesProto2.TestAllTypesProto2.Builder builder = TestMessagesProto2.TestAllTypesProto2.newBuilder()TextFormat.merge(request.getTextPayload(),builder)testMessage = builder.build()}catch (TextFormat.ParseException e) }{throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\")}break}@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "boolean isProto3 = request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "throw new RuntimeException(\"Unspecified output format.\")@@@47@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "{throw new RuntimeException(\"Request didn't have payload.\")}@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "{return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support JSON format.\").build()}@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "com.google.protobuf.MessageLite testMessage@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "request.getPayloadCase()@@@4@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build()@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "{ByteString MessageString = testMessage.toByteString()return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build()}@@@93@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "{throw new RuntimeException(\"Request didn't have payload.\")}@@@84@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "request.getRequestedOutputFormat()@@@46@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "{try {testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload())}catch (InvalidProtocolBufferException e) break}@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "doTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "{if (isProto3) {try {ExtensionRegistryLite extensions = ExtensionRegistryLite.newInstance()TestMessagesProto3.registerAllExtensions(extensions)testMessage = parseBinary(request.getProtobufPayload(),TestAllTypesProto3.parser(),extensions)}catch (InvalidProtocolBufferException e) }if (isProto2) {try {ExtensionRegistryLite extensions = ExtensionRegistryLite.newInstance()TestMessagesProto2.registerAllExtensions(extensions)testMessage = parseBinary(request.getProtobufPayload(),TestAllTypesProto2.parser(),extensions)}catch (InvalidProtocolBufferException e) }{throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\")}break}@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "throw new RuntimeException(\"Unspecified output format.\")@@@92@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "boolean isProto3 = request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "{if (isProto3) {try {ExtensionRegistry extensions = ExtensionRegistry.newInstance()TestMessagesProto3.registerAllExtensions(extensions)testMessage = parseBinary(request.getProtobufPayload(),TestAllTypesProto3.parser(),extensions)}catch (InvalidProtocolBufferException e) }if (isProto2) {try {ExtensionRegistry extensions = ExtensionRegistry.newInstance()TestMessagesProto2.registerAllExtensions(extensions)testMessage = parseBinary(request.getProtobufPayload(),TestAllTypesProto2.parser(),extensions)}catch (InvalidProtocolBufferException e) }{throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\")}break}@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "request.getRequestedOutputFormat()@@@91@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "{throw new RuntimeException(\"Unexpected payload case.\")}@@@87@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "{throw new RuntimeException(\"Unexpected payload case.\")}@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "doTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "isProto3@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support JSON format.\").build()@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setJsonPayload(JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build()@@@98@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support Text format.\").build()@@@50@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "throw new RuntimeException(\"Unspecified output format.\")@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "isProto3@@@59@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "{throw new RuntimeException(\"Unexpected request output.\")}@@@104@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setTextPayload(TextFormat.printToString(testMessage)).build()@@@103@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "request.getTestCategory() == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST@@@36@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "boolean isProto2 = request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "{return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support JSON format.\").build()}@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "{return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support Text format.\").build()}@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build()@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "request.getPayloadCase()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "request.getPayloadCase()@@@6@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "{throw new RuntimeException(\"Unexpected request output.\")}@@@51@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "{throw new RuntimeException(\"Request didn't have payload.\")}@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "isProto3@@@8@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
17->25 [style = bold, label=""];
32->28 [style = dotted, label="true"];
32->37 [style = bold, label=""];
12->5 [style = bold, label=""];
5->9 [style = bold, label=""];
20->26 [style = bold, label=""];
36->44 [style = solid, label="isProto3"];
20->27 [style = dotted, label="true"];
24->17 [style = solid, label="isProto3"];
9->10 [style = bold, label=""];
7->8 [style = bold, label=""];
36->33 [style = bold, label=""];
0->15 [style = bold, label=""];
47->11 [style = bold, label=""];
45->40 [style = dotted, label="true"];
0->14 [style = bold, label=""];
11->2 [style = dotted, label="true"];
18->22 [style = bold, label=""];
42->44 [style = bold, label=""];
33->42 [style = bold, label=""];
6->11 [style = bold, label=""];
11->8 [style = dotted, label="true"];
2->32 [style = bold, label=""];
43->44 [style = bold, label=""];
44->47 [style = bold, label=""];
11->7 [style = dotted, label="true"];
5->10 [style = bold, label=""];
28->37 [style = bold, label=""];
42->2 [style = bold, label=""];
46->39 [style = bold, label=""];
20->25 [style = bold, label=""];
22->23 [style = bold, label=""];
5->1 [style = bold, label=""];
0->23 [style = bold, label=""];
5->6 [style = bold, label=""];
19->13 [style = bold, label=""];
21->11 [style = bold, label=""];
19->3 [style = dotted, label="true"];
34->36 [style = bold, label=""];
25->26 [style = bold, label=""];
44->47 [style = solid, label="builder"];
2->18 [style = dashed, label="0"];
11->8 [style = bold, label=""];
41->46 [style = bold, label=""];
14->15 [style = bold, label=""];
0->14 [style = dotted, label="true"];
42->30 [style = dotted, label="true"];
12->13 [style = dashed, label="0"];
10->1 [style = bold, label=""];
16->20 [style = bold, label=""];
12->34 [style = dashed, label="0"];
13->24 [style = bold, label=""];
32->46 [style = bold, label=""];
0->18 [style = dotted, label="true"];
42->47 [style = bold, label=""];
16->17 [style = solid, label="isProto2"];
26->21 [style = bold, label=""];
33->43 [style = solid, label="isProto2"];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
4->3 [style = dotted, label="true"];
8->2 [style = bold, label=""];
42->11 [style = bold, label=""];
38->34 [style = bold, label=""];
36->43 [style = solid, label="isProto3"];
4->12 [style = bold, label=""];
0->18 [style = bold, label=""];
32->41 [style = bold, label=""];
32->39 [style = bold, label=""];
33->47 [style = solid, label="isProto2"];
42->29 [style = dotted, label="true"];
45->40 [style = bold, label=""];
20->11 [style = bold, label=""];
20->17 [style = bold, label=""];
42->43 [style = bold, label=""];
33->44 [style = solid, label="isProto2"];
32->41 [style = dotted, label="true"];
32->39 [style = dotted, label="true"];
0->15 [style = dotted, label="true"];
36->47 [style = solid, label="isProto3"];
8->15 [style = dashed, label="0"];
42->31 [style = dotted, label="true"];
40->28 [style = bold, label=""];
15->18 [style = bold, label=""];
11->2 [style = bold, label=""];
39->28 [style = bold, label=""];
0->22 [style = dotted, label="true"];
20->21 [style = bold, label=""];
24->16 [style = bold, label=""];
38->3 [style = dotted, label="true"];
11->0 [style = bold, label=""];
0->22 [style = bold, label=""];
42->35 [style = dotted, label="true"];
32->28 [style = bold, label=""];
11->7 [style = bold, label=""];
}
