digraph {
22 [style = filled, label = "init['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "context = new BytesChannelContext(channel,selector,mock(),handler,channelBuffer)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "readConsumer = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(selector.getTaskScheduler()).thenReturn(nioTimer)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "sslDriver = mock()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "channel = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "listener = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(sslDriver.getNetworkWriteBuffer()).thenReturn(writeBuffer)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "messageLength = randomInt(96) + 20@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestReadWriteHandler readWriteHandler = new TestReadWriteHandler(readConsumer)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ByteBuffer buffer = ByteBuffer.allocate(1 << 14)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "nioTimer = mock()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "TestReadWriteHandler handler = new TestReadWriteHandler(readConsumer)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "channelBuffer = InboundChannelBuffer.allocatingInstance()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "context = new SSLChannelContext(channel,selector,exceptionHandler,sslDriver,readWriteHandler,channelBuffer)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "when(sslDriver.getNetworkReadBuffer()).thenReturn(readBuffer)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(channel.getRawChannel()).thenReturn(rawChannel)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "init['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "init['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(selector.getIoBuffer()).thenAnswer(null)@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "selector = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "when(selector.isOnCurrentThread()).thenReturn(true)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "when(selector.getIoBuffer()).thenAnswer(null)@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "rawChannel = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "exceptionHandler = mock()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->23 [style = dashed, label="0"];
1->5 [style = solid, label="exceptionHandler"];
5->14 [style = bold, label=""];
14->17 [style = bold, label=""];
15->23 [style = solid, label="channelBuffer"];
21->14 [style = bold, label=""];
8->9 [style = bold, label=""];
10->2 [style = bold, label=""];
24->23 [style = solid, label="handler"];
0->4 [style = bold, label=""];
22->8 [style = bold, label=""];
13->0 [style = bold, label=""];
2->23 [style = solid, label="selector"];
2->11 [style = bold, label=""];
19->8 [style = bold, label=""];
18->20 [style = solid, label="nioTimer"];
15->24 [style = bold, label=""];
17->3 [style = bold, label=""];
8->9 [style = solid, label="readConsumer"];
2->5 [style = solid, label="selector"];
3->6 [style = bold, label=""];
23->21 [style = bold, label=""];
0->15 [style = bold, label=""];
2->18 [style = bold, label=""];
16->1 [style = bold, label=""];
16->23 [style = bold, label=""];
24->16 [style = bold, label=""];
4->5 [style = solid, label="sslDriver"];
0->16 [style = solid, label="rawChannel"];
15->5 [style = solid, label="channelBuffer"];
8->24 [style = solid, label="readConsumer"];
15->16 [style = bold, label=""];
11->13 [style = bold, label=""];
9->5 [style = solid, label="readWriteHandler"];
14->6 [style = bold, label=""];
20->17 [style = bold, label=""];
13->5 [style = solid, label="channel"];
6->7 [style = bold, label=""];
4->15 [style = bold, label=""];
12->8 [style = bold, label=""];
13->23 [style = solid, label="channel"];
8->10 [style = bold, label=""];
18->11 [style = bold, label=""];
14->20 [style = bold, label=""];
9->10 [style = bold, label=""];
1->5 [style = bold, label=""];
}
