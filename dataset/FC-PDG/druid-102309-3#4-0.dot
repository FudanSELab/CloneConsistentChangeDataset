digraph {
90 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(postSplitTasks).anyTimes()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "List<Task> postSplitTasks = postSplitCaptured.getValues()@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpointsGroup0)).times(1)@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED)).anyTimes()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD2_PARTITION)).anyTimes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "SeekableStreamStartSequenceNumbers<String,String> group0ExpectedStartSequenceNumbers = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"0\"),ImmutableSet.of())@@@55@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Assert.assertEquals(1,postSplitTasks.size())@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(2,postSplitTasks.size())@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return postSplitTasks@@@68@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "EasyMock.reset(taskClient)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals((Integer)1,group1Config.getTaskGroupId())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID1))).andReturn(\"100\").anyTimes()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpointsGroup0)).times(1)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.reset(taskQueue)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "EasyMock.reset(taskClient)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.reset(taskStorage)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "checkpointsGroup0.put(0,ImmutableMap.of(SHARD_ID2,\"100\"))@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpointsGroup1 = new TreeMap<>()@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(group1ExpectedEndSequenceNumbers,group1Config.getEndSequenceNumbers())@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "List<Task> postSplitTasks = postSplitCaptured.getValues()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID2))).andReturn(\"100\").anyTimes()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "KinesisIndexTaskIOConfig group0Config = ((KinesisIndexTask)postSplitTasks.get(0)).getIOConfig()@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "Assert.assertEquals((Integer)0,group0Config.getTaskGroupId())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.END_OF_SHARD_MARKER,SHARD_ID1,KinesisSequenceNumber.END_OF_SHARD_MARKER,SHARD_ID2,\"100\")))).anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group1ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@58@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "replayAll()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "verifyAll()@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "EasyMock.replay(taskClient)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD0_PARTITION,SHARD1_PARTITION,SHARD2_PARTITION)).anyTimes()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.reset(taskMaster)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(group0ExpectedEndSequenceNumbers,group0Config.getEndSequenceNumbers())@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "Map<Integer,Map<String,String>> expectedPartitionGroups = ImmutableMap.of(0,ImmutableMap.of(SHARD_ID2,\"-1\"),1,ImmutableMap.of())@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group1ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@58@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group0ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "supervisor.runInternal()@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "checkpointsGroup1.put(1,ImmutableMap.of(SHARD_ID2,\"0\"))@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(successfulTask.getId())).andReturn(Optional.of(TaskStatus.success(successfulTask.getId())))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "checkpointsGroup1.put(1,ImmutableMap.of(SHARD_ID1,\"0\"))@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "KinesisIndexTaskIOConfig group0Config = ((KinesisIndexTask)postSplitTasks.get(0)).getIOConfig()@@@54@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "EasyMock.expect(taskStorage.getTask(task.getId())).andReturn(Optional.of(task)).anyTimes()@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(task.getId())).andReturn(Optional.of(TaskStatus.running(task.getId()))).anyTimes()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(DATASOURCE,new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.EXPIRED_MARKER,SHARD_ID1,KinesisSequenceNumber.EXPIRED_MARKER,SHARD_ID2,\"100\"))))).andReturn(true).anyTimes()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Task successfulTask0 = phaseTwoTasks.get(0)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(successfulTask0.getId())).andReturn(Optional.of(TaskStatus.success(successfulTask0.getId())))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "replayAll()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED)).anyTimes()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals((Integer)0,group0Config.getTaskGroupId())@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "checkpointsGroup0.put(0,ImmutableMap.of(SHARD_ID1,\"0\"))@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(group0ExpectedStartSequenceNumbers,group0Config.getStartSequenceNumbers())@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "supervisor.runInternal()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "Assert.assertEquals(expectedPartitionGroups,supervisor.getPartitionGroups())@@@59@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID2)).anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "verifyAll()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "List<Task> phaseTwoTasks@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "Assert.assertEquals(group0ExpectedStartSequenceNumbers,group0Config.getStartSequenceNumbers())@@@56@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "EasyMock.expect(taskStorage.getTask(successfulTask0.getId())).andReturn(Optional.of(successfulTask0)).anyTimes()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "EasyMock.reset(indexerMetadataStorageCoordinator)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "KinesisIndexTaskIOConfig group1Config = ((KinesisIndexTask)postSplitTasks.get(1)).getIOConfig()@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(postSplitCaptured))).andReturn(true).times(1)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "EasyMock.reset(taskRunner)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group0ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@56@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(group1ExpectedStartSequenceNumbers,group1Config.getStartSequenceNumbers())@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "EasyMock.reset(supervisorRecordSupplier)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.replay(taskStorage)@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID2))).andReturn(\"200\").anyTimes()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "SeekableStreamStartSequenceNumbers<String,String> group0ExpectedStartSequenceNumbers = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,\"100\"),ImmutableSet.of(SHARD_ID2))@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Capture<Task> postSplitCaptured = Capture.newInstance(CaptureType.ALL)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "SeekableStreamStartSequenceNumbers<String,String> group1ExpectedStartSequenceNumbers = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,\"0\"),ImmutableSet.of())@@@57@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testShardSplitPhaseTwo['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<Task> phaseOneTasks@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.END_OF_SHARD_MARKER)))).anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group0ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@56@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "EasyMock.reset(taskStorage)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID0,SHARD_ID1,SHARD_ID2)).anyTimes()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpointsGroup0 = new TreeMap<>()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "testShardMergePhaseThree['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "Assert.assertEquals(group0ExpectedEndSequenceNumbers,group0Config.getEndSequenceNumbers())@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "testShardSplitPhaseTwo['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "EasyMock.expect(taskStorage.getTask(successfulTask.getId())).andReturn(Optional.of(successfulTask)).anyTimes()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58->28 [style = bold, label=""];
8->16 [style = bold, label=""];
63->16 [style = solid, label="group1ExpectedStartSequenceNumbers"];
61->43 [style = bold, label=""];
64->51 [style = bold, label=""];
56->64 [style = bold, label=""];
44->35 [style = bold, label=""];
1->27 [style = bold, label=""];
81->78 [style = bold, label=""];
39->7 [style = solid, label="group0ExpectedStartSequenceNumbers"];
40->15 [style = bold, label=""];
59->57 [style = bold, label=""];
50->56 [style = bold, label=""];
53->47 [style = bold, label=""];
12->86 [style = dashed, label="0"];
57->58 [style = bold, label=""];
2->66 [style = dashed, label="0"];
7->8 [style = bold, label=""];
21->18 [style = bold, label=""];
3->63 [style = solid, label="group0ExpectedStartSequenceNumbers"];
92->87 [style = bold, label=""];
52->24 [style = bold, label=""];
37->5 [style = bold, label=""];
69->7 [style = solid, label="group0ExpectedStartSequenceNumbers"];
48->52 [style = bold, label=""];
3->36 [style = bold, label=""];
73->80 [style = bold, label=""];
18->21 [style = dashed, label="0"];
2->63 [style = bold, label=""];
65->69 [style = bold, label=""];
70->68 [style = bold, label=""];
26->61 [style = bold, label=""];
56->67 [style = dashed, label="0"];
27->33 [style = bold, label=""];
6->62 [style = bold, label=""];
32->20 [style = bold, label=""];
21->73 [style = bold, label=""];
85->5 [style = bold, label=""];
90->51 [style = bold, label=""];
19->42 [style = bold, label=""];
54->49 [style = bold, label=""];
67->64 [style = bold, label=""];
79->74 [style = solid, label="expectedPartitionGroups"];
40->51 [style = bold, label=""];
70->16 [style = solid, label="group1ExpectedStartSequenceNumbers"];
25->55 [style = bold, label=""];
39->89 [style = bold, label=""];
24->44 [style = bold, label=""];
41->4 [style = bold, label=""];
86->77 [style = bold, label=""];
42->31 [style = bold, label=""];
20->38 [style = bold, label=""];
50->67 [style = bold, label=""];
72->50 [style = bold, label=""];
89->63 [style = bold, label=""];
66->8 [style = solid, label="group0ExpectedEndSequenceNumbers"];
49->32 [style = bold, label=""];
77->81 [style = bold, label=""];
78->48 [style = bold, label=""];
2->8 [style = solid, label="group0ExpectedEndSequenceNumbers"];
65->39 [style = bold, label=""];
76->31 [style = bold, label=""];
80->88 [style = bold, label=""];
62->17 [style = bold, label=""];
5->11 [style = bold, label=""];
46->40 [style = bold, label=""];
23->59 [style = bold, label=""];
84->90 [style = bold, label=""];
63->14 [style = bold, label=""];
60->12 [style = bold, label=""];
19->76 [style = bold, label=""];
66->70 [style = bold, label=""];
91->47 [style = bold, label=""];
45->84 [style = bold, label=""];
47->3 [style = bold, label=""];
60->86 [style = bold, label=""];
87->27 [style = bold, label=""];
68->22 [style = solid, label="group1ExpectedEndSequenceNumbers"];
0->45 [style = bold, label=""];
29->73 [style = dashed, label="0"];
85->83 [style = dotted, label="true"];
14->68 [style = dashed, label="0"];
15->53 [style = bold, label=""];
71->5 [style = bold, label=""];
21->38 [style = dashed, label="0"];
24->75 [style = dashed, label="0"];
51->40 [style = bold, label=""];
31->26 [style = bold, label=""];
35->1 [style = bold, label=""];
13->83 [style = dashed, label="0"];
14->23 [style = bold, label=""];
39->2 [style = bold, label=""];
14->22 [style = solid, label="group1ExpectedEndSequenceNumbers"];
22->10 [style = bold, label=""];
45->0 [style = dashed, label="0"];
9->19 [style = bold, label=""];
46->10 [style = solid, label="postSplitTasks"];
0->72 [style = bold, label=""];
69->66 [style = bold, label=""];
63->82 [style = bold, label=""];
39->3 [style = dashed, label="0"];
29->9 [style = bold, label=""];
88->19 [style = bold, label=""];
22->74 [style = dashed, label="0"];
28->7 [style = bold, label=""];
63->70 [style = dashed, label="0"];
24->75 [style = bold, label=""];
71->13 [style = dotted, label="true"];
34->41 [style = bold, label=""];
55->0 [style = bold, label=""];
16->22 [style = bold, label=""];
12->6 [style = bold, label=""];
36->82 [style = solid, label="group0ExpectedEndSequenceNumbers"];
53->91 [style = bold, label=""];
51->46 [style = bold, label=""];
18->29 [style = bold, label=""];
19->88 [style = dashed, label="0"];
11->34 [style = bold, label=""];
45->72 [style = dashed, label="0"];
4->30 [style = bold, label=""];
45->50 [style = bold, label=""];
82->79 [style = bold, label=""];
17->48 [style = bold, label=""];
79->74 [style = bold, label=""];
38->21 [style = bold, label=""];
53->15 [style = bold, label=""];
39->69 [style = dashed, label="0"];
62->81 [style = dashed, label="0"];
43->25 [style = bold, label=""];
33->54 [style = bold, label=""];
36->65 [style = bold, label=""];
75->92 [style = bold, label=""];
37->13 [style = dotted, label="true"];
68->23 [style = bold, label=""];
30->60 [style = bold, label=""];
}
