digraph {
24 [style = filled, label = "Assert.assertEquals(this.countDownLatch.getCount(),1L)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES)).thenReturn(10L).thenReturn(7L).thenReturn(6L).thenReturn(4L)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "check.execute()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testExecuteIncreasingLatencyCheckEnabled['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "this.countDownLatch = new CountDownLatch(1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "check.execute()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "check.execute()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "this.countDownLatch.await(10,TimeUnit.MILLISECONDS)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "this.countDownLatch.await(10,TimeUnit.MILLISECONDS)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(this.countDownLatch.getCount(),1L)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testExecuteIncreasingLatencyCheckEnabled['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Mockito.when(extractorStatsTracker.getConsumptionRateMBps()).thenReturn(2.0).thenReturn(1.5).thenReturn(2.1)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Mockito.when(extractorStatsTracker.getConsumptionRateMBps()).thenReturn(2.0).thenReturn(1.5).thenReturn(2.1).thenReturn(2.5)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "check.execute()@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES)).thenReturn(10L).thenReturn(7L).thenReturn(5L)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "check.execute()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES)).thenReturn(6L).thenReturn(7L).thenReturn(7L).thenReturn(5L)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "this.countDownLatch = new CountDownLatch(1)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "config = config.withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY,ConfigValueFactory.fromAnyRef(false))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Config config = ConfigFactory.empty().withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_EXPECTED_CONSUMPTION_RATE_MBPS_KEY,ConfigValueFactory.fromAnyRef(5)).withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY,ConfigValueFactory.fromAnyRef(5)).withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY,ConfigValueFactory.fromAnyRef(false))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "KafkaExtractorStatsTracker extractorStatsTracker = Mockito.mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "check = new KafkaIngestionHealthCheck(config,extractorStatsTracker)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "extractorStatsTracker = Mockito.mock()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "this.countDownLatch.await(10,TimeUnit.MILLISECONDS)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "this.countDownLatch.await(10,TimeUnit.MILLISECONDS)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(this.countDownLatch.getCount(),0)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES)).thenReturn(6L).thenReturn(7L).thenReturn(10L).thenReturn(5L)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Config config = ConfigFactory.empty().withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_EXPECTED_CONSUMPTION_RATE_MBPS_KEY,ConfigValueFactory.fromAnyRef(5)).withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY,ConfigValueFactory.fromAnyRef(5))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testExecuteIncreasingLatencyCheckDisabled['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(this.countDownLatch.getCount(),1)@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "KafkaIngestionHealthCheck check = new KafkaIngestionHealthCheck(config,extractorStatsTracker)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->8 [style = bold, label=""];
14->24 [style = bold, label=""];
3->30 [style = dashed, label="0"];
20->13 [style = bold, label=""];
9->11 [style = bold, label=""];
15->7 [style = bold, label=""];
26->7 [style = bold, label=""];
5->23 [style = bold, label=""];
19->23 [style = solid, label="config"];
0->12 [style = bold, label=""];
2->3 [style = bold, label=""];
3->27 [style = dashed, label="0"];
28->7 [style = bold, label=""];
19->29 [style = dashed, label="0"];
8->14 [style = bold, label=""];
6->1 [style = solid, label="config"];
19->2 [style = bold, label=""];
21->18 [style = bold, label=""];
2->23 [style = solid, label="extractorStatsTracker"];
18->20 [style = bold, label=""];
3->5 [style = bold, label=""];
29->2 [style = bold, label=""];
24->21 [style = bold, label=""];
16->1 [style = bold, label=""];
30->5 [style = bold, label=""];
6->10 [style = bold, label=""];
10->4 [style = bold, label=""];
29->23 [style = solid, label="config"];
2->27 [style = bold, label=""];
11->17 [style = bold, label=""];
13->0 [style = bold, label=""];
10->1 [style = solid, label="extractorStatsTracker"];
27->5 [style = bold, label=""];
2->30 [style = bold, label=""];
23->9 [style = bold, label=""];
7->19 [style = bold, label=""];
1->25 [style = bold, label=""];
12->22 [style = bold, label=""];
4->16 [style = bold, label=""];
22->6 [style = bold, label=""];
7->29 [style = bold, label=""];
}
