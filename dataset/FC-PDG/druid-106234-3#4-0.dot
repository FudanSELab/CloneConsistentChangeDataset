digraph {
10 [style = filled, label = "Assert.assertNull(result.value())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(ExprEval.of(true,ExprType.LONG).value(),result.value())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "NullHandling.sqlCompatible()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final ExprEval<?> result = eval(\"regexp_extract(a, null)\",Parser.withSuppliers(ImmutableMap.of(\"a\",null)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "expectException(,\"Function(regexp_like( pattern must be a string literal\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testNullPatternOnNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final ExprEval<?> result = eval(\"regexp_like(a, null)\",Parser.withSuppliers(ImmutableMap.of(\"a\",null)))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(ExprEval.ofLongBoolean(true).value(),result.value())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "expectException(,\"Function(regexp_extract( pattern must be a string literal\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testNullPatternOnNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testNullPatternOnNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->9 [style = dashed, label="0"];
1->4 [style = bold, label=""];
2->7 [style = bold, label=""];
2->9 [style = dotted, label="true"];
2->9 [style = bold, label=""];
3->2 [style = bold, label=""];
8->2 [style = bold, label=""];
9->7 [style = bold, label=""];
0->5 [style = dashed, label="0"];
2->1 [style = dotted, label="true"];
2->4 [style = bold, label=""];
4->5 [style = bold, label=""];
2->1 [style = bold, label=""];
7->10 [style = bold, label=""];
4->7 [style = dashed, label="0"];
4->0 [style = bold, label=""];
6->2 [style = bold, label=""];
}
