digraph {
12 [style = filled, label = "assertEquals(Collections.singleton(expectedCell),Sets.newHashSet(cd))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "resolver.preprocess(response(cmd,peer2,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build()))))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "InetAddressAndPort peer2 = replicas.get(1).endpoint()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Iterator<Row> rowIter = mutation.getPartitionUpdate(cfm2).iterator()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(Collections.singleton(expectedCell),Sets.newHashSet(cd))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ReadCommand cmd = Util.cmd(cfs2,dk).withNowInSeconds(nowInSec).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "builder.newRow(Clustering.EMPTY)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Cell expectedCell = mapCell(1,1,ts(1()@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "DataResolver resolver = new DataResolver(cmd,plan(replicas,ConsistencyLevel.ALL),readRepair,System.nanoTime())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(expectedCmplxDelete,cd.complexDeletion())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertFalse(rowIter.hasNext())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "long(( ts = {100,200}@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "builder.addComplexDeletion(m,expectedCmplxDelete)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testResolveNewCollectionOverwritingDeleted['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "Row row = rowIter.next()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testResolveNewCollectionOverwritingDeleted['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "builder.addComplexDeletion(m,new DeletionTime(ts(0( - 1,nowInSec))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testResolveDeletedCollection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertColumns(row,\"m\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "resolver.preprocess(response(cmd,peer1,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build()))))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertTrue(rowIter.hasNext())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(expectedCmplxDelete,cd.complexDeletion())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Cell<?> expectedCell = mapCell(1,1,ts(1()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertFalse(data.hasNext())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "EndpointsForRange replicas = makeReplicas(2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Mutation mutation = readRepair.getForEndpoint(peer1)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Row.Builder builder = BTreeRow.unsortedBuilder()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "builder.addCell(expectedCell)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(Collections.emptySet(),Sets.newHashSet(cd))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "builder.addCell(mapCell(0,0,ts(0())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "InetAddressAndPort peer1 = replicas.get(0).endpoint()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Row row = Iterators.getOnlyElement(readRepair.getForEndpoint(peer1).getPartitionUpdate(cfm2).iterator())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "builder.newRow(Clustering.EMPTY)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Row row = Iterators.getOnlyElement(rows)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertNull(readRepair.sent.get(peer2))@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertNull(readRepair.sent.get(peer2))@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "TestableReadRepair readRepair = new TestableReadRepair(cmd)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "DeletionTime expectedCmplxDelete = new DeletionTime(ts(1( - 1,nowInSec)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
10->22 [style = bold, label=""];
11->33 [style = solid, label="expectedCmplxDelete"];
38->20 [style = bold, label=""];
11->23 [style = solid, label="expectedCmplxDelete"];
28->24 [style = solid, label="expectedCell"];
21->19 [style = bold, label=""];
1->28 [style = solid, label="ts"];
26->10 [style = bold, label=""];
10->22 [style = solid, label="cd"];
22->40 [style = dashed, label="0"];
15->25 [style = bold, label=""];
28->12 [style = solid, label="expectedCell"];
19->29 [style = bold, label=""];
18->14 [style = solid, label="readRepair"];
4->12 [style = solid, label="cd"];
21->19 [style = solid, label="peer2"];
9->28 [style = dashed, label="0"];
1->3 [style = bold, label=""];
21->16 [style = solid, label="peer2"];
0->11 [style = bold, label=""];
2->18 [style = bold, label=""];
34->31 [style = bold, label=""];
26->35 [style = dashed, label="0"];
12->26 [style = bold, label=""];
29->37 [style = bold, label=""];
9->24 [style = solid, label="expectedCell"];
9->12 [style = solid, label="expectedCell"];
5->17 [style = bold, label=""];
1->13 [style = solid, label="ts"];
25->14 [style = solid, label="replicas"];
25->2 [style = bold, label=""];
11->6 [style = solid, label="expectedCmplxDelete"];
21->30 [style = solid, label="peer2"];
14->1 [style = bold, label=""];
8->0 [style = bold, label=""];
23->28 [style = bold, label=""];
19->5 [style = bold, label=""];
1->11 [style = solid, label="ts"];
40->33 [style = bold, label=""];
20->8 [style = bold, label=""];
36->25 [style = bold, label=""];
9->22 [style = solid, label="expectedCell"];
20->8 [style = solid, label="peer1"];
23->21 [style = bold, label=""];
3->7 [style = bold, label=""];
24->21 [style = bold, label=""];
6->16 [style = bold, label=""];
2->18 [style = solid, label="cmd"];
32->40 [style = bold, label=""];
39->32 [style = bold, label=""];
2->8 [style = solid, label="cmd"];
1->9 [style = solid, label="ts"];
20->37 [style = solid, label="peer1"];
28->22 [style = solid, label="expectedCell"];
33->30 [style = bold, label=""];
4->12 [style = bold, label=""];
28->24 [style = bold, label=""];
32->40 [style = solid, label="cd"];
13->38 [style = bold, label=""];
2->19 [style = solid, label="cmd"];
5->17 [style = solid, label="row"];
31->39 [style = bold, label=""];
1->38 [style = solid, label="ts"];
37->35 [style = bold, label=""];
2->14 [style = solid, label="cmd"];
35->34 [style = bold, label=""];
23->9 [style = bold, label=""];
11->23 [style = bold, label=""];
18->14 [style = bold, label=""];
9->24 [style = bold, label=""];
17->4 [style = bold, label=""];
27->25 [style = bold, label=""];
22->6 [style = bold, label=""];
13->20 [style = bold, label=""];
}
