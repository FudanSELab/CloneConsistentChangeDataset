digraph {
25 [style = filled, label = "testCleanupTasksOnStop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "assertEquals(Collections.emptySet(),worker.taskIds())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "EasyMock.expect(task.version()).andReturn(\"1.0\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testCleanupTasksOnStop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expectStartStorage()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG,.getName())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "workerTask.stop()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "connProps.put(\"value.converter.extra.config\",\"bar\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "PowerMock.verifyAll()@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expect(connectorFactory.newTask()).andReturn(task)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expectLastCall()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "PowerMock.verifyAll()@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EasyMock.expectLastCall()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "worker = new Worker(WORKER_ID,new MockTime(),connectorFactory,config,offsetBackingStore)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Map<String,String> connProps = anyConnectorConfigMap()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "connProps.put(\"key.converter.extra.config\",\"foo\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestSourceTask task = PowerMock.createMock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Capture<TestConverter> valueConverter = EasyMock.newCapture()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(\"bar\",valueConverter.getValue().configs.get(\"extra.config\"))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "expectStopStorage()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "PowerMock.expectNew(,EasyMock.eq(TASK_ID),EasyMock.eq(task),EasyMock.anyObject(),EasyMock.eq(TargetState.STARTED),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject()).andReturn(workerTask)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "assertEquals(Collections.emptySet(),worker.taskIds())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "EasyMock.expectLastCall()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "workerTask.initialize(new TaskConfig(origProps))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testConverterOverrides['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "PowerMock.replayAll()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "workerTask.run()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertEquals(\"foo\",keyConverter.getValue().configs.get(\"extra.config\"))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Map<String,String> origProps = new HashMap<>()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "worker.startTask(TASK_ID,connProps,origProps,taskStatusListener,TargetState.STARTED)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "PowerMock.expectNew(,EasyMock.eq(TASK_ID),EasyMock.eq(task),EasyMock.anyObject(),EasyMock.eq(TargetState.STARTED),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.eq(TransformationChain.noOp()),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject()).andReturn(workerTask)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "EasyMock.expectLastCall()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "worker.stop()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "origProps.put(TaskConfig.TASK_CLASS_CONFIG,.getName())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "PowerMock.expectNew(,EasyMock.eq(TASK_ID),EasyMock.eq(task),EasyMock.anyObject(),EasyMock.eq(TargetState.STARTED),EasyMock.capture(keyConverter),EasyMock.capture(valueConverter),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject()).andReturn(workerTask)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Capture<TestConverter> keyConverter = EasyMock.newCapture()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "worker.start()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Map<String,String> origProps = new HashMap<>()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "worker.stopAndAwaitTask(TASK_ID)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "WorkerSourceTask workerTask = PowerMock.createMock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG,.getName())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "origProps.put(TaskConfig.TASK_CLASS_CONFIG,.getName())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expectStopStorage()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
8->16 [style = bold, label=""];
30->38 [style = bold, label=""];
24->12 [style = bold, label=""];
16->13 [style = bold, label=""];
4->35 [style = bold, label=""];
28->37 [style = bold, label=""];
35->29 [style = bold, label=""];
38->44 [style = bold, label=""];
11->14 [style = bold, label=""];
10->36 [style = dashed, label="0"];
6->21 [style = solid, label="task"];
6->23 [style = bold, label=""];
37->41 [style = bold, label=""];
26->18 [style = bold, label=""];
4->26 [style = bold, label=""];
34->31 [style = bold, label=""];
0->26 [style = dashed, label="0"];
31->44 [style = solid, label="connProps"];
12->6 [style = bold, label=""];
39->28 [style = bold, label=""];
7->3 [style = bold, label=""];
18->1 [style = solid, label="origProps"];
23->26 [style = solid, label="workerTask"];
4->0 [style = bold, label=""];
20->5 [style = bold, label=""];
14->7 [style = bold, label=""];
45->12 [style = bold, label=""];
23->43 [style = solid, label="workerTask"];
23->0 [style = solid, label="workerTask"];
27->39 [style = bold, label=""];
8->36 [style = bold, label=""];
36->13 [style = bold, label=""];
18->22 [style = bold, label=""];
7->34 [style = bold, label=""];
10->8 [style = bold, label=""];
19->9 [style = bold, label=""];
25->12 [style = bold, label=""];
42->30 [style = bold, label=""];
9->15 [style = bold, label=""];
15->20 [style = bold, label=""];
43->1 [style = bold, label=""];
29->43 [style = bold, label=""];
31->40 [style = bold, label=""];
23->17 [style = bold, label=""];
0->18 [style = bold, label=""];
33->32 [style = bold, label=""];
18->14 [style = solid, label="origProps"];
21->4 [style = bold, label=""];
22->1 [style = bold, label=""];
41->33 [style = bold, label=""];
1->19 [style = bold, label=""];
44->27 [style = bold, label=""];
1->9 [style = solid, label="origProps"];
17->21 [style = bold, label=""];
40->42 [style = bold, label=""];
2->11 [style = bold, label=""];
1->44 [style = solid, label="origProps"];
13->2 [style = bold, label=""];
}
