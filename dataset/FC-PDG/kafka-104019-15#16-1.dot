digraph {
0 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){JoinGroupRequest joinRequest = (JoinGroupRequest)bodyreturn joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID)}},joinGroupFollowerResponse(2,consumerId,\"leader\",Errors.NONE.code()))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "client.prepareResponse(syncGroupResponse(singletonList(t1p),Errors.NONE.code()))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "client.prepareResponse(syncGroupResponse(singletonList(tp),Errors.NONE.code()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testUnknownMemberIdOnSyncGroup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertFalse(coordinator.needRejoin())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "client.prepareResponse(syncGroupResponse(singletonList(tp),Errors.NONE.code()))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "client.prepareResponse(joinGroupFollowerResponse(2,consumerId,\"leader\",Errors.NONE.code()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "client.prepareResponse(joinGroupFollowerResponse(1,consumerId,\"leader\",Errors.NONE.code()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "subscriptions.subscribe(singleton(topic1),rebalanceListener)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "client.prepareResponse(syncGroupResponse(Collections.emptyList(),Errors.REBALANCE_IN_PROGRESS.code()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "coordinator.joinGroupIfNeeded()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testUnknownMemberIdOnSyncGroup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "coordinator.joinGroupIfNeeded()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "subscriptions.subscribe(singleton(topicName),rebalanceListener)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertFalse(coordinator.needRejoin())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(singleton(t1p),subscriptions.assignedPartitions())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE.code()))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final String consumerId = \"consumer\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(singleton(tp),subscriptions.assignedPartitions())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "coordinator.ensureCoordinatorReady()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testRebalanceInProgressOnSyncGroup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "client.prepareResponse(syncGroupResponse(Collections.emptyList(),Errors.UNKNOWN_MEMBER_ID.code()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(singleton(tp),subscriptions.assignedPartitions())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->3 [style = bold, label=""];
8->10 [style = bold, label=""];
20->17 [style = bold, label=""];
11->20 [style = dashed, label="0"];
3->1 [style = bold, label=""];
5->17 [style = solid, label="consumerId"];
7->14 [style = dashed, label="0"];
0->12 [style = bold, label=""];
5->6 [style = solid, label="consumerId"];
2->9 [style = bold, label=""];
5->14 [style = bold, label=""];
16->19 [style = bold, label=""];
7->8 [style = bold, label=""];
12->1 [style = bold, label=""];
0->17 [style = dashed, label="0"];
10->6 [style = bold, label=""];
22->5 [style = bold, label=""];
6->20 [style = bold, label=""];
11->0 [style = bold, label=""];
3->12 [style = dashed, label="0"];
6->11 [style = bold, label=""];
2->15 [style = bold, label=""];
13->5 [style = bold, label=""];
5->7 [style = bold, label=""];
5->0 [style = solid, label="consumerId"];
1->2 [style = bold, label=""];
14->8 [style = bold, label=""];
19->21 [style = bold, label=""];
4->5 [style = bold, label=""];
17->18 [style = bold, label=""];
9->15 [style = dashed, label="0"];
18->16 [style = bold, label=""];
}
