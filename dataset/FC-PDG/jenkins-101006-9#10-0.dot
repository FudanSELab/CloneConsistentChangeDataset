digraph {
0 [style = filled, label = "String s = ((Build)run).getBuiltOnStr()@@@33@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "domainAxis.setCategoryMargin(0.0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "getBuildTimeGraph['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return ColorPalette.BLUE@@@25@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "s != null@@@34@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "toString['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "plot.setDomainAxis(domainAxis)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "return domainAxis@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "String s = ((Build)run).getBuiltOnStr()@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "return ColorPalette.BLUE@@@25@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "s != null@@@34@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "domainAxis.setUpperMargin(0.0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "getColor['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "domainAxis.setLowerMargin(0.0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "l += ' ' + s@@@34@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "domainAxis.setTickLabelFont(CHART_FONT)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "getColor['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "l += ' ' + s@@@34@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "final CategoryAxis domainAxis = new NoOverlapCategoryAxis(null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "domainAxis.setLabelFont(CHART_FONT)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "return l@@@36@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "getBuildTimeGraph['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "return l@@@36@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "CategoryPlot plot@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "toString['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "configureDomainAxis['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "return new Graph(getLastBuildTime(),500,400){@Override protected JFreeChart createGraph(){class ChartLabel{public ChartLabel(Run r){this.run = r}public int compareTo(ChartLabel that){return this.run.number - that.run.number}@Override public boolean equals(Object o){if (o == null || !.isAssignableFrom(o.getClass())) {return false}ChartLabel that = (ChartLabel)oreturn run == that.run}public java.awt.Color getColor(){Result r = run.getResult()if (r == Result.FAILURE) return ColorPalette.REDif (r == Result.UNSTABLE) return ColorPalette.YELLOWif (r == Result.ABORTED || r == Result.NOT_BUILT) return ColorPalette.GREYreturn ColorPalette.BLUE}@Override public int hashCode(){return run.hashCode()}@Override public String toString(){String l = run.getDisplayName()if (run instanceof Build) {String s = ((Build)run).getBuiltOnStr()if (s != null) l += ' ' + s}return l}}DataSetBuilder<String,ChartLabel> data = new DataSetBuilder<String,ChartLabel>()for (Run r : getNewBuilds()){if (r.isBuilding()) continuedata.add(((double)r.getDuration()) / (1000 * 60),\"min\",new ChartLabel(r))}final CategoryDataset dataset = data.build()final JFreeChart chart = ChartFactory.createStackedAreaChart(null,null,Messages.Job_minutes(),dataset,PlotOrientation.VERTICAL,false,true,false)chart.setBackgroundPaint(Color.white)final CategoryPlot plot = chart.getCategoryPlot()plot.setBackgroundPaint(Color.WHITE)plot.setOutlinePaint(null)plot.setForegroundAlpha(0.8f)plot.setRangeGridlinesVisible(true)plot.setRangeGridlinePaint(Color.black)CategoryAxis domainAxis = new ShiftedCategoryAxis(null)plot.setDomainAxis(domainAxis)domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_90)domainAxis.setLowerMargin(0.0)domainAxis.setUpperMargin(0.0)domainAxis.setCategoryMargin(0.0)final NumberAxis rangeAxis = (NumberAxis)plot.getRangeAxis()ChartUtil.adjustChebyshev(dataset,rangeAxis)rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits())StackedAreaRenderer ar = new StackedAreaRenderer2(){@Override public Paint getItemPaint(int row,int column){ChartLabel key = (ChartLabel)dataset.getColumnKey(column)return key.getColor()}@Override public String generateURL(CategoryDataset dataset,int row,int column){ChartLabel label = (ChartLabel)dataset.getColumnKey(column)return String.valueOf(label.run.number)}@Override public String generateToolTip(CategoryDataset dataset,int row,int column){ChartLabel label = (ChartLabel)dataset.getColumnKey(column)return label.run.getDisplayName() + \" : \" + label.run.getDurationString()}}plot.setRenderer(ar)plot.setInsets(new RectangleInsets(0,0,0,5.0))return chart}}@@@3@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->2 [style = solid, label="r"];
4->6 [style = bold, label=""];
20->23 [style = bold, label=""];
0->1 [style = dotted, label="true"];
10->13 [style = solid, label="s"];
10->1 [style = dotted, label="true"];
2->4 [style = bold, label=""];
3->4 [style = solid, label="l"];
1->9 [style = bold, label=""];
15->1 [style = bold, label=""];
9->11 [style = bold, label=""];
21->22 [style = bold, label=""];
27->25 [style = bold, label=""];
1->4 [style = solid, label="r"];
17->21 [style = bold, label=""];
23->24 [style = bold, label=""];
2->5 [style = bold, label=""];
5->3 [style = dotted, label="true"];
10->9 [style = bold, label=""];
25->20 [style = bold, label=""];
22->27 [style = bold, label=""];
17->26 [style = solid, label="domainAxis"];
2->5 [style = dotted, label="true"];
12->13 [style = dotted, label="true"];
1->9 [style = solid, label="o"];
11->9 [style = bold, label=""];
17->21 [style = solid, label="domainAxis"];
12->11 [style = dotted, label="false"];
4->8 [style = bold, label=""];
11->16 [style = bold, label=""];
4->1 [style = dotted, label="true"];
12->11 [style = bold, label=""];
5->4 [style = dotted, label="false"];
11->14 [style = bold, label=""];
5->4 [style = bold, label=""];
1->11 [style = solid, label="l"];
9->10 [style = dotted, label="true"];
4->2 [style = bold, label=""];
12->13 [style = bold, label=""];
10->12 [style = bold, label=""];
11->16 [style = dotted, label="true"];
10->12 [style = solid, label="s"];
13->11 [style = bold, label=""];
16->1 [style = bold, label=""];
11->1 [style = dotted, label="true"];
1->2 [style = solid, label="o"];
19->17 [style = bold, label=""];
2->1 [style = bold, label=""];
1->9 [style = solid, label="r"];
1->11 [style = solid, label="r"];
1->12 [style = solid, label="o"];
2->5 [style = dotted, label="false"];
1->5 [style = solid, label="o"];
1->12 [style = solid, label="r"];
2->0 [style = bold, label=""];
9->10 [style = bold, label=""];
4->8 [style = dotted, label="false"];
5->3 [style = bold, label=""];
2->0 [style = dotted, label="true"];
0->3 [style = solid, label="s"];
9->12 [style = dotted, label="true"];
0->2 [style = bold, label=""];
0->5 [style = bold, label=""];
7->1 [style = bold, label=""];
4->6 [style = dotted, label="true"];
9->12 [style = dotted, label="false"];
9->1 [style = bold, label=""];
6->1 [style = bold, label=""];
1->5 [style = solid, label="r"];
11->14 [style = dotted, label="false"];
1->2 [style = bold, label=""];
3->4 [style = bold, label=""];
0->5 [style = solid, label="s"];
1->4 [style = solid, label="l"];
24->26 [style = bold, label=""];
9->12 [style = bold, label=""];
13->11 [style = solid, label="l"];
19->18 [style = dotted, label="true"];
}
