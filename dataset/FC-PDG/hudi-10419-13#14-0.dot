digraph {
27 [style = filled, label = "nextEvent = funcWrapper.getNextEvent()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testInsert['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "funcWrapper.openFunction()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "checkWrittenData(tempFile,EXPECTED1)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "checkIndexLoaded(new HoodieKey(\"id1\",\"par1\"),new HoodieKey(\"id2\",\"par1\"),new HoodieKey(\"id3\",\"par2\"),new HoodieKey(\"id4\",\"par2\"),new HoodieKey(\"id5\",\"par3\"),new HoodieKey(\"id6\",\"par3\"),new HoodieKey(\"id7\",\"par4\"),new HoodieKey(\"id8\",\"par4\"),new HoodieKey(\"id9\",\"par3\"),new HoodieKey(\"id10\",\"par4\"),new HoodieKey(\"id11\",\"par4\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testInsert['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "assertThat(\"The operator expect to send an event\",nextEvent,instanceOf())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "OperatorEvent nextEvent = funcWrapper.getNextEvent()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,nextEvent)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "funcWrapper.invoke(rowData)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "checkWrittenData(tempFile,EXPECTED1)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,nextEvent)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(funcWrapper.isAlreadyBootstrap())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final OperatorEvent nextEvent = funcWrapper.getNextEvent()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "funcWrapper.openFunction()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEmptyDataFiles()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.REQUESTED,instant)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testIndexStateBootstrap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(\"The operator expect to send an event\",nextEvent,instanceOf())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED,true)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "checkWrittenData(tempFile,EXPECTED2)@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String instant = funcWrapper.getWriteClient().getLastPendingInstant(getTableType())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "checkWrittenData(tempFile,EXPECTED2)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(\"The operator expect to send an event\",nextEvent,instanceOf())@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "checkWrittenData(tempFile,EXPECTED1)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "funcWrapper.invoke(rowData)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->0 [style = bold, label=""];
12->27 [style = bold, label=""];
3->11 [style = bold, label=""];
7->8 [style = bold, label=""];
5->8 [style = bold, label=""];
11->12 [style = bold, label=""];
11->21 [style = bold, label=""];
16->4 [style = bold, label=""];
9->4 [style = bold, label=""];
6->26 [style = dashed, label="0"];
2->7 [style = bold, label=""];
27->13 [style = bold, label=""];
8->26 [style = bold, label=""];
0->13 [style = solid, label="nextEvent"];
0->27 [style = dashed, label="0"];
13->22 [style = bold, label=""];
24->4 [style = bold, label=""];
12->2 [style = solid, label="instant"];
8->6 [style = bold, label=""];
25->18 [style = bold, label=""];
0->13 [style = bold, label=""];
10->3 [style = bold, label=""];
29->23 [style = bold, label=""];
18->32 [style = bold, label=""];
14->1 [style = bold, label=""];
21->25 [style = bold, label=""];
33->30 [style = bold, label=""];
0->15 [style = bold, label=""];
19->29 [style = bold, label=""];
15->14 [style = bold, label=""];
28->33 [style = bold, label=""];
22->14 [style = bold, label=""];
27->13 [style = solid, label="nextEvent"];
31->20 [style = bold, label=""];
4->10 [style = bold, label=""];
7->5 [style = bold, label=""];
21->25 [style = solid, label="nextEvent"];
0->14 [style = solid, label="nextEvent"];
23->28 [style = bold, label=""];
27->14 [style = solid, label="nextEvent"];
13->15 [style = dashed, label="0"];
13->14 [style = bold, label=""];
30->17 [style = bold, label=""];
21->18 [style = solid, label="nextEvent"];
0->15 [style = solid, label="nextEvent"];
12->8 [style = solid, label="instant"];
1->2 [style = bold, label=""];
20->12 [style = bold, label=""];
32->19 [style = bold, label=""];
17->31 [style = bold, label=""];
}
