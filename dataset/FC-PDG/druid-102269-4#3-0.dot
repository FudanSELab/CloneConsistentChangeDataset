digraph {
30 [style = filled, label = "expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(task1.getIOConfig().getMinimumMessageTime().get(),task2.getIOConfig().getMinimumMessageTime().get())@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertTrue(\"minimumMessageTime\",task1.getIOConfig().getMinimumMessageTime().get().plusMinutes(59).isBeforeNow())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "expectLastCall().anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Capture<KinesisIndexTask> captured = Capture.newInstance(CaptureType.ALL)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1H\",new Period(\"PT1H\"),null,false)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "KafkaIndexTask task2 = captured.getValues().get(1)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "expect(supervisorRecordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(\"minimumMessageTime\",task1.getIOConfig().getMinimumMessageTime().get().plusMinutes(61).isAfterNow())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testLateMessageRejectionPeriod['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "expectLastCall().anyTimes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "verifyAll()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "replayAll()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.absent()).anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true).times(2)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "supervisorRecordSupplier.seek(anyObject(),anyString())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.absent()).anyTimes()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "KafkaIndexTask task1 = captured.getValues().get(0)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "KinesisIndexTask task1 = captured.getValues().get(0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "addSomeEvents(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1H\",new Period(\"PT1H\"),null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertTrue(\"minimumMessageTime\",task1.getIOConfig().getMinimumMessageTime().get().plusMinutes(59).isBeforeNow())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertTrue(\"minimumMessageTime\",task1.getIOConfig().getMinimumMessageTime().get().plusMinutes(61).isAfterNow())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "expectLastCall().anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "supervisorRecordSupplier.assign(anyObject())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "supervisor.start()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Capture<KafkaIndexTask> captured = Capture.newInstance(CaptureType.ALL)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "supervisorRecordSupplier.seekToLatest(anyObject())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "KinesisIndexTask task2 = captured.getValues().get(1)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testLateMessageRejectionPeriod['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expect(taskQueue.add(capture(captured))).andReturn(true).times(2)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "supervisor.runInternal()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1H\",new Period(\"PT1H\"),null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "replayAll()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "supervisor.start()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "verifyAll()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "supervisor.runInternal()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testLateMessageRejectionPeriod['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7->13 [style = bold, label=""];
6->17 [style = bold, label=""];
4->9 [style = bold, label=""];
39->37 [style = bold, label=""];
8->10 [style = bold, label=""];
27->38 [style = bold, label=""];
23->30 [style = bold, label=""];
35->44 [style = bold, label=""];
38->24 [style = bold, label=""];
0->19 [style = dashed, label="0"];
16->6 [style = bold, label=""];
2->3 [style = bold, label=""];
42->20 [style = bold, label=""];
16->44 [style = dashed, label="0"];
18->19 [style = bold, label=""];
44->40 [style = bold, label=""];
20->32 [style = bold, label=""];
29->25 [style = bold, label=""];
3->15 [style = bold, label=""];
1->0 [style = bold, label=""];
6->40 [style = dashed, label="0"];
9->8 [style = bold, label=""];
30->29 [style = bold, label=""];
32->33 [style = bold, label=""];
31->34 [style = bold, label=""];
5->16 [style = bold, label=""];
17->7 [style = bold, label=""];
34->28 [style = bold, label=""];
11->5 [style = bold, label=""];
26->41 [style = bold, label=""];
21->36 [style = bold, label=""];
15->11 [style = bold, label=""];
0->4 [style = bold, label=""];
10->12 [style = bold, label=""];
28->23 [style = bold, label=""];
40->27 [style = bold, label=""];
33->43 [style = bold, label=""];
25->26 [style = bold, label=""];
43->22 [style = bold, label=""];
12->14 [style = bold, label=""];
0->34 [style = dashed, label="0"];
14->2 [style = bold, label=""];
2->41 [style = dashed, label="0"];
19->4 [style = bold, label=""];
22->13 [style = bold, label=""];
41->39 [style = bold, label=""];
36->35 [style = bold, label=""];
13->21 [style = bold, label=""];
37->42 [style = bold, label=""];
}
