digraph {
17 [style = filled, label = "val className = domainObject.getClass().getName()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final String namespace = logicalTypeIfAny.get().getNamespace()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "act['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "messageService.warnUser(\"Unknown class, unable to export\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "val metamodelDto = metaModelService.exportMetaModel(config)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "val domainClassDtos = metamodelDto.getDomainClassDto()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "act['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final Optional<LogicalType> logicalTypeIfAny = metaModelService.lookupLogicalTypeByClass(domainObject.getClass())@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "tree.expand(TreePath.of(0))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "@ParameterLayout(named=DtoMixinConstants.FILENAME_PROPERTY_NAME,describedAs=DtoMixinConstants.FILENAME_PROPERTY_DESCRIPTION) final String fileName@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "val xmlString = jaxbService.toXml(metamodelDto)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "return tree@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "!logicalTypeIfAny.isPresent()@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return null@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "val tree = TreeNode.lazy(root,)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final Optional<LogicalType> logicalTypeIfAny = metaModelService.lookupLogicalTypeByClass(holder.getClass())@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "act['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "val domainClassDto = metamodelDto.getDomainClassDto().stream().filter(null).findFirst().orElseThrow(null)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "tree.streamDepthFirst().map(null).forEach(null)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "val root = MMNodeFactory.type(domainClassDto,null)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "val config = new Config().withIgnoreNoop().withIgnoreAbstractClasses().withIgnoreInterfaces().withIgnoreBuiltInValueTypes().withNamespacePrefix(namespace)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return Clob.of(fileName,CommonMimeType.XML,xmlString)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "val className = holder.getClass().getName()@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "domainClassDtos.removeIf(null)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19->21 [style = dotted, label="true"];
5->22 [style = dashed, label="0"];
3->10 [style = bold, label=""];
2->3 [style = dotted, label="true"];
21->18 [style = solid, label="fileName"];
2->4 [style = dotted, label="true"];
2->4 [style = bold, label=""];
11->20 [style = bold, label=""];
8->5 [style = bold, label=""];
19->1 [style = bold, label=""];
7->9 [style = bold, label=""];
9->13 [style = bold, label=""];
20->22 [style = bold, label=""];
2->10 [style = bold, label=""];
14->0 [style = bold, label=""];
7->12 [style = solid, label="tree"];
11->17 [style = dashed, label="0"];
0->11 [style = bold, label=""];
16->2 [style = bold, label=""];
13->12 [style = bold, label=""];
11->8 [style = bold, label=""];
15->16 [style = bold, label=""];
0->17 [style = bold, label=""];
17->8 [style = bold, label=""];
23->18 [style = bold, label=""];
1->16 [style = dashed, label="0"];
22->23 [style = bold, label=""];
23->18 [style = solid, label="xmlString"];
10->14 [style = solid, label="namespace"];
8->5 [style = solid, label="domainClassDto"];
4->3 [style = bold, label=""];
6->1 [style = bold, label=""];
1->2 [style = bold, label=""];
10->14 [style = bold, label=""];
5->7 [style = bold, label=""];
14->0 [style = solid, label="config"];
0->23 [style = solid, label="metamodelDto"];
5->7 [style = solid, label="root"];
}
