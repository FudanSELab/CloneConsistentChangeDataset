digraph {
19 [style = filled, label = "File garbage = mavenHomeDir.resolve(\"garbage\").toFile()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(distributionDir,localDistribution.getDistributionDir())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(zipDestination.exists())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(mavenHomeDir.isDirectory())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(new File(homeDir,\"bin/mvn\").exists())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(localDistribution,pathAssembler.getDistribution(configuration))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertFalse(new File(homeDir,\"garbage\").exists())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Files.createFile(garbage.toPath())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "File homeDir = install.createDist(configuration)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Files.createDirectories(mavenHomeDir)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "mavenHomeDir.mkdirs()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "configuration.setAlwaysUnpack(true)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "FileUtils.touch(garbage)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Path homeDir = install.createDist(configuration)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "testCreateDistWithExistingZipAndDistAndAlwaysDownloadTrue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testCreateDistWithExistingDistAndZipAndAlwaysUnpackTrue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "createTestZip(zipDestination)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(Files.exists(zipDestination))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertTrue(Files.isDirectory(mavenHomeDir))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "File garbage = new File(mavenHomeDir,\"garbage\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(mavenHomeDir,homeDir)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(zipDestination,localDistribution.getZipFile())@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertFalse(Files.exists(homeDir.resolve(\"garbage\")))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testCreateDistWithExistingDistAndZipAndAlwaysUnpackTrue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4->18 [style = dashed, label="0"];
15->10 [style = bold, label=""];
7->11 [style = bold, label=""];
22->2 [style = bold, label=""];
12->16 [style = dashed, label="0"];
1->15 [style = dashed, label="0"];
9->4 [style = bold, label=""];
8->3 [style = bold, label=""];
8->20 [style = dashed, label="0"];
18->19 [style = bold, label=""];
3->6 [style = bold, label=""];
20->3 [style = bold, label=""];
16->17 [style = bold, label=""];
9->7 [style = bold, label=""];
2->17 [style = dashed, label="0"];
0->15 [style = bold, label=""];
4->7 [style = bold, label=""];
15->10 [style = solid, label="homeDir"];
1->10 [style = solid, label="homeDir"];
6->5 [style = bold, label=""];
12->2 [style = bold, label=""];
11->0 [style = bold, label=""];
21->9 [style = bold, label=""];
9->18 [style = bold, label=""];
19->14 [style = bold, label=""];
14->0 [style = bold, label=""];
10->16 [style = bold, label=""];
7->19 [style = dashed, label="0"];
10->12 [style = bold, label=""];
0->1 [style = bold, label=""];
11->14 [style = dashed, label="0"];
13->9 [style = bold, label=""];
1->10 [style = bold, label=""];
23->9 [style = bold, label=""];
7->11 [style = solid, label="garbage"];
12->22 [style = bold, label=""];
2->8 [style = bold, label=""];
17->20 [style = bold, label=""];
}
