digraph {
21 [style = filled, label = "assertFalse(connection.isClosed())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "doAnswer(null).when(transport).openConnection(eq(node),eq(connectionProfile),any())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(0,connectionManager.size())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertFalse(connectionManager.nodeConnected(node))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expectThrows(,null)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "connection.close()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "DiscoveryNode node = new DiscoveryNode(\"\",new TransportAddress(InetAddress.getLoopbackAddress(),0),Version.CURRENT)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(0,connectionManager.size())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testConnectAndDisconnect['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "ConnectionManager.ConnectionValidator validator = null@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(1,nodeConnectedCount.get())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Transport.Connection connection = new TestConnect(node)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(connectionManager.nodeConnected(node))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "expectThrows(,null)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(0,nodeDisconnectedCount.get())@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(0,nodeDisconnectedCount.get())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertFalse(connectionManager.nodeConnected(node))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "connectionManager.addListener(new TransportConnectionListener(){@Override public void onNodeConnected(DiscoveryNode node,Transport.Connection connection){nodeConnectedCount.incrementAndGet()}@Override public void onNodeDisconnected(DiscoveryNode node,Transport.Connection connection){nodeDisconnectedCount.incrementAndGet()}})@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(connection.isClosed())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(1,nodeConnectedCount.get())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "PlainActionFuture<Void> fut = new PlainActionFuture<>()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "ConnectionManager.ConnectionValidator validator = null@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(0,nodeConnectedCount.get())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "PlainActionFuture.get(null)@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertSame(connection,connectionManager.getConnection(node))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(connection.isClosed())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "PlainActionFuture.get(null)@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "randomBoolean()@@@36@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "AtomicInteger nodeConnectedCount = new AtomicInteger()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "connectionManager.connectToNode(node,connectionProfile,validator,fut)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(1,nodeDisconnectedCount.get())@@@45@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(1,connectionManager.size())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "connectionManager.disconnectFromNode(node)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "AtomicReference<Transport.Connection> connectionRef = new AtomicReference<>()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testConnectFailsDuringValidation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "AtomicInteger nodeDisconnectedCount = new AtomicInteger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testConnectAndDisconnect['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
9->22 [style = bold, label=""];
8->16 [style = bold, label=""];
22->33 [style = bold, label=""];
16->18 [style = bold, label=""];
25->1 [style = bold, label=""];
10->24 [style = bold, label=""];
11->2 [style = solid, label="node"];
21->15 [style = bold, label=""];
11->9 [style = solid, label="node"];
30->26 [style = bold, label=""];
27->31 [style = solid, label="fut"];
27->31 [style = bold, label=""];
35->32 [style = bold, label=""];
14->19 [style = bold, label=""];
2->12 [style = solid, label="connection"];
20->14 [style = bold, label=""];
0->21 [style = bold, label=""];
28->1 [style = bold, label=""];
2->9 [style = bold, label=""];
29->34 [style = bold, label=""];
13->11 [style = bold, label=""];
33->27 [style = bold, label=""];
11->22 [style = solid, label="node"];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
14->7 [style = bold, label=""];
32->29 [style = bold, label=""];
16->34 [style = dashed, label="0"];
11->35 [style = solid, label="node"];
24->21 [style = bold, label=""];
14->19 [style = dotted, label="false"];
11->15 [style = solid, label="node"];
18->36 [style = dashed, label="0"];
3->8 [style = bold, label=""];
6->10 [style = bold, label=""];
5->13 [style = bold, label=""];
10->0 [style = bold, label=""];
34->36 [style = bold, label=""];
31->30 [style = bold, label=""];
26->35 [style = bold, label=""];
14->7 [style = dotted, label="true"];
0->24 [style = dashed, label="0"];
11->7 [style = solid, label="node"];
23->17 [style = bold, label=""];
15->12 [style = bold, label=""];
12->23 [style = bold, label=""];
4->1 [style = bold, label=""];
11->12 [style = solid, label="node"];
19->3 [style = bold, label=""];
33->31 [style = solid, label="validator"];
22->6 [style = bold, label=""];
17->20 [style = bold, label=""];
11->31 [style = solid, label="node"];
}
