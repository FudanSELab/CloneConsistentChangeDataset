digraph {
3 [style = filled, label = "POIFSFileSystem fs = new POIFSFileSystem(_inst.openResourceAsStream(\"BlockSize512.zvi\"))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "b.get(data)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(fs.getBATBlockAndIndex(0).getBlock().hasFreeSectors())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "POIFSStream stream = new POIFSStream(fs,0)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testWriteNewStreamExtraFATs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
59 [style = filled, label = "assertEquals(2,fs.getNextBlock(1))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(16,fs.getNextBlock(15))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "int i = 0@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "testWriteStream4096['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertEquals(POIFSConstants.END_OF_CHAIN,fs.getNextBlock(2))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertEquals(POIFSConstants.FAT_SECTOR_BLOCK,fs.getNextBlock(14))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(15,fs.getNextBlock(2))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(129,fs.getNextBlock(127))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "i < data.length@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "fs.close()@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "byte exp = (byte)(i % 256)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "fs.close()@@@41@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "data = new byte((((@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "int i = 100@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(4,fs.getNextBlock(3))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(2,fs.getNextBlock(1))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertEquals(exp,data(i()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(POIFSConstants.END_OF_CHAIN,fs.getNextBlock(130))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "POIFSFileSystem fs = new POIFSFileSystem(_inst.openResourceAsStream(\"BlockSize4096.zvi\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertEquals(4,fs.getNextBlock(3))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "count++@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertFalse(fs.getBATBlockAndIndex(0).getBlock().hasFreeSectors())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "ByteBuffer b = it.next()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertEquals(POIFSConstants.END_OF_CHAIN,fs.getNextBlock(16))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(1,fs.getNextBlock(0))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "int count = 0@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(POIFSConstants.UNUSED_BLOCK,fs.getNextBlock(100))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "i++@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "i < 127@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(POIFSConstants.UNUSED_BLOCK,fs.getNextBlock(127))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "byte(( data = new byte((((@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "i++@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Iterator<ByteBuffer> it = stream.getBlockIterator()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertTrue(fs.getBATBlockAndIndex(128).getBlock().hasFreeSectors())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "it.hasNext()@@@28@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "i++@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "byte(( data = new byte((((@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(130,fs.getNextBlock(129))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(POIFSConstants.FAT_SECTOR_BLOCK,fs.getNextBlock(99))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(POIFSConstants.FAT_SECTOR_BLOCK,fs.getNextBlock(128))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "fs.setNextBlock(i,POIFSConstants.END_OF_CHAIN)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "data(i( = (byte)(i % 256)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertEquals(5,count)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertEquals(POIFSConstants.UNUSED_BLOCK,fs.getNextBlock(17))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testWriteNewStreamExtraFATs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertEquals(POIFSConstants.UNUSED_BLOCK,fs.getNextBlock(15))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(POIFSConstants.FAT_SECTOR_BLOCK,fs.getNextBlock(14))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "i < data.length@@@33@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(POIFSConstants.UNUSED_BLOCK,fs.getNextBlock(131))@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int i = 0@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(POIFSConstants.UNUSED_BLOCK,fs.getNextBlock(127))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "int i = 0@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "POIFSStream stream = new POIFSStream(fs)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "stream.updateContents(data)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(1,fs.getNextBlock(0))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(POIFSConstants.END_OF_CHAIN,fs.getNextBlock(126))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37->28 [style = bold, label=""];
5->20 [style = bold, label=""];
38->52 [style = bold, label=""];
35->41 [style = bold, label=""];
2->32 [style = dashed, label="0"];
38->52 [style = solid, label="i"];
15->20 [style = dotted, label="true"];
14->17 [style = bold, label=""];
25->14 [style = bold, label=""];
52->51 [style = dotted, label="true"];
1->13 [style = bold, label=""];
9->6 [style = bold, label=""];
45->57 [style = bold, label=""];
23->43 [style = dashed, label="0"];
53->36 [style = bold, label=""];
19->1 [style = bold, label=""];
23->22 [style = bold, label=""];
41->42 [style = solid, label="data"];
10->12 [style = bold, label=""];
15->20 [style = bold, label=""];
0->8 [style = bold, label=""];
13->6 [style = solid, label="data"];
12->44 [style = dashed, label="0"];
29->44 [style = bold, label=""];
4->8 [style = bold, label=""];
49->56 [style = bold, label=""];
8->0 [style = dotted, label="true"];
39->47 [style = bold, label=""];
38->51 [style = solid, label="i"];
50->51 [style = solid, label="exp"];
20->15 [style = bold, label=""];
57->46 [style = bold, label=""];
49->48 [style = dotted, label="true"];
9->15 [style = dashed, label="0"];
6->32 [style = bold, label=""];
48->49 [style = bold, label=""];
54->49 [style = bold, label=""];
54->56 [style = solid, label="count"];
24->0 [style = bold, label=""];
48->56 [style = solid, label="count"];
47->28 [style = bold, label=""];
54->48 [style = solid, label="count"];
36->20 [style = solid, label="data"];
42->31 [style = bold, label=""];
40->34 [style = bold, label=""];
18->45 [style = dashed, label="0"];
10->29 [style = dashed, label="0"];
11->5 [style = solid, label="i"];
13->11 [style = bold, label=""];
4->8 [style = solid, label="i"];
31->50 [style = solid, label="i"];
37->39 [style = solid, label="i"];
56->58 [style = bold, label=""];
3->23 [style = bold, label=""];
22->18 [style = bold, label=""];
44->55 [style = bold, label=""];
18->4 [style = bold, label=""];
17->2 [style = bold, label=""];
49->41 [style = dotted, label="true"];
15->9 [style = bold, label=""];
52->48 [style = bold, label=""];
0->8 [style = solid, label="i"];
37->28 [style = solid, label="i"];
4->0 [style = solid, label="i"];
36->37 [style = bold, label=""];
20->15 [style = solid, label="i"];
8->24 [style = bold, label=""];
15->5 [style = dotted, label="true"];
47->28 [style = solid, label="i"];
43->59 [style = bold, label=""];
3->30 [style = dashed, label="0"];
6->26 [style = bold, label=""];
49->35 [style = bold, label=""];
30->43 [style = bold, label=""];
31->52 [style = bold, label=""];
59->45 [style = bold, label=""];
28->39 [style = bold, label=""];
31->38 [style = solid, label="i"];
47->39 [style = solid, label="i"];
2->10 [style = bold, label=""];
22->59 [style = dashed, label="0"];
8->24 [style = dotted, label="true"];
49->42 [style = dotted, label="true"];
52->50 [style = dotted, label="true"];
49->52 [style = dotted, label="true"];
52->50 [style = bold, label=""];
3->9 [style = solid, label="fs"];
5->40 [style = bold, label=""];
31->52 [style = solid, label="i"];
5->6 [style = solid, label="data"];
20->5 [style = solid, label="i"];
52->38 [style = dotted, label="true"];
28->15 [style = bold, label=""];
28->47 [style = dotted, label="true"];
5->20 [style = solid, label="i"];
14->34 [style = dashed, label="0"];
38->50 [style = solid, label="i"];
8->19 [style = bold, label=""];
26->25 [style = bold, label=""];
46->53 [style = bold, label=""];
49->31 [style = dotted, label="true"];
30->15 [style = solid, label="fs"];
12->16 [style = bold, label=""];
39->47 [style = solid, label="i"];
11->15 [style = solid, label="i"];
7->3 [style = bold, label=""];
15->5 [style = bold, label=""];
11->15 [style = bold, label=""];
39->20 [style = solid, label="data"];
20->5 [style = bold, label=""];
32->29 [style = bold, label=""];
4->24 [style = solid, label="i"];
41->51 [style = solid, label="data"];
49->35 [style = dotted, label="true"];
51->38 [style = bold, label=""];
16->21 [style = bold, label=""];
50->51 [style = bold, label=""];
34->6 [style = bold, label=""];
0->24 [style = solid, label="i"];
60->30 [style = bold, label=""];
17->6 [style = dashed, label="0"];
27->23 [style = bold, label=""];
16->55 [style = dashed, label="0"];
28->39 [style = dotted, label="true"];
33->54 [style = bold, label=""];
31->51 [style = solid, label="i"];
55->33 [style = bold, label=""];
41->42 [style = bold, label=""];
}
