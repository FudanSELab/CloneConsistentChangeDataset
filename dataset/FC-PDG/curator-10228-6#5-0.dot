digraph {
20 [style = filled, label = "Assert.assertEquals(events2.poll(10,TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_UPDATED)@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "client.delete().forPath(\"/test/one\")@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(events2.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_REMOVED)@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "cache.close()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testBasicsOnTwoCachesWithSameExecutor['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "cache.getListenable().addListener(new PathChildrenCacheListener(){@Override public void childEvent(CuratorFramework client,PathChildrenCacheEvent event){if (event.getData().getPath().equals(\"/test/one\")) {events.offer(event.getType())}}})@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()),\"sup!\")@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "cache2.close()@@@43@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "cache.getListenable().addListener(new PathChildrenCacheListener(){@Override public void childEvent(CuratorFramework client,PathChildrenCacheEvent event){if (event.getData().getPath().equals(\"/test/one\")) {events.offer(event.getType())}}})@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "Assert.assertEquals(events.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_ADDED)@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "cache.close()@@@41@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final ExecutorService exec = Executors.newSingleThreadExecutor()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "{client.close()}@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Timing timing = new Timing()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "Assert.assertEquals(events.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_UPDATED)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "cache.start()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testBasicsOnTwoCachesWithSameExecutor['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(events.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_REMOVED)@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(events.poll(10,TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_REMOVED)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "cache.close()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "cache.start()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "{client.close()}@@@45@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "PathChildrenCache cache2 = new PathChildrenCache(client,\"/test\",true,false,exec)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(events2.poll(10,TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_ADDED)@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "client.start()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "client.start()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()),\"sup!\")@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "client.create().forPath(\"/test/one\",\"hey there\".getBytes())@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(events2.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_ADDED)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(events.poll(10,TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_UPDATED)@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "PathChildrenCache cache = new PathChildrenCache(client,\"/test\",true,false,exec)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "{client.close()}@@@44@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testBasics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "client.create().forPath(\"/test\")@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "PathChildrenCache cache = new PathChildrenCache(client,\"/test\",true)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "cache2.start()@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "client.setData().forPath(\"/test/one\",\"sup!\".getBytes())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(events.poll(10,TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_ADDED)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(events2.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_UPDATED)@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(events2.poll(10,TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_REMOVED)@@@40@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "cache2.getListenable().addListener(new PathChildrenCacheListener(){@Override public void childEvent(CuratorFramework client,PathChildrenCacheEvent event){if (event.getData().getPath().equals(\"/test/one\")) {events2.offer(event.getType())}}})@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8->16 [style = bold, label=""];
35->31 [style = bold, label=""];
18->3 [style = bold, label=""];
32->22 [style = bold, label=""];
10->20 [style = bold, label=""];
2->19 [style = bold, label=""];
22->2 [style = bold, label=""];
9->0 [style = bold, label=""];
28->30 [style = bold, label=""];
6->0 [style = solid, label="client"];
6->21 [style = bold, label=""];
13->29 [style = dashed, label="0"];
11->6 [style = bold, label=""];
38->29 [style = bold, label=""];
4->15 [style = bold, label=""];
20->31 [style = dashed, label="0"];
21->8 [style = bold, label=""];
3->26 [style = bold, label=""];
10->35 [style = bold, label=""];
4->27 [style = dashed, label="0"];
19->10 [style = bold, label=""];
31->1 [style = bold, label=""];
40->28 [style = bold, label=""];
0->3 [style = solid, label="exec"];
12->1 [style = bold, label=""];
25->7 [style = bold, label=""];
24->22 [style = bold, label=""];
2->38 [style = dashed, label="0"];
26->22 [style = bold, label=""];
15->5 [style = bold, label=""];
5->25 [style = bold, label=""];
2->13 [style = bold, label=""];
2->38 [style = bold, label=""];
4->45 [style = bold, label=""];
6->18 [style = solid, label="client"];
6->44 [style = solid, label="client"];
9->0 [style = solid, label="exec"];
23->24 [style = bold, label=""];
13->19 [style = bold, label=""];
0->23 [style = bold, label=""];
42->6 [style = bold, label=""];
33->25 [style = bold, label=""];
25->37 [style = bold, label=""];
16->44 [style = bold, label=""];
10->12 [style = bold, label=""];
39->40 [style = bold, label=""];
37->34 [style = bold, label=""];
43->24 [style = bold, label=""];
4->27 [style = bold, label=""];
28->3 [style = solid, label="client"];
20->12 [style = bold, label=""];
24->17 [style = bold, label=""];
44->41 [style = bold, label=""];
12->14 [style = bold, label=""];
28->23 [style = solid, label="client"];
15->33 [style = dashed, label="0"];
29->10 [style = bold, label=""];
9->18 [style = solid, label="exec"];
1->14 [style = bold, label=""];
23->36 [style = bold, label=""];
27->33 [style = bold, label=""];
36->17 [style = bold, label=""];
3->32 [style = bold, label=""];
30->16 [style = bold, label=""];
0->23 [style = solid, label="exec"];
41->43 [style = bold, label=""];
10->35 [style = dashed, label="0"];
16->9 [style = bold, label=""];
17->18 [style = bold, label=""];
14->4 [style = bold, label=""];
}
