digraph {
49 [style = filled, label = "SplitStream<Integer> split = input.split(new OutputSelector<Integer>(){@Override public Iterable<String> select(Integer value){if (value.equals(1)) {return Collections.singletonList(\"one\")}{return Collections.singletonList(\"other\")}}})@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getChainEntryPoint())@@@74@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "input = input.map(new MapFunction<Integer,Integer>(){@Override public Integer map(Integer value){return value}})@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "input.map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink2Results.add(value)}})@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "Configuration configuration = chainedVertex.getConfiguration()@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "assertThat(sink2Results,contains(\"First 2: 1\"))@@@84@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "split.select(\"other\").map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"Second: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink3Results.add(value)}})@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)@@@67@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "input.map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"Second: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink2Results.add(value)}})@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "OperatorChain<Integer,StreamMap<Integer,Integer>> operatorChain = createOperatorChain(streamConfig,environment,mockTask)@@@73@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertThat(sink3Results,contains(\"Second: 2\",\"Second: 3\"))@@@85@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@80@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "operator != null@@@50@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "headOperator.processElement(new StreamRecord<>(3))@@@82@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testMultiChaining['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "headOperator.processElement(new StreamRecord<>(2))@@@35@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
55 [style = filled, label = "split.select(\"one\").map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"First 1: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink1Results.add(value)}})@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "input.map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"First: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink1Results.add(value)}})@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@65@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "headOperator.processElement(new StreamRecord<>(3))@@@36@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "sink2Results = new ArrayList<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "operator.open()@@@77@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(sink2Results,contains(\"Second: 1\",\"Second: 2\",\"Second: 3\"))@@@58@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "sink1Results = new ArrayList<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "operator.open()@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "input = input.map(null)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "headOperator.processElement(new StreamRecord<>(2))@@@81@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(sink1Results,contains(\"First: 1\",\"First: 2\",\"First: 3\"))@@@37@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "assertThat(sink1Results,contains(\"First 1: 1\"))@@@83@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "DataStream<Integer> input = env.fromElements(1,2,3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "operator != null@@@76@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "sink3Results = new ArrayList<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "input = input.map(new MapFunction<Integer,Integer>(){@Override public Integer map(Integer value){return value}})@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@39@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "testMultiChainingWithSplit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "OperatorChain<Integer,StreamMap<Integer,Integer>> operatorChain = createOperatorChain(streamConfig,environment,mockTask)@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@54@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@46@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(sink2Results,contains(\"Second: 1\",\"Second: 2\",\"Second: 3\"))@@@38@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)@@@66@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@72@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getChainEntryPoint())@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "split.select(\"one\").map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"First 2: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink2Results.add(value)}})@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Configuration configuration = chainedVertex.getConfiguration()@@@68@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "StreamConfig streamConfig = new StreamConfig(configuration)@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "operator != null@@@30@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testMultiChaining['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "StreamConfig streamConfig = new StreamConfig(configuration)@@@69@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "input.map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink1Results.add(value)}})@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@34@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32->35 [style = bold, label=""];
52->44 [style = bold, label=""];
39->35 [style = solid, label="streamConfig"];
36->32 [style = solid, label="mockTask"];
15->57 [style = solid, label="mockTask"];
20->15 [style = solid, label="streamConfig"];
38->41 [style = dotted, label="true"];
21->15 [style = bold, label=""];
26->34 [style = bold, label=""];
37->3 [style = dotted, label="true"];
30->36 [style = bold, label=""];
38->41 [style = bold, label=""];
23->49 [style = dashed, label="0"];
11->46 [style = bold, label=""];
9->10 [style = bold, label=""];
49->55 [style = bold, label=""];
2->11 [style = dotted, label="true"];
13->17 [style = bold, label=""];
1->33 [style = bold, label=""];
8->21 [style = solid, label="streamConfig"];
8->20 [style = bold, label=""];
1->0 [style = solid, label="sink2Results"];
11->13 [style = bold, label=""];
50->45 [style = bold, label=""];
20->7 [style = solid, label="streamConfig"];
40->26 [style = bold, label=""];
16->14 [style = bold, label=""];
35->38 [style = bold, label=""];
25->40 [style = bold, label=""];
18->33 [style = dashed, label="0"];
11->46 [style = dotted, label="true"];
16->25 [style = dashed, label="0"];
7->57 [style = bold, label=""];
44->49 [style = bold, label=""];
8->15 [style = solid, label="streamConfig"];
54->53 [style = dotted, label="true"];
8->7 [style = solid, label="streamConfig"];
7->2 [style = bold, label=""];
56->48 [style = bold, label=""];
11->17 [style = bold, label=""];
41->38 [style = bold, label=""];
39->36 [style = solid, label="streamConfig"];
9->3 [style = dotted, label="true"];
28->29 [style = bold, label=""];
1->31 [style = solid, label="sink2Results"];
18->23 [style = bold, label=""];
1->52 [style = bold, label=""];
17->6 [style = bold, label=""];
38->24 [style = bold, label=""];
37->10 [style = bold, label=""];
39->32 [style = solid, label="streamConfig"];
52->47 [style = solid, label="sink3Results"];
14->19 [style = bold, label=""];
3->53 [style = dashed, label="0"];
57->11 [style = bold, label=""];
8->20 [style = solid, label="configuration"];
27->39 [style = bold, label=""];
33->43 [style = bold, label=""];
20->51 [style = bold, label=""];
54->10 [style = bold, label=""];
22->50 [style = solid, label="sink1Results"];
22->1 [style = bold, label=""];
42->28 [style = bold, label=""];
4->5 [style = bold, label=""];
2->11 [style = bold, label=""];
0->45 [style = dashed, label="0"];
24->42 [style = bold, label=""];
6->12 [style = bold, label=""];
10->22 [style = bold, label=""];
5->8 [style = bold, label=""];
22->29 [style = solid, label="sink1Results"];
23->16 [style = bold, label=""];
12->50 [style = bold, label=""];
27->39 [style = solid, label="configuration"];
15->7 [style = bold, label=""];
36->35 [style = solid, label="mockTask"];
41->24 [style = bold, label=""];
5->8 [style = solid, label="configuration"];
29->31 [style = bold, label=""];
15->7 [style = solid, label="mockTask"];
36->32 [style = bold, label=""];
1->18 [style = bold, label=""];
22->12 [style = solid, label="sink1Results"];
12->0 [style = bold, label=""];
21->7 [style = solid, label="mockTask"];
11->2 [style = bold, label=""];
55->56 [style = bold, label=""];
46->11 [style = bold, label=""];
2->13 [style = bold, label=""];
20->21 [style = bold, label=""];
39->30 [style = bold, label=""];
1->45 [style = solid, label="sink2Results"];
16->56 [style = dashed, label="0"];
21->15 [style = solid, label="mockTask"];
20->57 [style = solid, label="streamConfig"];
45->47 [style = bold, label=""];
48->19 [style = bold, label=""];
19->4 [style = bold, label=""];
51->15 [style = bold, label=""];
43->25 [style = bold, label=""];
12->50 [style = dashed, label="0"];
46->17 [style = bold, label=""];
34->27 [style = bold, label=""];
}
