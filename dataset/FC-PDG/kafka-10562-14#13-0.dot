digraph {
13 [style = filled, label = "assertThat(keyValueStore.get(\"A\"),is(\"recurse-alpha\"))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "shouldApplyGlobalUpdatesCorrectlyInRecursiveTopologies['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "topology.addSource(\"source\",new StringDeserializer(),new StringDeserializer(),\"input\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "topology.addSink(\"globalSink\",\"global-topic\",new StringSerializer(),new StringSerializer(),\"recursiveProcessor\")@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "topology.addProcessor(\"recursiveProcessor\",null,\"source\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "topology.addGlobalStore(Stores.keyValueStoreBuilder(Stores.inMemoryKeyValueStore(\"global-store\"),Serdes.String(),Serdes.String()).withLoggingDisabled(),\"globalSource\",new StringDeserializer(),new StringDeserializer(),\"global-topic\",\"globalProcessor\",null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "shouldApplyGlobalUpdatesCorrectlyInRecursiveTopologies['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertThat(events,is(Arrays.asList(new KeyValue<>(\"B\",\"beta\"),new KeyValue<>(\"B\",\"recurse-beta\"))))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final List<KeyValue<String,String>> events = out.readKeyValuesToList()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "topology.addSink(\"sink\",\"output\",new StringSerializer(),new StringSerializer(),\"recursiveProcessor\")@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final Topology topology = new Topology()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final TestInputTopic<String,String> in = topologyTestDriver.createInputTopic(\"input\",new StringSerializer(),new StringSerializer())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "in.pipeInput(\"B\",\"beta\")@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final KeyValueStore<String,String> keyValueStore = topologyTestDriver.getKeyValueStore(\"global-store\")@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final List<KeyValue<String,String>> events = globalTopic.readKeyValuesToList()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final TestOutputTopic<String,String> out = topologyTestDriver.createOutputTopic(\"output\",new StringDeserializer(),new StringDeserializer())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final TestOutputTopic<String,String> globalTopic = topologyTestDriver.createOutputTopic(\"global-topic\",new StringDeserializer(),new StringDeserializer())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "topology.addSink(\"recursiveSink\",\"input\",new StringSerializer(),new StringSerializer(),\"recursiveProcessor\")@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(events,is(Arrays.asList(new KeyValue<>(\"A\",\"alpha\"),new KeyValue<>(\"A\",\"recurse-alpha\"))))@@@41@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "in.pipeInput(\"A\",\"alpha\")@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "shouldEnqueueLaterOutputsAfterEarlierOnes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(keyValueStore,notNullValue())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->2 [style = bold, label=""];
12->11 [style = solid, label="keyValueStore"];
19->20 [style = bold, label=""];
15->4 [style = bold, label=""];
16->0 [style = bold, label=""];
15->19 [style = bold, label=""];
0->3 [style = bold, label=""];
6->2 [style = bold, label=""];
3->6 [style = bold, label=""];
10->12 [style = bold, label=""];
8->1 [style = bold, label=""];
12->21 [style = dashed, label="0"];
20->21 [style = bold, label=""];
5->0 [style = bold, label=""];
21->18 [style = bold, label=""];
14->8 [style = bold, label=""];
11->13 [style = bold, label=""];
11->18 [style = dashed, label="0"];
1->15 [style = bold, label=""];
9->7 [style = solid, label="events"];
4->10 [style = bold, label=""];
2->14 [style = bold, label=""];
12->11 [style = bold, label=""];
13->9 [style = bold, label=""];
4->19 [style = dashed, label="0"];
21->18 [style = solid, label="events"];
10->20 [style = dashed, label="0"];
17->0 [style = bold, label=""];
8->15 [style = bold, label=""];
9->7 [style = bold, label=""];
}
