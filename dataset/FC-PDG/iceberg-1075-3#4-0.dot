digraph {
6 [style = filled, label = "Assert.assertTrue(\"Should contain the correct data value\",cmp == 0)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertNull(\"Should not project data\",projected.get(\"data\"))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "projected = writeAndRead(\"basic_projection_data\",writeSchema,dataOnly,record)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(1,\"data\",Types.StringType.get()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Record projected = writeAndRead(writeSchema,readSchema,record,null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Schema readSchema = writeSchema@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Schema dataOnly = new Schema(Types.NestedField.optional(1,\"data\",Types.StringType.get()))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "record.put(\"data\",\"test\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(record,projected)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testBasicProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Schema idOnly = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"id\")@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "record.put(\"id\",34L)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testInferredMapping['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testBasicProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Should contain the correct data value\",0,cmp)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "record.put(\"data\",\"data\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"data\")@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(1,\"data\",Types.StringType.get()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Record projected = writeAndRead(\"basic_projection_id\",writeSchema,idOnly,record)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int cmp = Comparators.charSequences().compare(\"test\",(CharSequence)projected.get(\"data\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
9->20 [style = dashed, label="0"];
20->18 [style = solid, label="writeSchema"];
17->10 [style = bold, label=""];
7->11 [style = solid, label="record"];
11->16 [style = bold, label=""];
4->14 [style = bold, label=""];
12->1 [style = solid, label="idOnly"];
1->17 [style = solid, label="projected"];
4->6 [style = bold, label=""];
19->20 [style = bold, label=""];
9->11 [style = solid, label="writeSchema"];
11->16 [style = solid, label="projected"];
22->21 [style = bold, label=""];
7->21 [style = solid, label="record"];
7->1 [style = solid, label="record"];
20->22 [style = solid, label="writeSchema"];
4->14 [style = solid, label="cmp"];
6->14 [style = dashed, label="0"];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
12->1 [style = bold, label=""];
20->7 [style = solid, label="writeSchema"];
18->22 [style = solid, label="readSchema"];
1->22 [style = dashed, label="0"];
1->17 [style = bold, label=""];
7->22 [style = solid, label="record"];
3->9 [style = bold, label=""];
11->0 [style = bold, label=""];
18->22 [style = bold, label=""];
10->5 [style = bold, label=""];
4->6 [style = solid, label="cmp"];
2->21 [style = dashed, label="0"];
0->4 [style = bold, label=""];
15->9 [style = bold, label=""];
5->11 [style = solid, label="dataOnly"];
13->23 [style = bold, label=""];
22->21 [style = solid, label="projected"];
9->1 [style = solid, label="writeSchema"];
1->2 [style = bold, label=""];
5->11 [style = bold, label=""];
13->8 [style = bold, label=""];
16->4 [style = bold, label=""];
20->7 [style = bold, label=""];
23->18 [style = bold, label=""];
8->12 [style = bold, label=""];
9->7 [style = solid, label="writeSchema"];
8->23 [style = dashed, label="0"];
}
