digraph {
4 [style = filled, label = "Path auxFile = Paths.get(.getResource(\"badpaper.aux\").toURI())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "AuxParserResult auxResult = auxParser.parse(Paths.get(\"unknownfile.aux\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(3,auxResult.getFoundKeysInAux())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "BibDatabase newDB = auxResult.getGeneratedBibDatabase()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testNotAllFound['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "InputStream originalStream = .getResourceAsStream(\"origin.bib\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(0,auxResult.getResolvedKeysCount())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(2,auxResult.getResolvedKeysCount())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "AuxParser auxParser = new DefaultAuxParser(new BibDatabase())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(1,auxResult.getUnresolvedKeysCount())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(0,newDB.getEntries().size())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testNotAllFound['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "testFileNotFound['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ParserResult result = new BibtexParser(importFormatPreferences,new DummyFileUpdateMonitor()).parse(originalReader)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(0,auxResult.getCrossRefEntriesCount())@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(auxResult.getGeneratedBibDatabase().hasEntries())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(0,auxResult.getCrossRefEntriesCount())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "AuxParser auxParser = new DefaultAuxParser(result.getDatabase())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(0,auxResult.getFoundKeysInAux())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(0,auxResult.getUnresolvedKeysCount())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Path auxFile = Path.of(.getResource(\"badpaper.aux\").toURI())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertFalse(auxResult.getGeneratedBibDatabase().hasEntries())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(2,newDB.getEntries().size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "AuxParserResult auxResult = auxParser.parse(auxFile)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->13 [style = solid, label="auxFile"];
1->18 [style = bold, label=""];
4->13 [style = solid, label="auxFile"];
7->4 [style = bold, label=""];
16->23 [style = bold, label=""];
11->9 [style = bold, label=""];
24->22 [style = bold, label=""];
12->0 [style = bold, label=""];
10->7 [style = bold, label=""];
25->17 [style = bold, label=""];
0->22 [style = dashed, label="0"];
19->25 [style = bold, label=""];
14->7 [style = bold, label=""];
8->1 [style = bold, label=""];
5->2 [style = bold, label=""];
23->24 [style = bold, label=""];
1->6 [style = bold, label=""];
15->11 [style = bold, label=""];
13->3 [style = bold, label=""];
4->15 [style = dashed, label="0"];
3->8 [style = bold, label=""];
12->24 [style = dashed, label="0"];
21->16 [style = bold, label=""];
7->15 [style = bold, label=""];
22->1 [style = bold, label=""];
4->11 [style = bold, label=""];
20->19 [style = bold, label=""];
17->21 [style = bold, label=""];
6->23 [style = dashed, label="0"];
0->5 [style = bold, label=""];
9->13 [style = bold, label=""];
6->12 [style = bold, label=""];
}
