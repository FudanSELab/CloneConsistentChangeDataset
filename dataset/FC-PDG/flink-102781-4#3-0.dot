digraph {
0 [style = filled, label = "when(mockTrigger.onEventTime(eq(0L),Matchers.any(),anyTriggerContext())).thenReturn(TriggerResult.FIRE)@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "doAnswer(new Answer<TriggerResult>(){@Override public TriggerResult answer(InvocationOnMock invocation){Trigger.TriggerContext context = (Trigger.TriggerContext)invocation.getArguments()(3(context.registerEventTimeTimer(0L)context.getPartitionedState(valueStateDescriptor).update(\"hello\")return TriggerResult.PURGE}}).when(mockTrigger).onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(4,testHarness.numEventTimeTimers())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,intListDescriptor,mockWindowFunction)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testHarness.setup()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verify(mockTrigger,times(2)).clear(anyTimeWindow(),anyTriggerContext())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "when(mockTrigger.onEventTime(eq(0L),anyTimeWindow(),anyTriggerContext())).thenReturn(TriggerResult.FIRE)@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "verify(mockTrigger,times(4)).onEventTime(anyLong(),anyTimeWindow(),anyTriggerContext())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(0,testHarness.getOutput().size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "verify(mockWindowFunction,times(1)).apply(eq(0),eq(new TimeWindow(0,2)),intIterable(0),WindowOperatorContractTest.anyCollector())@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "MergingWindowAssigner<Integer,TimeWindow> mockAssigner = mockMergingAssigner()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertEquals(2,testHarness.numKeyedStateEntries())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,intListDescriptor,mockWindowFunction)@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "verify(mockTrigger,never()).clear(anyTimeWindow(),anyTriggerContext())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "assertEquals(0,testHarness.getOutput().size())@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testHarness.initializeState(snapshot)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "InternalWindowFunction<Iterable<Integer>,Void,Integer,TimeWindow> mockWindowFunction = mockWindowFunction()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "verify(mockTrigger,never()).clear(anyTimeWindow(),anyTriggerContext())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.open()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testHarness.processWatermark(new Watermark(20L))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Trigger<Integer,TimeWindow> mockTrigger = mockTrigger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "verify(mockWindowFunction,times(2)).apply(eq(0),anyTimeWindow(),anyIntIterable(),WindowOperatorContractTest.anyCollector())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "doAnswer(new Answer<Object>(){@Override public Object answer(InvocationOnMock invocation){Trigger.TriggerContext context = (Trigger.TriggerContext)invocation.getArguments()(1(context.deleteEventTimeTimer(0L)context.getPartitionedState(valueStateDescriptor).clear()return null}}).when(mockTrigger).clear(anyTimeWindow(),anyTriggerContext())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testStateSnapshotAndRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "mockTrigger = mockTrigger()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(0,testHarness.extractOutputStreamRecords().size())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "WindowAssigner<Integer,TimeWindow> mockAssigner = mockTimeWindowAssigner()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "mockAssigner = mockMergingAssigner()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "verify(mockTrigger,times(1)).onEventTime(eq(0L),eq(new TimeWindow(2,4)),anyTriggerContext())@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testOnElementPurge['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(4,testHarness.numEventTimeTimers())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "verify(mockTrigger,times(1)).onEventTime(eq(0L),eq(new TimeWindow(0,2)),anyTriggerContext())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(mockWindowFunction,times(1)).apply(eq(0),eq(new TimeWindow(2,4)),intIterable(0),WindowOperatorContractTest.anyCollector())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(0,testHarness.numEventTimeTimers())@@@55@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(2,4),new TimeWindow(0,2)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "shouldFireAndPurgeOnEventTime(mockTrigger)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction)@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(4,testHarness.numEventTimeTimers())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testHarness.open()@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(5,testHarness.numKeyedStateEntries())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testStateSnapshotAndRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "mockWindowFunction = mockWindowFunction()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(5,testHarness.numKeyedStateEntries())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46->42 [style = bold, label=""];
21->10 [style = bold, label=""];
12->39 [style = solid, label="mockWindowFunction"];
17->46 [style = bold, label=""];
20->17 [style = bold, label=""];
32->37 [style = bold, label=""];
41->27 [style = bold, label=""];
14->1 [style = solid, label="mockWindowFunction"];
25->36 [style = bold, label=""];
29->1 [style = solid, label="mockTrigger"];
3->39 [style = dashed, label="0"];
27->44 [style = dashed, label="0"];
28->45 [style = dashed, label="0"];
27->9 [style = bold, label=""];
18->33 [style = bold, label=""];
35->32 [style = bold, label=""];
3->6 [style = bold, label=""];
30->25 [style = bold, label=""];
39->6 [style = bold, label=""];
7->0 [style = bold, label=""];
4->29 [style = bold, label=""];
12->3 [style = solid, label="mockWindowFunction"];
28->10 [style = solid, label="snapshot"];
36->26 [style = bold, label=""];
34->8 [style = bold, label=""];
15->19 [style = bold, label=""];
17->22 [style = bold, label=""];
5->28 [style = bold, label=""];
0->38 [style = dashed, label="0"];
9->29 [style = solid, label="mockTrigger"];
22->5 [style = bold, label=""];
11->18 [style = bold, label=""];
14->1 [style = bold, label=""];
6->15 [style = bold, label=""];
38->14 [style = bold, label=""];
19->16 [style = bold, label=""];
1->40 [style = dashed, label="0"];
9->20 [style = solid, label="mockTrigger"];
9->39 [style = solid, label="mockTrigger"];
44->3 [style = solid, label="mockAssigner"];
7->38 [style = bold, label=""];
0->14 [style = bold, label=""];
27->3 [style = solid, label="mockAssigner"];
12->14 [style = solid, label="mockWindowFunction"];
1->21 [style = bold, label=""];
16->31 [style = bold, label=""];
4->1 [style = solid, label="mockAssigner"];
26->23 [style = bold, label=""];
29->7 [style = bold, label=""];
37->2 [style = bold, label=""];
27->39 [style = solid, label="mockAssigner"];
12->3 [style = bold, label=""];
9->12 [style = bold, label=""];
4->40 [style = solid, label="mockAssigner"];
29->40 [style = solid, label="mockTrigger"];
12->39 [style = bold, label=""];
31->20 [style = bold, label=""];
23->11 [style = bold, label=""];
31->17 [style = bold, label=""];
42->28 [style = bold, label=""];
9->3 [style = solid, label="mockTrigger"];
13->35 [style = bold, label=""];
33->34 [style = bold, label=""];
44->9 [style = bold, label=""];
10->30 [style = bold, label=""];
24->27 [style = bold, label=""];
14->40 [style = bold, label=""];
43->44 [style = bold, label=""];
40->21 [style = bold, label=""];
8->13 [style = bold, label=""];
28->4 [style = bold, label=""];
28->45 [style = bold, label=""];
14->40 [style = solid, label="mockWindowFunction"];
}
