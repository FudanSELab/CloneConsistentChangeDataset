digraph {
7 [style = filled, label = "assertOrderInvariantEquals(expected,result)@@@19@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "JavaDStream<Integer> stream = JavaTestUtils.attachTestInputStream(ssc,inputData,1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<List<Integer>> inputData = Arrays.asList(Arrays.asList(1,2,3),Arrays.asList(4,5,6),Arrays.asList(7,8,9))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "JavaDStream<Integer> transformed = stream.transform(null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testTransform['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "JavaTestUtils.attachTestOutputStream(transformed)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "JavaTestUtils.attachTestOutputStream(transformed)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "List<List<Integer>> inputData = Arrays.asList(Arrays.asList(1,2,3),Arrays.asList(4,5,6),Arrays.asList(7,8,9))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testTransform['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertOrderInvariantEquals(expected,result)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "JavaDStream<Integer> transformed = stream.transform(new Function<JavaRDD<Integer>,JavaRDD<Integer>>(){@Override public JavaRDD<Integer> call(JavaRDD<Integer> in){return in.map(new Function<Integer,Integer>(){@Override public Integer call(Integer i){return i + 2}})}})@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "List<List<Integer>> result = JavaTestUtils.runStreams(ssc,3,3)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "JavaDStream<Integer> transformed = stream.transform(null)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertOrderInvariantEquals(expected,result)@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "JavaTestUtils.attachTestOutputStream(transformed)@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<List<Integer>> result = JavaTestUtils.runStreams(ssc,3,3)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "testTransform['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "List<List<Integer>> result = JavaTestUtils.runStreams(ssc,3,3)@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<List<Integer>> expected = Arrays.asList(Arrays.asList(3,4,5),Arrays.asList(6,7,8),Arrays.asList(9,10,11))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<List<Integer>> expected = Arrays.asList(Arrays.asList(3,4,5),Arrays.asList(6,7,8),Arrays.asList(9,10,11))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11->10 [style = solid, label="result"];
1->4 [style = bold, label=""];
6->8 [style = dashed, label="0"];
19->18 [style = bold, label=""];
6->2 [style = solid, label="transformed"];
9->11 [style = bold, label=""];
8->9 [style = solid, label="transformed"];
4->6 [style = bold, label=""];
0->4 [style = solid, label="inputData"];
1->10 [style = solid, label="expected"];
0->19 [style = dashed, label="0"];
1->7 [style = solid, label="expected"];
4->15 [style = bold, label=""];
15->16 [style = solid, label="transformed"];
18->13 [style = solid, label="expected"];
14->19 [style = bold, label=""];
1->18 [style = dashed, label="0"];
16->17 [style = bold, label=""];
15->16 [style = bold, label=""];
12->0 [style = bold, label=""];
17->13 [style = solid, label="result"];
3->0 [style = bold, label=""];
6->2 [style = bold, label=""];
18->4 [style = bold, label=""];
6->15 [style = dashed, label="0"];
11->10 [style = bold, label=""];
0->1 [style = bold, label=""];
19->4 [style = solid, label="inputData"];
8->9 [style = bold, label=""];
5->7 [style = bold, label=""];
4->8 [style = bold, label=""];
17->13 [style = bold, label=""];
5->7 [style = solid, label="result"];
2->5 [style = bold, label=""];
}
