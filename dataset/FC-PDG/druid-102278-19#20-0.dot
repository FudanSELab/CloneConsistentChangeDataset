digraph {
9 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "checkpoints2.put(0,ImmutableMap.of(SHARD_ID0,\"0\"))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Capture<Task> captured = Capture.newInstance(CaptureType.ALL)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true).times(4)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(SHARD0_PARTITION)).andReturn(\"1\").anyTimes()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "List<Task> tasks = captured.getValues()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "supervisorRecordSupplier.assign(EasyMock.anyObject())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "replayAll()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "checkpoints1.put(0,ImmutableMap.of(SHARD_ID1,\"0\",SHARD_ID0,\"0\"))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "EasyMock.replay(taskStorage,taskClient,taskQueue)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "TreeMap<Integer,Map<Integer,Long>> checkpoints1 = new TreeMap<>()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD1_PARTITION,SHARD0_PARTITION)).anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.emptyList()).anyTimes()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "verifyAll()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "taskQueue.shutdown(task.getId(),\"Task (%s( failed to return start time, killing task\",task.getId())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(task.getId())).andReturn(Futures.immediateFailedFuture(new RuntimeException()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "supervisor.runInternal()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(task.getId())).andReturn(Futures.immediateFailedFuture(new RuntimeException()))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TreeMap<Integer,Map<Integer,Long>> checkpoints2 = new TreeMap<>()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "testKillUnresponsiveTasksWhileGettingStartTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "taskQueue.shutdown(task.getId(),\"Task (%s( failed to return start time, killing task\",task.getId())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "checkpoints1.put(0,ImmutableMap.of(0,0L,2,0L))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "EasyMock.expect(taskStorage.getTask(task.getId())).andReturn(Optional.of(task)).anyTimes()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "supervisor.runInternal()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "verifyAll()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(SHARD1_PARTITION)).andReturn(\"12\").anyTimes()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints2)).times(2)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpoints2 = new TreeMap<>()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verifyAll()@@@35@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "checkpoints2.put(0,ImmutableMap.of(1,0L))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(task.getId())).andReturn(Optional.of(TaskStatus.running(task.getId()))).anyTimes()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testKillUnresponsiveTasksWhileGettingStartTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID1,SHARD_ID0)).anyTimes()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(task.getId())).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "supervisor = getTestableSupervisor(2,2,true,\"PT1H\",null,null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(tasks).anyTimes()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "verifyAll()@@@45@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "supervisor.start()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(task.getId())).andReturn(Optional.of(TaskStatus.running(task.getId()))).anyTimes()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "EasyMock.reset(taskStorage,taskClient,taskQueue)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "EasyMock.replay(taskStorage,taskClient,taskQueue)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.emptyList()).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints1)).times(2)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpoints1 = new TreeMap<>()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(task.getId())).andReturn(Futures.immediateFuture(Status.NOT_STARTED))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "addSomeEvents(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "supervisor.runInternal()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "EasyMock.expect(taskStorage.getTask(task.getId())).andReturn(Optional.of(task)).anyTimes()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testKillUnresponsiveTasksWhileGettingStartTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5->1 [style = dashed, label="0"];
4->40 [style = bold, label=""];
8->30 [style = bold, label=""];
42->23 [style = bold, label=""];
23->54 [style = bold, label=""];
16->36 [style = bold, label=""];
27->32 [style = bold, label=""];
7->23 [style = dashed, label="0"];
35->3 [style = bold, label=""];
15->21 [style = bold, label=""];
34->5 [style = bold, label=""];
59->45 [style = bold, label=""];
50->18 [style = bold, label=""];
31->13 [style = bold, label=""];
28->31 [style = bold, label=""];
50->37 [style = bold, label=""];
11->59 [style = dashed, label="0"];
38->16 [style = bold, label=""];
23->15 [style = bold, label=""];
37->20 [style = bold, label=""];
34->21 [style = dashed, label="0"];
39->6 [style = bold, label=""];
9->17 [style = bold, label=""];
6->24 [style = bold, label=""];
14->28 [style = bold, label=""];
7->0 [style = bold, label=""];
5->18 [style = bold, label=""];
12->26 [style = bold, label=""];
2->9 [style = bold, label=""];
41->10 [style = bold, label=""];
43->26 [style = bold, label=""];
48->44 [style = bold, label=""];
53->31 [style = bold, label=""];
10->42 [style = dashed, label="0"];
24->22 [style = bold, label=""];
36->33 [style = bold, label=""];
44->53 [style = bold, label=""];
0->54 [style = dashed, label="0"];
49->47 [style = bold, label=""];
13->41 [style = bold, label=""];
60->55 [style = bold, label=""];
0->34 [style = bold, label=""];
26->52 [style = bold, label=""];
26->2 [style = bold, label=""];
51->60 [style = bold, label=""];
40->11 [style = bold, label=""];
10->51 [style = dashed, label="0"];
58->48 [style = bold, label=""];
15->55 [style = dashed, label="0"];
30->35 [style = bold, label=""];
10->23 [style = bold, label=""];
30->4 [style = bold, label=""];
45->50 [style = bold, label=""];
20->59 [style = bold, label=""];
21->1 [style = bold, label=""];
47->51 [style = bold, label=""];
25->19 [style = bold, label=""];
18->25 [style = bold, label=""];
54->21 [style = bold, label=""];
11->8 [style = bold, label=""];
57->49 [style = bold, label=""];
41->46 [style = bold, label=""];
32->39 [style = bold, label=""];
56->26 [style = bold, label=""];
19->4 [style = bold, label=""];
36->37 [style = bold, label=""];
17->27 [style = bold, label=""];
20->7 [style = bold, label=""];
22->14 [style = bold, label=""];
33->37 [style = bold, label=""];
52->57 [style = bold, label=""];
46->23 [style = bold, label=""];
3->29 [style = bold, label=""];
55->58 [style = bold, label=""];
1->38 [style = bold, label=""];
41->42 [style = bold, label=""];
}
