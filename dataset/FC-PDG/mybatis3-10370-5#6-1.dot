digraph {
12 [style = filled, label = "Assertions.assertEquals(\"John\",parent.getFirstName())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(\"Poitras\",person.getLastName())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testWithComplex4['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Christian\",person.getFirstName())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "criteria.setFirstName(\"Christian\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assertions.assertNotNull(parent,\"parent must not be null\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "criteria.setLastName(\"Poitras\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(\"John\",parent.getFirstName())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertNotNull(\"person must not be null\",person)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assertions.assertEquals(\"Poitras\",person.getLastName())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assertions.assertEquals(\"Smith\",parent.getLastName())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(\"Poitras\",person.getLastName())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"Christian\",person.getFirstName())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "PersonMapper personMapper = sqlSession.getMapper()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Person person = personMapper.getWithComplex(2l)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Person parent = person.getParent()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Person person = personMapper.getParentWithComplex(criteria)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertNotNull(\"parent must not be null\",parent)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assertions.assertNotNull(person,\"person must not be null\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertNotNull(\"person must not be null\",person)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Person criteria = new Person()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(\"Smith\",parent.getLastName())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assertions.assertEquals(\"Christian\",person.getFirstName())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testWithComplex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testWithComplex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9->20 [style = solid, label="parent"];
18->3 [style = bold, label=""];
16->13 [style = bold, label=""];
9->10 [style = dashed, label="0"];
7->1 [style = bold, label=""];
24->19 [style = bold, label=""];
4->6 [style = bold, label=""];
18->3 [style = solid, label="person"];
3->0 [style = solid, label="parent"];
6->23 [style = bold, label=""];
2->3 [style = bold, label=""];
11->6 [style = bold, label=""];
3->14 [style = bold, label=""];
5->15 [style = bold, label=""];
8->12 [style = dashed, label="0"];
9->20 [style = bold, label=""];
15->16 [style = bold, label=""];
3->0 [style = bold, label=""];
0->14 [style = dashed, label="0"];
6->5 [style = bold, label=""];
12->10 [style = bold, label=""];
13->3 [style = bold, label=""];
23->21 [style = bold, label=""];
1->16 [style = dashed, label="0"];
2->13 [style = dashed, label="0"];
14->12 [style = bold, label=""];
23->18 [style = solid, label="criteria"];
0->8 [style = bold, label=""];
8->9 [style = bold, label=""];
7->15 [style = dashed, label="0"];
5->7 [style = bold, label=""];
1->2 [style = bold, label=""];
5->7 [style = solid, label="person"];
20->24 [style = bold, label=""];
21->17 [style = bold, label=""];
3->14 [style = solid, label="parent"];
17->18 [style = bold, label=""];
5->15 [style = solid, label="person"];
22->6 [style = bold, label=""];
}
