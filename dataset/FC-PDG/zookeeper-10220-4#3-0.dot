digraph {
25 [style = filled, label = "{forceClose(socket)serverThread.shutdown(TIMEOUT)}@@@18@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "socket.getOutputStream().flush()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "bytesRead = secureClientSocket.getInputStream().read(buf,0,buf.length)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "!handshakeCompleted@@@30@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "int bytesRead = socket.getInputStream().read(buf,0,buf.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertFalse(handshakeCompleted)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "serverThread.start()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "secureClientSocket.getOutputStream().flush()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "Socket socket = connectWithoutSSL()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "handshakeCompletedLock@@@18@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "testConnectWithoutSSLToNonStrictServerPartialWrite['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "byte(( buf = new byte((((@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "{forceClose(badClientSocket)forceClose(clientSocket)forceClose(secureClientSocket)serverThread.shutdown(TIMEOUT)}@@@36@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "secureClientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "badClientSocket = connectWithoutSSL()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "clientSocket.getOutputStream().flush()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertFalse(handshakeCompleted)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "clientSocket = connectWithoutSSL()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(1))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(1))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "Thread.sleep(TIMEOUT / 2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "socket.getOutputStream().write(DATA_FROM_CLIENT,2,DATA_FROM_CLIENT.length - 2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "buf = new byte((((@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(handshakeCompleted)@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Socket clientSocket = null@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Socket badClientSocket = null@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "socket.getOutputStream().write(DATA_FROM_CLIENT,0,2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testTLSDetectionNonBlockingNonStrictServerIdleClient['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertTrue(handshakeCompleted)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "handshakeCompletedLock@@@29@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "byte(( buf = new byte((((@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "handshakeCompletedLock.wait(TIMEOUT)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "clientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testTLSDetectionNonBlockingNonStrictServerIdleClient['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "secureClientSocket = connectWithSSL()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "socket.getOutputStream().flush()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Socket secureClientSocket = null@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->6 [style = dotted, label="true"];
27->1 [style = dotted, label="true"];
27->32 [style = bold, label=""];
14->13 [style = solid, label="buf"];
8->33 [style = dashed, label="0"];
2->32 [style = dashed, label="0"];
49->48 [style = bold, label=""];
26->11 [style = bold, label=""];
20->21 [style = solid, label="bytesRead"];
15->38 [style = dashed, label="0"];
18->39 [style = dashed, label="0"];
10->8 [style = bold, label=""];
16->32 [style = dotted, label="true"];
36->17 [style = bold, label=""];
27->2 [style = bold, label=""];
14->5 [style = solid, label="buf"];
12->22 [style = bold, label=""];
11->28 [style = bold, label=""];
4->3 [style = bold, label=""];
7->30 [style = solid, label="buf"];
37->26 [style = bold, label=""];
34->31 [style = bold, label=""];
48->44 [style = bold, label=""];
2->9 [style = bold, label=""];
6->37 [style = dashed, label="0"];
13->15 [style = solid, label="bytesRead"];
5->34 [style = dashed, label="0"];
5->25 [style = bold, label=""];
12->51 [style = bold, label=""];
25->24 [style = bold, label=""];
13->38 [style = solid, label="bytesRead"];
1->32 [style = bold, label=""];
13->15 [style = bold, label=""];
21->23 [style = bold, label=""];
29->17 [style = bold, label=""];
6->26 [style = bold, label=""];
39->16 [style = bold, label=""];
16->27 [style = bold, label=""];
13->42 [style = bold, label=""];
22->19 [style = bold, label=""];
42->25 [style = bold, label=""];
20->35 [style = solid, label="bytesRead"];
31->24 [style = bold, label=""];
22->9 [style = solid, label="badClientSocket"];
7->20 [style = bold, label=""];
33->12 [style = bold, label=""];
13->48 [style = dashed, label="0"];
32->9 [style = bold, label=""];
17->0 [style = bold, label=""];
51->45 [style = bold, label=""];
38->34 [style = bold, label=""];
25->31 [style = dashed, label="0"];
16->27 [style = dotted, label="true"];
1->2 [style = bold, label=""];
10->33 [style = bold, label=""];
41->12 [style = bold, label=""];
21->35 [style = dashed, label="0"];
14->13 [style = bold, label=""];
35->30 [style = bold, label=""];
23->18 [style = bold, label=""];
8->12 [style = bold, label=""];
18->16 [style = bold, label=""];
27->1 [style = bold, label=""];
43->50 [style = bold, label=""];
16->2 [style = dotted, label="true"];
7->23 [style = solid, label="buf"];
19->9 [style = solid, label="clientSocket"];
48->44 [style = solid, label="bytesRead"];
46->49 [style = bold, label=""];
3->14 [style = bold, label=""];
7->20 [style = solid, label="buf"];
49->48 [style = solid, label="buf"];
28->7 [style = bold, label=""];
47->46 [style = bold, label=""];
15->5 [style = bold, label=""];
20->21 [style = bold, label=""];
0->10 [style = bold, label=""];
41->25 [style = solid, label="socket"];
26->9 [style = solid, label="secureClientSocket"];
50->40 [style = bold, label=""];
24->37 [style = bold, label=""];
40->41 [style = bold, label=""];
24->37 [style = dotted, label="true"];
45->47 [style = bold, label=""];
23->30 [style = dashed, label="0"];
30->39 [style = bold, label=""];
44->13 [style = bold, label=""];
13->38 [style = bold, label=""];
19->4 [style = bold, label=""];
20->35 [style = bold, label=""];
49->13 [style = solid, label="buf"];
24->6 [style = bold, label=""];
14->34 [style = solid, label="buf"];
3->47 [style = dashed, label="0"];
}
