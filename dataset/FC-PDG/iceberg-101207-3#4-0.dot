digraph {
4 [style = filled, label = "Schema schema = new Schema(required(1,\"id\",Types.IntegerType.get()),optional(2,\"data\",Types.StringType.get()),optional(3,\"preferences\",Types.StructType.of(required(8,\"feature1\",Types.BooleanType.get()),optional(9,\"feature2\",Types.BooleanType.get()))),required(4,\"locations\",Types.MapType.ofRequired(10,11,Types.StringType.get(),Types.StructType.of(required(12,\"lat\",Types.FloatType.get()),required(13,\"long\",Types.FloatType.get())))),optional(5,\"points\",Types.ListType.ofOptional(14,Types.StructType.of(required(15,\"x\",Types.LongType.get()),required(16,\"y\",Types.LongType.get())))),required(6,\"doubles\",Types.ListType.ofRequired(17,Types.DoubleType.get())),optional(7,\"properties\",Types.MapType.ofOptional(18,19,Types.StringType.get(),Types.StringType.get())),required(20,\"complex_key_map\",Types.MapType.ofOptional(21,22,Types.StructType.of(required(23,\"x\",Types.LongType.get()),optional(24,\"y\",Types.LongType.get())),Types.StringType.get())))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "AvroSchemaUtil.convert(schema,\"newTableName\").toString(true)@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testComplexSchema['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Schema serialziation should be equal to starting schema\",schema.asStruct(),TestHelpers.roundTripSerialize(schema).asStruct())@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testSchema['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testSchema['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "org.apache.iceberg.Schema schema = new org.apache.iceberg.Schema(required(1,\"id\",Types.IntegerType.get()),optional(2,\"data\",Types.StringType.get()),optional(3,\"preferences\",Types.StructType.of(required(8,\"feature1\",Types.BooleanType.get()),optional(9,\"feature2\",Types.BooleanType.get()))),required(4,\"locations\",Types.MapType.ofRequired(10,11,Types.StructType.of(required(20,\"address\",Types.StringType.get()),required(21,\"city\",Types.StringType.get()),required(22,\"state\",Types.StringType.get()),required(23,\"zip\",Types.IntegerType.get())),Types.StructType.of(required(12,\"lat\",Types.FloatType.get()),required(13,\"long\",Types.FloatType.get())))),optional(5,\"points\",Types.ListType.ofOptional(14,Types.StructType.of(required(15,\"x\",Types.LongType.get()),required(16,\"y\",Types.LongType.get())))),required(6,\"doubles\",Types.ListType.ofRequired(17,Types.DoubleType.get())),optional(7,\"properties\",Types.MapType.ofOptional(18,19,Types.StringType.get(),Types.StringType.get())))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Schema schema = new Schema(required(1,\"id\",Types.IntegerType.get()),optional(2,\"data\",Types.StringType.get()),optional(3,\"preferences\",Types.StructType.of(required(8,\"feature1\",Types.BooleanType.get()),optional(9,\"feature2\",Types.BooleanType.get()))),required(4,\"locations\",Types.MapType.ofRequired(10,11,Types.StringType.get(),Types.StructType.of(required(12,\"lat\",Types.FloatType.get()),required(13,\"long\",Types.FloatType.get())))),optional(5,\"points\",Types.ListType.ofOptional(14,Types.StructType.of(required(15,\"x\",Types.LongType.get()),required(16,\"y\",Types.LongType.get())))),required(6,\"doubles\",Types.ListType.ofRequired(17,Types.DoubleType.get())),optional(7,\"properties\",Types.MapType.ofOptional(18,19,Types.StringType.get(),Types.StringType.get())),required(8,\"complex_key_map\",Types.MapType.ofOptional(20,21,Types.StructType.of(required(22,\"x\",Types.LongType.get()),optional(23,\"y\",Types.LongType.get())),Types.StringType.get())))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->2 [style = bold, label=""];
2->0 [style = bold, label=""];
5->6 [style = bold, label=""];
6->7 [style = bold, label=""];
3->4 [style = bold, label=""];
4->0 [style = bold, label=""];
2->4 [style = dashed, label="0"];
}
