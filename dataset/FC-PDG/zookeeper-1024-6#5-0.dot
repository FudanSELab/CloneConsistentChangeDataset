digraph {
16 [style = filled, label = "double expectedAvg = expectedSum / Math.max(1,expectedCnt)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(expectedCount,(long)results.get(\"test\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "testAvgMinMaxCounter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final long(( values = generateRandomValues(size)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(expectedAvg,(double)results.get(\"avg_test\"),(double)200)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "SimpleCounter metric@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(expectedCnt,(long)results.get(\"cnt_test\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int size@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(expectedCount,metric.get())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "AvgMinMaxCounter metric@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(expectedSum,metric.getTotal())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final Map<String,Object> results = metric.values()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testSimpleCounter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "long expectedCount = Arrays.stream(values).sum()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testSimpleCounter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int size@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Map<String,Object> results = metric.values()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "long expectedCnt = values.length@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(expectedMin,metric.getMin())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "metric.add(value)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(expectedMin,(long)results.get(\"min_test\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(expectedMax,(long)results.get(\"max_test\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "long expectedMax = Arrays.stream(values).max().orElse(0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "long expectedSum = Arrays.stream(values).sum()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(expectedCount,(long)results.get(\"test\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(expectedCount,metric.get())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "metric.reset()@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "metric.reset()@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(expectedMax,metric.getMax())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "int size@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(expectedAvg,metric.getAvg(),(double)200)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(expectedCnt,metric.getCount())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "long expectedMin = Arrays.stream(values).min().orElse(0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->3 [style = dotted, label="true"];
5->8 [style = bold, label=""];
12->3 [style = dotted, label="true"];
26->16 [style = solid, label="expectedCnt"];
0->9 [style = bold, label=""];
0->19 [style = solid, label="values"];
18->23 [style = bold, label=""];
25->22 [style = bold, label=""];
27->0 [style = bold, label=""];
28->20 [style = bold, label=""];
3->21 [style = dashed, label="0"];
10->0 [style = solid, label="size"];
22->15 [style = solid, label="expectedMax"];
25->14 [style = solid, label="expectedMin"];
9->4 [style = bold, label=""];
16->32 [style = solid, label="expectedAvg"];
22->31 [style = bold, label=""];
4->13 [style = solid, label="expectedCount"];
32->14 [style = bold, label=""];
8->6 [style = bold, label=""];
16->32 [style = bold, label=""];
24->29 [style = bold, label=""];
22->28 [style = solid, label="expectedMax"];
27->21 [style = dotted, label="true"];
8->13 [style = bold, label=""];
4->5 [style = solid, label="expectedCount"];
26->30 [style = solid, label="expectedCnt"];
12->0 [style = bold, label=""];
30->18 [style = bold, label=""];
26->24 [style = solid, label="expectedCnt"];
17->0 [style = solid, label="size"];
4->25 [style = dashed, label="0"];
4->6 [style = solid, label="expectedCount"];
26->16 [style = bold, label=""];
6->28 [style = dashed, label="0"];
31->26 [style = bold, label=""];
1->0 [style = solid, label="size"];
2->0 [style = bold, label=""];
6->13 [style = dashed, label="0"];
29->19 [style = bold, label=""];
12->10 [style = dotted, label="true"];
5->11 [style = dashed, label="0"];
2->1 [style = dotted, label="true"];
13->7 [style = bold, label=""];
9->25 [style = bold, label=""];
15->24 [style = bold, label=""];
25->20 [style = solid, label="expectedMin"];
4->11 [style = solid, label="expectedCount"];
11->8 [style = bold, label=""];
31->29 [style = solid, label="expectedSum"];
14->15 [style = bold, label=""];
16->18 [style = solid, label="expectedAvg"];
19->28 [style = bold, label=""];
27->17 [style = dotted, label="true"];
6->7 [style = bold, label=""];
4->11 [style = bold, label=""];
20->30 [style = bold, label=""];
4->5 [style = bold, label=""];
31->16 [style = solid, label="expectedSum"];
0->8 [style = solid, label="values"];
}
