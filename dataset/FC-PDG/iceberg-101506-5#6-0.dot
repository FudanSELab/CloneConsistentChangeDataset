digraph {
6 [style = filled, label = "Integer id = ref.fieldId()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "canContainNulls(id)@@@6@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "cmp >= 0@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "int cmp = lit.comparator().compare(lower,lit.value())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "lt['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "return ROWS_MIGHT_NOT_MATCH@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Preconditions.checkNotNull(field,\"Cannot filter by nested column: %s\",schema.findField(id))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "upperBounds != null && upperBounds.containsKey(id)@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Literal<T> lit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "gtEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "int cmp = lit.comparator().compare(upper,lit.value())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "return ROWS_MUST_MATCH@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Literal<T> lit@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return ROWS_MIGHT_NOT_MATCH@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "T lower = Conversions.fromByteBuffer(field.type(),lowerBounds.get(id))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Types.NestedField field = struct.field(id)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "canContainNulls(id) || canContainNaNs(id)@@@6@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "lt['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "BoundReference<T> ref@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "lowerBounds != null && lowerBounds.containsKey(id)@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Literal<T> lit@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "T upper = Conversions.fromByteBuffer(field.type(),upperBounds.get(id))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "cmp < 0@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0->6 [style = bold, label=""];
9->22 [style = bold, label=""];
17->19 [style = dotted, label="true"];
3->13 [style = solid, label="cmp"];
6->18 [style = solid, label="id"];
22->23 [style = dotted, label="true"];
22->5 [style = bold, label=""];
6->7 [style = solid, label="id"];
15->1 [style = bold, label=""];
20->10 [style = bold, label=""];
6->22 [style = solid, label="id"];
0->8 [style = dotted, label="true"];
15->12 [style = bold, label=""];
1->22 [style = dashed, label="0"];
6->11 [style = bold, label=""];
20->5 [style = bold, label=""];
3->23 [style = dashed, label="0"];
1->7 [style = dotted, label="true"];
22->20 [style = dotted, label="true"];
16->14 [style = dotted, label="true"];
12->1 [style = bold, label=""];
11->2 [style = solid, label="field"];
13->10 [style = dotted, label="true"];
18->23 [style = bold, label=""];
3->13 [style = bold, label=""];
15->12 [style = dotted, label="true"];
11->2 [style = bold, label=""];
12->22 [style = bold, label=""];
8->21 [style = dashed, label="0"];
6->11 [style = solid, label="id"];
6->9 [style = solid, label="id"];
7->3 [style = bold, label=""];
7->3 [style = solid, label="upper"];
2->9 [style = bold, label=""];
20->10 [style = dotted, label="true"];
1->3 [style = dotted, label="true"];
6->15 [style = solid, label="id"];
17->6 [style = bold, label=""];
1->13 [style = dotted, label="true"];
23->20 [style = bold, label=""];
9->15 [style = dashed, label="0"];
16->6 [style = bold, label=""];
22->18 [style = bold, label=""];
23->20 [style = solid, label="cmp"];
13->20 [style = dashed, label="0"];
18->23 [style = solid, label="lower"];
16->8 [style = dotted, label="true"];
17->21 [style = dotted, label="true"];
0->4 [style = dotted, label="true"];
1->7 [style = bold, label=""];
9->12 [style = dotted, label="true"];
13->10 [style = bold, label=""];
22->18 [style = dotted, label="true"];
6->2 [style = solid, label="id"];
9->1 [style = bold, label=""];
2->15 [style = bold, label=""];
10->5 [style = bold, label=""];
13->5 [style = bold, label=""];
6->1 [style = solid, label="id"];
9->12 [style = bold, label=""];
7->18 [style = dashed, label="0"];
1->5 [style = bold, label=""];
}
