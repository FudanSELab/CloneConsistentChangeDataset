digraph {
7 [style = filled, label = "List<LeaderLatch> latches = Lists.newArrayList()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "++i@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "client.start()@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(latch.getState(),LeaderLatch.State.CLOSED)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "latch.start()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testCallbackSanity['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "latch.addListener(new LeaderLatchListener(){@Override public void isLeader(){if (!beenLeader) {masterCounter.incrementAndGet()beenLeader = truetry {latch.reset()}catch (Exception e) }{masterCounter.incrementAndGet()CloseableUtils.closeQuietly(latch)timesSquare.countDown()}}@Override public void notLeader(){notLeaderCounter.incrementAndGet()}},exec)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "latches.add(latch)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(latch.getState(),LeaderLatch.State.CLOSED)@@@50@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "final int SILENT_QTY = 3@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "latch.addListener(new LeaderLatchListener(){@Override public void isLeader(){if (!beenLeader) {masterCounter.incrementAndGet()beenLeader = truetry {latch.reset()}catch (Exception e) }{masterCounter.incrementAndGet()CloseableUtils.closeQuietly(latch)timesSquare.countDown()}}@Override public void notLeader(){notLeaderCounter.incrementAndGet()}},exec)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(masterCounter.get(),PARTICIPANT_QTY * 2)@@@49@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final AtomicLong notLeaderCounter = new AtomicLong(0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int i = 0@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "timesSquare.await()@@@48@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(notLeaderCounter.get(),PARTICIPANT_QTY)@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "{for (LeaderLatch latch : latches){if (latch.getState() != LeaderLatch.State.CLOSED) {CloseableUtils.closeQuietly(latch)}}TestCleanState.closeAndTestClean(client)}@@@53@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Timing timing = new Timing()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final int PARTICIPANT_QTY = 10@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackSanity-%s\").build())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "i < PARTICIPANT_QTY@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "timesSquare.await()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testCallbackSanity['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "latches.add(latch)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final LeaderLatch latch = new LeaderLatch(client,PATH_NAME,\"\",closeMode)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "latch.start()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackNotifyLeader-%s\").build())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(notLeaderCounter.get(),PARTICIPANT_QTY * 2 - SILENT_QTY)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(masterCounter.get(),PARTICIPANT_QTY * 2)@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testCallbackNotifyLeader['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "client.start()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "{for (LeaderLatch latch : latches){if (latch.getState() != LeaderLatch.State.CLOSED) {CloseableUtils.closeQuietly(latch)}}TestCleanState.closeAndTestClean(client)}@@@55@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(latch.getState(),LeaderLatch.State.CLOSED)@@@50@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "LeaderLatch.CloseMode closeMode = i < SILENT_QTY? LeaderLatch.CloseMode.SILENT: LeaderLatch.CloseMode.NOTIFY_LEADER@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final AtomicLong masterCounter = new AtomicLong(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final LeaderLatch latch = new LeaderLatch(client,PATH_NAME)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->15 [style = solid, label="PARTICIPANT_QTY"];
6->17 [style = bold, label=""];
17->8 [style = bold, label=""];
0->20 [style = solid, label="PARTICIPANT_QTY"];
17->10 [style = bold, label=""];
1->4 [style = bold, label=""];
26->27 [style = solid, label="closeMode"];
18->24 [style = bold, label=""];
7->30 [style = solid, label="latches"];
23->25 [style = bold, label=""];
17->26 [style = bold, label=""];
27->32 [style = bold, label=""];
6->26 [style = solid, label="i"];
33->20 [style = bold, label=""];
15->23 [style = dashed, label="0"];
27->30 [style = solid, label="latch"];
17->27 [style = dotted, label="true"];
0->17 [style = solid, label="PARTICIPANT_QTY"];
25->3 [style = bold, label=""];
14->8 [style = solid, label="client"];
17->11 [style = dotted, label="true"];
12->25 [style = dashed, label="0"];
17->26 [style = dotted, label="true"];
7->3 [style = solid, label="latches"];
28->1 [style = bold, label=""];
32->34 [style = bold, label=""];
0->23 [style = solid, label="PARTICIPANT_QTY"];
0->28 [style = bold, label=""];
5->37 [style = dashed, label="0"];
17->32 [style = dotted, label="true"];
37->32 [style = solid, label="exec"];
28->31 [style = solid, label="SILENT_QTY"];
37->7 [style = bold, label=""];
34->11 [style = bold, label=""];
19->0 [style = bold, label=""];
21->2 [style = bold, label=""];
0->31 [style = solid, label="PARTICIPANT_QTY"];
17->8 [style = dotted, label="true"];
18->20 [style = bold, label=""];
26->27 [style = bold, label=""];
14->27 [style = solid, label="client"];
29->33 [style = bold, label=""];
36->0 [style = bold, label=""];
8->2 [style = solid, label="latch"];
22->0 [style = bold, label=""];
27->34 [style = solid, label="latch"];
31->35 [style = bold, label=""];
0->24 [style = solid, label="PARTICIPANT_QTY"];
10->13 [style = bold, label=""];
6->17 [style = solid, label="i"];
15->31 [style = bold, label=""];
20->24 [style = dashed, label="0"];
28->26 [style = solid, label="SILENT_QTY"];
0->1 [style = bold, label=""];
14->30 [style = solid, label="client"];
7->6 [style = bold, label=""];
14->37 [style = bold, label=""];
15->31 [style = dashed, label="0"];
9->14 [style = bold, label=""];
8->3 [style = solid, label="latch"];
8->21 [style = bold, label=""];
5->7 [style = bold, label=""];
11->17 [style = bold, label=""];
17->34 [style = dotted, label="true"];
15->12 [style = bold, label=""];
0->1 [style = solid, label="PARTICIPANT_QTY"];
12->3 [style = bold, label=""];
17->2 [style = dotted, label="true"];
8->21 [style = solid, label="latch"];
17->29 [style = bold, label=""];
17->21 [style = dotted, label="true"];
20->15 [style = bold, label=""];
35->30 [style = bold, label=""];
14->3 [style = solid, label="client"];
5->21 [style = solid, label="exec"];
2->11 [style = bold, label=""];
16->9 [style = bold, label=""];
4->16 [style = bold, label=""];
13->18 [style = bold, label=""];
14->5 [style = bold, label=""];
24->23 [style = bold, label=""];
27->32 [style = solid, label="latch"];
}
