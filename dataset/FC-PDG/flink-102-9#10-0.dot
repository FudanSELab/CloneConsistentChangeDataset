digraph {
55 [style = filled, label = "tester.close()@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "testFileReadingOperatorWithIngestionTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "Assert.assertEquals(expectedFileContents.size(),actualFileContents.size())@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "long lastSeenWatermark = Long.MIN_VALUE@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "localMailbox.runMailboxStep()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "Assert.assertEquals(500,((Watermark)output.poll()).getTimestamp())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "FileInputSplit(( splits = format.createInputSplits(tester.getExecutionConfig().getParallelism())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(splits.length,watermarkCounter)@@@80@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final long watermarkInterval = 10@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(nextTimestamp,element.getTimestamp())@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "runnableWithException.run()@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,((Watermark)tester.getOutput().poll()).getTimestamp())@@@89@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "hdfs.delete(file,false)@@@62@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "line instanceof Watermark@@@66@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(tester.getOutput().peek() instanceof Watermark)@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "OneInputStreamOperatorTestHarness<TimestampedFileInputSplit,String> tester = createHarness(format)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
101 [style = filled, label = "@SuppressWarnings(\"unchecked\") StreamRecord<String> element = (StreamRecord<String>)line@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "tester.setProcessingTime(201)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "content.add(element.getValue() + \"\")@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "output.isEmpty()@@@25@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(TimeCharacteristic.IngestionTime,tester.getTimeCharacteristic())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "localMailbox.runMailboxStep()@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "int fileIdx = Character.getNumericValue(element.getValue().charAt(0))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "Assert.assertTrue(output.peek() instanceof Watermark)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "tester.getCheckpointLock()@@@81@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Assert.assertEquals(400,((Watermark)output.poll()).getTimestamp())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "hdfs.delete(file,false)@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "tester.setProcessingTime(401)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "String testBasePath = hdfsURI + \"/\" + UUID.randomUUID() + \"/\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Map<String,Long> modTimes = new HashMap<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(output.isEmpty())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Set<org.apache.hadoop.fs.Path> filesCreated = new HashSet<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Assert.assertTrue(output.toString(),output.peek() instanceof Watermark)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(expectedFileContents.size(),actualFileContents.size())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "List<String> cntnt = actualFileContents.get(fileIdx)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "Collections.sort(cntnt,new Comparator<String>(){@Override public int compare(String o1,String o2){return getLineNo(o1) - getLineNo(o2)}})@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Map<Integer,List<String>> actualFileContents = new HashMap<>()@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,((Watermark)lastElement).getTimestamp())@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "modTimes.put(file.f0.getName(),hdfs.getFileStatus(file.f0).getModificationTime())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "List<String> content = actualFileContents.get(fileIdx)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "expectedFileContents.put(i,file.f1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testFileReadingOperatorWithIngestionTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "long watermark = ((Watermark)line).getTimestamp()@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(NO_OF_FILES * LINES_PER_FILE,lineCounter)@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "i++@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "actualFileContents.put(fileIdx,content)@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Map<Integer,String> expectedFileContents = new HashMap<>()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "SteppingMailboxProcessor localMailbox = createLocalMailbox(tester)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "tester.setProcessingTime(501)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = 0@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TextInputFormat format = new TextInputFormat(new Path(testBasePath))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "filesCreated.add(file.f0)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "long nextTimestamp = tester.getProcessingTime() + watermarkInterval@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int fileIdx = Character.getNumericValue(element.getValue().charAt(0))@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "tester.getOutput().isEmpty() || tester.getOutput().size() != (LINES_PER_FILE + 1)@@@50@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "Map<Integer,String> expectedFileContents = new HashMap<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "Assert.assertTrue(output.peek() instanceof Watermark)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
104 [style = filled, label = "StringBuilder cntntStr = new StringBuilder()@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "Assert.fail(\"Unknown element in the list.\")@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "List<String> cntnt = actualFileContents.get(fileIdx)@@@93@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "tester.getExecutionConfig().setAutoWatermarkInterval(watermarkInterval)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TypeInformation<String> typeInfo = TypeExtractor.getInputFormatTypes(format)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "int watermarkCounter = 0@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Tuple2<org.apache.hadoop.fs.Path,String> file = createFileAndFillWithData(testBasePath,\"file\",i,\"This is test line.\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "tester.setTimeCharacteristic(TimeCharacteristic.IngestionTime)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "tester.setProcessingTime(nextTimestamp)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "cntntStr.append(line)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Assert.assertEquals(200,((Watermark)output.poll()).getTimestamp())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "actualFileContents.put(fileIdx,content)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "Assert.assertEquals(300,((Watermark)output.poll()).getTimestamp())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(nextTimestamp - (nextTimestamp % watermarkInterval),watermark)@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "tester.setTimeCharacteristic(TimeCharacteristic.EventTime)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
105 [style = filled, label = "Map<Integer,List<String>> actualFileContents = new HashMap<>()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "watermarkCounter++@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertTrue(output.peek() instanceof Watermark)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "Assert.assertTrue(\"file\" + fileIdx + \" not found\",actualFileContents.keySet().contains(fileIdx))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "int lineCounter = 0@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(expectedFileContents.get(fileIdx),cntntStr.toString())@@@104@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "tester.close()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
90 [style = filled, label = "FileInputSplit(( splits = format.createInputSplits(tester.getExecutionConfig().getParallelism())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
103 [style = filled, label = "lastElement = line@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "final OneInputStreamOperatorTestHarness<TimestampedFileInputSplit,String> tester = createHarness(format)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "Object lastElement = null@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "Assert.assertEquals(NO_OF_FILES * LINES_PER_FILE + 1,tester.getOutput().size())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Assert.assertTrue(watermark > lastSeenWatermark)@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "tester.setProcessingTime(301)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Assert.assertTrue(lastElement instanceof Watermark)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "line instanceof StreamRecord@@@32@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "tester.open()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Collections.sort(cntnt,new Comparator<String>(){@Override public int compare(String o1,String o2){return getLineNo(o1) - getLineNo(o2)}})@@@94@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "@SuppressWarnings(\"unchecked\") StreamRecord<String> element = (StreamRecord<String>)line@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "content == null@@@36@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "content = new ArrayList<>()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ConcurrentLinkedQueue<Object> output = tester.getOutput()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "lastSeenWatermark = watermark@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertTrue(\"file\" + fileIdx + \" not found\",actualFileContents.keySet().contains(fileIdx))@@@92@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "RunnableWithException runnableWithException = null@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(1,tester.getOutput().size())@@@87@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "testFileReadingOperatorWithEventTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "lineCounter++@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "i < NO_OF_FILES@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "filesCreated.add(file.f0)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "cntntStr.append(line)@@@102@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "tester.getCheckpointLock()@@@24@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "tester.processElement(new StreamRecord<>(new TimestampedFileInputSplit(modTimes.get(split.getPath().getName()),split.getSplitNumber(),split.getPath(),split.getStart(),split.getLength(),split.getHostnames())))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "StringBuilder cntntStr = new StringBuilder()@@@100@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "tester.getOutput().clear()@@@77@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "Assert.assertEquals(expectedFileContents.get(fileIdx),cntntStr.toString())@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79->35 [style = solid, label="i"];
35->79 [style = dotted, label="true"];
107->83 [style = bold, label=""];
12->25 [style = bold, label=""];
65->32 [style = bold, label=""];
48->57 [style = solid, label="tester"];
73->75 [style = bold, label=""];
87->94 [style = dotted, label="true"];
5->67 [style = solid, label="i"];
39->71 [style = bold, label=""];
76->58 [style = bold, label=""];
62->69 [style = dotted, label="true"];
1->48 [style = solid, label="format"];
82->103 [style = bold, label=""];
100->104 [style = bold, label=""];
52->68 [style = dotted, label="true"];
5->35 [style = solid, label="i"];
13->62 [style = bold, label=""];
35->106 [style = dotted, label="true"];
79->23 [style = solid, label="i"];
2->10 [style = bold, label=""];
29->31 [style = solid, label="watermarkInterval"];
17->61 [style = solid, label="nextTimestamp"];
62->64 [style = dotted, label="false"];
67->79 [style = bold, label=""];
4->70 [style = bold, label=""];
38->74 [style = bold, label=""];
64->60 [style = bold, label=""];
97->13 [style = bold, label=""];
51->59 [style = bold, label=""];
68->52 [style = bold, label=""];
20->69 [style = solid, label="watermark"];
53->13 [style = bold, label=""];
102->105 [style = bold, label=""];
103->87 [style = bold, label=""];
40->12 [style = solid, label="cntnt"];
33->99 [style = bold, label=""];
39->51 [style = bold, label=""];
104->89 [style = bold, label=""];
62->53 [style = dotted, label="true"];
89->91 [style = bold, label=""];
53->60 [style = bold, label=""];
95->97 [style = dotted, label="true"];
98->71 [style = bold, label=""];
25->41 [style = bold, label=""];
15->53 [style = bold, label=""];
58->17 [style = bold, label=""];
87->103 [style = bold, label=""];
20->31 [style = solid, label="watermark"];
87->13 [style = dotted, label="true"];
1->21 [style = solid, label="format"];
14->56 [style = bold, label=""];
35->23 [style = dotted, label="true"];
93->95 [style = solid, label="content"];
7->67 [style = bold, label=""];
88->97 [style = solid, label="content"];
76->0 [style = solid, label="lineCounter"];
7->106 [style = bold, label=""];
39->51 [style = dotted, label="true"];
58->15 [style = solid, label="watermarkCounter"];
87->47 [style = bold, label=""];
85->90 [style = bold, label=""];
79->35 [style = bold, label=""];
78->2 [style = bold, label=""];
20->31 [style = bold, label=""];
9->59 [style = solid, label="fileIdx"];
37->56 [style = bold, label=""];
47->39 [style = bold, label=""];
1->29 [style = bold, label=""];
52->68 [style = bold, label=""];
29->17 [style = solid, label="watermarkInterval"];
13->28 [style = bold, label=""];
71->60 [style = bold, label=""];
50->55 [style = bold, label=""];
64->13 [style = bold, label=""];
3->77 [style = bold, label=""];
35->1 [style = bold, label=""];
56->40 [style = bold, label=""];
28->27 [style = bold, label=""];
63->66 [style = bold, label=""];
44->19 [style = bold, label=""];
83->102 [style = bold, label=""];
29->48 [style = bold, label=""];
45->6 [style = bold, label=""];
35->67 [style = dotted, label="true"];
103->47 [style = solid, label="lastElement"];
71->100 [style = bold, label=""];
17->24 [style = bold, label=""];
95->88 [style = dotted, label="true"];
48->57 [style = bold, label=""];
94->98 [style = solid, label="fileIdx"];
50->55 [style = dotted, label="true"];
13->61 [style = dotted, label="true"];
9->56 [style = solid, label="fileIdx"];
26->45 [style = bold, label=""];
35->23 [style = bold, label=""];
4->46 [style = dotted, label="true"];
13->27 [style = dotted, label="true"];
91->86 [style = bold, label=""];
87->101 [style = dotted, label="true"];
43->33 [style = bold, label=""];
41->14 [style = bold, label=""];
59->71 [style = bold, label=""];
30->50 [style = bold, label=""];
105->82 [style = bold, label=""];
95->88 [style = bold, label=""];
77->18 [style = bold, label=""];
75->8 [style = bold, label=""];
46->4 [style = bold, label=""];
87->101 [style = bold, label=""];
101->94 [style = bold, label=""];
63->1 [style = solid, label="testBasePath"];
17->24 [style = solid, label="nextTimestamp"];
71->100 [style = solid, label="cntnt"];
33->5 [style = bold, label=""];
49->63 [style = bold, label=""];
93->95 [style = bold, label=""];
94->97 [style = solid, label="fileIdx"];
27->61 [style = bold, label=""];
92->63 [style = bold, label=""];
35->11 [style = dotted, label="true"];
47->39 [style = solid, label="content"];
6->4 [style = bold, label=""];
95->13 [style = bold, label=""];
31->69 [style = bold, label=""];
87->95 [style = dotted, label="true"];
16->37 [style = bold, label=""];
10->54 [style = bold, label=""];
13->28 [style = dotted, label="true"];
52->13 [style = bold, label=""];
94->93 [style = bold, label=""];
42->73 [style = bold, label=""];
54->22 [style = bold, label=""];
94->93 [style = solid, label="fileIdx"];
51->98 [style = bold, label=""];
13->9 [style = dotted, label="true"];
5->35 [style = bold, label=""];
18->26 [style = bold, label=""];
60->17 [style = bold, label=""];
91->98 [style = bold, label=""];
15->30 [style = solid, label="watermarkCounter"];
107->83 [style = dotted, label="true"];
81->63 [style = bold, label=""];
24->38 [style = bold, label=""];
19->16 [style = bold, label=""];
13->39 [style = dotted, label="true"];
90->18 [style = bold, label=""];
71->13 [style = bold, label=""];
34->65 [style = bold, label=""];
63->23 [style = solid, label="testBasePath"];
58->30 [style = solid, label="watermarkCounter"];
39->59 [style = dotted, label="true"];
36->44 [style = bold, label=""];
9->47 [style = solid, label="fileIdx"];
13->47 [style = dotted, label="true"];
35->7 [style = dotted, label="true"];
69->15 [style = bold, label=""];
9->47 [style = bold, label=""];
9->40 [style = solid, label="fileIdx"];
62->15 [style = dotted, label="true"];
1->96 [style = solid, label="format"];
13->62 [style = dotted, label="false"];
0->30 [style = bold, label=""];
80->78 [style = bold, label=""];
23->86 [style = solid, label="file"];
4->46 [style = bold, label=""];
88->97 [style = bold, label=""];
70->72 [style = bold, label=""];
84->85 [style = bold, label=""];
9->14 [style = solid, label="fileIdx"];
22->76 [style = bold, label=""];
96->84 [style = bold, label=""];
20->53 [style = solid, label="watermark"];
21->96 [style = bold, label=""];
5->23 [style = solid, label="i"];
40->12 [style = bold, label=""];
13->47 [style = bold, label=""];
62->20 [style = dotted, label="true"];
62->64 [style = bold, label=""];
62->31 [style = dotted, label="true"];
1->21 [style = bold, label=""];
60->0 [style = bold, label=""];
66->43 [style = bold, label=""];
18->107 [style = bold, label=""];
79->67 [style = solid, label="i"];
23->11 [style = bold, label=""];
23->36 [style = solid, label="file"];
17->31 [style = solid, label="nextTimestamp"];
66->33 [style = bold, label=""];
21->29 [style = bold, label=""];
13->103 [style = bold, label=""];
8->34 [style = bold, label=""];
11->7 [style = bold, label=""];
53->69 [style = solid, label="lastSeenWatermark"];
22->69 [style = solid, label="lastSeenWatermark"];
62->20 [style = bold, label=""];
55->36 [style = bold, label=""];
106->67 [style = bold, label=""];
27->0 [style = solid, label="lineCounter"];
94->71 [style = solid, label="fileIdx"];
5->79 [style = solid, label="i"];
94->91 [style = solid, label="fileIdx"];
57->3 [style = bold, label=""];
76->27 [style = solid, label="lineCounter"];
23->7 [style = bold, label=""];
29->3 [style = solid, label="watermarkInterval"];
13->71 [style = dotted, label="true"];
87->93 [style = dotted, label="true"];
32->80 [style = bold, label=""];
51->59 [style = solid, label="content"];
99->5 [style = bold, label=""];
61->9 [style = bold, label=""];
74->52 [style = bold, label=""];
72->42 [style = bold, label=""];
}
