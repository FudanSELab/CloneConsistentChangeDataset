digraph {
8 [style = filled, label = "Iterable<Predicate<Object>> iterable = new Iterable<Predicate<Object>>(){@Override public Iterator<Predicate<Object>> iterator(){return list.iterator()}}@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testOr_iterableDefensivelyCopied['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Iterable iterable = new Iterable<Predicate>(){@Override public Iterator<Predicate> iterator(){return list.iterator()}}@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "final List<Predicate<Object>> list = newArrayList()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "list.add(Predicates.alwaysTrue())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertFalse(predicate.apply(1))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testOr_iterableDefensivelyCopied['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertFalse(predicate.apply(1))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Predicate<Object> predicate = Predicates.or(iterable)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Predicate<Object> predicate = Predicates.or(list)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final List list = new ArrayList<Predicate>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "testOr_listDefensivelyCopied['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertFalse(predicate.apply(1))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List list = new ArrayList<Predicate>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "list.add(Predicates.alwaysTrue())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertFalse(predicate.apply(1))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
8->0 [style = bold, label=""];
13->10 [style = bold, label=""];
14->15 [style = bold, label=""];
8->0 [style = solid, label="iterable"];
15->13 [style = bold, label=""];
6->0 [style = bold, label=""];
14->15 [style = solid, label="list"];
4->2 [style = bold, label=""];
6->8 [style = dashed, label="0"];
2->14 [style = dashed, label="0"];
3->1 [style = bold, label=""];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
2->7 [style = dashed, label="0"];
2->6 [style = bold, label=""];
6->0 [style = solid, label="iterable"];
12->14 [style = bold, label=""];
10->11 [style = bold, label=""];
}
