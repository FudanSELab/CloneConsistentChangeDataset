digraph {
13 [style = filled, label = "assertThat(sinkOperatorFactory,instanceOf())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final Sink<RowData,?,?,?> sink = sinkFunctionProvider.createSink()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider)provider@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "final DynamicTableSink expectedSink = createExpectedSink(SINK_SCHEMA.toPhysicalRowDataType(),keyEncodingFormat,valueEncodingFormat,SINK_KEY_FIELDS,SINK_VALUE_FIELDS,null,SINK_TOPIC,UPSERT_KAFKA_SINK_PROPERTIES,DeliveryGuarantee.AT_LEAST_ONCE,SinkBufferFlushMode.DISABLED,null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "DynamicTableSink.SinkRuntimeProvider provider = actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(sink,instanceOf())@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final DynamicTableSink expectedSink = createExpectedSink(SINK_SCHEMA.toPhysicalRowDataType(),keyEncodingFormat,valueEncodingFormat,SINK_KEY_FIELDS,SINK_VALUE_FIELDS,null,SINK_TOPIC,UPSERT_KAFKA_SINK_PROPERTIES,DeliveryGuarantee.AT_LEAST_ONCE,new SinkBufferFlushMode(100,1000L),null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final DynamicTableSink actualSink = createTableSink(SINK_SCHEMA,getModifiedOptions(getFullSinkOptions(),null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(((SinkOperatorFactory)sinkOperatorFactory).getSink(),instanceOf())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "testBufferedTableSink['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final DataStreamSinkProvider sinkProvider = (DataStreamSinkProvider)provider@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink)actualSink@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "sinkProvider.consumeDataStream(env.fromElements(new BinaryRowData(1)))@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "final DynamicTableSink actualSink = createTableSink(SINK_SCHEMA,getFullSinkOptions())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(provider,instanceOf())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final SinkProvider sinkFunctionProvider = (SinkProvider)provider@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(provider,instanceOf())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "testBufferedTableSink['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final StreamOperatorFactory<?> sinkOperatorFactory = env.getStreamGraph().getStreamNodes().stream().filter(null).findFirst().orElseThrow(null).getOperatorFactory()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(expectedSink,actualSink)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertThat(sinkFunction,instanceOf())@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final SinkFunction<RowData> sinkFunction = sinkFunctionProvider.createSinkFunction()@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testTableSink['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(provider,instanceOf())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
2->7 [style = solid, label="provider"];
8->19 [style = dashed, label="0"];
15->10 [style = bold, label=""];
3->2 [style = dashed, label="0"];
23->20 [style = solid, label="actualSink"];
2->17 [style = solid, label="provider"];
24->19 [style = bold, label=""];
24->19 [style = solid, label="provider"];
9->4 [style = dashed, label="0"];
1->6 [style = solid, label="actualSink"];
12->13 [style = solid, label="sinkOperatorFactory"];
11->1 [style = bold, label=""];
2->8 [style = solid, label="provider"];
7->17 [style = dashed, label="0"];
14->17 [style = bold, label=""];
9->3 [style = solid, label="sinkFunction"];
4->2 [style = bold, label=""];
8->14 [style = dashed, label="0"];
19->6 [style = bold, label=""];
22->20 [style = solid, label="expectedSink"];
13->16 [style = bold, label=""];
8->7 [style = bold, label=""];
23->18 [style = solid, label="actualSink"];
7->6 [style = dashed, label="0"];
7->9 [style = bold, label=""];
12->13 [style = bold, label=""];
6->4 [style = bold, label=""];
18->20 [style = bold, label=""];
4->2 [style = solid, label="sink"];
22->18 [style = bold, label=""];
24->6 [style = solid, label="provider"];
23->22 [style = bold, label=""];
5->6 [style = bold, label=""];
10->12 [style = bold, label=""];
0->1 [style = bold, label=""];
2->14 [style = bold, label=""];
17->15 [style = bold, label=""];
5->4 [style = solid, label="expectedSink"];
9->3 [style = bold, label=""];
20->24 [style = bold, label=""];
1->4 [style = solid, label="actualSink"];
1->23 [style = dashed, label="0"];
2->14 [style = solid, label="provider"];
2->8 [style = bold, label=""];
21->23 [style = bold, label=""];
}
