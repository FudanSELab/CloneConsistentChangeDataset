digraph {
2 [style = filled, label = "setUpInsertValues(insertStatement)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(actual.getOnDuplicateKeyUpdateValueContext().getColumns().size(),is(2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "when(schemaMetaData.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\",\"name\",\"status\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "InsertStatementContext actual = new InsertStatementContext(schemaMetaData,Arrays.asList(1,\"Tom\",2,\"Jerry\"),insertStatement)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(actual.getGroupedParameters().size(),is(2))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "insertStatement.setTable(new SimpleTableSegment(0,0,new IdentifierValue(\"tbl\")))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "setUpOnDuplicateValues(insertStatement)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(actual.getOnDuplicateKeyUpdateParameters().size(),is(1))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertGetGroupedParametersWithOnDuplicateParameters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "InsertStatementContext actual = new InsertStatementContext(schemaMetaData,Arrays.asList(1,\"Tom\",2,\"Jerry\",\"onDuplicateKeyUpdateColumnValue\"),insertStatement)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(actual.getOnDuplicateKeyUpdateParameters().size(),is(0))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(actual.getGroupedParameters().size(),is(2))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertGetGroupedParametersWithoutOnDuplicateParameter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertGetGroupedParametersWithoutOnDuplicateParameter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "PhysicalSchemaMetaData schemaMetaData = mock()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "MySQLInsertStatement insertStatement = new MySQLInsertStatement()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "InsertStatement insertStatement = new MySQLInsertStatement()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SchemaMetaData schemaMetaData = mock()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
16->15 [style = bold, label=""];
0->16 [style = bold, label=""];
2->6 [style = bold, label=""];
3->6 [style = solid, label="insertStatement"];
1->6 [style = solid, label="schemaMetaData"];
12->17 [style = bold, label=""];
1->17 [style = solid, label="schemaMetaData"];
0->16 [style = dashed, label="0"];
5->14 [style = bold, label=""];
3->2 [style = solid, label="insertStatement"];
13->1 [style = bold, label=""];
2->12 [style = bold, label=""];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
6->4 [style = bold, label=""];
11->5 [style = bold, label=""];
17->0 [style = bold, label=""];
11->6 [style = solid, label="schemaMetaData"];
14->12 [style = solid, label="insertStatement"];
8->2 [style = bold, label=""];
1->11 [style = dashed, label="0"];
3->8 [style = bold, label=""];
14->17 [style = solid, label="insertStatement"];
7->15 [style = dashed, label="0"];
14->8 [style = bold, label=""];
3->14 [style = dashed, label="0"];
9->1 [style = bold, label=""];
14->2 [style = solid, label="insertStatement"];
10->11 [style = bold, label=""];
}
