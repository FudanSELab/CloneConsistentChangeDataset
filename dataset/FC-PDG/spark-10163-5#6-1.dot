digraph {
2 [style = filled, label = "verify(listener,times(1)).onBlockFetchFailure(eq(\"b1\"),any())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "LinkedHashMap<String,ManagedBuffer> blocks = Maps.newLinkedHashMap()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "BlockFetchingListener listener = fetchBlocks(blocks)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "blocks.put(\"b2\",null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testFailure['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String(( blockIds = blocks.keySet().toArray(new String(((()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "verify(listener,times(1)).onBlockFetchFailure(eq(\"b1\"),any())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "blocks.put(\"b2\",new NioManagedBuffer(ByteBuffer.wrap(new byte(((()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "verify(listener,times(1)).onBlockFetchSuccess(\"b0\",blocks.get(\"b0\"))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "verify(listener,times(2)).onBlockFetchFailure(eq(\"b2\"),any())@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "BlockFetchingListener listener = fetchBlocks(blocks,blockIds,new OpenBlocks(\"app-id\",\"exec-id\",blockIds),conf)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "blocks.put(\"b1\",null)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "verify(listener,times(1)).onBlockFetchFailure(eq(\"b2\"),any())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "blocks.put(\"b0\",new NioManagedBuffer(ByteBuffer.wrap(new byte(((()))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testFailure['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "verify(listener,times(1)).onBlockFetchSuccess(\"b2\",blocks.get(\"b2\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testFailureAndSuccess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
0->13 [style = bold, label=""];
0->6 [style = bold, label=""];
12->9 [style = solid, label="blockIds"];
16->7 [style = bold, label=""];
12->9 [style = bold, label=""];
2->10 [style = bold, label=""];
3->4 [style = bold, label=""];
8->7 [style = bold, label=""];
7->9 [style = solid, label="blocks"];
7->5 [style = bold, label=""];
6->13 [style = dashed, label="0"];
2->14 [style = dashed, label="0"];
13->3 [style = bold, label=""];
5->0 [style = bold, label=""];
1->14 [style = bold, label=""];
4->1 [style = bold, label=""];
1->2 [style = bold, label=""];
14->15 [style = bold, label=""];
7->3 [style = solid, label="blocks"];
9->1 [style = bold, label=""];
11->7 [style = bold, label=""];
6->12 [style = bold, label=""];
}
