digraph {
13 [style = filled, label = "Thread.sleep(200)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Set<StreamPartition<Integer>> partitions = ImmutableSet.of(StreamPartition.of(topic,0),StreamPartition.of(topic,1))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(11,polledRecords.size())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "recordSupplier.close()@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "insertData()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "KafkaRecordSupplier recordSupplier = new KafkaRecordSupplier(kafkaServer.consumerProperties(),objectMapper)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Assert.assertTrue(initialRecords.containsAll(polledRecords))@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testSeek['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int i = 0@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(11,polledRecords.size())@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(0L,(long)recordSupplier.getEarliestSequenceNumber(partition0))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "StreamPartition<Integer> partition0 = StreamPartition.of(topic,0)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "StreamPartition<Integer> partition0 = StreamPartition.of(topic,0)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Set<StreamPartition<Integer>> partitions = ImmutableSet.of(StreamPartition.of(topic,0),StreamPartition.of(topic,1))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "polledRecords.size() != 11 && i < pollRetry@@@20@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testSeekToLatest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "recordSupplier.assign(partitions)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(initialRecords.containsAll(polledRecords))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(0L,(long)recordSupplier.getEarliestSequenceNumber(partition1))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "recordSupplier.close()@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testSeek['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "KafkaRecordSupplier recordSupplier = new KafkaRecordSupplier(kafkaServer.consumerProperties(),objectMapper)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "StreamPartition<Integer> partition1 = StreamPartition.of(topic,1)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "polledRecords.size() != 11 && i < pollRetry@@@16@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "kafkaProducer.send(record).get()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "StreamPartition<Integer> partition1 = StreamPartition.of(topic,1)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "recordSupplier.seekToLatest(partitions)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "i++@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),polledRecords)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "recordSupplier.close()@@@27@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "List<OrderedPartitionableRecord<Integer,Long>> polledRecords = recordSupplier.poll(poll_timeout_millis)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->15 [style = bold, label=""];
0->12 [style = dotted, label="true"];
4->20 [style = solid, label="partition0"];
15->28 [style = solid, label="partitions"];
12->6 [style = solid, label="polledRecords"];
13->17 [style = solid, label="i"];
0->13 [style = dotted, label="true"];
17->1 [style = bold, label=""];
22->15 [style = solid, label="partition1"];
11->1 [style = bold, label=""];
0->17 [style = bold, label=""];
16->19 [style = solid, label="partition1"];
11->1 [style = dotted, label="true"];
19->20 [style = bold, label=""];
0->12 [style = bold, label=""];
17->11 [style = solid, label="i"];
20->0 [style = bold, label=""];
20->28 [style = dashed, label="0"];
20->14 [style = solid, label="i"];
11->17 [style = dotted, label="true"];
22->18 [style = solid, label="partition1"];
9->17 [style = bold, label=""];
11->9 [style = dotted, label="true"];
7->4 [style = bold, label=""];
15->3 [style = bold, label=""];
23->16 [style = solid, label="partition0"];
13->11 [style = bold, label=""];
10->6 [style = bold, label=""];
19->1 [style = solid, label="polledRecords"];
1->9 [style = bold, label=""];
15->18 [style = solid, label="partitions"];
23->3 [style = solid, label="partition0"];
3->18 [style = bold, label=""];
5->19 [style = bold, label=""];
12->13 [style = bold, label=""];
0->14 [style = bold, label=""];
29->12 [style = bold, label=""];
13->11 [style = solid, label="i"];
23->22 [style = bold, label=""];
24->4 [style = solid, label="partitions"];
14->0 [style = bold, label=""];
24->21 [style = bold, label=""];
16->0 [style = solid, label="partition1"];
11->10 [style = bold, label=""];
27->29 [style = solid, label="polledRecords"];
30->7 [style = bold, label=""];
18->5 [style = bold, label=""];
14->12 [style = bold, label=""];
26->23 [style = bold, label=""];
6->8 [style = bold, label=""];
25->26 [style = bold, label=""];
20->0 [style = solid, label="i"];
14->0 [style = solid, label="i"];
4->5 [style = solid, label="partition0"];
0->14 [style = dotted, label="true"];
19->28 [style = bold, label=""];
2->7 [style = bold, label=""];
22->24 [style = bold, label=""];
28->27 [style = bold, label=""];
27->29 [style = bold, label=""];
13->14 [style = bold, label=""];
4->16 [style = bold, label=""];
21->4 [style = bold, label=""];
17->11 [style = bold, label=""];
}
