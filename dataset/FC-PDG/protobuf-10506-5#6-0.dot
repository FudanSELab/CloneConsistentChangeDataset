digraph {
8 [style = filled, label = "builder.getOneofNestedMessageBuilder()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(builder.hasOneofNestedMessage())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(message.hasPayload())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertThat(builder.getFooStringPiece()).isEmpty()builder.setFooStringPiece(\"foo\")assertThat(builder.hasFooStringPiece()).isTrue()assertThat(builder.getFooStringPiece()).isEqualTo(\"foo\")TestOneof2 message = builder.buildPartial()assertThat(message.hasFooStringPiece()).isTrue()assertThat(message.getFooStringPiece()).isEqualTo(\"foo\")assertThat(TestUtil.toBytes(\"foo\")).isEqualTo(message.getFooStringPieceBytes())assertThat(builder.clearFooStringPiece().hasFooStringPiece()).isFalse()TestOneof2 message2 = builder.build()assertThat(message2.hasFooStringPiece()).isFalse()assertThat(message2.getFooStringPiece()).isEmpty()assertThat(message2.getFooStringPieceBytes()).isEqualTo(TestUtil.toBytes(\"\"))}@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertThat(builder.getFooMessage().getQuxInt()).isEqualTo(0)builder.setFooMessage(TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build())assertThat(builder.hasFooMessage()).isTrue()assertThat(builder.getFooMessage().getQuxInt()).isEqualTo(234)TestOneof2 message = builder.buildPartial()assertThat(message.hasFooMessage()).isTrue()assertThat(message.getFooMessage().getQuxInt()).isEqualTo(234)assertThat(builder.clearFooMessage().hasFooString()).isFalse()message = builder.build()assertThat(message.hasFooMessage()).isFalse()assertThat(message.getFooMessage().getQuxInt()).isEqualTo(0)builder = TestOneof2.newBuilder()assertThat(builder.getFooMessageOrBuilder()).isSameInstanceAs(TestOneof2.NestedMessage.getDefaultInstance())assertThat(builder.hasFooMessage()).isFalse()builder.getFooMessageBuilder().setQuxInt(123)assertThat(builder.hasFooMessage()).isTrue()assertThat(builder.getFooMessage().getQuxInt()).isEqualTo(123)message = builder.build()assertThat(message.hasFooMessage()).isTrue()assertThat(message.getFooMessage().getQuxInt()).isEqualTo(123)}@@@86@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertThat(builder.getFooCord()).isEmpty()builder.setFooCord(\"foo\")assertThat(builder.hasFooCord()).isTrue()assertThat(builder.getFooCord()).isEqualTo(\"foo\")TestOneof2 message = builder.buildPartial()assertThat(message.hasFooCord()).isTrue()assertThat(message.getFooCord()).isEqualTo(\"foo\")assertThat(TestUtil.toBytes(\"foo\")).isEqualTo(message.getFooCordBytes())assertThat(builder.clearFooCord().hasFooCord()).isFalse()TestOneof2 message2 = builder.build()assertThat(message2.hasFooCord()).isFalse()assertThat(message2.getFooCord()).isEmpty()assertThat(message2.getFooCordBytes()).isEqualTo(TestUtil.toBytes(\"\"))}@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TestAllTypes.Builder builder = parentBuilder.getPayloadBuilder()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "NestedTestAllTypes message = parentBuilder.build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "NestedTestAllTypes.Builder parentBuilder = NestedTestAllTypes.newBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(parentBuilder.hasPayload())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(message.getPayload().hasOneofNestedMessage())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testOneofTypes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertThat(builder.getFooEnum()).isEqualTo(TestOneof2.NestedEnum.FOO)assertThat(builder.setFooEnum(TestOneof2.NestedEnum.BAR).hasFooEnum()).isTrue()assertThat(builder.getFooEnum()).isEqualTo(TestOneof2.NestedEnum.BAR)TestOneof2 message = builder.buildPartial()assertThat(message.hasFooEnum()).isTrue()assertThat(message.getFooEnum()).isEqualTo(TestOneof2.NestedEnum.BAR)assertThat(builder.clearFooEnum().hasFooEnum()).isFalse()TestOneof2 message2 = builder.build()assertThat(message2.hasFooEnum()).isFalse()assertThat(message2.getFooEnum()).isEqualTo(TestOneof2.NestedEnum.FOO)}@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testOneofTypes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertThat(builder.getFooInt()).isEqualTo(0)assertThat(builder.hasFooInt()).isFalse()assertThat(builder.setFooInt(123).hasFooInt()).isTrue()assertThat(builder.getFooInt()).isEqualTo(123)TestOneof2 message = builder.buildPartial()assertThat(message.hasFooInt()).isTrue()assertThat(123).isEqualTo(message.getFooInt())assertThat(builder.clearFooInt().hasFooInt()).isFalse()TestOneof2 message2 = builder.build()assertThat(message2.hasFooInt()).isFalse()assertThat(message2.getFooInt()).isEqualTo(0)}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertThat(builder.getFooString()).isEmpty()builder.setFooString(\"foo\")assertThat(builder.hasFooString()).isTrue()assertThat(builder.getFooString()).isEqualTo(\"foo\")TestOneof2 message = builder.buildPartial()assertThat(message.hasFooString()).isTrue()assertThat(message.getFooString()).isEqualTo(\"foo\")assertThat(TestUtil.toBytes(\"foo\")).isEqualTo(message.getFooStringBytes())assertThat(builder.clearFooString().hasFooString()).isFalse()TestOneof2 message2 = builder.buildPartial()assertThat(message2.hasFooString()).isFalse()assertThat(message2.getFooString()).isEmpty()assertThat(message2.getFooStringBytes()).isEqualTo(TestUtil.toBytes(\"\"))builder.setFooInt(123)assertThat(builder.getFooString()).isEmpty()assertThat(builder.getFooStringBytes()).isEqualTo(TestUtil.toBytes(\"\"))assertThat(builder.getFooInt()).isEqualTo(123)message = builder.build()assertThat(message.getFooString()).isEmpty()assertThat(TestUtil.toBytes(\"\")).isEqualTo(message.getFooStringBytes())assertThat(message.getFooInt()).isEqualTo(123)}@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testOneofNestedBuilderOnChangePropagation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8->11 [style = bold, label=""];
7->6 [style = bold, label=""];
10->8 [style = bold, label=""];
13->15 [style = bold, label=""];
4->0 [style = bold, label=""];
14->10 [style = bold, label=""];
11->16 [style = bold, label=""];
15->9 [style = bold, label=""];
16->13 [style = bold, label=""];
1->6 [style = bold, label=""];
3->5 [style = bold, label=""];
5->4 [style = bold, label=""];
6->2 [style = bold, label=""];
6->14 [style = dashed, label="0"];
12->14 [style = bold, label=""];
2->3 [style = bold, label=""];
}
