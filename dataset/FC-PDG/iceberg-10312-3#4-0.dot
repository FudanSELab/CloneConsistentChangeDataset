digraph {
121 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(\"L2 should contain lat\",52.995143f,(float)projectedL2.get(\"lat\"),0.000001)@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(\"Should contain L1 and L2\",Sets.newHashSet(\"L1\",\"L2\"),locations.keySet())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Record projectedL2 = (Record)locations.get(\"L2\")@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(\"L2 should contain long\",-1.539054f,(float)projectedL2.get(\"long\"),0.000001)@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
107 [style = filled, label = "record.setField(\"locations\",ImmutableMap.of(\"L1\",l1,\"L2\",l2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
108 [style = filled, label = "l2.setField(\"lat\",52.995143f)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(\"L1 should contain lat\",53.992811f,(float)projectedL1.get(\"lat\"),0.000001)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(\"L1 should contain latitude\",53.992811f,(float)projectedL1.get(\"latitude\"),0.000001)@@@54@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "projected = writeAndRead(\"all_locations\",writeSchema,writeSchema.select(\"locations\"),record)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"L1 should contain long\",-1.542616f,(float)projectedL1.get(\"long\"),0.000001)@@@41@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
106 [style = filled, label = "Assert.assertNull(\"L1 should not contain lat\",projectedL1.getField(\"lat\"))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "record.setField(\"id\",34L)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "l1.put(\"lat\",53.992811f)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "Assert.assertNotNull(\"L2 should not be null\",projectedL2)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "l1.setField(\"lat\",53.992811f)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertNotNull(\"L2 should not be null\",projectedL2)@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "Assert.assertNull(\"L2 should not contain lat\",projectedL2.getField(\"lat\"))@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
101 [style = filled, label = "Record record = GenericRecord.create(writeSchema.asStruct())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "projectedL2 = (Record)locations.get(\"L2\")@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "l1.setField(\"lat\",53.992811f)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
114 [style = filled, label = "Assert.assertEquals(\"L1 should contain latitude\",53.992811f,(float)projectedL1.getField(\"latitude\"),0.000001)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
117 [style = filled, label = "Assert.assertEquals(\"L2 should contain long\",-1.539054f,(float)projectedL2.getField(\"long\"),0.000001)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
94 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(\"Should contain L1 and L2\",Sets.newHashSet(\"L1\",\"L2\"),locations.keySet())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
113 [style = filled, label = "Assert.assertEquals(\"Should project locations map\",record.getField(\"locations\"),toStringMap((Map)projected.getField(\"locations\")))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(5,\"locations\",Types.MapType.ofOptional(6,7,Types.StringType.get(),Types.StructType.of(Types.NestedField.required(1,\"lat\",Types.FloatType.get()),Types.NestedField.required(2,\"long\",Types.FloatType.get())))))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "Assert.assertNull(\"Should not project locations map\",projected.getField(\"locations\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "l2.put(\"lat\",52.995143f)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
59 [style = filled, label = "projectedL2 = (Record)locations.get(\"L2\")@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Map<String,?> locations = toStringMap((Map)projected.getField(\"locations\"))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "projected = writeAndRead(\"long_only\",writeSchema,writeSchema.select(\"locations.long\"),record)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "Assert.assertEquals(\"L2 should contain long\",-1.539054f,(float)projectedL2.getField(\"long\"),0.000001)@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "projected = writeAndRead(\"latitude_renamed\",writeSchema,latitiudeRenamed,record)@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertNotNull(\"L1 should not be null\",projectedL1)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "Assert.assertNull(\"L1 should not contain long\",projectedL1.getField(\"long\"))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "Assert.assertEquals(\"L2 should contain latitude\",52.995143f,(float)projectedL2.getField(\"latitude\"),0.000001)@@@59@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
76 [style = filled, label = "testMapOfStructsProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "projected = writeAndRead(\"lat_only\",writeSchema,writeSchema.select(\"locations.lat\"),record)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
115 [style = filled, label = "Assert.assertEquals(\"L1 should contain lat\",53.992811f,(float)projectedL1.getField(\"lat\"),0.000001)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
120 [style = filled, label = "Assert.assertNull(\"L1 should not contain long\",projectedL1.getField(\"long\"))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
123 [style = filled, label = "Assert.assertNull(\"L2 should not contain long\",projectedL2.getField(\"long\"))@@@61@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
109 [style = filled, label = "Assert.assertEquals(\"L2 should contain latitude\",52.995143f,(float)projectedL2.getField(\"latitude\"),0.000001)@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
105 [style = filled, label = "Record l2 = GenericRecord.create(writeSchema.findType(\"locations\").asMapType().valueType().asStructType())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(\"L2 should contain latitude\",52.995143f,(float)projectedL2.get(\"latitude\"),0.000001)@@@59@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "Assert.assertNull(\"L2 should not contain long\",projectedL2.get(\"long\"))@@@61@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
65 [style = filled, label = "Assert.assertEquals(\"L2 should contain lat\",52.995143f,(float)projectedL2.getField(\"lat\"),0.000001)@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
72 [style = filled, label = "Assert.assertEquals(\"L1 should contain long\",-1.542616f,(float)projectedL1.getField(\"long\"),0.000001)@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
92 [style = filled, label = "l2.setField(\"lat\",52.995143f)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
85 [style = filled, label = "Record l1 = GenericRecord.create(writeSchema.findType(\"locations.value\").asStructType())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
66 [style = filled, label = "locations = toStringMap((Map)projected.getField(\"locations\"))@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
99 [style = filled, label = "Assert.assertNull(\"L1 should not contain lat\",projectedL1.getField(\"lat\"))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertNull(\"Should not project locations map\",projected.get(\"locations\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Assert.assertNotNull(\"L1 should not be null\",projectedL1)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "Assert.assertEquals(\"L1 should contain latitude\",53.992811f,(float)projectedL1.getField(\"latitude\"),0.000001)@@@54@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "l2.put(\"long\",-1.539054f)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
127 [style = filled, label = "locations = toStringMap((Map)projected.getField(\"locations\"))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Schema idOnly = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "Map<String,?> locations = toStringMap((Map)projected.getField(\"locations\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "Assert.assertNull(\"L1 should not contain lat\",projectedL1.getField(\"lat\"))@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "Record l2 = new Record(l1.getSchema())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
95 [style = filled, label = "l1.setField(\"long\",-1.542616f)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(\"Should contain L1 and L2\",Sets.newHashSet(\"L1\",\"L2\"),locations.keySet())@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "Assert.assertNull(\"L2 should not contain long\",projectedL2.getField(\"long\"))@@@61@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.getField(\"id\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "Assert.assertNotNull(\"Should project locations map\",locations)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "record.setField(\"id\",34L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
111 [style = filled, label = "Assert.assertNull(\"Should not project locations map\",projected.getField(\"locations\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Map<String,?> locations = toStringMap((Map)projected.get(\"locations\"))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "record.put(\"locations\",ImmutableMap.of(\"L1\",l1,\"L2\",l2))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
63 [style = filled, label = "Assert.assertNull(\"L2 should not contain lat\",projectedL2.getField(\"lat\"))@@@60@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "projectedL1 = (Record)locations.get(\"L1\")@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "Assert.assertEquals(\"L2 should contain lat\",52.995143f,(float)projectedL2.getField(\"lat\"),0.000001)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
74 [style = filled, label = "Assert.assertNull(\"L1 should not contain lat\",projectedL1.getField(\"lat\"))@@@55@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
104 [style = filled, label = "Assert.assertNull(\"L2 should not contain lat\",projectedL2.getField(\"lat\"))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
122 [style = filled, label = "testMapOfStructsProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertNull(\"L1 should not contain long\",projectedL1.get(\"long\"))@@@56@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
70 [style = filled, label = "Record record = GenericRecord.create(writeSchema)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
86 [style = filled, label = "Assert.assertNull(\"L2 should not contain long\",projectedL2.getField(\"long\"))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
110 [style = filled, label = "l2.setField(\"long\",-1.539054f)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testMapOfStructsProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "l1.setField(\"long\",-1.542616f)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
87 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Schema latitiudeRenamed = new Schema(Types.NestedField.optional(5,\"locations\",Types.MapType.ofOptional(6,7,Types.StringType.get(),Types.StructType.of(Types.NestedField.required(1,\"latitude\",Types.FloatType.get())))))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
125 [style = filled, label = "Assert.assertNull(\"L2 should not contain long\",projectedL2.getField(\"long\"))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertNull(\"L1 should not contain lat\",projectedL1.get(\"lat\"))@@@55@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNull(\"L2 should not contain lat\",projectedL2.get(\"lat\"))@@@60@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
52 [style = filled, label = "Assert.assertNotNull(\"L2 should not be null\",projectedL2)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "Assert.assertEquals(\"L1 should contain long\",-1.542616f,(float)projectedL1.getField(\"long\"),0.000001)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
124 [style = filled, label = "Assert.assertNull(\"L1 should not contain long\",projectedL1.getField(\"long\"))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
126 [style = filled, label = "Assert.assertNull(\"L2 should not contain lat\",projectedL2.getField(\"lat\"))@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Assert.assertNull(\"L2 should not contain long\",projectedL2.get(\"long\"))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "record.put(\"id\",34L)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "Assert.assertNotNull(\"L1 should not be null\",projectedL1)@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertEquals(\"Should project locations map\",record.getField(\"locations\"),toStringMap((Map)projected.getField(\"locations\")))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertNotNull(\"Should project locations map\",locations)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertNull(\"L2 should not contain lat\",projectedL2.get(\"lat\"))@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "projectedL1 = (Record)locations.get(\"L1\")@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
90 [style = filled, label = "Assert.assertEquals(\"L1 should contain lat\",53.992811f,(float)projectedL1.getField(\"lat\"),0.000001)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "locations = toStringMap((Map)projected.get(\"locations\"))@@@49@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Record projectedL1 = (Record)locations.get(\"L1\")@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "locations = toStringMap((Map)projected.get(\"locations\"))@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "Record projected = writeAndRead(\"id_only\",writeSchema,idOnly,record)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "Record l2 = GenericRecord.create(l1.struct())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
119 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.getField(\"id\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Record l1 = new Record(fromOption(fromOption(record.getSchema().getField(\"locations\").schema()).getValueType()))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
80 [style = filled, label = "record.setField(\"locations\",ImmutableMap.of(\"L1\",l1,\"L2\",l2))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
100 [style = filled, label = "Record l1 = GenericRecord.create(writeSchema.findType(\"locations\").asMapType().valueType().asStructType())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "Assert.assertNull(\"L1 should not contain long\",projectedL1.getField(\"long\"))@@@56@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
81 [style = filled, label = "l2.setField(\"long\",-1.539054f)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "Assert.assertEquals(\"Should project locations map\",record.get(\"locations\"),toStringMap((Map)projected.get(\"locations\")))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNull(\"L1 should not contain lat\",projectedL1.get(\"lat\"))@@@40@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "Assert.assertNull(\"L1 should not contain long\",projectedL1.get(\"long\"))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
118 [style = filled, label = "locations = toStringMap((Map)projected.getField(\"locations\"))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertNotNull(\"Should project locations map\",locations)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "locations = toStringMap((Map)projected.getField(\"locations\"))@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "l1.put(\"long\",-1.542616f)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->3 [style = bold, label=""];
31->46 [style = solid, label="record"];
3->24 [style = bold, label=""];
93->46 [style = bold, label=""];
53->40 [style = solid, label="writeSchema"];
94->118 [style = bold, label=""];
35->20 [style = solid, label="projectedL1"];
4->62 [style = bold, label=""];
68->66 [style = bold, label=""];
40->15 [style = bold, label=""];
25->53 [style = bold, label=""];
119->111 [style = bold, label=""];
10->17 [style = bold, label=""];
54->92 [style = dashed, label="0"];
101->38 [style = solid, label="record"];
41->103 [style = dashed, label="0"];
57->105 [style = dashed, label="0"];
115->120 [style = bold, label=""];
77->92 [style = bold, label=""];
32->80 [style = dashed, label="0"];
28->52 [style = solid, label="projectedL2"];
7->99 [style = dashed, label="0"];
5->49 [style = bold, label=""];
21->36 [style = bold, label=""];
109->126 [style = bold, label=""];
28->52 [style = bold, label=""];
110->107 [style = bold, label=""];
118->44 [style = solid, label="locations"];
22->47 [style = bold, label=""];
38->94 [style = bold, label=""];
1->88 [style = dashed, label="0"];
56->87 [style = dashed, label="0"];
4->109 [style = bold, label=""];
48->10 [style = bold, label=""];
16->43 [style = bold, label=""];
40->75 [style = bold, label=""];
31->101 [style = dashed, label="0"];
84->91 [style = bold, label=""];
4->8 [style = bold, label=""];
39->66 [style = dashed, label="0"];
118->44 [style = bold, label=""];
53->22 [style = solid, label="writeSchema"];
77->80 [style = solid, label="l2"];
91->14 [style = bold, label=""];
48->90 [style = bold, label=""];
117->14 [style = bold, label=""];
32->11 [style = bold, label=""];
2->111 [style = dashed, label="0"];
39->44 [style = solid, label="locations"];
31->40 [style = solid, label="record"];
111->46 [style = bold, label=""];
47->102 [style = dashed, label="0"];
42->123 [style = dashed, label="0"];
40->119 [style = bold, label=""];
60->23 [style = bold, label=""];
57->54 [style = bold, label=""];
31->22 [style = solid, label="record"];
49->32 [style = solid, label="l1"];
29->83 [style = dashed, label="0"];
31->27 [style = solid, label="record"];
18->23 [style = solid, label="locations"];
116->26 [style = bold, label=""];
127->3 [style = solid, label="locations"];
82->28 [style = bold, label=""];
13->32 [style = bold, label=""];
50->95 [style = dashed, label="0"];
70->46 [style = solid, label="record"];
19->12 [style = bold, label=""];
126->123 [style = bold, label=""];
35->20 [style = bold, label=""];
122->53 [style = bold, label=""];
0->72 [style = dashed, label="0"];
108->110 [style = bold, label=""];
47->61 [style = dashed, label="0"];
31->5 [style = bold, label=""];
17->82 [style = dashed, label="0"];
1->106 [style = dashed, label="0"];
53->101 [style = bold, label=""];
103->125 [style = bold, label=""];
52->65 [style = bold, label=""];
59->4 [style = bold, label=""];
30->84 [style = dashed, label="0"];
12->48 [style = bold, label=""];
57->32 [style = solid, label="l2"];
12->48 [style = solid, label="projectedL1"];
70->38 [style = solid, label="record"];
101->46 [style = solid, label="record"];
1->0 [style = bold, label=""];
9->126 [style = dashed, label="0"];
6->3 [style = solid, label="locations"];
18->112 [style = dashed, label="0"];
14->27 [style = solid, label="latitiudeRenamed"];
43->67 [style = dashed, label="0"];
7->74 [style = dashed, label="0"];
38->68 [style = bold, label=""];
27->56 [style = bold, label=""];
67->22 [style = bold, label=""];
70->27 [style = solid, label="record"];
58->39 [style = bold, label=""];
80->11 [style = bold, label=""];
73->59 [style = bold, label=""];
17->120 [style = dashed, label="0"];
53->38 [style = solid, label="writeSchema"];
34->59 [style = bold, label=""];
45->14 [style = bold, label=""];
81->80 [style = bold, label=""];
36->114 [style = dashed, label="0"];
34->73 [style = dashed, label="0"];
26->55 [style = solid, label="projectedL2"];
63->89 [style = bold, label=""];
43->22 [style = bold, label=""];
22->61 [style = bold, label=""];
90->82 [style = bold, label=""];
76->53 [style = bold, label=""];
31->38 [style = solid, label="record"];
44->37 [style = bold, label=""];
87->79 [style = bold, label=""];
66->44 [style = solid, label="locations"];
88->72 [style = bold, label=""];
125->38 [style = bold, label=""];
99->124 [style = bold, label=""];
70->78 [style = bold, label=""];
53->46 [style = solid, label="writeSchema"];
72->26 [style = bold, label=""];
15->75 [style = dashed, label="0"];
69->74 [style = bold, label=""];
10->115 [style = dashed, label="0"];
105->107 [style = solid, label="l2"];
56->6 [style = bold, label=""];
22->102 [style = bold, label=""];
46->16 [style = bold, label=""];
79->3 [style = solid, label="locations"];
45->91 [style = dashed, label="0"];
9->42 [style = bold, label=""];
18->23 [style = bold, label=""];
127->3 [style = bold, label=""];
5->98 [style = dashed, label="0"];
47->18 [style = bold, label=""];
48->115 [style = bold, label=""];
0->116 [style = dashed, label="0"];
51->125 [style = dashed, label="0"];
79->3 [style = bold, label=""];
13->110 [style = dashed, label="0"];
52->41 [style = bold, label=""];
32->107 [style = dashed, label="0"];
8->62 [style = dashed, label="0"];
41->65 [style = dashed, label="0"];
78->85 [style = bold, label=""];
92->81 [style = bold, label=""];
114->99 [style = bold, label=""];
13->81 [style = dashed, label="0"];
112->23 [style = bold, label=""];
21->114 [style = bold, label=""];
11->40 [style = solid, label="idOnly"];
20->1 [style = bold, label=""];
104->117 [style = bold, label=""];
57->77 [style = dashed, label="0"];
98->100 [style = bold, label=""];
86->38 [style = bold, label=""];
36->69 [style = dashed, label="0"];
20->88 [style = bold, label=""];
55->104 [style = bold, label=""];
121->127 [style = bold, label=""];
95->105 [style = bold, label=""];
26->55 [style = bold, label=""];
8->109 [style = dashed, label="0"];
27->121 [style = bold, label=""];
24->33 [style = bold, label=""];
18->60 [style = dashed, label="0"];
55->30 [style = bold, label=""];
9->63 [style = dashed, label="0"];
58->68 [style = dashed, label="0"];
29->50 [style = bold, label=""];
101->27 [style = solid, label="record"];
50->57 [style = bold, label=""];
23->19 [style = bold, label=""];
46->97 [style = bold, label=""];
2->93 [style = dashed, label="0"];
54->108 [style = dashed, label="0"];
70->40 [style = solid, label="record"];
27->87 [style = bold, label=""];
6->79 [style = dashed, label="0"];
100->107 [style = solid, label="l1"];
64->67 [style = bold, label=""];
14->27 [style = bold, label=""];
56->121 [style = dashed, label="0"];
37->35 [style = bold, label=""];
53->70 [style = solid, label="writeSchema"];
55->84 [style = bold, label=""];
43->113 [style = dashed, label="0"];
85->83 [style = bold, label=""];
49->29 [style = bold, label=""];
39->118 [style = dashed, label="0"];
83->71 [style = bold, label=""];
60->23 [style = solid, label="locations"];
15->2 [style = bold, label=""];
2->46 [style = bold, label=""];
70->22 [style = solid, label="record"];
65->86 [style = bold, label=""];
61->60 [style = bold, label=""];
0->26 [style = bold, label=""];
96->95 [style = bold, label=""];
39->44 [style = bold, label=""];
102->112 [style = bold, label=""];
20->106 [style = bold, label=""];
46->64 [style = bold, label=""];
59->4 [style = solid, label="projectedL2"];
38->58 [style = bold, label=""];
124->59 [style = bold, label=""];
34->124 [style = dashed, label="0"];
16->97 [style = dashed, label="0"];
74->73 [style = bold, label=""];
62->63 [style = bold, label=""];
15->119 [style = dashed, label="0"];
100->96 [style = bold, label=""];
31->70 [style = dashed, label="0"];
5->78 [style = dashed, label="0"];
53->31 [style = solid, label="writeSchema"];
53->31 [style = bold, label=""];
50->71 [style = dashed, label="0"];
33->21 [style = solid, label="projectedL1"];
11->40 [style = bold, label=""];
53->27 [style = solid, label="writeSchema"];
21->69 [style = bold, label=""];
120->28 [style = bold, label=""];
30->104 [style = dashed, label="0"];
6->127 [style = dashed, label="0"];
29->96 [style = dashed, label="0"];
85->80 [style = solid, label="l1"];
101->98 [style = bold, label=""];
58->94 [style = dashed, label="0"];
45->117 [style = dashed, label="0"];
106->116 [style = bold, label=""];
17->28 [style = bold, label=""];
10->90 [style = dashed, label="0"];
7->34 [style = bold, label=""];
51->38 [style = bold, label=""];
71->77 [style = bold, label=""];
97->113 [style = bold, label=""];
54->13 [style = bold, label=""];
105->108 [style = bold, label=""];
36->7 [style = bold, label=""];
66->44 [style = bold, label=""];
41->51 [style = bold, label=""];
53->70 [style = bold, label=""];
101->40 [style = solid, label="record"];
8->9 [style = bold, label=""];
52->103 [style = bold, label=""];
75->93 [style = bold, label=""];
42->89 [style = dashed, label="0"];
107->11 [style = bold, label=""];
101->22 [style = solid, label="record"];
33->21 [style = bold, label=""];
112->23 [style = solid, label="locations"];
51->86 [style = dashed, label="0"];
113->22 [style = bold, label=""];
16->64 [style = dashed, label="0"];
30->45 [style = bold, label=""];
}
