digraph {
14 [style = filled, label = "Assert.assertEquals(expectedNumRows,count)@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ScanQueryLimitRowIterator itr = new ScanQueryLimitRowIterator((null),queryPlus,ImmutableMap.of())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testNonOrderedScan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "ScanResultValue curr = itr.next()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int count = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectedNumRows - count > batchSize@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ScanQueryLimitRowIterator itr = new ScanQueryLimitRowIterator((null),queryPlus,ResponseContext.createEmpty())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "events.size() != batchSize@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ScanQueryLimitRowIterator itr = new ScanQueryLimitRowIterator((null),queryPlus,ImmutableMap.of())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "QueryPlus<ScanResultValue> queryPlus = QueryPlus.wrap(query)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "itr.hasNext()@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expectedNumRows - count >= batchSize@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ScanQuery query = Druids.newScanQueryBuilder().limit(limit).order(ScanQuery.Order.NONE).dataSource(\"some datasource\").batchSize(batchSize).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).resultFormat(resultFormat).context(ImmutableMap.of(ScanQuery.CTX_KEY_OUTERMOST,false)).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.fail(\"Batch size is incorrect\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ScanQuery query = Druids.newScanQueryBuilder().limit(limit).order(ScanQuery.Order.DESCENDING).dataSource(\"some datasource\").batchSize(batchSize).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).resultFormat(resultFormat).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "int expectedNumRows = Math.min(limit,NUM_ELEMENTS)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(expectedNumRows - count,events.size())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Map<String,Object>> events = ScanQueryTestHelper.getEventsListResultFormat(curr)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testNonOrderedScan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testBrokerOrderedScan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "count += events.size()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->3 [style = dotted, label="true"];
0->3 [style = bold, label=""];
4->10 [style = bold, label=""];
17->8 [style = bold, label=""];
1->14 [style = solid, label="count"];
7->5 [style = solid, label="count"];
8->20 [style = solid, label="queryPlus"];
2->0 [style = dotted, label="true"];
8->15 [style = bold, label=""];
11->20 [style = dashed, label="0"];
11->1 [style = bold, label=""];
16->10 [style = bold, label=""];
2->6 [style = bold, label=""];
11->15 [style = dashed, label="0"];
1->18 [style = solid, label="count"];
1->5 [style = solid, label="count"];
6->0 [style = bold, label=""];
13->5 [style = dotted, label="false"];
19->17 [style = bold, label=""];
20->1 [style = bold, label=""];
7->13 [style = solid, label="count"];
9->7 [style = bold, label=""];
17->8 [style = solid, label="query"];
12->13 [style = solid, label="expectedNumRows"];
6->0 [style = solid, label="curr"];
8->11 [style = solid, label="queryPlus"];
3->18 [style = bold, label=""];
18->5 [style = dotted, label="false"];
12->2 [style = bold, label=""];
8->20 [style = bold, label=""];
10->8 [style = bold, label=""];
3->7 [style = bold, label=""];
2->6 [style = dotted, label="true"];
12->5 [style = solid, label="expectedNumRows"];
7->2 [style = bold, label=""];
18->5 [style = bold, label=""];
2->7 [style = dotted, label="true"];
3->18 [style = dotted, label="true"];
2->14 [style = bold, label=""];
18->9 [style = dotted, label="true"];
7->18 [style = solid, label="count"];
1->12 [style = bold, label=""];
1->13 [style = solid, label="count"];
12->18 [style = solid, label="expectedNumRows"];
3->13 [style = bold, label=""];
13->5 [style = bold, label=""];
5->7 [style = bold, label=""];
18->9 [style = bold, label=""];
10->17 [style = dashed, label="0"];
10->8 [style = solid, label="query"];
12->14 [style = solid, label="expectedNumRows"];
13->9 [style = bold, label=""];
13->18 [style = dashed, label="0"];
7->14 [style = solid, label="count"];
8->11 [style = bold, label=""];
3->13 [style = dotted, label="true"];
8->15 [style = solid, label="queryPlus"];
15->1 [style = bold, label=""];
13->9 [style = dotted, label="true"];
}
