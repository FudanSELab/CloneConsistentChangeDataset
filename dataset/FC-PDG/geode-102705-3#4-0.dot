digraph {
26 [style = filled, label = "DataSerializer.writeTreeMap(new TreeMap<Long,String>(),out)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "DataOutputStream out = getDataOutput()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int size = random.nextInt(50)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Object value = String.valueOf(random.nextLong())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertNull(DataSerializer.readTreeMap(in))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(new TreeMap(),DataSerializer.readTreeMap(in))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "map.put(key,value)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TreeMap<Long,String> map2 = DataSerializer.readTreeMap(in)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "DataSerializer.writeIdentityHashMap(map,out)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(map,map2)@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "IdentityHashMap map2 = DataSerializer.readIdentityHashMap(in)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "i < size@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "TreeMap<Long,String> map = new TreeMap<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "DataInput in = getDataInput()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "DataSerializer.writeTreeMap(new TreeMap(),out)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "testTreeMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DataSerializer.writeTreeMap(null,out)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TreeMap map = new TreeMap()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Random random = getRandom()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Long key = random.nextLong()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Object key = new Long(random.nextLong())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(new HashMap(map),new HashMap(map2))@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TreeMap map2 = DataSerializer.readTreeMap(in)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertEquals(new TreeMap<Long,String>(),DataSerializer.readTreeMap(in))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "i++@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "String value = String.valueOf(random.nextLong())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DataSerializer.writeTreeMap(map,out)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "IdentityHashMap map = new IdentityHashMap()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testTreeMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertEquals(null,DataSerializer.readTreeMap(in))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "out.flush()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testIdentityHashMap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11->14 [style = bold, label=""];
17->6 [style = dotted, label="true"];
10->19 [style = bold, label=""];
17->14 [style = dotted, label="true"];
14->20 [style = dashed, label="0"];
8->6 [style = bold, label=""];
15->26 [style = solid, label="out"];
9->10 [style = bold, label=""];
10->22 [style = dashed, label="0"];
30->18 [style = bold, label=""];
3->27 [style = bold, label=""];
21->2 [style = bold, label=""];
12->26 [style = dashed, label="0"];
17->8 [style = dotted, label="true"];
15->12 [style = solid, label="out"];
21->2 [style = solid, label="map2"];
28->29 [style = solid, label="map"];
20->8 [style = solid, label="value"];
11->8 [style = solid, label="key"];
15->13 [style = solid, label="out"];
27->5 [style = bold, label=""];
9->22 [style = solid, label="in"];
10->18 [style = dashed, label="0"];
28->9 [style = solid, label="map"];
25->21 [style = bold, label=""];
17->20 [style = dotted, label="true"];
22->25 [style = bold, label=""];
28->5 [style = bold, label=""];
5->17 [style = solid, label="size"];
16->26 [style = bold, label=""];
0->2 [style = solid, label="map2"];
23->3 [style = bold, label=""];
4->17 [style = solid, label="i"];
26->13 [style = bold, label=""];
24->20 [style = bold, label=""];
7->5 [style = bold, label=""];
20->8 [style = bold, label=""];
3->7 [style = bold, label=""];
29->32 [style = bold, label=""];
9->10 [style = solid, label="in"];
18->9 [style = bold, label=""];
17->15 [style = bold, label=""];
14->8 [style = bold, label=""];
19->25 [style = dashed, label="0"];
31->3 [style = bold, label=""];
15->29 [style = bold, label=""];
13->18 [style = bold, label=""];
9->22 [style = bold, label=""];
6->17 [style = bold, label=""];
9->19 [style = solid, label="in"];
4->17 [style = bold, label=""];
9->0 [style = solid, label="in"];
15->29 [style = solid, label="out"];
1->3 [style = bold, label=""];
27->13 [style = solid, label="map"];
32->30 [style = bold, label=""];
19->0 [style = bold, label=""];
4->6 [style = solid, label="i"];
12->13 [style = bold, label=""];
3->28 [style = bold, label=""];
7->28 [style = dashed, label="0"];
5->4 [style = bold, label=""];
9->21 [style = solid, label="in"];
17->24 [style = dotted, label="true"];
27->2 [style = solid, label="map"];
17->11 [style = dotted, label="true"];
24->8 [style = solid, label="key"];
7->13 [style = solid, label="map"];
0->2 [style = bold, label=""];
19->9 [style = dashed, label="0"];
15->16 [style = solid, label="out"];
15->16 [style = bold, label=""];
14->8 [style = solid, label="value"];
7->2 [style = solid, label="map"];
7->27 [style = dashed, label="0"];
30->18 [style = solid, label="in"];
17->24 [style = bold, label=""];
6->17 [style = solid, label="i"];
0->21 [style = dashed, label="0"];
11->24 [style = dashed, label="0"];
16->29 [style = dashed, label="0"];
9->25 [style = solid, label="in"];
16->12 [style = bold, label=""];
18->9 [style = solid, label="map2"];
17->11 [style = bold, label=""];
}
