digraph {
53 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentCapacity(),expectedCapacityMap)@@@74@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentAssignmentCount(),4)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
68 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@56@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "expectedCapacityMap.put(\"item1\",9)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@47@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentCapacity().equals(expectedCapacityMap))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "Set<AssignableReplica> assignmentSet = generateReplicas(testCache)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expectedCapacityMap.put(\"item1\",9)@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@77@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@69@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Set<String> expectedAssignmentSet2 = new HashSet<>(_partitionNames.subList(2,4))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ResourceControllerDataProvider testCache = setupClusterDataCache()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "testNormalUsage['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Map<String,Set<String>> expectedAssignment = new HashMap<>()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@59@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
101 [style = filled, label = "assignableNode.release(removingReplica)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "expectedCapacityMap.put(\"item2\",18)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectedCapacityMap.put(\"item2\",8)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@54@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
74 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assignableNode.assign(addingReplica)@@@42@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@58@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
93 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@66@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
83 [style = filled, label = "AssignableReplica replica = iter.next()@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),16.0 / 20.0,0.005)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Set<String> expectedTopStateAssignmentSet1 = new HashSet<>(_partitionNames.subList(0,1))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentAssignmentCount(),4)@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
102 [style = filled, label = "testReleaseNoPartition['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "expectedCapacityMap.put(\"item2\",18)@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),16.0 / 20.0,0.005)@@@68@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
94 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@80@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
71 [style = filled, label = "assignmentSet.add(addingReplica)@@@64@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "testNormalUsage['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "expectedAssignment.put(\"Resource1\",expectedAssignmentSet1)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
82 [style = filled, label = "iter.hasNext()@@@37@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@72@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),4)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "AssignableReplica addingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"SLAVE\",2)@@@38@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
80 [style = filled, label = "Set<String> expectedTopStateAssignmentSet2 = new HashSet<>(_partitionNames.subList(2,3))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
95 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
98 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@75@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@73@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
89 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@76@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
76 [style = filled, label = "Iterator<AssignableReplica> iter = assignmentSet.iterator()@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
84 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertTrue(assignableNode.getMaxCapacity().equals(_capacityDataMap))@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "Assert.assertTrue(assignableNode.getDisabledPartitionsMap().equals(_disabledPartitionsMap))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "AssignableReplica removingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"MASTER\",1)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "AssignableReplica removingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2) + \"non-exist\",\"MASTER\",1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentCapacity(),expectedCapacityMap)@@@53@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),16.0 / 20.0,0.005)@@@45@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentAssignmentsMap().equals(expectedAssignment))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "Assert.assertTrue(assignableNode.getDisabledPartitionsMap().equals(_disabledPartitionsMap))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "Assert.assertTrue(assignableNode.getMaxCapacity().equals(_capacityDataMap))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
77 [style = filled, label = "assignableNode.assign(addingReplica)@@@65@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
92 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@52@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),11.0 / 20.0,0.005)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expectedCapacityMap.put(\"item3\",30)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),4)@@@67@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@71@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
78 [style = filled, label = "expectedCapacityMap.put(\"item1\",4)@@@62@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
70 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).add(_partitionNames.get(2))@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).remove(_partitionNames.get(2))@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Map<String,Integer> expectedCapacityMap = new HashMap<>()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "expectedCapacityMap.put(\"item2\",8)@@@63@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
91 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@57@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "AssignableReplica addingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"SLAVE\",2)@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@35@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Set<String> expectedAssignmentSet1 = new HashSet<>(_partitionNames.subList(0,2))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@70@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentAssignmentsMap().equals(expectedAssignment))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assignableNode.release(removingReplica)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),3)@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@48@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@78@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentAssignmentsMap().equals(expectedAssignment))@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "expectedCapacityMap.put(\"item1\",4)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "replica.equals(removingReplica)@@@39@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@49@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
67 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
72 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@55@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
60 [style = filled, label = "iter.remove()@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "AssignableReplica removingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"MASTER\",1)@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).remove(_partitionNames.get(2))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@79@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "AssignableNode assignableNode = new AssignableNode(testCache.getClusterConfig(),testCache.getInstanceConfigMap().get(_testInstanceId),_testInstanceId,Collections.emptyList())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assignableNode.release(removingReplica)@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "expectedTopStateAssignmentSet2.remove(_partitionNames.get(2))@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "AssignableNode assignableNode = new AssignableNode(testCache.getClusterConfig(),testCache.getInstanceConfigMap().get(_testInstanceId),_testInstanceId,assignmentSet)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "expectedAssignment.put(\"Resource2\",expectedAssignmentSet2)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
81 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentCapacity(),expectedCapacityMap)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58->28 [style = bold, label=""];
28->96 [style = bold, label=""];
99->70 [style = bold, label=""];
56->64 [style = bold, label=""];
32->12 [style = bold, label=""];
87->94 [style = bold, label=""];
35->97 [style = bold, label=""];
57->79 [style = solid, label="expectedTopStateAssignmentSet1"];
27->28 [style = bold, label=""];
29->0 [style = bold, label=""];
68->91 [style = bold, label=""];
69->15 [style = bold, label=""];
59->71 [style = bold, label=""];
5->15 [style = solid, label="expectedCapacityMap"];
3->16 [style = bold, label=""];
45->76 [style = bold, label=""];
47->33 [style = bold, label=""];
22->52 [style = dashed, label="0"];
86->60 [style = bold, label=""];
12->7 [style = bold, label=""];
30->36 [style = solid, label="expectedAssignmentSet2"];
57->80 [style = bold, label=""];
5->18 [style = solid, label="expectedCapacityMap"];
19->44 [style = bold, label=""];
17->63 [style = bold, label=""];
3->9 [style = solid, label="addingReplica"];
51->88 [style = bold, label=""];
65->50 [style = bold, label=""];
4->84 [style = solid, label="expectedAssignment"];
47->69 [style = dashed, label="0"];
25->19 [style = bold, label=""];
16->43 [style = bold, label=""];
5->81 [style = solid, label="expectedCapacityMap"];
77->93 [style = bold, label=""];
4->11 [style = solid, label="expectedAssignment"];
4->93 [style = solid, label="expectedAssignment"];
45->17 [style = bold, label=""];
37->34 [style = solid, label="removingReplica"];
42->97 [style = dashed, label="0"];
62->2 [style = bold, label=""];
9->24 [style = bold, label=""];
14->20 [style = bold, label=""];
40->37 [style = bold, label=""];
83->86 [style = bold, label=""];
8->34 [style = bold, label=""];
23->49 [style = bold, label=""];
82->83 [style = dotted, label="true"];
18->78 [style = bold, label=""];
48->2 [style = bold, label=""];
57->91 [style = solid, label="expectedTopStateAssignmentSet1"];
80->51 [style = solid, label="expectedTopStateAssignmentSet2"];
47->86 [style = solid, label="removingReplica"];
53->98 [style = bold, label=""];
86->60 [style = dotted, label="true"];
18->53 [style = dashed, label="0"];
5->75 [style = solid, label="expectedCapacityMap"];
38->65 [style = solid, label="assignmentSet"];
10->26 [style = bold, label=""];
41->6 [style = bold, label=""];
13->72 [style = solid, label="expectedAssignmentSet1"];
63->69 [style = bold, label=""];
89->66 [style = bold, label=""];
22->71 [style = solid, label="addingReplica"];
42->40 [style = bold, label=""];
50->67 [style = bold, label=""];
43->46 [style = bold, label=""];
38->57 [style = bold, label=""];
96->0 [style = bold, label=""];
21->45 [style = bold, label=""];
5->1 [style = bold, label=""];
92->75 [style = bold, label=""];
61->55 [style = bold, label=""];
20->8 [style = bold, label=""];
22->18 [style = bold, label=""];
80->70 [style = solid, label="expectedTopStateAssignmentSet2"];
24->93 [style = dashed, label="0"];
39->35 [style = bold, label=""];
44->32 [style = bold, label=""];
84->58 [style = bold, label=""];
47->17 [style = solid, label="removingReplica"];
90->17 [style = bold, label=""];
6->84 [style = dashed, label="0"];
13->31 [style = solid, label="expectedAssignmentSet1"];
38->98 [style = solid, label="assignmentSet"];
4->63 [style = solid, label="expectedAssignment"];
25->73 [style = dashed, label="0"];
76->82 [style = bold, label=""];
70->95 [style = bold, label=""];
38->41 [style = solid, label="assignmentSet"];
44->56 [style = dashed, label="0"];
0->39 [style = bold, label=""];
15->75 [style = dashed, label="0"];
28->29 [style = bold, label=""];
2->38 [style = solid, label="testCache"];
82->86 [style = dotted, label="true"];
46->9 [style = bold, label=""];
35->42 [style = bold, label=""];
60->82 [style = bold, label=""];
78->59 [style = bold, label=""];
31->36 [style = bold, label=""];
100->103 [style = bold, label=""];
85->56 [style = bold, label=""];
97->81 [style = bold, label=""];
38->54 [style = solid, label="assignmentSet"];
15->3 [style = bold, label=""];
79->87 [style = bold, label=""];
30->66 [style = solid, label="expectedAssignmentSet2"];
22->77 [style = solid, label="addingReplica"];
17->23 [style = bold, label=""];
91->51 [style = bold, label=""];
82->83 [style = bold, label=""];
103->101 [style = solid, label="removingReplica"];
4->31 [style = bold, label=""];
80->87 [style = solid, label="expectedTopStateAssignmentSet2"];
26->41 [style = bold, label=""];
6->27 [style = bold, label=""];
7->22 [style = bold, label=""];
4->6 [style = solid, label="expectedAssignment"];
86->82 [style = bold, label=""];
74->16 [style = bold, label=""];
81->65 [style = bold, label=""];
27->58 [style = dashed, label="0"];
24->25 [style = bold, label=""];
30->68 [style = solid, label="expectedAssignmentSet2"];
11->47 [style = bold, label=""];
49->15 [style = bold, label=""];
49->92 [style = dashed, label="0"];
64->61 [style = bold, label=""];
36->5 [style = bold, label=""];
98->89 [style = bold, label=""];
55->52 [style = bold, label=""];
75->54 [style = bold, label=""];
13->89 [style = solid, label="expectedAssignmentSet1"];
21->74 [style = dashed, label="0"];
15->74 [style = bold, label=""];
102->2 [style = bold, label=""];
46->92 [style = bold, label=""];
13->50 [style = solid, label="expectedAssignmentSet1"];
2->100 [style = bold, label=""];
80->13 [style = bold, label=""];
52->53 [style = bold, label=""];
4->24 [style = solid, label="expectedAssignment"];
40->81 [style = dashed, label="0"];
57->99 [style = solid, label="expectedTopStateAssignmentSet1"];
5->53 [style = solid, label="expectedCapacityMap"];
13->30 [style = bold, label=""];
67->99 [style = bold, label=""];
11->63 [style = dashed, label="0"];
34->11 [style = bold, label=""];
29->96 [style = dashed, label="0"];
82->90 [style = bold, label=""];
2->38 [style = bold, label=""];
37->14 [style = bold, label=""];
103->101 [style = bold, label=""];
30->67 [style = solid, label="expectedAssignmentSet2"];
88->22 [style = bold, label=""];
71->77 [style = bold, label=""];
5->40 [style = solid, label="expectedCapacityMap"];
30->4 [style = bold, label=""];
73->85 [style = bold, label=""];
54->72 [style = bold, label=""];
95->47 [style = bold, label=""];
33->21 [style = bold, label=""];
38->13 [style = bold, label=""];
1->10 [style = bold, label=""];
41->84 [style = bold, label=""];
72->68 [style = bold, label=""];
93->73 [style = bold, label=""];
66->79 [style = bold, label=""];
}
