digraph {
31 [style = filled, label = "expect(RocksDBMetrics.memtableBytesFlushedSensor(streamsMetrics,metricsContext)).andStubReturn(memtableBytesFlushedSensor)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "RocksDBMetrics.addNumEntriesActiveMemTableMetric(eq(streamsMetrics),eq(metricsContext),anyObject())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "expect(RocksDBMetrics.writeStallDurationSensor(eq(streamsMetrics),eq(metricsContext))).andReturn(writeStallDurationSensor)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expect(RocksDBMetrics.bytesWrittenDuringCompactionSensor(eq(streamsMetrics),eq(metricsContext))).andReturn(bytesWrittenDuringCompactionSensor)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final RocksDBMetricContext metricsContext = new RocksDBMetricContext(THREAD_ID,TASK_ID1.toString(),METRICS_SCOPE,STORE_NAME)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expect(RocksDBMetrics.bytesWrittenToDatabaseSensor(streamsMetrics,metricsContext)).andStubReturn(bytesWrittenToDatabaseSensor)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "expect(RocksDBMetrics.memtableBytesFlushedSensor(eq(streamsMetrics),eq(metricsContext))).andReturn(memtableBytesFlushedSensor)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expect(RocksDBMetrics.numberOfOpenFilesSensor(eq(streamsMetrics),eq(metricsContext))).andReturn(numberOfOpenFilesSensor)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expect(RocksDBMetrics.blockCacheDataHitRatioSensor(eq(streamsMetrics),eq(metricsContext))).andReturn(blockCacheDataHitRatioSensor)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expect(RocksDBMetrics.blockCacheIndexHitRatioSensor(streamsMetrics,metricsContext)).andStubReturn(blockCacheIndexHitRatioSensor)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "expect(RocksDBMetrics.bytesWrittenDuringCompactionSensor(streamsMetrics,metricsContext)).andStubReturn(bytesWrittenDuringCompactionSensor)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "expect(RocksDBMetrics.blockCacheFilterHitRatioSensor(streamsMetrics,metricsContext)).andStubReturn(blockCacheFilterHitRatioSensor)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "expect(RocksDBMetrics.numberOfFileErrorsSensor(streamsMetrics,metricsContext)).andStubReturn(numberOfFileErrorsSensor)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "expect(RocksDBMetrics.memtableHitRatioSensor(streamsMetrics,metricsContext)).andStubReturn(memtableHitRatioSensor)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "expect(RocksDBMetrics.bytesReadDuringCompactionSensor(eq(streamsMetrics),eq(metricsContext))).andReturn(bytesReadDuringCompactionSensor)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expect(RocksDBMetrics.blockCacheIndexHitRatioSensor(eq(streamsMetrics),eq(metricsContext))).andReturn(blockCacheIndexHitRatioSensor)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "expect(RocksDBMetrics.writeStallDurationSensor(streamsMetrics,metricsContext)).andStubReturn(writeStallDurationSensor)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "expect(RocksDBMetrics.bytesReadFromDatabaseSensor(streamsMetrics,metricsContext)).andStubReturn(bytesReadFromDatabaseSensor)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final RocksDBMetricContext metricsContext = new RocksDBMetricContext(TASK_ID1.toString(),METRICS_SCOPE,STORE_NAME)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "setUpMetricsMock['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "replay()@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expect(RocksDBMetrics.numberOfOpenFilesSensor(streamsMetrics,metricsContext)).andStubReturn(numberOfOpenFilesSensor)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "expect(RocksDBMetrics.numberOfFileErrorsSensor(eq(streamsMetrics),eq(metricsContext))).andReturn(numberOfFileErrorsSensor)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "setUpMetricsMock['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "expect(RocksDBMetrics.blockCacheDataHitRatioSensor(streamsMetrics,metricsContext)).andStubReturn(blockCacheDataHitRatioSensor)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "expect(RocksDBMetrics.bytesReadDuringCompactionSensor(streamsMetrics,metricsContext)).andStubReturn(bytesReadDuringCompactionSensor)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expect(RocksDBMetrics.bytesWrittenToDatabaseSensor(eq(streamsMetrics),eq(metricsContext))).andReturn(bytesWrittenToDatabaseSensor)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expect(RocksDBMetrics.bytesReadFromDatabaseSensor(eq(streamsMetrics),eq(metricsContext))).andReturn(bytesReadFromDatabaseSensor)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "setUpMetricsStubMock['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "mockStatic()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expect(RocksDBMetrics.blockCacheFilterHitRatioSensor(eq(streamsMetrics),eq(metricsContext))).andReturn(blockCacheFilterHitRatioSensor)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expect(RocksDBMetrics.memtableHitRatioSensor(eq(streamsMetrics),eq(metricsContext))).andReturn(memtableHitRatioSensor)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
11->16 [style = bold, label=""];
31->23 [style = bold, label=""];
7->23 [style = dashed, label="0"];
5->9 [style = bold, label=""];
4->6 [style = bold, label=""];
1->31 [style = dashed, label="0"];
28->31 [style = bold, label=""];
18->11 [style = bold, label=""];
12->11 [style = bold, label=""];
14->20 [style = dashed, label="0"];
22->28 [style = bold, label=""];
4->22 [style = dashed, label="0"];
9->10 [style = bold, label=""];
10->29 [style = dashed, label="0"];
3->22 [style = bold, label=""];
20->25 [style = bold, label=""];
3->4 [style = bold, label=""];
1->7 [style = bold, label=""];
30->29 [style = bold, label=""];
13->26 [style = dashed, label="0"];
16->17 [style = solid, label="metricsContext"];
29->26 [style = bold, label=""];
24->20 [style = bold, label=""];
8->0 [style = bold, label=""];
6->1 [style = bold, label=""];
6->28 [style = dashed, label="0"];
26->27 [style = bold, label=""];
7->5 [style = bold, label=""];
0->14 [style = bold, label=""];
10->13 [style = bold, label=""];
21->11 [style = bold, label=""];
11->3 [style = bold, label=""];
23->19 [style = bold, label=""];
2->15 [style = bold, label=""];
17->15 [style = bold, label=""];
2->25 [style = dashed, label="0"];
25->15 [style = bold, label=""];
0->24 [style = dashed, label="0"];
8->27 [style = dashed, label="0"];
27->24 [style = bold, label=""];
14->2 [style = bold, label=""];
13->8 [style = bold, label=""];
16->4 [style = bold, label=""];
5->19 [style = dashed, label="0"];
9->30 [style = dashed, label="0"];
3->16 [style = dashed, label="0"];
19->30 [style = bold, label=""];
}
