digraph {
28 [style = filled, label = "sn.updateLoad(l2,new ServerLoad(100,1,1,1))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "ServerLocation l2 = new ServerLocation(\"localhost\",2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNull(sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11a251),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,-1))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ServerLocation l1 = new ServerLocation(\"localhost\",1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11a229),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "sn.updateLoad(l2,\"\",new ServerLoad(100,1,1,1))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "sn.removeServer(l1,\"\")@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "sn.addServer(l2,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11a1cc,new ServerLoad(1,1,1,1))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "sn.addServer(l1,\"\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11a076,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "testUpdateLoad['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "sn.updateLoad(l1,\"\",new ServerLoad(200,1,1,1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11a23d),sn.getServersForQueue(\"c\",Collections.EMPTY_SET,-1))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "sn.addServer(l1,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11a1bc,new ServerLoad(1,1,1,1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "LocatorLoadSnapshot sn = new LocatorLoadSnapshot()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "sn.updateLoad(l1,new ServerLoad(10,1,1,1))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertNotNull(sn.getServerForConnection(null,Collections.EMPTY_SET))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "sn.addServer(l2,\"\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11a088,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11a266),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11a2d1),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@42@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "sn.updateLoad(l1,\"\",new ServerLoad(10,1,1,1))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11a27b),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "sn.addServer(l2,\"\",new String((((,new ServerLoad(100,.2f,1,.2f),LOAD_POLL_INTERVAL)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "sn.removeServer(l1)@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testGroups['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11a2be),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "sn.addServer(l1,\"\",new String((((,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testGroups['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1->5 [style = bold, label=""];
17->36 [style = solid, label="l1"];
8->10 [style = bold, label=""];
22->25 [style = bold, label=""];
13->15 [style = solid, label="l2"];
2->20 [style = bold, label=""];
27->1 [style = bold, label=""];
16->11 [style = bold, label=""];
17->16 [style = solid, label="l1"];
13->31 [style = solid, label="l2"];
15->28 [style = dashed, label="0"];
13->4 [style = solid, label="l2"];
20->9 [style = bold, label=""];
38->10 [style = bold, label=""];
23->25 [style = dashed, label="0"];
13->7 [style = solid, label="l2"];
24->0 [style = bold, label=""];
1->31 [style = dashed, label="0"];
9->4 [style = bold, label=""];
0->2 [style = bold, label=""];
30->27 [style = bold, label=""];
17->6 [style = solid, label="l1"];
13->28 [style = solid, label="l2"];
4->26 [style = bold, label=""];
17->35 [style = solid, label="l1"];
17->0 [style = solid, label="l1"];
13->2 [style = solid, label="l2"];
14->28 [style = bold, label=""];
10->17 [style = bold, label=""];
17->34 [style = solid, label="l1"];
13->30 [style = bold, label=""];
25->14 [style = bold, label=""];
17->30 [style = solid, label="l1"];
11->19 [style = bold, label=""];
13->20 [style = solid, label="l2"];
12->1 [style = bold, label=""];
36->33 [style = bold, label=""];
22->23 [style = bold, label=""];
13->12 [style = solid, label="l2"];
21->18 [style = bold, label=""];
26->11 [style = bold, label=""];
13->14 [style = solid, label="l2"];
6->35 [style = dashed, label="0"];
23->14 [style = bold, label=""];
17->23 [style = solid, label="l1"];
16->26 [style = dashed, label="0"];
13->9 [style = solid, label="l2"];
13->27 [style = solid, label="l2"];
17->5 [style = solid, label="l1"];
35->37 [style = bold, label=""];
37->34 [style = bold, label=""];
15->24 [style = bold, label=""];
17->26 [style = solid, label="l1"];
17->25 [style = solid, label="l1"];
17->32 [style = solid, label="l1"];
13->33 [style = solid, label="l2"];
12->27 [style = dashed, label="0"];
17->24 [style = solid, label="l1"];
13->11 [style = solid, label="l2"];
28->24 [style = bold, label=""];
32->36 [style = bold, label=""];
29->10 [style = bold, label=""];
3->21 [style = bold, label=""];
34->32 [style = bold, label=""];
14->15 [style = bold, label=""];
17->13 [style = bold, label=""];
33->31 [style = bold, label=""];
17->9 [style = solid, label="l1"];
13->22 [style = solid, label="l2"];
6->30 [style = dashed, label="0"];
13->6 [style = bold, label=""];
18->7 [style = bold, label=""];
17->20 [style = solid, label="l1"];
13->37 [style = solid, label="l2"];
5->22 [style = bold, label=""];
13->35 [style = bold, label=""];
19->3 [style = bold, label=""];
17->4 [style = solid, label="l1"];
4->16 [style = bold, label=""];
13->21 [style = solid, label="l2"];
13->19 [style = solid, label="l2"];
6->12 [style = bold, label=""];
}
