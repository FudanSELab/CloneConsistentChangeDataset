digraph {
16 [style = filled, label = "check(\"HEX\",x.getBinaryFormat())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "basicReaderParser['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "check(\"true\",x.isUnbuffered())@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "basicInputStreamParser['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "JsonParserSession x = JsonParser.create().applyAnnotations(al,sr).build().createSession()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "AnnotationList al = a.getAnnotationList()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "check(\"1\",x.getDebugOutputLines())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "check(\"true\",x.isTrimStrings())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<AnnotationWork> al = a.getAnnotationList().getWork(sr)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "MsgPackParserSession x = MsgPackParser.create().applyAnnotations(al,sr).build().createSession()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "check(\"AA\",x.getListener())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "basicReaderParser['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "JsonParserSession x = JsonParser.create().apply(al).build().createSession()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "check(\"US-ASCII\",x.getStreamCharset())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "check(\"US-ASCII\",x.getFileCharset())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "check(\"true\",x.isAutoCloseStreams())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "check(\"true\",x.isStrict())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->16 [style = bold, label=""];
16->10 [style = bold, label=""];
6->11 [style = dashed, label="0"];
3->6 [style = bold, label=""];
11->12 [style = bold, label=""];
7->8 [style = bold, label=""];
12->0 [style = bold, label=""];
1->7 [style = bold, label=""];
13->11 [style = bold, label=""];
6->15 [style = bold, label=""];
6->2 [style = bold, label=""];
2->15 [style = dashed, label="0"];
2->12 [style = dashed, label="0"];
0->10 [style = bold, label=""];
2->0 [style = bold, label=""];
10->5 [style = bold, label=""];
15->0 [style = bold, label=""];
5->4 [style = bold, label=""];
8->9 [style = bold, label=""];
4->1 [style = bold, label=""];
10->1 [style = bold, label=""];
14->6 [style = bold, label=""];
}
