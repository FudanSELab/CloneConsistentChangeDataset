digraph {
19 [style = filled, label = "Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement,schema).createGenerateKeyContext(Collections.singletonList(\"id\"),valueExpressions,Collections.singletonList(1))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(generatedValuesIterator.next(),is((Comparable)\"value\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(new GeneratedKeyContextEngine(insertStatement,schema).createGenerateKeyContext(Collections.emptyList(),Collections.emptyList(),Collections.singletonList(1)).isPresent())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "final InsertStatement insertStatement@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<List<ExpressionSegment>> valueExpressions = insertStatement.getValues().stream().map(null).collect(Collectors.toList())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final InsertStatement insertStatement@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "insertStatement.setTable(new SimpleTableSegment(0,0,new IdentifierValue(\"tbl\")))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(actual.get().getGeneratedValues().size(),is(3))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "List<ExpressionSegment> expressionSegments = Collections.singletonList(new LiteralExpressionSegment(0,0,1))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(generatedValuesIterator.next(),is((Comparable)1))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertCreateGenerateKeyContextWhenFind['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "insertStatement.getValues().add(new InsertValuesSegment(0,0,Collections.singletonList(new LiteralExpressionSegment(1,2,\"value\"))))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertCreateGenerateKeyContextWhenFind['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertTrue(actual.isPresent())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(actual.isPresent())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(actual.get().getGeneratedValues().size(),is(1))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "insertStatement.getValues().add(new InsertValuesSegment(0,0,expressionSegments))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Iterator<Comparable<?>> generatedValuesIterator = actual.get().getGeneratedValues().iterator()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "insertStatement.getValues().add(new InsertValuesSegment(0,0,Collections.singletonList(new LiteralExpressionSegment(1,2,100))))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement,schemaMetaData).createGenerateKeyContext(Collections.singletonList(\"id\"),Collections.singletonList(expressionSegments),Collections.singletonList(1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "insertStatement.getValues().add(new InsertValuesSegment(0,0,Collections.singletonList(new ParameterMarkerExpressionSegment(1,2,0))))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "insertStatement.getValues().add(new InsertValuesSegment(0,0,Collections.singletonList(new CommonExpressionSegment(1,2,\"ignored value\"))))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(new GeneratedKeyContextEngine(insertStatement,schemaMetaData).createGenerateKeyContext(Collections.emptyList(),Collections.emptyList(),Collections.singletonList(1)).isPresent())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "insertStatement.setInsertColumns(new InsertColumnsSegment(0,0,Collections.singletonList(new ColumnSegment(0,0,new IdentifierValue(\"id\")))))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(generatedValuesIterator.next(),is((Comparable)100))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement,schemaMetaData).createGenerateKeyContext(Collections.singletonList(\"id\"),valueExpressions,Collections.singletonList(1))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->3 [style = bold, label=""];
16->0 [style = bold, label=""];
2->26 [style = bold, label=""];
16->18 [style = bold, label=""];
12->23 [style = dashed, label="0"];
17->1 [style = bold, label=""];
10->14 [style = bold, label=""];
7->10 [style = bold, label=""];
17->4 [style = dotted, label="true"];
26->25 [style = bold, label=""];
5->11 [style = solid, label="valueExpressions"];
26->25 [style = solid, label="expressionSegments"];
3->15 [style = bold, label=""];
15->16 [style = bold, label=""];
12->6 [style = bold, label=""];
4->21 [style = dashed, label="0"];
22->23 [style = bold, label=""];
13->26 [style = dashed, label="0"];
19->8 [style = bold, label=""];
20->22 [style = bold, label=""];
2->13 [style = bold, label=""];
5->19 [style = bold, label=""];
25->20 [style = bold, label=""];
26->20 [style = solid, label="expressionSegments"];
11->19 [style = dashed, label="0"];
13->7 [style = bold, label=""];
7->25 [style = dashed, label="0"];
9->4 [style = dotted, label="true"];
0->18 [style = dashed, label="0"];
11->8 [style = bold, label=""];
10->20 [style = dashed, label="0"];
1->2 [style = bold, label=""];
5->11 [style = bold, label=""];
24->1 [style = bold, label=""];
9->1 [style = bold, label=""];
5->19 [style = solid, label="valueExpressions"];
24->21 [style = dotted, label="true"];
8->12 [style = bold, label=""];
14->5 [style = bold, label=""];
}
