digraph {
2 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build()),context),\"limited\")@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "QueryRunner<ResultRow> mergeRunner = factory.getToolchest().mergeResults(runner)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "GroupByQuery query = builder.build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testGroupByWithOrderLimit3['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "ExpressionVirtualColumn expressionVirtualColumn = new ExpressionVirtualColumn(\"expr\",\"index / 2 + indexMin\",ValueType.FLOAT,TestExprMacroTable.INSTANCE)@@@35@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query)),\"no-limit\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "builder.setLimit(Integer.MAX_VALUE).setVirtualColumns(expressionVirtualColumn).setAggregatorSpecs(aggregatorSpecs2)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "List<Row> expectedResults = GroupByQueryRunnerTestHelper.createExpectedRows(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a6c2,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a6c9,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a6d0,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a6d7,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a6de,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a6e5,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a6ec,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a6f3,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a6fa,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a701)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build()),context),\"limited\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build()),context),\"limited\")@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(builder.build())),\"no-limit\")@@@38@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "ResponseContext context = ResponseContext.createEmpty()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query),context),\"no-limit\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "builder.setLimit(Integer.MAX_VALUE).setAggregatorSpecs(aggregatorSpecs)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ResponseContext context = ResponseContext.createEmpty()@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new DoubleSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(\"idx\",OrderByColumnSpec.Direction.DESCENDING).addOrderByColumn(\"alias\",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testGroupByOrderLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build()),context),\"limited\")@@@40@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"travel\",\"rows\",2L,\"idx\",243L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"technology\",\"rows\",2L,\"idx\",177L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news\",\"rows\",2L,\"idx\",221L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health\",\"rows\",2L,\"idx\",216L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"entertainment\",\"rows\",2L,\"idx\",319L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"automotive\",\"rows\",2L,\"idx\",269L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(\"rows\").addOrderByColumn(\"alias\",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "cannotVectorize()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"alias\",\"travel\",\"rows\",2L,\"idx\",243L),makeRow(query,\"2011-04-01\",\"alias\",\"technology\",\"rows\",2L,\"idx\",177L),makeRow(query,\"2011-04-01\",\"alias\",\"news\",\"rows\",2L,\"idx\",221L),makeRow(query,\"2011-04-01\",\"alias\",\"health\",\"rows\",2L,\"idx\",216L),makeRow(query,\"2011-04-01\",\"alias\",\"entertainment\",\"rows\",2L,\"idx\",319L),makeRow(query,\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),makeRow(query,\"2011-04-01\",\"alias\",\"automotive\",\"rows\",2L,\"idx\",269L),makeRow(query,\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L),makeRow(query,\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "expectedResults = GroupByQueryRunnerTestHelper.createExpectedRows(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a412,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a419,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a420,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a427,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a42e,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a435,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a43c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a443,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a44a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a451)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(builder.build()),context),\"no-limit\")@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "List<AggregatorFactory> aggregatorSpecs2 = Arrays.asList(QueryRunnerTestHelper.rowsCount,new DoubleSumAggregatorFactory(\"idx\",\"expr\"))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "List<AggregatorFactory> aggregatorSpecs = Arrays.asList(QueryRunnerTestHelper.rowsCount,new DoubleSumAggregatorFactory(\"idx\",null,\"index / 2 + indexMin\",TestExprMacroTable.INSTANCE))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(builder.build()),context),\"no-limit\")@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "final GroupByQuery query = builder.build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testGroupByOrderLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "QueryRunner<Row> mergeRunner = factory.getToolchest().mergeResults(runner)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "QueryRunner<Row> mergeRunner = factory.getToolchest().mergeResults(runner)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query),context),\"no-limit\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(builder.build())),\"no-limit\")@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "expectedResults = makeRows(builder.build(),new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a5c1,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a5c8,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a5cf,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a5d6,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a5dd,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a5e4,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a5eb,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a5f2,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a5f9,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3a600)@@@12@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13->19 [style = solid, label="expectedResults"];
2->23 [style = dashed, label="0"];
13->25 [style = bold, label=""];
5->15 [style = solid, label="query"];
5->20 [style = solid, label="query"];
15->10 [style = bold, label=""];
4->14 [style = bold, label=""];
35->29 [style = bold, label=""];
34->36 [style = solid, label="context"];
30->33 [style = bold, label=""];
5->9 [style = bold, label=""];
18->2 [style = solid, label="context"];
25->23 [style = bold, label=""];
9->10 [style = solid, label="expectedResults"];
18->10 [style = solid, label="context"];
5->27 [style = solid, label="query"];
2->3 [style = bold, label=""];
11->6 [style = bold, label=""];
18->15 [style = solid, label="context"];
11->2 [style = solid, label="expectedResults"];
11->17 [style = solid, label="expectedResults"];
13->23 [style = solid, label="expectedResults"];
34->33 [style = solid, label="context"];
18->17 [style = solid, label="context"];
15->21 [style = dashed, label="0"];
11->16 [style = solid, label="expectedResults"];
12->16 [style = bold, label=""];
28->1 [style = bold, label=""];
16->17 [style = bold, label=""];
8->12 [style = solid, label="aggregatorSpecs2"];
9->15 [style = solid, label="expectedResults"];
31->33 [style = solid, label="expectedResults"];
18->16 [style = solid, label="context"];
13->11 [style = bold, label=""];
1->13 [style = bold, label=""];
34->30 [style = bold, label=""];
27->20 [style = solid, label="expectedResults"];
13->12 [style = solid, label="expectedResults"];
21->28 [style = bold, label=""];
31->34 [style = bold, label=""];
24->14 [style = bold, label=""];
18->6 [style = solid, label="context"];
6->2 [style = bold, label=""];
20->21 [style = bold, label=""];
1->13 [style = solid, label="aggregatorSpecs"];
22->3 [style = bold, label=""];
16->12 [style = dashed, label="0"];
31->36 [style = solid, label="expectedResults"];
11->13 [style = dashed, label="0"];
23->22 [style = bold, label=""];
9->18 [style = bold, label=""];
14->0 [style = bold, label=""];
6->25 [style = dashed, label="0"];
17->19 [style = dashed, label="0"];
3->8 [style = bold, label=""];
29->32 [style = bold, label=""];
33->36 [style = bold, label=""];
28->1 [style = solid, label="aggregatorSpecs"];
11->6 [style = solid, label="expectedResults"];
5->31 [style = dashed, label="0"];
27->21 [style = solid, label="expectedResults"];
7->15 [style = bold, label=""];
5->27 [style = bold, label=""];
18->7 [style = bold, label=""];
12->19 [style = bold, label=""];
10->1 [style = bold, label=""];
32->33 [style = solid, label="query"];
14->29 [style = dashed, label="0"];
32->31 [style = bold, label=""];
8->12 [style = bold, label=""];
13->25 [style = solid, label="expectedResults"];
26->20 [style = bold, label=""];
3->8 [style = solid, label="aggregatorSpecs2"];
0->5 [style = bold, label=""];
27->26 [style = bold, label=""];
}
