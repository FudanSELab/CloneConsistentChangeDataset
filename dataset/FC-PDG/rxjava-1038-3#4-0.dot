digraph {
13 [style = filled, label = "nbpRangeMapJust = nbpRange.flatMap(new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer v){return Observable.just(v)}})@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "setup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "setup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "singleJustMapJust = singleJust.flatMap(new Function<Integer,Single<Integer>>(){@Override public Single<Integer> apply(Integer v){return Single.just(v)}})@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "bpRangeMapJust = bpRange.flatMap(new Function<Integer,Publisher<Integer>>(){@Override public Publisher<Integer> apply(Integer v){return Flowable.just(v)}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "nbpRangeMapRange = nbpRange.flatMap(new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer v){return Observable.range(v,2)}})@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "nbpRange = Observable.range(1,times)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "bpRange = Flowable.range(1,times)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "observable = Observable.fromArray(array).flatMap(new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer v){return Observable.just(v)}})@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "setup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "singleJust = Single.just(1)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "flowable = Flowable.fromArray(array).flatMap(new Function<Integer,Publisher<Integer>>(){@Override public Publisher<Integer> apply(Integer v){return Flowable.just(v)}})@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Integer(( array = new Integer((((@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "bpRangeMapRange = bpRange.flatMap(new Function<Integer,Publisher<Integer>>(){@Override public Publisher<Integer> apply(Integer v){return Flowable.range(v,2)}})@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->9 [style = bold, label=""];
11->10 [style = bold, label=""];
13->8 [style = bold, label=""];
6->7 [style = bold, label=""];
0->3 [style = bold, label=""];
8->6 [style = bold, label=""];
5->11 [style = bold, label=""];
2->1 [style = bold, label=""];
3->13 [style = dashed, label="0"];
4->1 [style = bold, label=""];
12->13 [style = bold, label=""];
1->0 [style = bold, label=""];
10->12 [style = bold, label=""];
}
