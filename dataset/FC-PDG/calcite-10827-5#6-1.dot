digraph {
14 [style = filled, label = "tester.checkType(\"bit_or(CAST(x'02' AS BINARY(1)))\",\"BINARY(1)\")@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "tester.checkAgg(\"bit_or(x)\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10d52c8,\"02\",0)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "tester.checkType(\"bit_xor(distinct CAST(2 AS BIGINT))\",\"BIGINT\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "tester.checkType(\"bit_xor(CAST(2 AS SMALLINT))\",\"SMALLINT\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "tester.checkAgg(\"bit_or(x)\",values,3,0)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "tester.checkFails(\"bit_xor(^*^)\",\"Unknown identifier '\*'\",false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "tester.checkType(\"bit_or(CAST(2 AS SMALLINT))\",\"SMALLINT\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "tester.checkFails(\"^bit_xor(1, 2)^\",\"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",false)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "tester.checkType(\"bit_xor(1)\",\"INTEGER\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final String(( values = {\"1\",\"2\",\"2\"}@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "testBitXorFunc['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "tester.checkType(\"bit_or(1)\",\"INTEGER\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "tester.checkType(\"bit_xor(CAST(2 AS TINYINT))\",\"TINYINT\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "tester.checkFails(\"^bit_or(1.2)^\",\"Cannot apply 'BIT_OR' to arguments of type 'BIT_OR\(<DECIMAL\(2, 1\)>\)'\. Supported form\(s\): 'BIT_OR\(<INTEGER>\)'\",false)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final String(( values = {\"1\",\"2\",\"1\"}@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testBitOrFunc['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "tester.checkType(\"bit_or(distinct CAST(2 AS BIGINT))\",\"BIGINT\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "tester.checkFails(\"^bit_or(1.2)^\",\"Cannot apply 'BIT_OR' to arguments of type 'BIT_OR\(<DECIMAL\(2, 1\)>\)'\. Supported form\(s\): 'BIT_OR\(<INTEGER>\)'\" + \"'BIT_OR\(<BINARY>\)'\",false)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "tester.checkType(\"bit_or(CAST(2 AS TINYINT))\",\"TINYINT\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "tester.checkAgg(\"bit_or(x)\",values,3,0)@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "tester.checkFails(\"bit_or(^*^)\",\"Unknown identifier '\*'\",false)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testBitOrFunc['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "tester.checkFails(\"^bit_or()^\",\"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",false)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "tester.setFor(SqlStdOperatorTable.BIT_OR,VM_FENNEL,VM_JAVA)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "tester.checkAgg(\"bit_xor(x)\",values,2,0)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "tester.checkAgg(\"bit_or(x)\",binaryValues,\"03\",0)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "tester.checkFails(\"^bit_xor(1.2)^\",\"Cannot apply 'BIT_XOR' to arguments of type 'BIT_XOR\(<DECIMAL\(2, 1\)>\)'\. Supported form\(s\): 'BIT_XOR\(<INTEGER>\)'\",false)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "tester.checkFails(\"^bit_xor()^\",\"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final String(( binaryValues = {\"CAST(x'01' AS BINARY)\",\"cast(x'02' as BINARY)\",\"cast(x'02' AS BINARY)\",\"cast(null AS BINARY)\"}@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "tester.setFor(SqlStdOperatorTable.BIT_XOR,VM_FENNEL,VM_JAVA)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "tester.checkFails(\"^bit_or()^\",\"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",false)@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->8 [style = bold, label=""];
4->9 [style = bold, label=""];
1->4 [style = bold, label=""];
15->13 [style = bold, label=""];
9->0 [style = bold, label=""];
23->30 [style = bold, label=""];
19->12 [style = solid, label="binaryValues"];
19->12 [style = bold, label=""];
5->20 [style = bold, label=""];
15->13 [style = solid, label="values"];
11->26 [style = dashed, label="0"];
30->27 [style = bold, label=""];
22->29 [style = bold, label=""];
7->20 [style = dashed, label="0"];
5->15 [style = bold, label=""];
29->25 [style = bold, label=""];
9->22 [style = dashed, label="0"];
8->6 [style = bold, label=""];
1->21 [style = dashed, label="0"];
12->16 [style = bold, label=""];
18->2 [style = bold, label=""];
26->24 [style = bold, label=""];
11->2 [style = bold, label=""];
21->28 [style = bold, label=""];
24->5 [style = bold, label=""];
5->7 [style = solid, label="values"];
4->28 [style = dashed, label="0"];
6->1 [style = bold, label=""];
0->10 [style = bold, label=""];
0->14 [style = bold, label=""];
13->19 [style = bold, label=""];
6->27 [style = dashed, label="0"];
3->8 [style = bold, label=""];
25->26 [style = bold, label=""];
0->29 [style = dashed, label="0"];
5->7 [style = bold, label=""];
14->18 [style = bold, label=""];
8->30 [style = dashed, label="0"];
2->24 [style = dashed, label="0"];
27->21 [style = bold, label=""];
5->20 [style = solid, label="values"];
10->25 [style = dashed, label="0"];
28->22 [style = bold, label=""];
2->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
