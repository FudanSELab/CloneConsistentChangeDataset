digraph {
26 [style = filled, label = "assertEquals(\"UNKNOWN\",repository.getNextAbbreviation(\"?\").orElse(\"UNKNOWN\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertFalse(repository.isKnownName(\"?\"))@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(1,repository.size())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"L N\",repository.getNextAbbreviation(\"L. N.\").orElse(\"WRONG\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(1,repository.size())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(1,repository.getCustomAbbreviations().size())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "testDuplicateKeys['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertEquals(\"LN\",repository.getNextAbbreviation(\"L N\").orElse(\"WRONG\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "repository.addEntry(new Abbreviation(\"Long Name\",\"L. N.\",\"LN\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertTrue(repository.isKnownName(\"L. N.\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(\"LA. N.\",repository.getDefaultAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"L. N.\",repository.getDefaultAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"LN\",repository.getShortestUniqueAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertTrue(repository.isKnownName(\"Long Name\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\"UNKNOWN\",repository.getMedlineAbbreviation(\"?\").orElse(\"UNKNOWN\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "oneElementWithShortestUniqueAbbreviation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(\"UNKNOWN\",repository.getDefaultAbbreviation(\"?\").orElse(\"UNKNOWN\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(\"L. N.\",repository.getDefaultAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(1,repository.getCustomAbbreviations().size())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertTrue(repository.isKnownName(\"LN\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "repository.addEntry(new Abbreviation(\"Long Name\",\"LA. N.\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "repository.addEntry(new Abbreviation(\"Long Name\",\"L. N.\"))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(repository.isKnownName(\"L N\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "JournalAbbreviationRepository repository = new JournalAbbreviationRepository()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testDuplicateKeys['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"L. N.\",repository.getNextAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"UNKNOWN\",repository.getShortestUniqueAbbreviation(\"?\").orElse(\"UNKNOWN\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(\"LA. N.\",repository.getDefaultAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@9@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertFalse(repository.getAbbreviations().isEmpty())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"L N\",repository.getMedlineAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "repository.addCustomAbbreviation(new Abbreviation(\"Long Name\",\"L. N.\"))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEquals(\"Long Name\",repository.getNextAbbreviation(\"LN\").orElse(\"WRONG\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->24 [style = bold, label=""];
16->15 [style = bold, label=""];
22->25 [style = bold, label=""];
20->26 [style = bold, label=""];
5->23 [style = dashed, label="0"];
1->30 [style = dashed, label="0"];
9->4 [style = bold, label=""];
0->2 [style = bold, label=""];
1->3 [style = bold, label=""];
18->19 [style = bold, label=""];
1->4 [style = dashed, label="0"];
31->29 [style = bold, label=""];
12->9 [style = bold, label=""];
24->18 [style = bold, label=""];
29->21 [style = bold, label=""];
19->16 [style = bold, label=""];
2->23 [style = bold, label=""];
6->4 [style = bold, label=""];
6->27 [style = bold, label=""];
27->4 [style = bold, label=""];
15->17 [style = bold, label=""];
26->31 [style = bold, label=""];
28->2 [style = bold, label=""];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
4->30 [style = bold, label=""];
3->7 [style = bold, label=""];
21->22 [style = bold, label=""];
23->6 [style = bold, label=""];
11->13 [style = bold, label=""];
30->14 [style = bold, label=""];
4->1 [style = bold, label=""];
3->14 [style = dashed, label="0"];
4->11 [style = bold, label=""];
8->12 [style = bold, label=""];
3->11 [style = dashed, label="0"];
2->5 [style = bold, label=""];
17->20 [style = bold, label=""];
}
