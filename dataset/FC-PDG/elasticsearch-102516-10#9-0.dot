digraph {
15 [style = filled, label = "l.onNewReaderContext(mock())@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "IndexingOperationListener listener = new IndexingOperationListener(){@Override public Engine.Index preIndex(ShardId shardId,Engine.Index operation){executed.set(true)return operation}}@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "IndexModule module = createIndexModule(indexSettings,emptyAnalysisRegistry)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "IndexService indexService = newIndexService(module)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expectThrows(,null)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "l.onNewContext(new TestSearchContext(null))@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\",null)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "expectThrows(,null)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testAddSearchOperationListener['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(2,indexService.getSearchOperationListener().size())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertSame(listener,indexService.getIndexOperationListeners().get(1))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "module.addSearchOperationListener(listener)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testAddSearchOperationListener['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "expectThrows(,null)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(executed.get())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "expectThrows(,null)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index,settings)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "l.preIndex(shardId,index)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(,indexService.getIndexOperationListeners().get(0).getClass())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testAddIndexOperationListener['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "indexService.close(\"simon says\",false)@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(executed.get())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "indexService.close(\"simon says\",false)@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "SearchOperationListener listener = new SearchOperationListener(){@Override public void onNewReaderContext(ReaderContext readerContext){executed.set(true)}}@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertSame(listener,indexService.getSearchOperationListener().get(1))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(,indexService.getSearchOperationListener().get(0).getClass())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "AtomicBoolean executed = new AtomicBoolean(false)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(2,indexService.getIndexOperationListeners().size())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Engine.Index index = new Engine.Index(new Term(\"_id\",Uid.encodeId(doc.id())),randomNonNegativeLong(),doc)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "module.addIndexOperationListener(listener)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "ShardId shardId = new ShardId(new Index(\"foo\",\"bar\"),0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23->3 [style = bold, label=""];
29->21 [style = bold, label=""];
25->29 [style = bold, label=""];
6->18 [style = dashed, label="0"];
24->30 [style = solid, label="shardId"];
8->4 [style = bold, label=""];
12->23 [style = dashed, label="0"];
27->30 [style = solid, label="index"];
5->7 [style = solid, label="indexSettings"];
0->8 [style = solid, label="listener"];
20->5 [style = bold, label=""];
28->26 [style = bold, label=""];
18->25 [style = bold, label=""];
8->29 [style = dashed, label="0"];
21->27 [style = solid, label="doc"];
6->13 [style = bold, label=""];
14->0 [style = bold, label=""];
9->26 [style = dashed, label="0"];
24->30 [style = bold, label=""];
22->29 [style = solid, label="listener"];
3->18 [style = bold, label=""];
0->2 [style = solid, label="listener"];
7->14 [style = bold, label=""];
3->6 [style = bold, label=""];
10->1 [style = bold, label=""];
2->9 [style = bold, label=""];
27->24 [style = bold, label=""];
13->25 [style = dashed, label="0"];
12->3 [style = bold, label=""];
19->17 [style = bold, label=""];
22->28 [style = bold, label=""];
22->28 [style = solid, label="listener"];
21->27 [style = bold, label=""];
7->3 [style = solid, label="module"];
16->5 [style = bold, label=""];
4->10 [style = bold, label=""];
26->23 [style = bold, label=""];
13->8 [style = bold, label=""];
0->2 [style = bold, label=""];
0->22 [style = dashed, label="0"];
15->10 [style = bold, label=""];
30->19 [style = bold, label=""];
2->28 [style = dashed, label="0"];
5->7 [style = bold, label=""];
8->15 [style = bold, label=""];
11->5 [style = bold, label=""];
9->12 [style = bold, label=""];
14->22 [style = bold, label=""];
}
