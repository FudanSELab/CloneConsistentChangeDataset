digraph {
8 [style = filled, label = "double(( y1Start = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2b3fb0@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(d1.getClass() == d2.getClass())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "x1(0( = 111.1@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "DefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "double(( y1End = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2b3fba@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertFalse(d1.equals(d2))@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "double(( y1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2b3fa6@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(-5.0,r.getLowerBound(),EPSILON)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testCloning2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "DefaultIntervalXYDataset<String> d1 = new DefaultIntervalXYDataset<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Range r = DatasetUtils.iterateToFindRangeBounds(dataset,Arrays.asList(\"S1\"),new Range(0.0,4.0),true)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testIterateToFindRangeBounds_IntervalXYDataset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertEquals(6.0,r.getUpperBound(),EPSILON)@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(d1.equals(d2))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testIterateToFindRangeBounds_IntervalXYDataset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "dataset.addSeries(\"S1\",data1)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "double(( x1Start = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2b3f92@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(d1 != d2)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "DefaultIntervalXYDataset<String> dataset = new DefaultIntervalXYDataset<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "DefaultIntervalXYDataset<String> d2 = CloneUtils.clone(d1)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "double(( x1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2b3f88@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "double(( x1End = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2b3f9c@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "double(((( data1 = new double((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2b3fc4@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "d1.addSeries(\"S1\",data1)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->9 [style = bold, label=""];
16->20 [style = solid, label="d2"];
22->15 [style = bold, label=""];
10->21 [style = dashed, label="0"];
7->18 [style = solid, label="data1"];
10->11 [style = solid, label="dataset"];
19->20 [style = bold, label=""];
9->4 [style = bold, label=""];
11->6 [style = bold, label=""];
12->7 [style = solid, label="x1"];
16->23 [style = bold, label=""];
10->13 [style = dashed, label="0"];
15->19 [style = bold, label=""];
5->18 [style = dashed, label="0"];
12->0 [style = bold, label=""];
21->16 [style = solid, label="d1"];
2->7 [style = solid, label="y1End"];
0->7 [style = solid, label="x1Start"];
21->12 [style = bold, label=""];
8->7 [style = solid, label="y1Start"];
6->1 [style = bold, label=""];
3->10 [style = bold, label=""];
9->7 [style = solid, label="x1End"];
7->5 [style = bold, label=""];
13->12 [style = bold, label=""];
23->22 [style = bold, label=""];
8->2 [style = bold, label=""];
10->12 [style = bold, label=""];
4->7 [style = solid, label="y1"];
7->18 [style = bold, label=""];
4->8 [style = bold, label=""];
21->23 [style = solid, label="d1"];
5->11 [style = bold, label=""];
2->7 [style = bold, label=""];
14->13 [style = bold, label=""];
7->5 [style = solid, label="data1"];
13->11 [style = solid, label="dataset"];
17->21 [style = bold, label=""];
16->15 [style = solid, label="d2"];
16->23 [style = solid, label="d2"];
18->16 [style = bold, label=""];
}
