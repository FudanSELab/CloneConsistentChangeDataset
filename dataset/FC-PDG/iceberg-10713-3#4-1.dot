digraph {
4 [style = filled, label = "i < 10@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "{TestFilteredScan.spark.conf().set(\"spark.sql.caseSensitive\",caseSensitivityBeforeTest)}@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "InputPartition(( partitions = scan.planInputPartitions()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Should only create one task for a small file\",1,tasks.length)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "pushFilters(builder,EqualTo.apply(\"ID\",i))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "String caseSensitivityBeforeTest = TestFilteredScan.spark.conf().get(\"spark.sql.caseSensitive\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "i += 1@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEqualsSafe(SCHEMA.asStruct(),expected(i),read(unpartitioned.toString(),\"id = \" + i))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(\"Should only create one task for a small file\",1,partitions.length)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "InputPartition(( tasks = scan.planInputPartitions()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "CaseInsensitiveStringMap options = new CaseInsensitiveStringMap(ImmutableMap.of(\"path\",unpartitioned.toString()))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int i = 0@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "SparkScanBuilder builder = new SparkScanBuilder(spark,TABLES.load(options.get(\"path\")),options)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "SparkScanBuilder builder = new SparkScanBuilder(spark,TABLES.load(options.get(\"path\")),options).caseSensitive(false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testUnpartitionedIDFilters['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEqualsSafe(SCHEMA.asStruct(),expected(i),read(unpartitioned.toString(),vectorized,\"id = \" + i))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testUnpartitionedCaseInsensitiveIDFilters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testUnpartitionedIDFilters['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "i < 10@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = 0@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Batch scan = builder.build().toBatch()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TestFilteredScan.spark.conf().set(\"spark.sql.caseSensitive\",\"false\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
5->3 [style = bold, label=""];
4->10 [style = bold, label=""];
1->8 [style = solid, label="options"];
13->10 [style = bold, label=""];
4->18 [style = dotted, label="true"];
3->7 [style = dotted, label="true"];
1->8 [style = bold, label=""];
12->5 [style = bold, label=""];
4->17 [style = bold, label=""];
5->3 [style = solid, label="i"];
0->12 [style = solid, label="i"];
11->1 [style = bold, label=""];
4->10 [style = dotted, label="true"];
5->4 [style = solid, label="i"];
3->10 [style = dotted, label="true"];
5->21 [style = solid, label="i"];
3->4 [style = dotted, label="true"];
4->7 [style = dotted, label="true"];
5->7 [style = solid, label="i"];
10->4 [style = solid, label="i"];
0->4 [style = solid, label="i"];
19->20 [style = solid, label="caseSensitivityBeforeTest"];
5->13 [style = solid, label="i"];
3->6 [style = dotted, label="true"];
4->14 [style = dotted, label="true"];
3->4 [style = bold, label=""];
10->13 [style = solid, label="i"];
10->6 [style = bold, label=""];
8->4 [style = solid, label="builder"];
2->12 [style = bold, label=""];
19->16 [style = bold, label=""];
6->18 [style = dashed, label="0"];
6->2 [style = bold, label=""];
8->0 [style = bold, label=""];
4->21 [style = dotted, label="true"];
4->13 [style = dotted, label="true"];
7->5 [style = bold, label=""];
3->5 [style = dotted, label="true"];
17->21 [style = solid, label="builder"];
2->14 [style = dashed, label="0"];
10->21 [style = solid, label="i"];
3->12 [style = dotted, label="true"];
5->4 [style = bold, label=""];
0->3 [style = solid, label="i"];
4->20 [style = bold, label=""];
10->4 [style = bold, label=""];
16->5 [style = bold, label=""];
7->18 [style = bold, label=""];
21->7 [style = bold, label=""];
7->12 [style = dashed, label="0"];
2->7 [style = bold, label=""];
14->13 [style = bold, label=""];
9->1 [style = bold, label=""];
1->19 [style = bold, label=""];
4->17 [style = dotted, label="true"];
5->12 [style = solid, label="i"];
17->21 [style = bold, label=""];
18->14 [style = bold, label=""];
0->7 [style = solid, label="i"];
3->2 [style = dotted, label="true"];
15->1 [style = bold, label=""];
}
