digraph {
11 [style = filled, label = "testReorderedProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "record.setField(\"data\",\"test\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Record record = GenericRecord.create(schema.asStruct())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testReorderedProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Record projected = writeAndRead(\"full_projection\",schema,reordered,record)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(schema,\"table\"))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testReorderedProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "record.setField(\"data\",\"test\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Schema schema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(1,\"data\",Types.StringType.get()))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "record.put(\"id\",34L)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertNull(\"Should contain the correct 2 value\",projected.get(2))@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "record.setField(\"id\",34L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Record record = GenericRecord.create(schema)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(\"Should contain the correct 1 value\",\"test\",projected.get(1).toString())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Schema reordered = new Schema(Types.NestedField.optional(2,\"missing_1\",Types.StringType.get()),Types.NestedField.optional(1,\"data\",Types.StringType.get()),Types.NestedField.optional(3,\"missing_2\",Types.LongType.get()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "record.put(\"data\",\"test\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "record.setField(\"id\",34L)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Record projected = writeAndRead(\"reordered_projection\",schema,reordered,record)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertNull(\"Should contain the correct 0 value\",projected.get(0))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->13 [style = dashed, label="0"];
0->3 [style = bold, label=""];
14->16 [style = bold, label=""];
16->15 [style = bold, label=""];
4->18 [style = dashed, label="0"];
5->14 [style = dashed, label="0"];
1->8 [style = bold, label=""];
4->6 [style = bold, label=""];
9->2 [style = bold, label=""];
7->16 [style = dashed, label="0"];
14->18 [style = solid, label="record"];
0->15 [style = dashed, label="0"];
10->3 [style = bold, label=""];
2->13 [style = solid, label="schema"];
7->0 [style = bold, label=""];
15->3 [style = bold, label=""];
3->4 [style = bold, label=""];
11->2 [style = bold, label=""];
0->10 [style = dashed, label="0"];
2->13 [style = bold, label=""];
3->18 [style = bold, label=""];
6->1 [style = bold, label=""];
12->10 [style = bold, label=""];
13->12 [style = bold, label=""];
3->18 [style = solid, label="reordered"];
13->4 [style = solid, label="record"];
17->2 [style = bold, label=""];
18->6 [style = bold, label=""];
2->14 [style = bold, label=""];
2->18 [style = solid, label="schema"];
5->4 [style = solid, label="record"];
7->12 [style = dashed, label="0"];
5->7 [style = bold, label=""];
3->4 [style = solid, label="reordered"];
2->5 [style = bold, label=""];
2->5 [style = solid, label="schema"];
2->4 [style = solid, label="schema"];
}
