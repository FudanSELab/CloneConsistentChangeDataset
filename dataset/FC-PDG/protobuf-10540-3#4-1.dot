digraph {
3 [style = filled, label = "testParsing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "AbstractMessageWrapper.Builder builder = new AbstractMessageWrapper.Builder(TestUnpackedTypes.newBuilder())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TestUtil.assertUnpackedFieldsSet((TestUnpackedTypes)message.wrappedMessage)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "AbstractMessageWrapper message = builder.mergeFrom(TestUtil.getAllSet().toByteString()).build()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testParsePackedToUnpacked['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "AbstractMessageWrapper.Builder builder = new AbstractMessageWrapper.Builder(TestAllTypes.newBuilder())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "AbstractMessageWrapper message = builder.mergeFrom(TestUtil.getAllSet().toByteString(),ExtensionRegistryLite.getEmptyRegistry()).build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testParsing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "TestUtil.assertAllFieldsSet((TestAllTypes)message.wrappedMessage)@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "AbstractMessageWrapper message = builder.mergeFrom(TestUtil.getPackedSet().toByteString()).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->9 [style = bold, label=""];
1->4 [style = dashed, label="0"];
1->2 [style = bold, label=""];
8->6 [style = bold, label=""];
4->2 [style = bold, label=""];
1->7 [style = dashed, label="0"];
6->7 [style = bold, label=""];
5->0 [style = bold, label=""];
0->4 [style = bold, label=""];
2->9 [style = dashed, label="0"];
0->1 [style = bold, label=""];
3->0 [style = bold, label=""];
0->6 [style = dashed, label="0"];
}
