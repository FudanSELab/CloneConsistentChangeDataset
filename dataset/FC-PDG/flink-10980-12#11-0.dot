digraph {
23 [style = filled, label = "final RecoverableFsDataOutputStream stream = writer.open(testBucket)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Assert.assertEquals(1L,statuses.length)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertTrue(statuses(0(.getPath().getPath().startsWith((new Path(testBucket.getParent(),\".test.inprogress\")).getPath()))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "long numFiles = Files.list(Paths.get(testBucketPath.toString())).map(null).count()@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertNull(bucket.getInProgressPart())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final BucketState<String> recoveredState = readBucketState(scenarioName,previousVersion)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final byte(( bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer,bucketState)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "final BucketState<String> bucketState = new BucketState<>(\"test\",testBucket,Long.MAX_VALUE,current,new HashMap<>())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "final File testFolder = tempFolder.newFolder()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "Assert.assertTrue(bucket.getPendingFileRecoverablesPerCheckpoint().isEmpty())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "stream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final Path testBucket = new Path(testFolder.getPath(),\"test\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final java.nio.file.Path outputPath = getOutputPath(scenarioName,previousVersion)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(8,bucket.getInProgressPart().getSize())@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testSerializationOnlyInProgress['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "final FileSystem fs = FileSystem.get(testFolder.toURI())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final Bucket<String,String> bucket = restoreBucket(0,recoveredState)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "FileStatus(( statuses = fs.listStatus(testBucket.getParent())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "final BucketState<String> recoveredState = SimpleVersionedSerialization.readVersionAndDeSerialize(serializer,bytes)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(testBucket,recoveredState.getBucketPath())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "final RecoverableWriter.ResumeRecoverable current = stream.persist()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "final SimpleVersionedSerializer<BucketState<String>> serializer = new BucketStateSerializer<>(writer.getResumeRecoverableSerializer(),writer.getCommitRecoverableSerializer(),SimpleVersionedStringSerializer.INSTANCE)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "final String scenarioName = \"empty\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testSerializationOnlyInProgress['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(testBucketPath,bucket.getBucketPath())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final String scenarioName = \"only-in-progress\"@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final RecoverableWriter writer = fs.createRecoverableWriter()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "testSerializationEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "stream.close()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThat(numFiles,is(1L))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3->29 [style = dashed, label="0"];
13->19 [style = solid, label="testBucket"];
1->4 [style = bold, label=""];
23->20 [style = bold, label=""];
20->17 [style = bold, label=""];
14->25 [style = bold, label=""];
9->0 [style = bold, label=""];
18->23 [style = bold, label=""];
8->1 [style = solid, label="scenarioName"];
29->30 [style = bold, label=""];
11->14 [style = bold, label=""];
10->21 [style = solid, label="bytes"];
16->10 [style = bold, label=""];
10->24 [style = bold, label=""];
5->2 [style = solid, label="recoveredState"];
19->10 [style = solid, label="bucketState"];
27->28 [style = bold, label=""];
4->7 [style = solid, label="testBucketPath"];
17->19 [style = solid, label="current"];
28->1 [style = bold, label=""];
12->26 [style = bold, label=""];
8->28 [style = dashed, label="0"];
8->5 [style = solid, label="scenarioName"];
17->19 [style = bold, label=""];
7->3 [style = bold, label=""];
26->22 [style = bold, label=""];
19->16 [style = bold, label=""];
16->21 [style = solid, label="serializer"];
8->1 [style = bold, label=""];
3->9 [style = bold, label=""];
13->11 [style = solid, label="testBucket"];
5->2 [style = bold, label=""];
9->0 [style = solid, label="numFiles"];
16->10 [style = solid, label="serializer"];
24->21 [style = bold, label=""];
21->11 [style = bold, label=""];
6->8 [style = bold, label=""];
28->1 [style = solid, label="scenarioName"];
28->5 [style = solid, label="scenarioName"];
25->15 [style = bold, label=""];
2->7 [style = bold, label=""];
4->13 [style = dashed, label="0"];
13->23 [style = solid, label="testBucket"];
4->5 [style = bold, label=""];
22->13 [style = bold, label=""];
13->18 [style = bold, label=""];
7->29 [style = bold, label=""];
}
