digraph {
17 [style = filled, label = "ArrayList<Node> nodes = new ArrayList<>()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "streamingClients.setExp(null)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "cmd.solrDoc = sdoc(\"id\",id.incrementAndGet())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "cmdDistrib.distribAdd(cmd,nodes,params)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "streamingClients.setExp(Exp.SOCKET_EXCEPTION)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Node retryNode@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "retryNode = new StdNode(new ZkCoreNodeProps(nodeProps),\"collection1\",\"shard1\",5){@Override public boolean checkRetry(Error err){retries.incrementAndGet()return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@f5da10err}}@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final AtomicInteger retries = new AtomicInteger()@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "AddUpdateCommand cmd = new AddUpdateCommand(null)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testForwardNodeWontRetrySocketError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "CommitUpdateCommand ccmd = new CommitUpdateCommand(null,false)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "nodes.add(retryNode)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "AddUpdateCommand cmd = new AddUpdateCommand(null)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ignoreException(\"Bad Request\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "cmdDistrib.finish()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final HttpSolrClient solrclient = (HttpSolrClient)clients.get(0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ArrayList<Node> nodes = new ArrayList<>()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "unIgnoreException(\"Bad Request\")@@@44@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "retryNode = new ForwardNode(new ZkCoreNodeProps(nodeProps),null,\"collection1\",\"shard1\",5){@Override public boolean checkRetry(Error err){retries.incrementAndGet()return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@f5d9f6err}}@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(1,cmdDistrib.getErrors().size())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testNodeWontRetryBadRequest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ForwardNode retryNode = new ForwardNode(new ZkCoreNodeProps(nodeProps),null,\"collection1\",\"shard1\",5){@Override public boolean checkRetry(Error err){retries.incrementAndGet()return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@f5d921err}}@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final HttpSolrClient solrclient = (HttpSolrClient)clients.get(0)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testForwardNodeWontRetrySocketError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "NodeType nodeType@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,solrclient.getBaseURL(),ZkStateReader.CORE_NAME_PROP,\"\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "nodes.add(retryNode)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "cmdDistrib.distribCommit(ccmd,nodes,params)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "nodeType == NodeType.FORWARD@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(1,retries.get())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "streamingClients.setExp(Exp.BAD_REQUEST)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,solrclient.getBaseURL(),ZkStateReader.CORE_NAME_PROP,\"\")@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertEquals(numFoundBefore,numFoundAfter)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = solid, label="params"];
20->23 [style = bold, label=""];
11->22 [style = bold, label=""];
21->14 [style = bold, label=""];
29->27 [style = bold, label=""];
17->18 [style = solid, label="nodes"];
19->6 [style = bold, label=""];
10->2 [style = bold, label=""];
8->10 [style = solid, label="cmd"];
26->36 [style = bold, label=""];
34->28 [style = bold, label=""];
23->6 [style = solid, label="nodeProps"];
0->18 [style = solid, label="ccmd"];
32->5 [style = bold, label=""];
13->0 [style = bold, label=""];
12->15 [style = bold, label=""];
22->16 [style = bold, label=""];
10->18 [style = solid, label="params"];
26->25 [style = dotted, label="false"];
16->34 [style = bold, label=""];
30->26 [style = solid, label="nodeType"];
4->17 [style = bold, label=""];
27->15 [style = bold, label=""];
17->20 [style = bold, label=""];
4->32 [style = dashed, label="0"];
15->7 [style = bold, label=""];
14->11 [style = bold, label=""];
31->26 [style = bold, label=""];
6->9 [style = solid, label="retryNode"];
13->18 [style = solid, label="params"];
11->22 [style = solid, label="numFoundAfter"];
15->22 [style = solid, label="numFoundBefore"];
35->32 [style = bold, label=""];
25->1 [style = bold, label=""];
20->19 [style = bold, label=""];
6->9 [style = bold, label=""];
8->1 [style = bold, label=""];
0->10 [style = bold, label=""];
20->36 [style = solid, label="nodeProps"];
25->1 [style = solid, label="retryNode"];
26->25 [style = bold, label=""];
19->23 [style = dashed, label="0"];
23->6 [style = bold, label=""];
2->18 [style = bold, label=""];
10->14 [style = solid, label="params"];
2->14 [style = solid, label="ccmd"];
3->12 [style = bold, label=""];
7->4 [style = bold, label=""];
28->33 [style = bold, label=""];
17->10 [style = solid, label="nodes"];
5->18 [style = solid, label="nodes"];
13->18 [style = solid, label="cmd"];
29->30 [style = dotted, label="true"];
5->20 [style = bold, label=""];
20->25 [style = solid, label="nodeProps"];
36->1 [style = bold, label=""];
16->34 [style = solid, label="numFoundAfter"];
18->21 [style = bold, label=""];
24->12 [style = bold, label=""];
19->6 [style = solid, label="nodeProps"];
7->34 [style = solid, label="numFoundBefore"];
19->31 [style = bold, label=""];
9->8 [style = bold, label=""];
5->14 [style = solid, label="nodes"];
26->36 [style = dotted, label="true"];
7->35 [style = bold, label=""];
17->5 [style = bold, label=""];
36->1 [style = solid, label="retryNode"];
1->13 [style = bold, label=""];
}
