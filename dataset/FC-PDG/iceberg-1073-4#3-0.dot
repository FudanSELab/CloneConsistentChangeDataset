digraph {
5 [style = filled, label = "Schema idOnly = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(\"Should contain the correct data value\",cmp == 0)@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testBasicProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"id\")@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"data\")@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "record.put(\"id\",34L)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "record.put(\"data\",\"test\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Record projected = writeAndRead(\"basic_projection_id\",writeSchema,idOnly,record)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"Should contain the correct data value\",0,cmp)@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testBasicProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNull(\"Should not project data\",projected.get(\"data\"))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "projected = writeAndRead(\"basic_projection_data\",writeSchema,dataOnly,record)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(1,\"data\",Types.StringType.get()))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testBasicProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "int cmp = Comparators.charSequences().compare(\"test\",(CharSequence)projected.get(\"data\"))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Schema dataOnly = new Schema(Types.NestedField.optional(1,\"data\",Types.StringType.get()))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->2 [style = solid, label="writeSchema"];
9->11 [style = bold, label=""];
13->4 [style = bold, label=""];
7->9 [style = bold, label=""];
13->17 [style = bold, label=""];
13->4 [style = solid, label="cmp"];
0->16 [style = solid, label="projected"];
4->17 [style = dashed, label="0"];
13->17 [style = solid, label="cmp"];
2->15 [style = solid, label="projected"];
5->0 [style = solid, label="idOnly"];
0->1 [style = bold, label=""];
6->2 [style = bold, label=""];
12->13 [style = bold, label=""];
3->6 [style = bold, label=""];
10->7 [style = solid, label="writeSchema"];
10->7 [style = bold, label=""];
5->0 [style = bold, label=""];
1->3 [style = bold, label=""];
7->2 [style = solid, label="record"];
16->3 [style = bold, label=""];
18->10 [style = bold, label=""];
15->13 [style = bold, label=""];
7->0 [style = solid, label="record"];
6->2 [style = solid, label="dataOnly"];
14->10 [style = bold, label=""];
2->15 [style = bold, label=""];
10->0 [style = solid, label="writeSchema"];
8->10 [style = bold, label=""];
2->12 [style = bold, label=""];
11->5 [style = bold, label=""];
0->16 [style = bold, label=""];
}
