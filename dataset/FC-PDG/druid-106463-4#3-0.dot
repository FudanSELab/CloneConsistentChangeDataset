digraph {
18 [style = filled, label = "exec.shutdownNow()@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testBySegmentResultsUnOptimizedDimextraction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "doTestMergeResultsWithValidLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "List<QueryRunner<Row>> singleSegmentRunners = new ArrayList<>()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "bySegmentResults.add(singleSegmentResult)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TestHelper.assertExpectedObjects(bySegmentResults,theRunner.run(QueryPlus.wrap(fullQuery),new HashMap<>()),\"\")@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "final GroupByQuery fullQuery = builder.build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "GroupByQuery.Builder builder = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setLimit(limit)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TestHelper.assertExpectedObjects(bySegmentResults,theRunner.run(QueryPlus.wrap(fullQuery),Maps.newHashMap()),\"\")@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "GroupByQuery.Builder builder = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(ImmutableMap.of(\"mezzanine\",\"mezzanine0\"),false),false,null,false,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setDimFilter(new SelectorDimFilter(\"quality\",\"mezzanine\",null)).setContext(ImmutableMap.of(\"bySegment\",true))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i < segmentCount@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<Result> bySegmentResults = Lists.newArrayList()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "QueryRunner<Row> mergeRunner = factory.getToolchest().mergeResults(runner)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "int i = 0@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testBySegmentResultsUnOptimizedDimextraction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "QueryRunner theRunner = toolChest.postMergeQueryDecoration(new FinalizeResultsQueryRunner<>(toolChest.mergeResults(factory.mergeRunners(Executors.newCachedThreadPool(),singleSegmentRunners)),toolChest))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i++@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final int limit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Result<BySegmentResultValue> singleSegmentResult = new Result<BySegmentResultValue>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new BySegmentResultValueClass(Collections.singletonList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine0\",\"rows\",6L,\"idx\",4420L)),\"testSegment\",Intervals.of(\"2011-04-02T00:00:00.000Z/2011-04-04T00:00:00.000Z\")))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ExecutorService exec = Executors.newCachedThreadPool()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "List<QueryRunner<Row>> singleSegmentRunners = Lists.newArrayList()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "List<Result> bySegmentResults = new ArrayList<>()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Map<String,Object> context = Maps.newHashMap()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,limit),mergeRunner.run(QueryPlus.wrap(fullQuery),context),StringUtils.format(\"limit: %d\",limit))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "i < segmentCount@@@16@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"automotive\",\"rows\",2L,\"idx\",269L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"entertainment\",\"rows\",2L,\"idx\",319L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health\",\"rows\",2L,\"idx\",216L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news\",\"rows\",2L,\"idx\",221L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"technology\",\"rows\",2L,\"idx\",177L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"travel\",\"rows\",2L,\"idx\",243L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final GroupByQuery fullQuery = builder.build()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int i = 0@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "singleSegmentRunners.add(toolChest.preMergeQueryDecoration(runner))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "QueryToolChest toolChest = factory.getToolchest()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int segmentCount = 32@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "i++@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->15 [style = bold, label=""];
24->28 [style = bold, label=""];
11->22 [style = solid, label="fullQuery"];
12->3 [style = dotted, label="true"];
20->13 [style = bold, label=""];
25->30 [style = bold, label=""];
21->15 [style = bold, label=""];
24->29 [style = dotted, label="true"];
11->4 [style = solid, label="fullQuery"];
19->20 [style = dashed, label="0"];
30->31 [style = solid, label="context"];
1->14 [style = solid, label="segmentCount"];
8->14 [style = bold, label=""];
0->11 [style = bold, label=""];
28->26 [style = bold, label=""];
29->31 [style = solid, label="limit"];
4->18 [style = bold, label=""];
14->6 [style = dotted, label="true"];
10->21 [style = bold, label=""];
27->31 [style = solid, label="expectedResults"];
4->22 [style = dashed, label="0"];
15->5 [style = solid, label="i"];
1->28 [style = dashed, label="0"];
15->12 [style = solid, label="i"];
12->0 [style = bold, label=""];
2->4 [style = bold, label=""];
10->3 [style = solid, label="singleSegmentResult"];
17->19 [style = bold, label=""];
16->21 [style = dashed, label="0"];
14->7 [style = bold, label=""];
20->2 [style = solid, label="singleSegmentRunners"];
26->27 [style = bold, label=""];
3->5 [style = bold, label=""];
22->18 [style = bold, label=""];
19->13 [style = bold, label=""];
10->16 [style = bold, label=""];
5->12 [style = bold, label=""];
13->8 [style = solid, label="i"];
8->14 [style = solid, label="i"];
30->31 [style = bold, label=""];
7->2 [style = bold, label=""];
1->12 [style = solid, label="segmentCount"];
17->2 [style = solid, label="toolChest"];
12->5 [style = dotted, label="true"];
6->8 [style = bold, label=""];
14->8 [style = dotted, label="true"];
23->1 [style = bold, label=""];
11->17 [style = bold, label=""];
16->4 [style = solid, label="bySegmentResults"];
13->14 [style = solid, label="i"];
15->12 [style = bold, label=""];
12->3 [style = bold, label=""];
19->25 [style = dashed, label="0"];
9->1 [style = bold, label=""];
2->22 [style = bold, label=""];
29->28 [style = solid, label="limit"];
1->10 [style = bold, label=""];
26->31 [style = solid, label="fullQuery"];
13->14 [style = bold, label=""];
27->25 [style = bold, label=""];
14->6 [style = bold, label=""];
5->12 [style = solid, label="i"];
21->22 [style = solid, label="bySegmentResults"];
17->20 [style = bold, label=""];
19->2 [style = solid, label="singleSegmentRunners"];
}
