digraph {
14 [style = filled, label = "DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(new SelectorDimFilter(\"dim0\",\"super-6\",JS_EXTRACTION_FN),new AndDimFilter(Arrays.asList(new NoBitmapSelectorDimFilter(\"dim1\",\"super-abdef\",JS_EXTRACTION_FN),new SelectorDimFilter(\"dim2\",\"super-c\",JS_EXTRACTION_FN)))))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertFilterMatches(dimFilter3,ImmutableList.of(\"2\",\"3\",\"4\",\"6\",\"7\",\"9\"))@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DimFilter dimFilter3 = new OrDimFilter(dimFilter1,dimFilter2,new AndDimFilter(new NoBitmapSelectorDimFilter(\"dim1\",\"super-1\",JS_EXTRACTION_FN),new SelectorDimFilter(\"dim2\",\"super-foo\",JS_EXTRACTION_FN)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(2,((AndFilter)filter1CNF).getFilters().size())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertFilterMatches(dimFilter2,ImmutableList.of(\"2\",\"3\",\"7\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testDistributeOrCNF['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "testDistributeOrCNFExtractionFn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Filter filter1CNF = Filters.toCNF(filter1)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "DimFilter dimFilter3 = new OrDimFilter(Arrays.asList(dimFilter1,dimFilter2,new AndDimFilter(Arrays.asList(new NoBitmapSelectorDimFilter(\"dim1\",\"1\",null),new SelectorDimFilter(\"dim2\",\"foo\",null)))))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Filter filter1 = dimFilter1.toFilter()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testDistributeOrCNF['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(,filter1CNF.getClass())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(new SelectorDimFilter(\"dim0\",\"super-2\",JS_EXTRACTION_FN),new SelectorDimFilter(\"dim0\",\"super-3\",JS_EXTRACTION_FN),new AndDimFilter(Arrays.asList(new NoBitmapSelectorDimFilter(\"dim1\",\"super-HELLO\",JS_EXTRACTION_FN),new SelectorDimFilter(\"dim2\",\"super-foo\",JS_EXTRACTION_FN)))))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(new SelectorDimFilter(\"dim0\",\"6\",null),new AndDimFilter(Arrays.asList(new NoBitmapSelectorDimFilter(\"dim1\",\"abdef\",null),new SelectorDimFilter(\"dim2\",\"c\",null)))))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertFilterMatches(dimFilter1,ImmutableList.of(\"4\",\"6\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Filter filter1CNF = Filters.convertToCNF(filter1)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(new SelectorDimFilter(\"dim0\",\"2\",null),new SelectorDimFilter(\"dim0\",\"3\",null),new AndDimFilter(Arrays.asList(new NoBitmapSelectorDimFilter(\"dim1\",\"HELLO\",null),new SelectorDimFilter(\"dim2\",\"foo\",null)))))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->12 [style = solid, label="filter1"];
14->1 [style = solid, label="dimFilter1"];
5->10 [style = bold, label=""];
14->16 [style = solid, label="dimFilter1"];
9->0 [style = bold, label=""];
3->1 [style = bold, label=""];
15->14 [style = bold, label=""];
13->16 [style = solid, label="dimFilter2"];
0->12 [style = dashed, label="0"];
8->14 [style = dashed, label="0"];
8->10 [style = solid, label="dimFilter1"];
1->13 [style = bold, label=""];
12->7 [style = bold, label=""];
7->3 [style = bold, label=""];
0->7 [style = bold, label=""];
9->0 [style = solid, label="filter1"];
5->16 [style = bold, label=""];
2->5 [style = solid, label="dimFilter2"];
8->1 [style = solid, label="dimFilter1"];
2->13 [style = dashed, label="0"];
6->8 [style = bold, label=""];
8->9 [style = bold, label=""];
13->5 [style = bold, label=""];
10->4 [style = bold, label=""];
11->8 [style = bold, label=""];
14->9 [style = bold, label=""];
13->5 [style = solid, label="dimFilter2"];
1->2 [style = bold, label=""];
9->12 [style = bold, label=""];
10->16 [style = dashed, label="0"];
2->10 [style = solid, label="dimFilter2"];
16->4 [style = solid, label="dimFilter3"];
16->4 [style = bold, label=""];
10->4 [style = solid, label="dimFilter3"];
2->5 [style = bold, label=""];
}
