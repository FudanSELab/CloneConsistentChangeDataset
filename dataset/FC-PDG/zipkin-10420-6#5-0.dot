digraph {
3 [style = filled, label = "Scribe.LogEntry entry = new Scribe.LogEntry()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(scribeMetrics.bytes()).isEqualTo(Base64.getMimeDecoder().decode(entry.message).length)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ScribeSpanConsumer scribe = newScribeSpanConsumer(entry.category,consumer)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertThat(scribeMetrics.spans()).isEqualTo(1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Scribe.LogEntry entry = new Scribe.LogEntry()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "LogEntry entry = new LogEntry()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "decodesSpanGeneratedByFinagle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "decodesSpanGeneratedByFinagle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "entry.message = encodedSpan@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(scribe.log(asList(entry)).get()).isEqualTo(Scribe.ResultCode.OK)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(storage.getTraces()).containsExactly(asList(v2))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectSuccess(scribe,entry)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(scribeMetrics.spansDropped()).isZero()@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "entriesWithSpansAreConsumed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\",consumer)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(scribeMetrics.messages()).isEqualTo(1)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(scribeMetrics.spansDropped()).isZero()@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(storage.getTraces()).containsExactly(asList(v2))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(scribeMetrics.messagesDropped()).isZero()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "entry.category = \"zipkin\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "newScribeSpanConsumer(entry.category,consumer).log(asList(entry)).get()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->9 [style = solid, label="message"];
4->3 [style = bold, label=""];
0->19 [style = bold, label=""];
0->12 [style = bold, label=""];
2->18 [style = bold, label=""];
9->17 [style = bold, label=""];
3->12 [style = solid, label="category"];
20->3 [style = bold, label=""];
9->10 [style = bold, label=""];
1->7 [style = bold, label=""];
3->0 [style = bold, label=""];
19->16 [style = bold, label=""];
12->13 [style = bold, label=""];
1->12 [style = dashed, label="0"];
12->13 [style = solid, label="scribe"];
7->5 [style = bold, label=""];
21->20 [style = bold, label=""];
5->6 [style = bold, label=""];
15->11 [style = bold, label=""];
17->2 [style = bold, label=""];
11->3 [style = bold, label=""];
11->13 [style = solid, label="entry"];
1->16 [style = dashed, label="0"];
0->1 [style = bold, label=""];
9->17 [style = dashed, label="0"];
2->14 [style = bold, label=""];
13->5 [style = bold, label=""];
16->5 [style = bold, label=""];
0->10 [style = solid, label="message"];
10->2 [style = bold, label=""];
8->4 [style = bold, label=""];
4->11 [style = dashed, label="0"];
6->9 [style = bold, label=""];
}
