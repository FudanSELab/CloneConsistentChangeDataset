digraph {
10 [style = filled, label = "assertTrue(\"File was not overwritten.\",lastModified < overwrittenLastModified)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "buildRule.executeTarget(\"testSimpleScale\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assumeTrue(\"Could not change file modification date\",f.setLastModified(f.lastModified() - FILE_UTILS.getFileTimestampGranularity() * 2))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testSimpleScale['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testSimpleScale['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "testOverwriteTrue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "long overwrittenLastModified = f.lastModified()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "File f = new File(buildRule.getOutputDir(),LARGEIMAGE)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assumeNotNull(\"JPEG codec is unavailable in classpath\",buildRule.getProject().getProperty(\"jpeg.codec.available\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(buildRule.getLog(),containsString(\"Processing File\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(buildRule.getLog(),containsString(\"Processing File\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "buildRule.executeTarget(\"testOverwriteTrue\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "f = new File(buildRule.getOutputDir(),LARGEIMAGE)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "long lastModified = f.lastModified()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(\"Did not create \" + f.getAbsolutePath(),f.exists())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
0->3 [style = bold, label=""];
5->3 [style = bold, label=""];
9->10 [style = solid, label="lastModified"];
6->4 [style = bold, label=""];
3->6 [style = bold, label=""];
12->3 [style = bold, label=""];
11->10 [style = solid, label="overwrittenLastModified"];
4->2 [style = bold, label=""];
9->11 [style = solid, label="lastModified"];
9->7 [style = bold, label=""];
14->11 [style = bold, label=""];
3->4 [style = bold, label=""];
13->14 [style = bold, label=""];
2->1 [style = bold, label=""];
11->10 [style = bold, label=""];
2->8 [style = bold, label=""];
8->9 [style = bold, label=""];
}
