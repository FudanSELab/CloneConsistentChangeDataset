digraph {
8 [style = filled, label = "testMarkSegmentAsUsed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DataSegment segment = dataSegmentList.get(0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(segmentsMetadata.markSegmentAsUsed(segment.getId().toString())).andReturn(true).once()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "EasyMock.verify(segmentsMetadataManager)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testMarkSegmentAsUsed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Response response = dataSourcesResource.markSegmentAsUsed(segment.getDataSource(),segment.getId().toString())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DataSourcesResource dataSourcesResource = new DataSourcesResource(null,segmentsMetadata,null,null,null)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expect(segmentsMetadata.markSegmentAsUsed(segment.getId().toString())).andReturn(false).once()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "EasyMock.replay(segmentsMetadata)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(200,response.getStatus())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.verify(segmentsMetadata)@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DataSourcesResource dataSourcesResource = new DataSourcesResource(null,segmentsMetadataManager,null,null,null)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "EasyMock.expect(segmentsMetadataManager.markSegmentAsUsed(segment.getId().toString())).andReturn(true).once()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "MetadataSegmentManager segmentsMetadata = EasyMock.createMock()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"segmentStateChanged\",false),response.getEntity())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "EasyMock.replay(segmentsMetadataManager)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testMarkSegmentAsUsedNoChange['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4->14 [style = bold, label=""];
15->2 [style = bold, label=""];
2->6 [style = solid, label="segmentsMetadata"];
16->6 [style = bold, label=""];
2->3 [style = bold, label=""];
4->13 [style = bold, label=""];
3->11 [style = bold, label=""];
7->4 [style = bold, label=""];
3->16 [style = bold, label=""];
1->7 [style = bold, label=""];
12->7 [style = bold, label=""];
4->0 [style = bold, label=""];
6->10 [style = dashed, label="0"];
5->16 [style = dashed, label="0"];
6->1 [style = bold, label=""];
1->12 [style = dashed, label="0"];
3->5 [style = bold, label=""];
2->0 [style = solid, label="segmentsMetadata"];
5->6 [style = bold, label=""];
14->0 [style = bold, label=""];
8->2 [style = bold, label=""];
5->11 [style = dashed, label="0"];
11->10 [style = bold, label=""];
10->12 [style = bold, label=""];
0->13 [style = dashed, label="0"];
9->3 [style = bold, label=""];
2->1 [style = solid, label="segmentsMetadata"];
}
