digraph {
20 [style = filled, label = "translateBinary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "return translateBinary2(((RexCall)left).operands.get(0),((RexCall)right).operands.get(0))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "return a@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "throw new AssertionError(\"cannot translate call \" + call)@@@20@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "reverseAggMappings.containsKey(a.getKey())@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "throw new AssertionError(\"Invalid number of arguments - \" + operands.size())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<RexNode> operands = call.getOperands()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "call.op.kind == SqlKind.EQUALS || call.op.kind == SqlKind.NOT_EQUALS@@@16@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final Pair<String,RexLiteral> a = translateBinary2(left,right)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "return new Pair<>(reverseAggMappings.get(a.getKey()),a.getValue())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "RexCall call@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final RexNode left = operands.get(0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final Pair<String,RexLiteral> b = translateBinary2(right,left)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "left.getKind() == SqlKind.CAST && right.getKind() == SqlKind.CAST@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return b@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "a != null@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "b != null@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final RexNode right = operands.get(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "translateBinary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "translateBinary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "operands.size() != 2@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4->13 [style = solid, label="a"];
9->18 [style = bold, label=""];
3->10 [style = bold, label=""];
14->0 [style = dotted, label="true"];
11->4 [style = bold, label=""];
9->5 [style = dotted, label="true"];
7->10 [style = bold, label=""];
10->12 [style = solid, label="left"];
4->2 [style = solid, label="a"];
9->15 [style = bold, label=""];
16->15 [style = bold, label=""];
19->15 [style = bold, label=""];
10->11 [style = bold, label=""];
14->0 [style = bold, label=""];
8->15 [style = solid, label="call"];
3->7 [style = bold, label=""];
20->1 [style = bold, label=""];
12->9 [style = bold, label=""];
16->12 [style = bold, label=""];
16->12 [style = dotted, label="true"];
11->4 [style = solid, label="right"];
13->12 [style = bold, label=""];
1->3 [style = bold, label=""];
13->2 [style = dotted, label="true"];
6->8 [style = dotted, label="true"];
16->9 [style = dotted, label="true"];
18->19 [style = bold, label=""];
13->16 [style = bold, label=""];
12->9 [style = solid, label="b"];
10->4 [style = solid, label="left"];
18->19 [style = dotted, label="true"];
17->8 [style = dotted, label="true"];
5->18 [style = bold, label=""];
14->2 [style = bold, label=""];
4->13 [style = bold, label=""];
2->16 [style = bold, label=""];
3->7 [style = dotted, label="true"];
0->2 [style = bold, label=""];
20->8 [style = dotted, label="true"];
11->12 [style = solid, label="right"];
13->14 [style = bold, label=""];
13->2 [style = bold, label=""];
9->5 [style = bold, label=""];
6->1 [style = bold, label=""];
13->14 [style = dotted, label="true"];
12->5 [style = solid, label="b"];
2->12 [style = bold, label=""];
5->15 [style = bold, label=""];
17->1 [style = bold, label=""];
18->15 [style = bold, label=""];
}
