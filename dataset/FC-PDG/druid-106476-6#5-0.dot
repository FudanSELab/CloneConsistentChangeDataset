digraph {
24 [style = filled, label = "testBySegmentResults['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "GroupByQuery.Builder builder = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setDimFilter(new SelectorDimFilter(\"quality\",\"mezzanine\",null)).setContext(ImmutableMap.of(\"bySegment\",true))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "TestHelper.assertExpectedObjects(bySegmentResults,theRunner.run(QueryPlus.wrap(fullQuery),new HashMap<>()),\"\")@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "testBySegmentResultsOptimizedDimextraction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "bySegmentResults.add(singleSegmentResult)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final GroupByQuery fullQuery = builder.build()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TestHelper.assertExpectedObjects(bySegmentResults,theRunner.run(QueryPlus.wrap(fullQuery),new HashMap<>()),\"bySegment-dim-extraction\")@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "testBySegmentResultsOptimizedDimextraction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "List<Result> bySegmentResults = new ArrayList<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<QueryRunner<Row>> singleSegmentRunners = new ArrayList<>()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TestHelper.assertExpectedObjects(bySegmentResults,theRunner.run(QueryPlus.wrap(fullQuery),new HashMap<>()),\"\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "exec.shutdownNow()@@@23@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ExecutorService exec = Executors.newCachedThreadPool()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Result<BySegmentResultValue> singleSegmentResult = new Result<BySegmentResultValue>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new BySegmentResultValueClass(Collections.singletonList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L)),\"testSegment\",Intervals.of(\"2011-04-02T00:00:00.000Z/2011-04-04T00:00:00.000Z\")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "int i = 0@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int segmentCount = 32@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "i++@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "GroupByQuery.Builder builder = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(ImmutableMap.of(\"mezzanine\",\"mezzanine0\"),false),false,null,true,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setDimFilter(new SelectorDimFilter(\"quality\",\"mezzanine\",null)).setContext(ImmutableMap.of(\"bySegment\",true))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "QueryToolChest toolChest = factory.getToolchest()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Result<BySegmentResultValue> singleSegmentResult = new Result<BySegmentResultValue>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new BySegmentResultValueClass(Collections.singletonList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine0\",\"rows\",6L,\"idx\",4420L)),\"testSegment\",Intervals.of(\"2011-04-02T00:00:00.000Z/2011-04-04T00:00:00.000Z\")))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "QueryRunner theRunner = toolChest.postMergeQueryDecoration(new FinalizeResultsQueryRunner<>(toolChest.mergeResults(factory.mergeRunners(Executors.newCachedThreadPool(),singleSegmentRunners)),toolChest))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i < segmentCount@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "singleSegmentRunners.add(toolChest.preMergeQueryDecoration(runner))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "i++@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "i < segmentCount@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
11->22 [style = solid, label="fullQuery"];
4->18 [style = dotted, label="true"];
4->14 [style = bold, label=""];
15->23 [style = dashed, label="0"];
1->10 [style = dotted, label="true"];
5->23 [style = bold, label=""];
5->1 [style = solid, label="segmentCount"];
4->6 [style = bold, label=""];
23->10 [style = solid, label="singleSegmentResult"];
21->8 [style = bold, label=""];
5->4 [style = solid, label="segmentCount"];
17->7 [style = solid, label="toolChest"];
5->15 [style = bold, label=""];
9->22 [style = solid, label="bySegmentResults"];
3->12 [style = bold, label=""];
4->14 [style = dotted, label="true"];
24->5 [style = bold, label=""];
11->21 [style = solid, label="fullQuery"];
20->5 [style = bold, label=""];
22->8 [style = bold, label=""];
7->22 [style = bold, label=""];
19->1 [style = bold, label=""];
19->1 [style = solid, label="i"];
3->7 [style = solid, label="singleSegmentRunners"];
19->16 [style = solid, label="i"];
13->21 [style = dashed, label="0"];
18->4 [style = bold, label=""];
10->16 [style = bold, label=""];
12->4 [style = bold, label=""];
16->1 [style = bold, label=""];
15->9 [style = bold, label=""];
25->11 [style = bold, label=""];
16->1 [style = solid, label="i"];
12->4 [style = solid, label="i"];
2->25 [style = dashed, label="0"];
17->3 [style = bold, label=""];
9->21 [style = solid, label="bySegmentResults"];
9->19 [style = bold, label=""];
7->21 [style = bold, label=""];
11->17 [style = bold, label=""];
11->13 [style = solid, label="fullQuery"];
14->18 [style = bold, label=""];
18->4 [style = solid, label="i"];
1->2 [style = bold, label=""];
1->16 [style = dotted, label="true"];
12->18 [style = solid, label="i"];
13->8 [style = bold, label=""];
6->7 [style = bold, label=""];
1->10 [style = bold, label=""];
23->9 [style = bold, label=""];
9->13 [style = solid, label="bySegmentResults"];
1->25 [style = bold, label=""];
13->22 [style = dashed, label="0"];
2->11 [style = bold, label=""];
15->10 [style = solid, label="singleSegmentResult"];
0->5 [style = bold, label=""];
}
