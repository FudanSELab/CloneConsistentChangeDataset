digraph {
1 [style = filled, label = "scanRangeParamsList.add(scanRangeParams)@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final ScanNode scanNode@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "FragmentScanRangeAssignment assignment@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "final List<TScanRangeLocations> locations@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Integer bucketSeq@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "this.addressToBackendID.put(execHostPort,backendIdRef.getRef())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Backend backend = this.idToBackend.get(backendIdRef.getRef())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final List<TScanRangeLocations> locations@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "selectBackendsByRoundRobin(seqLocation,assignedBytesPerHost,backendIdRef)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TScanRangeParams scanRangeParams = new TScanRangeParams()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "TNetworkAddress execHostPort = new TNetworkAddress(backend.getHost(),backend.getBePort())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "PlanFragmentId fragmentId@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Reference<Long> backendIdRef = new Reference<Long>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "computeScanRangeAssignmentByScheduler['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "getExecHostPortForFragmentIDAndBucketSeq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Backend backend = this.idToBackend.get(backendIdRef.getRef())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final ScanNode scanNode@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "TScanRangeLocations seqLocation@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "HashMap<TNetworkAddress,Long> assignedBytesPerHost@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "List<TScanRangeParams> scanRangeParamsList = findOrInsert(scanRanges,scanNode.getId().asInt(),new ArrayList<TScanRangeParams>())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "scanRangeParams.setVolumeId(minLocation.volume_id)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "HashMap<TNetworkAddress,Long> assignedBytesPerHost = Maps.newHashMap()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "FragmentScanRangeAssignment assignment@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "HashMap<TNetworkAddress,Long> assignedBytesPerHost@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "scanRangeParams.scan_range = scanRangeLocations.scan_range@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Reference<Long> backendIdRef = new Reference<Long>()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "computeScanRangeAssignmentByScheduler['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "this.fragmentIdToSeqToAddressMap.get(fragmentId).put(bucketSeq,execHostPort)@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "scanRangeParamsList.add(scanRangeParams)@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Map<Integer,List<TScanRangeParams>> scanRanges = findOrInsert(assignment,execHostPort,new HashMap<Integer,List<TScanRangeParams>>())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->20 [style = dotted, label="true"];
21->3 [style = solid, label="backendIdRef"];
0->9 [style = bold, label=""];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
17->18 [style = dotted, label="true"];
24->22 [style = solid, label="backendIdRef"];
4->6 [style = bold, label=""];
26->25 [style = dotted, label="true"];
26->27 [style = dotted, label="true"];
9->8 [style = solid, label="scanRangeParams"];
29->22 [style = solid, label="assignedBytesPerHost"];
8->3 [style = bold, label=""];
27->15 [style = solid, label="bucketSeq"];
14->20 [style = dashed, label="0"];
2->0 [style = solid, label="scanRanges"];
13->5 [style = dotted, label="true"];
4->22 [style = dashed, label="0"];
9->7 [style = bold, label=""];
6->12 [style = solid, label="execHostPort"];
24->22 [style = bold, label=""];
26->24 [style = bold, label=""];
0->1 [style = solid, label="scanRangeParams"];
3->4 [style = bold, label=""];
12->2 [style = solid, label="scanRanges"];
15->12 [style = solid, label="execHostPort"];
13->11 [style = bold, label=""];
6->15 [style = bold, label=""];
13->10 [style = dotted, label="true"];
17->16 [style = dotted, label="true"];
22->3 [style = bold, label=""];
12->2 [style = bold, label=""];
3->23 [style = bold, label=""];
2->0 [style = bold, label=""];
25->22 [style = solid, label="seqLocation"];
16->12 [style = solid, label="assignment"];
6->15 [style = solid, label="execHostPort"];
23->6 [style = solid, label="execHostPort"];
11->3 [style = bold, label=""];
1->21 [style = bold, label=""];
26->28 [style = dotted, label="true"];
15->2 [style = solid, label="execHostPort"];
23->6 [style = bold, label=""];
17->19 [style = dotted, label="true"];
11->4 [style = solid, label="assignedBytesPerHost"];
26->29 [style = dotted, label="true"];
15->12 [style = bold, label=""];
20->3 [style = solid, label="assignedBytesPerHost"];
23->15 [style = solid, label="execHostPort"];
3->4 [style = solid, label="backendIdRef"];
5->2 [style = solid, label="assignment"];
13->14 [style = dotted, label="true"];
17->21 [style = bold, label=""];
21->3 [style = bold, label=""];
}
