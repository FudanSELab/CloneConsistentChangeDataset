digraph {
4 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Deque<RecordBatch> partitionBatches = accum.batches().get(tp1)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "LogEntry entry = iter.next()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(\"No partitions should be ready\",0,accum.ready(cluster,time.milliseconds()).readyNodes.size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertTrue(partitionBatchesIterator.next().records.isWritable())@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "long lingerMs = 10L@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(1,batches.size())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testFull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Iterator<LogEntry> iter = batch.records.iterator()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertTrue(partitionBatches.peekFirst().records.isWritable())@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "int i = 0@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int appends = 1024 / msgSize@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@34@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "time.sleep(10)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "List<RecordBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@25@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int i = 0@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "accum.append(tp1,0L,key,value,null,maxBlockTimeMs)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "LogEntry entry = iter.next()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "long now = time.milliseconds()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "int appends = batchSize / msgSize@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "accum.append(tp1,0L,key,value,null,maxBlockTimeMs)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(1,partitionBatches.size())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "testLinger['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(1024,10 * 1024,CompressionType.NONE,lingerMs,100L,metrics,time)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "i < appends@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "int batchSize = 1024@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),entry.record().value())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),entry.record().key())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "i++@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(1024,10 * 1024,CompressionType.NONE,10L,100L,metrics,time)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Iterator<LogEntry> iter = batch.records.iterator()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testFull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(2,partitionBatches.size())@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),entry.record().value())@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "RecordBatch batch = batches.get(0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(batchSize,10 * batchSize,CompressionType.NONE,10L,100L,metrics,time)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "RecordBatch batch = batches.get(0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Iterator<RecordBatch> partitionBatchesIterator = partitionBatches.iterator()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Deque<RecordBatch> partitionBatches = accum.batches().get(tp1)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "accum.append(tp1,0L,key,value,null,maxBlockTimeMs)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertFalse(partitionBatchesIterator.next().records.isWritable())@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "i < appends@@@28@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),entry.record().key())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"No partitions should be ready.\",0,accum.ready(cluster,now).readyNodes.size())@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0->4 [style = bold, label=""];
0->4 [style = solid, label="i"];
25->19 [style = bold, label=""];
5->1 [style = bold, label=""];
43->46 [style = bold, label=""];
4->0 [style = solid, label="i"];
19->0 [style = bold, label=""];
17->3 [style = bold, label=""];
4->0 [style = dotted, label="true"];
9->30 [style = bold, label=""];
46->40 [style = bold, label=""];
39->41 [style = bold, label=""];
7->36 [style = bold, label=""];
12->32 [style = bold, label=""];
4->19 [style = bold, label=""];
20->4 [style = solid, label="i"];
36->28 [style = bold, label=""];
18->11 [style = solid, label="i"];
4->9 [style = dotted, label="true"];
10->15 [style = bold, label=""];
24->27 [style = bold, label=""];
36->23 [style = solid, label="batchSize"];
34->25 [style = bold, label=""];
33->24 [style = bold, label=""];
4->21 [style = bold, label=""];
23->4 [style = bold, label=""];
8->20 [style = bold, label=""];
1->2 [style = bold, label=""];
6->11 [style = solid, label="i"];
17->6 [style = solid, label="i"];
41->45 [style = bold, label=""];
11->12 [style = dotted, label="true"];
36->28 [style = solid, label="batchSize"];
6->11 [style = bold, label=""];
20->4 [style = bold, label=""];
7->16 [style = bold, label=""];
16->8 [style = bold, label=""];
19->0 [style = solid, label="i"];
11->6 [style = solid, label="i"];
11->17 [style = bold, label=""];
11->6 [style = bold, label=""];
6->17 [style = dotted, label="true"];
44->10 [style = bold, label=""];
37->38 [style = bold, label=""];
6->29 [style = bold, label=""];
0->9 [style = dotted, label="true"];
17->6 [style = bold, label=""];
20->0 [style = solid, label="i"];
11->6 [style = dotted, label="true"];
4->19 [style = dotted, label="true"];
15->5 [style = bold, label=""];
35->15 [style = bold, label=""];
0->34 [style = dotted, label="true"];
6->12 [style = dotted, label="true"];
0->19 [style = dotted, label="true"];
4->19 [style = solid, label="i"];
11->3 [style = dotted, label="true"];
16->45 [style = dashed, label="0"];
0->22 [style = dotted, label="true"];
19->37 [style = bold, label=""];
23->0 [style = solid, label="appends"];
28->23 [style = bold, label=""];
8->4 [style = solid, label="appends"];
9->0 [style = bold, label=""];
11->17 [style = dotted, label="true"];
11->14 [style = bold, label=""];
21->10 [style = bold, label=""];
9->43 [style = dashed, label="0"];
38->44 [style = bold, label=""];
3->12 [style = bold, label=""];
6->3 [style = bold, label=""];
23->6 [style = solid, label="appends"];
27->31 [style = bold, label=""];
18->11 [style = bold, label=""];
12->6 [style = bold, label=""];
0->25 [style = dotted, label="true"];
13->7 [style = bold, label=""];
19->9 [style = bold, label=""];
11->17 [style = solid, label="i"];
6->32 [style = dotted, label="true"];
0->9 [style = bold, label=""];
18->6 [style = solid, label="i"];
42->43 [style = bold, label=""];
30->22 [style = bold, label=""];
0->30 [style = dotted, label="true"];
0->10 [style = bold, label=""];
41->45 [style = solid, label="lingerMs"];
31->35 [style = bold, label=""];
2->18 [style = bold, label=""];
22->34 [style = bold, label=""];
45->42 [style = bold, label=""];
32->17 [style = bold, label=""];
6->3 [style = dotted, label="true"];
26->7 [style = bold, label=""];
40->19 [style = bold, label=""];
8->11 [style = solid, label="appends"];
10->33 [style = bold, label=""];
4->0 [style = bold, label=""];
}
