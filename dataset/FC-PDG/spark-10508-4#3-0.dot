digraph {
2 [style = filled, label = "model.approxSimilarityJoin(transformedA,transformedB,1.5).show()@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "model.approxNearestNeighbors(dfA,key,2).show()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "MinHashLSHModel model = mh.fit(dataFrame)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "spark.stop()@@@22@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<Row> dataB = Arrays.asList(RowFactory.create(4,Vectors.dense(1.0,0.0)),RowFactory.create(5,Vectors.dense(-1.0,0.0)),RowFactory.create(6,Vectors.dense(0.0,1.0)),RowFactory.create(7,Vectors.dense(0.0,-1.0)))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "spark.stop()@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Vector key = Vectors.dense(1.0,0.0)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "System.out.println(\"Approximately joining dfA and dfB on distance smaller than 1.5:\")@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Dataset<Row> transformedA = model.transform(dfA).cache()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "List<Row> data = Arrays.asList(RowFactory.create(0,Vectors.sparse(6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a84bc0,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a84bc6)),RowFactory.create(1,Vectors.sparse(6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a84bd4,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a84bda)),RowFactory.create(2,Vectors.sparse(6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a84be8,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a84bee)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "BucketedRandomProjectionLSH mh = new BucketedRandomProjectionLSH().setBucketLength(2.0).setNumHashTables(3).setInputCol(\"keys\").setOutputCol(\"values\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "BucketedRandomProjectionLSHModel model = mh.fit(dfA)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "SparkSession spark = SparkSession.builder().appName(\"JavaMinHashLSHExample\").getOrCreate()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "model.approxNearestNeighbors(transformedA,key,2).show()@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "model.transform(dataFrame).show()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "main['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "BucketedRandomProjectionLSH mh = new BucketedRandomProjectionLSH().setBucketLength(2.0).setNumHashTables(3).setInputCol(\"features\").setOutputCol(\"hashes\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "SparkSession spark = SparkSession.builder().appName(\"JavaBucketedRandomProjectionLSHExample\").getOrCreate()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "main['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Dataset<Row> dataFrame = spark.createDataFrame(data,schema)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "System.out.println(\"Approximately searching dfA for 2 nearest neighbors of the key:\")@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "String(( args@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "System.out.println(\"The hashed dataset where hashed values are stored in the column 'hashes':\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "StructType schema = new StructType(new StructField((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a84b10)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "main['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "StructType schema = new StructType(new StructField((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a84bfa)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "MinHashLSH mh = new MinHashLSH().setNumHashTables(1).setInputCol(\"keys\").setOutputCol(\"values\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "model.approxNearestNeighbors(dfA,key,2).show()@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Dataset<Row> dfB = spark.createDataFrame(dataB,schema)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Dataset<Row> transformedB = model.transform(dfB).cache()@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "model.transform(dfA).show()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "model.approxSimilarityJoin(dfA,dfB,1.5,\"EuclideanDistance\").select(col(\"datasetA.id\").alias(\"idA\"),col(\"datasetB.id\").alias(\"idB\"),col(\"EuclideanDistance\")).show()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "model.approxSimilarityJoin(dfA,dfA,2.5).filter(\"datasetA.id < datasetB.id\").show()@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "spark.stop()@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Dataset<Row> dfA = spark.createDataFrame(dataA,schema)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<Row> dataA = Arrays.asList(RowFactory.create(0,Vectors.dense(1.0,1.0)),RowFactory.create(1,Vectors.dense(1.0,-1.0)),RowFactory.create(2,Vectors.dense(-1.0,-1.0)),RowFactory.create(3,Vectors.dense(-1.0,1.0)))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->19 [style = solid, label="dataA"];
32->35 [style = bold, label=""];
35->29 [style = bold, label=""];
15->14 [style = bold, label=""];
16->8 [style = bold, label=""];
26->10 [style = bold, label=""];
7->12 [style = bold, label=""];
9->2 [style = bold, label=""];
1->15 [style = bold, label=""];
19->12 [style = solid, label="dfA"];
30->0 [style = dotted, label="true"];
9->34 [style = solid, label="schema"];
12->20 [style = bold, label=""];
10->31 [style = dashed, label="0"];
2->18 [style = bold, label=""];
19->17 [style = bold, label=""];
6->19 [style = bold, label=""];
20->1 [style = bold, label=""];
33->9 [style = bold, label=""];
12->1 [style = bold, label=""];
34->32 [style = solid, label="dataFrame"];
6->17 [style = solid, label="schema"];
1->23 [style = bold, label=""];
28->32 [style = bold, label=""];
34->28 [style = bold, label=""];
3->10 [style = bold, label=""];
19->34 [style = dashed, label="0"];
23->24 [style = bold, label=""];
33->34 [style = solid, label="data"];
10->5 [style = bold, label=""];
18->4 [style = bold, label=""];
22->27 [style = bold, label=""];
24->21 [style = bold, label=""];
25->12 [style = bold, label=""];
21->22 [style = bold, label=""];
30->31 [style = bold, label=""];
31->33 [style = bold, label=""];
5->13 [style = bold, label=""];
5->33 [style = dashed, label="0"];
3->0 [style = dotted, label="true"];
7->25 [style = dashed, label="0"];
14->9 [style = bold, label=""];
13->6 [style = bold, label=""];
13->17 [style = solid, label="dataB"];
11->7 [style = bold, label=""];
4->16 [style = bold, label=""];
11->25 [style = bold, label=""];
26->0 [style = dotted, label="true"];
6->19 [style = solid, label="schema"];
17->11 [style = bold, label=""];
9->34 [style = bold, label=""];
}
