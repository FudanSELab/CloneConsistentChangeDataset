digraph {
0 [style = filled, label = "final CacheStrategy<ResultRow,Object,GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(null,QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()).getCacheStrategy(query1)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "final HavingSpec andHavingSpec = new AndHavingSpec(havings)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testResultLevelCacheKeyWithHavingSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Assert.assertFalse(Arrays.equals(strategy1.computeResultLevelCacheKey(query1),strategy2.computeResultLevelCacheKey(query2)))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1),strategy2.computeCacheKey(query2)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final GroupByQuery query1 = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).setPostAggregatorSpecs(ImmutableList.of(new ExpressionPostAggregator(\"post\",\"alias + 'x'\",null,TestExprMacroTable.INSTANCE))).setGranularity(QueryRunnerTestHelper.DAY_GRAN).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"post\",OrderByColumnSpec.Direction.DESCENDING)),Integer.MAX_VALUE)).setHavingSpec(andHavingSpec).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final HavingSpec andHavingSpec2 = new AndHavingSpec(havings2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final GroupByQuery query2 = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).setPostAggregatorSpecs(ImmutableList.of(new ExpressionPostAggregator(\"post\",\"alias + 'x'\",null,TestExprMacroTable.INSTANCE))).setGranularity(QueryRunnerTestHelper.DAY_GRAN).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"post\",OrderByColumnSpec.Direction.DESCENDING)),Integer.MAX_VALUE)).setHavingSpec(andHavingSpec2).build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1),strategy2.computeCacheKey(query2)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final CacheStrategy<ResultRow,Object,GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(null,QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()).getCacheStrategy(query1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final CacheStrategy<ResultRow,Object,GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(null,QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()).getCacheStrategy(query2)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "final CacheStrategy<ResultRow,Object,GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(null,QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()).getCacheStrategy(query2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final List<HavingSpec> havings2 = Arrays.asList(new GreaterThanHavingSpec(\"agg\",Double.valueOf(13.0)),new OrHavingSpec(Arrays.asList(new LessThanHavingSpec(\"lessAgg\",Long.valueOf(1L)),new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\",Double.valueOf(22))))))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final CacheStrategy<ResultRow,Object,GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(null).getCacheStrategy(query2)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testResultLevelCacheKeyWithHavingSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final CacheStrategy<ResultRow,Object,GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(null).getCacheStrategy(query1)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "final List<HavingSpec> havings = Arrays.asList(new GreaterThanHavingSpec(\"agg\",Double.valueOf(1.3)),new OrHavingSpec(Arrays.asList(new LessThanHavingSpec(\"lessAgg\",Long.valueOf(1L)),new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\",Double.valueOf(2))))))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertFalse(Arrays.equals(strategy1.computeResultLevelCacheKey(query1),strategy2.computeResultLevelCacheKey(query2)))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final GroupByQuery query1 = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).setPostAggregatorSpecs(ImmutableList.of(new ExpressionPostAggregator(\"post\",\"alias + 'x'\",null,TestExprMacroTable.INSTANCE))).setGranularity(QueryRunnerTestHelper.DAY_GRAN).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"post\",OrderByColumnSpec.Direction.DESCENDING)),Integer.MAX_VALUE)).setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.UNIQUE_METRIC,8)).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final GroupByQuery query2 = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).setPostAggregatorSpecs(ImmutableList.of(new ExpressionPostAggregator(\"post\",\"alias + 'x'\",null,TestExprMacroTable.INSTANCE))).setGranularity(QueryRunnerTestHelper.DAY_GRAN).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"post\",OrderByColumnSpec.Direction.DESCENDING)),Integer.MAX_VALUE)).setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.UNIQUE_METRIC,10)).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testResultLevelCacheKeyWithAndHavingSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
4->6 [style = solid, label="query2"];
20->17 [style = bold, label=""];
10->14 [style = bold, label=""];
0->6 [style = bold, label=""];
18->16 [style = solid, label="havings"];
19->20 [style = bold, label=""];
2->3 [style = bold, label=""];
8->3 [style = bold, label=""];
12->15 [style = bold, label=""];
19->20 [style = solid, label="havings2"];
6->9 [style = dashed, label="0"];
17->10 [style = solid, label="query1"];
17->12 [style = solid, label="query1"];
4->9 [style = solid, label="query2"];
3->7 [style = solid, label="query1"];
11->12 [style = solid, label="query2"];
16->19 [style = bold, label=""];
3->4 [style = bold, label=""];
4->7 [style = bold, label=""];
17->15 [style = solid, label="query1"];
4->0 [style = bold, label=""];
7->9 [style = bold, label=""];
6->1 [style = bold, label=""];
11->15 [style = solid, label="query2"];
3->1 [style = solid, label="query1"];
11->10 [style = bold, label=""];
3->5 [style = solid, label="query1"];
14->12 [style = bold, label=""];
4->1 [style = solid, label="query2"];
4->5 [style = solid, label="query2"];
9->1 [style = bold, label=""];
0->7 [style = dashed, label="0"];
3->0 [style = solid, label="query1"];
11->14 [style = solid, label="query2"];
13->18 [style = bold, label=""];
17->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
