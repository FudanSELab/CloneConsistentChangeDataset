digraph {
21 [style = filled, label = "assertThat(result,failedWith(2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(result,failedWith(3))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,,\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,,,3\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsComma['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,,,3\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,,,3', expected correct notation M,N or M-N\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(result,failedWith(3))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\",,2,3\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,2,,\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertThat(result,failedWith(3))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsHyphen['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,,', expected correct notation M,N or M-N\"))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,-', expected string with a range M-N\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"-,2,3\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,-,3\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\",,2,3\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,-\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"-,2,3\" is not a valid option\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse ',,2,3', expected correct notation M,N or M-N\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsComma['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,-,3', expected string with a range M-N\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->3 [style = bold, label=""];
5->4 [style = solid, label="result"];
0->16 [style = bold, label=""];
2->19 [style = dashed, label="0"];
15->4 [style = solid, label="result"];
7->1 [style = bold, label=""];
14->6 [style = solid, label="result"];
9->11 [style = bold, label=""];
22->19 [style = bold, label=""];
10->14 [style = bold, label=""];
6->22 [style = bold, label=""];
19->12 [style = bold, label=""];
19->12 [style = solid, label="result"];
11->6 [style = bold, label=""];
0->2 [style = bold, label=""];
16->7 [style = solid, label="result"];
19->7 [style = solid, label="result"];
6->0 [style = bold, label=""];
2->12 [style = solid, label="result"];
5->18 [style = dashed, label="0"];
4->21 [style = dashed, label="0"];
0->22 [style = dashed, label="0"];
14->11 [style = solid, label="result"];
12->7 [style = bold, label=""];
2->7 [style = solid, label="result"];
2->12 [style = bold, label=""];
9->23 [style = dashed, label="0"];
3->10 [style = bold, label=""];
5->3 [style = solid, label="result"];
7->24 [style = bold, label=""];
9->11 [style = solid, label="result"];
18->3 [style = solid, label="result"];
3->20 [style = bold, label=""];
9->14 [style = dashed, label="0"];
16->12 [style = solid, label="result"];
20->23 [style = bold, label=""];
8->5 [style = bold, label=""];
15->3 [style = solid, label="result"];
1->24 [style = dashed, label="0"];
18->21 [style = solid, label="result"];
2->16 [style = dashed, label="0"];
17->18 [style = bold, label=""];
5->4 [style = bold, label=""];
15->4 [style = bold, label=""];
10->20 [style = dashed, label="0"];
10->9 [style = bold, label=""];
13->15 [style = bold, label=""];
18->21 [style = bold, label=""];
23->11 [style = bold, label=""];
5->15 [style = dashed, label="0"];
23->11 [style = solid, label="result"];
9->6 [style = solid, label="result"];
14->11 [style = bold, label=""];
16->12 [style = bold, label=""];
23->6 [style = solid, label="result"];
21->3 [style = bold, label=""];
}
