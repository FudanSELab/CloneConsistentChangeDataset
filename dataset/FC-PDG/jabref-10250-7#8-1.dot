digraph {
16 [style = filled, label = "testImportIEEEExport['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(Optional.of(\"2006\"),entry.getField(StandardField.YEAR))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(Optional.of(\"387--391\"),entry.getField(StandardField.PAGES))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(1,entries.size())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<BibEntry> entries = importer.importDatabase(file,StandardCharsets.UTF_8).getDatabase().getEntries()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(Optional.of(\"Gamba, P. and Dell'Acqua, F. and Lisini, G.\"),entry.getField(StandardField.AUTHOR))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(Optional.of(\"Perceptual grouping, street extraction, urban remote sensing\"),entry.getField(StandardField.KEYWORDS))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(Optional.of(\"Improving Urban Road Extraction in High-Resolution \" + \"Images Exploiting Directional Filtering, Perceptual \" + \"Grouping, and Simple Topological Concepts\"),entry.getField(StandardField.TITLE))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(Optional.of(\"Lorem ipsum abstract\"),entry.getField(StandardField.ABSTRACT))@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(Optional.of(\"1545-598X\"),entry.getField(new UnknownField(\"SN\")))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(Optional.of(\"4\"),entry.getField(StandardField.VOLUME))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(StandardEntryType.Article,entry.getType())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(Optional.of(\"Geoscience and Remote Sensing Letters, IEEE\"),entry.getField(StandardField.JOURNAL))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testIEEEImport['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(Optional.of(\"3\"),entry.getField(StandardField.NUMBER))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testImportIEEEExport['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(Optional.of(\"Improving Urban Road Extraction in High-Resolution Images Exploiting Directional Filtering, Perceptual Grouping, and Simple Topological Concepts\"),entry.getField(StandardField.TITLE))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "BibEntry entry = entries.get(0)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Path file = Path.of(.getResource(\"IEEEImport1.txt\").toURI())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Path file = Paths.get(.getResource(\"IEEEImport1.txt\").toURI())@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->8 [style = bold, label=""];
5->10 [style = bold, label=""];
0->9 [style = bold, label=""];
2->3 [style = bold, label=""];
18->15 [style = bold, label=""];
3->11 [style = bold, label=""];
19->10 [style = bold, label=""];
15->6 [style = bold, label=""];
1->0 [style = bold, label=""];
4->2 [style = bold, label=""];
16->17 [style = bold, label=""];
12->1 [style = bold, label=""];
7->14 [style = bold, label=""];
6->4 [style = bold, label=""];
9->18 [style = bold, label=""];
10->8 [style = bold, label=""];
10->17 [style = dashed, label="0"];
13->15 [style = bold, label=""];
13->18 [style = dashed, label="0"];
8->12 [style = bold, label=""];
11->7 [style = bold, label=""];
9->13 [style = bold, label=""];
}
