digraph {
4 [style = filled, label = "unsubscribe['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Observable.switchOnNext(Observable.unsafeCreate(new ObservableSource<Observable<Integer>>(){@Override public void subscribe(final Observer<? super Observable<Integer>> observer){Disposable bs = Disposable.empty()observer.onSubscribe(bs)observer.onNext(Observable.just(1))isUnsubscribed.set(bs.isDisposed())}})).take(1).subscribe()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "unsubscribe['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "unsubscribe['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final AtomicBoolean isUnsubscribed = new AtomicBoolean()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Flowable.switchOnNext(Flowable.unsafeCreate(new Publisher<Flowable<Integer>>(){@Override public void subscribe(final Subscriber<? super Flowable<Integer>> subscriber){BooleanSubscription bs = new BooleanSubscription()subscriber.onSubscribe(bs)subscriber.onNext(Flowable.just(1))isUnsubscribed.set(bs.isCancelled())}})).take(1).subscribe()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(\"Switch doesn't propagate 'unsubscribe'\",isUnsubscribed.get())@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
3->1 [style = bold, label=""];
0->2 [style = bold, label=""];
6->1 [style = bold, label=""];
0->5 [style = dashed, label="0"];
4->1 [style = bold, label=""];
1->0 [style = bold, label=""];
1->5 [style = bold, label=""];
}
