digraph {
8 [style = filled, label = "assertEquals(0,connectionManager.size())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "connection.close()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(0,connectionManager.size())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertSame(connection,connectionManager.getConnection(node))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ConnectionManager.ConnectionValidator validator = null@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(0,nodeDisconnectedCount.get())@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "AtomicReference<Transport.Connection> connectionRef = new AtomicReference<>()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expectThrows(,null)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "connectionManager.connectToNode(node,connectionProfile,validator,fut)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertTrue(connection.isClosed())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "connectionManager.disconnectFromNode(node)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(1,connectionManager.size())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testConnectAndDisconnect['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "PlainActionFuture<Releasable> fut = new PlainActionFuture<>()@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertEquals(1,nodeConnectedCount.get())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(0,nodeDisconnectedCount.get())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "connectionManager.addListener(new TransportConnectionListener(){@Override public void onNodeConnected(DiscoveryNode node,Transport.Connection connection){nodeConnectedCount.incrementAndGet()}@Override public void onNodeDisconnected(DiscoveryNode node,Transport.Connection connection){nodeDisconnectedCount.incrementAndGet()}})@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(connectionManager.nodeConnected(node))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(0,nodeConnectedCount.get())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "randomBoolean()@@@36@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "expectThrows(,null)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testConnectFailsDuringConnect['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DiscoveryNode node = new DiscoveryNode(\"\",new TransportAddress(InetAddress.getLoopbackAddress(),0),Version.CURRENT)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "PlainActionFuture.get(null)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "ConnectionManager.ConnectionValidator validator = null@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Transport.Connection connection = new TestConnect(node)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testConnectFailsDuringConnect['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertFalse(connection.isClosed())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "AtomicInteger nodeConnectedCount = new AtomicInteger()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "expectThrows(,null)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "PlainActionFuture<Void> fut = new PlainActionFuture<>()@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(1,nodeConnectedCount.get())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(1,nodeDisconnectedCount.get())@@@45@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "AtomicInteger nodeDisconnectedCount = new AtomicInteger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertFalse(connectionManager.nodeConnected(node))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertFalse(connectionManager.nodeConnected(node))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "doAnswer(null).when(transport).openConnection(eq(node),eq(connectionProfile),anyActionListener())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
2->5 [style = solid, label="node"];
30->24 [style = bold, label=""];
17->5 [style = bold, label=""];
3->17 [style = dashed, label="0"];
23->30 [style = bold, label=""];
21->6 [style = bold, label=""];
2->6 [style = bold, label=""];
1->15 [style = bold, label=""];
18->11 [style = bold, label=""];
12->17 [style = bold, label=""];
36->31 [style = bold, label=""];
20->28 [style = bold, label=""];
2->21 [style = solid, label="node"];
2->12 [style = solid, label="node"];
14->12 [style = solid, label="fut"];
22->32 [style = bold, label=""];
0->29 [style = bold, label=""];
6->0 [style = bold, label=""];
21->36 [style = solid, label="connection"];
11->9 [style = bold, label=""];
25->35 [style = bold, label=""];
32->33 [style = bold, label=""];
34->11 [style = bold, label=""];
20->22 [style = bold, label=""];
0->7 [style = bold, label=""];
7->14 [style = bold, label=""];
28->32 [style = bold, label=""];
8->1 [style = bold, label=""];
2->24 [style = solid, label="node"];
29->27 [style = bold, label=""];
24->36 [style = bold, label=""];
3->5 [style = bold, label=""];
2->0 [style = solid, label="node"];
10->8 [style = bold, label=""];
2->6 [style = solid, label="node"];
33->25 [style = bold, label=""];
2->21 [style = bold, label=""];
19->26 [style = bold, label=""];
14->12 [style = bold, label=""];
7->12 [style = solid, label="validator"];
7->16 [style = bold, label=""];
2->36 [style = solid, label="node"];
2->22 [style = solid, label="node"];
13->2 [style = bold, label=""];
16->12 [style = solid, label="fut"];
27->23 [style = bold, label=""];
12->3 [style = bold, label=""];
20->22 [style = dotted, label="true"];
20->28 [style = dotted, label="false"];
14->16 [style = dashed, label="0"];
4->11 [style = bold, label=""];
16->12 [style = bold, label=""];
31->19 [style = bold, label=""];
26->20 [style = bold, label=""];
8->23 [style = dashed, label="0"];
9->13 [style = bold, label=""];
}
