digraph {
1 [style = filled, label = "String expectedMessage = \"\(\d+\( as \" + memberName + \" is currently online.\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testWithAvailablePort['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "int locatorPort = AvailablePortHelper.getRandomAvailableTCPPort()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "CommandResult result = gfsh.executeCommand(command.getCommandString())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String unexpectedMessage = \"(0( as \" + memberName + \" is currently online.\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(result.getStatus()).isEqualTo(Result.Status.OK)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(result.getMessageFromContent()).doesNotContain(unexpectedMessage)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "testWithDefaultLocatorPort['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String expectedMessage = \"(\" + locatorPort + \"( as \" + memberName + \" is currently online.\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "gfsh.executeAndAssertThat(command.getCommandString()).statusIsSuccess().hasOutput().doesNotContain(unexpectedMessage).containsPattern(expectedMessage)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(result.getMessageFromContent()).containsPattern(expectedMessage)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testWithDefaultLocatorPort['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "CommandStringBuilder command = new CommandStringBuilder(START_LOCATOR).addOption(START_LOCATOR__MEMBER_NAME,memberName).addOption(START_LOCATOR__LOCATORS,locatorConnectionString).addOption(START_LOCATOR__DIR,workingDir.getAbsolutePath()).addOption(START_LOCATOR__PORT,\"0\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "File workingDir = temporaryFolder.newFolder()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "CommandStringBuilder command = new CommandStringBuilder(START_LOCATOR).addOption(START_LOCATOR__MEMBER_NAME,memberName).addOption(START_LOCATOR__LOCATORS,locatorConnectionString).addOption(START_LOCATOR__DIR,workingDir.getAbsolutePath()).addOption(START_LOCATOR__PORT,String.valueOf(locatorPort))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(result.getMessageFromContent()).contains(expectedMessage)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1->8 [style = solid, label="expectedMessage"];
1->10 [style = solid, label="expectedMessage"];
9->0 [style = bold, label=""];
6->11 [style = dashed, label="0"];
1->3 [style = bold, label=""];
7->0 [style = bold, label=""];
3->15 [style = bold, label=""];
12->11 [style = solid, label="expectedMessage"];
2->10 [style = bold, label=""];
2->4 [style = bold, label=""];
2->15 [style = dashed, label="0"];
1->12 [style = dashed, label="0"];
0->6 [style = solid, label="unexpectedMessage"];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
14->15 [style = solid, label="locatorPort"];
14->12 [style = solid, label="locatorPort"];
0->1 [style = bold, label=""];
14->12 [style = bold, label=""];
6->8 [style = bold, label=""];
15->4 [style = bold, label=""];
5->11 [style = bold, label=""];
12->3 [style = bold, label=""];
4->10 [style = dashed, label="0"];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
}
