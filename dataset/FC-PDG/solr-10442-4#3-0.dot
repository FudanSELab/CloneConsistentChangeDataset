digraph {
9 [style = filled, label = "rlt.transform(replicas)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\"@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "rlt.transform(replicas)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ReplicaListTransformer rlt = generator.getReplicaListTransformer(params)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testNodePreferenceRulesBase['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"node3\",replicas.get(3).getNodeName())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(\"node2\",replicas.get(1).getNodeName())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(\"node2\",replicas.get(0).getNodeName())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\"@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"node4\",replicas.get(2).getNodeName())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "rlt.transform(replicas)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(\"node3\",replicas.get(1).getNodeName())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "params.set(\"routingPreference\",\"2\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node4\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"c1\",\"s1\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(\"node3\",replicas.get(0).getNodeName())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "params.add(\"routingPreference\",\"0\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(\"node3\",replicas.get(2).getNodeName())@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(\"node4\",replicas.get(1).getNodeName())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "replicaTypeAndReplicaBase['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "replicaTypeAndReplicaBase['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"node3\",replicas.get(3).getNodeName())@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"node3\",replicas.get(2).getNodeName())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "params.set(\"routingPreference\",\"3\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(\"node1\",replicas.get(2).getNodeName())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "params.set(\"routingPreference\",\"1\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(\"node1\",replicas.get(1).getNodeName())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "rlt.transform(replicas)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "params.add(ShardParams.SHARDS_PREFERENCE,rulesParam)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node4\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\")))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"node2\",replicas.get(1).getNodeName())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
12->13 [style = solid, label="params"];
6->13 [style = solid, label="rulesParam"];
18->14 [style = solid, label="replicas"];
18->30 [style = solid, label="replicas"];
18->33 [style = solid, label="replicas"];
27->38 [style = bold, label=""];
34->25 [style = bold, label=""];
12->14 [style = solid, label="params"];
40->35 [style = bold, label=""];
28->10 [style = bold, label=""];
21->6 [style = bold, label=""];
24->32 [style = bold, label=""];
8->3 [style = dashed, label="0"];
1->3 [style = bold, label=""];
23->26 [style = bold, label=""];
26->9 [style = bold, label=""];
4->29 [style = bold, label=""];
20->6 [style = bold, label=""];
2->9 [style = bold, label=""];
17->19 [style = bold, label=""];
9->16 [style = bold, label=""];
32->33 [style = bold, label=""];
31->34 [style = bold, label=""];
39->30 [style = bold, label=""];
5->16 [style = dashed, label="0"];
18->20 [style = bold, label=""];
3->23 [style = bold, label=""];
0->10 [style = bold, label=""];
12->32 [style = solid, label="params"];
33->40 [style = bold, label=""];
12->26 [style = solid, label="params"];
12->39 [style = solid, label="params"];
8->2 [style = bold, label=""];
18->27 [style = bold, label=""];
12->16 [style = solid, label="params"];
10->12 [style = bold, label=""];
38->7 [style = bold, label=""];
30->31 [style = bold, label=""];
3->8 [style = bold, label=""];
20->21 [style = dashed, label="0"];
27->7 [style = solid, label="rulesParam"];
12->18 [style = bold, label=""];
22->10 [style = bold, label=""];
11->17 [style = bold, label=""];
18->15 [style = solid, label="replicas"];
14->15 [style = bold, label=""];
5->11 [style = bold, label=""];
36->37 [style = bold, label=""];
18->21 [style = bold, label=""];
35->36 [style = bold, label=""];
16->4 [style = bold, label=""];
6->7 [style = bold, label=""];
18->4 [style = solid, label="replicas"];
29->24 [style = bold, label=""];
11->4 [style = dashed, label="0"];
13->14 [style = bold, label=""];
4->5 [style = bold, label=""];
37->39 [style = bold, label=""];
18->9 [style = solid, label="replicas"];
15->1 [style = bold, label=""];
}
