digraph {
2 [style = filled, label = "List<Integer> startOrder = new ArrayList<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(8,startOrder,stopOrder),Lifecycle.Stage.INIT)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(9,startOrder,stopOrder),Lifecycle.Stage.SERVER)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "Assert.assertEquals(expectedOrder,startOrder)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Lifecycle lifecycle = new Lifecycle()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(expectedOrder,startOrder)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(0,startOrder,stopOrder))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(6,startOrder,stopOrder),Lifecycle.Stage.LAST)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(Lists.reverse(expectedOrder),stopOrder)@@@24@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(1,startOrder,stopOrder),Lifecycle.Stage.NORMAL)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(10,startOrder.size())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "lifecycle.stop()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "final List<Integer> expectedOrder = Arrays.asList(0,1,2,4,5,7,3,6)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final List<Integer> expectedOrder = Arrays.asList(8,0,1,2,4,5,7,3,6)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(expectedStopOrder,stopOrder)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final List<Integer> expectedStopOrder = Arrays.asList(6,3,7,5,4,1,0,2)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "final List<Integer> stopOrder = new ArrayList<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(0,stopOrder.size())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "lifecycle.addHandler(new Lifecycle.Handler(){@Override public void start(){lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(1,startOrder,stopOrder),Lifecycle.Stage.NORMAL)lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(2,startOrder,stopOrder),Lifecycle.Stage.INIT)lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(3,startOrder,stopOrder),Lifecycle.Stage.LAST)lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(4,startOrder,stopOrder))lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(5,startOrder,stopOrder))lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(6,startOrder,stopOrder),Lifecycle.Stage.LAST)lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(7,startOrder,stopOrder))}@Override public void stop(){}})@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(3,startOrder,stopOrder),Lifecycle.Stage.ANNOUNCEMENTS)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(9,stopOrder.size())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(4,startOrder,stopOrder))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(10,startOrder.size())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "List<Integer> stopOrder = new ArrayList<>()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(0,stopOrder.size())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(expectedOrder,startOrder)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testSanity['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final List<Integer> expectedOrder = Arrays.asList(8,0,1,2,4,5,7,9,3,6)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "lifecycle.start()@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final Lifecycle lifecycle = new Lifecycle()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(2,startOrder,stopOrder),Lifecycle.Stage.NORMAL)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "lifecycle.start()@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(6,startOrder,stopOrder),Lifecycle.Stage.ANNOUNCEMENTS)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(3,startOrder,stopOrder),Lifecycle.Stage.LAST)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "testSanity['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "Assert.assertEquals(10,stopOrder.size())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(7,startOrder,stopOrder))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(5,startOrder,stopOrder))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(0,stopOrder.size())@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "lifecycle.stop()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testAddToLifecycleInStartMethod['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "lifecycle.start()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final List<Integer> startOrder = new ArrayList<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17->25 [style = bold, label=""];
21->10 [style = bold, label=""];
9->18 [style = solid, label="stopOrder"];
2->18 [style = solid, label="startOrder"];
9->5 [style = solid, label="stopOrder"];
40->33 [style = solid, label="stopOrder"];
2->16 [style = solid, label="startOrder"];
9->25 [style = solid, label="stopOrder"];
19->1 [style = bold, label=""];
13->24 [style = dashed, label="0"];
30->28 [style = bold, label=""];
19->30 [style = dashed, label="0"];
5->0 [style = bold, label=""];
9->16 [style = solid, label="stopOrder"];
37->33 [style = solid, label="startOrder"];
20->15 [style = bold, label=""];
35->31 [style = bold, label=""];
2->22 [style = solid, label="startOrder"];
2->3 [style = solid, label="startOrder"];
2->4 [style = solid, label="startOrder"];
27->30 [style = bold, label=""];
33->41 [style = bold, label=""];
1->35 [style = bold, label=""];
40->39 [style = solid, label="stopOrder"];
15->29 [style = dashed, label="0"];
34->42 [style = bold, label=""];
3->33 [style = bold, label=""];
2->9 [style = bold, label=""];
16->17 [style = bold, label=""];
6->42 [style = dashed, label="0"];
37->35 [style = solid, label="startOrder"];
24->5 [style = bold, label=""];
2->21 [style = solid, label="startOrder"];
9->22 [style = solid, label="stopOrder"];
9->13 [style = solid, label="stopOrder"];
9->3 [style = solid, label="stopOrder"];
37->3 [style = solid, label="startOrder"];
40->3 [style = bold, label=""];
6->27 [style = dashed, label="0"];
2->37 [style = dashed, label="0"];
13->5 [style = bold, label=""];
32->36 [style = bold, label=""];
11->8 [style = bold, label=""];
40->3 [style = solid, label="stopOrder"];
41->38 [style = bold, label=""];
2->24 [style = solid, label="startOrder"];
36->37 [style = bold, label=""];
15->29 [style = bold, label=""];
14->21 [style = bold, label=""];
38->39 [style = solid, label="expectedStopOrder"];
2->13 [style = solid, label="startOrder"];
4->24 [style = bold, label=""];
2->25 [style = solid, label="startOrder"];
2->0 [style = solid, label="startOrder"];
15->14 [style = bold, label=""];
2->12 [style = solid, label="startOrder"];
18->22 [style = dashed, label="0"];
22->16 [style = bold, label=""];
4->13 [style = bold, label=""];
42->39 [style = bold, label=""];
23->15 [style = bold, label=""];
2->5 [style = solid, label="startOrder"];
26->8 [style = bold, label=""];
9->0 [style = solid, label="stopOrder"];
7->20 [style = bold, label=""];
3->12 [style = bold, label=""];
37->42 [style = solid, label="startOrder"];
8->36 [style = dashed, label="0"];
10->6 [style = bold, label=""];
29->21 [style = bold, label=""];
38->1 [style = bold, label=""];
23->28 [style = solid, label="expectedOrder"];
31->34 [style = bold, label=""];
9->24 [style = solid, label="stopOrder"];
23->10 [style = solid, label="expectedOrder"];
9->17 [style = solid, label="stopOrder"];
6->27 [style = bold, label=""];
8->2 [style = bold, label=""];
19->39 [style = dashed, label="0"];
9->4 [style = solid, label="stopOrder"];
9->3 [style = bold, label=""];
0->18 [style = bold, label=""];
18->16 [style = bold, label=""];
9->1 [style = solid, label="stopOrder"];
25->23 [style = bold, label=""];
2->10 [style = solid, label="startOrder"];
9->12 [style = solid, label="stopOrder"];
6->19 [style = bold, label=""];
17->7 [style = bold, label=""];
2->17 [style = solid, label="startOrder"];
9->40 [style = dashed, label="0"];
7->21 [style = solid, label="expectedOrder"];
12->4 [style = bold, label=""];
9->28 [style = solid, label="stopOrder"];
41->42 [style = solid, label="expectedOrder"];
0->22 [style = bold, label=""];
41->35 [style = solid, label="expectedOrder"];
7->1 [style = solid, label="expectedOrder"];
37->40 [style = bold, label=""];
}
