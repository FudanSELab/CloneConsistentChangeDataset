digraph {
3 [style = filled, label = "testGroupByAndOrderByOrdinalOfAlias['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testQuery(\"SELECT cnt as theCnt, COUNT(*) FROM druid.foo GROUP BY 1 ORDER BY 1 ASC\",ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\",\"d0\",ValueType.LONG))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"d0\",OrderByColumnSpec.Direction.ASCENDING,StringComparators.NUMERIC)),Integer.MAX_VALUE)).setContext(QUERY_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8ced7c))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "testGroupByAndOrderByOrdinalOfAlias['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testQuery(\"SELECT cnt as theCnt, COUNT(*) FROM druid.foo GROUP BY 1 ORDER BY 1 ASC\",ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\",\"d0\",ValueType.LONG))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setLimitSpec(DefaultLimitSpec.builder().orderBy(new OrderByColumnSpec(\"d0\",OrderByColumnSpec.Direction.ASCENDING,StringComparators.NUMERIC)).build()).setContext(QUERY_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8cedce))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testExpressionFilteringAndGrouping['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testQuery(\"SELECT\" + \" FLOOR(m1 / 2) * 2,\" + \" COUNT(*)\" + \"FROM druid.foo\" + \"WHERE FLOOR(m1 / 2) * 2 > -1\" + \"GROUP BY FLOOR(m1 / 2) * 2\" + \"ORDER BY 1 DESC\",ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setVirtualColumns(expressionVirtualColumn(\"v0\",\"(floor((\"m1\" / 2)) * 2)\",ValueType.FLOAT)).setDimFilter(bound(\"v0\",\"-1\",null,true,false,null,StringComparators.NUMERIC)).setDimensions(dimensions(new DefaultDimensionSpec(\"v0\",\"d0\",ValueType.FLOAT))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"d0\",OrderByColumnSpec.Direction.DESCENDING,StringComparators.NUMERIC)),Integer.MAX_VALUE)).setContext(QUERY_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8cee42,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8cee47,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8cee4c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8cee51))@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "cannotVectorize()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->5 [style = bold, label=""];
0->2 [style = dashed, label="0"];
1->0 [style = bold, label=""];
3->2 [style = bold, label=""];
4->6 [style = bold, label=""];
}
