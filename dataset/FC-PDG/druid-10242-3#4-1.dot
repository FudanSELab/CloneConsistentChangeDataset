digraph {
1 [style = filled, label = "Assert.assertEquals(new SegmentPublishResult(ImmutableSet.of(),false),result2)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(SegmentPublishResult.fail(\"java.lang.RuntimeException: Aborting transaction!\"),result2)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(new SegmentPublishResult(ImmutableSet.of(defaultSegment),true),result1)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final SegmentPublishResult result2 = coordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment2),new ObjectMetadata(ImmutableMap.of(\"foo\",\"qux\")),new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(2,metadataUpdateCounter.get())@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testTransactionalAnnounceFailDbNotNullWantDifferent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final SegmentPublishResult result1 = coordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment),new ObjectMetadata(null),new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final SegmentPublishResult result2 = coordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment2),new ObjectMetadata(null),new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testTransactionalAnnounceFailDbNotNullWantNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testTransactionalAnnounceFailDbNotNullWantNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(SegmentPublishResult.ok(ImmutableSet.of(defaultSegment)),result1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
0->6 [style = solid, label="result1"];
3->6 [style = dashed, label="0"];
2->1 [style = solid, label="result2"];
0->6 [style = bold, label=""];
2->1 [style = bold, label=""];
7->0 [style = bold, label=""];
4->0 [style = bold, label=""];
6->2 [style = bold, label=""];
3->9 [style = bold, label=""];
0->3 [style = solid, label="result1"];
3->2 [style = bold, label=""];
8->5 [style = bold, label=""];
2->9 [style = dashed, label="0"];
10->0 [style = bold, label=""];
9->1 [style = solid, label="result2"];
1->8 [style = dashed, label="0"];
2->8 [style = solid, label="result2"];
9->1 [style = bold, label=""];
2->8 [style = bold, label=""];
}
