digraph {
1 [style = filled, label = "assertTrue(testTable.baseFileExists(p0,\"001\",file1P0))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "HoodieWriteConfig config = HoodieWriteConfig.newBuilder().withPath(basePath).withAssumeDatePartitioning(true).withCompactionConfig(HoodieCompactionConfig.newBuilder().withCleanerPolicy(HoodieCleaningPolicy.KEEP_LATEST_FILE_VERSIONS).retainFileVersions(1).build()).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testKeepLatestFileVersionsMOR['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(3,getCleanStat(hoodieCleanStats,p0).getSuccessDeleteFiles().size(),\"Must clean three files, one parquet and 2 log files\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(testTable.logFileExists(p0,\"001\",file1P0,3))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "HoodieTableMetaClient metaClient = HoodieTestUtils.init(hadoopConf,basePath,HoodieTableType.MERGE_ON_READ)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertFalse(testTable.logFilesExist(p0,\"000\",file1P0,1,2))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<HoodieCleanStat> hoodieCleanStats = runCleaner(config)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertFalse(testTable.baseFileExists(p0,\"000\",file1P0))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String p0 = \"2020/01/01\"@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testTable.forDeltaCommit(\"000\").withLogFile(p0,file1P0,1).withLogFile(p0,file1P0,2)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testKeepLatestFileVersionsMOR['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testTable.addDeltaCommit(\"001\").withBaseFilesInPartition(p0,file1P0).withLogFile(p0,file1P0,3)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "HoodieTestTable testTable = HoodieTestTable.of(metaClient)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testKeepLatestVersionsWithPendingCompactions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "String file1P0 = testTable.addDeltaCommit(\"000\").withBaseFilesInPartitions(p0).get(p0)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "HoodieWriteConfig config = HoodieWriteConfig.newBuilder().withPath(basePath).withAssumeDatePartitioning(true).withCompactionConfig(HoodieCompactionConfig.newBuilder().withCleanerPolicy(HoodieCleaningPolicy.KEEP_LATEST_FILE_VERSIONS).retainFileVersions(2).build()).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testPendingCompactions(config,36,9,retryFailure)@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "String file1P0 = testTable.addDeltaCommit(\"000\").getFileIdsWithBaseFilesInPartitions(p0).get(p0)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "boolean retryFailure@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10->15 [style = dashed, label="0"];
8->10 [style = bold, label=""];
4->3 [style = bold, label=""];
10->1 [style = solid, label="file1P0"];
15->13 [style = bold, label=""];
8->15 [style = bold, label=""];
8->0 [style = solid, label="p0"];
8->9 [style = solid, label="p0"];
3->1 [style = bold, label=""];
16->19 [style = solid, label="retryFailure"];
18->16 [style = dotted, label="true"];
2->6 [style = bold, label=""];
15->4 [style = solid, label="file1P0"];
0->2 [style = bold, label=""];
18->17 [style = bold, label=""];
11->12 [style = bold, label=""];
8->1 [style = solid, label="p0"];
10->3 [style = solid, label="file1P0"];
8->3 [style = solid, label="p0"];
15->3 [style = solid, label="file1P0"];
17->19 [style = bold, label=""];
10->4 [style = solid, label="file1P0"];
15->13 [style = solid, label="file1P0"];
1->9 [style = bold, label=""];
8->4 [style = solid, label="p0"];
8->13 [style = solid, label="p0"];
6->4 [style = bold, label=""];
7->5 [style = bold, label=""];
15->9 [style = solid, label="file1P0"];
5->17 [style = dashed, label="0"];
10->13 [style = bold, label=""];
10->0 [style = solid, label="file1P0"];
12->8 [style = bold, label=""];
10->9 [style = solid, label="file1P0"];
5->2 [style = solid, label="config"];
15->1 [style = solid, label="file1P0"];
10->13 [style = solid, label="file1P0"];
11->12 [style = solid, label="metaClient"];
17->19 [style = solid, label="config"];
5->11 [style = bold, label=""];
8->10 [style = solid, label="p0"];
15->0 [style = solid, label="file1P0"];
8->15 [style = solid, label="p0"];
13->0 [style = bold, label=""];
14->5 [style = bold, label=""];
}
