digraph {
2 [style = filled, label = "j.createSlave(\"aNode1\",\"\",null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "j.createSlave(\"aNode2\",\"\",null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "deleteNodeManyShouldFailIfFirstNodeDoesNotExist['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(result.stderr(),containsString(\"never_created2: No such node 'never_created2'\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(result.stderr(),containsString(\"never_created: No such node 'never_created'\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(j.jenkins.getView(\"aNode2\"),nullValue())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "deleteNodeManyShouldFailIfFirstNodeDoesNotExist['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.DELETE,Jenkins.READ).invokeWithArgs(\"aNode1\",\"never_created1\",\"never_created2\",\"aNode2\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "deleteNodeManyShouldFailIfMoreNodesDoNotExist['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(j.jenkins.getView(\"aNode1\"),nullValue())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Error occured while performing this command, see previous stderr output.\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertThat(j.jenkins.getView(\"never_created1\"),nullValue())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.DELETE,Jenkins.READ).invokeWithArgs(\"never_created\",\"aNode1\",\"aNode2\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(result.stderr(),containsString(\"never_created1: No such node 'never_created1'\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(result,failedWith(5))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Error occured while performing this command, see previous stderr output.\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(j.jenkins.getView(\"never_created2\"),nullValue())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0->9 [style = bold, label=""];
16->13 [style = bold, label=""];
7->1 [style = bold, label=""];
4->6 [style = bold, label=""];
11->1 [style = bold, label=""];
8->18 [style = bold, label=""];
4->15 [style = bold, label=""];
1->3 [style = bold, label=""];
6->0 [style = solid, label="result"];
7->11 [style = dashed, label="0"];
6->0 [style = bold, label=""];
15->0 [style = solid, label="result"];
2->4 [style = bold, label=""];
9->16 [style = bold, label=""];
13->1 [style = bold, label=""];
5->16 [style = dashed, label="0"];
15->9 [style = solid, label="result"];
12->2 [style = bold, label=""];
6->9 [style = solid, label="result"];
17->2 [style = bold, label=""];
6->15 [style = dashed, label="0"];
3->8 [style = bold, label=""];
15->0 [style = bold, label=""];
9->5 [style = bold, label=""];
5->7 [style = bold, label=""];
8->18 [style = dashed, label="0"];
10->2 [style = bold, label=""];
5->11 [style = bold, label=""];
18->14 [style = bold, label=""];
}
