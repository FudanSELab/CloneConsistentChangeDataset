digraph {
11 [style = filled, label = "int i = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(initialRecords.size(),polledRecords.size())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "i++@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Thread.sleep(200)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Set<StreamPartition<Integer>> partitions = ImmutableSet.of(StreamPartition.of(topic,0),StreamPartition.of(topic,1))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "polledRecords.size() != initialRecords.size() && i < pollRetry@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "recordSupplier.close()@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testPollCustomDeserializer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "properties.put(\"value.deserializer\",.getName())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "recordSupplier.seekToEarliest(partitions)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "recordSupplier.close()@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(partitions,recordSupplier.getAssignment())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "polledRecords.addAll(recordSupplier.poll(poll_timeout_millis))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(initialRecords.size(),polledRecords.size())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "KafkaRecordSupplier recordSupplier = new KafkaRecordSupplier(properties,OBJECT_MAPPER)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "testPoll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "insertData()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "KafkaRecordSupplier recordSupplier = new KafkaRecordSupplier(properties,objectMapper)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "List<OrderedPartitionableRecord<Integer,Long>> initialRecords = new ArrayList<>(createOrderedPartitionableRecords())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Map<String,Object> properties = kafkaServer.consumerProperties()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testPollCustomDeserializer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "properties.put(\"key.deserializer\",.getName())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i++@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(initialRecords.containsAll(polledRecords))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "List<OrderedPartitionableRecord<Integer,Long>> polledRecords = recordSupplier.poll(poll_timeout_millis)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "KafkaRecordSupplier recordSupplier = new KafkaRecordSupplier(kafkaServer.consumerProperties(),objectMapper)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "recordSupplier.assign(partitions)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(initialRecords.containsAll(polledRecords))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->9 [style = solid, label="i"];
12->17 [style = dotted, label="true"];
0->9 [style = bold, label=""];
9->12 [style = dotted, label="true"];
9->0 [style = dotted, label="true"];
15->17 [style = solid, label="partitions"];
2->20 [style = dashed, label="0"];
14->26 [style = solid, label="polledRecords"];
9->0 [style = bold, label=""];
26->7 [style = bold, label=""];
25->22 [style = bold, label=""];
7->10 [style = bold, label=""];
15->25 [style = bold, label=""];
10->19 [style = bold, label=""];
8->3 [style = bold, label=""];
12->17 [style = bold, label=""];
4->26 [style = bold, label=""];
11->9 [style = solid, label="i"];
9->17 [style = bold, label=""];
20->14 [style = bold, label=""];
3->15 [style = bold, label=""];
23->3 [style = bold, label=""];
18->20 [style = solid, label="properties"];
11->9 [style = bold, label=""];
19->6 [style = bold, label=""];
12->0 [style = bold, label=""];
15->18 [style = bold, label=""];
15->7 [style = solid, label="partitions"];
12->7 [style = bold, label=""];
24->14 [style = bold, label=""];
1->16 [style = solid, label="i"];
18->25 [style = dashed, label="0"];
22->27 [style = bold, label=""];
0->19 [style = solid, label="polledRecords"];
12->16 [style = dotted, label="true"];
0->1 [style = bold, label=""];
18->5 [style = bold, label=""];
5->13 [style = bold, label=""];
1->12 [style = solid, label="i"];
2->14 [style = bold, label=""];
9->1 [style = dotted, label="true"];
1->12 [style = bold, label=""];
15->14 [style = solid, label="partitions"];
16->12 [style = solid, label="i"];
15->22 [style = solid, label="partitions"];
27->24 [style = bold, label=""];
12->4 [style = dotted, label="true"];
9->1 [style = bold, label=""];
11->0 [style = solid, label="i"];
15->27 [style = solid, label="partitions"];
18->2 [style = solid, label="properties"];
14->11 [style = bold, label=""];
16->12 [style = bold, label=""];
17->4 [style = bold, label=""];
4->16 [style = bold, label=""];
21->3 [style = bold, label=""];
13->2 [style = bold, label=""];
13->20 [style = bold, label=""];
15->11 [style = solid, label="partitions"];
}
