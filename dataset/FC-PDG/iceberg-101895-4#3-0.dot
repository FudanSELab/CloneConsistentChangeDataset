digraph {
2 [style = filled, label = "assertBounds(1,FloatType.get(),1.2F,5.6F,metrics)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Metrics metrics = getMetrics(FLOAT_DOUBLE_ONLY_SCHEMA,NAN_ONLY_RECORD,NAN_ONLY_RECORD)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertCounts(2,2L,0L,2L,metrics)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertCounts(1,2L,0L,2L,metrics)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertBounds(1,FloatType.get(),Float.NaN,Float.NaN,metrics)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testMetricsForNaNColumns['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertBounds(2,DoubleType.get(),3.4D,Double.NaN,metrics)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertCounts(2,3L,0L,1L,metrics)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertCounts(1,3L,0L,1L,metrics)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Metrics metrics = getMetrics(FLOAT_DOUBLE_ONLY_SCHEMA,FLOAT_DOUBLE_RECORD_1,FLOAT_DOUBLE_RECORD_2,NAN_ONLY_RECORD)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(2L,(long)metrics.recordCount())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testColumnBoundsWithNaNValueAtEnd['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertBounds(2,DoubleType.get(),Double.NaN,Double.NaN,metrics)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "fileFormat() == FileFormat.ORC@@@7@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(3L,(long)metrics.recordCount())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testColumnBoundsWithNaNValueAtEnd['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertBounds(2,DoubleType.get(),3.4D,7.8D,metrics)@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertBounds(1,FloatType.get(),1.2F,Float.NaN,metrics)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->0 [style = solid, label="metrics"];
5->1 [style = solid, label="metrics"];
8->3 [style = dotted, label="false"];
1->8 [style = bold, label=""];
16->11 [style = bold, label=""];
8->6 [style = dotted, label="false"];
8->2 [style = dotted, label="true"];
8->3 [style = bold, label=""];
12->15 [style = bold, label=""];
0->15 [style = dashed, label="0"];
3->6 [style = bold, label=""];
7->0 [style = bold, label=""];
11->12 [style = bold, label=""];
2->9 [style = bold, label=""];
11->17 [style = solid, label="metrics"];
11->14 [style = solid, label="metrics"];
15->17 [style = bold, label=""];
1->17 [style = dashed, label="0"];
5->2 [style = solid, label="metrics"];
10->5 [style = bold, label=""];
2->14 [style = dashed, label="0"];
8->2 [style = bold, label=""];
5->11 [style = dashed, label="0"];
0->1 [style = bold, label=""];
11->15 [style = solid, label="metrics"];
5->3 [style = solid, label="metrics"];
7->12 [style = dashed, label="0"];
5->7 [style = bold, label=""];
5->9 [style = solid, label="metrics"];
1->2 [style = bold, label=""];
17->13 [style = bold, label=""];
5->6 [style = solid, label="metrics"];
11->13 [style = solid, label="metrics"];
8->9 [style = dotted, label="true"];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
}
