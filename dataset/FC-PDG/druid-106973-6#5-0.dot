digraph {
30 [style = filled, label = "Assert.assertEquals(singleValueSum,result.getMetric(\"singleFloatSum\").floatValue(),0.0001f)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(multiValueMax,result.getDoubleMetric(\"multiDoubleMax\").doubleValue(),0.0001d)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Sequence seq = AggregationTestHelper.createTimeseriesQueryAggregationTestHelper(Collections.emptyList(),tempFolder).runQueryOnSegmentsObjs(segments,query)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Assert.assertEquals(singleValueSum,result.getFloatMetric(\"singleFloatSum\").floatValue(),0.0001f)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(singleValueMax,result.getMetric(\"singleFloatMax\").floatValue(),0.0001f)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(multiValueSum,result.getMetric(\"multiFloatSum\").floatValue(),0.0001f)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(numRows,result.getMetric(\"count\").longValue())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(multiValueMax,result.getFloatMetric(\"multiFloatMax\").floatValue(),0.0001f)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(singleValueSum,result.getDoubleMetric(\"singleDoubleSum\").doubleValue(),0.0001d)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(singleValueMin,result.getMetric(\"singleFloatMin\").floatValue(),0.0001f)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Assert.assertEquals(multiValueMax,result.getMetric(\"multiFloatMax\").floatValue(),0.0001f)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(multiValueMin,result.getMetric(\"multiFloatMin\").floatValue(),0.0001f)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals((long)singleValueMax,result.getMetric(\"singleLongMax\").longValue())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertEquals((long)multiValueMax,result.getMetric(\"multiLongMax\").longValue())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(singleValueMax,result.getDoubleMetric(\"singleDoubleMax\").doubleValue(),0.0001d)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals((long)singleValueMin,result.getMetric(\"singleLongMin\").longValue())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Sequence<ResultRow> seq = aggregationTestHelper.runQueryOnSegmentsObjs(segments,query)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertEquals(singleValueMin,result.getMetric(\"singleDoubleMin\").doubleValue(),0.0001d)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(singleValueSum,result.getMetric(\"singleDoubleSum\").doubleValue(),0.0001d)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals((long)singleValueSum,result.getLongMetric(\"singleLongSum\").longValue())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(singleValueMax,result.getFloatMetric(\"singleFloatMax\").floatValue(),0.0001f)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(singleValueMin,result.getFloatMetric(\"singleFloatMin\").floatValue(),0.0001f)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(multiValueSum,result.getFloatMetric(\"multiFloatSum\").floatValue(),0.0001f)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(multiValueSum,result.getMetric(\"multiDoubleSum\").doubleValue(),0.0001d)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(multiValueMax,result.getMetric(\"multiDoubleMax\").doubleValue(),0.0001d)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertEquals((long)multiValueSum,result.getMetric(\"multiLongSum\").longValue())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(numRows,result.getLongMetric(\"count\").longValue())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(singleValueMin,result.getDoubleMetric(\"singleDoubleMin\").doubleValue(),0.0001d)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(singleValueMax,result.getMetric(\"singleDoubleMax\").doubleValue(),0.0001d)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(multiValueMin,result.getMetric(\"multiDoubleMin\").doubleValue(),0.0001d)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals((long)multiValueSum,result.getLongMetric(\"multiLongSum\").longValue())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Sequence seq = AggregationTestHelper.createTimeseriesQueryAggregationTestHelper(Collections.EMPTY_LIST,tempFolder).runQueryOnSegmentsObjs(segments,query)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals((long)multiValueMin,result.getLongMetric(\"multiLongMin\").longValue())@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "GroupByQuery query = new GroupByQuery.Builder().setDataSource(\"test\").setGranularity(Granularities.ALL).setInterval(\"1970/2050\").setAggregatorSpecs(new DoubleSumAggregatorFactory(\"singleDoubleSum\",singleValue),new DoubleSumAggregatorFactory(\"multiDoubleSum\",multiValue),new DoubleMaxAggregatorFactory(\"singleDoubleMax\",singleValue),new DoubleMaxAggregatorFactory(\"multiDoubleMax\",multiValue),new DoubleMinAggregatorFactory(\"singleDoubleMin\",singleValue),new DoubleMinAggregatorFactory(\"multiDoubleMin\",multiValue),new FloatSumAggregatorFactory(\"singleFloatSum\",singleValue),new FloatSumAggregatorFactory(\"multiFloatSum\",multiValue),new FloatMaxAggregatorFactory(\"singleFloatMax\",singleValue),new FloatMaxAggregatorFactory(\"multiFloatMax\",multiValue),new FloatMinAggregatorFactory(\"singleFloatMin\",singleValue),new FloatMinAggregatorFactory(\"multiFloatMin\",multiValue),new LongSumAggregatorFactory(\"singleLongSum\",singleValue),new LongSumAggregatorFactory(\"multiLongSum\",multiValue),new LongMaxAggregatorFactory(\"singleLongMax\",singleValue),new LongMaxAggregatorFactory(\"multiLongMax\",multiValue),new LongMinAggregatorFactory(\"singleLongMin\",singleValue),new LongMinAggregatorFactory(\"multiLongMin\",multiValue),new LongSumAggregatorFactory(\"count\",\"count\")).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals((long)multiValueMax,result.getLongMetric(\"multiLongMax\").longValue())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals((long)multiValueMin,result.getMetric(\"multiLongMin\").longValue())@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals((long)singleValueMax,result.getLongMetric(\"singleLongMax\").longValue())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals((long)singleValueMin,result.getLongMetric(\"singleLongMin\").longValue())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TimeseriesResultValue result = ((Result<TimeseriesResultValue>)Iterables.getOnlyElement(seq.toList())).getValue()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Row result = Iterables.getOnlyElement(seq.toList()).toMapBasedRow(query)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(multiValueSum,result.getDoubleMetric(\"multiDoubleSum\").doubleValue(),0.0001d)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"test\").granularity(Granularities.ALL).intervals(\"1970/2050\").aggregators(new DoubleSumAggregatorFactory(\"singleDoubleSum\",singleValue),new DoubleSumAggregatorFactory(\"multiDoubleSum\",multiValue),new DoubleMaxAggregatorFactory(\"singleDoubleMax\",singleValue),new DoubleMaxAggregatorFactory(\"multiDoubleMax\",multiValue),new DoubleMinAggregatorFactory(\"singleDoubleMin\",singleValue),new DoubleMinAggregatorFactory(\"multiDoubleMin\",multiValue),new FloatSumAggregatorFactory(\"singleFloatSum\",singleValue),new FloatSumAggregatorFactory(\"multiFloatSum\",multiValue),new FloatMaxAggregatorFactory(\"singleFloatMax\",singleValue),new FloatMaxAggregatorFactory(\"multiFloatMax\",multiValue),new FloatMinAggregatorFactory(\"singleFloatMin\",singleValue),new FloatMinAggregatorFactory(\"multiFloatMin\",multiValue),new LongSumAggregatorFactory(\"singleLongSum\",singleValue),new LongSumAggregatorFactory(\"multiLongSum\",multiValue),new LongMaxAggregatorFactory(\"singleLongMax\",singleValue),new LongMaxAggregatorFactory(\"multiLongMax\",multiValue),new LongMinAggregatorFactory(\"singleLongMin\",singleValue),new LongMinAggregatorFactory(\"multiLongMin\",multiValue),new LongSumAggregatorFactory(\"count\",\"count\")).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(multiValueMin,result.getDoubleMetric(\"multiDoubleMin\").doubleValue(),0.0001d)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testGroupBy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(multiValueMin,result.getFloatMetric(\"multiFloatMin\").floatValue(),0.0001f)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testTimeseries['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals((long)singleValueSum,result.getMetric(\"singleLongSum\").longValue())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testTimeseries['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2->42 [style = dashed, label="0"];
5->10 [style = bold, label=""];
46->42 [style = bold, label=""];
34->25 [style = bold, label=""];
30->41 [style = bold, label=""];
1->8 [style = bold, label=""];
35->29 [style = bold, label=""];
7->23 [style = dashed, label="0"];
24->2 [style = bold, label=""];
36->44 [style = bold, label=""];
11->1 [style = bold, label=""];
42->38 [style = solid, label="query"];
25->30 [style = bold, label=""];
19->20 [style = bold, label=""];
0->12 [style = bold, label=""];
28->39 [style = bold, label=""];
20->27 [style = dashed, label="0"];
16->25 [style = dashed, label="0"];
5->47 [style = dashed, label="0"];
2->23 [style = solid, label="query"];
12->31 [style = dashed, label="0"];
14->17 [style = bold, label=""];
32->27 [style = bold, label=""];
47->43 [style = bold, label=""];
10->21 [style = bold, label=""];
40->34 [style = bold, label=""];
0->39 [style = dashed, label="0"];
3->16 [style = bold, label=""];
18->2 [style = bold, label=""];
16->22 [style = bold, label=""];
15->3 [style = bold, label=""];
12->6 [style = bold, label=""];
17->29 [style = dashed, label="0"];
15->40 [style = dashed, label="0"];
13->26 [style = dashed, label="0"];
17->19 [style = bold, label=""];
4->0 [style = bold, label=""];
33->26 [style = bold, label=""];
9->37 [style = dashed, label="0"];
4->28 [style = dashed, label="0"];
7->9 [style = bold, label=""];
2->23 [style = bold, label=""];
6->5 [style = bold, label=""];
41->36 [style = bold, label=""];
3->34 [style = dashed, label="0"];
1->36 [style = dashed, label="0"];
6->45 [style = dashed, label="0"];
38->37 [style = bold, label=""];
39->31 [style = bold, label=""];
21->33 [style = dashed, label="0"];
29->32 [style = bold, label=""];
42->37 [style = solid, label="query"];
44->28 [style = bold, label=""];
7->38 [style = dashed, label="0"];
22->30 [style = dashed, label="0"];
9->14 [style = bold, label=""];
45->47 [style = bold, label=""];
11->41 [style = dashed, label="0"];
43->33 [style = bold, label=""];
14->35 [style = dashed, label="0"];
27->40 [style = bold, label=""];
10->43 [style = dashed, label="0"];
19->32 [style = dashed, label="0"];
2->7 [style = bold, label=""];
8->4 [style = bold, label=""];
37->35 [style = bold, label=""];
8->44 [style = dashed, label="0"];
20->15 [style = bold, label=""];
23->9 [style = bold, label=""];
31->45 [style = bold, label=""];
22->11 [style = bold, label=""];
42->38 [style = bold, label=""];
2->7 [style = solid, label="query"];
21->13 [style = bold, label=""];
}
