digraph {
27 [style = filled, label = "return notIn((BoundReference<T>)pred.term(),pred.asSetPredicate().literalSet())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "pred.isUnaryPredicate()@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "return lt((BoundReference<T>)pred.term(),literalPred.literal())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "return lt(pred.term(),literalPred.literal())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "pred.op()@@@25@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "BoundLiteralPredicate<T> literalPred = pred.asLiteralPredicate()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "pred.isLiteralPredicate()@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "return startsWith((BoundReference<T>)pred.term(),literalPred.literal())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "return notEq((BoundReference<T>)pred.term(),literalPred.literal())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "return isNull((BoundReference<T>)pred.term())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "return eq((BoundReference<T>)pred.term(),literalPred.literal())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "return gt(pred.term(),literalPred.literal())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "pred.op()@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "throw new IllegalStateException(\"Unsupported bound predicate: \" + pred.getClass().getName())@@@31@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "return notNull((BoundReference<T>)pred.term())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "return notEq(pred.term(),literalPred.literal())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return notIn(pred.term(),pred.asSetPredicate().literalSet())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "pred.op()@@@18@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "return gt((BoundReference<T>)pred.term(),literalPred.literal())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "return eq(pred.term(),literalPred.literal())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "return gtEq((BoundReference<T>)pred.term(),literalPred.literal())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "predicate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "return isNaN(pred.term())@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "throw new IllegalStateException(\"Invalid operation for BoundUnaryPredicate: \" + pred.op())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "predicate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "return ltEq(pred.term(),literalPred.literal())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "ValidationException.check(pred.term() instanceof BoundReference,\"Visitor %s does not support expression: %s\",this,pred.term())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "return in((BoundReference<T>)pred.term(),pred.asSetPredicate().literalSet())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "return notNaN(pred.term())@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "predicate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "return in(pred.term(),pred.asSetPredicate().literalSet())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "BoundPredicate<T> pred@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return startsWith(pred.term(),literalPred.literal())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return notNull(pred.term())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "return isNull(pred.term())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "throw new IllegalStateException(\"Invalid operation for BoundSetPredicate: \" + pred.op())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "return ltEq((BoundReference<T>)pred.term(),literalPred.literal())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "return gtEq(pred.term(),literalPred.literal())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "throw new IllegalStateException(\"Invalid operation for BoundLiteralPredicate: \" + pred.op())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "pred.isSetPredicate()@@@24@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14->39 [style = dashed, label="0"];
5->14 [style = dotted, label="true"];
5->14 [style = bold, label=""];
19->6 [style = bold, label=""];
5->22 [style = dotted, label="true"];
1->32 [style = dashed, label="0"];
4->26 [style = bold, label=""];
5->1 [style = bold, label=""];
4->30 [style = dotted, label="true"];
4->26 [style = dotted, label="true"];
3->17 [style = dotted, label="true"];
0->13 [style = dotted, label="true"];
5->32 [style = bold, label=""];
20->1 [style = bold, label=""];
4->2 [style = bold, label=""];
3->6 [style = bold, label=""];
4->24 [style = bold, label=""];
35->0 [style = bold, label=""];
0->7 [style = dotted, label="false"];
3->17 [style = bold, label=""];
4->19 [style = bold, label=""];
5->38 [style = dotted, label="true"];
17->23 [style = bold, label=""];
5->29 [style = bold, label=""];
17->8 [style = bold, label=""];
5->33 [style = bold, label=""];
29->38 [style = bold, label=""];
5->12 [style = bold, label=""];
1->22 [style = bold, label=""];
5->38 [style = bold, label=""];
4->28 [style = dotted, label="true"];
2->28 [style = dashed, label="0"];
5->32 [style = dotted, label="true"];
5->39 [style = dotted, label="true"];
17->18 [style = dotted, label="true"];
28->30 [style = bold, label=""];
26->24 [style = bold, label=""];
17->27 [style = bold, label=""];
11->10 [style = dotted, label="true"];
5->9 [style = dotted, label="true"];
0->7 [style = bold, label=""];
5->21 [style = dotted, label="true"];
25->10 [style = dotted, label="true"];
33->37 [style = bold, label=""];
5->37 [style = bold, label=""];
8->18 [style = bold, label=""];
34->10 [style = dotted, label="true"];
16->30 [style = dashed, label="0"];
4->19 [style = dotted, label="true"];
12->20 [style = bold, label=""];
22->33 [style = dashed, label="0"];
5->33 [style = dotted, label="true"];
5->22 [style = bold, label=""];
2->16 [style = bold, label=""];
18->27 [style = dashed, label="0"];
22->21 [style = bold, label=""];
34->35 [style = bold, label=""];
15->36 [style = dashed, label="0"];
32->33 [style = bold, label=""];
5->39 [style = bold, label=""];
13->5 [style = bold, label=""];
7->4 [style = dotted, label="true"];
21->15 [style = bold, label=""];
4->16 [style = bold, label=""];
21->37 [style = dashed, label="0"];
11->0 [style = bold, label=""];
16->19 [style = bold, label=""];
4->24 [style = dotted, label="true"];
5->15 [style = dotted, label="true"];
14->9 [style = bold, label=""];
5->12 [style = dotted, label="true"];
9->6 [style = bold, label=""];
7->3 [style = bold, label=""];
23->6 [style = bold, label=""];
5->21 [style = bold, label=""];
15->14 [style = bold, label=""];
12->29 [style = dashed, label="0"];
39->9 [style = bold, label=""];
17->8 [style = dotted, label="true"];
7->3 [style = dotted, label="false"];
8->31 [style = dashed, label="0"];
25->0 [style = bold, label=""];
24->19 [style = bold, label=""];
5->36 [style = bold, label=""];
18->23 [style = bold, label=""];
4->2 [style = dotted, label="true"];
38->32 [style = bold, label=""];
4->16 [style = dotted, label="true"];
16->26 [style = bold, label=""];
5->20 [style = dotted, label="true"];
17->23 [style = dotted, label="true"];
17->31 [style = dotted, label="true"];
27->23 [style = bold, label=""];
5->9 [style = bold, label=""];
0->13 [style = bold, label=""];
0->5 [style = dotted, label="true"];
5->36 [style = dotted, label="true"];
37->36 [style = bold, label=""];
4->28 [style = bold, label=""];
7->4 [style = bold, label=""];
20->38 [style = dashed, label="0"];
5->20 [style = bold, label=""];
17->27 [style = dotted, label="true"];
5->1 [style = dotted, label="true"];
4->30 [style = bold, label=""];
30->19 [style = bold, label=""];
5->29 [style = dotted, label="true"];
36->39 [style = bold, label=""];
31->27 [style = bold, label=""];
5->15 [style = bold, label=""];
5->37 [style = dotted, label="true"];
17->31 [style = bold, label=""];
17->18 [style = bold, label=""];
}
