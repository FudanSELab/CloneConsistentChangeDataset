digraph {
27 [style = filled, label = "assertEquals(1,client().prepareGet(\"test\",\"1\").get().getVersion())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"4\").get().getVersion())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"1\").get().getVersion())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertThat(updateByQuery().source(\"test\").refresh(true).setSlices(slices).get(),matcher().updated(4).slices(hasSize(expectedSlices)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"3\").get().getVersion())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "testBasics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"4\").get().getVersion())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"4\").get().getVersion())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"1\").get().getVersion())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(3,client().prepareGet(\"test\",\"test\",\"2\").get().getVersion())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"4\").get().getVersion())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(3,client().prepareGet(\"test\",\"test\",\"3\").get().getVersion())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertEquals(4,client().prepareGet(\"test\",\"1\").get().getVersion())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\",\"no_match\")).setSlices(slices).refresh(true).get(),matcher().updated(0).slices(hasSize(expectedSlices)))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\",\"a\")).refresh(true).setSlices(slices).get(),matcher().updated(2).slices(hasSize(expectedSlices)))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(1,client().prepareGet(\"test\",\"test\",\"1\").get().getVersion())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(1,client().prepareGet(\"test\",\"test\",\"4\").get().getVersion())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(3,client().prepareGet(\"test\",\"test\",\"2\").get().getVersion())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "testSlices['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(request.get(),matcher().updated(3))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"4\").get().getVersion())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertEquals(1,client().prepareGet(\"test\",\"4\").get().getVersion())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"3\").get().getVersion())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "int expectedSlices = expectedSliceStatuses(slices,\"test\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"1\").get().getVersion())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"4\").get().getVersion())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"4\").get().getVersion())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "indexRandom(true,client().prepareIndex(\"test\",\"test\",\"1\").setSource(\"foo\",\"a\"),client().prepareIndex(\"test\",\"test\",\"2\").setSource(\"foo\",\"a\"),client().prepareIndex(\"test\",\"test\",\"3\").setSource(\"foo\",\"b\"),client().prepareIndex(\"test\",\"test\",\"4\").setSource(\"foo\",\"c\"))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testBasics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"4\").get().getVersion())@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"1\").get().getVersion())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertThat(updateByQuery().source(\"test\").refresh(true).get(),matcher().updated(4))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"4\").get().getVersion())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(4,client().prepareGet(\"test\",\"2\").get().getVersion())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertEquals(3,client().prepareGet(\"test\",\"3\").get().getVersion())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertEquals(3,client().prepareGet(\"test\",\"1\").get().getVersion())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertEquals(3,client().prepareGet(\"test\",\"2\").get().getVersion())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "int slices = randomSlices(2,10)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"1\").get().getVersion())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setSize(0).get(),4)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(4,client().prepareGet(\"test\",\"test\",\"2\").get().getVersion())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"4\").get().getVersion())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(4,client().prepareGet(\"test\",\"test\",\"1\").get().getVersion())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertEquals(3,client().prepareGet(\"test\",\"test\",\"1\").get().getVersion())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->28 [style = bold, label=""];
16->11 [style = bold, label=""];
0->37 [style = dashed, label="0"];
16->27 [style = bold, label=""];
22->16 [style = bold, label=""];
25->23 [style = bold, label=""];
18->30 [style = dashed, label="0"];
31->32 [style = bold, label=""];
10->19 [style = bold, label=""];
0->12 [style = bold, label=""];
11->6 [style = bold, label=""];
35->22 [style = bold, label=""];
1->3 [style = bold, label=""];
9->17 [style = bold, label=""];
5->18 [style = bold, label=""];
28->1 [style = bold, label=""];
7->31 [style = bold, label=""];
32->34 [style = bold, label=""];
14->36 [style = dashed, label="0"];
12->9 [style = bold, label=""];
7->8 [style = bold, label=""];
34->30 [style = bold, label=""];
5->34 [style = dashed, label="0"];
38->40 [style = solid, label="slices"];
37->12 [style = bold, label=""];
15->22 [style = bold, label=""];
12->41 [style = dashed, label="0"];
20->10 [style = bold, label=""];
6->2 [style = bold, label=""];
43->40 [style = solid, label="expectedSlices"];
9->41 [style = bold, label=""];
43->40 [style = bold, label=""];
4->32 [style = dashed, label="0"];
13->39 [style = dashed, label="0"];
40->12 [style = bold, label=""];
19->1 [style = bold, label=""];
6->38 [style = bold, label=""];
43->39 [style = solid, label="expectedSlices"];
29->2 [style = bold, label=""];
6->29 [style = dashed, label="0"];
21->20 [style = bold, label=""];
14->0 [style = bold, label=""];
21->39 [style = bold, label=""];
3->7 [style = bold, label=""];
23->13 [style = bold, label=""];
13->26 [style = bold, label=""];
21->26 [style = dashed, label="0"];
12->25 [style = bold, label=""];
33->24 [style = bold, label=""];
19->28 [style = dashed, label="0"];
2->14 [style = bold, label=""];
9->25 [style = dashed, label="0"];
2->36 [style = bold, label=""];
39->10 [style = bold, label=""];
38->41 [style = solid, label="slices"];
43->41 [style = solid, label="expectedSlices"];
17->13 [style = bold, label=""];
36->37 [style = bold, label=""];
11->27 [style = dashed, label="0"];
8->4 [style = bold, label=""];
27->29 [style = bold, label=""];
42->22 [style = bold, label=""];
38->39 [style = solid, label="slices"];
17->23 [style = dashed, label="0"];
13->21 [style = bold, label=""];
20->33 [style = dashed, label="0"];
26->33 [style = bold, label=""];
8->31 [style = dashed, label="0"];
4->5 [style = bold, label=""];
41->13 [style = bold, label=""];
10->24 [style = dashed, label="0"];
38->43 [style = solid, label="slices"];
38->43 [style = bold, label=""];
}
