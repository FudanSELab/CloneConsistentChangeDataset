digraph {
15 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Explicit<Boolean> ignoreMalformed = ((GeoShapeFieldMapper)fieldMapper).ignoreMalformed()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "fieldMapper = defaultMapper.mappers().getMapper(\"location\")@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testIgnoreMalformedParsing['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Explicit<Boolean> ignoreMalformed = ((ShapeFieldMapper)fieldMapper).ignoreMalformed()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(ignoreMalformed.value(),equalTo(false))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_shape\").field(\"ignore_malformed\",\"true\").endObject().endObject().endObject().endObject())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "testIgnoreMalformedParsing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(ignoreMalformed.value(),equalTo(true))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(ignoreMalformed.explicit(),equalTo(true))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "fieldMapper = mapper.mappers().getMapper(\"field\")@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(ignoreMalformed.value(),equalTo(true))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ignoreMalformed = ((GeoShapeFieldMapper)fieldMapper).ignoreMalformed()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "testIgnoreMalformedParsing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Mapper fieldMapper = mapper.mappers().getMapper(\"field\")@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"shape\").field(\"ignore_malformed\",\"false\").endObject().endObject().endObject().endObject())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "ignoreMalformed = ((ShapeFieldMapper)fieldMapper).ignoreMalformed()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(ignoreMalformed.value(),equalTo(false))@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"shape\").field(\"ignore_malformed\",\"true\").endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(ignoreMalformed.explicit(),equalTo(true))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_shape\").field(\"ignore_malformed\",\"false\").endObject().endObject().endObject().endObject())@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21->11 [style = bold, label=""];
12->7 [style = bold, label=""];
4->6 [style = bold, label=""];
14->17 [style = bold, label=""];
2->22 [style = dashed, label="0"];
8->23 [style = solid, label="fieldMapper"];
0->26 [style = dashed, label="0"];
19->14 [style = solid, label="fieldMapper"];
15->18 [style = bold, label=""];
23->24 [style = bold, label=""];
3->23 [style = dashed, label="0"];
20->15 [style = bold, label=""];
8->23 [style = bold, label=""];
12->21 [style = bold, label=""];
13->10 [style = solid, label="mapping"];
17->3 [style = bold, label=""];
7->11 [style = bold, label=""];
26->24 [style = solid, label="ignoreMalformed"];
7->11 [style = solid, label="mapping"];
8->3 [style = bold, label=""];
5->13 [style = bold, label=""];
18->16 [style = solid, label="fieldMapper"];
6->9 [style = bold, label=""];
16->2 [style = bold, label=""];
10->1 [style = bold, label=""];
7->21 [style = dashed, label="0"];
22->26 [style = bold, label=""];
13->27 [style = dashed, label="0"];
0->12 [style = bold, label=""];
27->10 [style = solid, label="mapping"];
11->8 [style = bold, label=""];
27->10 [style = bold, label=""];
12->19 [style = bold, label=""];
18->16 [style = bold, label=""];
1->2 [style = solid, label="fieldMapper"];
26->12 [style = bold, label=""];
2->17 [style = solid, label="ignoreMalformed"];
2->0 [style = bold, label=""];
19->14 [style = bold, label=""];
24->6 [style = bold, label=""];
13->10 [style = bold, label=""];
1->22 [style = bold, label=""];
8->3 [style = solid, label="fieldMapper"];
25->27 [style = bold, label=""];
1->2 [style = bold, label=""];
3->4 [style = bold, label=""];
0->4 [style = solid, label="ignoreMalformed"];
21->11 [style = solid, label="mapping"];
4->24 [style = dashed, label="0"];
1->22 [style = solid, label="fieldMapper"];
}
