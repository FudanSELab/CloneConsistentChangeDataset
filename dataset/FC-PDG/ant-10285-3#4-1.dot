digraph {
8 [style = filled, label = "p = new Path(project,\"c:\test\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String(( l = p.list()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "isNetWare@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"/test\",l(1()@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"c:\test\",l(0(.toLowerCase(Locale.US))@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"no drives on Unix\",2,l.length)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"c:\test\",l(0(.toLowerCase(Locale.US))@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(\"c resolved relative to project's basedir\",l(0(,endsWith(\"/c\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "p = new Path(project,\"c:/test\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(\"c resolved relative to project's basedir\",l(0(,endsWith(\"/c\"))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testConstructorWindowsStyleUnixFS['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "isUnixStyle@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"volumes on NetWare\",1,l.length)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"drives on DOS\",1,l.length)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testConstructorWindowsStyle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testConstructorWindowsStyle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
6->5 [style = dotted, label="false"];
15->14 [style = bold, label=""];
1->4 [style = solid, label="l"];
3->11 [style = bold, label=""];
5->11 [style = dotted, label="false"];
2->9 [style = bold, label=""];
8->14 [style = dashed, label="0"];
12->7 [style = bold, label=""];
4->7 [style = bold, label=""];
14->1 [style = bold, label=""];
4->12 [style = dashed, label="0"];
6->10 [style = dotted, label="true"];
8->1 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
1->6 [style = bold, label=""];
6->4 [style = dotted, label="true"];
10->12 [style = bold, label=""];
6->10 [style = bold, label=""];
0->8 [style = bold, label=""];
5->3 [style = dotted, label="false"];
10->4 [style = bold, label=""];
6->7 [style = dotted, label="true"];
1->7 [style = solid, label="l"];
5->9 [style = dotted, label="true"];
1->12 [style = solid, label="l"];
6->12 [style = dotted, label="true"];
13->8 [style = bold, label=""];
5->2 [style = dotted, label="true"];
}
