digraph {
0 [style = filled, label = "DateTime now = DateTimes.of(\"2012-12-31T01:00:00\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "PeriodDropRule rule = new PeriodDropRule(new Period(\"P1M\"),false)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now)).build(),now))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(now.minusYears(1),now.minusDays(1))).build(),now))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testAppliesToPeriod['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertFalse(rule.appliesTo(BUILDER.interval(new Interval(now.minusYears(1),now.minusDays(1))).build(),now))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(now.minusMonths(2),now.minusDays(1))).build(),now))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(rule.appliesTo(BUILDER.interval(new Interval(now.minusWeeks(1),now.minusDays(1))).build(),now))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusWeeks(1),now.minusDays(1))).build(),now))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusWeeks(1),now.plusWeeks(1))).build(),now))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "PeriodLoadRule rule = new PeriodLoadRule(new Period(\"P1M\"),false,ImmutableMap.of(\"\",0))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testAppliesToPeriod['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusMonths(1).minusWeeks(1),now.minusMonths(1).plusWeeks(1))).build(),now))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testAppliesToPartialOverlap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(rule.appliesTo(BUILDER.interval(new Interval(now.minusDays(1),now)).build(),now))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertFalse(rule.appliesTo(BUILDER.interval(new Interval(now.minusMonths(2),now.minusDays(1))).build(),now))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->9 [style = solid, label="now"];
6->8 [style = dashed, label="0"];
1->8 [style = bold, label=""];
9->11 [style = bold, label=""];
0->13 [style = bold, label=""];
0->11 [style = solid, label="now"];
0->2 [style = solid, label="now"];
0->15 [style = solid, label="now"];
6->14 [style = dashed, label="0"];
12->0 [style = bold, label=""];
0->5 [style = solid, label="now"];
3->0 [style = bold, label=""];
0->8 [style = solid, label="now"];
6->2 [style = bold, label=""];
0->14 [style = solid, label="now"];
1->13 [style = dashed, label="0"];
2->15 [style = dashed, label="0"];
1->6 [style = bold, label=""];
5->11 [style = dashed, label="0"];
2->9 [style = dashed, label="0"];
4->7 [style = dashed, label="0"];
0->1 [style = bold, label=""];
10->0 [style = bold, label=""];
5->4 [style = bold, label=""];
8->9 [style = bold, label=""];
0->6 [style = solid, label="now"];
0->4 [style = solid, label="now"];
14->15 [style = bold, label=""];
13->14 [style = bold, label=""];
0->7 [style = solid, label="now"];
11->7 [style = bold, label=""];
2->5 [style = bold, label=""];
}
