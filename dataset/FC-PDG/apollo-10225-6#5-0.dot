digraph {
20 [style = filled, label = "String someValuePrefix = \"someValue\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "setUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "someCluster = \"someCluster\"@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testGetPropertyNamesWithOrderedProperties['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "someServerUrl = \"http://someServer\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "MockInjector.setInstance(,configServiceLocator)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "MockInjector.setInstance(,httpClient)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "someProperties = new OrderedProperties()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ServiceDTO serviceDTO = mock()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "int i = 0@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(someProperties.stringPropertyNames(),propertyNames)@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>(){@Override public Properties answer(InvocationOnMock invocation){return new OrderedProperties()}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "MockInjector.setInstance(,httpUtil)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "setUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "Set<String> propertyNames = defaultConfig.getPropertyNames()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "remoteConfigLongPollService = new RemoteConfigLongPollService()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "someProperties.setProperty(someKeyPrefix + i,someValuePrefix + i)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(10,propertyNames.size())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "responseType = (Type)ReflectionTestUtils.getField(remoteConfigLongPollService,\"m_responseType\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "String someKeyPrefix = \"someKey\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "i++@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "MockInjector.setInstance(,new MockConfigUtil())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i < 10@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "someAppId = \"someAppId\"@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
15->23 [style = bold, label=""];
23->25 [style = bold, label=""];
9->0 [style = bold, label=""];
16->27 [style = bold, label=""];
3->1 [style = bold, label=""];
21->19 [style = bold, label=""];
26->14 [style = bold, label=""];
10->3 [style = bold, label=""];
8->6 [style = bold, label=""];
17->14 [style = solid, label="i"];
7->4 [style = bold, label=""];
0->12 [style = dashed, label="0"];
15->14 [style = dotted, label="true"];
17->26 [style = solid, label="i"];
12->7 [style = bold, label=""];
10->3 [style = solid, label="remoteConfigLongPollService"];
15->26 [style = bold, label=""];
0->7 [style = bold, label=""];
22->23 [style = solid, label="someProperties"];
20->18 [style = bold, label=""];
25->24 [style = bold, label=""];
11->5 [style = bold, label=""];
18->22 [style = bold, label=""];
13->12 [style = bold, label=""];
17->15 [style = solid, label="i"];
24->21 [style = bold, label=""];
20->26 [style = solid, label="someValuePrefix"];
6->11 [style = bold, label=""];
17->15 [style = bold, label=""];
22->17 [style = bold, label=""];
27->26 [style = solid, label="someKeyPrefix"];
4->8 [style = bold, label=""];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
7->8 [style = solid, label="someServerUrl"];
14->15 [style = solid, label="i"];
27->20 [style = bold, label=""];
24->19 [style = solid, label="propertyNames"];
15->26 [style = dotted, label="true"];
14->26 [style = solid, label="i"];
4->6 [style = solid, label="serviceDTO"];
}
