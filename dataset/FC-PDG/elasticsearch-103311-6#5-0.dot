digraph {
5 [style = filled, label = "MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testDefaultField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "IllegalArgumentException exc = expectThrows(,null)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "query = qb.toQuery(context)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "qb.lenient(true)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(expected,query)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "context.getIndexSettings().updateIndexMetaData(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",STRING_FIELD_NAME,STRING_FIELD_NAME_2 + \"^5\",INT_FIELD_NAME).build()))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DisjunctionMaxQuery expected = new DisjunctionMaxQuery(Arrays.asList(new TermQuery(new Term(STRING_FIELD_NAME,\"hello\")),new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2,\"hello\")),5.0f)),0.0f)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "context.getIndexSettings().updateIndexMetaData(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",STRING_FIELD_NAME,STRING_FIELD_NAME_2 + \"^5\").build()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "context.getIndexSettings().updateIndexMetaData(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",\"*\").build()))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "context.getIndexSettings().updateIndexMetaData(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",STRING_FIELD_NAME,STRING_FIELD_NAME_2 + \"^5\").build()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Query expected = new DisjunctionMaxQuery(Arrays.asList(new TermQuery(new Term(STRING_FIELD_NAME,\"hello\")),new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2,\"hello\")),5.0f)),1.0f)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(query,instanceOf())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "QueryShardContext context = createShardContext()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testDefaultField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(exc.getMessage(),equalTo(\"For input string: \"hello\"\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(expected,query)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "context.getIndexSettings().updateIndexMetaData(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putNull(\"index.query.default_field\").build()))@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertEquals(expected,query)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Query query = builder.toQuery(context)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expected = new DisjunctionMaxQuery(Arrays.asList(new TermQuery(new Term(STRING_FIELD_NAME,\"hello\")),new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2,\"hello\")),5.0f),new MatchNoDocsQuery(\"failed (mapped_int( query, caused by number_format_exception:(For input string: \"hello\"(\")),0.0f)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(exc,instanceOf())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "query = qb.toQuery(context)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Query query = new SimpleQueryStringBuilder(\"hello\").toQuery(context)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testDefaultField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24->21 [style = bold, label=""];
14->11 [style = solid, label="query"];
13->7 [style = bold, label=""];
11->12 [style = bold, label=""];
8->5 [style = bold, label=""];
10->11 [style = solid, label="expected"];
9->2 [style = solid, label="expected"];
6->15 [style = bold, label=""];
23->24 [style = bold, label=""];
1->22 [style = dashed, label="0"];
5->1 [style = bold, label=""];
8->1 [style = solid, label="context"];
19->8 [style = bold, label=""];
0->9 [style = bold, label=""];
9->2 [style = bold, label=""];
16->8 [style = bold, label=""];
20->22 [style = bold, label=""];
0->2 [style = solid, label="query"];
22->24 [style = solid, label="query"];
10->11 [style = bold, label=""];
3->13 [style = bold, label=""];
17->23 [style = dashed, label="0"];
12->21 [style = dashed, label="0"];
2->18 [style = bold, label=""];
8->14 [style = solid, label="context"];
3->13 [style = solid, label="exc"];
17->6 [style = bold, label=""];
15->14 [style = bold, label=""];
7->4 [style = bold, label=""];
12->3 [style = bold, label=""];
1->17 [style = bold, label=""];
1->17 [style = solid, label="query"];
8->22 [style = solid, label="context"];
25->8 [style = bold, label=""];
8->0 [style = solid, label="context"];
22->23 [style = bold, label=""];
14->10 [style = bold, label=""];
8->20 [style = bold, label=""];
4->0 [style = bold, label=""];
23->24 [style = solid, label="expected"];
}
