digraph {
14 [style = filled, label = "assertThat(\"test resolved relative to project's basedir\",l(1(,endsWith(\"\test\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "isUnixStyle@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "isNetWare@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"volumes on NetWare\",2,l.length)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"volumes on NetWare\",1,l.length)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"/sys\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(\"test resolved relative to project's basedir\",l(1(,endsWith(\"\test\"))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"\sys\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "testConstructorNetWareStyleUnixPS['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"no multiple character-length volumes on Windows\",2,l.length)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"/sys\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertThat(\"java/lib/classes.zip resolved relative to project's basedir\",l(2(,endsWith(\"\JAVA\lib\classes.zip\"))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"no drives on Unix\",2,l.length)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"no multiple character-length volumes on Windows\",3,l.length)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"/test\",l(1()@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "p = new Path(project,\"SYS:\JAVA/lib/rt.jar:SYS:\JAVA/lib/classes.zip\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(\"java/lib/rt.jar resolved relative to project's basedir\",l(1(,endsWith(\"\JAVA\lib\rt.jar\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testConstructorNetWareStyle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "String(( l = p.list()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"\sys\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertEquals(\"sys:\java\lib\classes.zip\",l(1(.toLowerCase(Locale.US))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(\"/JAVA/lib/rt.jar\",l(1()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "isNetWare@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"sys:\java\lib\rt.jar\",l(0(.toLowerCase(Locale.US))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(\"no drives on Unix\",3,l.length)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "p = new Path(project,\"sys:\test\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"/JAVA/lib/classes.zip\",l(2()@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"\SYS\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testConstructorNetWareStyle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"/SYS\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->3 [style = dotted, label="true"];
5->17 [style = dotted, label="true"];
5->10 [style = bold, label=""];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
0->11 [style = solid, label="l"];
2->26 [style = bold, label=""];
7->11 [style = bold, label=""];
0->27 [style = solid, label="l"];
0->29 [style = solid, label="l"];
12->20 [style = dashed, label="0"];
0->7 [style = solid, label="l"];
5->20 [style = bold, label=""];
1->26 [style = dashed, label="0"];
2->1 [style = bold, label=""];
9->14 [style = dotted, label="false"];
7->16 [style = dashed, label="0"];
1->15 [style = bold, label=""];
0->2 [style = bold, label=""];
0->16 [style = solid, label="l"];
0->23 [style = solid, label="l"];
2->15 [style = dotted, label="true"];
11->29 [style = dashed, label="0"];
29->25 [style = bold, label=""];
2->23 [style = dotted, label="true"];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
12->16 [style = bold, label=""];
2->9 [style = bold, label=""];
26->19 [style = bold, label=""];
15->3 [style = bold, label=""];
2->18 [style = dotted, label="true"];
9->16 [style = dotted, label="false"];
12->7 [style = bold, label=""];
0->4 [style = solid, label="l"];
9->12 [style = dotted, label="false"];
9->11 [style = dotted, label="false"];
0->14 [style = solid, label="l"];
2->9 [style = dotted, label="false"];
20->27 [style = bold, label=""];
6->22 [style = dashed, label="0"];
5->27 [style = dotted, label="false"];
7->27 [style = dashed, label="0"];
3->23 [style = dashed, label="0"];
5->21 [style = bold, label=""];
9->7 [style = dotted, label="false"];
0->3 [style = solid, label="l"];
5->24 [style = dotted, label="true"];
17->24 [style = bold, label=""];
22->0 [style = bold, label=""];
2->1 [style = dotted, label="true"];
4->15 [style = dashed, label="0"];
19->23 [style = bold, label=""];
2->5 [style = dotted, label="false"];
11->14 [style = dashed, label="0"];
2->4 [style = dotted, label="true"];
5->25 [style = dotted, label="false"];
10->17 [style = dashed, label="0"];
9->5 [style = bold, label=""];
5->21 [style = dashed, label="0"];
2->26 [style = dotted, label="true"];
16->14 [style = bold, label=""];
0->15 [style = solid, label="l"];
5->21 [style = dotted, label="true"];
5->20 [style = dotted, label="false"];
4->19 [style = dashed, label="0"];
9->12 [style = bold, label=""];
13->6 [style = bold, label=""];
27->29 [style = bold, label=""];
0->18 [style = solid, label="l"];
5->29 [style = dotted, label="false"];
0->19 [style = solid, label="l"];
9->10 [style = dotted, label="true"];
21->17 [style = bold, label=""];
23->18 [style = bold, label=""];
0->25 [style = solid, label="l"];
28->22 [style = bold, label=""];
2->19 [style = dotted, label="true"];
2->5 [style = bold, label=""];
9->5 [style = dotted, label="true"];
}
