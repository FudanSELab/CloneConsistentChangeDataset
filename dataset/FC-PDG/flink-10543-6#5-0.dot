digraph {
10 [style = filled, label = "TestingListState<Tuple2<KinesisStreamShard,SequenceNumber>> listState = new TestingListState<>()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "TestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\"fakeStream\",new Properties(),10,2)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Mockito.verify(mockedFetcher,never()).registerNewSubscribedShardState(new KinesisStreamShardState(restoredShard.getKey(),restoredShard.getValue()))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "TestingListState<Tuple2<KinesisStreamShardV2,SequenceNumber>> listState = new TestingListState<>()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "StateInitializationContext initializationContext = mock()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "shards.addAll(fakeRestoredState.keySet())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "OperatorStateStore operatorStateStore = mock()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "consumer.initializeState(initializationContext)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "listState.add(Tuple2.of(state.getKey(),state.getValue()))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "PowerMockito.mockStatic()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "consumer.run(Mockito.mock())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "TestingListState<Tuple2<KinesisStreamShard,SequenceNumber>> listState = new TestingListState<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Mockito.verify(mockedFetcher,never()).registerNewSubscribedShardState(new KinesisStreamShardState(KinesisDataFetcher.createKinesisStreamShardV2(restoredShard.getKey()),restoredShard.getKey(),restoredShard.getValue()))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "HashMap<StreamShardHandle,SequenceNumber> fakeRestoredStateForOthers = getFakeRestoredStore(\"fakeStream2\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "List<KinesisStreamShard> shards = new ArrayList<>()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "when(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Mockito.verify(mockedFetcher).registerNewSubscribedShardState(new KinesisStreamShardState(restoredShard.getKey(),restoredShard.getValue()))@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "listState.add(Tuple2.of(state.getKey(),state.getValue()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "listState.add(Tuple2.of(KinesisDataFetcher.createKinesisStreamShardV2(state.getKey()),state.getValue()))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "consumer.run(Mockito.mock())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(initializationContext.isRestored()).thenReturn(true)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "listState.add(Tuple2.of(state.getKey(),state.getValue()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "listState.add(Tuple2.of(KinesisDataFetcher.createKinesisStreamShardV2(state.getKey()),state.getValue()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "PowerMockito.doNothing().when()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Mockito.verify(mockedFetcher).registerNewSubscribedShardState(new KinesisStreamShardState(restoredShard.getKey(),restoredShard.getValue()))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "List<StreamShardHandle> shards = new ArrayList<>()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Mockito.verify(mockedFetcher).registerNewSubscribedShardState(new KinesisStreamShardState(KinesisDataFetcher.createKinesisStreamShardV2(restoredShard.getKey()),restoredShard.getKey(),restoredShard.getValue()))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "PowerMockito.whenNew().withAnyArguments().thenReturn(mockedFetcher)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "KinesisDataFetcher mockedFetcher = Mockito.mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "consumer.open(new Configuration())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "HashMap<KinesisStreamShard,SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "when(operatorStateStore.getUnionListState(Matchers.any())).thenReturn(listState)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testFetcherShouldBeCorrectlySeededOnlyItsOwnStates['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "testFetcherShouldBeCorrectlySeededOnlyItsOwnStates['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "HashMap<KinesisStreamShard,SequenceNumber> fakeRestoredStateForOthers = getFakeRestoredStore(\"fakeStream2\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "HashMap<StreamShardHandle,SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"fakeStream1\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "HashMap<KinesisStreamShard,SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"fakeStream1\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->32 [style = bold, label=""];
27->18 [style = bold, label=""];
3->30 [style = dashed, label="0"];
29->17 [style = bold, label=""];
20->13 [style = bold, label=""];
3->35 [style = dashed, label="0"];
8->15 [style = bold, label=""];
18->13 [style = solid, label="operatorStateStore"];
10->14 [style = bold, label=""];
16->24 [style = dashed, label="0"];
36->18 [style = solid, label="listState"];
25->30 [style = bold, label=""];
8->17 [style = solid, label="shards"];
28->31 [style = bold, label=""];
11->21 [style = bold, label=""];
1->27 [style = dashed, label="0"];
30->26 [style = bold, label=""];
33->20 [style = solid, label="operatorStateStore"];
15->7 [style = solid, label="shards"];
10->28 [style = dashed, label="0"];
1->18 [style = bold, label=""];
23->3 [style = bold, label=""];
15->29 [style = dashed, label="0"];
6->19 [style = bold, label=""];
2->9 [style = bold, label=""];
3->12 [style = bold, label=""];
8->2 [style = solid, label="mockedFetcher"];
14->1 [style = bold, label=""];
19->16 [style = bold, label=""];
17->7 [style = bold, label=""];
29->7 [style = solid, label="shards"];
12->26 [style = dashed, label="0"];
22->38 [style = bold, label=""];
15->17 [style = bold, label=""];
12->10 [style = bold, label=""];
10->0 [style = solid, label="listState"];
31->27 [style = bold, label=""];
33->18 [style = bold, label=""];
21->22 [style = bold, label=""];
28->0 [style = solid, label="listState"];
7->2 [style = bold, label=""];
4->7 [style = solid, label="mockedFetcher"];
9->5 [style = bold, label=""];
0->11 [style = solid, label="initializationContext"];
4->8 [style = bold, label=""];
20->21 [style = solid, label="initializationContext"];
0->20 [style = bold, label=""];
5->11 [style = bold, label=""];
36->37 [style = bold, label=""];
26->28 [style = bold, label=""];
34->35 [style = bold, label=""];
35->36 [style = bold, label=""];
19->32 [style = dashed, label="0"];
37->33 [style = bold, label=""];
32->24 [style = bold, label=""];
8->29 [style = bold, label=""];
18->0 [style = bold, label=""];
22->6 [style = bold, label=""];
13->4 [style = bold, label=""];
14->31 [style = dashed, label="0"];
}
