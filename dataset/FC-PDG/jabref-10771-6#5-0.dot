digraph {
7 [style = filled, label = "Assert.assertEquals(a,b)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(\"John von Neumann, John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,false))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\"Smith, John\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith\",false,true))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "Assert.assertEquals(\"John Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",false,true))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(\"Smith, John and Black Brown, Peter\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith and Black Brown, Peter\",false,true))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorLastNameFirstCommas(\"\",true,true))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"Smith, John and Black Brown, Peter\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith and Black Brown, Peter\",false,true))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertTrue(a.equals(b))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "Assert.assertEquals(\"J. Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",true,true))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testFixAuthorLastNameFirstCommasOxfordComma['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorLastNameFirstCommas(\"\",false,true))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(\"von Neumann, John, Smith, John, and Black Brown, Peter\",AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,true))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Smith, John\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith\",false,true))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"Smith, J. and Black Brown, P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith and Black Brown, Peter\",true,true))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"von Neumann, J., Smith, J., and Black Brown, P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",false,false))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(\"von Neumann, J., Smith, J., and Black Brown, P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(\"J. Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",true,false))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(\"J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",true,false))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(\"J. P. von Neumann\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Peter von Neumann\",true,true))@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(\"J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",true,true))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(\"von Neumann, John, Smith, John, and Black Brown, Peter\",AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,true))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(\"Smith, J.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith\",true,true))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Assert.assertEquals(\"John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",false,true))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(a,b)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "Assert.assertEquals(\"John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",false,false))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testFixAuthorLastNameFirstCommasOxfordComma['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String a = AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"Smith, J. and Black Brown, P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith and Black Brown, Peter\",true,true))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "String b = AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"\",AuthorList.fixAuthorLastNameFirstCommas(\"\",true,true))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Assert.assertEquals(\"J. von Neumann, J. Smith, and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(\"J. P. von Neumann\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Peter von Neumann\",true,false))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",true,true))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "testFixAuthorFirstNameFirstCommas['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(a.equals(b))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"von Neumann, J. P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Peter von Neumann\",true,true))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(\"Smith, J.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith\",true,true))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false).equals(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(\"von Neumann, J. P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Peter von Neumann\",true,true))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(\"John Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",false,false))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",true,false))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",false,true))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true).equals(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,true))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"\",AuthorList.fixAuthorLastNameFirstCommas(\"\",false,true))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9->20 [style = dashed, label="0"];
4->10 [style = bold, label=""];
17->25 [style = bold, label=""];
28->29 [style = bold, label=""];
4->18 [style = dashed, label="0"];
6->21 [style = dashed, label="0"];
33->35 [style = bold, label=""];
18->24 [style = bold, label=""];
41->32 [style = bold, label=""];
8->16 [style = dashed, label="0"];
37->28 [style = bold, label=""];
2->12 [style = solid, label="b"];
2->15 [style = solid, label="b"];
36->41 [style = bold, label=""];
1->14 [style = dashed, label="0"];
7->12 [style = bold, label=""];
5->23 [style = dashed, label="0"];
27->44 [style = bold, label=""];
34->45 [style = bold, label=""];
29->31 [style = bold, label=""];
2->7 [style = solid, label="b"];
14->22 [style = bold, label=""];
25->18 [style = bold, label=""];
45->33 [style = bold, label=""];
5->44 [style = dashed, label="0"];
0->43 [style = dashed, label="0"];
43->26 [style = bold, label=""];
11->15 [style = solid, label="a"];
30->37 [style = bold, label=""];
4->26 [style = dashed, label="0"];
10->27 [style = dashed, label="0"];
15->19 [style = bold, label=""];
44->39 [style = bold, label=""];
12->1 [style = bold, label=""];
40->38 [style = bold, label=""];
1->45 [style = dashed, label="0"];
1->13 [style = bold, label=""];
11->2 [style = bold, label=""];
3->0 [style = bold, label=""];
9->6 [style = bold, label=""];
20->21 [style = bold, label=""];
26->27 [style = bold, label=""];
10->5 [style = bold, label=""];
19->14 [style = bold, label=""];
0->25 [style = dashed, label="0"];
22->20 [style = bold, label=""];
12->19 [style = dashed, label="0"];
0->4 [style = bold, label=""];
42->30 [style = bold, label=""];
39->40 [style = bold, label=""];
11->39 [style = dashed, label="0"];
7->38 [style = dashed, label="0"];
2->15 [style = bold, label=""];
6->8 [style = bold, label=""];
38->34 [style = bold, label=""];
11->7 [style = solid, label="a"];
7->15 [style = dashed, label="0"];
21->16 [style = bold, label=""];
5->11 [style = bold, label=""];
13->9 [style = bold, label=""];
2->7 [style = bold, label=""];
35->36 [style = bold, label=""];
23->11 [style = bold, label=""];
2->40 [style = dashed, label="0"];
32->42 [style = bold, label=""];
13->22 [style = dashed, label="0"];
12->34 [style = dashed, label="0"];
10->24 [style = dashed, label="0"];
2->19 [style = solid, label="b"];
24->23 [style = bold, label=""];
46->43 [style = bold, label=""];
}
