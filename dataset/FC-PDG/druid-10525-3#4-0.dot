digraph {
18 [style = filled, label = "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(null),ArgumentMatchers.eq(),ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(CoordinatorCompactionConfig.empty())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Assert.assertEquals(1,emittedEventCaptor.getValue().build(ImmutableMap.of()).toMap().get(\"value\"))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Mockito.when(mockDruidCoordinatorRuntimeParams.getEmitter()).thenReturn(mockServiceEmitter)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Mockito.verify(mockJacksonConfigManager).convertByteToConfig(ArgumentMatchers.eq(null),ArgumentMatchers.eq(),ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testRunDoNothingIfCurrentConfigIsEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "killCompactionConfig = new KillCompactionConfig(druidCoordinatorConfig,mockSqlSegmentsMetadataManager,mockJacksonConfigManager,mockConnector,mockConnectorConfig)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Mockito.verifyNoMoreInteractions(mockJacksonConfigManager)@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Mockito.verify(mockJacksonConfigManager,Mockito.times(4)).set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY),ArgumentMatchers.any(),ArgumentMatchers.any(),ArgumentMatchers.any())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Mockito.when(mockJacksonConfigManager.watch(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY),ArgumentMatchers.eq(),ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(new AtomicReference<>(CoordinatorCompactionConfig.empty()))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Mockito.verifyNoMoreInteractions(mockJacksonConfigManager)@@@14@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Mockito.verify(mockConnector).lookup(ArgumentMatchers.anyString(),ArgumentMatchers.eq(\"name\"),ArgumentMatchers.eq(\"payload\"),ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "CoordinatorCompactionConfig originalCurrentConfig = CoordinatorCompactionConfig.from(ImmutableList.of(inactiveDatasourceConfig))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY),ArgumentMatchers.any(),ArgumentMatchers.any(),ArgumentMatchers.any())).thenAnswer(new Answer(){@Override public Object answer(InvocationOnMock invocation){if (count++ < 3) {return ConfigManager.SetResult.fail(new Exception(),true)}{return ConfigManager.SetResult.ok()}}})@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "killCompactionConfig.run(mockDruidCoordinatorRuntimeParams)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "String inactiveDatasourceName = \"inactive_datasource\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Mockito.verifyZeroInteractions(mockSqlSegmentsMetadataManager)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Mockito.when(mockConnector.lookup(ArgumentMatchers.anyString(),ArgumentMatchers.eq(\"name\"),ArgumentMatchers.eq(\"payload\"),ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY))).thenReturn(null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "Mockito.verifyNoMoreInteractions(mockJacksonConfigManager)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TestDruidCoordinatorConfig druidCoordinatorConfig = new TestDruidCoordinatorConfig(null,null,null,new Duration(\"PT5S\"),null,null,null,null,null,null,null,new Duration(\"PT6S\"),null,null,null,null,10,null)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(KillCompactionConfig.COUNT_METRIC,emittedEventCaptor.getValue().build(ImmutableMap.of()).toMap().get(\"metric\"))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final ArgumentCaptor<ServiceEventBuilder> emittedEventCaptor = ArgumentCaptor.forClass()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Mockito.verify(mockServiceEmitter).emit(emittedEventCaptor.capture())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "killCompactionConfig.run(mockDruidCoordinatorRuntimeParams)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(KillCompactionConfig.COUNT_METRIC,emittedEventCaptor.getValue().build(ImmutableMap.of()).toMap().get(\"metric\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Mockito.verify(mockJacksonConfigManager,Mockito.times(4)).watch(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY),ArgumentMatchers.eq(),ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "DataSourceCompactionConfig inactiveDatasourceConfig = new DataSourceCompactionConfig(inactiveDatasourceName,null,500L,null,new Period(3600),null,new UserCompactionTaskGranularityConfig(Granularities.HOUR,null),null,ImmutableMap.of(\"key\",\"val\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testRunRetryForRetryableException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Mockito.verifyNoMoreInteractions(mockSqlSegmentsMetadataManager)@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Mockito.when(mockDruidCoordinatorRuntimeParams.getEmitter()).thenReturn(mockServiceEmitter)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final ArgumentCaptor<ServiceEventBuilder> emittedEventCaptor = ArgumentCaptor.forClass()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Mockito.verify(mockSqlSegmentsMetadataManager,Mockito.times(4)).retrieveAllDataSourceNames()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Mockito.when(mockJacksonConfigManager.watch(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY),ArgumentMatchers.eq(),ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(new AtomicReference<>(originalCurrentConfig))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(0,emittedEventCaptor.getValue().build(ImmutableMap.of()).toMap().get(\"value\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "killCompactionConfig = new KillCompactionConfig(druidCoordinatorConfig,mockSqlSegmentsMetadataManager,mockJacksonConfigManager)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Mockito.when(mockSqlSegmentsMetadataManager.retrieveAllDataSourceNames()).thenReturn(ImmutableSet.of())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "TestDruidCoordinatorConfig druidCoordinatorConfig = new TestDruidCoordinatorConfig(null,null,null,new Duration(\"PT5S\"),null,null,null,null,null,null,null,new Duration(\"PT6S\"),null,null,null,null,10,null)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testRunDoNothingIfCurrentConfigIsEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Mockito.verify(mockServiceEmitter).emit(emittedEventCaptor.capture())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "killCompactionConfig.run(mockDruidCoordinatorRuntimeParams)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->32 [style = bold, label=""];
6->14 [style = solid, label="druidCoordinatorConfig"];
37->36 [style = bold, label=""];
25->22 [style = bold, label=""];
3->6 [style = solid, label="druidCoordinatorConfig"];
8->3 [style = bold, label=""];
8->32 [style = dashed, label="0"];
38->27 [style = bold, label=""];
0->11 [style = bold, label=""];
3->6 [style = bold, label=""];
29->25 [style = bold, label=""];
21->35 [style = solid, label="inactiveDatasourceName"];
20->31 [style = bold, label=""];
31->38 [style = bold, label=""];
1->0 [style = bold, label=""];
19->17 [style = bold, label=""];
9->10 [style = bold, label=""];
30->37 [style = bold, label=""];
16->2 [style = bold, label=""];
15->19 [style = bold, label=""];
6->14 [style = dashed, label="0"];
22->30 [style = bold, label=""];
4->7 [style = bold, label=""];
35->24 [style = bold, label=""];
33->26 [style = bold, label=""];
2->13 [style = bold, label=""];
8->13 [style = dashed, label="0"];
32->29 [style = bold, label=""];
6->14 [style = bold, label=""];
7->9 [style = bold, label=""];
34->28 [style = bold, label=""];
6->1 [style = bold, label=""];
24->32 [style = solid, label="originalCurrentConfig"];
11->5 [style = bold, label=""];
12->2 [style = bold, label=""];
28->33 [style = bold, label=""];
14->0 [style = bold, label=""];
23->21 [style = bold, label=""];
18->6 [style = bold, label=""];
9->15 [style = bold, label=""];
5->4 [style = bold, label=""];
9->26 [style = dashed, label="0"];
7->33 [style = dashed, label="0"];
21->35 [style = bold, label=""];
24->6 [style = bold, label=""];
22->30 [style = solid, label="druidCoordinatorConfig"];
36->34 [style = bold, label=""];
26->20 [style = bold, label=""];
13->18 [style = bold, label=""];
2->8 [style = bold, label=""];
9->15 [style = dashed, label="0"];
35->24 [style = solid, label="inactiveDatasourceConfig"];
}
