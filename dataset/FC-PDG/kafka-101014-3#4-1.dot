digraph {
8 [style = filled, label = "shouldFlushItemsToStoreOnEviction['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final KeyValue<Windowed<Bytes>,byte((> next = iterator.next()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(added.size() - 1,cache.size())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final KeyValueIterator<Windowed<Bytes>,byte((> iterator = cachingStore.findSessions(added.get(0).key.key(),0,0)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertArrayEquals(added.get(0).value,next.value)@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(added.get(0).key,next.key)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "shouldFlushItemsToStoreOnEviction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "shouldFlushItemsToStoreOnEviction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final List<KeyValue<Windowed<Bytes>,byte((>> added = addSessionsUntilOverflow(\"a\",\"b\",\"c\",\"d\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
8->0 [style = bold, label=""];
5->2 [style = bold, label=""];
4->1 [style = bold, label=""];
7->0 [style = bold, label=""];
0->4 [style = bold, label=""];
4->5 [style = bold, label=""];
2->6 [style = bold, label=""];
3->0 [style = bold, label=""];
}
