digraph {
6 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(),\"_row_key,timestamp\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(),\"rider,driver\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(keyGenerator.getPartitionPathFields().size(),0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(),\"\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testMultipleValueKeyGeneratorNonPartitioned1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String rowKey = \"_row_key\" + ComplexAvroKeyGenerator.DEFAULT_RECORD_KEY_SEPARATOR + record.get(\"_row_key\").toString() + \",\" + \"timestamp\" + ComplexAvroKeyGenerator.DEFAULT_RECORD_KEY_SEPARATOR + record.get(\"timestamp\").toString()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(keyGenerator.getRecordKeyFields().size(),2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "GenericRecord record = dataGenerator.generateGenericRecords(1).get(0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testMultipleValueKeyGenerator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TypedProperties properties = new TypedProperties()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "String partitionPath = \"\"@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(rowKey,hoodieKey.getRecordKey())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(),\"timestamp,driver\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(partitionPath,hoodieKey.getPartitionPath())@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "HoodieKey hoodieKey = compositeKeyGenerator.getKey(record)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String partitionPath = record.get(\"rider\").toString() + \"/\" + record.get(\"driver\").toString()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(compositeKeyGenerator.getPartitionPathFields().size(),2)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(internalRow,row.schema()),partitionPath)@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Row row = KeyGeneratorTestUtilities.getRow(record,HoodieTestDataGenerator.AVRO_SCHEMA,AvroConversionUtils.convertAvroSchemaToStructType(HoodieTestDataGenerator.AVRO_SCHEMA))@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testMultipleValueKeyGenerator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "InternalRow internalRow = KeyGeneratorTestUtilities.getInternalRow(row)@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "HoodieKey hoodieKey = keyGenerator.getKey(record)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "String rowKey = \"timestamp\" + ComplexAvroKeyGenerator.DEFAULT_RECORD_KEY_SEPARATOR + record.get(\"timestamp\").toString() + \",\" + \"driver\" + ComplexAvroKeyGenerator.DEFAULT_RECORD_KEY_SEPARATOR + record.get(\"driver\").toString()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(compositeKeyGenerator.getRecordKeyFields().size(),2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(row),partitionPath)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14->5 [style = bold, label=""];
12->26 [style = dashed, label="0"];
26->24 [style = bold, label=""];
5->3 [style = solid, label="properties"];
2->26 [style = bold, label=""];
8->0 [style = bold, label=""];
24->20 [style = bold, label=""];
17->18 [style = bold, label=""];
18->15 [style = solid, label="internalRow"];
13->22 [style = dashed, label="0"];
3->21 [style = dashed, label="0"];
9->1 [style = solid, label="partitionPath"];
6->13 [style = bold, label=""];
10->11 [style = bold, label=""];
23->11 [style = bold, label=""];
16->17 [style = solid, label="row"];
19->23 [style = bold, label=""];
0->1 [style = bold, label=""];
11->2 [style = bold, label=""];
2->16 [style = solid, label="record"];
8->20 [style = dashed, label="0"];
9->15 [style = solid, label="partitionPath"];
12->9 [style = bold, label=""];
2->20 [style = solid, label="record"];
21->19 [style = bold, label=""];
26->0 [style = solid, label="rowKey"];
5->25 [style = bold, label=""];
24->1 [style = solid, label="partitionPath"];
27->5 [style = bold, label=""];
16->18 [style = solid, label="row"];
13->3 [style = bold, label=""];
4->10 [style = bold, label=""];
7->5 [style = bold, label=""];
16->17 [style = bold, label=""];
22->21 [style = bold, label=""];
12->0 [style = solid, label="rowKey"];
9->8 [style = bold, label=""];
4->19 [style = dashed, label="0"];
20->0 [style = bold, label=""];
1->16 [style = bold, label=""];
10->23 [style = dashed, label="0"];
25->22 [style = bold, label=""];
5->6 [style = bold, label=""];
6->25 [style = dashed, label="0"];
9->24 [style = dashed, label="0"];
3->4 [style = bold, label=""];
2->12 [style = bold, label=""];
9->17 [style = solid, label="partitionPath"];
2->8 [style = solid, label="record"];
5->21 [style = solid, label="properties"];
18->15 [style = bold, label=""];
}
