digraph {
15 [style = filled, label = "sinkTask.initialize(EasyMock.capture(sinkTaskContext))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "PowerMock.expectLastCall()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "PowerMock.expectLastCall()@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "PowerMock.expectLastCall()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "props.put(\"topics.regex\",\"te.*\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "PowerMock.replayAll()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "PowerMock.expectLastCall()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectInitializeTask['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "workerTask.iteration()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "sinkTask.initialize(EasyMock.capture(sinkTaskContext))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "consumer.subscribe(EasyMock.capture(topicsRegex),EasyMock.capture(rebalanceListener))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "PowerMock.verifyAll()@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "workerTask.initialize(taskConfig)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "PowerMock.expectPrivate(workerTask,\"createConsumer\").andReturn(consumer)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "sinkTask.start(props)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "createTask(TargetState.PAUSED)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "PowerMock.expectLastCall()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)),EasyMock.capture(rebalanceListener))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "PowerMock.expectLastCall()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "props.remove(\"topics\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "time.sleep(10000L)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Set<TopicPartition> partitions = new HashSet<>(asList(TOPIC_PARTITION,TOPIC_PARTITION2))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "EasyMock.expect(consumer.assignment()).andReturn(partitions)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "expectInitializeTask['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "PowerMock.expectPrivate(workerTask,\"createConsumer\").andReturn(consumer)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "PowerMock.expectLastCall()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "workerTask.initializeAndStart()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Map<String,String> props = new HashMap<>(TASK_PROPS)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testTopicsRegex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "consumer.pause(partitions)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TaskConfig taskConfig = new TaskConfig(props)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "expectPollInitialAssignment()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22->26 [style = bold, label=""];
0->30 [style = bold, label=""];
30->13 [style = bold, label=""];
18->23 [style = bold, label=""];
27->12 [style = bold, label=""];
10->14 [style = bold, label=""];
18->22 [style = solid, label="taskConfig"];
27->12 [style = solid, label="partitions"];
28->31 [style = bold, label=""];
0->2 [style = bold, label=""];
14->22 [style = bold, label=""];
1->3 [style = bold, label=""];
4->30 [style = dashed, label="0"];
26->9 [style = bold, label=""];
9->20 [style = bold, label=""];
7->0 [style = bold, label=""];
21->24 [style = bold, label=""];
24->29 [style = bold, label=""];
15->16 [style = bold, label=""];
0->28 [style = dashed, label="0"];
23->0 [style = bold, label=""];
29->18 [style = bold, label=""];
21->18 [style = solid, label="props"];
6->5 [style = bold, label=""];
21->28 [style = solid, label="props"];
16->28 [style = bold, label=""];
3->7 [style = bold, label=""];
12->25 [style = bold, label=""];
19->27 [style = bold, label=""];
5->4 [style = bold, label=""];
25->10 [style = bold, label=""];
4->1 [style = bold, label=""];
13->15 [style = bold, label=""];
8->4 [style = bold, label=""];
27->25 [style = solid, label="partitions"];
17->21 [style = bold, label=""];
31->19 [style = bold, label=""];
20->11 [style = bold, label=""];
}
