digraph {
1 [style = filled, label = "context.queueWriteOperation(writeOperation)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verify(selector,times(1)).executeFailedListener(same(listener2),any())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertFalse(context.readyForFlush())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(context.readyForFlush())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testWriteIsQueuedInChannel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testWriteIsQueuedInChannel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "context = new TestSocketChannelContext(channel,selector,exceptionHandler,readWriteHandler,channelBuffer)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "context.closeFromSelector()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testFlushOpsClearedOnClose['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "verify(selector,times(1)).executeFailedListener(same(listener),any())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "verify(readWriteHandler).writeToBytes(writeOperation)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "when(channel.getRawChannel()).thenReturn(realChannel)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertFalse(context.readyForFlush())@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "context.queueWriteOperation(writeOperation)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ByteBuffer(( buffer = {ByteBuffer.allocate(10)}@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "WriteOperation writeOperation = mock()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "BiConsumer<Void,Exception> listener2 = mock()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(context.readyForFlush())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "verify(handler).writeToBytes(writeOperation)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertFalse(context.readyForFlush())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "InboundChannelBuffer channelBuffer = InboundChannelBuffer.allocatingInstance()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ByteBuffer(( buffer = {ByteBuffer.allocate(10)}@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(handler.writeToBytes(writeOperation)).thenReturn(Collections.singletonList(writeOperation))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "when(readWriteHandler.writeToBytes(writeOperation)).thenReturn(Arrays.asList(new FlushOperation(buffer,listener),new FlushOperation(buffer,listener2)))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "when(channel.isOpen()).thenReturn(true)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
7->10 [style = bold, label=""];
9->2 [style = bold, label=""];
16->24 [style = bold, label=""];
4->13 [style = bold, label=""];
0->2 [style = bold, label=""];
12->17 [style = bold, label=""];
18->19 [style = bold, label=""];
22->21 [style = bold, label=""];
8->6 [style = bold, label=""];
1->0 [style = bold, label=""];
7->4 [style = bold, label=""];
17->22 [style = bold, label=""];
15->16 [style = bold, label=""];
11->18 [style = bold, label=""];
1->9 [style = bold, label=""];
24->14 [style = bold, label=""];
14->7 [style = bold, label=""];
12->18 [style = solid, label="listener2"];
13->12 [style = bold, label=""];
21->20 [style = bold, label=""];
7->4 [style = solid, label="writeOperation"];
5->6 [style = bold, label=""];
20->23 [style = bold, label=""];
3->7 [style = bold, label=""];
3->7 [style = solid, label="buffer"];
7->10 [style = solid, label="writeOperation"];
13->22 [style = solid, label="writeOperation"];
7->13 [style = dashed, label="0"];
24->14 [style = solid, label="channelBuffer"];
7->1 [style = solid, label="writeOperation"];
7->9 [style = solid, label="writeOperation"];
4->1 [style = bold, label=""];
0->9 [style = dashed, label="0"];
23->11 [style = bold, label=""];
4->10 [style = dashed, label="0"];
4->17 [style = solid, label="buffer"];
10->1 [style = bold, label=""];
12->17 [style = solid, label="listener2"];
7->0 [style = solid, label="writeOperation"];
}
