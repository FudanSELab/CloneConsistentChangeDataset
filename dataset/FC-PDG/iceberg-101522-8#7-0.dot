digraph {
5 [style = filled, label = "return ROWS_CANNOT_MATCH@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "T lower = Conversions.fromByteBuffer(ref.type(),lowerBounds.get(id))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Literal<T> lit@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "return ROWS_CANNOT_MATCH@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "cmp < 0@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "BoundReference<T> ref@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int cmp = lit.comparator().compare(lower,lit.value())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Integer id = ref.fieldId()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "upperBounds != null && upperBounds.containsKey(id)@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return ROWS_MIGHT_MATCH@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "cmp > 0@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "lowerBounds != null && lowerBounds.containsKey(id)@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "gtEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "BoundReference<T> ref@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ltEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "T upper = Conversions.fromByteBuffer(ref.type(),upperBounds.get(id))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "gtEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int cmp = lit.comparator().compare(upper,lit.value())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Literal<T> lit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "containsNullsOnly(id) || containsNaNsOnly(id)@@@4@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "containsNullsOnly(id)@@@4@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20->3 [style = bold, label=""];
4->7 [style = bold, label=""];
2->4 [style = bold, label=""];
14->3 [style = bold, label=""];
11->21 [style = bold, label=""];
6->18 [style = dashed, label="0"];
21->18 [style = dotted, label="true"];
3->18 [style = solid, label="id"];
6->2 [style = solid, label="upper"];
3->6 [style = solid, label="id"];
4->5 [style = bold, label=""];
13->11 [style = dotted, label="true"];
1->21 [style = dashed, label="0"];
4->17 [style = dashed, label="0"];
11->1 [style = bold, label=""];
21->17 [style = dotted, label="true"];
9->16 [style = dashed, label="0"];
1->6 [style = dotted, label="true"];
20->16 [style = dotted, label="true"];
2->4 [style = solid, label="cmp"];
0->11 [style = bold, label=""];
1->6 [style = bold, label=""];
0->1 [style = bold, label=""];
3->13 [style = bold, label=""];
14->9 [style = dotted, label="true"];
6->2 [style = bold, label=""];
3->21 [style = solid, label="id"];
10->3 [style = bold, label=""];
14->12 [style = dotted, label="true"];
0->13 [style = dashed, label="0"];
20->15 [style = dotted, label="true"];
2->19 [style = dashed, label="0"];
13->11 [style = bold, label=""];
18->19 [style = bold, label=""];
21->18 [style = bold, label=""];
10->8 [style = dotted, label="true"];
3->0 [style = bold, label=""];
19->17 [style = bold, label=""];
0->21 [style = bold, label=""];
0->11 [style = dotted, label="true"];
21->19 [style = dotted, label="true"];
21->7 [style = bold, label=""];
3->0 [style = solid, label="id"];
13->1 [style = bold, label=""];
1->2 [style = dotted, label="true"];
18->19 [style = solid, label="lower"];
4->5 [style = dotted, label="true"];
3->1 [style = solid, label="id"];
1->7 [style = bold, label=""];
17->7 [style = bold, label=""];
17->5 [style = dotted, label="true"];
1->4 [style = dotted, label="true"];
10->9 [style = dotted, label="true"];
17->5 [style = bold, label=""];
5->7 [style = bold, label=""];
19->17 [style = solid, label="cmp"];
3->13 [style = solid, label="id"];
}
