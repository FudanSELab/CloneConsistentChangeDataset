digraph {
2 [style = filled, label = "assertEquals(expected,actual)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "proto2Roundtrip['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(expected,actual)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "proto3Roundtrip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Proto2Message result = fromByteArray(expectedBytes,)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Proto2Message actual = Proto2Message.parseFrom(actualBytes)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "proto2Roundtrip['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Proto2Message expected = new Proto2MessageFactory(5,10,2,2).newMessage()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Proto3Message expected = new Proto3MessageFactory(5,10,2,2).newMessage()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(actual).isEqualTo(expected)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Proto3Message actual = Proto3Message.parseFrom(actualBytes)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "byte(( actualBytes = toByteArray(result,expectedBytes.length)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(expectedBytes.length,actualBytes.length)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Proto3Message result = ExperimentalSerializationUtil.fromByteArray(expectedBytes,)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "byte(( actualBytes = ExperimentalSerializationUtil.toByteArray(result)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(result).isEqualTo(expected)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(expected,result)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "byte(( expectedBytes = expected.toByteArray()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->0 [style = solid, label="result"];
5->10 [style = bold, label=""];
5->4 [style = solid, label="result"];
16->0 [style = bold, label=""];
15->14 [style = bold, label=""];
1->10 [style = solid, label="expected"];
1->2 [style = solid, label="expected"];
15->17 [style = solid, label="actualBytes"];
1->0 [style = solid, label="expected"];
1->3 [style = bold, label=""];
14->17 [style = bold, label=""];
11->12 [style = bold, label=""];
17->13 [style = solid, label="actual"];
3->16 [style = bold, label=""];
3->5 [style = solid, label="expectedBytes"];
4->7 [style = solid, label="actualBytes"];
7->8 [style = bold, label=""];
16->15 [style = solid, label="result"];
2->8 [style = dashed, label="0"];
16->0 [style = solid, label="result"];
0->15 [style = bold, label=""];
4->7 [style = bold, label=""];
3->16 [style = solid, label="expectedBytes"];
12->0 [style = solid, label="expected"];
0->10 [style = dashed, label="0"];
5->16 [style = dashed, label="0"];
12->13 [style = solid, label="expected"];
6->1 [style = bold, label=""];
1->12 [style = dashed, label="0"];
3->5 [style = bold, label=""];
1->8 [style = solid, label="expected"];
5->0 [style = bold, label=""];
0->4 [style = bold, label=""];
7->2 [style = bold, label=""];
4->15 [style = dashed, label="0"];
7->2 [style = solid, label="actual"];
10->4 [style = bold, label=""];
17->13 [style = bold, label=""];
12->3 [style = bold, label=""];
9->1 [style = bold, label=""];
}
