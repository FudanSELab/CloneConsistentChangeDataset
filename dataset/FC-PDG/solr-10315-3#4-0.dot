digraph {
4 [style = filled, label = "1 != streamExpressions.size()@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression,,)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "this.tupleStream = factory.constructStream(streamExpressions.get(0))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "this.eq = factory.constructEqualitor(((StreamExpressionValue)overExpression.getParameter()).getValue(),)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "StreamFactory factory@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "this.comp = factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(),)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "expression.getParameters().size() != streamExpressions.size() + 1@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "StreamExpressionNamedParameter overExpression = factory.getNamedOperand(expression,\"over\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "StreamExpression expression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "this.tupleStream = new PushBackStream(factory.constructStream(streamExpressions.get(0)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "StreamExpression expression@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression,streamExpressions.size()))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression,\"by\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "StreamFactory factory@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\",expression))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "UniqueStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "UniqueStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "ReducerStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "this.comp = factory.constructComparator(((StreamExpressionValue)overExpression.getParameter()).getValue(),)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "StreamExpression expression@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression,,)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2->10 [style = dotted, label="true"];
3->11 [style = dotted, label="true"];
18->3 [style = bold, label=""];
0->9 [style = bold, label=""];
9->12 [style = dotted, label="true"];
12->23 [style = dashed, label="0"];
24->11 [style = solid, label="expression"];
15->7 [style = bold, label=""];
7->18 [style = dashed, label="0"];
24->8 [style = solid, label="expression"];
24->23 [style = solid, label="expression"];
19->20 [style = dotted, label="true"];
11->4 [style = bold, label=""];
3->11 [style = bold, label=""];
18->17 [style = solid, label="byExpression"];
4->21 [style = bold, label=""];
4->8 [style = dotted, label="true"];
6->5 [style = solid, label="expression"];
10->11 [style = solid, label="expression"];
12->16 [style = bold, label=""];
5->18 [style = bold, label=""];
19->24 [style = dotted, label="true"];
6->8 [style = solid, label="expression"];
17->22 [style = bold, label=""];
12->1 [style = bold, label=""];
13->10 [style = dotted, label="true"];
3->4 [style = bold, label=""];
17->23 [style = bold, label=""];
9->16 [style = bold, label=""];
7->3 [style = bold, label=""];
7->9 [style = solid, label="overExpression"];
4->0 [style = bold, label=""];
17->23 [style = dotted, label="true"];
24->5 [style = solid, label="expression"];
1->22 [style = dashed, label="0"];
8->0 [style = bold, label=""];
19->5 [style = bold, label=""];
10->12 [style = solid, label="expression"];
23->22 [style = bold, label=""];
6->11 [style = solid, label="expression"];
6->12 [style = solid, label="expression"];
2->6 [style = dotted, label="true"];
0->21 [style = dashed, label="0"];
1->16 [style = dashed, label="0"];
9->17 [style = dashed, label="0"];
10->15 [style = solid, label="expression"];
24->18 [style = solid, label="expression"];
8->21 [style = bold, label=""];
5->7 [style = bold, label=""];
4->8 [style = bold, label=""];
6->7 [style = solid, label="expression"];
10->7 [style = solid, label="expression"];
9->12 [style = bold, label=""];
13->15 [style = bold, label=""];
9->1 [style = bold, label=""];
13->14 [style = dotted, label="true"];
5->15 [style = dashed, label="0"];
10->8 [style = solid, label="expression"];
21->17 [style = bold, label=""];
10->24 [style = dashed, label="0"];
2->5 [style = bold, label=""];
}
