digraph {
8 [style = filled, label = "Assert.assertEquals(3,supervisor.stateManager.getExceptionEvents().size())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertFalse(((SeekableStreamExceptionEvent)exceptionEvents.get(0)).isStreamException())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "EasyMock.expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isHealthy())@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "supervisor.start()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "supervisor.runInternal()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "supervisor.runInternal()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(BasicState.RUNNING,supervisor.stateManager.getSupervisorState())@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertEquals(EXCEPTION_MSG,exceptionEvents.get(0).getMessage())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(BasicState.RUNNING,supervisor.stateManager.getSupervisorState().getBasicState())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "supervisor.runInternal()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun())@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isHealthy())@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(3,supervisor.stateManager.getExceptionEvents().size())@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "Assert.assertEquals(SeekableStreamState.CREATING_TASKS,supervisor.stateManager.getSupervisorState())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(2,supervisor.stateManager.getExceptionEvents().size())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isHealthy())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "supervisor.runInternal()@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR,supervisor.stateManager.getSupervisorState())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR,supervisor.stateManager.getSupervisorState())@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andReturn(true).times(3)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isHealthy())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "supervisor.runInternal()@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).times(3)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "EasyMock.expect(spec.isSuspended()).andReturn(false).anyTimes()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(2,supervisor.stateManager.getExceptionEvents().size())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(1,exceptionEvents.size())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "verifyAll()@@@62@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertFalse(supervisor.stateManager.isHealthy())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(BasicState.RUNNING,supervisor.stateManager.getSupervisorState().getBasicState())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "supervisor.runInternal()@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "List<SupervisorStateManager.ExceptionEvent> exceptionEvents = supervisor.stateManager.getExceptionEvents()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "supervisor.runInternal()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun())@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(BasicState.RUNNING,supervisor.stateManager.getSupervisorState().getBasicState())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR,supervisor.stateManager.getSupervisorState())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun())@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertFalse(supervisor.stateManager.isHealthy())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun())@@@61@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(3,supervisor.stateManager.getExceptionEvents().size())@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS,supervisor.stateManager.getSupervisorState())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun())@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR,supervisor.stateManager.getSupervisorState())@@@60@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "replayAll()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).times(3)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
70 [style = filled, label = "Assert.assertEquals(SeekableStreamState.CREATING_TASKS,supervisor.stateManager.getSupervisorState())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testDiscoveringInitialTasksFailRecoveryFail['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(.getName(),exceptionEvents.get(0).getExceptionClass())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(3,supervisor.stateManager.getExceptionEvents().size())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "supervisor.runInternal()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andReturn(true).anyTimes()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andThrow(new IllegalStateException(EXCEPTION_MSG)).times(3)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(BasicState.RUNNING,supervisor.stateManager.getSupervisorState())@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun())@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "supervisor.runInternal()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "testDiscoveringInitialTasksFailRecoveryFail['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
72 [style = filled, label = "testCreatingTasksFailRecoveryFail['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertFalse(supervisor.stateManager.isHealthy())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(BasicState.UNHEALTHY_SUPERVISOR,supervisor.stateManager.getSupervisorState().getBasicState())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(SeekableStreamState.DISCOVERING_INITIAL_TASKS,supervisor.stateManager.getSupervisorState())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isHealthy())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertFalse(supervisor.stateManager.isHealthy())@@@59@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertEquals(BasicState.RUNNING,supervisor.stateManager.getSupervisorState())@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69->65 [style = bold, label=""];
44->2 [style = bold, label=""];
0->70 [style = bold, label=""];
51->5 [style = bold, label=""];
40->62 [style = bold, label=""];
22->15 [style = bold, label=""];
59->7 [style = bold, label=""];
36->9 [style = bold, label=""];
15->34 [style = bold, label=""];
47->56 [style = bold, label=""];
14->35 [style = bold, label=""];
4->53 [style = bold, label=""];
1->40 [style = bold, label=""];
42->45 [style = bold, label=""];
29->39 [style = bold, label=""];
28->20 [style = bold, label=""];
64->69 [style = bold, label=""];
72->1 [style = bold, label=""];
27->44 [style = bold, label=""];
6->51 [style = bold, label=""];
3->14 [style = bold, label=""];
62->61 [style = bold, label=""];
70->38 [style = bold, label=""];
23->32 [style = bold, label=""];
65->11 [style = bold, label=""];
52->38 [style = bold, label=""];
56->0 [style = bold, label=""];
41->49 [style = bold, label=""];
20->31 [style = bold, label=""];
12->48 [style = bold, label=""];
57->58 [style = bold, label=""];
5->18 [style = bold, label=""];
48->8 [style = bold, label=""];
24->43 [style = bold, label=""];
15->71 [style = dashed, label="0"];
26->6 [style = bold, label=""];
37->55 [style = bold, label=""];
66->4 [style = bold, label=""];
23->62 [style = dashed, label="0"];
23->68 [style = dashed, label="0"];
40->23 [style = bold, label=""];
39->28 [style = bold, label=""];
45->12 [style = bold, label=""];
32->61 [style = dashed, label="0"];
0->52 [style = bold, label=""];
9->41 [style = bold, label=""];
52->70 [style = dashed, label="0"];
54->26 [style = bold, label=""];
17->50 [style = bold, label=""];
21->36 [style = bold, label=""];
33->47 [style = bold, label=""];
31->57 [style = bold, label=""];
50->11 [style = bold, label=""];
38->37 [style = bold, label=""];
58->25 [style = bold, label=""];
49->46 [style = bold, label=""];
35->67 [style = bold, label=""];
32->64 [style = dashed, label="0"];
16->30 [style = bold, label=""];
43->27 [style = bold, label=""];
53->24 [style = bold, label=""];
17->63 [style = dashed, label="0"];
18->13 [style = bold, label=""];
11->33 [style = bold, label=""];
40->68 [style = bold, label=""];
34->4 [style = bold, label=""];
60->1 [style = bold, label=""];
22->71 [style = bold, label=""];
50->65 [style = dashed, label="0"];
30->59 [style = bold, label=""];
63->50 [style = bold, label=""];
55->16 [style = bold, label=""];
13->21 [style = bold, label=""];
10->1 [style = bold, label=""];
7->19 [style = bold, label=""];
19->22 [style = bold, label=""];
32->17 [style = bold, label=""];
2->42 [style = bold, label=""];
8->29 [style = bold, label=""];
25->54 [style = bold, label=""];
61->63 [style = bold, label=""];
71->66 [style = bold, label=""];
46->3 [style = bold, label=""];
68->64 [style = bold, label=""];
}
