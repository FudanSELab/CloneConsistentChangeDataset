digraph {
9 [style = filled, label = "consumerOperator.close()@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "MigrationTestUtil.restoreFromSnapshot(testHarness,\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\",testMigrateVersion)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "MigrationTestUtil.restoreFromSnapshot(testHarness,\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\",testMigrateVersion)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testRestoreWithEmptyState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "testHarness.open()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "initialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(),shard))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final AbstractStreamOperatorTestHarness<String> testHarness = new AbstractStreamOperatorTestHarness<>(consumerOperator,1,1,0)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "testRestore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(mock())@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final AbstractStreamOperatorTestHarness<String> testHarness = new AbstractStreamOperatorTestHarness<>(consumerOperator,1,1,0)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertNotEquals(null,consumerFunction.getRestoredState())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Shard shard = new Shard()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "testHarness.open()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(fetcher,new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(1,consumerFunction.getRestoredState().size())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size())@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "final TestFetcher<String> fetcher = new TestFetcher<>(Collections.singletonList(TEST_STREAM_NAME),new TestSourceContext<>(),new TestRuntimeContext(true,1,0),TestUtils.getStandardProperties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),null,initialDiscoveryShards)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "consumerOperator.close()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertTrue(consumerFunction.getRestoredState().isEmpty())@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "consumerOperator.cancel()@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "StreamSource<String,DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "consumerFunction.run(new TestSourceContext<>())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "shard.setShardId(shardMetadata.getShardId())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testRestoreWithEmptyState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "StreamSource<String,DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(consumerFunction.getRestoredState().isEmpty())@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "consumerOperator.cancel()@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "consumerOperator.close()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "MigrationTestUtil.restoreFromSnapshot(testHarness,\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\",testMigrateVersion)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(TEST_STATE,consumerFunction.getRestoredState())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testHarness.setup()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testHarness.setup()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
29->8 [style = bold, label=""];
21->24 [style = solid, label="fetcher"];
24->7 [style = solid, label="consumerFunction"];
7->13 [style = solid, label="consumerOperator"];
0->6 [style = bold, label=""];
16->10 [style = bold, label=""];
25->30 [style = bold, label=""];
30->27 [style = bold, label=""];
18->12 [style = bold, label=""];
27->31 [style = bold, label=""];
20->14 [style = bold, label=""];
21->24 [style = bold, label=""];
12->16 [style = bold, label=""];
9->7 [style = bold, label=""];
2->4 [style = bold, label=""];
20->21 [style = solid, label="initialDiscoveryShards"];
4->0 [style = bold, label=""];
4->28 [style = dashed, label="0"];
28->0 [style = bold, label=""];
5->1 [style = bold, label=""];
31->26 [style = bold, label=""];
14->19 [style = solid, label="shard"];
19->14 [style = bold, label=""];
14->23 [style = bold, label=""];
8->5 [style = bold, label=""];
6->25 [style = dashed, label="0"];
0->25 [style = bold, label=""];
15->20 [style = bold, label=""];
3->8 [style = bold, label=""];
23->19 [style = bold, label=""];
22->17 [style = bold, label=""];
5->1 [style = solid, label="consumerOperator"];
1->4 [style = solid, label="testHarness"];
1->2 [style = bold, label=""];
19->21 [style = bold, label=""];
13->22 [style = bold, label=""];
6->9 [style = bold, label=""];
24->7 [style = bold, label=""];
13->17 [style = solid, label="testHarness"];
1->28 [style = solid, label="testHarness"];
2->28 [style = bold, label=""];
17->18 [style = bold, label=""];
10->11 [style = bold, label=""];
8->5 [style = solid, label="consumerFunction"];
}
