digraph {
0 [style = filled, label = "final List<Object> list = new ArrayList<Object>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final List<Object> list = new ArrayList<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "boundedBlockingSubscribeConsumerConsumer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "boundedBlockingSubscribeConsumerConsumer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Observable.range(1,5).subscribeOn(Schedulers.computation()).blockingSubscribe(new Consumer<Integer>(){@Override public void accept(Integer v){list.add(v)}},Functions.emptyConsumer())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "blockingSubscribeConsumerConsumer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Flowable.range(1,5).subscribeOn(Schedulers.computation()).blockingSubscribe(new Consumer<Integer>(){@Override public void accept(Integer v){list.add(v)}},Functions.emptyConsumer(),128)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(Arrays.asList(1,2,3,4,5),list)@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
5->3 [style = bold, label=""];
5->1 [style = solid, label="list"];
2->0 [style = bold, label=""];
6->0 [style = bold, label=""];
7->1 [style = bold, label=""];
3->1 [style = bold, label=""];
0->5 [style = dashed, label="0"];
3->7 [style = dashed, label="0"];
4->5 [style = bold, label=""];
0->1 [style = solid, label="list"];
0->7 [style = bold, label=""];
}
