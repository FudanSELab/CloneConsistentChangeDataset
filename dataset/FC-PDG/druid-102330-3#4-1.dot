digraph {
8 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM2.plus(KM2))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testMinus['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testPlus['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(KM(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM1.plus(KM2))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(KM(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"3L\",\"2\",\"5L\")),KM1.plus(KM3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(KM(\"foo\",ImmutableMap.of()),KM2.minus(KM2))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(KM(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"3L\",\"2\",\"5L\")),KM2.plus(KM1))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(KM(\"foo\",ImmutableMap.of(\"2\",\"5L\")),KM2.minus(KM1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(KM(\"foo\",ImmutableMap.of()),KM1.minus(KM2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(KM(\"foo\",ImmutableMap.of(\"1\",\"3L\")),KM1.minus(KM3))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"3L\",\"2\",\"5L\")),KM1.plus(KM3))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"3L\",\"2\",\"5L\")),KM2.plus(KM1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testPlus['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM0.plus(KM2))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM1.plus(KM2))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(KM(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM0.plus(KM2))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(KM(\"foo\",ImmutableMap.of()),KM0.minus(KM2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(KM(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM2.plus(KM2))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->3 [style = bold, label=""];
0->11 [style = dashed, label="0"];
12->16 [style = bold, label=""];
10->7 [style = bold, label=""];
9->6 [style = bold, label=""];
7->9 [style = bold, label=""];
0->14 [style = dashed, label="0"];
5->1 [style = bold, label=""];
15->17 [style = bold, label=""];
2->0 [style = bold, label=""];
17->12 [style = bold, label=""];
1->17 [style = dashed, label="0"];
3->12 [style = dashed, label="0"];
3->2 [style = bold, label=""];
3->9 [style = dashed, label="0"];
0->4 [style = bold, label=""];
2->16 [style = dashed, label="0"];
6->11 [style = bold, label=""];
4->8 [style = dashed, label="0"];
2->6 [style = dashed, label="0"];
11->8 [style = bold, label=""];
16->14 [style = bold, label=""];
14->13 [style = bold, label=""];
1->7 [style = dashed, label="0"];
4->13 [style = dashed, label="0"];
}
