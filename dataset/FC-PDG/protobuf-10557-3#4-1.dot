digraph {
11 [style = filled, label = "assertThat(actualBytes).hasLength(expectedBytes.length)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(expected,actual)@@@10@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Proto3Message expected = new Proto3MessageFactory(5,10,2,2).newMessage()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Proto3Message result = ExperimentalSerializationUtil.fromByteArray(expectedBytes,)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "byte(( actualBytes = ExperimentalSerializationUtil.toByteArray(result)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "proto2Roundtrip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "proto3Roundtrip['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(actual).isEqualTo(expected)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Proto2Message result = ExperimentalSerializationUtil.fromByteArray(expectedBytes,)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Proto3Message actual = Proto3Message.parseFrom(actualBytes)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Proto2Message expected = new Proto2MessageFactory(5,10,2,2).newMessage()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "proto3Roundtrip['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Proto2Message actual = Proto2Message.parseFrom(actualBytes)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(expectedBytes.length,actualBytes.length)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "byte(( expectedBytes = expected.toByteArray()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(expected,result)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(result).isEqualTo(expected)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16->3 [style = bold, label=""];
6->3 [style = bold, label=""];
5->8 [style = bold, label=""];
8->16 [style = bold, label=""];
15->13 [style = bold, label=""];
12->5 [style = bold, label=""];
7->12 [style = bold, label=""];
1->7 [style = solid, label="expectedBytes"];
6->3 [style = solid, label="actual"];
7->14 [style = dashed, label="0"];
1->14 [style = solid, label="expectedBytes"];
11->6 [style = bold, label=""];
4->0 [style = solid, label="expected"];
7->0 [style = bold, label=""];
8->6 [style = bold, label=""];
7->5 [style = solid, label="result"];
0->12 [style = dashed, label="0"];
2->4 [style = bold, label=""];
1->7 [style = bold, label=""];
13->0 [style = solid, label="expected"];
13->1 [style = bold, label=""];
14->5 [style = solid, label="result"];
4->12 [style = solid, label="expected"];
6->16 [style = dashed, label="0"];
16->3 [style = solid, label="actual"];
14->0 [style = bold, label=""];
5->6 [style = solid, label="actualBytes"];
3->9 [style = dashed, label="0"];
7->0 [style = solid, label="result"];
13->3 [style = solid, label="expected"];
14->0 [style = solid, label="result"];
10->4 [style = bold, label=""];
4->9 [style = solid, label="expected"];
4->3 [style = solid, label="expected"];
1->14 [style = bold, label=""];
4->1 [style = bold, label=""];
5->11 [style = bold, label=""];
6->9 [style = bold, label=""];
8->11 [style = dashed, label="0"];
4->13 [style = dashed, label="0"];
0->5 [style = bold, label=""];
5->16 [style = solid, label="actualBytes"];
}
