digraph {
2 [style = filled, label = "consumer.initializeState(initializationContext)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(operatorStateStore.getUnionListState(Matchers.any())).thenReturn(listState)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "OperatorStateStore operatorStateStore = mock()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Mockito.verify(mockedFetcher).registerNewSubscribedShardState(new KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(restoredShard.getKey()),restoredShard.getKey(),restoredShard.getValue()))@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(initializationContext.isRestored()).thenReturn(true)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Mockito.verify(mockedFetcher).registerNewSubscribedShardState(new KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(restoredShard.getKey()),restoredShard.getKey(),restoredShard.getValue()))@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "KinesisDataFetcher mockedFetcher = mockKinesisDataFetcher()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "TestingListState<Tuple2<StreamShardMetadata,SequenceNumber>> listState = new TestingListState<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "listState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(state.getKey()),state.getValue()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "consumer.run(Mockito.mock())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "PowerMockito.whenNew().withAnyArguments().thenReturn(mockedFetcher)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestingListState<Tuple2<StreamShardMetadata,SequenceNumber>> listState = new TestingListState<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "HashMap<StreamShardHandle,SequenceNumber> fakeRestoredStateForOthers = getFakeRestoredStore(\"fakeStream2\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "OperatorStateStore operatorStateStore = mock()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "List<StreamShardHandle> shards = new ArrayList<>()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "PowerMockito.doNothing().when()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards)@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "KinesisDataFetcher mockedFetcher = Mockito.mock()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "StateInitializationContext initializationContext = mock()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "HashMap<StreamShardHandle,SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"fakeStream1\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "PowerMockito.mockStatic()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Mockito.verify(mockedFetcher,never()).registerNewSubscribedShardState(new KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(restoredShard.getKey()),restoredShard.getKey(),restoredShard.getValue()))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "listState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(state.getKey()),state.getValue()))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "shards.addAll(fakeRestoredState.keySet())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "HashMap<StreamShardHandle,SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\"fakeStream\",new Properties(),10,2)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testFetcherShouldBeCorrectlySeededOnlyItsOwnStates['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "consumer.open(new Configuration())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "listState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(state.getKey()),state.getValue()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->20 [style = solid, label="initializationContext"];
0->9 [style = bold, label=""];
2->19 [style = bold, label=""];
16->11 [style = bold, label=""];
23->27 [style = bold, label=""];
11->9 [style = solid, label="mockedFetcher"];
17->6 [style = bold, label=""];
9->4 [style = bold, label=""];
14->6 [style = solid, label="listState"];
1->20 [style = bold, label=""];
17->18 [style = solid, label="operatorStateStore"];
30->25 [style = bold, label=""];
6->5 [style = solid, label="operatorStateStore"];
11->12 [style = bold, label=""];
26->6 [style = bold, label=""];
12->0 [style = bold, label=""];
16->21 [style = dashed, label="0"];
22->7 [style = bold, label=""];
19->8 [style = bold, label=""];
25->13 [style = solid, label="listState"];
24->30 [style = bold, label=""];
25->31 [style = bold, label=""];
20->2 [style = bold, label=""];
7->14 [style = bold, label=""];
5->16 [style = bold, label=""];
5->21 [style = bold, label=""];
31->26 [style = bold, label=""];
15->17 [style = bold, label=""];
0->10 [style = bold, label=""];
11->0 [style = solid, label="shards"];
3->7 [style = bold, label=""];
21->11 [style = bold, label=""];
7->24 [style = dashed, label="0"];
28->23 [style = bold, label=""];
18->5 [style = bold, label=""];
6->13 [style = bold, label=""];
12->10 [style = solid, label="shards"];
14->15 [style = bold, label=""];
10->9 [style = bold, label=""];
4->1 [style = bold, label=""];
19->28 [style = bold, label=""];
29->24 [style = bold, label=""];
16->10 [style = solid, label="mockedFetcher"];
18->2 [style = solid, label="initializationContext"];
13->18 [style = bold, label=""];
}
