digraph {
7 [style = filled, label = "context.setSelectionKey(mock())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "readConsumer = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(selector.getIoBuffer()).thenAnswer(null)@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "outboundBuffer = new SSLOutboundBuffer(null)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "context = new SSLChannelContext(channel,selector,socketConfig,exceptionHandler,sslDriver,readWriteHandler,channelBuffer)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "channelBuffer = InboundChannelBuffer.allocatingInstance()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "socketConfig = new Config.Socket(randomBoolean(),randomBoolean(),-1,-1,-1,randomBoolean(),-1,-1,mock(),false)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "ByteBuffer buffer = ByteBuffer.allocate(1 << 14)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "sslDriver = mock()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "socketConfig = new Config.Socket(randomBoolean(),randomBoolean(),randomBoolean(),-1,-1,mock(),false)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "channel = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "when(selector.getIoBuffer()).thenAnswer(null)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "init['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestReadWriteHandler readWriteHandler = new TestReadWriteHandler(readConsumer)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ByteBuffer buffer = ByteBuffer.allocate(1 << 14)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "messageLength = randomInt(96) + 20@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "init['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "when(selector.isOnCurrentThread()).thenReturn(true)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "selector = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "TestReadWriteHandler handler = new TestReadWriteHandler(readConsumer)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "rawChannel = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "exceptionHandler = mock()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(selector.getTaskScheduler()).thenReturn(nioTimer)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "context = new BytesChannelContext(channel,selector,mock(),mock(),handler,channelBuffer)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "init['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "nioTimer = mock()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(sslDriver.getOutboundBuffer()).thenReturn(outboundBuffer)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "when(channel.getRawChannel()).thenReturn(rawChannel)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "listener = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "when(selector.isOnCurrentThread()).thenReturn(true)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21->4 [style = solid, label="socketConfig"];
23->5 [style = bold, label=""];
0->13 [style = bold, label=""];
0->24 [style = solid, label="selector"];
15->4 [style = solid, label="channel"];
7->10 [style = bold, label=""];
17->4 [style = solid, label="exceptionHandler"];
29->24 [style = solid, label="handler"];
0->19 [style = bold, label=""];
20->29 [style = bold, label=""];
17->24 [style = dashed, label="0"];
0->4 [style = solid, label="selector"];
6->3 [style = solid, label="outboundBuffer"];
20->24 [style = solid, label="channelBuffer"];
29->25 [style = bold, label=""];
8->26 [style = bold, label=""];
9->20 [style = bold, label=""];
9->25 [style = solid, label="rawChannel"];
20->4 [style = solid, label="channelBuffer"];
1->0 [style = bold, label=""];
5->14 [style = bold, label=""];
20->6 [style = bold, label=""];
3->16 [style = bold, label=""];
17->22 [style = bold, label=""];
21->22 [style = dashed, label="0"];
13->11 [style = solid, label="nioTimer"];
14->1 [style = bold, label=""];
4->7 [style = bold, label=""];
15->24 [style = solid, label="channel"];
22->4 [style = bold, label=""];
8->17 [style = bold, label=""];
5->1 [style = bold, label=""];
18->20 [style = bold, label=""];
25->24 [style = bold, label=""];
13->19 [style = bold, label=""];
9->18 [style = bold, label=""];
11->3 [style = bold, label=""];
15->9 [style = bold, label=""];
5->14 [style = solid, label="readConsumer"];
5->29 [style = solid, label="readConsumer"];
6->8 [style = bold, label=""];
9->8 [style = solid, label="rawChannel"];
18->4 [style = solid, label="sslDriver"];
24->8 [style = bold, label=""];
19->15 [style = bold, label=""];
26->28 [style = bold, label=""];
27->5 [style = bold, label=""];
17->21 [style = bold, label=""];
16->12 [style = bold, label=""];
14->4 [style = solid, label="readWriteHandler"];
22->4 [style = solid, label="socketConfig"];
2->5 [style = bold, label=""];
21->4 [style = bold, label=""];
10->11 [style = bold, label=""];
}
