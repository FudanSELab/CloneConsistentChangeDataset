digraph {
4 [style = filled, label = "expectSuccess(scribe,entry)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(scribeMetrics.spans()).isEqualTo(1)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(scribeMetrics.messages()).isEqualTo(1)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "consumer = null@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(scribeMetrics.messagesDropped()).isZero()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "callbackExceptionDoesntThrow['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "callbackExceptionDoesntThrow['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "CaptureAsyncMethodCallback callback = new CaptureAsyncMethodCallback()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "consumerExceptionBeforeCallbackDoesntSetFutureException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(scribeMetrics.spansDropped()).isEqualTo(1)@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "LogEntry entry = new LogEntry()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "entry.category = \"zipkin\"@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(callback.error).isNull()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "scribe.Log(asList(entry),callback)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\",consumer)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "consumer = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "entry.message = encodedSpan@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(scribeMetrics.messages()).isEqualTo(1)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(scribeMetrics.messagesDropped()).isZero()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->0 [style = bold, label=""];
5->14 [style = bold, label=""];
0->3 [style = solid, label="consumer"];
3->10 [style = bold, label=""];
0->19 [style = dashed, label="0"];
3->14 [style = solid, label="entry"];
7->8 [style = bold, label=""];
5->14 [style = solid, label="callback"];
4->7 [style = bold, label=""];
19->16 [style = solid, label="consumer"];
14->13 [style = bold, label=""];
15->19 [style = bold, label=""];
6->17 [style = bold, label=""];
10->11 [style = bold, label=""];
0->3 [style = bold, label=""];
9->0 [style = bold, label=""];
10->4 [style = solid, label="entry"];
13->18 [style = bold, label=""];
5->4 [style = bold, label=""];
8->1 [style = bold, label=""];
19->16 [style = bold, label=""];
3->4 [style = solid, label="scribe"];
16->3 [style = bold, label=""];
2->6 [style = bold, label=""];
18->1 [style = bold, label=""];
1->2 [style = bold, label=""];
11->5 [style = bold, label=""];
}
