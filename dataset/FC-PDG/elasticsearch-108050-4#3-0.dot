digraph {
10 [style = filled, label = "List<Path> shardDataPaths = new ArrayList<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ensureNoIndexMetaData['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Files.isDirectory(indicesPath)@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "throw new IllegalStateException(\"Node is started with \" + Node.NODE_DATA_SETTING.getKey() + \"=false and \" + Node.NODE_MASTER_SETTING.getKey() + \"=false, but has index metadata: \" + indexMetaDataPaths + \". Use 'elasticsearch-node repurpose' tool to clean up\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "ensureNoShardData['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "shardStream.filter(null).map(null).forEach(null)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "shardDataPaths.isEmpty() == false@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "List<Path> indexMetaDataPaths = collectIndexSubPaths(nodePaths,null)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "final NodePath(( nodePaths@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ensureNoIndexMetaData['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Path indicesPath = nodePath.indicesPath@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "indexStream@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final NodePath(( nodePaths@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "indexMetaDataPaths.isEmpty() == false@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "throw new IllegalStateException(\"Node is started with \" + Node.NODE_DATA_SETTING.getKey() + \"=false, but has shard data: \" + shardDataPaths)@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<Path> indexMetaDataPaths = collectIndexMetaDataPaths(nodePaths)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Files.isDirectory(indexPath)@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "throw new IllegalStateException(\"Node is started with \" + Node.NODE_DATA_SETTING.getKey() + \"=false and \" + Node.NODE_MASTER_SETTING.getKey() + \"=false, but has index metadata: \" + indexMetaDataPaths)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "Path indexPath@@@8@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9->12 [style = dotted, label="true"];
15->13 [style = bold, label=""];
3->6 [style = dashed, label="0"];
4->16 [style = dashed, label="0"];
4->3 [style = solid, label="nodePaths"];
13->8 [style = solid, label="indicesPath"];
6->7 [style = solid, label="indexMetaDataPaths"];
2->3 [style = bold, label=""];
8->17 [style = dotted, label="true"];
3->1 [style = solid, label="indexMetaDataPaths"];
14->10 [style = bold, label=""];
6->0 [style = bold, label=""];
11->9 [style = bold, label=""];
11->15 [style = bold, label=""];
3->0 [style = bold, label=""];
5->4 [style = dotted, label="true"];
0->7 [style = bold, label=""];
14->16 [style = dotted, label="true"];
10->12 [style = solid, label="shardDataPaths"];
5->6 [style = bold, label=""];
15->11 [style = bold, label=""];
10->13 [style = bold, label=""];
15->9 [style = bold, label=""];
0->1 [style = bold, label=""];
11->13 [style = bold, label=""];
2->4 [style = dotted, label="true"];
8->9 [style = bold, label=""];
8->18 [style = dotted, label="true"];
8->11 [style = dotted, label="true"];
4->6 [style = solid, label="nodePaths"];
9->12 [style = bold, label=""];
13->8 [style = bold, label=""];
1->7 [style = dashed, label="0"];
11->15 [style = dotted, label="true"];
8->11 [style = bold, label=""];
8->13 [style = bold, label=""];
0->7 [style = dotted, label="true"];
0->1 [style = dotted, label="true"];
}
