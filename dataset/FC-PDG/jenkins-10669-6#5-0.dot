digraph {
44 [style = filled, label = "ApiTokenProperty t = u.getProperty()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "rr.addStep(new Statement(){@Override public void evaluate(){JenkinsRule j = rr.jj.jenkins.setCrumbIssuer(null)j.jenkins.setSecurityRealm(j.createDummySecurityRealm())User u = User.getById(\"foo\",true)ApiTokenProperty t = u.getProperty()assertNotNull(t.getTokenStore())assertNotNull(t.getTokenStats())WebClient wc = j.createWebClient().withBasicCredentials(u.getId())wc.getOptions().setThrowExceptionOnFailingStatusCode(false)WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + .getName() + \"/generateNewToken\"),HttpMethod.POST)request.setRequestParameters(Collections.singletonList(new NameValuePair(\"newTokenName\",TOKEN_NAME)))Page page = wc.getPage(request)assertEquals(200,page.getWebResponse().getStatusCode())String responseContent = page.getWebResponse().getContentAsString()JSONObject jsonObject = JSONObject.fromObject(responseContent)JSONObject jsonData = jsonObject.getJSONObject(\"data\")String tokenName = jsonData.getString(\"tokenName\")tokenValue.set(jsonData.getString(\"tokenValue\"))tokenUuid.set(jsonData.getString(\"tokenUuid\"))assertEquals(TOKEN_NAME,tokenName)WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(),tokenValue.get())checkUserIsConnected(restWc,u.getId())HtmlPage config = wc.goTo(u.getUrl() + \"/configure\")assertEquals(200,config.getWebResponse().getStatusCode())assertThat(config.getWebResponse().getContentAsString(),containsString(tokenUuid.get()))assertThat(config.getWebResponse().getContentAsString(),containsString(tokenName))for (int i = 1 i < NUM_CALL_WITH_TOKEN i++){restWc.goToXml(\"whoAmI/api/xml\")}HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\")assertEquals(200,configWithStats.getWebResponse().getStatusCode())HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\",\"class\",\"token-use-counter\")assertThat(useCounterSpan.getTextContent(),containsString(\"\" + NUM_CALL_WITH_TOKEN))File apiTokenStatsFile = new File(u.getUserFolder(),\"apiTokenStats.xml\")assertTrue(\"apiTokenStats.xml file should exist\",apiTokenStatsFile.exists())}})@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(config.getWebResponse().getContentAsString(),containsString(tokenUuid))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(200,page.getWebResponse().getStatusCode())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "WebRequest request = new WebRequest(new URL(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + .getName() + \"/generateNewToken\"),HttpMethod.POST)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "j.jenkins.setSecurityRealm(j.createDummySecurityRealm())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "restWc.goToXml(\"whoAmI/api/xml\")@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int NUM_CALL_WITH_TOKEN = 5@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertNotNull(t.getTokenStore())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final String TOKEN_NAME = \"New Token Name\"@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "JSONObject jsonObject = JSONObject.fromObject(responseContent)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "request.setRequestParameters(Arrays.asList(new NameValuePair(\"newTokenName\",TOKEN_NAME)))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "String tokenName = jsonData.getString(\"tokenName\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\")@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "HtmlSpan useCounterSpan = configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\",\"class\",\"token-use-counter\")@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertThat(configWithoutToken.getWebResponse().getContentAsString(),not(containsString(tokenUuid)))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertEquals(200,configWithStats.getWebResponse().getStatusCode())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "JSONObject jsonData = jsonObject.getJSONObject(\"data\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(),tokenValue)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "roundtripWithRestart['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "User u = User.getById(\"foo\",true)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(TOKEN_NAME,tokenName)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "AtomicReference<String> tokenUuid = new AtomicReference<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Page page = wc.getPage(request)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "AtomicReference<String> tokenValue = new AtomicReference<>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "String tokenUuid = jsonData.getString(\"tokenUuid\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "revokeToken(wc,u.getId(),tokenUuid)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "String tokenValue = jsonData.getString(\"tokenValue\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "String responseContent = page.getWebResponse().getContentAsString()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final int NUM_CALL_WITH_TOKEN = 5@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertThat(configWithoutToken.getWebResponse().getContentAsString(),not(containsString(tokenName)))@@@43@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "checkUserIsConnected(restWc,u.getId())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "WebClient wc = j.createWebClient().withBasicCredentials(u.getId()).withThrowExceptionOnFailingStatusCode(false)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(200,config.getWebResponse().getStatusCode())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "roundtripWithRestart['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "int i = 1@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "HtmlPage config = wc.goTo(u.getUrl() + \"/configure\")@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "j.jenkins.setCrumbIssuer(null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertThat(config.getWebResponse().getContentAsString(),containsString(tokenName))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "rr.addStep(new Statement(){@Override public void evaluate(){JenkinsRule j = rr.jj.jenkins.setCrumbIssuer(null)User u = User.getById(\"foo\",false)assertNotNull(u)WebClient wc = j.createWebClient().login(u.getId())checkUserIsConnected(wc,u.getId())HtmlPage config = wc.goTo(u.getUrl() + \"/configure\")assertEquals(200,config.getWebResponse().getStatusCode())assertThat(config.getWebResponse().getContentAsString(),containsString(tokenUuid.get()))assertThat(config.getWebResponse().getContentAsString(),containsString(TOKEN_NAME))HtmlSpan useCounterSpan = config.getDocumentElement().getOneHtmlElementByAttribute(\"span\",\"class\",\"token-use-counter\")assertThat(useCounterSpan.getTextContent(),containsString(\"\" + NUM_CALL_WITH_TOKEN))revokeToken(wc,u.getId(),tokenUuid.get())WebClient restWc = j.createWebClient().withBasicCredentials(u.getId(),tokenValue.get())checkUserIsNotConnected(restWc)HtmlPage configWithoutToken = wc.goTo(u.getUrl() + \"/configure\")assertEquals(200,configWithoutToken.getWebResponse().getStatusCode())assertThat(configWithoutToken.getWebResponse().getContentAsString(),not(containsString(tokenUuid.get())))assertThat(configWithoutToken.getWebResponse().getContentAsString(),not(containsString(TOKEN_NAME)))}})@@@49@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "HtmlPage configWithStats = wc.goTo(u.getUrl() + \"/configure\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String TOKEN_NAME = \"New Token Name\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertNotNull(t.getTokenStats())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(200,configWithoutToken.getWebResponse().getStatusCode())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "checkUserIsNotConnected(restWc)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(useCounterSpan.getTextContent(),containsString(\"\" + NUM_CALL_WITH_TOKEN))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "i < NUM_CALL_WITH_TOKEN@@@30@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "roundtrip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "i++@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->6 [style = bold, label=""];
5->2 [style = bold, label=""];
24->21 [style = bold, label=""];
38->26 [style = bold, label=""];
1->4 [style = solid, label="TOKEN_NAME"];
23->9 [style = bold, label=""];
20->23 [style = bold, label=""];
11->22 [style = bold, label=""];
39->17 [style = bold, label=""];
20->23 [style = solid, label="i"];
32->38 [style = bold, label=""];
31->11 [style = bold, label=""];
44->18 [style = bold, label=""];
10->24 [style = bold, label=""];
6->4 [style = bold, label=""];
24->31 [style = solid, label="request"];
19->35 [style = solid, label="tokenUuid"];
35->41 [style = bold, label=""];
40->23 [style = solid, label="i"];
8->42 [style = bold, label=""];
48->19 [style = bold, label=""];
47->33 [style = bold, label=""];
14->39 [style = bold, label=""];
12->14 [style = bold, label=""];
40->23 [style = bold, label=""];
30->43 [style = bold, label=""];
9->20 [style = bold, label=""];
29->37 [style = bold, label=""];
19->8 [style = bold, label=""];
46->27 [style = bold, label=""];
37->35 [style = bold, label=""];
26->41 [style = solid, label="tokenName"];
48->42 [style = solid, label="tokenValue"];
19->45 [style = solid, label="tokenUuid"];
42->34 [style = solid, label="restWc"];
43->10 [style = bold, label=""];
0->4 [style = solid, label="NUM_CALL_WITH_TOKEN"];
27->15 [style = bold, label=""];
10->21 [style = solid, label="TOKEN_NAME"];
13->16 [style = solid, label="NUM_CALL_WITH_TOKEN"];
13->40 [style = bold, label=""];
23->9 [style = dotted, label="true"];
45->34 [style = bold, label=""];
43->45 [style = solid, label="wc"];
3->1 [style = bold, label=""];
33->16 [style = bold, label=""];
2->3 [style = bold, label=""];
22->32 [style = bold, label=""];
15->44 [style = bold, label=""];
22->32 [style = solid, label="responseContent"];
17->36 [style = bold, label=""];
42->12 [style = bold, label=""];
36->13 [style = bold, label=""];
1->6 [style = solid, label="TOKEN_NAME"];
28->47 [style = bold, label=""];
26->36 [style = solid, label="tokenName"];
42->12 [style = solid, label="restWc"];
0->6 [style = solid, label="NUM_CALL_WITH_TOKEN"];
25->46 [style = bold, label=""];
23->28 [style = bold, label=""];
34->29 [style = bold, label=""];
10->8 [style = solid, label="TOKEN_NAME"];
26->8 [style = solid, label="tokenName"];
40->20 [style = solid, label="i"];
16->45 [style = bold, label=""];
13->23 [style = solid, label="NUM_CALL_WITH_TOKEN"];
26->48 [style = bold, label=""];
18->30 [style = bold, label=""];
21->31 [style = bold, label=""];
23->20 [style = dotted, label="true"];
19->17 [style = solid, label="tokenUuid"];
6->4 [style = solid, label="j"];
1->0 [style = bold, label=""];
7->2 [style = bold, label=""];
}
