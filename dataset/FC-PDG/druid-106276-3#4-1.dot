digraph {
11 [style = filled, label = "testGroupByExpressionMultiMultiAuto['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(\"xx\").setQuerySegmentSpec(new LegacySegmentSpec(\"1970/3000\")).setGranularity(Granularities.ALL).setDimensions(new DefaultDimensionSpec(\"texpr\",\"texpr\")).setVirtualColumns(new ExpressionVirtualColumn(\"texpr\",\"cartesian_map((x,y)  concat(x, y), tags, othertags)\",ValueType.STRING,TestExprMacroTable.INSTANCE)).setLimit(5).setAggregatorSpecs(new CountAggregatorFactory(\"count\")).setContext(context).build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,result.toList(),\"expr-multi-multi\")@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expectedException.expectMessage(\"GroupBy v1 does not support dimension selectors with unknown cardinality.\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"texpr\",\"t1u1\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"texpr\",\"t1u2\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"texpr\",\"t2u1\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"texpr\",\"t2u2\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"texpr\",\"t3u1\",\"count\",2L))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,result.toList(),\"expr-multi-multi-auto\")@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Sequence<ResultRow> result = helper.runQueryOnSegmentsObjs(ImmutableList.of(new QueryableIndexSegment(queryableIndex,SegmentId.dummy(\"sid1\")),new IncrementalIndexSegment(incrementalIndex,SegmentId.dummy(\"sid2\"))),query)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testGroupByExpressionMultiMulti['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970\",\"texpr\",\"t1u1\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970\",\"texpr\",\"t1u2\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970\",\"texpr\",\"t2u1\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970\",\"texpr\",\"t2u2\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970\",\"texpr\",\"t3u1\",\"count\",2L))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Sequence<Row> result = helper.runQueryOnSegmentsObjs(ImmutableList.of(new QueryableIndexSegment(queryableIndex,SegmentId.dummy(\"sid1\")),new IncrementalIndexSegment(incrementalIndex,SegmentId.dummy(\"sid2\"))),query)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testGroupByExpressionMultiMulti['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectedException.expect()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(\"xx\").setQuerySegmentSpec(new LegacySegmentSpec(\"1970/3000\")).setGranularity(Granularities.ALL).setDimensions(new DefaultDimensionSpec(\"texpr\",\"texpr\")).setVirtualColumns(new ExpressionVirtualColumn(\"texpr\",\"map((x)  concat(x, othertags), tags)\",ValueType.STRING,TestExprMacroTable.INSTANCE)).setLimit(5).setAggregatorSpecs(new CountAggregatorFactory(\"count\")).setContext(context).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->13 [style = dashed, label="0"];
4->3 [style = bold, label=""];
12->4 [style = solid, label="query"];
2->6 [style = bold, label=""];
0->2 [style = bold, label=""];
3->5 [style = solid, label="expectedResults"];
7->4 [style = bold, label=""];
7->8 [style = bold, label=""];
3->13 [style = solid, label="expectedResults"];
1->7 [style = bold, label=""];
11->2 [style = bold, label=""];
2->12 [style = bold, label=""];
9->5 [style = solid, label="expectedResults"];
6->1 [style = bold, label=""];
3->5 [style = bold, label=""];
7->9 [style = solid, label="query"];
12->4 [style = bold, label=""];
2->6 [style = dotted, label="true"];
2->1 [style = dotted, label="true"];
4->8 [style = dashed, label="0"];
8->9 [style = bold, label=""];
7->4 [style = solid, label="query"];
1->12 [style = bold, label=""];
9->5 [style = bold, label=""];
3->13 [style = bold, label=""];
7->12 [style = dashed, label="0"];
10->2 [style = bold, label=""];
2->7 [style = bold, label=""];
7->8 [style = solid, label="query"];
}
