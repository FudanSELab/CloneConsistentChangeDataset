digraph {
8 [style = filled, label = "final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider)provider@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(100,(long)sinkFunctionProvider.getParallelism().get())@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Map<String,String> modifiedOptions = getModifiedOptions(getFullSinkOptions(),null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testTableSinkWithParallelism['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final DynamicTableSink actualSink = createActualSink(SINK_SCHEMA,modifiedOptions)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final DynamicTableSink.SinkRuntimeProvider provider = actualSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(100,(long)sinkFunctionProvider.getParallelism().get())@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "KafkaDynamicSink actualSink = (KafkaDynamicSink)createTableSink(SCHEMA,modifiedOptions)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testTableSinkWithParallelism['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(expectedSink,actualSink)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testTableSinkWithParallelism['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertTrue(sinkFunctionProvider.getParallelism().isPresent())@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final DynamicTableSink expectedSink = createExpectedSink(SCHEMA_DATA_TYPE,null,valueEncodingFormat,new int((((,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c0298c,null,TOPIC,KAFKA_SINK_PROPERTIES,new FlinkFixedPartitioner<>(),KafkaSinkSemantic.EXACTLY_ONCE,100)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EncodingFormat<SerializationSchema<RowData>> keyEncodingFormat = new TestFormatFactory.EncodingFormatMock(\",\",ChangelogMode.insertOnly())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final DynamicTableSink expectedSink = createExpectedSink(SINK_SCHEMA.toPhysicalRowDataType(),keyEncodingFormat,valueEncodingFormat,SINK_KEY_FIELDS,SINK_VALUE_FIELDS,null,SINK_TOPIC,UPSERT_KAFKA_SOURCE_PROPERTIES,100)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final Map<String,String> modifiedOptions = getModifiedOptions(getBasicSinkOptions(),null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final EncodingFormat<SerializationSchema<RowData>> valueEncodingFormat = new EncodingFormatMock(\",\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(provider,instanceOf())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EncodingFormat<SerializationSchema<RowData>> valueEncodingFormat = new TestFormatFactory.EncodingFormatMock(\",\",ChangelogMode.insertOnly())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11->3 [style = bold, label=""];
16->12 [style = solid, label="valueEncodingFormat"];
12->13 [style = solid, label="expectedSink"];
9->7 [style = solid, label="actualSink"];
13->7 [style = bold, label=""];
4->7 [style = bold, label=""];
5->14 [style = dashed, label="0"];
10->6 [style = bold, label=""];
14->16 [style = bold, label=""];
17->15 [style = solid, label="modifiedOptions"];
6->9 [style = solid, label="modifiedOptions"];
7->0 [style = solid, label="provider"];
6->17 [style = dashed, label="0"];
0->8 [style = bold, label=""];
7->8 [style = solid, label="provider"];
4->7 [style = solid, label="expectedSink"];
5->4 [style = bold, label=""];
1->11 [style = bold, label=""];
12->13 [style = bold, label=""];
6->9 [style = bold, label=""];
8->1 [style = bold, label=""];
16->12 [style = bold, label=""];
0->8 [style = solid, label="provider"];
1->3 [style = bold, label=""];
17->15 [style = bold, label=""];
15->14 [style = bold, label=""];
9->15 [style = dashed, label="0"];
7->0 [style = bold, label=""];
15->13 [style = solid, label="actualSink"];
2->6 [style = bold, label=""];
18->17 [style = bold, label=""];
14->12 [style = solid, label="keyEncodingFormat"];
9->5 [style = bold, label=""];
0->1 [style = solid, label="provider"];
5->4 [style = solid, label="valueEncodingFormat"];
}
