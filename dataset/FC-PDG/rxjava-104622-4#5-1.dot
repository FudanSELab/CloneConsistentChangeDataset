digraph {
9 [style = filled, label = "TestSubscriberEx<Integer> ts = new TestSubscriberEx<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "to.awaitDone(500,TimeUnit.MILLISECONDS)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ts.assertTerminated()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final AtomicInteger count = new AtomicInteger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "windowUnsubscribeOverlapping['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "TestObserverEx<Integer> to = new TestObserverEx<Integer>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Observable.merge(Observable.range(1,10000).doOnNext(new Consumer<Integer>(){@Override public void accept(Integer t1){count.incrementAndGet()}}).window(5).take(2)).subscribe(to)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(9,count.get())@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(10,count.get())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "to.assertTerminated()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Flowable.merge(Flowable.range(1,10000).doOnNext(new Consumer<Integer>(){@Override public void accept(Integer t1){count.incrementAndGet()}}).window(5,4).take(2)).subscribe(ts)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "windowUnsubscribeNonOverlapping['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ts.assertValues(1,2,3,4,5,5,6,7,8,9)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "windowUnsubscribeOverlapping['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ts.awaitDone(500,TimeUnit.MILLISECONDS)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "to.assertValues(1,2,3,4,5,6,7,8,9,10)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->2 [style = bold, label=""];
1->3 [style = bold, label=""];
2->1 [style = solid, label="ts"];
15->5 [style = bold, label=""];
6->10 [style = dashed, label="0"];
2->15 [style = dashed, label="0"];
5->16 [style = bold, label=""];
5->1 [style = bold, label=""];
6->4 [style = bold, label=""];
12->10 [style = bold, label=""];
3->7 [style = bold, label=""];
2->9 [style = dashed, label="0"];
1->16 [style = dashed, label="0"];
14->12 [style = bold, label=""];
7->6 [style = bold, label=""];
8->9 [style = bold, label=""];
9->5 [style = bold, label=""];
7->12 [style = dashed, label="0"];
16->14 [style = bold, label=""];
13->15 [style = bold, label=""];
4->11 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
2->5 [style = bold, label=""];
9->1 [style = solid, label="ts"];
10->11 [style = bold, label=""];
15->16 [style = solid, label="to"];
}
