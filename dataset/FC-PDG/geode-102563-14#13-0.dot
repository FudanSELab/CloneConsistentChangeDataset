digraph {
21 [style = filled, label = "final ByteBufferVendor inputSharingImpl = (ByteBufferVendor)inputSharing@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "readAtLeastUsingSmallAppBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "ByteBuffer unwrappedBuffer = inputSharing.getBuffer()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(inputSharing.getBuffer().capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "SocketChannel mockChannel = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "unwrappedBuffer.limit(unwrappedBuffer.position() + preexistingBytes)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "readAtLeast['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final int individualRead = 60@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "unwrappedBuffer.position(unwrappedBuffer.capacity() - individualRead)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final ByteBufferSharingImpl inputSharingImpl = (ByteBufferSharingImpl)inputSharing@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
9->5 [style = solid, label="individualRead"];
17->25 [style = bold, label=""];
27->1 [style = bold, label=""];
9->1 [style = solid, label="individualRead"];
9->2 [style = bold, label=""];
18->0 [style = solid, label="initialFreeSpace"];
2->18 [style = solid, label="preexistingBytes"];
16->24 [style = dashed, label="0"];
6->23 [style = bold, label=""];
4->15 [style = bold, label=""];
10->3 [style = solid, label="initialUnwrappedBufferSize"];
9->24 [style = solid, label="individualRead"];
4->21 [style = bold, label=""];
10->3 [style = bold, label=""];
17->19 [style = solid, label="testSSLEngine"];
15->21 [style = dashed, label="0"];
8->6 [style = bold, label=""];
5->18 [style = bold, label=""];
2->4 [style = solid, label="preexistingBytes"];
15->16 [style = bold, label=""];
3->16 [style = solid, label="unwrappedBuffer"];
3->4 [style = bold, label=""];
26->13 [style = bold, label=""];
1->17 [style = bold, label=""];
2->0 [style = solid, label="preexistingBytes"];
11->5 [style = bold, label=""];
23->24 [style = bold, label=""];
17->12 [style = bold, label=""];
19->14 [style = bold, label=""];
2->5 [style = solid, label="preexistingBytes"];
16->1 [style = bold, label=""];
6->10 [style = bold, label=""];
14->20 [style = bold, label=""];
25->19 [style = bold, label=""];
21->16 [style = bold, label=""];
2->27 [style = solid, label="preexistingBytes"];
13->9 [style = bold, label=""];
12->19 [style = bold, label=""];
24->27 [style = bold, label=""];
18->0 [style = bold, label=""];
22->13 [style = bold, label=""];
2->8 [style = bold, label=""];
10->18 [style = solid, label="initialUnwrappedBufferSize"];
20->11 [style = bold, label=""];
}
