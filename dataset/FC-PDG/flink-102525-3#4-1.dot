digraph {
0 [style = filled, label = "testRestoreAfterScaleUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TaskStateSnapshot stateHandles = environment1.getCheckpointStateHandles()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "OperatorSubtaskState emptyHeadOperatorState = StateAssignmentOperation.operatorSubtaskStateFrom(new OperatorInstanceID(0,headOperatorID),Collections.emptyMap(),Collections.emptyMap(),Collections.emptyMap(),Collections.emptyMap())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AcknowledgeStreamMockEnvironment environment1 = createRunAndCheckpointOperatorChain(headOperatorID,new StatelessOperator(),tailOperatorID,new CounterOperator(),Optional.empty())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(2,environment1.getCheckpointStateHandles().getSubtaskStateMappings().size())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testRestoreWithoutState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(new HashSet<OperatorID>(){},RESTORED_OPERATORS)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testRestoreAfterScaleUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "AcknowledgeStreamMockEnvironment environment2 = createRunAndCheckpointOperatorChain(headOperatorID,new CounterOperator(),tailOperatorID,new CounterOperator(),Optional.of(stateHandles))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "AcknowledgeStreamMockEnvironment environment2 = createRunAndCheckpointOperatorChain(headOperatorID,new StatelessOperator(),tailOperatorID,new CounterOperator(),Optional.of(stateHandles))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "AcknowledgeStreamMockEnvironment environment1 = createRunAndCheckpointOperatorChain(headOperatorID,new CounterOperator(),tailOperatorID,new CounterOperator(),Optional.empty())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(new HashSet<OperatorID>(){},RESTORED_OPERATORS)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "OperatorID tailOperatorID = new OperatorID(44L,44L)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "stateHandles.putSubtaskStateByOperatorID(headOperatorID,emptyHeadOperatorState)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(headOperatorID,tailOperatorID)),RESTORED_OPERATORS)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "OperatorID headOperatorID = new OperatorID(42L,42L)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
7->1 [style = bold, label=""];
3->1 [style = bold, label=""];
4->2 [style = solid, label="tailOperatorID"];
4->12 [style = solid, label="tailOperatorID"];
3->5 [style = solid, label="emptyHeadOperatorState"];
8->3 [style = solid, label="headOperatorID"];
4->2 [style = bold, label=""];
4->6 [style = solid, label="tailOperatorID"];
1->13 [style = bold, label=""];
12->7 [style = bold, label=""];
7->3 [style = bold, label=""];
1->6 [style = solid, label="stateHandles"];
8->11 [style = solid, label="headOperatorID"];
8->2 [style = solid, label="headOperatorID"];
1->13 [style = solid, label="stateHandles"];
8->12 [style = solid, label="headOperatorID"];
2->12 [style = dashed, label="0"];
4->11 [style = solid, label="tailOperatorID"];
8->13 [style = solid, label="headOperatorID"];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
4->13 [style = solid, label="tailOperatorID"];
8->5 [style = solid, label="headOperatorID"];
6->11 [style = bold, label=""];
0->8 [style = bold, label=""];
4->12 [style = bold, label=""];
9->11 [style = dashed, label="0"];
14->8 [style = bold, label=""];
13->15 [style = bold, label=""];
8->4 [style = bold, label=""];
2->7 [style = bold, label=""];
6->9 [style = bold, label=""];
8->6 [style = solid, label="headOperatorID"];
}
