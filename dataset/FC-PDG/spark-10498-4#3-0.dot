digraph {
15 [style = filled, label = "JavaSparkContext jsc = new JavaSparkContext(sparkConf)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "boostingStrategy.getTreeStrategy().setMaxDepth(5)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Map<Integer,Integer> categoricalFeaturesInfo = new HashMap<Integer,Integer>()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Integer maxBins = 32@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "String impurity = \"gini\"@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "JavaPairRDD<Double,Double> predictionAndLabel = testData.mapToPair(new PairFunction<LabeledPoint,Double,Double>(){@Override public Tuple2<Double,Double> call(LabeledPoint p){return new Tuple2<Double,Double>(model.predict(p.features()),p.label())}})@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String(( args@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Integer maxDepth = 5@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "JavaRDD<LabeledPoint> trainingData = splits(0(@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "main['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "SparkConf sparkConf = new SparkConf().setAppName(\"JavaGradientBoostedTreesClassificationExample\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "boostingStrategy.getTreeStrategy().setNumClasses(2)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Double testErr = 1.0 * predictionAndLabel.filter(new Function<Tuple2<Double,Double>,Boolean>(){@Override public Boolean call(Tuple2<Double,Double> pl){return !pl._1().equals(pl._2())}}).count() / testData.count()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "SparkConf sparkConf = new SparkConf().setAppName(\"JavaDecisionTreeClassificationExample\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "GradientBoostedTreesModel sameModel = GradientBoostedTreesModel.load(jsc.sc(),\"target/tmp/myGradientBoostingClassificationModel\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "model.save(jsc.sc(),\"target/tmp/myDecisionTreeClassificationModel\")@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "JavaRDD<LabeledPoint>(( splits = data.randomSplit(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a7ac43)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String datapath = \"data/mllib/sample_libsvm_data.txt\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "jsc.stop()@@@35@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "JavaPairRDD<Double,Double> predictionAndLabel = testData.mapToPair(new PairFunction<LabeledPoint,Double,Double>(){@Override public Tuple2<Double,Double> call(LabeledPoint p){return new Tuple2<Double,Double>(model.predict(p.features()),p.label())}})@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "main['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "DecisionTreeModel sameModel = DecisionTreeModel.load(jsc.sc(),\"target/tmp/myDecisionTreeClassificationModel\")@@@33@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "main['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Double testErr = 1.0 * predictionAndLabel.filter(new Function<Tuple2<Double,Double>,Boolean>(){@Override public Boolean call(Tuple2<Double,Double> pl){return !pl._1().equals(pl._2())}}).count() / testData.count()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Integer numClasses = 2@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "boostingStrategy.treeStrategy().setCategoricalFeaturesInfo(categoricalFeaturesInfo)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "boostingStrategy.setNumIterations(3)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "System.out.println(\"Learned classification tree model:\" + model.toDebugString())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "System.out.println(\"Test Error: \" + testErr)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "BoostingStrategy boostingStrategy = BoostingStrategy.defaultParams(\"Classification\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final GradientBoostedTreesModel model = GradientBoostedTrees.train(trainingData,boostingStrategy)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "JavaRDD<LabeledPoint> data = MLUtils.loadLibSVMFile(jsc.sc(),datapath).toJavaRDD()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final DecisionTreeModel model = DecisionTree.trainClassifier(trainingData,numClasses,categoricalFeaturesInfo,impurity,maxDepth,maxBins)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "JavaRDD<LabeledPoint> testData = splits(1(@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->17 [style = bold, label=""];
23->6 [style = dotted, label="true"];
24->32 [style = bold, label=""];
0->4 [style = bold, label=""];
2->19 [style = solid, label="categoricalFeaturesInfo"];
1->10 [style = bold, label=""];
4->7 [style = bold, label=""];
26->2 [style = bold, label=""];
28->6 [style = dotted, label="true"];
9->13 [style = solid, label="trainingData"];
26->24 [style = solid, label="maxDepth"];
13->0 [style = bold, label=""];
33->15 [style = solid, label="sparkConf"];
20->18 [style = bold, label=""];
12->2 [style = bold, label=""];
30->24 [style = solid, label="numClasses"];
25->26 [style = bold, label=""];
8->33 [style = dashed, label="0"];
32->27 [style = bold, label=""];
21->8 [style = bold, label=""];
10->11 [style = bold, label=""];
9->24 [style = solid, label="trainingData"];
2->24 [style = solid, label="maxBins"];
11->16 [style = bold, label=""];
3->20 [style = bold, label=""];
19->13 [style = bold, label=""];
29->25 [style = bold, label=""];
7->14 [style = bold, label=""];
16->12 [style = bold, label=""];
17->14 [style = dashed, label="0"];
18->9 [style = solid, label="splits"];
2->19 [style = bold, label=""];
18->9 [style = bold, label=""];
31->7 [style = bold, label=""];
10->13 [style = solid, label="boostingStrategy"];
4->7 [style = solid, label="testErr"];
33->15 [style = bold, label=""];
28->33 [style = bold, label=""];
23->8 [style = bold, label=""];
25->24 [style = solid, label="impurity"];
1->30 [style = bold, label=""];
5->22 [style = bold, label=""];
15->3 [style = bold, label=""];
18->1 [style = solid, label="splits"];
2->24 [style = bold, label=""];
21->6 [style = dotted, label="true"];
29->24 [style = solid, label="categoricalFeaturesInfo"];
14->7 [style = dashed, label="0"];
9->1 [style = bold, label=""];
27->31 [style = solid, label="testErr"];
8->15 [style = solid, label="sparkConf"];
5->17 [style = dashed, label="0"];
17->5 [style = bold, label=""];
27->31 [style = bold, label=""];
8->15 [style = bold, label=""];
30->29 [style = bold, label=""];
}
