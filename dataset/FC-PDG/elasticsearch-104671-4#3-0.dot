digraph {
17 [style = filled, label = "parsed = Option.fromXContent(parser)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "XContentType xContentType = randomFrom(XContentType.values())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(option.getScore(),parsed.getScore(),Float.MIN_VALUE)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "BytesReference mutated@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "addRandomFields@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "parsed = PhraseSuggestion.Entry.Option.fromXContent(parser)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertEquals(option.getText(),parsed.getText())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "boolean humanReadable = randomBoolean()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "doTestFromXContent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "doTestFromXContent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "boolean addRandomFields@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Option option = createTestItem()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertToXContentEquivalent(originalBytes,toXContent(parsed,xContentType,humanReadable),xContentType)@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "doTestFromXContent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertNull(parser.nextToken())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ensureExpectedToken(XContentParser.Token.START_OBJECT,parser.nextToken(),null)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(option.collateMatch(),parsed.collateMatch())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Option parsed@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(option.getFreq(),parsed.getFreq())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "mutated = originalBytes@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(XContentParser.Token.END_OBJECT,parser.currentToken())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "BytesReference originalBytes = toShuffledXContent(option,xContentType,ToXContent.EMPTY_PARAMS,humanReadable)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "mutated = insertRandomFields(xContentType,originalBytes,null,random())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(option.getHighlighted(),parsed.getHighlighted())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23->3 [style = bold, label=""];
9->19 [style = bold, label=""];
5->14 [style = bold, label=""];
0->13 [style = solid, label="xContentType"];
1->13 [style = solid, label="humanReadable"];
14->17 [style = bold, label=""];
18->13 [style = solid, label="option"];
13->7 [style = bold, label=""];
11->12 [style = bold, label=""];
13->3 [style = solid, label="originalBytes"];
1->3 [style = solid, label="humanReadable"];
15->6 [style = solid, label="addRandomFields"];
13->10 [style = solid, label="originalBytes"];
22->15 [style = dotted, label="true"];
12->23 [style = dashed, label="0"];
14->21 [style = bold, label=""];
2->11 [style = bold, label=""];
20->18 [style = bold, label=""];
6->16 [style = dotted, label="false"];
19->8 [style = bold, label=""];
7->6 [style = bold, label=""];
17->3 [style = solid, label="parsed"];
17->21 [style = dashed, label="0"];
0->10 [style = solid, label="xContentType"];
0->1 [style = bold, label=""];
6->10 [style = bold, label=""];
6->16 [style = bold, label=""];
20->15 [style = dotted, label="true"];
8->11 [style = bold, label=""];
8->2 [style = bold, label=""];
0->3 [style = solid, label="xContentType"];
4->15 [style = dotted, label="true"];
6->10 [style = dotted, label="true"];
12->3 [style = bold, label=""];
17->9 [style = bold, label=""];
11->23 [style = bold, label=""];
22->18 [style = bold, label=""];
16->5 [style = bold, label=""];
13->16 [style = solid, label="originalBytes"];
21->9 [style = bold, label=""];
21->3 [style = solid, label="parsed"];
18->0 [style = bold, label=""];
10->5 [style = bold, label=""];
4->18 [style = bold, label=""];
1->13 [style = bold, label=""];
}
