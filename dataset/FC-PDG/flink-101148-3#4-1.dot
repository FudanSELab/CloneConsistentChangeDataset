digraph {
10 [style = filled, label = "assertThat(actual.get(1),equalTo(input.get(1)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(acknowledgeOnCheckpoint.numberOfOutstandingAcknowledgements(),is(1))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "AcknowledgeOnCheckpoint<String> acknowledgeOnCheckpoint = new AcknowledgeOnCheckpoint<>(mockedAcknowledger)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "AcknowledgeOnCheckpoint<String> acknowledgeOnCheckpoint = new AcknowledgeOnCheckpoint<>(mockedAcknowledger)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "acknowledgeOnCheckpoint.addAcknowledgeId(\"ackId\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<AcknowledgeIdsForCheckpoint<String>> input = new ArrayList<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "acknowledgeOnCheckpoint.restoreState(input)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(acknowledgeOnCheckpoint.numberOfOutstandingAcknowledgements(),is(5))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testAddAcknowledgeIdOnEmptyState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testAddAcknowledgeIdOnExistingState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "input.add(new AcknowledgeIdsForCheckpoint<>(1,asList(\"idsFor1\",\"moreIdsFor1\")))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "acknowledgeOnCheckpoint.addAcknowledgeId(\"ackId\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<AcknowledgeIdsForCheckpoint<String>> actual = acknowledgeOnCheckpoint.snapshotState(94,100)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testAddAcknowledgeIdOnEmptyState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "input.add(new AcknowledgeIdsForCheckpoint<>(0,asList(\"idsFor0\",\"moreIdsFor0\")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(actual.get(2).getCheckpointId(),is(94L))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(actual.get(2).getAcknowledgeIds(),containsInAnyOrder(\"ackId\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(actual.get(0),equalTo(input.get(0)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "List<AcknowledgeIdsForCheckpoint<String>> actual = acknowledgeOnCheckpoint.snapshotState(2,100)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->10 [style = bold, label=""];
6->3 [style = bold, label=""];
10->14 [style = bold, label=""];
2->6 [style = bold, label=""];
9->12 [style = solid, label="input"];
0->12 [style = bold, label=""];
4->13 [style = bold, label=""];
3->13 [style = dashed, label="0"];
0->17 [style = dashed, label="0"];
3->0 [style = bold, label=""];
13->17 [style = bold, label=""];
11->0 [style = bold, label=""];
15->11 [style = bold, label=""];
12->4 [style = bold, label=""];
0->4 [style = bold, label=""];
7->2 [style = bold, label=""];
9->15 [style = bold, label=""];
8->9 [style = bold, label=""];
14->18 [style = bold, label=""];
1->2 [style = bold, label=""];
4->10 [style = dashed, label="0"];
4->5 [style = bold, label=""];
18->16 [style = bold, label=""];
}
