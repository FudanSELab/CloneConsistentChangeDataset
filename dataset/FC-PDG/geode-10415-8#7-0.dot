digraph {
7 [style = filled, label = "final String cqName@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "VM vm2 = host.getVM(2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final int numberOfEntries = 10@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "vm3.invoke(executeCq)@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "SerializableRunnable executeCq = new CacheSerializableRunnable(\"Execute queries\"){public void run2(){LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName)QueryService qService = nulltry {qService = (PoolManager.find(poolName)).getQueryService()}catch (Exception cqe) CqAttributesFactory cqf = new CqAttributesFactory()CqListener(( cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())}((CqQueryTestListener)cqListeners(0().cqName = cqNamecqf.initCqListeners(cqListeners)CqAttributes cqa = cqf.create()try {CqQuery cq = qService.newCq(cqName,queryString(3(,cqa)SelectResults sr = cq.executeWithInitialResults()for (Object o : sr.asSet()){Struct s = (Struct)oObject value = s.get(\"value\")if (!(value instanceof TestObject)) {fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass())}}}catch (Exception ex) }}@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "vm2.invoke(executeCq)@@@81@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final int expectedEvents@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final int expectedEvents@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "vm1.invoke(new CacheSerializableRunnable(\"Create cache server\"){public void run2(){configAndStartBridgeServer()Region region = getRootRegion().getSubregion(regionName)}})@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "this.closeClient(vm1)@@@144@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "this.closeClient(vm0)@@@145@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final String cqName = \"testCq\"@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "validateCq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "VM vm@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "vm1.invoke(new CacheSerializableRunnable(\"Create cache server\"){public void run2(){assertEquals(0,TestObject.numInstance)}})@@@101@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final String cqName@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final int port1 = vm1.invoke(null)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "vm0.invoke(new CacheSerializableRunnable(\"Create cache server\"){public void run2(){Region region = getRootRegion().getSubregion(regionName)for (int i = 0 i < numberOfEntries * 2 i++){region.put(\"key-\" + i,new TestObject(i,\"vmware\"))}assertEquals(numberOfEntries * 3,TestObject.numInstance)}})@@@89@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "this.closeClient(vm2)@@@142@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "VM vm@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final int createEvents@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testCq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "this.closeClient(vm3)@@@143@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "vm.invoke(new CacheSerializableRunnable(\"Validate CQs\"){@Override public void run2(){LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName)QueryService cqService = nulltry {cqService = getCache().getQueryService()}catch (Exception cqe) CqQuery cQuery = cqService.getCq(cqName)if (cQuery == null) {fail(\"Failed to get CqQuery for CQ : \" + cqName)}CqAttributes cqAttr = cQuery.getCqAttributes()CqListener cqListeners = cqAttr.getCqListeners()CqQueryTestListener listener = (CqQueryTestListener)cqListeners(0(listener.printInfo(false)Object(( cqEvents = listener.getEvents()for (Object o : cqEvents){CqEvent cqEvent = (CqEvent)oObject value = cqEvent.getNewValue()if (!(value instanceof TestObject)) {fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass())}}if (listener.getTotalEventCount() != expectedEvents) {listener.waitForTotalEvents(expectedEvents)}assertEquals(\"Total Event Count mismatch\",(expectedEvents),listener.getTotalEventCount())assertEquals(\"Create Event mismatch\",createEvents,listener.getCreateEventCount())assertEquals(\"Update Event mismatch\",updateEvents,listener.getUpdateEventCount())}})@@@3@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "VM vm0 = host.getVM(0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "VM vm3 = host.getVM(3)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "VM vm1 = host.getVM(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "final int queryLimit = 6@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final int updateEvents@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "vm2.invoke(validateCq)@@@140@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final String poolName = \"testCqPool\"@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final int port0 = vm0.invoke(null)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "vm3.invoke(validateCq)@@@141@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "vm0.invoke(new CacheSerializableRunnable(\"Create cache server\"){public void run2(){configAndStartBridgeServer()Region region = getRootRegion().getSubregion(regionName)for (int i = 0 i < numberOfEntries i++){region.put(\"key-\" + i,new TestObject(i,\"vmware\"))}}})@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "SerializableRunnable validateCq = new CacheSerializableRunnable(\"Validate CQs\"){public void run2(){LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName)QueryService cqService = nulltry {cqService = getCache().getQueryService()}catch (Exception cqe) CqQuery cQuery = cqService.getCq(cqName)if (cQuery == null) {fail(\"Failed to get CqQuery for CQ : \" + cqName)}CqAttributes cqAttr = cQuery.getCqAttributes()CqListener cqListeners = cqAttr.getCqListeners()final CqQueryTestListener listener = (CqQueryTestListener)cqListeners(0(await().until(null)listener.printInfo(false)Object(( cqEvents = listener.getEvents()for (Object o : cqEvents){CqEvent cqEvent = (CqEvent)oObject value = cqEvent.getNewValue()if (!(value instanceof TestObject)) {fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass())}}assertEquals(\"Total Event Count mismatch\",(numberOfEntries * 2 - queryLimit),listener.getTotalEventCount())assertEquals(\"Create Event mismatch\",numberOfEntries,listener.getCreateEventCount())assertEquals(\"Update Event mismatch\",numberOfEntries - queryLimit,listener.getUpdateEventCount())}}@@@107@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final int createEvents@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "final String host0 = NetworkUtils.getServerHostName(vm0.getHost())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "vm1.invoke(new CacheSerializableRunnable(\"Create cache server\"){public void run2(){assertEquals(0,TestObject.numInstance)}})@@@83@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final Host host = Host.getHost(0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "createPool(vm3,poolName,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1747a8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1747ac,true)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "validateCq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "createPool(vm2,poolName,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@17479a,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@17479e,true)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40->38 [style = bold, label=""];
11->9 [style = dotted, label="true"];
32->30 [style = solid, label="executeCq"];
7->0 [style = solid, label="cqName"];
20->40 [style = solid, label="poolName"];
38->32 [style = bold, label=""];
12->33 [style = solid, label="vm2"];
11->10 [style = dotted, label="true"];
8->0 [style = solid, label="createEvents"];
24->33 [style = bold, label=""];
29->25 [style = solid, label="i"];
20->22 [style = solid, label="poolName"];
12->22 [style = solid, label="vm2"];
30->18 [style = bold, label=""];
2->0 [style = solid, label="expectedEvents"];
5->3 [style = dotted, label="true"];
11->0 [style = bold, label=""];
38->41 [style = solid, label="cqName"];
26->20 [style = bold, label=""];
20->22 [style = bold, label=""];
12->37 [style = bold, label=""];
5->4 [style = dotted, label="true"];
13->31 [style = bold, label=""];
11->7 [style = dotted, label="true"];
26->22 [style = solid, label="host0"];
41->39 [style = bold, label=""];
26->40 [style = solid, label="host0"];
9->0 [style = solid, label="expectedEvents"];
28->29 [style = solid, label="numberOfEntries"];
28->41 [style = solid, label="numberOfEntries"];
14->26 [style = bold, label=""];
27->41 [style = bold, label=""];
34->41 [style = solid, label="queryLimit"];
4->0 [style = solid, label="createEvents"];
19->16 [style = bold, label=""];
5->6 [style = dotted, label="true"];
16->31 [style = solid, label="vm0"];
21->25 [style = bold, label=""];
11->8 [style = dotted, label="true"];
5->0 [style = bold, label=""];
6->0 [style = solid, label="updateEvents"];
28->34 [style = bold, label=""];
16->23 [style = bold, label=""];
39->24 [style = bold, label=""];
23->12 [style = bold, label=""];
28->25 [style = solid, label="numberOfEntries"];
17->15 [style = bold, label=""];
15->14 [style = bold, label=""];
36->13 [style = bold, label=""];
11->6 [style = dotted, label="true"];
37->28 [style = bold, label=""];
37->40 [style = solid, label="vm3"];
10->0 [style = solid, label="updateEvents"];
29->17 [style = bold, label=""];
22->40 [style = bold, label=""];
15->22 [style = solid, label="port0"];
18->21 [style = bold, label=""];
5->1 [style = dotted, label="true"];
41->24 [style = solid, label="validateCq"];
23->13 [style = solid, label="vm1"];
1->0 [style = solid, label="cqName"];
34->29 [style = bold, label=""];
32->30 [style = bold, label=""];
25->27 [style = bold, label=""];
35->19 [style = bold, label=""];
33->36 [style = bold, label=""];
32->18 [style = solid, label="executeCq"];
37->36 [style = solid, label="vm3"];
5->2 [style = dotted, label="true"];
38->32 [style = solid, label="cqName"];
14->40 [style = solid, label="port1"];
41->39 [style = solid, label="validateCq"];
}
