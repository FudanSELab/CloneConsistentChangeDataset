digraph {
28 [style = filled, label = "assertThat(bounce1.activeTasks(),equalTo(Utils.mkSet(TASK_2_0,TASK_2_1,TASK_2_3)))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final ClientState bounce1 = createClient(UUID_3,1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "taskAssignor.assign()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(c3.activeTasks(),equalTo(mkSet(TASK_2_0,TASK_2_1,TASK_2_3)))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "bounce1.addPreviousStandbyTasks(Utils.mkSet(TASK_2_0,TASK_2_1,TASK_2_3))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "shouldAssignTasksNotPreviouslyActiveToNewClient['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "c2.addPreviousStandbyTasks(mkSet(TASK_0_1,TASK_1_0,TASK_0_2,TASK_2_0,TASK_0_3,TASK_1_2,TASK_2_1,TASK_1_3,TASK_2_3))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "shouldAssignTasksNotPreviouslyActiveToNewClient['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "c1.addPreviousStandbyTasks(mkSet(TASK_0_0,TASK_1_1,TASK_2_0,TASK_2_1,TASK_2_3))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "final ClientState c2 = createClientWithPreviousActiveTasks(UUID_2,1,TASK_0_0,TASK_1_1,TASK_2_2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ClientState c3 = createClientWithPreviousActiveTasks(UUID_3,1,TASK_2_0,TASK_2_1,TASK_2_3)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(newClient.activeTasks(),equalTo(mkSet(TASK_0_2,TASK_0_3,TASK_1_0)))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final ClientState c1 = createClientWithPreviousActiveTasks(UUID_1,1,TASK_0_1,TASK_1_2,TASK_1_3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(bounce2.activeTasks(),equalTo(Utils.mkSet(TASK_0_2,TASK_0_3,TASK_1_0)))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(c2.activeTasks(),equalTo(Utils.mkSet(TASK_0_0,TASK_1_1,TASK_2_2)))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "c1.addPreviousStandbyTasks(Utils.mkSet(TASK_0_0,TASK_1_1,TASK_2_0,TASK_2_1,TASK_2_3))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(c2.activeTasks(),equalTo(mkSet(TASK_0_0,TASK_1_1,TASK_2_2)))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertThat(probingRebalanceNeeded,is(false))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "newClient.addPreviousStandbyTasks(Utils.mkSet(TASK_0_0,TASK_1_0,TASK_0_1,TASK_0_2,TASK_1_1,TASK_2_0,TASK_0_3,TASK_1_2,TASK_2_1,TASK_1_3,TASK_2_2,TASK_2_3))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "final ClientState newClient = createClient(UUID_4,1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "c3.addPreviousStandbyTasks(Utils.mkSet(TASK_0_2,TASK_1_2))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertThat(c3.activeTasks(),equalTo(Utils.mkSet(TASK_2_0,TASK_2_1,TASK_2_3)))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertThat(c1.activeTasks(),equalTo(mkSet(TASK_0_1,TASK_1_2,TASK_1_3)))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "bounce2.addPreviousStandbyTasks(Utils.mkSet(TASK_0_2,TASK_0_3,TASK_1_0))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "shouldAssignTasksNotPreviouslyActiveToMultipleNewClients['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(c1.activeTasks(),equalTo(Utils.mkSet(TASK_0_1,TASK_1_2,TASK_1_3)))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "newClient.addPreviousStandbyTasks(mkSet(TASK_0_0,TASK_1_0,TASK_0_1,TASK_0_2,TASK_1_1,TASK_2_0,TASK_0_3,TASK_1_2,TASK_2_1,TASK_1_3,TASK_2_2,TASK_2_3))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "final boolean probingRebalanceNeeded = assign(TASK_0_0,TASK_1_0,TASK_0_1,TASK_0_2,TASK_1_1,TASK_2_0,TASK_0_3,TASK_1_2,TASK_2_1,TASK_1_3,TASK_2_2,TASK_2_3)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final StickyTaskAssignor taskAssignor = createTaskAssignor(TASK_0_0,TASK_1_0,TASK_0_1,TASK_0_2,TASK_1_1,TASK_2_0,TASK_0_3,TASK_1_2,TASK_2_1,TASK_1_3,TASK_2_2,TASK_2_3)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final ClientState bounce2 = createClient(UUID_4,1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(newClient.activeTasks(),equalTo(Utils.mkSet(TASK_0_2,TASK_0_3,TASK_1_0)))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "c2.addPreviousStandbyTasks(Utils.mkSet(TASK_0_1,TASK_1_0,TASK_0_2,TASK_2_0,TASK_0_3,TASK_1_2,TASK_2_1,TASK_1_3,TASK_2_3))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "c3.addPreviousStandbyTasks(mkSet(TASK_0_2,TASK_1_2))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->3 [style = bold, label=""];
16->15 [style = bold, label=""];
8->19 [style = dashed, label="0"];
0->9 [style = bold, label=""];
26->32 [style = bold, label=""];
23->5 [style = bold, label=""];
12->28 [style = bold, label=""];
28->30 [style = bold, label=""];
27->0 [style = bold, label=""];
25->21 [style = solid, label="probingRebalanceNeeded"];
29->31 [style = bold, label=""];
11->4 [style = bold, label=""];
18->17 [style = bold, label=""];
10->28 [style = dashed, label="0"];
8->6 [style = bold, label=""];
1->32 [style = dashed, label="0"];
7->8 [style = bold, label=""];
2->17 [style = dashed, label="0"];
2->30 [style = dashed, label="0"];
1->7 [style = bold, label=""];
15->18 [style = bold, label=""];
9->23 [style = dashed, label="0"];
19->25 [style = bold, label=""];
32->29 [style = bold, label=""];
1->20 [style = dashed, label="0"];
12->10 [style = bold, label=""];
24->4 [style = bold, label=""];
13->12 [style = bold, label=""];
0->23 [style = bold, label=""];
22->0 [style = bold, label=""];
14->0 [style = bold, label=""];
31->6 [style = bold, label=""];
6->25 [style = dashed, label="0"];
5->24 [style = bold, label=""];
11->24 [style = dashed, label="0"];
4->20 [style = bold, label=""];
12->15 [style = dashed, label="0"];
9->5 [style = bold, label=""];
3->13 [style = bold, label=""];
21->16 [style = bold, label=""];
10->2 [style = bold, label=""];
4->1 [style = bold, label=""];
5->11 [style = bold, label=""];
7->29 [style = dashed, label="0"];
8->31 [style = dashed, label="0"];
20->7 [style = bold, label=""];
7->19 [style = bold, label=""];
10->18 [style = dashed, label="0"];
25->21 [style = bold, label=""];
11->26 [style = bold, label=""];
13->16 [style = dashed, label="0"];
}
