digraph {
7 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\",\"customers\")@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "testCreateDropTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"', \" + \"'dummy'='test')\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Properties tableProperties = new Properties()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(PartitionSpec.unpartitioned(),icebergTable.spec())@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\",\"customers\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "fs.exists(hmsTableLocation)@@@26@@@['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"')\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TableIdentifier identifier = TableIdentifier.of(\"default\",\"customers\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA.asStruct(),icebergTable.schema().asStruct())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "fs.exists(hmsTableLocation)@@@24@@@['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"', \" + \"'dummy'='test', \" + \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(0,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@28@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "testCreateTableWithoutSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testCreateDropTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf(),tableProperties)@@@11@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf())@@@8@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "hmsTable.getParameters().entrySet().stream().filter(null).forEach(null)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
14->24 [style = dashed, label="0"];
13->10 [style = bold, label=""];
1->14 [style = solid, label="identifier"];
9->13 [style = solid, label="hmsTableLocation"];
16->13 [style = bold, label=""];
0->12 [style = dotted, label="true"];
20->28 [style = solid, label="hmsTableLocation"];
28->18 [style = bold, label=""];
24->2 [style = bold, label=""];
0->8 [style = dotted, label="false"];
16->13 [style = dotted, label="true"];
17->18 [style = dotted, label="true"];
0->6 [style = bold, label=""];
11->1 [style = bold, label=""];
9->5 [style = solid, label="hmsTableLocation"];
19->29 [style = bold, label=""];
2->3 [style = bold, label=""];
9->4 [style = bold, label=""];
26->25 [style = bold, label=""];
30->27 [style = bold, label=""];
0->4 [style = dotted, label="false"];
10->17 [style = bold, label=""];
3->15 [style = bold, label=""];
15->30 [style = bold, label=""];
31->1 [style = bold, label=""];
25->10 [style = dotted, label="false"];
25->29 [style = dotted, label="true"];
0->6 [style = dotted, label="true"];
9->16 [style = solid, label="hmsTableLocation"];
9->10 [style = solid, label="hmsTableLocation"];
32->2 [style = bold, label=""];
16->10 [style = dotted, label="true"];
0->7 [style = bold, label=""];
20->21 [style = bold, label=""];
5->16 [style = bold, label=""];
7->9 [style = bold, label=""];
0->9 [style = dotted, label="false"];
25->20 [style = dotted, label="false"];
0->16 [style = dotted, label="false"];
25->20 [style = bold, label=""];
20->18 [style = solid, label="hmsTableLocation"];
17->28 [style = bold, label=""];
25->21 [style = dotted, label="false"];
25->17 [style = dotted, label="false"];
14->32 [style = dashed, label="0"];
8->5 [style = bold, label=""];
1->32 [style = solid, label="identifier"];
20->17 [style = solid, label="hmsTableLocation"];
1->24 [style = bold, label=""];
1->2 [style = solid, label="identifier"];
0->7 [style = dotted, label="false"];
15->0 [style = bold, label=""];
20->10 [style = solid, label="hmsTableLocation"];
2->15 [style = bold, label=""];
25->19 [style = bold, label=""];
17->28 [style = dotted, label="true"];
23->10 [style = bold, label=""];
1->24 [style = solid, label="identifier"];
1->32 [style = bold, label=""];
0->5 [style = dotted, label="false"];
4->8 [style = bold, label=""];
1->14 [style = bold, label=""];
14->2 [style = bold, label=""];
22->1 [style = bold, label=""];
25->23 [style = dotted, label="false"];
25->19 [style = dotted, label="true"];
21->23 [style = bold, label=""];
27->26 [style = bold, label=""];
6->12 [style = bold, label=""];
}
