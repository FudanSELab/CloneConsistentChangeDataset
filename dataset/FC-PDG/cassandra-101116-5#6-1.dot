digraph {
3 [style = filled, label = "ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(failureReasonMap2,deserializedWfe.failureReasonByEndpoint)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "boolean dataPresent = false@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(dataPresent,deserializedRfe.dataPresent)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "WriteFailureException deserializedWfe = (WriteFailureException)deserialized.error@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(failureReasonMap1,deserializedRfe.failureReasonByEndpoint)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testV5WriteFailureSerDeser['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(rfe),ProtocolVersion.V5)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(consistencyLevel,deserializedRfe.consistency)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ReadFailureException deserializedRfe = (ReadFailureException)deserialized.error@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ErrorMessage deserialized = encodeThenDecode(ErrorMessage.fromException(rfe),ProtocolVersion.V5)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "WriteType writeType = WriteType.SIMPLE@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testV5ReadFailureSerDeser['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testV5ReadFailureSerDeser['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(receivedBlockFor,deserializedWfe.blockFor)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(receivedBlockFor,deserializedRfe.blockFor)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(writeType,deserializedWfe.writeType)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(receivedBlockFor,deserializedWfe.received)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(wfe),ProtocolVersion.V5)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int receivedBlockFor = 3@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ReadFailureException rfe = new ReadFailureException(consistencyLevel,receivedBlockFor,receivedBlockFor,dataPresent,failureReasonMap1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "WriteFailureException wfe = new WriteFailureException(consistencyLevel,receivedBlockFor,receivedBlockFor,writeType,failureReasonMap2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(consistencyLevel,deserializedWfe.consistency)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(receivedBlockFor,deserializedRfe.received)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23->16 [style = bold, label=""];
9->16 [style = dashed, label="0"];
18->23 [style = bold, label=""];
11->15 [style = dashed, label="0"];
2->1 [style = bold, label=""];
7->14 [style = dashed, label="0"];
21->17 [style = solid, label="writeType"];
19->20 [style = bold, label=""];
8->13 [style = solid, label="rfe"];
10->19 [style = solid, label="receivedBlockFor"];
10->3 [style = bold, label=""];
14->19 [style = bold, label=""];
7->4 [style = bold, label=""];
10->8 [style = solid, label="receivedBlockFor"];
9->7 [style = bold, label=""];
3->20 [style = solid, label="consistencyLevel"];
8->2 [style = solid, label="rfe"];
10->7 [style = solid, label="receivedBlockFor"];
13->1 [style = bold, label=""];
1->9 [style = bold, label=""];
3->0 [style = bold, label=""];
10->4 [style = solid, label="receivedBlockFor"];
5->20 [style = dashed, label="0"];
12->10 [style = bold, label=""];
21->15 [style = solid, label="writeType"];
8->2 [style = bold, label=""];
17->18 [style = solid, label="wfe"];
2->13 [style = dashed, label="0"];
6->10 [style = bold, label=""];
3->8 [style = solid, label="consistencyLevel"];
3->17 [style = solid, label="consistencyLevel"];
0->8 [style = bold, label=""];
22->10 [style = bold, label=""];
2->18 [style = dashed, label="0"];
8->17 [style = dashed, label="0"];
16->14 [style = bold, label=""];
3->21 [style = bold, label=""];
10->17 [style = solid, label="receivedBlockFor"];
4->19 [style = dashed, label="0"];
5->11 [style = bold, label=""];
0->8 [style = solid, label="dataPresent"];
20->15 [style = bold, label=""];
1->23 [style = dashed, label="0"];
4->5 [style = bold, label=""];
21->17 [style = bold, label=""];
0->11 [style = solid, label="dataPresent"];
17->18 [style = bold, label=""];
8->13 [style = bold, label=""];
10->14 [style = solid, label="receivedBlockFor"];
3->5 [style = solid, label="consistencyLevel"];
}
