digraph {
4 [style = filled, label = "final Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final String scenarioName = \"empty\"@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(testBucketPath,bucket.getBucketPath())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final BucketState<String> bucketState = new BucketState<>(\"test\",testBucket,Long.MAX_VALUE,null,new HashMap<>())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final FileSystem fs = FileSystem.get(testFolder.toURI())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(8,bucket.getInProgressPart().getSize())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertTrue(recoveredState.getCommittableFilesPerCheckpoint().isEmpty())@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testSerializationEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertNull(recoveredState.getInProgressResumableFile())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "final String scenarioName = \"only-in-progress\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final SimpleVersionedSerializer<BucketState<String>> serializer = new BucketStateSerializer<>(writer.getResumeRecoverableSerializer(),writer.getCommitRecoverableSerializer(),SimpleVersionedStringSerializer.INSTANCE)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testSerializationEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final BucketState<String> recoveredState = readBucketState(scenarioName,previousVersion)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(testBucket,recoveredState.getBucketPath())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final File testFolder = tempFolder.newFolder()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "long numFiles = Files.list(Paths.get(testBucketPath.toString())).map(null).count()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "byte(( bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer,bucketState)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final Bucket<String,String> bucket = restoreBucket(0,recoveredState)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(bucket.getPendingFileRecoverablesPerCheckpoint().isEmpty())@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Path testBucket = new Path(testFolder.getPath(),\"test\")@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "testSerializationOnlyInProgress['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertNull(bucket.getInProgressPart())@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final java.nio.file.Path outputPath = getOutputPath(scenarioName,previousVersion)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final RecoverableWriter writer = fs.createRecoverableWriter()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertThat(numFiles,is(1L))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final BucketState<String> recoveredState = SimpleVersionedSerialization.readVersionAndDeSerialize(serializer,bytes)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25->23 [style = bold, label=""];
11->20 [style = solid, label="serializer"];
4->7 [style = solid, label="testBucketPath"];
8->4 [style = bold, label=""];
20->16 [style = bold, label=""];
22->24 [style = bold, label=""];
2->5 [style = bold, label=""];
10->9 [style = bold, label=""];
19->20 [style = bold, label=""];
3->24 [style = dashed, label="0"];
1->21 [style = dashed, label="0"];
17->16 [style = solid, label="testBucket"];
11->19 [style = solid, label="serializer"];
24->2 [style = solid, label="scenarioName"];
7->21 [style = bold, label=""];
4->2 [style = bold, label=""];
17->15 [style = solid, label="testBucket"];
16->12 [style = bold, label=""];
15->19 [style = solid, label="bucketState"];
21->25 [style = bold, label=""];
24->8 [style = solid, label="scenarioName"];
25->23 [style = solid, label="numFiles"];
15->11 [style = bold, label=""];
17->15 [style = bold, label=""];
9->17 [style = bold, label=""];
11->19 [style = bold, label=""];
6->3 [style = bold, label=""];
3->8 [style = bold, label=""];
12->18 [style = bold, label=""];
3->8 [style = solid, label="scenarioName"];
19->20 [style = solid, label="bytes"];
7->1 [style = bold, label=""];
13->14 [style = bold, label=""];
14->10 [style = bold, label=""];
24->8 [style = bold, label=""];
5->15 [style = dashed, label="0"];
5->7 [style = bold, label=""];
2->5 [style = solid, label="recoveredState"];
3->2 [style = solid, label="scenarioName"];
1->0 [style = bold, label=""];
}
