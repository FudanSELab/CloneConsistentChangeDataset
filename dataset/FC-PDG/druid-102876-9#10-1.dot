digraph {
4 [style = filled, label = "EasyMock.replay(S3_CLIENT)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(ImmutableList.of(EXPECTED_URIS.stream().map(null).collect(Collectors.toList())),splits.map(null).collect(Collectors.toList()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "EasyMock.reset(S3_CLIENT)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testWithPrefixesSplit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "S3InputSource inputSource = new S3InputSource(SERVICE,SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,INPUT_DATA_CONFIG,null,PREFIXES,null,null)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(new JsonInputFormat(JSONPathSpec.DEFAULT,null,null),new MaxSizeSplitHintSpec(CONTENT.length * 3L))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(new JsonInputFormat(JSONPathSpec.DEFAULT,null,null),new MaxSizeSplitHintSpec(1L))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(EXPECTED_COORDS,splits.map(null).collect(Collectors.toList()))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectListObjects(PREFIXES.get(1),ImmutableList.of(EXPECTED_URIS.get(1)),CONTENT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(new JsonInputFormat(JSONPathSpec.DEFAULT,null,null),new MaxSizeSplitHintSpec(null,1))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testCreateSplitsWithSplitHintSpecRespectingHint['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EasyMock.verify(S3_CLIENT)@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testWithPrefixesSplit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "expectListObjects(PREFIXES.get(0),ImmutableList.of(EXPECTED_URIS.get(0)),CONTENT)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->3 [style = bold, label=""];
2->12 [style = dashed, label="0"];
10->2 [style = bold, label=""];
4->1 [style = bold, label=""];
3->5 [style = bold, label=""];
1->6 [style = bold, label=""];
11->12 [style = bold, label=""];
1->11 [style = bold, label=""];
13->3 [style = bold, label=""];
5->0 [style = bold, label=""];
1->10 [style = bold, label=""];
0->4 [style = bold, label=""];
12->8 [style = bold, label=""];
7->3 [style = bold, label=""];
2->8 [style = bold, label=""];
6->10 [style = dashed, label="0"];
6->11 [style = dashed, label="0"];
6->2 [style = bold, label=""];
}
