digraph {
8 [style = filled, label = "PlainActionFuture.get(null)@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertFalse(connection.isClosed())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "AtomicInteger nodeConnectedCount = new AtomicInteger()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(0,connectionManager.size())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testConnectAndDisconnect['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "ConnectionManager.ConnectionValidator validator = null@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "connectionManager.addListener(new TransportConnectionListener(){@Override public void onNodeConnected(DiscoveryNode node,Transport.Connection connection){nodeConnectedCount.incrementAndGet()}@Override public void onNodeDisconnected(DiscoveryNode node,Transport.Connection connection){nodeDisconnectedCount.incrementAndGet()}})@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testConnectAndDisconnect['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(0,nodeDisconnectedCount.get())@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "connection.close()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "AtomicReference<Transport.Connection> connectionRef = new AtomicReference<>()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "doAnswer(null).when(transport).openConnection(eq(node),eq(connectionProfile),any())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(1,nodeDisconnectedCount.get())@@@45@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "PlainActionFuture<Void> fut = new PlainActionFuture<>()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(0,nodeDisconnectedCount.get())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(connection.isClosed())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertFalse(connectionManager.nodeConnected(node))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(0,nodeConnectedCount.get())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertSame(connection,connectionManager.getConnection(node))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(1,nodeConnectedCount.get())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(1,nodeConnectedCount.get())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(0,connectionManager.size())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testConnectFailsDuringConnect['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "expectThrows(,null)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "PlainActionFuture.get(null)@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "AtomicInteger nodeDisconnectedCount = new AtomicInteger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DiscoveryNode node = new DiscoveryNode(\"\",new TransportAddress(InetAddress.getLoopbackAddress(),0),Version.CURRENT)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(connectionManager.nodeConnected(node))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "randomBoolean()@@@36@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(1,connectionManager.size())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertFalse(connectionManager.nodeConnected(node))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "connectionManager.connectToNode(node,connectionProfile,validator,fut)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Transport.Connection connection = new TestConnect(node)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ConnectionManager.ConnectionValidator validator = null@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "expectThrows(,null)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "connectionManager.disconnectFromNode(node)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->22 [style = bold, label=""];
17->8 [style = bold, label=""];
28->29 [style = bold, label=""];
24->12 [style = bold, label=""];
0->13 [style = bold, label=""];
5->23 [style = bold, label=""];
2->3 [style = bold, label=""];
27->30 [style = bold, label=""];
13->1 [style = solid, label="connection"];
3->6 [style = bold, label=""];
9->17 [style = bold, label=""];
23->3 [style = bold, label=""];
8->24 [style = dashed, label="0"];
0->32 [style = solid, label="node"];
0->14 [style = solid, label="node"];
0->29 [style = solid, label="node"];
29->27 [style = bold, label=""];
0->21 [style = solid, label="node"];
5->2 [style = bold, label=""];
0->14 [style = bold, label=""];
11->0 [style = bold, label=""];
21->9 [style = bold, label=""];
22->18 [style = bold, label=""];
17->24 [style = bold, label=""];
5->23 [style = dotted, label="false"];
12->4 [style = bold, label=""];
30->31 [style = bold, label=""];
15->20 [style = bold, label=""];
18->5 [style = bold, label=""];
31->33 [style = bold, label=""];
0->2 [style = solid, label="node"];
7->16 [style = bold, label=""];
26->15 [style = bold, label=""];
0->1 [style = solid, label="node"];
8->12 [style = bold, label=""];
25->15 [style = bold, label=""];
34->32 [style = bold, label=""];
4->1 [style = bold, label=""];
0->4 [style = solid, label="node"];
35->32 [style = solid, label="validator"];
19->15 [style = bold, label=""];
6->7 [style = bold, label=""];
21->35 [style = bold, label=""];
35->34 [style = bold, label=""];
1->10 [style = bold, label=""];
0->13 [style = solid, label="node"];
32->28 [style = bold, label=""];
13->14 [style = bold, label=""];
14->21 [style = bold, label=""];
5->2 [style = dotted, label="true"];
34->32 [style = solid, label="fut"];
20->11 [style = bold, label=""];
}
