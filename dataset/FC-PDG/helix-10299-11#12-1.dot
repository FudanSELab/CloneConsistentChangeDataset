digraph {
29 [style = filled, label = "return new ClusterModel(context,assignableReplicas,assignableNodes)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testNormalUsage['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "{}@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "clusterModel.assign(\"NOT-EXIST\",replica.getPartitionName(),replica.getReplicaState(),assignableNode.getInstanceName())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "clusterModel.assign(replica.getResourceName(),replica.getPartitionName(),replica.getReplicaState(),assignableNode.getInstanceName())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "getDefaultClusterModel['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "ClusterContext context = new ClusterContext(assignableReplicas,assignableNodes,Collections.emptyMap(),Collections.emptyMap())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "HelixException ex@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Set<AssignableReplica> assignableReplicas = generateReplicas(testCache)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ClusterContext context = new ClusterContext(assignableReplicas,2,Collections.emptyMap(),Collections.emptyMap())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ResourceControllerDataProvider testCache = setupClusterDataCache()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ResourceControllerDataProvider testCache = setupClusterDataCache()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().get(assignableNode.getFaultZone()).get(replica.getResourceName()).contains(replica.getPartitionName()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testNormalUsage['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "HelixException ex@@@19@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Set<AssignableNode> assignableNodes = generateNodes(testCache)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream().allMatch(null))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertFalse(clusterModel.getAssignableNodes().values().stream().anyMatch(null))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "clusterModel.release(replica.getResourceName(),replica.getPartitionName(),replica.getReplicaState(),assignableNode.getInstanceName())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "HelixException ex@@@25@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertTrue(assignableNode.getAssignedPartitionsMap().get(replica.getResourceName()).contains(replica.getPartitionName()))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "AssignableReplica replica = assignableReplicas.iterator().next()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertFalse(clusterModel.getAssignableNodes().values().stream().anyMatch(null))@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "clusterModel.assign(replica.getResourceName(),replica.getPartitionName(),replica.getReplicaState(),\"NON-EXIST\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.fail(\"Assigning a non existing resource partition shall fail.\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "{}@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "AssignableNode assignableNode = assignableNodes.iterator().next()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.fail(\"Assigning a resource partition to a non existing instance shall fail.\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "initialize()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream().allMatch(null))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "HelixException ex@@@25@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
8->10 [style = bold, label=""];
27->18 [style = bold, label=""];
25->1 [style = bold, label=""];
18->15 [style = solid, label="testCache"];
28->30 [style = bold, label=""];
22->19 [style = bold, label=""];
0->6 [style = bold, label=""];
7->12 [style = bold, label=""];
6->21 [style = bold, label=""];
2->3 [style = bold, label=""];
18->15 [style = bold, label=""];
1->29 [style = dashed, label="0"];
1->29 [style = solid, label="context"];
3->26 [style = bold, label=""];
16->1 [style = solid, label="assignableNodes"];
3->6 [style = bold, label=""];
9->20 [style = bold, label=""];
16->25 [style = bold, label=""];
16->29 [style = solid, label="assignableReplicas"];
26->6 [style = bold, label=""];
15->16 [style = bold, label=""];
15->16 [style = solid, label="testCache"];
10->7 [style = bold, label=""];
1->23 [style = bold, label=""];
16->25 [style = solid, label="assignableNodes"];
4->1 [style = solid, label="context"];
4->25 [style = dashed, label="0"];
15->4 [style = solid, label="testCache"];
12->13 [style = bold, label=""];
11->5 [style = bold, label=""];
23->22 [style = bold, label=""];
19->14 [style = bold, label=""];
18->16 [style = solid, label="testCache"];
4->29 [style = solid, label="assignableNodes"];
25->1 [style = solid, label="context"];
5->0 [style = bold, label=""];
15->1 [style = solid, label="assignableReplicas"];
21->7 [style = bold, label=""];
14->9 [style = bold, label=""];
4->1 [style = bold, label=""];
15->25 [style = solid, label="assignableReplicas"];
16->4 [style = bold, label=""];
1->29 [style = bold, label=""];
16->1 [style = solid, label="assignableReplicas"];
17->18 [style = bold, label=""];
30->15 [style = bold, label=""];
15->4 [style = solid, label="assignableReplicas"];
20->11 [style = bold, label=""];
}
