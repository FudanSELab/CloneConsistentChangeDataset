digraph {
7 [style = filled, label = "cannotVectorize()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "builder.setLimit(Integer.MAX_VALUE).setVirtualColumns(expressionVirtualColumn).setAggregatorSpecs(aggregatorSpecs2)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "builder.setLimit(Integer.MAX_VALUE).setAggregatorSpecs(aggregatorSpecs)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "QueryRunner<ResultRow> mergeRunner = factory.getToolchest().mergeResults(runner)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "GroupByQuery query = builder.build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(builder.build())),\"no-limit\")@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testGroupByWithOrderLimit3['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testGroupByOrderLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<AggregatorFactory> aggregatorSpecs = Arrays.asList(QueryRunnerTestHelper.ROWS_COUNT,new DoubleSumAggregatorFactory(\"idx\",null,\"index / 2 + indexMin\",TestExprMacroTable.INSTANCE))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query)),\"no-limit\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(builder.build())),\"no-limit\")@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<AggregatorFactory> aggregatorSpecs2 = Arrays.asList(QueryRunnerTestHelper.ROWS_COUNT,new DoubleSumAggregatorFactory(\"idx\",\"expr\"))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@38@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(\"rows\").addOrderByColumn(\"alias\",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testGroupByOrderLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final GroupByQuery query = builder.build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ExpressionVirtualColumn expressionVirtualColumn = new ExpressionVirtualColumn(\"expr\",\"index / 2 + indexMin\",ValueType.FLOAT,TestExprMacroTable.INSTANCE)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "QueryRunner<ResultRow> mergeRunner = factory.getToolchest().mergeResults(runner)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new DoubleSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(\"idx\",OrderByColumnSpec.Direction.DESCENDING).addOrderByColumn(\"alias\",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query)),\"no-limit\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "List<ResultRow> expectedResults = makeRows(query,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b540,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b547,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b54e,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b555,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b55c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b563,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b56a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b571,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b578,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b57f)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"alias\",\"travel\",\"rows\",2L,\"idx\",243L),makeRow(query,\"2011-04-01\",\"alias\",\"technology\",\"rows\",2L,\"idx\",177L),makeRow(query,\"2011-04-01\",\"alias\",\"news\",\"rows\",2L,\"idx\",221L),makeRow(query,\"2011-04-01\",\"alias\",\"health\",\"rows\",2L,\"idx\",216L),makeRow(query,\"2011-04-01\",\"alias\",\"entertainment\",\"rows\",2L,\"idx\",319L),makeRow(query,\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),makeRow(query,\"2011-04-01\",\"alias\",\"automotive\",\"rows\",2L,\"idx\",269L),makeRow(query,\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L),makeRow(query,\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectedResults = makeRows(builder.build(),new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b43f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b446,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b44d,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b454,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b45b,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b462,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b469,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b470,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b477,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3b47e)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->24 [style = solid, label="expectedResults"];
4->9 [style = bold, label=""];
17->5 [style = bold, label=""];
7->11 [style = bold, label=""];
7->21 [style = dashed, label="0"];
20->24 [style = solid, label="query"];
3->1 [style = bold, label=""];
22->19 [style = bold, label=""];
16->10 [style = bold, label=""];
18->11 [style = bold, label=""];
8->6 [style = bold, label=""];
10->17 [style = bold, label=""];
0->5 [style = solid, label="expectedResults"];
0->4 [style = solid, label="expectedResults"];
15->3 [style = bold, label=""];
20->22 [style = solid, label="query"];
6->13 [style = solid, label="aggregatorSpecs"];
9->16 [style = bold, label=""];
11->15 [style = bold, label=""];
20->22 [style = bold, label=""];
19->24 [style = bold, label=""];
15->12 [style = solid, label="query"];
0->17 [style = solid, label="expectedResults"];
0->14 [style = bold, label=""];
21->20 [style = bold, label=""];
15->3 [style = solid, label="query"];
12->8 [style = bold, label=""];
22->23 [style = solid, label="expectedResults"];
6->13 [style = bold, label=""];
0->14 [style = solid, label="expectedResults"];
1->12 [style = bold, label=""];
16->10 [style = solid, label="aggregatorSpecs2"];
2->7 [style = bold, label=""];
3->12 [style = solid, label="expectedResults"];
3->8 [style = solid, label="expectedResults"];
25->21 [style = bold, label=""];
13->0 [style = bold, label=""];
14->4 [style = bold, label=""];
24->23 [style = bold, label=""];
}
