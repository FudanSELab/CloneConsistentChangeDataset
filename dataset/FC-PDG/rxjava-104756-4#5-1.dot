digraph {
15 [style = filled, label = "mapped.subscribe(objectObserver)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Map<Integer,String> expected = new HashMap<Integer,String>()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "toMapWithErrorObservable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "verify(objectObserver,times(1)).onError(any())@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Observable<Map<Integer,String>> mapped = source.toMap(lengthFuncErr).toObservable()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "verify(objectSubscriber,never()).onComplete()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "toMapWithErrorFlowable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Flowable<Map<Integer,String>> mapped = source.toMap(lengthFuncErr).toFlowable()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Observable<String> source = Observable.just(\"a\",\"bb\",\"ccc\",\"dddd\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expected.put(3,\"ccc\")@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Map<Integer,String> expected = new HashMap<>()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "verify(objectObserver,never()).onNext(expected)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "verify(objectObserver,never()).onComplete()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "verify(objectSubscriber,never()).onNext(expected)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "mapped.subscribe(objectSubscriber)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expected.put(2,\"bb\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "verify(objectSubscriber,times(1)).onError(any())@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "toMapWithErrorFlowable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Flowable<String> source = Flowable.just(\"a\",\"bb\",\"ccc\",\"dddd\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expected.put(4,\"dddd\")@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expected.put(1,\"a\")@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Function<String,Integer> lengthFuncErr = new Function<String,Integer>(){@Override public Integer apply(String t1){if (\"bb\".equals(t1)) {throw new RuntimeException(\"Forced Failure\")}return t1.length()}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
4->10 [style = bold, label=""];
3->17 [style = dashed, label="0"];
11->20 [style = dashed, label="0"];
10->15 [style = bold, label=""];
0->6 [style = bold, label=""];
12->18 [style = solid, label="expected"];
12->6 [style = solid, label="expected"];
9->4 [style = bold, label=""];
3->14 [style = bold, label=""];
0->15 [style = dashed, label="0"];
3->12 [style = bold, label=""];
12->1 [style = bold, label=""];
5->17 [style = bold, label=""];
15->18 [style = bold, label=""];
1->9 [style = bold, label=""];
14->1 [style = bold, label=""];
6->18 [style = dashed, label="0"];
18->20 [style = bold, label=""];
17->12 [style = bold, label=""];
14->6 [style = solid, label="expected"];
12->14 [style = dashed, label="0"];
8->2 [style = bold, label=""];
7->19 [style = dashed, label="0"];
2->16 [style = dashed, label="0"];
6->11 [style = bold, label=""];
10->0 [style = bold, label=""];
16->5 [style = bold, label=""];
21->16 [style = bold, label=""];
20->19 [style = bold, label=""];
11->7 [style = bold, label=""];
2->5 [style = bold, label=""];
13->2 [style = bold, label=""];
}
