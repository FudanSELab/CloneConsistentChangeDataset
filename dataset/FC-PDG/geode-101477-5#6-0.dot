digraph {
18 [style = filled, label = "assertThat(region.getGroups()).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "listGroup2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "filter.setGroup(\"group1\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group1\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "filter.setGroup(\"group2\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(region.getGroups()).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<RuntimeCacheElement> regions = client.list(filter).getResult()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "listGroup1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "RuntimeCacheElement region = (RuntimeCacheElement)CacheElement.findElement(regions,\"customers1\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "region = (RuntimeCacheElement)CacheElement.findElement(regions,\"customers3\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "RuntimeRegionConfig region = CacheElement.findElement(regions,\"customers1\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "region = CacheElement.findElement(regions,\"customers3\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(regions).hasSize(2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "List<RuntimeRegionConfig> regions = client.list(filter).getResult()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "region = CacheElement.findElement(regions,\"customers2\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "listGroup1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(regions).hasSize(3)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "region = CacheElement.findElement(regions,\"customers3\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group1\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "RuntimeCacheElement region = CacheElement.findElement(regions,\"customers2\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group2\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "region = (RuntimeCacheElement)CacheElement.findElement(regions,\"customers2\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12->13 [style = solid, label="regions"];
16->15 [style = bold, label=""];
5->8 [style = bold, label=""];
12->11 [style = solid, label="regions"];
0->9 [style = bold, label=""];
4->17 [style = dashed, label="0"];
7->12 [style = bold, label=""];
11->1 [style = bold, label=""];
15->21 [style = bold, label=""];
19->20 [style = bold, label=""];
9->4 [style = bold, label=""];
7->20 [style = dashed, label="0"];
0->15 [style = dashed, label="0"];
3->15 [style = solid, label="regions"];
20->3 [style = bold, label=""];
3->16 [style = bold, label=""];
10->7 [style = bold, label=""];
3->17 [style = solid, label="regions"];
7->3 [style = bold, label=""];
0->14 [style = dashed, label="0"];
8->1 [style = bold, label=""];
3->8 [style = solid, label="regions"];
12->2 [style = bold, label=""];
2->0 [style = bold, label=""];
3->12 [style = dashed, label="0"];
3->2 [style = bold, label=""];
3->0 [style = solid, label="regions"];
9->21 [style = dashed, label="0"];
12->14 [style = solid, label="regions"];
2->16 [style = dashed, label="0"];
2->14 [style = bold, label=""];
3->4 [style = solid, label="regions"];
13->5 [style = bold, label=""];
14->9 [style = bold, label=""];
5->11 [style = bold, label=""];
8->11 [style = dashed, label="0"];
6->7 [style = bold, label=""];
4->13 [style = dashed, label="0"];
4->5 [style = bold, label=""];
21->17 [style = bold, label=""];
17->18 [style = bold, label=""];
9->13 [style = bold, label=""];
}
