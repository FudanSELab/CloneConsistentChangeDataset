digraph {
10 [style = filled, label = "when(lbDao.update(anyLong(),eq(lb))).thenReturn(true)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "LoadBalancerVO lb = new LoadBalancerVO(null,null,null,0L,0,0,null,0L,0L,domainId,null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testValidateRuleBeforeUpdateLB['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "inOrder.verify(lbServiceProvider).validateLBRule(any(),any())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(netDao.findById(anyLong())).thenReturn(Mockito.mock())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(lbServiceProvider.validateLBRule(any(),any())).thenReturn(true)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(netModel.getPublicIpAddress(anyLong())).thenReturn(Mockito.mock())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(lbDao.findById(isNull())).thenReturn(lb)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testRuleNotValidated['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "inOrder.verify(lbDao).update(anyLong(),eq(lb))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "InOrder inOrder = Mockito.inOrder(lbServiceProvider,lbDao)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "_lbMgr.updateLoadBalancerRule(updateLbRuleCmd)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "inOrder.verify(lbDao).update(isNull(),eq(lb))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "_lbMgr.updateLoadBalancerRule(updateLbRuleCmd)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(lbDao.update(isNull(),eq(lb))).thenReturn(true)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "when(lbDao.findById(anyLong())).thenReturn(lb)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testValidateRuleBeforeUpdateLB['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(lbServiceProvider.validateLBRule(any(),any())).thenReturn(false)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
17->8 [style = bold, label=""];
16->15 [style = bold, label=""];
0->16 [style = bold, label=""];
8->6 [style = solid, label="lb"];
0->2 [style = bold, label=""];
3->6 [style = bold, label=""];
3->12 [style = bold, label=""];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
11->9 [style = bold, label=""];
7->3 [style = bold, label=""];
10->11 [style = dashed, label="0"];
1->13 [style = dashed, label="0"];
6->12 [style = dashed, label="0"];
8->13 [style = solid, label="lb"];
8->1 [style = bold, label=""];
8->12 [style = solid, label="lb"];
5->0 [style = bold, label=""];
8->1 [style = solid, label="lb"];
2->16 [style = dashed, label="0"];
13->5 [style = bold, label=""];
4->8 [style = bold, label=""];
10->9 [style = bold, label=""];
14->8 [style = bold, label=""];
2->11 [style = bold, label=""];
8->13 [style = bold, label=""];
}
