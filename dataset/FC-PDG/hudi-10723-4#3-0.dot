digraph {
3 [style = filled, label = "HoodieEngineContext context@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Iterator<Tuple2<String,CleanFileInfo>> filesToBeDeletedPerPartition = cleanerPlan.getFilePathsToBeDeletedPerPartition().entrySet().stream().flatMap(null).iterator()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "HoodieCleanerPlan cleanerPlan@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "return cleanerPlan.getFilePathsToBeDeletedPerPartition().keySet().stream().map(null).collect(Collectors.toList())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Stream<Tuple2<String,CleanFileInfo>> filesToBeDeletedPerPartition = cleanerPlan.getFilePathsToBeDeletedPerPartition().entrySet().stream().flatMap(null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Stream<Tuple2<String,PartitionCleanStat>> partitionCleanStats = deleteFilesFunc(filesToBeDeletedPerPartition,table).collect(Collectors.groupingBy(null)).entrySet().stream().map(null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "HoodieCleanerPlan cleanerPlan@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "clean['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "int cleanerParallelism = Math.min((int)(cleanerPlan.getFilePathsToBeDeletedPerPartition().values().stream().mapToInt(null).count()),config.getCleanerParallelism())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "List<Tuple2<String,PartitionCleanStat>> partitionCleanStats = jsc.parallelize(cleanerPlan.getFilePathsToBeDeletedPerPartition().entrySet().stream().flatMap(null).collect(Collectors.toList()),cleanerParallelism).mapPartitionsToPair(deleteFilesFunc(table)).reduceByKey(null).collect()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "JavaSparkContext jsc = HoodieSparkEngineContext.getSparkContext(context)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "context.setJobStatus(this.getClass().getSimpleName(),\"Perform cleaning of partitions\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Map<String,PartitionCleanStat> partitionCleanStatsMap = partitionCleanStats.collect(Collectors.toMap(null,null))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "clean['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Map<String,PartitionCleanStat> partitionCleanStatsMap = partitionCleanStats.stream().collect(Collectors.toMap(null,null))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "LOG.info(\"Using cleanerParallelism: \" + cleanerParallelism)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "clean['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return cleanerPlan.getFilePathsToBeDeletedPerPartition().keySet().stream().map(null).collect(Collectors.toList())@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "HoodieEngineContext context@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12->3 [style = dotted, label="true"];
7->1 [style = bold, label=""];
12->15 [style = bold, label=""];
14->17 [style = bold, label=""];
1->0 [style = bold, label=""];
9->7 [style = bold, label=""];
15->18 [style = bold, label=""];
9->8 [style = dotted, label="true"];
12->11 [style = dotted, label="true"];
6->4 [style = bold, label=""];
6->2 [style = dotted, label="true"];
18->10 [style = bold, label=""];
10->13 [style = bold, label=""];
4->7 [style = dashed, label="0"];
18->10 [style = solid, label="cleanerParallelism"];
4->1 [style = bold, label=""];
3->15 [style = solid, label="context"];
6->3 [style = dotted, label="true"];
13->14 [style = bold, label=""];
9->3 [style = dotted, label="true"];
17->16 [style = bold, label=""];
0->5 [style = bold, label=""];
}
