digraph {
3 [style = filled, label = "spark.createDataFrame(spacedRecords,).withColumnRenamed(\"data\",partitionCol).write().mode(\"overwrite\").partitionBy(partitionCol).format(\"parquet\").saveAsTable(spacedTableName)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "List<SimpleRecord> spacedRecords = Lists.newArrayList(new SimpleRecord(1,whiteSpaceKey))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<SimpleRecord> results = spark.read().format(\"iceberg\").load(icebergLocation.toString()).as(Encoders.bean()).collectAsList()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "spark.createDataFrame(spacedRecords,).write().mode(\"overwrite\").parquet(whiteSpaceOldLocation.getPath())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "spark.catalog().createExternalTable(spacedTableName,whiteSpaceOldLocation.getPath())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "spark.createDataFrame(spacedRecords,).withColumnRenamed(\"data\",partitionCol).write().mode(\"overwrite\").partitionBy(partitionCol).format(format.toString()).saveAsTable(spacedTableName)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(\"Data should match\",spacedRecords,results)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testImportPartitionedWithWhitespace['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "File stagingDir = temp.newFolder(\"staging-dir\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TableIdentifier source = spark.sessionState().sqlParser().parseTableIdentifier(spacedTableName)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testImportUnpartitionedWithWhitespace['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testImportPartitionedWithWhitespace['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TableIdentifier source = spark.sessionState().sqlParser().parseTableIdentifier(spacedTableName)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String partitionCol = \"dAtA sPaced\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Table table = tables.create(SparkSchemaUtil.schemaForTable(spark,spacedTableName),SparkSchemaUtil.specForTable(spark,spacedTableName),ImmutableMap.of(),icebergLocation.getCanonicalPath())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"Data should match\",spacedRecords,results)@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "File whiteSpaceOldLocation = temp.newFolder(\"white space location\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "SparkTableUtil.importSparkTable(spark,source,table,stagingDir.toString())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "String spacedTableName = \"whitespacetable\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "File icebergLocation = temp.newFolder(\"partitioned_table\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "String whiteSpaceKey = \"some key value\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "HadoopTables tables = new HadoopTables(spark.sessionState().newHadoopConf())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->10 [style = bold, label=""];
4->17 [style = solid, label="spacedRecords"];
3->1 [style = bold, label=""];
19->6 [style = solid, label="source"];
20->9 [style = bold, label=""];
2->6 [style = bold, label=""];
7->1 [style = solid, label="spacedTableName"];
16->7 [style = bold, label=""];
18->19 [style = bold, label=""];
11->13 [style = solid, label="results"];
12->20 [style = bold, label=""];
7->14 [style = solid, label="spacedTableName"];
7->4 [style = solid, label="whiteSpaceKey"];
1->6 [style = solid, label="source"];
7->3 [style = solid, label="spacedTableName"];
7->4 [style = bold, label=""];
12->9 [style = bold, label=""];
16->18 [style = solid, label="spacedTableName"];
14->1 [style = bold, label=""];
0->7 [style = bold, label=""];
8->0 [style = bold, label=""];
16->10 [style = solid, label="spacedTableName"];
19->5 [style = bold, label=""];
9->18 [style = bold, label=""];
10->6 [style = solid, label="table"];
3->9 [style = dashed, label="0"];
15->0 [style = bold, label=""];
6->11 [style = bold, label=""];
11->13 [style = bold, label=""];
9->14 [style = bold, label=""];
21->16 [style = bold, label=""];
4->12 [style = bold, label=""];
9->3 [style = bold, label=""];
11->17 [style = bold, label=""];
7->10 [style = solid, label="spacedTableName"];
16->19 [style = solid, label="spacedTableName"];
10->2 [style = bold, label=""];
11->17 [style = solid, label="results"];
4->12 [style = solid, label="whiteSpaceKey"];
3->14 [style = dashed, label="0"];
12->13 [style = solid, label="spacedRecords"];
}
