digraph {
1 [style = filled, label = "Flowable<Map<Integer,Collection<String>>> mapped = source.toMultimap(lengthFuncErr).toFlowable()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Flowable<String> source = Flowable.just(\"a\",\"b\",\"cc\",\"dd\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Function<String,Integer> lengthFuncErr = new Function<String,Integer>(){@Override public Integer apply(String t1){if (\"b\".equals(t1)) {throw new RuntimeException(\"Forced Failure\")}return t1.length()}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "verify(objectSubscriber,times(1)).onError(any())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "toMultimapWithErrorFlowable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "mapped.subscribe(objectObserver)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expected.put(1,Arrays.asList(\"a\",\"b\"))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Observable<String> source = Observable.just(\"a\",\"b\",\"cc\",\"dd\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Map<Integer,Collection<String>> expected = new HashMap<>()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "verify(objectObserver,never()).onComplete()@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "verify(objectSubscriber,never()).onComplete()@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Observable<Map<Integer,Collection<String>>> mapped = source.toMultimap(lengthFuncErr).toObservable()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "verify(objectObserver,times(1)).onError(any())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "expected.put(2,Arrays.asList(\"cc\",\"dd\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "toMultimapWithErrorObservable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "verify(objectSubscriber,never()).onNext(expected)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "mapped.subscribe(objectSubscriber)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verify(objectObserver,never()).onNext(expected)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Map<Integer,Collection<String>> expected = new HashMap<Integer,Collection<String>>()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "toMultimapWithErrorFlowable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
16->13 [style = bold, label=""];
8->15 [style = bold, label=""];
9->0 [style = bold, label=""];
7->19 [style = solid, label="expected"];
1->14 [style = dashed, label="0"];
7->10 [style = bold, label=""];
3->18 [style = dashed, label="0"];
18->19 [style = bold, label=""];
8->6 [style = bold, label=""];
19->17 [style = bold, label=""];
2->9 [style = bold, label=""];
11->9 [style = bold, label=""];
1->7 [style = bold, label=""];
3->4 [style = bold, label=""];
15->18 [style = bold, label=""];
14->7 [style = bold, label=""];
0->14 [style = bold, label=""];
12->10 [style = bold, label=""];
5->17 [style = dashed, label="0"];
10->8 [style = bold, label=""];
6->15 [style = dashed, label="0"];
12->4 [style = solid, label="expected"];
0->1 [style = bold, label=""];
9->13 [style = dashed, label="0"];
1->12 [style = bold, label=""];
7->12 [style = dashed, label="0"];
4->19 [style = dashed, label="0"];
7->4 [style = solid, label="expected"];
4->5 [style = bold, label=""];
13->0 [style = bold, label=""];
}
