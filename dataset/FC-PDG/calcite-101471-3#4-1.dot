digraph {
4 [style = filled, label = "assertThat(transformed,is(instanceOf()))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "relBuilder.push(deptScan)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Join newJoin = (Join)transformedInput@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "RelNode transformed = RelOptUtil.pushDownJoinConditions(join,relBuilder)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "RexInputRef rightKeyInputRef = RexInputRef.of(empRow.getFieldCount() + rightJoinIndex,empDeptJoinRelFields)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertThat(newJoin.getCondition().toString(),is(relBuilder.call(SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,RexInputRef.of(EMP_ROW.getFieldCount(),join.getRowType()),RexInputRef.of(EMP_ROW.getFieldCount() + 1 + rightJoinIndex,join.getRowType())).toString()))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(transformed.getRowType(),is(join.getRowType()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(newJoin.getCondition().toString(),is(relBuilder.call(SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,RexInputRef.of(empRow.getFieldCount(),join.getRowType()),RexInputRef.of(empRow.getFieldCount() + 1 + rightJoinIndex,join.getRowType())).toString()))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(transformedInput,is(instanceOf()))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(leftInput.getChildExps().get(EMP_ROW.getFieldCount()).toString(),is(relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1)).toString()))@@@21@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(leftInput.getChildExps().get(empRow.getFieldCount()).toString(),is(relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1)).toString()))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "RexInputRef leftKeyInputRef = RexInputRef.of(leftJoinIndex,empDeptJoinRelFields)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Project leftInput = (Project)newJoin.getLeft()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "relBuilder.join(JoinRelType.INNER,joinCond)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(newJoin.getLeft(),is(instanceOf()))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "relBuilder.push(DEPT_SCAN)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "RexNode joinCond = relBuilder.call(SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1)),rightKeyInputRef)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int rightJoinIndex = DEPT_ROW.getFieldNames().indexOf(\"DEPTNO\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "relBuilder.push(empScan)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "RexNode joinCond = relBuilder.call(SqlStdOperatorTable.OR,relBuilder.call(SqlStdOperatorTable.EQUALS,relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1)),rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.AND,relBuilder.call(SqlStdOperatorTable.IS_NULL,relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1))),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testPushDownJoinConditionsWithExpandedIsNotDistinct['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Join join = (Join)relBuilder.build()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testPushDownJoinConditionsWithIsNotDistinct['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "RelNode transformedInput = transformed.getInput(0)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "RexInputRef leftKeyInputRef = RexInputRef.of(leftJoinIndex,EMP_DEPT_JOIN_REL_FIELDS)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int rightJoinIndex = deptRow.getFieldNames().indexOf(\"DEPTNO\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "relBuilder.push(EMP_SCAN)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testPushDownJoinConditionsWithIsNotDistinct['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "int leftJoinIndex = EMP_SCAN.getRowType().getFieldNames().indexOf(\"DEPTNO\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "RexInputRef rightKeyInputRef = RexInputRef.of(EMP_ROW.getFieldCount() + rightJoinIndex,EMP_DEPT_JOIN_REL_FIELDS)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "int leftJoinIndex = empScan.getRowType().getFieldNames().indexOf(\"DEPTNO\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2->17 [style = bold, label=""];
14->16 [style = bold, label=""];
16->3 [style = bold, label=""];
13->25 [style = bold, label=""];
24->28 [style = bold, label=""];
8->1 [style = solid, label="transformedInput"];
5->9 [style = solid, label="leftKeyInputRef"];
9->0 [style = bold, label=""];
9->7 [style = solid, label="joinCond"];
28->20 [style = bold, label=""];
7->10 [style = bold, label=""];
0->19 [style = bold, label=""];
20->26 [style = bold, label=""];
5->26 [style = dashed, label="0"];
12->30 [style = solid, label="rightKeyInputRef"];
22->9 [style = bold, label=""];
22->9 [style = solid, label="rightKeyInputRef"];
16->5 [style = solid, label="leftJoinIndex"];
12->30 [style = bold, label=""];
0->27 [style = dashed, label="0"];
12->9 [style = bold, label=""];
17->21 [style = dashed, label="0"];
13->11 [style = bold, label=""];
10->6 [style = bold, label=""];
28->26 [style = solid, label="leftJoinIndex"];
21->18 [style = bold, label=""];
6->15 [style = bold, label=""];
26->22 [style = bold, label=""];
12->9 [style = solid, label="rightKeyInputRef"];
9->27 [style = bold, label=""];
5->30 [style = solid, label="leftKeyInputRef"];
8->1 [style = bold, label=""];
3->5 [style = bold, label=""];
3->12 [style = solid, label="rightJoinIndex"];
6->4 [style = solid, label="transformed"];
19->23 [style = dashed, label="0"];
5->12 [style = bold, label=""];
2->21 [style = bold, label=""];
3->20 [style = dashed, label="0"];
12->22 [style = dashed, label="0"];
15->4 [style = bold, label=""];
11->25 [style = dashed, label="0"];
18->13 [style = bold, label=""];
4->8 [style = bold, label=""];
27->23 [style = bold, label=""];
1->2 [style = bold, label=""];
23->7 [style = bold, label=""];
30->0 [style = bold, label=""];
8->2 [style = solid, label="transformedInput"];
20->22 [style = solid, label="rightJoinIndex"];
9->30 [style = dashed, label="0"];
16->28 [style = dashed, label="0"];
26->9 [style = solid, label="leftKeyInputRef"];
19->7 [style = bold, label=""];
29->16 [style = bold, label=""];
17->18 [style = bold, label=""];
30->7 [style = solid, label="joinCond"];
10->6 [style = solid, label="join"];
}
