digraph {
74 [style = filled, label = "operands.add(builder.or(keyIsNulls),unknownLiteral)@@@79@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Set<CorrelationId> variablesSet@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
62 [style = filled, label = "builder.sortLimit(0,1,ImmutableList.of(builder.call(SqlStdOperatorTable.DESC,builder.field(\"cs\"))))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "builder.join(JoinRelType.INNER,trueLiteral,variablesSet)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "builder.project(builder.alias(trueLiteral,\"cs\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "builder.push(e.rel)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "operands.add(builder.isNotNull(builder.field(\"cs\")),trueLiteral)@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "offset += 2@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "allLiterals@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "variablesSet.isEmpty()@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "RelBuilder builder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "return builder.isNotNull(Util.last(builder.fields()))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "allLiterals@@@66@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "isNullOperands.addAll(keyIsNulls)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "!variablesSet.isEmpty()@@@40@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return builder.literal(true)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "RexNode project = builder.and(fields.stream().map(null).collect(Collectors.toList()))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "builder.join(JoinRelType.INNER,builder.literal(true),variablesSet)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "builder.aggregate(builder.groupKey(builder.field(\"cs\")),builder.count(false,\"c\"))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "final RexLiteral falseLiteral = (RexLiteral)builder.literal(false)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "builder.distinct()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "final List<RexNode> fields = new ArrayList<>(builder.fields())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "fields.add(builder.alias(trueLiteral,\"i\"))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "!keyIsNulls.isEmpty()@@@78@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "builder.project(builder.alias(builder.literal(true),\"i\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "RexSubQuery e@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "logic@@@5@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "fields.clear()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "!allLiterals@@@87@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "List<RexNode> isNullOperands = fields.stream().map(null).collect(Collectors.toList())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "logic@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "RexSubQuery e@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "RexLiteral b = trueLiteral@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "builder.filter(builder.or(builder.and(conditions),builder.or(isNullOperands)))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "builder.join(JoinRelType.INNER,builder.and(conditions),variablesSet)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "final List<RexNode> conditions = Pair.zip(expressionOperands,fields).stream().map(null).collect(Collectors.toList())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "builder.as(\"dt\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "builder.distinct()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "builder.push(e.rel)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "rewriteExists['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "operands.add(builder.equals(builder.field(\"ct\",\"c\"),builder.literal(0)),falseLiteral)@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "final RexLiteral unknownLiteral = builder.getRexBuilder().makeNullLiteral(trueLiteral.getType())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "builder.join(JoinRelType.LEFT,builder.and(conditions),variablesSet)@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "final ImmutableList.Builder<RexNode> operands = ImmutableList.builder()@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "logic@@@88@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "expressionOperands.clear()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "operands.add(builder.isNull(builder.field(\"c\")),falseLiteral)@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "variablesSet.isEmpty()@@@67@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "builder.distinct()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final List<RexNode> keyIsNulls = e.getOperands().stream().filter(null).map(null).collect(Collectors.toList())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "builder.join(JoinRelType.LEFT,trueLiteral,variablesSet)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "RelBuilder builder@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "RexSubQuery e@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "builder.filter(conditions)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "builder.project(builder.alias(project,\"cs\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "logic@@@35@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final List<RexNode> expressionOperands = new ArrayList<>(e.getOperands())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "builder.aggregate(builder.groupKey(fields))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "RelOptUtil.Logic logic@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "RelBuilder builder@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "builder.as(\"dt\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "b = unknownLiteral@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "operands.add(builder.equals(builder.field(\"cs\"),falseLiteral),b)@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "builder.project(fields)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "return trueLiteral@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "rewriteIn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "int offset@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "logic@@@56@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "RelOptUtil.Logic logic@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "builder.aggregate(builder.groupKey(),builder.count(false,\"c\"),builder.count(builder.fields()).as(\"ck\"))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "rewriteExists['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
54 [style = filled, label = "builder.as(\"ct\")@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "Set<CorrelationId> variablesSet@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "boolean allLiterals = RexUtil.allLiterals(e.getOperands())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "operands.add(builder.call(SqlStdOperatorTable.LESS_THAN,builder.field(\"ct\",\"ck\"),builder.field(\"ct\",\"c\")),b)@@@89@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "operands.add(builder.isNotNull(Util.last(builder.fields())),trueLiteral)@@@85@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "operands.add(falseLiteral)@@@94@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "return builder.call(SqlStdOperatorTable.CASE,operands.build())@@@95@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "builder.distinct()@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "RelOptUtil.Logic logic@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "builder.as(\"dt\")@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final RexLiteral trueLiteral = (RexLiteral)builder.literal(true)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "int refOffset = offset@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "logic@@@64@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "allLiterals@@@81@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "builder.aggregate(builder.groupKey(0))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Set<CorrelationId> variablesSet@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final List<RexNode> conditions = Pair.zip(expressionOperands,builder.fields()).stream().map(null).collect(Collectors.toList())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35->39 [style = dotted, label="false"];
74->69 [style = bold, label=""];
0->12 [style = dotted, label="true"];
83->51 [style = dotted, label="true"];
54->83 [style = bold, label=""];
14->81 [style = dashed, label="0"];
26->23 [style = solid, label="trueLiteral"];
22->37 [style = bold, label=""];
70->65 [style = bold, label=""];
27->28 [style = bold, label=""];
13->60 [style = dotted, label="true"];
28->50 [style = bold, label=""];
14->20 [style = dashed, label="0"];
45->68 [style = dotted, label="true"];
19->11 [style = bold, label=""];
77->80 [style = bold, label=""];
61->46 [style = bold, label=""];
72->31 [style = solid, label="b"];
62->73 [style = bold, label=""];
13->35 [style = dotted, label="true"];
79->27 [style = solid, label="logic"];
43->74 [style = bold, label=""];
42->58 [style = solid, label="conditions"];
83->23 [style = dotted, label="false"];
37->60 [style = bold, label=""];
65->80 [style = dotted, label="true"];
23->52 [style = bold, label=""];
65->52 [style = dotted, label="true"];
67->77 [style = solid, label="fields"];
81->30 [style = solid, label="variablesSet"];
25->47 [style = dotted, label="true"];
85->82 [style = bold, label=""];
1->6 [style = dotted, label="true"];
13->37 [style = dotted, label="true"];
35->64 [style = dotted, label="true"];
13->58 [style = dotted, label="true"];
0->3 [style = dotted, label="true"];
45->75 [style = dotted, label="true"];
66->28 [style = bold, label=""];
26->84 [style = solid, label="trueLiteral"];
49->70 [style = bold, label=""];
69->32 [style = dotted, label="false"];
0->7 [style = dotted, label="true"];
84->31 [style = solid, label="b"];
0->3 [style = bold, label=""];
65->77 [style = dotted, label="true"];
81->51 [style = solid, label="variablesSet"];
15->13 [style = bold, label=""];
25->47 [style = bold, label=""];
36->71 [style = bold, label=""];
85->31 [style = dotted, label="true"];
49->72 [style = solid, label="unknownLiteral"];
19->17 [style = dotted, label="true"];
9->87 [style = dashed, label="0"];
25->36 [style = bold, label=""];
44->74 [style = solid, label="keyIsNulls"];
27->30 [style = bold, label=""];
24->44 [style = bold, label=""];
34->54 [style = bold, label=""];
84->78 [style = bold, label=""];
60->56 [style = solid, label="project"];
17->0 [style = solid, label="logic"];
32->59 [style = bold, label=""];
76->86 [style = solid, label="falseLiteral"];
1->11 [style = bold, label=""];
45->11 [style = bold, label=""];
0->8 [style = dotted, label="true"];
83->23 [style = bold, label=""];
29->27 [style = bold, label=""];
46->63 [style = bold, label=""];
76->49 [style = bold, label=""];
81->28 [style = solid, label="variablesSet"];
78->85 [style = dotted, label="true"];
83->51 [style = bold, label=""];
70->73 [style = dotted, label="true"];
13->22 [style = dotted, label="true"];
3->7 [style = bold, label=""];
35->62 [style = dotted, label="true"];
6->12 [style = solid, label="variablesSet"];
52->48 [style = bold, label=""];
48->55 [style = bold, label=""];
38->46 [style = bold, label=""];
43->69 [style = bold, label=""];
65->55 [style = bold, label=""];
65->61 [style = bold, label=""];
26->55 [style = solid, label="trueLiteral"];
63->29 [style = bold, label=""];
26->76 [style = bold, label=""];
79->25 [style = solid, label="logic"];
76->31 [style = solid, label="falseLiteral"];
47->36 [style = bold, label=""];
45->79 [style = dotted, label="true"];
26->40 [style = solid, label="trueLiteral"];
84->47 [style = solid, label="b"];
70->42 [style = dotted, label="true"];
60->56 [style = bold, label=""];
87->37 [style = solid, label="isNullOperands"];
70->13 [style = dotted, label="true"];
1->10 [style = dotted, label="true"];
59->25 [style = bold, label=""];
16->13 [style = solid, label="variablesSet"];
41->69 [style = solid, label="allLiterals"];
35->39 [style = bold, label=""];
19->18 [style = dotted, label="true"];
13->53 [style = dotted, label="true"];
78->85 [style = bold, label=""];
55->77 [style = bold, label=""];
33->86 [style = bold, label=""];
51->52 [style = bold, label=""];
87->22 [style = bold, label=""];
69->40 [style = bold, label=""];
40->59 [style = bold, label=""];
70->38 [style = dotted, label="true"];
70->42 [style = bold, label=""];
49->74 [style = solid, label="unknownLiteral"];
56->35 [style = bold, label=""];
11->67 [style = bold, label=""];
72->85 [style = bold, label=""];
41->70 [style = solid, label="allLiterals"];
78->72 [style = bold, label=""];
2->0 [style = bold, label=""];
65->34 [style = dotted, label="true"];
64->62 [style = bold, label=""];
58->53 [style = bold, label=""];
76->82 [style = solid, label="falseLiteral"];
39->73 [style = bold, label=""];
85->82 [style = dotted, label="false"];
42->37 [style = solid, label="conditions"];
12->8 [style = bold, label=""];
65->83 [style = dotted, label="true"];
50->84 [style = bold, label=""];
43->74 [style = dotted, label="true"];
7->53 [style = dashed, label="0"];
31->43 [style = bold, label=""];
85->33 [style = bold, label=""];
27->66 [style = dotted, label="true"];
65->61 [style = dotted, label="true"];
59->25 [style = dotted, label="true"];
21->50 [style = solid, label="builder"];
0->9 [style = dotted, label="true"];
29->30 [style = solid, label="conditions"];
69->32 [style = bold, label=""];
68->63 [style = solid, label="offset"];
67->61 [style = solid, label="fields"];
72->47 [style = solid, label="b"];
0->9 [style = bold, label=""];
42->13 [style = bold, label=""];
13->87 [style = bold, label=""];
85->33 [style = dotted, label="true"];
70->65 [style = dotted, label="false"];
41->24 [style = bold, label=""];
7->12 [style = bold, label=""];
6->13 [style = solid, label="variablesSet"];
33->86 [style = dotted, label="true"];
53->57 [style = bold, label=""];
26->66 [style = solid, label="trueLiteral"];
65->34 [style = bold, label=""];
30->66 [style = bold, label=""];
19->20 [style = dotted, label="true"];
3->58 [style = dashed, label="0"];
79->65 [style = solid, label="logic"];
57->73 [style = bold, label=""];
67->32 [style = solid, label="fields"];
86->31 [style = bold, label=""];
1->14 [style = dotted, label="true"];
82->43 [style = bold, label=""];
65->55 [style = dotted, label="true"];
41->85 [style = solid, label="allLiterals"];
13->58 [style = bold, label=""];
44->22 [style = solid, label="keyIsNulls"];
26->51 [style = solid, label="trueLiteral"];
11->2 [style = bold, label=""];
78->43 [style = bold, label=""];
78->72 [style = dotted, label="true"];
29->28 [style = solid, label="conditions"];
13->87 [style = dotted, label="true"];
79->78 [style = solid, label="logic"];
80->46 [style = bold, label=""];
67->41 [style = bold, label=""];
27->30 [style = dotted, label="true"];
13->57 [style = dotted, label="true"];
45->81 [style = dotted, label="true"];
44->26 [style = bold, label=""];
9->15 [style = bold, label=""];
10->0 [style = solid, label="logic"];
81->23 [style = solid, label="variablesSet"];
26->53 [style = solid, label="trueLiteral"];
26->32 [style = solid, label="trueLiteral"];
65->48 [style = dotted, label="true"];
76->36 [style = solid, label="falseLiteral"];
8->9 [style = bold, label=""];
19->16 [style = dotted, label="true"];
33->31 [style = bold, label=""];
59->36 [style = bold, label=""];
13->56 [style = dotted, label="true"];
45->21 [style = dotted, label="true"];
79->13 [style = solid, label="logic"];
73->38 [style = bold, label=""];
35->64 [style = bold, label=""];
4->29 [style = dashed, label="0"];
16->12 [style = solid, label="variablesSet"];
69->40 [style = dotted, label="true"];
1->5 [style = dotted, label="true"];
52->63 [style = solid, label="offset"];
65->54 [style = dotted, label="true"];
13->4 [style = bold, label=""];
}
