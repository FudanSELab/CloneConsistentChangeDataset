digraph {
7 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"test\").granularity(Granularities.ALL).intervals(\"1970/2050\").aggregators(new DoubleMeanAggregatorFactory(\"meanOnDouble\",SimpleTestIndex.DOUBLE_COL),new DoubleMeanAggregatorFactory(\"meanOnString\",SimpleTestIndex.SINGLE_VALUE_DOUBLE_AS_STRING_DIM),new DoubleMeanAggregatorFactory(\"meanOnMultiValue\",SimpleTestIndex.MULTI_VALUE_DOUBLE_AS_STRING_DIM)).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "ObjectMapper jsonMapper = timeseriesQueryTestHelper.getObjectMapper()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Row result = Iterables.getOnlyElement(seq.toList()).toMapBasedRow(query)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TimeseriesResultValue result = ((Result<TimeseriesResultValue>)Iterables.getOnlyElement(seq.toList())).getValue()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "query = (TimeseriesQuery)jsonMapper.readValue(jsonMapper.writeValueAsString(query),)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"test\").granularity(Granularities.ALL).intervals(\"1970/2050\").aggregators(new DoubleMeanAggregatorFactory(\"meanOnDouble\",SimpleTestIndex.DOUBLE_COL),new DoubleMeanAggregatorFactory(\"meanOnString\",SimpleTestIndex.SINGLE_VALUE_DOUBLE_AS_STRING_DIM),new DoubleMeanAggregatorFactory(\"meanOnMultiValue\",SimpleTestIndex.MULTI_VALUE_DOUBLE_AS_STRING_DIM)).context(ImmutableMap.of(QueryContexts.VECTORIZE_KEY,doVectorize)).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(4.1333d,result.getDoubleMetric(\"meanOnMultiValue\").doubleValue(),0.0001d)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "boolean doVectorize@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testAggretatorUsingTimeseriesQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "GroupByQuery query = new GroupByQuery.Builder().setDataSource(\"test\").setGranularity(Granularities.ALL).setInterval(\"1970/2050\").setAggregatorSpecs(new DoubleMeanAggregatorFactory(\"meanOnDouble\",SimpleTestIndex.DOUBLE_COL)).setContext(Collections.singletonMap(GroupByQueryConfig.CTX_KEY_VECTORIZE,true)).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ObjectMapper jsonMapper = groupByQueryTestHelper.getObjectMapper()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Sequence seq = timeseriesQueryTestHelper.runQueryOnSegmentsObjs(segments,query)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testAggretatorUsingTimeseriesQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Sequence<ResultRow> seq = groupByQueryTestHelper.runQueryOnSegmentsObjs(segments,query)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(6.2d,result.getDoubleMetric(\"meanOnString\").doubleValue(),0.0001d)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testVectorAggretatorUsingGroupByQueryOnDoubleColumn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(6.2d,result.getMetric(\"meanOnDouble\").doubleValue(),0.0001d)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(6.2d,result.getDoubleMetric(\"meanOnDouble\").doubleValue(),0.0001d)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "query = (GroupByQuery)jsonMapper.readValue(jsonMapper.writeValueAsString(query),)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
0->6 [style = bold, label=""];
0->6 [style = solid, label="query"];
11->10 [style = dotted, label="true"];
17->14 [style = solid, label="query"];
18->17 [style = bold, label=""];
9->0 [style = solid, label="query"];
6->14 [style = dashed, label="0"];
7->8 [style = bold, label=""];
9->8 [style = bold, label=""];
2->4 [style = bold, label=""];
1->7 [style = bold, label=""];
11->9 [style = bold, label=""];
15->16 [style = bold, label=""];
0->17 [style = dashed, label="0"];
8->0 [style = bold, label=""];
12->13 [style = bold, label=""];
3->2 [style = bold, label=""];
17->14 [style = bold, label=""];
7->9 [style = dashed, label="0"];
2->16 [style = dashed, label="0"];
13->17 [style = solid, label="query"];
3->15 [style = dashed, label="0"];
17->15 [style = solid, label="query"];
8->18 [style = dashed, label="0"];
14->15 [style = bold, label=""];
4->5 [style = bold, label=""];
7->0 [style = solid, label="query"];
13->18 [style = bold, label=""];
}
