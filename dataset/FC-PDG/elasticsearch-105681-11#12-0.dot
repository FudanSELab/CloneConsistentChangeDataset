digraph {
34 [style = filled, label = "transport.handleResponse(requests.get(0).requestId,new TestResponse())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ReplicationTask task = maybeTask()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertPhase(task,\"finished\")@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertIndexShardCounter(0)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "executeOnPrimary@@@27@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
54 [style = filled, label = "assertFalse(request.isRetrySet.get())@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "new AsyncPrimaryAction(primaryRequest,listener,task)action{@Override protected ReplicationOperation<Request,Request,TransportReplicationAction.PrimaryResult<Request,TestResponse>> createReplicatedOperation(Request request,ActionListener<TransportReplicationAction.PrimaryResult<Request,TestResponse>> actionListener,TransportReplicationAction<Request,Request,TestResponse>.PrimaryShardReference primaryShardReference){return new NoopReplicationOperation(request,actionListener,primaryTerm){@Override public void execute(){assertPhase(task,\"primary\")assertFalse(executed.getAndSet(true))super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13e5f4e}}}}.run()@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertPhase(task,\"finished\")@@@51@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertFalse(request.isRetrySet.get())@@@48@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertPhase(task,\"finished\")@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "assertPhase(task,\"finished\")@@@47@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest = new TransportReplicationAction.ConcreteShardRequest<>(request,primaryShard.allocationId().getId(),primaryTerm)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ClusterState state = stateWithActivePrimary(index,true,randomInt(5))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "isRelocated.set(true)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "AtomicBoolean executed = new AtomicBoolean()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(\"primary request was not delegated to relocation target\",requests.get(0).action,equalTo(\"internal:testAction(p(\"))@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "String primaryTargetNodeId = primaryShard.relocatingNodeId()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertThat(requests,notNullValue())@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "PlainActionFuture<TestResponse> listener = new PlainActionFuture<>()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Request request = new Request(shardId).timeout(\"1ms\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ReplicationTask task = maybeTask()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "listener.get()@@@46@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertPhase(task,\"primary_delegation\")@@@47@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "ClusterState state = state(index,true,ShardRoutingState.RELOCATING)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "PlainActionFuture<TestResponse> listener = new PlainActionFuture<>()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final TransportReplicationAction.ConcreteShardRequest<Request> concreteShardRequest = (TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request@@@41@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertThat(executed.get(),equalTo(true))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertPhase(task,\"primary_delegation\")@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "executeOnPrimary = false@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest = new TransportReplicationAction.ConcreteShardRequest<>(request,primaryShard.allocationId().getRelocationId(),primaryTerm)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final List<CapturingTransport.CapturedRequest> requests = transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertThat(requests.size(),equalTo(1))@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertTrue(listener.isDone())@@@34@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "new AsyncPrimaryAction(primaryRequest,listener,task)action{@Override protected ReplicationOperation<Request,Request,TransportReplicationAction.PrimaryResult<Request,TestResponse>> createReplicatedOperation(Request request,ActionListener<TransportReplicationAction.PrimaryResult<Request,TestResponse>> actionListener,TransportReplicationAction<Request,Request,TestResponse>.PrimaryShardReference primaryShardReference){return new NoopReplicationOperation(request,actionListener,primaryTerm){@Override public void execute(){assertPhase(task,\"primary\")assertFalse(executed.getAndSet(true))super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13e61c5}}}@Override public void onFailure(Exception e){throw new RuntimeException(e)}}.run()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertTrue(listener.isDone())@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "assertTrue(listener.isDone())@@@45@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "assertThat(\"primary request was not delegated to relocation target\",requests.get(0).action,equalTo(\"internal:testAction2(p(\"))@@@40@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "assertTrue(executed.get())@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertFalse(executed.get())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(\"primary term not properly set on primary delegation\",concreteShardRequest.getPrimaryTerm(),equalTo(primaryTerm))@@@42@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "setState(clusterService,state)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "listener.get()@@@50@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "new AsyncPrimaryAction(primaryRequest,listener,task)new TestAction(Settings.EMPTY,\"internal:testAction2\",transportService,clusterService,shardStateAction,threadPool){@Override protected void shardOperationOnPrimary(Request shardRequest,IndexShard primary,ActionListener<PrimaryResult<Request,TestResponse>> listener){assertPhase(task,\"primary\")assertFalse(executed.getAndSet(true))super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13e6084shardRequestprimarylistener}}.run()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Request request = new Request(shardId).timeout(\"1ms\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertFalse(request.isRetrySet.get())@@@52@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "listener.get()@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertTrue(listener.isDone())@@@49@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "setState(clusterService,state)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(\"primary term not properly set on primary delegation\",((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(),equalTo(primaryTerm))@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "final ShardId shardId = new ShardId(index,\"_na_\",0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final String index = \"test\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28->6 [style = bold, label=""];
17->54 [style = bold, label=""];
38->34 [style = dotted, label="false"];
10->35 [style = bold, label=""];
50->56 [style = bold, label=""];
28->35 [style = solid, label="task"];
47->27 [style = bold, label=""];
38->18 [style = dotted, label="false"];
20->8 [style = dotted, label="false"];
20->27 [style = bold, label=""];
7->26 [style = bold, label=""];
22->4 [style = bold, label=""];
0->31 [style = dotted, label="true"];
48->51 [style = bold, label=""];
21->33 [style = solid, label="requests"];
28->25 [style = solid, label="task"];
15->11 [style = bold, label=""];
38->39 [style = dotted, label="false"];
38->33 [style = dotted, label="false"];
4->48 [style = solid, label="index"];
16->20 [style = solid, label="executeOnPrimary"];
20->18 [style = dotted, label="true"];
38->42 [style = dotted, label="false"];
39->47 [style = bold, label=""];
20->13 [style = dotted, label="false"];
26->28 [style = bold, label=""];
20->33 [style = dotted, label="false"];
38->25 [style = dotted, label="false"];
38->40 [style = dotted, label="true"];
38->19 [style = dotted, label="false"];
38->46 [style = dotted, label="true"];
5->29 [style = bold, label=""];
20->3 [style = dotted, label="false"];
14->30 [style = bold, label=""];
20->21 [style = dotted, label="false"];
38->20 [style = dotted, label="true"];
16->32 [style = bold, label=""];
12->48 [style = bold, label=""];
1->0 [style = bold, label=""];
56->6 [style = solid, label="state"];
34->8 [style = bold, label=""];
19->25 [style = bold, label=""];
4->12 [style = solid, label="index"];
20->5 [style = dotted, label="false"];
37->46 [style = bold, label=""];
30->7 [style = bold, label=""];
15->55 [style = solid, label="request"];
12->14 [style = bold, label=""];
13->5 [style = bold, label=""];
46->20 [style = bold, label=""];
44->37 [style = bold, label=""];
38->41 [style = dotted, label="false"];
20->24 [style = dotted, label="false"];
36->42 [style = bold, label=""];
0->31 [style = bold, label=""];
24->13 [style = bold, label=""];
8->24 [style = bold, label=""];
38->37 [style = dotted, label="true"];
56->6 [style = bold, label=""];
20->35 [style = dotted, label="false"];
20->25 [style = dotted, label="true"];
20->29 [style = dotted, label="false"];
20->17 [style = dotted, label="true"];
38->5 [style = dotted, label="false"];
35->2 [style = bold, label=""];
25->18 [style = bold, label=""];
9->20 [style = bold, label=""];
38->44 [style = dotted, label="true"];
7->3 [style = solid, label="request"];
1->17 [style = solid, label="task"];
17->23 [style = bold, label=""];
6->15 [style = bold, label=""];
38->19 [style = bold, label=""];
49->50 [style = bold, label=""];
20->27 [style = dotted, label="false"];
28->33 [style = solid, label="task"];
32->9 [style = bold, label=""];
41->36 [style = bold, label=""];
43->38 [style = bold, label=""];
28->13 [style = solid, label="task"];
18->39 [style = bold, label=""];
49->55 [style = solid, label="primaryTerm"];
23->19 [style = bold, label=""];
20->23 [style = dotted, label="true"];
4->12 [style = bold, label=""];
29->10 [style = bold, label=""];
3->21 [style = bold, label=""];
20->19 [style = dotted, label="true"];
0->16 [style = dotted, label="true"];
0->32 [style = bold, label=""];
55->52 [style = bold, label=""];
38->40 [style = bold, label=""];
40->44 [style = bold, label=""];
7->32 [style = solid, label="request"];
11->21 [style = solid, label="primaryTerm"];
20->34 [style = dotted, label="false"];
1->38 [style = solid, label="executeOnPrimary"];
28->42 [style = solid, label="task"];
28->46 [style = solid, label="task"];
20->17 [style = bold, label=""];
11->1 [style = bold, label=""];
31->16 [style = bold, label=""];
14->48 [style = dashed, label="0"];
24->3 [style = dashed, label="0"];
21->33 [style = bold, label=""];
38->27 [style = dotted, label="false"];
27->3 [style = bold, label=""];
14->30 [style = solid, label="state"];
18->39 [style = solid, label="requests"];
34->41 [style = bold, label=""];
51->49 [style = bold, label=""];
32->43 [style = bold, label=""];
52->20 [style = bold, label=""];
20->10 [style = dotted, label="false"];
38->3 [style = dotted, label="false"];
45->4 [style = bold, label=""];
20->2 [style = dotted, label="false"];
38->36 [style = dotted, label="false"];
38->47 [style = dotted, label="false"];
11->32 [style = solid, label="primaryTerm"];
16->38 [style = solid, label="executeOnPrimary"];
0->55 [style = bold, label=""];
11->24 [style = solid, label="primaryTerm"];
8->27 [style = dashed, label="0"];
38->21 [style = dotted, label="false"];
1->20 [style = solid, label="executeOnPrimary"];
42->5 [style = bold, label=""];
53->4 [style = bold, label=""];
33->34 [style = bold, label=""];
4->14 [style = solid, label="index"];
}
