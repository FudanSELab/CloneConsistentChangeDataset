digraph {
0 [style = filled, label = "JavaRDD<List<List<Integer>>> sequences = sc.parallelize(Arrays.asList(Arrays.asList(Arrays.asList(1,2),Arrays.asList(3)),Arrays.asList(Arrays.asList(1),Arrays.asList(3,2),Arrays.asList(1,2)),Arrays.asList(Arrays.asList(1,2),Arrays.asList(5)),Arrays.asList(Arrays.asList(6))),2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "JavaSparkContext sc = new JavaSparkContext(sparkConf)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "runPrefixSpan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "long freq = freqSeq.freq()@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "System.out.println(freqSeq.javaSequence() + \", \" + freqSeq.freq())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "PrefixSpan prefixSpan = new PrefixSpan().setMinSupport(0.5).setMaxPatternLength(5)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "runPrefixSpan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "PrefixSpan prefixSpan = new PrefixSpan().setMinSupport(0.5).setMaxPatternLength(5)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "SparkConf sparkConf = new SparkConf().setAppName(\"JavaPrefixSpanExample\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "sc.stop()@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(5,localFreqSeqs.size())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "JavaRDD<List<List<Integer>>> sequences = jsc.parallelize(Arrays.asList(Arrays.asList(Arrays.asList(1,2),Arrays.asList(3)),Arrays.asList(Arrays.asList(1),Arrays.asList(3,2),Arrays.asList(1,2)),Arrays.asList(Arrays.asList(1,2),Arrays.asList(5)),Arrays.asList(Arrays.asList(6))),2)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "List<List<Integer>> seq = freqSeq.javaSequence()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String(( args@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "JavaRDD<List<List<Integer>>> sequences = sc.parallelize(Arrays.asList(Arrays.asList(Arrays.asList(1,2),Arrays.asList(3)),Arrays.asList(Arrays.asList(1),Arrays.asList(3,2),Arrays.asList(1,2)),Arrays.asList(Arrays.asList(1,2),Arrays.asList(5)),Arrays.asList(Arrays.asList(6))),2)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "main['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "PrefixSpanModel<Integer> model = prefixSpan.run(sequences)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
6->3 [style = bold, label=""];
16->13 [style = bold, label=""];
13->11 [style = solid, label="sparkConf"];
2->1 [style = bold, label=""];
9->0 [style = solid, label="sequences"];
0->2 [style = bold, label=""];
12->15 [style = bold, label=""];
7->0 [style = bold, label=""];
9->7 [style = bold, label=""];
13->11 [style = bold, label=""];
11->0 [style = bold, label=""];
0->1 [style = solid, label="sequences"];
3->7 [style = bold, label=""];
3->9 [style = dashed, label="0"];
5->4 [style = bold, label=""];
16->14 [style = dotted, label="true"];
1->12 [style = bold, label=""];
4->8 [style = bold, label=""];
10->9 [style = bold, label=""];
8->4 [style = bold, label=""];
3->0 [style = solid, label="sequences"];
}
