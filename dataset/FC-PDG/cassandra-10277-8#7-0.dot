digraph {
25 [style = filled, label = "mt2.addMerkleTree(32,fullRange)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "Iterator<MerkleTree.TreeRange> ranges = mts1.rangeIterator()@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "IPartitioner partitioner = Murmur3Partitioner.instance@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "TreeResponse tr1 = new TreeResponse(a1,mts1)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "MerkleTrees mt1 = new MerkleTrees(partitioner)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "mt1.split(leftmost.right)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Iterator<MerkleTree.TreeRange> ranges = mt1.rangeIterator()@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "mts1.maxsize(fullRange,maxsize + 2)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "range.addAll(new MerkleTreesTest.HIterator(range.right))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "range.addAll(new MerkleTreesTest.HIterator(range.right))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "MerkleTrees mt2 = new MerkleTrees(Murmur3Partitioner.instance)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "range.addAll(new MerkleTreesTest.HIterator(range.right))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "middle = mt1.get(leftmost.right)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "testFromMismatchedMerkleTrees['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "leftmost = ranges.next()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "mts1.split(leftmost.right)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "mt2.init()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "mt1.maxsize(fullRange,maxsize + 2)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "mts2.addMerkleTree(32,fullRange)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "InetAddressAndPort a2 = InetAddressAndPort.getByName(\"127.0.0.2\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "TreeResponse tr2 = new TreeResponse(a2,mts2)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "mts2.init()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "MerkleTrees mt1 = new MerkleTrees(Murmur3Partitioner.instance)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1,tr2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "middle.hash(digest(\"arbitrary!\"))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "TreeResponse tr1 = new TreeResponse(a1,mt1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "int maxsize = 16@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "MerkleTrees mts2 = new MerkleTrees(partitioner)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "mt2.init()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Range<Token> fullRange = new Range<>(partitioner.getMinimumToken(),partitioner.getMinimumToken())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "mts1.get(partitioner.midpoint(leftmost.left,leftmost.right)).hash(digest(\"even more arbitrary!\"))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertTrue(dh.hasDifferenceBetween(a1,a2,fullRange))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "TreeResponse tr2 = new TreeResponse(a2,mt2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TreeResponse tr2 = new TreeResponse(a2,mt2)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertTrue(dh.get(a1).get(a2).isEmpty())@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "InetAddressAndPort a1 = InetAddressAndPort.getByName(\"127.0.0.1\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testFromMismatchedMerkleTrees['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "middle = mts1.get(leftmost.right)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertTrue(dh.get(a1).get(a2).size() == 1)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "mts1.init()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "range.addAll(new MerkleTreesTest.HIterator(range.right))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "MerkleTrees mt2 = new MerkleTrees(partitioner)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "MerkleTree.TreeRange middle = null@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "mts1.addMerkleTree(32,fullRange)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "MerkleTrees mts1 = new MerkleTrees(partitioner)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "mt1.init()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(Sets.newHashSet(a1),dh.keyHosts())@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "MerkleTree.TreeRange leftmost = null@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "mt1.addMerkleTree(32,fullRange)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1,tr2))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TreeResponse tr1 = new TreeResponse(a1,mt1)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "testFromEmptyMerkleTrees['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "mt1.get(partitioner.midpoint(leftmost.left,leftmost.right)).hash(digest(\"even more arbitrary!\"))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->3 [style = bold, label=""];
16->0 [style = bold, label=""];
10->24 [style = solid, label="partitioner"];
17->9 [style = bold, label=""];
17->22 [style = solid, label="a1"];
29->0 [style = bold, label=""];
21->8 [style = bold, label=""];
21->37 [style = dashed, label="0"];
25->6 [style = bold, label=""];
26->43 [style = dashed, label="0"];
27->15 [style = bold, label=""];
3->5 [style = bold, label=""];
52->47 [style = bold, label=""];
48->51 [style = bold, label=""];
24->21 [style = bold, label=""];
36->2 [style = bold, label=""];
14->44 [style = dashed, label="0"];
10->38 [style = solid, label="partitioner"];
38->32 [style = solid, label="mts1"];
45->17 [style = bold, label=""];
37->33 [style = solid, label="mts2"];
46->50 [style = bold, label=""];
9->52 [style = bold, label=""];
9->38 [style = bold, label=""];
9->24 [style = bold, label=""];
18->33 [style = dashed, label="0"];
46->50 [style = solid, label="tr2"];
1->44 [style = bold, label=""];
51->47 [style = solid, label="a1"];
7->8 [style = solid, label="fullRange"];
20->35 [style = solid, label="maxsize"];
14->22 [style = bold, label=""];
34->31 [style = bold, label=""];
40->34 [style = bold, label=""];
12->35 [style = bold, label=""];
11->36 [style = dashed, label="0"];
10->7 [style = bold, label=""];
33->13 [style = bold, label=""];
7->27 [style = solid, label="fullRange"];
8->42 [style = dashed, label="0"];
7->19 [style = solid, label="fullRange"];
22->18 [style = bold, label=""];
3->34 [style = dashed, label="0"];
24->45 [style = dashed, label="0"];
45->47 [style = solid, label="mt1"];
17->46 [style = solid, label="mt2"];
38->37 [style = bold, label=""];
44->32 [style = bold, label=""];
17->15 [style = solid, label="a1"];
30->10 [style = bold, label=""];
28->6 [style = dashed, label="0"];
5->11 [style = bold, label=""];
19->35 [style = dashed, label="0"];
9->27 [style = solid, label="a2"];
4->10 [style = bold, label=""];
49->45 [style = bold, label=""];
17->32 [style = solid, label="a1"];
35->29 [style = bold, label=""];
7->25 [style = solid, label="fullRange"];
0->43 [style = bold, label=""];
42->39 [style = bold, label=""];
31->36 [style = bold, label=""];
49->46 [style = solid, label="a2"];
6->40 [style = dashed, label="0"];
7->20 [style = bold, label=""];
33->13 [style = solid, label="tr2"];
32->33 [style = bold, label=""];
19->16 [style = bold, label=""];
32->13 [style = solid, label="tr1"];
7->39 [style = solid, label="fullRange"];
10->21 [style = solid, label="partitioner"];
39->40 [style = bold, label=""];
22->13 [style = solid, label="tr1"];
21->18 [style = solid, label="mt2"];
5->31 [style = dashed, label="0"];
43->41 [style = bold, label=""];
7->42 [style = solid, label="fullRange"];
37->42 [style = bold, label=""];
25->39 [style = dashed, label="0"];
7->35 [style = solid, label="fullRange"];
10->37 [style = solid, label="partitioner"];
47->50 [style = solid, label="tr1"];
20->17 [style = bold, label=""];
50->6 [style = bold, label=""];
0->26 [style = bold, label=""];
20->19 [style = solid, label="maxsize"];
18->13 [style = solid, label="tr2"];
47->46 [style = bold, label=""];
22->32 [style = dashed, label="0"];
51->49 [style = bold, label=""];
41->1 [style = bold, label=""];
17->27 [style = solid, label="a1"];
11->2 [style = bold, label=""];
2->12 [style = bold, label=""];
24->22 [style = solid, label="mt1"];
26->23 [style = bold, label=""];
18->13 [style = bold, label=""];
23->1 [style = bold, label=""];
16->29 [style = dashed, label="0"];
23->41 [style = dashed, label="0"];
1->14 [style = bold, label=""];
28->27 [style = bold, label=""];
21->17 [style = dashed, label="0"];
12->19 [style = bold, label=""];
9->18 [style = solid, label="a2"];
8->25 [style = bold, label=""];
9->33 [style = solid, label="a2"];
24->38 [style = dashed, label="0"];
13->28 [style = bold, label=""];
}
