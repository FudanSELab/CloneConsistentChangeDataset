digraph {
24 [style = filled, label = "List<Integer> values = getRandomInts(numVals,false)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i >= 0@@@4@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertQ(req(\"q\",\"*:*\",\"fl\",\"id, \" + field,\"sort\",\"product(-1,\" + field + \") asc\"),\"//*(@numFound='10'(\",\"//result/doc(1(/\" + type + \"(@name='\" + field + \"'((.='9'(\",\"//result/doc(2(/\" + type + \"(@name='\" + field + \"'((.='8'(\",\"//result/doc(3(/\" + type + \"(@name='\" + field + \"'((.='7'(\",\"//result/doc(10(/\" + type + \"(@name='\" + field + \"'((.='0'(\")@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertQ(req(\"q\",\"*:*\",\"fl\",\"id, \" + field + \", field(\" + field + \")\",\"sort\",\"id asc\"),\"//*(@numFound='10'(\",\"//result/doc(1(/\" + type + \"(@name='field(\" + field + \")'((.='0.0'(\",\"//result/doc(2(/\" + type + \"(@name='field(\" + field + \")'((.='1.1'(\",\"//result/doc(3(/\" + type + \"(@name='field(\" + field + \")'((.='2.2'(\",\"//result/doc(10(/\" + type + \"(@name='field(\" + field + \")'((.='9.9'(\")@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertQ(req(\"q\",\"*:*\",\"fl\",\"id, \" + field + \", field(\" + field + \")\",\"sort\",\"id asc\"),\"//*(@numFound='10'(\",\"//result/doc(1(/\" + type + \"(@name='field(\" + field + \")'((.='0'(\",\"//result/doc(2(/\" + type + \"(@name='field(\" + field + \")'((.='1'(\",\"//result/doc(3(/\" + type + \"(@name='field(\" + field + \")'((.='2'(\",\"//result/doc(10(/\" + type + \"(@name='field(\" + field + \")'((.='9'(\")@@@12@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int i = 0@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertU(adoc(\"id\",String.valueOf(i),field,String.format(Locale.ROOT,\"%f\",(float)i * 1.1)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "idAscNegXpathChecks(i + 1( = \"//result/doc(\" + (1 + i) + \"(/float(@name='product(-1,\" + field + \")'((.='\" + (-1.0f * (float)values.get(i)) + \"'(\"@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "++i@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "int i = 9@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertQ(req(\"q\",\"*:*\",\"fl\",\"id, \" + field,\"sort\",\"product(-1,\" + field + \") asc\"),ascNegXpathChecks)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "String assertNumFound = \"//*(@numFound='\" + numVals + \"'(\"@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "String type@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "List<PosVal<Integer>> ascNegPosVals = toAscendingPosVals(values.stream().map(null).collect(Collectors.toList()),true)@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "ascNegXpathChecks(i + 1( = \"//result/doc(\" + (1 + i) + \"(/int(@name='\" + field + \"'((.='\" + values.get(posVal.pos) + \"'(\"@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "String field@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "String type@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "idAscXpathChecks(0( = assertNumFound@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "String field@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "String(( ascNegXpathChecks = new String((((@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "assertQ(req(\"q\",\"*:*\",\"fl\",\"id, \" + field,\"sort\",\"product(-1,\" + field + \") asc\"),\"//*(@numFound='10'(\",\"//result/doc(1(/\" + type + \"(@name='\" + field + \"'((.='9.9'(\",\"//result/doc(2(/\" + type + \"(@name='\" + field + \"'((.='8.8'(\",\"//result/doc(3(/\" + type + \"(@name='\" + field + \"'((.='7.7'(\",\"//result/doc(10(/\" + type + \"(@name='\" + field + \"'((.='0.0'(\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "int i = 0@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertU(adoc(\"id\",String.valueOf(i),field,String.valueOf(values.get(i))))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "String(( idAscNegXpathChecks = new String((((@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "doTestFloatPointFunctionQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertQ(req(\"q\",\"*:*\",\"fl\",\"id, \" + field + \", field(\" + field + \")\",\"sort\",\"id asc\"),idAscXpathChecks)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "doTestIntPointFunctionQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "doTestIntPointFunctionQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String field@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertQ(req(\"q\",\"*:*\",\"fl\",\"id, \" + field + \", product(-1,\" + field + \")\",\"sort\",\"id asc\"),idAscNegXpathChecks)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "int numVals = 10 * RANDOM_MULTIPLIER@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "idAscNegXpathChecks(0( = assertNumFound@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "assertQ(req(\"q\",\"*:*\",\"fl\",\"id, \" + field + \", product(-1,\" + field + \")\",\"sort\",\"id asc\"),\"//*(@numFound='10'(\",\"//result/doc(1(/float(@name='product(-1,\" + field + \")'((.='-0.0'(\",\"//result/doc(2(/float(@name='product(-1,\" + field + \")'((.='-1.1'(\",\"//result/doc(3(/float(@name='product(-1,\" + field + \")'((.='-2.2'(\",\"//result/doc(10(/float(@name='product(-1,\" + field + \")'((.='-9.9'(\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "idAscXpathChecks(i + 1( = \"//result/doc(\" + (1 + i) + \"(/int(@name='field(\" + field + \")'((.='\" + values.get(i) + \"'(\"@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "ascNegXpathChecks(0( = assertNumFound@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "i < ascNegPosVals.size()@@@25@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertU(commit())@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertU(commit())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertQ(req(\"q\",\"*:*\",\"fl\",\"id, \" + field + \", product(-1,\" + field + \")\",\"sort\",\"id asc\"),\"//*(@numFound='10'(\",\"//result/doc(1(/float(@name='product(-1,\" + field + \")'((.='-0.0'(\",\"//result/doc(2(/float(@name='product(-1,\" + field + \")'((.='-1.0'(\",\"//result/doc(3(/float(@name='product(-1,\" + field + \")'((.='-2.0'(\",\"//result/doc(10(/float(@name='product(-1,\" + field + \")'((.='-9.0'(\")@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i--@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "String(( idAscXpathChecks = new String((((@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "PosVal<Integer> posVal = ascNegPosVals.get(i)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "++i@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertU(adoc(\"id\",String.valueOf(i),field,String.valueOf(i)))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "i < values.size()@@@12@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
42->43 [style = solid, label="field"];
7->1 [style = solid, label="i"];
18->23 [style = solid, label="i"];
3->6 [style = solid, label="field"];
34->15 [style = solid, label="ascNegXpathChecks"];
9->10 [style = bold, label=""];
33->26 [style = solid, label="idAscNegXpathChecks"];
7->8 [style = bold, label=""];
10->41 [style = bold, label=""];
8->40 [style = bold, label=""];
2->8 [style = solid, label="i"];
20->25 [style = solid, label="idAscXpathChecks"];
42->40 [style = solid, label="field"];
20->27 [style = bold, label=""];
1->40 [style = dashed, label="0"];
8->1 [style = bold, label=""];
32->25 [style = solid, label="idAscXpathChecks"];
5->11 [style = dotted, label="true"];
23->22 [style = bold, label=""];
18->14 [style = solid, label="i"];
33->18 [style = bold, label=""];
2->40 [style = solid, label="i"];
13->36 [style = bold, label=""];
6->41 [style = dashed, label="0"];
11->6 [style = solid, label="type"];
26->28 [style = bold, label=""];
36->17 [style = bold, label=""];
34->17 [style = solid, label="i"];
38->14 [style = solid, label="field"];
14->20 [style = bold, label=""];
39->29 [style = bold, label=""];
44->2 [style = bold, label=""];
22->25 [style = bold, label=""];
37->36 [style = bold, label=""];
35->31 [style = solid, label="numVals"];
19->38 [style = dotted, label="true"];
27->26 [style = solid, label="idAscNegXpathChecks"];
23->21 [style = dotted, label="true"];
38->26 [style = solid, label="field"];
45->41 [style = solid, label="type"];
8->7 [style = dotted, label="true"];
8->40 [style = dotted, label="true"];
5->3 [style = dotted, label="true"];
4->0 [style = bold, label=""];
42->41 [style = solid, label="field"];
23->14 [style = bold, label=""];
6->4 [style = bold, label=""];
23->14 [style = dotted, label="true"];
27->23 [style = solid, label="i"];
17->34 [style = bold, label=""];
31->33 [style = solid, label="assertNumFound"];
44->42 [style = dotted, label="true"];
11->0 [style = solid, label="type"];
2->1 [style = solid, label="i"];
35->24 [style = solid, label="numVals"];
31->32 [style = solid, label="assertNumFound"];
25->26 [style = bold, label=""];
23->27 [style = dotted, label="true"];
41->46 [style = bold, label=""];
3->4 [style = solid, label="field"];
31->29 [style = solid, label="assertNumFound"];
44->45 [style = dotted, label="true"];
21->23 [style = bold, label=""];
13->36 [style = solid, label="i"];
38->27 [style = solid, label="field"];
46->43 [style = bold, label=""];
11->45 [style = dashed, label="0"];
18->23 [style = bold, label=""];
28->39 [style = bold, label=""];
42->46 [style = solid, label="field"];
12->32 [style = bold, label=""];
18->20 [style = solid, label="i"];
4->46 [style = dashed, label="0"];
0->43 [style = dashed, label="0"];
1->7 [style = bold, label=""];
10->6 [style = bold, label=""];
36->37 [style = dotted, label="true"];
32->33 [style = bold, label=""];
35->24 [style = bold, label=""];
23->20 [style = dotted, label="true"];
30->35 [style = bold, label=""];
24->31 [style = bold, label=""];
38->20 [style = solid, label="field"];
7->8 [style = solid, label="i"];
27->21 [style = bold, label=""];
2->7 [style = solid, label="i"];
38->15 [style = solid, label="field"];
3->1 [style = solid, label="field"];
13->17 [style = solid, label="i"];
31->16 [style = bold, label=""];
45->43 [style = solid, label="type"];
34->36 [style = solid, label="i"];
36->15 [style = bold, label=""];
27->20 [style = solid, label="i"];
27->14 [style = solid, label="i"];
7->40 [style = solid, label="i"];
20->27 [style = solid, label="i"];
8->1 [style = dotted, label="true"];
11->38 [style = dashed, label="0"];
5->2 [style = bold, label=""];
40->7 [style = bold, label=""];
38->34 [style = solid, label="field"];
34->37 [style = bold, label=""];
36->17 [style = dotted, label="true"];
29->15 [style = solid, label="ascNegXpathChecks"];
8->9 [style = bold, label=""];
3->0 [style = solid, label="field"];
38->25 [style = solid, label="field"];
36->34 [style = dotted, label="true"];
16->12 [style = bold, label=""];
13->34 [style = solid, label="i"];
2->8 [style = bold, label=""];
19->30 [style = bold, label=""];
29->13 [style = bold, label=""];
}
