digraph {
26 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Integer someValue = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String someKey = \"someKey\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "someProperties.setProperty(someKey,String.valueOf(someValue))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "String someStringKey = \"someStringKey\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "defineComponent(,)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "testGetByteProperty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "verify(someProperties,times(2)).getProperty(someKey)@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "someProperties.setProperty(someStringKey,someStringValue)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String someKey = \"someKey\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "verify(someProperties,times(1)).getProperty(someKey)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Integer someDefaultValue = -1@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(someProperties.getProperty(someKey)).thenReturn(String.valueOf(someValue))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "someProperties = new Properties()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Integer anotherValue = 3@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(someProperties.getProperty(anotherKey)).thenReturn(String.valueOf(anotherValue))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "String someStringValue = \"someStringValue\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Byte someDefaultValue = -1@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "MockInjector.setInstance(,new MockConfigUtilWithSmallCache())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "verify(someProperties,times(1)).getProperty(anotherKey)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Byte someValue = 10@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(someValue,defaultConfig.getByteProperty(someKey,someDefaultValue))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "someProperties = mock()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(someDefaultValue,defaultConfig.getByteProperty(someStringKey,someDefaultValue))@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22->26 [style = bold, label=""];
5->10 [style = bold, label=""];
8->14 [style = solid, label="someKey"];
16->18 [style = bold, label=""];
31->25 [style = bold, label=""];
12->5 [style = bold, label=""];
4->10 [style = solid, label="anotherValue"];
15->14 [style = bold, label=""];
28->26 [style = solid, label="someProperties"];
4->6 [style = bold, label=""];
17->18 [style = solid, label="anotherKey"];
6->21 [style = bold, label=""];
17->16 [style = solid, label="anotherKey"];
27->28 [style = bold, label=""];
29->31 [style = bold, label=""];
18->11 [style = bold, label=""];
30->23 [style = bold, label=""];
8->7 [style = solid, label="someKey"];
9->17 [style = bold, label=""];
32->27 [style = bold, label=""];
31->24 [style = solid, label="someStringKey"];
8->19 [style = solid, label="someKey"];
17->11 [style = solid, label="anotherKey"];
6->18 [style = solid, label="someDefaultValue"];
17->23 [style = solid, label="someKey"];
17->32 [style = bold, label=""];
3->16 [style = bold, label=""];
24->22 [style = bold, label=""];
25->17 [style = bold, label=""];
27->19 [style = solid, label="someDefaultValue"];
7->3 [style = bold, label=""];
11->15 [style = bold, label=""];
13->1 [style = bold, label=""];
2->12 [style = bold, label=""];
8->3 [style = solid, label="someKey"];
26->30 [style = bold, label=""];
21->12 [style = bold, label=""];
6->2 [style = bold, label=""];
8->15 [style = solid, label="someKey"];
4->18 [style = solid, label="anotherValue"];
9->32 [style = dashed, label="0"];
4->16 [style = solid, label="anotherValue"];
32->23 [style = solid, label="someValue"];
32->22 [style = solid, label="someValue"];
20->8 [style = bold, label=""];
27->23 [style = solid, label="someDefaultValue"];
19->23 [style = dashed, label="0"];
10->13 [style = bold, label=""];
2->21 [style = dashed, label="0"];
7->19 [style = dashed, label="0"];
23->19 [style = bold, label=""];
9->7 [style = solid, label="someValue"];
0->8 [style = bold, label=""];
8->9 [style = bold, label=""];
6->15 [style = solid, label="someDefaultValue"];
28->24 [style = bold, label=""];
31->19 [style = solid, label="someStringKey"];
17->22 [style = solid, label="someKey"];
1->19 [style = bold, label=""];
9->19 [style = solid, label="someValue"];
6->16 [style = solid, label="someDefaultValue"];
6->7 [style = solid, label="someDefaultValue"];
19->7 [style = bold, label=""];
9->15 [style = solid, label="someValue"];
17->4 [style = bold, label=""];
25->24 [style = solid, label="someStringValue"];
6->19 [style = solid, label="someDefaultValue"];
9->5 [style = solid, label="someValue"];
12->13 [style = solid, label="someProperties"];
}
