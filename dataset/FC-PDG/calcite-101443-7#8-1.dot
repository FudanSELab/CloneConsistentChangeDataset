digraph {
35 [style = filled, label = "assertTrue(input2 instanceof LeafRel)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final RelNode input = result.getInput(0)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertTrue(input.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final NoneSingleRel singleRel = new NoneSingleRel(cluster,leafRel)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertTrue(input instanceof PhysicalSort)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testTraitConversion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "assertTrue(result.getTraitSet().contains(ROOT_COLLATION))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final RelNode convertedRel = planner.changeTraits(singleRel,cluster.traitSetOf(PHYS_CALLING_CONVENTION))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "planner.addRule(RandomSingleTraitRule.INSTANCE)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "planner.setTopDownOpt(false)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testTraitConversion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "planner.addRule(SingleLeafTraitRule.INSTANCE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "planner.addRule(new SingleNodeRule())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "planner.addRelTraitDef(COLLATION_TRAIT_DEF)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(input.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(input.getTraitSet().contains(SIMPLE_DISTRIBUTION_RANDOM))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final RelNode input = result.getInput(0)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertTrue(result.getTraitSet().contains(ROOT_COLLATION))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "planner.addRule(new SingleLeafTraitRule())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "testCollationConversion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final NoneLeafRel leafRel = new NoneLeafRel(cluster,\"a\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "RelNode result = planner.chooseDelegate().findBestExp()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final VolcanoPlanner planner = new VolcanoPlanner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertTrue(result instanceof RootSingleRel)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "planner.addRule(new RandomSingleTraitRule())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertTrue(input.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(result instanceof RandomSingleRel)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(result.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "planner.addRelTraitDef(NEW_TRAIT_DEF_INSTANCE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(input2 instanceof SingletonLeafRel)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final RelNode convertedRel = planner.changeTraits(singleRel,cluster.traitSetOf(PHYS_CALLING_CONVENTION).plus(ROOT_COLLATION))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertTrue(input2.getTraitSet().contains(LEAF_COLLATION))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final RelOptCluster cluster = newCluster(planner)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final RelNode result = planner.chooseDelegate().findBestExp()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "planner.addRelTraitDef(ConventionTraitDef.INSTANCE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "planner.setRoot(convertedRel)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(result.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "planner.addRule(new LeafTraitRule())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "planner.addRule(ExpandConversionRule.INSTANCE)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(input2.getTraitSet().contains(SIMPLE_DISTRIBUTION_SINGLETON))@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RelNode input2 = input.getInput(0)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->3 [style = solid, label="leafRel"];
16->0 [style = bold, label=""];
12->5 [style = bold, label=""];
0->13 [style = bold, label=""];
23->34 [style = dashed, label="0"];
28->34 [style = bold, label=""];
14->25 [style = dashed, label="0"];
8->19 [style = bold, label=""];
2->3 [style = bold, label=""];
38->29 [style = bold, label=""];
22->9 [style = bold, label=""];
13->6 [style = solid, label="input2"];
10->2 [style = solid, label="cluster"];
7->35 [style = bold, label=""];
11->37 [style = bold, label=""];
31->4 [style = bold, label=""];
19->10 [style = bold, label=""];
9->20 [style = bold, label=""];
26->8 [style = bold, label=""];
20->38 [style = solid, label="input"];
5->40 [style = dashed, label="0"];
20->38 [style = bold, label=""];
1->32 [style = dashed, label="0"];
3->17 [style = solid, label="singleRel"];
24->22 [style = bold, label=""];
14->33 [style = dashed, label="0"];
15->36 [style = dashed, label="0"];
4->10 [style = solid, label="planner"];
11->18 [style = bold, label=""];
9->20 [style = solid, label="input"];
6->35 [style = dashed, label="0"];
39->22 [style = bold, label=""];
30->12 [style = solid, label="convertedRel"];
35->28 [style = bold, label=""];
5->1 [style = bold, label=""];
27->4 [style = bold, label=""];
12->40 [style = bold, label=""];
17->12 [style = bold, label=""];
30->12 [style = bold, label=""];
17->12 [style = solid, label="convertedRel"];
20->16 [style = bold, label=""];
20->38 [style = dashed, label="0"];
22->20 [style = bold, label=""];
7->28 [style = dashed, label="0"];
1->24 [style = bold, label=""];
13->7 [style = bold, label=""];
7->23 [style = bold, label=""];
33->36 [style = bold, label=""];
25->26 [style = bold, label=""];
40->32 [style = solid, label="result"];
18->37 [style = dashed, label="0"];
18->25 [style = bold, label=""];
40->32 [style = bold, label=""];
36->8 [style = bold, label=""];
5->1 [style = solid, label="result"];
15->26 [style = dashed, label="0"];
3->17 [style = bold, label=""];
10->3 [style = solid, label="cluster"];
14->15 [style = bold, label=""];
10->2 [style = bold, label=""];
32->39 [style = bold, label=""];
13->6 [style = bold, label=""];
6->7 [style = bold, label=""];
4->11 [style = bold, label=""];
37->33 [style = bold, label=""];
3->30 [style = bold, label=""];
3->30 [style = solid, label="singleRel"];
17->30 [style = dashed, label="0"];
18->14 [style = bold, label=""];
15->8 [style = bold, label=""];
7->35 [style = solid, label="input2"];
21->4 [style = bold, label=""];
29->13 [style = bold, label=""];
}
