digraph {
29 [style = filled, label = "final DruidJoinQueryRel druidJoin = DruidJoinQueryRel.create(join.copy(join.getTraitSet(),conditionAnalysis.getCondition(rexBuilder),newLeft,newRight,join.getJoinType(),join.isSemiJoinDone()),left.getQueryMaker())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "i++@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final DruidRel<?> left = call.rel(1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "newRight = right@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "matches['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "i++@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "newProjectExprs.add(rexBuilder.makeInputRef(join.getRowType().getFieldList().get(i).getType(),i))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "conditionAnalysis = conditionAnalysis.pushThroughLeftProject(leftProject)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "call.transformTo(relBuilder.build())@@@43@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "return canHandleCondition(join.getCondition(),join.getLeft().getRowType()) && !(right instanceof DruidJoinQueryRel)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "final DruidRel<?> right = call.rel(2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final Project rightProject = right.getPartialDruidQuery().getSelectProject()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final RelBuilder relBuilder = call.builder().push(druidJoin).project(RexUtil.fixUp(rexBuilder,newProjectExprs,RelOptUtil.getFieldTypeList(druidJoin.getRowType())))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final Join join = call.rel(0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "left.getPartialDruidQuery().stage() == PartialDruidQuery.Stage.SELECT_PROJECT && left.getPartialDruidQuery().getWhereFilter() == null@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "i < left.getRowType().getFieldCount()@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final DruidRel<?> newRight@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "conditionAnalysis = conditionAnalysis.pushThroughRightProject(rightProject)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final DruidRel<?> newLeft@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final RexBuilder rexBuilder = join.getCluster().getRexBuilder()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "newProjectExprs.addAll(leftProject.getProjects())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "onMatch['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "ConditionAnalysis conditionAnalysis = analyzeCondition(join.getCondition(),join.getLeft().getRowType()).get()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return canHandleCondition(join.getCondition(),join.getLeft().getRowType()) && left.getPartialDruidQuery() != null && right.getPartialDruidQuery() != null@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "matches['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "final Project leftProject = left.getPartialDruidQuery().getSelectProject()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final DruidRel<?> left = call.rel(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "newProjectExprs.add(rexBuilder.makeInputRef(join.getRowType().getFieldList().get(left.getRowType().getFieldCount() + i).getType(),newLeft.getRowType().getFieldCount() + i))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "RelOptRuleCall call@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int i = 0@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "final RelNode rightScan = right.getPartialDruidQuery().getScan()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final List<RexNode> newProjectExprs = new ArrayList<>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "int i = 0@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Iterables.addAll(newProjectExprs,RexUtil.shift(rightProject.getProjects(),newLeft.getRowType().getFieldCount()))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "RelOptRuleCall call@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "newRight = right.withPartialQuery(PartialDruidQuery.create(rightScan))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "right.getPartialDruidQuery().stage() == PartialDruidQuery.Stage.SELECT_PROJECT && right.getPartialDruidQuery().getWhereFilter() == null && !right.getPartialDruidQuery().getSelectProject().isMapping() && conditionAnalysis.onlyUsesMappingsFromRightProject(right.getPartialDruidQuery().getSelectProject())@@@26@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "i < right.getRowType().getFieldCount()@@@35@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "newLeft = left.withPartialQuery(PartialDruidQuery.create(leftScan))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final RelNode leftScan = left.getPartialDruidQuery().getScan()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "newLeft = left@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20->35 [style = solid, label="i"];
32->26 [style = solid, label="leftProject"];
25->34 [style = bold, label=""];
19->21 [style = solid, label="newProjectExprs"];
18->15 [style = dotted, label="true"];
31->21 [style = bold, label=""];
10->30 [style = dotted, label="true"];
10->32 [style = dotted, label="true"];
25->20 [style = dotted, label="false"];
33->0 [style = bold, label=""];
17->36 [style = bold, label=""];
19->22 [style = solid, label="newProjectExprs"];
35->38 [style = bold, label=""];
31->40 [style = solid, label="rightProject"];
25->21 [style = dotted, label="true"];
21->13 [style = bold, label=""];
10->11 [style = bold, label=""];
27->29 [style = solid, label="rexBuilder"];
24->19 [style = bold, label=""];
18->15 [style = bold, label=""];
35->38 [style = dotted, label="true"];
34->31 [style = bold, label=""];
13->40 [style = bold, label=""];
3->33 [style = bold, label=""];
13->29 [style = solid, label="newRight"];
11->18 [style = bold, label=""];
3->0 [style = bold, label=""];
19->37 [style = bold, label=""];
23->35 [style = bold, label=""];
35->28 [style = bold, label=""];
20->23 [style = solid, label="i"];
2->16 [style = dashed, label="0"];
18->9 [style = bold, label=""];
4->5 [style = dashed, label="0"];
10->26 [style = dotted, label="true"];
14->18 [style = bold, label=""];
10->9 [style = dotted, label="false"];
27->8 [style = bold, label=""];
32->17 [style = bold, label=""];
40->29 [style = bold, label=""];
8->24 [style = bold, label=""];
28->29 [style = bold, label=""];
7->2 [style = dotted, label="true"];
33->9 [style = solid, label="left"];
15->14 [style = bold, label=""];
37->10 [style = bold, label=""];
25->31 [style = dotted, label="true"];
1->3 [style = bold, label=""];
3->6 [style = bold, label=""];
30->32 [style = bold, label=""];
25->13 [style = dotted, label="true"];
25->28 [style = dotted, label="false"];
10->17 [style = dotted, label="true"];
25->20 [style = bold, label=""];
23->35 [style = solid, label="i"];
11->14 [style = solid, label="i"];
22->39 [style = bold, label=""];
34->13 [style = solid, label="rightScan"];
12->3 [style = bold, label=""];
35->23 [style = dotted, label="true"];
0->28 [style = solid, label="right"];
10->30 [style = bold, label=""];
10->18 [style = dotted, label="false"];
0->5 [style = bold, label=""];
30->36 [style = solid, label="leftScan"];
20->38 [style = solid, label="i"];
27->22 [style = solid, label="rexBuilder"];
23->38 [style = solid, label="i"];
25->35 [style = dotted, label="false"];
0->27 [style = bold, label=""];
25->34 [style = dotted, label="true"];
26->25 [style = bold, label=""];
38->23 [style = bold, label=""];
14->18 [style = solid, label="i"];
6->0 [style = bold, label=""];
36->26 [style = bold, label=""];
28->29 [style = solid, label="newRight"];
11->15 [style = solid, label="i"];
18->14 [style = dotted, label="true"];
9->29 [style = solid, label="newLeft"];
7->3 [style = bold, label=""];
10->36 [style = dotted, label="true"];
10->11 [style = dotted, label="false"];
25->40 [style = dotted, label="true"];
12->16 [style = dotted, label="true"];
0->4 [style = bold, label=""];
9->25 [style = bold, label=""];
20->35 [style = bold, label=""];
29->22 [style = bold, label=""];
14->15 [style = solid, label="i"];
1->2 [style = dotted, label="true"];
36->29 [style = solid, label="newLeft"];
11->18 [style = solid, label="i"];
}
