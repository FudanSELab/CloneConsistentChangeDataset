digraph {
19 [style = filled, label = "Whitebox.setInternalState(register,\"cachesByKey\",cacheByKey)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "PowerMockito.when(KVCache.newCache(any(),eq(\"key1\"))).thenReturn(cache1)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "verify(cache2).addListener(listener2.capture())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "PowerMockito.when(KVCache.newCache(any(),eq(\"key1\"))).thenReturn(cache1)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ArgumentCaptor<ConsulCache.Listener> listener2 = ArgumentCaptor.forClass()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "verify(existedCache).stop()@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(2,configItemKeyedByName.size())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "listener2.getValue().notify(ImmutableMap.of(\"key2\",ImmutableValue.builder().createIndex(0).modifyIndex(0).lockIndex(0).key(\"key2\").flags(0).value(BaseEncoding.base64().encode(\"val2\".getBytes())).build()))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ArgumentCaptor<ConsulCache.Listener> listener1 = ArgumentCaptor.forClass()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(cache1).addListener(listener1.capture())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "KVCache cache2 = mock()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "register.readConfig(Sets.newHashSet(\"key1\",\"key2\"))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "configItemKeyedByName = new ConcurrentHashMap<>()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Whitebox.setInternalState(register,\"configItemKeyedByName\",configItemKeyedByName)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"val1\",configItemKeyedByName.get(\"key1\").get())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "shouldUpdateCachesWhenNotified['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "KVCache cache1 = mock()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"val2\",configItemKeyedByName.get(\"key2\").get())@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "PowerMockito.mockStatic()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "cacheByKey.put(\"existedKey\",existedCache)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "cacheByKey = new ConcurrentHashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "PowerMockito.when(KVCache.newCache(any(),eq(\"key2\"))).thenReturn(cache2)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "KVCache existedCache = mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "shouldUpdateCachesWhenNotified['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(register.readConfig(any())).thenCallRealMethod()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "shouldUnsubscribeWhenKeyRemoved['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "listener1.getValue().notify(ImmutableMap.of(\"key1\",ImmutableValue.builder().createIndex(0).modifyIndex(0).lockIndex(0).key(\"key1\").flags(0).value(BaseEncoding.base64().encode(\"val1\".getBytes())).build()))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "PowerMockito.when(KVCache.newCache(any(),eq(\"key2\"))).thenReturn(cache2)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
16->13 [style = bold, label=""];
23->20 [style = bold, label=""];
9->19 [style = solid, label="cacheByKey"];
7->0 [style = solid, label="configItemKeyedByName"];
18->11 [style = bold, label=""];
22->9 [style = bold, label=""];
3->11 [style = solid, label="cache1"];
3->21 [style = solid, label="cache1"];
5->15 [style = bold, label=""];
26->9 [style = bold, label=""];
3->16 [style = bold, label=""];
9->7 [style = bold, label=""];
16->17 [style = solid, label="cache2"];
25->7 [style = bold, label=""];
19->0 [style = bold, label=""];
20->4 [style = bold, label=""];
6->2 [style = bold, label=""];
9->27 [style = bold, label=""];
8->1 [style = bold, label=""];
27->25 [style = solid, label="existedCache"];
13->12 [style = bold, label=""];
16->23 [style = solid, label="cache2"];
1->24 [style = bold, label=""];
12->18 [style = bold, label=""];
11->17 [style = bold, label=""];
4->8 [style = bold, label=""];
1->14 [style = bold, label=""];
10->9 [style = bold, label=""];
17->23 [style = dashed, label="0"];
18->21 [style = bold, label=""];
7->19 [style = bold, label=""];
27->25 [style = bold, label=""];
14->6 [style = bold, label=""];
2->5 [style = bold, label=""];
17->20 [style = bold, label=""];
21->23 [style = bold, label=""];
11->21 [style = dashed, label="0"];
}
