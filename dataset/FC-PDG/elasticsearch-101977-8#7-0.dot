digraph {
7 [style = filled, label = "isSplitable(numShards,targetShards) == false@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "isShrinkable(numShards,targetShards) == false@@@27@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testValidateShrinkIndex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "int numShards = randomIntBetween(1,42)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testValidateSplitIndex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "ClusterState clusterState = ClusterState.builder(createClusterState(\"source\",numShards,0,Settings.builder().put(\"index.blocks.write\",true).put(\"index.number_of_routing_shards\",targetShards).build())).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"the number of source shards (10( must be less that the number of target shards (5(\",expectThrows(,null).getMessage())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Settings targetSettings = Settings.builder().put(\"index.number_of_shards\",numShards * 2).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"index (source( already exists\",expectThrows(,null).getMessage())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "MetaDataCreateIndexService.validateSplitIndex(clusterState,\"source\",Collections.emptySet(),\"target\",Settings.builder().put(\"index.number_of_shards\",targetShards).build())@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ClusterState clusterState = ClusterState.builder(createClusterState(\"source\",numShards,0,Settings.builder().put(\"index.blocks.write\",true).build())).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "routingTable = service.applyStartedShards(clusterState,routingTable.index(\"source\").shardsWithState(ShardRoutingState.INITIALIZING)).routingTable()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"mappings are not allowed when resizing indices, all mappings are copied from the source index\",expectThrows(,null).getMessage())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(\"mappings are not allowed when resizing indices, all mappings are copied from the source index\",expectThrows(,null).getMessage())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\"the number of source shards (3( must be a factor of (4(\",expectThrows(,null).getMessage())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "RoutingTable routingTable = service.reroute(clusterState,\"reroute\").routingTable()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(\"the number of source shards (8( must be a must be a multiple of (3(\",expectThrows(,null).getMessage())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(\"index (source( already exists\",expectThrows(,null).getMessage())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "targetShards = randomIntBetween(1,numShards / 2)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"the number of target shards (10( must be less that the number of source shards (5(\",expectThrows(,null).getMessage())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(\"no such index (no_such_index(\",expectThrows(,null).getMessage())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "AllocationService service = new AllocationService(new AllocationDeciders(Collections.singleton(new MaxRetryAllocationDecider())),new TestGatewayAllocator(),new BalancedShardsAllocator(Settings.EMPTY),EmptyClusterInfoService.INSTANCE)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"the number of source shards (3( must be a must be a factor of (4(\",expectThrows(,null).getMessage())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "Settings targetSettings = Settings.builder().put(\"index.number_of_shards\",1).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "RoutingTable routingTable = service.reroute(clusterState,\"reroute\").routingTable()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "routingTable = service.applyStartedShards(clusterState,routingTable.index(\"source\").shardsWithState(ShardRoutingState.INITIALIZING)).routingTable()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "ClusterState state = createClusterState(\"source\",numShards,randomIntBetween(0,10),Settings.builder().put(\"index.blocks.write\",true).build())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "MetaDataCreateIndexService.validateShrinkIndex(clusterState,\"source\",Collections.emptySet(),\"target\",Settings.builder().put(\"index.number_of_shards\",targetShards).build())@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(\"index source must have all shards allocated on the same node to shrink index\",expectThrows(,null).getMessage())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(\"can't shrink an index with only one shard\",expectThrows(,null).getMessage())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "int numShards = randomIntBetween(2,42)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(\"index source must be read-only to resize index. use \"index.blocks.write=true\"\",expectThrows(,null).getMessage())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"index source must be read-only to resize index. use \"index.blocks.write=true\"\",expectThrows(,null).getMessage())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testValidateSplitIndex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int targetShards@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "AllocationService service = new AllocationService(new AllocationDeciders(Collections.singleton(new MaxRetryAllocationDecider())),new TestGatewayAllocator(),new BalancedShardsAllocator(Settings.EMPTY),EmptyClusterInfoService.INSTANCE)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(\"no such index (no_such_index(\",expectThrows(,null).getMessage())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "int targetShards@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->3 [style = bold, label=""];
30->24 [style = bold, label=""];
16->0 [style = bold, label=""];
9->39 [style = bold, label=""];
3->7 [style = solid, label="numShards"];
37->26 [style = bold, label=""];
0->19 [style = bold, label=""];
3->33 [style = dashed, label="0"];
8->18 [style = bold, label=""];
25->36 [style = bold, label=""];
18->30 [style = solid, label="targetShards"];
18->11 [style = bold, label=""];
6->9 [style = dashed, label="0"];
9->7 [style = solid, label="targetShards"];
18->30 [style = bold, label=""];
28->9 [style = bold, label=""];
4->27 [style = dashed, label="0"];
35->24 [style = solid, label="clusterState"];
29->34 [style = solid, label="routingTable"];
0->21 [style = bold, label=""];
20->3 [style = bold, label=""];
40->34 [style = bold, label=""];
7->9 [style = dotted, label="true"];
12->8 [style = solid, label="routingTable"];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
30->18 [style = bold, label=""];
22->23 [style = bold, label=""];
15->5 [style = bold, label=""];
7->9 [style = bold, label=""];
12->13 [style = bold, label=""];
33->18 [style = solid, label="numShards"];
19->1 [style = bold, label=""];
38->18 [style = bold, label=""];
1->6 [style = bold, label=""];
23->37 [style = bold, label=""];
19->21 [style = dashed, label="0"];
33->32 [style = solid, label="numShards"];
3->15 [style = solid, label="numShards"];
33->30 [style = solid, label="numShards"];
10->12 [style = bold, label=""];
7->2 [style = bold, label=""];
30->18 [style = dotted, label="true"];
31->33 [style = bold, label=""];
18->11 [style = solid, label="clusterState"];
5->4 [style = bold, label=""];
21->1 [style = bold, label=""];
19->22 [style = dashed, label="0"];
17->15 [style = bold, label=""];
32->15 [style = bold, label=""];
3->17 [style = bold, label=""];
33->32 [style = bold, label=""];
29->40 [style = bold, label=""];
35->38 [style = bold, label=""];
26->28 [style = bold, label=""];
34->35 [style = bold, label=""];
3->9 [style = solid, label="numShards"];
6->9 [style = bold, label=""];
13->8 [style = bold, label=""];
5->15 [style = dashed, label="0"];
15->27 [style = bold, label=""];
27->25 [style = bold, label=""];
4->16 [style = bold, label=""];
39->29 [style = bold, label=""];
36->22 [style = bold, label=""];
}
