digraph {
11 [style = filled, label = "testHarness.waitForTaskCompletion()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\",initialTime),1,1)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\",initialTime))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Hello-0-0\",initialTime),0,0)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpoint()),0,0)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testCheckpointBarriers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpoint()),1,0)@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpoint()))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testHarness.setupOutputForSingletonOperatorChain()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testHarness.waitForInputProcessing()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "expectedOutput.add(new CancelCheckpointMarker(0))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "StreamMap<String,String> mapOperator = new StreamMap<String,String>(new IdentityMap())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,0)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpoint()))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\",initialTime),0,0)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpoint()),1,1)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "streamConfig.setStreamOperator(mapOperator)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.invoke()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "streamConfig.setOperatorID(new OperatorID())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Hello-1-1\",initialTime),1,1)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpoint()),0,1)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testHarness.endInput()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,1)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testHarness.waitForTaskRunning()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpoint()),0,1)@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,1)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,0)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpoint()),1,1)@@@34@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness.waitForInputProcessing()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "StreamConfig streamConfig = testHarness.getStreamConfig()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testCheckpointBarriers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final OneInputStreamTaskTestHarness<String,String> testHarness = new OneInputStreamTaskTestHarness<>(null,2,2,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testOvertakingCheckpointBarriers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Hello-0-0\",initialTime))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Hello-1-1\",initialTime))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testHarness.waitForInputProcessing()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpoint()),1,0)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\",initialTime))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\",initialTime))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@38@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Hello-0-0\",initialTime))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpoint()),0,0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "long initialTime = 0L@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->35 [style = bold, label=""];
4->9 [style = bold, label=""];
44->42 [style = bold, label=""];
24->12 [style = bold, label=""];
18->24 [style = bold, label=""];
25->1 [style = bold, label=""];
42->37 [style = bold, label=""];
28->15 [style = bold, label=""];
26->23 [style = solid, label="mapOperator"];
39->44 [style = bold, label=""];
21->0 [style = bold, label=""];
7->30 [style = bold, label=""];
14->34 [style = dashed, label="0"];
15->25 [style = bold, label=""];
1->31 [style = dashed, label="0"];
27->45 [style = solid, label="expectedOutput"];
22->24 [style = solid, label="initialTime"];
5->26 [style = bold, label=""];
14->10 [style = bold, label=""];
2->18 [style = bold, label=""];
38->36 [style = bold, label=""];
9->20 [style = bold, label=""];
25->43 [style = bold, label=""];
32->7 [style = bold, label=""];
27->25 [style = solid, label="expectedOutput"];
22->12 [style = solid, label="initialTime"];
7->20 [style = bold, label=""];
22->28 [style = solid, label="initialTime"];
22->4 [style = solid, label="initialTime"];
22->37 [style = solid, label="initialTime"];
27->22 [style = bold, label=""];
10->7 [style = bold, label=""];
36->39 [style = bold, label=""];
18->35 [style = dashed, label="0"];
31->34 [style = bold, label=""];
35->24 [style = bold, label=""];
25->31 [style = bold, label=""];
6->2 [style = bold, label=""];
45->1 [style = bold, label=""];
22->9 [style = solid, label="initialTime"];
46->21 [style = bold, label=""];
37->40 [style = bold, label=""];
43->38 [style = bold, label=""];
19->30 [style = dashed, label="0"];
22->8 [style = solid, label="initialTime"];
10->32 [style = dashed, label="0"];
11->3 [style = bold, label=""];
27->3 [style = solid, label="expectedOutput"];
12->8 [style = bold, label=""];
16->21 [style = bold, label=""];
30->4 [style = bold, label=""];
26->23 [style = bold, label=""];
40->41 [style = bold, label=""];
23->17 [style = bold, label=""];
34->32 [style = bold, label=""];
1->14 [style = bold, label=""];
41->45 [style = bold, label=""];
19->4 [style = bold, label=""];
22->42 [style = solid, label="initialTime"];
17->27 [style = bold, label=""];
13->28 [style = bold, label=""];
33->21 [style = bold, label=""];
22->29 [style = solid, label="initialTime"];
7->19 [style = bold, label=""];
8->29 [style = bold, label=""];
0->5 [style = bold, label=""];
22->13 [style = solid, label="initialTime"];
22->6 [style = bold, label=""];
20->11 [style = bold, label=""];
29->13 [style = bold, label=""];
}
