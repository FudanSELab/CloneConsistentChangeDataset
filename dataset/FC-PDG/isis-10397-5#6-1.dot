digraph {
6 [style = filled, label = "final BigInteger value = BigInteger.valueOf(123)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "representation = new JsonRepresentation(DecimalNode.valueOf(value))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "whenReprIsBigInteger['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "whenReprIsBigDecimal['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "context.checking(new Expectations(){})@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "whenReprIsBigInteger['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "allowingObjectSpecCorrespondingClassAndSpecIdIs()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertSame(mockObjectSpec,adapter.getSpecification())@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "representation = new JsonRepresentation(BigIntegerNode.valueOf(value))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "val adapter = jsonValueEncoder.asAdapter(mockObjectSpec,representation,null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "allowingObjectSpecCorrespondingClassAndSpecIdIs()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "final BigDecimal value = new BigDecimal(\"123234234.45612312343535\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "allowingObjectSpecCorrespondingClassAndObjectTypeIs()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "allowingObjectSpecHas(,mockEncodableFacet)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
4->5 [style = solid, label="representation"];
13->5 [style = solid, label="representation"];
0->6 [style = bold, label=""];
2->3 [style = bold, label=""];
3->11 [style = bold, label=""];
10->3 [style = bold, label=""];
8->6 [style = bold, label=""];
11->12 [style = bold, label=""];
0->11 [style = dashed, label="0"];
13->1 [style = bold, label=""];
3->0 [style = bold, label=""];
6->4 [style = solid, label="value"];
6->12 [style = dashed, label="0"];
12->13 [style = bold, label=""];
6->4 [style = bold, label=""];
3->8 [style = bold, label=""];
9->3 [style = bold, label=""];
5->7 [style = bold, label=""];
0->8 [style = dashed, label="0"];
4->1 [style = bold, label=""];
12->13 [style = solid, label="value"];
4->13 [style = dashed, label="0"];
}
