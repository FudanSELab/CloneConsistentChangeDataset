digraph {
5 [style = filled, label = "List<AliasAction> swapActions = Arrays.asList(new AliasAction.Add(\"test\",\"alias\",null,null,null,unsetValue,null),new AliasAction.Add(\"test2\",\"alias\",null,null,null,true,null))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertAliasesVersionIncreased(\"test\",before,after)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(after.metadata().index(\"test2\").getAliases().get(\"alias\").writeIndex())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(after.metaData().getIndicesLookup().get(\"alias\").getWriteIndex(),equalTo(after.metaData().index(\"test2\")))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "IndexMetaData.Builder indexMetaData = IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(after.metadata().getIndicesLookup().get(\"alias\").getWriteIndex(),equalTo(after.metadata().index(\"test2\")))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "ClusterState before = ClusterState.builder(ClusterName.DEFAULT).metadata(Metadata.builder().put(indexMetadata).put(indexMetadata2)).build()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testSwapWriteOnlyIndex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "testAddWriteOnlyValidatesAgainstMetaDataBuilder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(after.metaData().index(\"test\").getAliases().get(\"alias\").writeIndex(),equalTo(unsetValue))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "ClusterState after = service.applyAliasActions(before,swapActions)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Collections.shuffle(swapActions,random())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "IndexMetadata.Builder indexMetadata = IndexMetadata.builder(\"test\").putAlias(AliasMetadata.builder(\"alias\").writeIndex(true).build()).settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertTrue(after.metaData().index(\"test2\").getAliases().get(\"alias\").writeIndex())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertAliasesVersionIncreased(\"test2\",before,after)@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "IndexMetaData.Builder indexMetaData = IndexMetaData.builder(\"test\").putAlias(AliasMetaData.builder(\"alias\").writeIndex(true).build()).settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "ClusterState before = ClusterState.builder(ClusterName.DEFAULT).metaData(MetaData.builder().put(indexMetaData).put(indexMetaData2)).build()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testSwapWriteOnlyIndex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(after.metadata().index(\"test\").getAliases().get(\"alias\").writeIndex(),equalTo(unsetValue))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(exception.getMessage(),startsWith(\"alias (alias( has more than one write index (\"))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "IndexMetaData.Builder indexMetaData2 = IndexMetaData.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Boolean unsetValue = randomBoolean()? null: false@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "IndexMetadata.Builder indexMetadata2 = IndexMetadata.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Exception exception = expectThrows(,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->18 [style = dashed, label="0"];
0->16 [style = bold, label=""];
9->5 [style = solid, label="unsetValue"];
9->16 [style = solid, label="unsetValue"];
15->13 [style = bold, label=""];
8->7 [style = solid, label="before"];
7->1 [style = bold, label=""];
13->1 [style = solid, label="before"];
0->6 [style = bold, label=""];
11->15 [style = dashed, label="0"];
3->11 [style = bold, label=""];
14->19 [style = bold, label=""];
16->17 [style = bold, label=""];
8->0 [style = solid, label="before"];
4->7 [style = bold, label=""];
20->22 [style = bold, label=""];
13->0 [style = solid, label="before"];
3->19 [style = dashed, label="0"];
8->13 [style = dashed, label="0"];
3->23 [style = dashed, label="0"];
5->2 [style = bold, label=""];
2->0 [style = bold, label=""];
6->16 [style = dashed, label="0"];
8->20 [style = bold, label=""];
8->1 [style = solid, label="before"];
9->6 [style = solid, label="unsetValue"];
6->10 [style = bold, label=""];
8->9 [style = bold, label=""];
10->17 [style = dashed, label="0"];
10->4 [style = bold, label=""];
9->5 [style = bold, label=""];
0->7 [style = solid, label="after"];
11->8 [style = bold, label=""];
5->0 [style = solid, label="swapActions"];
0->1 [style = solid, label="after"];
12->3 [style = bold, label=""];
13->9 [style = bold, label=""];
19->15 [style = bold, label=""];
18->7 [style = bold, label=""];
23->11 [style = bold, label=""];
13->7 [style = solid, label="before"];
5->2 [style = solid, label="swapActions"];
17->18 [style = bold, label=""];
21->23 [style = bold, label=""];
}
