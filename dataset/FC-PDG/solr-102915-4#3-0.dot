digraph {
20 [style = filled, label = "assertTrue(d.getFieldValue(\"not_in_schema\") instanceof Float)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testParseDoubleNonRootLocale['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertNull(schema.getFieldOrNull(\"not_in_schema\"))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(value,(Double)d.getFieldValue(\"double_d\"),EPSILON)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String doubleString1 = \"10898,83491\"@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String doubleString2 = \"10鐃緒申鐃緒申鐃緒申898,83491\"@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(d.getFieldValue(\"not_in_schema\") instanceof Double)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "IndexSchema schema = h.getCore().getLatestSchema()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "float value = 10898.83491f@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "{final NumberFormat sanityCheck = NumberFormat.getInstance(new Locale(\"fr\",\"FR\"))sanityCheck.setParseIntegerOnly(false)sanityCheck.setRoundingMode(RoundingMode.CEILING)assumeThat(\"Your JVM appears to have NumberFormat parse bugs using U+00A0 in the fr_FR Locale\",sanityCheck.parse(\"10鐃緒申鐃緒申鐃緒申898\"),new IsNot(new IsEqual(10L)))}@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "double value = 10898.83491@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(d.getFieldValue(\"not_in_schema\"),IS_DOUBLE)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "SolrInputDocument d = processAdd(\"parse-double-french-no-run-processor\",doc(f(\"id\",\"140\"),f(\"double_d\",doubleString1),f(\"not_in_schema\",doubleString2)))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(d.getFieldValue(\"float_f\") instanceof Float)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertNotNull(schema.getFieldOrNull(\"float_f\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "String floatString1 = \"10898,83491\"@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testParseFloatNonRootLocale['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "SolrInputDocument d = processAdd(\"parse-float-french-no-run-processor\",doc(f(\"id\",\"140\"),f(\"float_f\",floatString1),f(\"not_in_schema\",floatString2)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(value,(Float)d.getFieldValue(\"not_in_schema\"),EPSILON)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertNotNull(schema.getFieldOrNull(\"double_d\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testParseDoubleNonRootLocale['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertEquals(value,(Float)d.getFieldValue(\"float_f\"),EPSILON)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "String floatString2 = \"10鐃緒申鐃緒申鐃緒申898,83491\"@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(value,(Double)d.getFieldValue(\"not_in_schema\"),EPSILON)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(d.getFieldValue(\"double_d\") instanceof Double)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertNotNull(d)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(d.getFieldValue(\"double_d\"),IS_DOUBLE)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14->3 [style = bold, label=""];
8->19 [style = dashed, label="0"];
26->18 [style = solid, label="value"];
0->9 [style = bold, label=""];
2->26 [style = bold, label=""];
7->21 [style = dashed, label="0"];
12->20 [style = dashed, label="0"];
9->11 [style = bold, label=""];
17->1 [style = bold, label=""];
21->0 [style = bold, label=""];
6->3 [style = solid, label="value"];
11->14 [style = bold, label=""];
7->0 [style = solid, label="d"];
2->6 [style = bold, label=""];
5->24 [style = dashed, label="0"];
8->7 [style = solid, label="doubleString1"];
9->22 [style = dashed, label="0"];
7->0 [style = bold, label=""];
11->12 [style = bold, label=""];
26->19 [style = bold, label=""];
20->25 [style = bold, label=""];
13->16 [style = bold, label=""];
0->15 [style = bold, label=""];
1->23 [style = bold, label=""];
19->24 [style = bold, label=""];
5->7 [style = solid, label="doubleString2"];
18->20 [style = bold, label=""];
22->18 [style = bold, label=""];
12->14 [style = dashed, label="0"];
15->11 [style = bold, label=""];
8->5 [style = bold, label=""];
16->1 [style = bold, label=""];
24->21 [style = bold, label=""];
6->26 [style = dashed, label="0"];
11->18 [style = dashed, label="0"];
0->22 [style = bold, label=""];
26->25 [style = solid, label="value"];
6->8 [style = bold, label=""];
5->7 [style = bold, label=""];
10->2 [style = bold, label=""];
4->1 [style = bold, label=""];
12->3 [style = bold, label=""];
23->2 [style = bold, label=""];
6->11 [style = solid, label="value"];
24->21 [style = solid, label="floatString2"];
19->21 [style = solid, label="floatString1"];
1->10 [style = bold, label=""];
21->0 [style = solid, label="d"];
10->23 [style = dashed, label="0"];
9->15 [style = dashed, label="0"];
3->25 [style = dashed, label="0"];
}
