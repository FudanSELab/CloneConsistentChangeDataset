digraph {
35 [style = filled, label = "assertTrue(implementednetwork.getGateway().equals(\"10.1.1.1\"))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "when(res.getDomain()).thenReturn(dom)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "when(dom.getName()).thenReturn(\"domain\")@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final NiciraNvpDeviceVO device = mock()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "when(res.getAccount()).thenReturn(acc)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testImplementWithCidr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final NetworkVO network = mock()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "when(answer.getLogicalSwitchUuid()).thenReturn(\"aaaaa\")@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final CreateLogicalSwitchAnswer answer = mock()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final NetworkOffering offering = mock()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID,Service.Connectivity)).thenReturn(true)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "verify(agentmgr,times(1)).easySend(eq(NETWORK_ID),(Command)any())@@@50@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(designednetwork != null)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(nvpdao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NiciraNvpDeviceVO((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@77b2cc))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final Domain dom = mock()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(designednetwork.getBroadcastDomainType() == BroadcastDomainType.Lswitch)@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Network network = mock()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "when(acc.getAccountName()).thenReturn(\"accountname\")@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(physnet.getId()).thenReturn(NETWORK_ID)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(offering.getId()).thenReturn(NETWORK_ID)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testDesign['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "when(network.getName()).thenReturn(\"testnetwork\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "when(offering.getTrafficType()).thenReturn(TrafficType.Guest)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "when(offering.getGuestType()).thenReturn(GuestType.Isolated)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "when(agentmgr.easySend(eq(NETWORK_ID),(Command)any())).thenReturn(answer)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "when(network.getGateway()).thenReturn(\"10.1.1.1\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "when(answer.getResult()).thenReturn(true)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "final HostVO niciraHost = mock()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "when(niciraHost.getDetail(\"transportzoneuuid\")).thenReturn(\"aaaa\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "when(hostdao.findById(anyLong())).thenReturn(niciraHost)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final PhysicalNetworkVO physnet = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "when(dest.getDataCenter()).thenReturn(dc)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "when(physnetdao.findById((Long)any())).thenReturn(physnet)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final DeployDestination dest = mock()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "when(niciraHost.getDetail(\"transportzoneisotype\")).thenReturn(\"stt\")@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final Account account = mock()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "when(network.getState()).thenReturn(State.Implementing)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertTrue(implementednetwork != null)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertTrue(implementednetwork.getCidr().equals(\"10.1.1.0/24\"))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@77b2ac))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID,Service.Connectivity)).thenReturn(false)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "when(device.getId()).thenReturn(1L)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final DeploymentPlan plan = mock()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "mock()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final DataCenter dc = mock()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final Network implementednetwork = guru.implement(network,offering,dest,res)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final Network designednetwork = guru.design(offering,plan,network,account)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "when(network.getCidr()).thenReturn(\"10.1.1.0/24\")@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "when(niciraHost.getId()).thenReturn(NETWORK_ID)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final ReservationContext res = mock()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "when(netmodel.findPhysicalNetworkId(anyLong(),(String)any(),(TrafficType)any())).thenReturn(NETWORK_ID)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "final Account acc = mock()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testDesign['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "when(netmodel.listNetworkOfferingServices(NETWORK_ID)).thenReturn(Arrays.asList(Service.Connectivity))@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
29->26 [style = solid, label="dc"];
25->30 [style = solid, label="res"];
28->21 [style = bold, label=""];
10->20 [style = bold, label=""];
2->18 [style = solid, label="offering"];
39->33 [style = bold, label=""];
14->18 [style = solid, label="plan"];
8->9 [style = bold, label=""];
5->13 [style = solid, label="device"];
37->53 [style = bold, label=""];
10->47 [style = dashed, label="0"];
42->54 [style = bold, label=""];
37->53 [style = solid, label="niciraHost"];
16->18 [style = bold, label=""];
46->32 [style = bold, label=""];
40->45 [style = bold, label=""];
32->30 [style = solid, label="dest"];
13->6 [style = bold, label=""];
1->8 [style = bold, label=""];
16->18 [style = solid, label="account"];
41->50 [style = bold, label=""];
43->48 [style = solid, label="acc"];
21->30 [style = solid, label="network"];
30->36 [style = solid, label="implementednetwork"];
11->16 [style = bold, label=""];
50->51 [style = bold, label=""];
23->34 [style = solid, label="answer"];
14->11 [style = bold, label=""];
17->4 [style = solid, label="physnet"];
53->44 [style = bold, label=""];
36->49 [style = bold, label=""];
45->34 [style = bold, label=""];
49->35 [style = bold, label=""];
11->21 [style = dashed, label="0"];
2->30 [style = solid, label="offering"];
5->13 [style = bold, label=""];
6->2 [style = bold, label=""];
17->4 [style = bold, label=""];
42->52 [style = solid, label="dom"];
3->17 [style = bold, label=""];
15->0 [style = bold, label=""];
7->12 [style = bold, label=""];
47->28 [style = bold, label=""];
31->46 [style = bold, label=""];
18->7 [style = solid, label="designednetwork"];
25->52 [style = bold, label=""];
27->17 [style = bold, label=""];
19->17 [style = bold, label=""];
2->1 [style = bold, label=""];
38->42 [style = bold, label=""];
52->48 [style = bold, label=""];
9->47 [style = bold, label=""];
33->38 [style = bold, label=""];
48->23 [style = bold, label=""];
54->43 [style = bold, label=""];
51->31 [style = bold, label=""];
23->40 [style = bold, label=""];
14->28 [style = dashed, label="0"];
24->25 [style = bold, label=""];
11->18 [style = solid, label="network"];
0->5 [style = bold, label=""];
4->15 [style = bold, label=""];
32->29 [style = bold, label=""];
20->14 [style = bold, label=""];
26->37 [style = bold, label=""];
34->30 [style = bold, label=""];
35->22 [style = bold, label=""];
44->39 [style = bold, label=""];
30->36 [style = bold, label=""];
10->14 [style = bold, label=""];
43->24 [style = bold, label=""];
21->41 [style = bold, label=""];
9->10 [style = bold, label=""];
29->26 [style = bold, label=""];
18->7 [style = bold, label=""];
}
