digraph {
10 [style = filled, label = "assertTrue(close.hasObservers())@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "PublishSubject<Integer> open = PublishSubject.create()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "unsubscribeAll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "to.dispose()@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "final PublishProcessor<Integer> close = PublishProcessor.create()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "open.onNext(1)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertFalse(open.hasSubscribers())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "source.window(open,new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer t){return close}}).doOnNext(new Consumer<Observable<Integer>>(){@Override public void accept(Observable<Integer> w){w.subscribe(Functions.emptyConsumer(),Functions.emptyConsumer())}}).subscribe(to)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "source.window(open,new Function<Integer,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Integer t){return close}}).subscribe(ts)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final PublishSubject<Integer> close = PublishSubject.create()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(close.hasSubscribers())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertFalse(open.hasObservers())@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "assertTrue(open.hasSubscribers())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(open.hasObservers())@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(open.hasObservers())@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertTrue(close.hasObservers())@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertFalse(open.hasObservers())@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "PublishProcessor<Integer> source = PublishProcessor.create()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "ts.cancel()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "TestSubscriber<Flowable<Integer>> ts = new TestSubscriber<Flowable<Integer>>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestObserver<Observable<Integer>> to = new TestObserver<Observable<Integer>>()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "open.onNext(1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "to.dispose()@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "PublishProcessor<Integer> open = PublishProcessor.create()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "unsubscribeAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "unsubscribeAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(close.hasSubscribers())@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(close.hasObservers())@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "PublishSubject<Integer> source = PublishSubject.create()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
14->16 [style = bold, label=""];
24->28 [style = bold, label=""];
16->13 [style = bold, label=""];
20->22 [style = solid, label="ts"];
3->21 [style = dashed, label="0"];
9->24 [style = dashed, label="0"];
7->10 [style = bold, label=""];
11->1 [style = bold, label=""];
2->6 [style = bold, label=""];
6->20 [style = dashed, label="0"];
10->19 [style = dashed, label="0"];
9->4 [style = bold, label=""];
25->18 [style = bold, label=""];
11->22 [style = dashed, label="0"];
12->0 [style = bold, label=""];
8->7 [style = bold, label=""];
4->28 [style = dashed, label="0"];
20->22 [style = bold, label=""];
19->24 [style = bold, label=""];
7->27 [style = dashed, label="0"];
22->8 [style = bold, label=""];
13->17 [style = bold, label=""];
21->26 [style = bold, label=""];
3->2 [style = bold, label=""];
5->0 [style = bold, label=""];
28->23 [style = bold, label=""];
6->11 [style = bold, label=""];
17->15 [style = bold, label=""];
0->18 [style = dashed, label="0"];
11->8 [style = bold, label=""];
1->14 [style = bold, label=""];
10->9 [style = bold, label=""];
4->1 [style = bold, label=""];
27->19 [style = bold, label=""];
18->21 [style = bold, label=""];
2->26 [style = dashed, label="0"];
8->27 [style = bold, label=""];
1->23 [style = dashed, label="0"];
26->20 [style = bold, label=""];
6->11 [style = solid, label="to"];
}
