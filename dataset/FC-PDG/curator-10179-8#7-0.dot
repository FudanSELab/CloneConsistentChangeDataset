digraph {
30 [style = filled, label = "PersistentEphemeralNode node = null@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Timing timing = new Timing()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "{CloseableUtils.closeQuietly(client)CloseableUtils.closeQuietly(node)}@@@39@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "timing.sleepABit()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ConnectionStateListener listener = new ConnectionStateListener(){@Override public void stateChanged(CuratorFramework client,ConnectionState newState){lastState.set(newState)if (newState == ConnectionState.CONNECTED) {connectedLatch.countDown()}if (newState == ConnectionState.RECONNECTED) {reconnectedLatch.countDown()}}}@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "node = new PersistentEphemeralNode(client,PersistentEphemeralNode.Mode.EPHEMERAL,\"/abc/node\",\"hello\".getBytes())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "server.restart()@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "server = new TestingServer(server.getPort())@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testListenersReconnectedIsOK['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final CountDownLatch connectedLatch = new CountDownLatch(1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "server.restart()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "timing.sleepABit()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(timing.awaitLatch(reconnectedLatch))@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "PersistentEphemeralNode node = new PersistentEphemeralNode(client,PersistentEphemeralNode.Mode.EPHEMERAL,\"/abc/node\",\"hello\".getBytes())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "server.restart()@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "testListenersReconnectedIsOK['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(lastState.get(),ConnectionState.RECONNECTED)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testListenersReconnectedIsOK['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "client.getConnectionStateListenable().addListener(listener)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "node.start()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "server.stop()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "client.start()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "server.close()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "server.close()@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(),TimeUnit.MILLISECONDS))@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "server = new TestingServer(server.getPort())@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "timing.sleepABit()@@@34@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(timing.awaitLatch(connectedLatch))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "timing.sleepABit()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final CountDownLatch reconnectedLatch = new CountDownLatch(1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "timing.sleepABit()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
21->8 [style = solid, label="reconnectedLatch"];
13->32 [style = bold, label=""];
30->13 [style = bold, label=""];
16->8 [style = bold, label=""];
3->24 [style = bold, label=""];
20->9 [style = bold, label=""];
7->10 [style = bold, label=""];
9->2 [style = bold, label=""];
31->16 [style = bold, label=""];
1->15 [style = bold, label=""];
16->24 [style = bold, label=""];
11->4 [style = bold, label=""];
20->28 [style = bold, label=""];
32->7 [style = bold, label=""];
10->21 [style = bold, label=""];
27->16 [style = bold, label=""];
6->15 [style = solid, label="client"];
12->6 [style = bold, label=""];
17->19 [style = bold, label=""];
23->32 [style = dashed, label="0"];
5->16 [style = bold, label=""];
8->0 [style = bold, label=""];
4->31 [style = bold, label=""];
28->2 [style = bold, label=""];
26->12 [style = bold, label=""];
5->27 [style = dashed, label="0"];
18->22 [style = bold, label=""];
19->14 [style = bold, label=""];
10->2 [style = solid, label="connectedLatch"];
22->12 [style = bold, label=""];
0->1 [style = bold, label=""];
6->13 [style = bold, label=""];
4->27 [style = bold, label=""];
25->26 [style = bold, label=""];
13->23 [style = bold, label=""];
5->31 [style = dashed, label="0"];
6->32 [style = solid, label="client"];
23->7 [style = bold, label=""];
29->22 [style = bold, label=""];
24->8 [style = bold, label=""];
6->23 [style = solid, label="client"];
19->14 [style = solid, label="listener"];
21->17 [style = bold, label=""];
4->5 [style = bold, label=""];
2->11 [style = bold, label=""];
32->15 [style = solid, label="node"];
14->20 [style = bold, label=""];
22->26 [style = dashed, label="0"];
6->30 [style = bold, label=""];
}
