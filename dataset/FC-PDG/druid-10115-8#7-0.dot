digraph {
5 [style = filled, label = "int i = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Thread.sleep(100)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i < ROWS.size()@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "driver.registerHandoff(published).get(HANDOFF_CONDITION_TIMEOUT_MILLIS,TimeUnit.MILLISECONDS)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final SegmentsAndCommitMetadata published = driver.publish(makeOkPublisher(),committerSupplier.get(),ImmutableList.of(\"dummy\")).get(PUBLISH_TIMEOUT_MILLIS,TimeUnit.MILLISECONDS)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final SegmentsAndMetadata published = driver.publish(makeOkPublisher(),committerSupplier.get(),ImmutableList.of(\"dummy\")).get(PUBLISH_TIMEOUT_MILLIS,TimeUnit.MILLISECONDS)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testSimple['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(driver.add(ROWS.get(i),\"dummy\",committerSupplier,false,true).isOk())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(new SegmentIdWithShardSpec(DATA_SOURCE,Intervals.of(\"2000/PT1H\"),VERSION,new NumberedShardSpec(0,0)),new SegmentIdWithShardSpec(DATA_SOURCE,Intervals.of(\"2000T01/PT1H\"),VERSION,new NumberedShardSpec(0,0))),asIdentifiers(segmentsAndMetadata.getSegments()))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "committerSupplier.setMetadata(i + 1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final SegmentsAndMetadata segmentsAndMetadata = driver.registerHandoff(published).get(HANDOFF_CONDITION_TIMEOUT_MILLIS,TimeUnit.MILLISECONDS)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(3,segmentsAndMetadata.getCommitMetadata())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertNull(driver.startJob(null))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "driver.getSegments().containsKey(\"dummy\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHandoffTimeout['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "segmentHandoffNotifierFactory.disableHandoff()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i++@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testHandoffTimeout['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8->1 [style = solid, label="i"];
0->4 [style = bold, label=""];
11->12 [style = bold, label=""];
13->4 [style = bold, label=""];
4->3 [style = dotted, label="true"];
5->8 [style = solid, label="i"];
15->18 [style = bold, label=""];
10->17 [style = dashed, label="0"];
6->0 [style = bold, label=""];
6->1 [style = dotted, label="true"];
5->6 [style = solid, label="i"];
11->9 [style = bold, label=""];
6->13 [style = bold, label=""];
4->17 [style = bold, label=""];
8->6 [style = solid, label="i"];
8->6 [style = bold, label=""];
7->11 [style = bold, label=""];
14->11 [style = bold, label=""];
0->13 [style = dashed, label="0"];
2->8 [style = bold, label=""];
5->1 [style = solid, label="i"];
12->5 [style = bold, label=""];
6->8 [style = dotted, label="true"];
17->15 [style = bold, label=""];
4->10 [style = bold, label=""];
6->2 [style = dotted, label="true"];
16->11 [style = bold, label=""];
6->1 [style = bold, label=""];
4->3 [style = bold, label=""];
1->2 [style = bold, label=""];
3->4 [style = bold, label=""];
5->6 [style = bold, label=""];
9->12 [style = bold, label=""];
}
