digraph {
22 [style = filled, label = "assertEquals(m_a1,itr.get(0))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(m_s1,sigs.get(0))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<ARecord> itr = rs2.rrs()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(m_a2,itr.get(1))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "RRset<ARecord> rs2 = new RRset<>(m_rs)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "List<RRSIGRecord> sigs = rs2.sigs()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "itr = m_rs.rrs(false)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "m_rs.addRR(m_s2)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "m_rs.addRR(m_s1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(m_a1,itr.get(0))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(2,rs2.size())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<Record> itr = rs2.rrs()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(m_a1,rs2.first())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(2,itr.size())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ctor_1arg['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "RRset rs2 = new RRset(m_rs)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(m_a1,itr.get(0))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(m_s2,sigs.get(1))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(m_a2,itr.get(1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "m_rs.addRR(m_a1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(m_a2,itr.get(1))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ctor_1arg['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "noncycling_iterator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(2,sigs.size())@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "List<ARecord> itr = m_rs.rrs(false)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "m_rs.addRR(m_a2)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
16->0 [style = bold, label=""];
2->19 [style = dashed, label="0"];
7->18 [style = dashed, label="0"];
4->6 [style = bold, label=""];
12->17 [style = bold, label=""];
18->15 [style = bold, label=""];
3->11 [style = bold, label=""];
22->21 [style = bold, label=""];
12->9 [style = bold, label=""];
20->25 [style = bold, label=""];
23->0 [style = bold, label=""];
14->7 [style = bold, label=""];
25->24 [style = bold, label=""];
11->5 [style = bold, label=""];
21->20 [style = bold, label=""];
0->1 [style = bold, label=""];
6->13 [style = bold, label=""];
9->17 [style = dashed, label="0"];
10->0 [style = bold, label=""];
2->14 [style = bold, label=""];
17->3 [style = bold, label=""];
9->3 [style = bold, label=""];
7->15 [style = bold, label=""];
14->18 [style = bold, label=""];
1->2 [style = bold, label=""];
15->12 [style = bold, label=""];
8->4 [style = bold, label=""];
4->24 [style = dashed, label="0"];
1->19 [style = bold, label=""];
19->22 [style = bold, label=""];
}
