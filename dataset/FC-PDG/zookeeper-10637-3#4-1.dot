digraph {
9 [style = filled, label = "boolean useAsync@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testMultiGetData['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(0,stat.getNumChildren())@@@36@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "childrenList = ((OpResult.GetChildrenResult)multiRead.get(2)).getChildren()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "List<String> childrenList = ((OpResult.GetChildrenResult)multiRead.get(0)).getChildren()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testMultiGetData['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "assertEquals(0,stat.getVersion())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(2,stat.getCversion())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(5,stat.getDataLength())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "zk.create(\"/node2\",\"data2\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertEquals(0,stat.getVersion())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(0,stat.getCversion())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "List<OpResult> multiData = multi(zk,Arrays.asList(Op.getData(\"/node1\"),Op.getData(\"/node2\")),useAsync)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "Stat stat = ((OpResult.GetDataResult)multiRead.get(1)).getStat()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(zk.getSessionId(),stat.getEphemeralOwner())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertArrayEquals(((OpResult.GetDataResult)multiData.get(0)).getData(),\"data1\".getBytes())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertArrayEquals(((OpResult.GetDataResult)multiRead.get(3)).getData(),\"data2\".getBytes())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertEquals(0,stat.getEphemeralOwner())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<OpResult> multiData = multi(zk,Arrays.asList(Op.getData(\"/node1\"),Op.getData(\"/node2\")))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertEquals(multiData.size(),2)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(new TreeSet<String>(childrenList),new TreeSet<String>(Arrays.asList(\"node1\",\"node2\")))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(0,stat.getAversion())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "zk.create(\"/node2\",\"data2\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(2,stat.getNumChildren())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(stat.getMzxid(),stat.getCzxid())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(childrenList.size(),2)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(stat.getMzxid(),stat.getPzxid())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(multiRead.get(2) instanceof OpResult.GetChildrenResult)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(stat.getCtime(),stat.getMtime())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertTrue(multiRead.get(0) instanceof OpResult.GetChildrenResult)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertArrayEquals(((OpResult.GetDataResult)multiData.get(1)).getData(),\"data2\".getBytes())@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "zk.create(\"/node1\",\"data1\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "zk.create(\"/node1/node1\",\"data11\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(0,stat.getAversion())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(multiRead.size(),4)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertArrayEquals(((OpResult.GetDataResult)multiRead.get(1)).getData(),\"data1\".getBytes())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "stat = ((OpResult.GetDataResult)multiRead.get(3)).getStat()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "List<OpResult> multiRead = multi(zk,Arrays.asList(Op.getChildren(\"/node1\"),Op.getData(\"/node1\"),Op.getChildren(\"/node2\"),Op.getData(\"/node2\")))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "zk.create(\"/node1/node2\",\"data12\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertTrue(childrenList.isEmpty())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(stat.getMzxid(),stat.getCzxid())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testMultiRead['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(stat.getCtime(),stat.getMtime())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(5,stat.getDataLength())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->23 [style = bold, label=""];
42->18 [style = bold, label=""];
7->1 [style = bold, label=""];
37->24 [style = bold, label=""];
33->20 [style = bold, label=""];
25->13 [style = bold, label=""];
2->6 [style = bold, label=""];
35->42 [style = bold, label=""];
9->7 [style = solid, label="useAsync"];
10->19 [style = bold, label=""];
41->21 [style = bold, label=""];
38->29 [style = bold, label=""];
26->25 [style = bold, label=""];
20->28 [style = bold, label=""];
1->3 [style = bold, label=""];
40->15 [style = bold, label=""];
8->6 [style = bold, label=""];
17->30 [style = bold, label=""];
28->12 [style = bold, label=""];
27->22 [style = bold, label=""];
36->11 [style = bold, label=""];
32->33 [style = bold, label=""];
4->7 [style = bold, label=""];
24->41 [style = bold, label=""];
4->0 [style = bold, label=""];
21->38 [style = bold, label=""];
6->4 [style = bold, label=""];
31->26 [style = bold, label=""];
3->5 [style = bold, label=""];
23->37 [style = bold, label=""];
19->32 [style = bold, label=""];
18->27 [style = bold, label=""];
43->35 [style = bold, label=""];
6->40 [style = bold, label=""];
0->1 [style = bold, label=""];
16->31 [style = bold, label=""];
13->43 [style = bold, label=""];
34->6 [style = bold, label=""];
39->10 [style = bold, label=""];
22->17 [style = bold, label=""];
30->14 [style = bold, label=""];
11->39 [style = bold, label=""];
8->9 [style = dotted, label="true"];
4->40 [style = dashed, label="0"];
0->7 [style = dashed, label="0"];
29->16 [style = bold, label=""];
21->29 [style = solid, label="childrenList"];
14->36 [style = bold, label=""];
}
