digraph {
10 [style = filled, label = "assertThat(result,failedWith(3))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(result,failedWith(3))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,,,3\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,,3', expected correct notation M,N or M-N\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\",,2,3\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,,3\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,,3\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsComma['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,,,3', expected correct notation M,N or M-N\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,,\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\",2,3\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,2,\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,', expected correct notation M,N or M-N\"))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse ',,2,3', expected correct notation M,N or M-N\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse ',2,3', expected correct notation M,N or M-N\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(result,failedWith(3))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,,', expected correct notation M,N or M-N\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\",2,3\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->3 [style = bold, label=""];
4->10 [style = bold, label=""];
1->4 [style = bold, label=""];
0->9 [style = bold, label=""];
4->16 [style = dashed, label="0"];
8->23 [style = bold, label=""];
20->10 [style = solid, label="result"];
9->2 [style = bold, label=""];
16->10 [style = bold, label=""];
0->19 [style = dashed, label="0"];
14->2 [style = solid, label="result"];
9->2 [style = solid, label="result"];
16->8 [style = solid, label="result"];
16->10 [style = solid, label="result"];
8->6 [style = bold, label=""];
3->12 [style = bold, label=""];
15->3 [style = bold, label=""];
12->0 [style = bold, label=""];
21->2 [style = solid, label="result"];
4->10 [style = solid, label="result"];
14->11 [style = solid, label="result"];
13->16 [style = bold, label=""];
21->11 [style = solid, label="result"];
6->15 [style = bold, label=""];
21->2 [style = bold, label=""];
17->12 [style = solid, label="result"];
20->10 [style = bold, label=""];
5->3 [style = solid, label="result"];
17->3 [style = solid, label="result"];
6->5 [style = bold, label=""];
0->14 [style = bold, label=""];
9->11 [style = solid, label="result"];
18->20 [style = bold, label=""];
9->14 [style = dashed, label="0"];
5->17 [style = dashed, label="0"];
10->8 [style = bold, label=""];
15->3 [style = solid, label="result"];
4->20 [style = dashed, label="0"];
9->21 [style = dashed, label="0"];
6->23 [style = dashed, label="0"];
5->12 [style = solid, label="result"];
17->3 [style = bold, label=""];
11->22 [style = bold, label=""];
23->17 [style = bold, label=""];
14->2 [style = bold, label=""];
4->8 [style = solid, label="result"];
12->19 [style = bold, label=""];
5->15 [style = dashed, label="0"];
20->8 [style = solid, label="result"];
7->22 [style = dashed, label="0"];
15->12 [style = solid, label="result"];
2->11 [style = bold, label=""];
11->7 [style = bold, label=""];
19->21 [style = bold, label=""];
}
