digraph {
11 [style = filled, label = "List<WorkUnit> workUnits = new KafkaTopicGroupingWorkUnitPacker(source,state,Optional.absent()).pack(workUnitsByTopic,10)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(workUnits.get(2).getProp(KafkaSource.TOPIC_NAME),\"topic2\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(workUnits.get(1).getProp(KafkaSource.TOPIC_NAME),\"topic1\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(workUnits.get(0).getPropAsInt(KafkaUtils.getPartitionPropName(KafkaSource.PARTITION_ID,1)),2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testMultiTopic['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "state.setProp(\"gobblin.kafka.streaming.enableIndexing\",false)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Map<String,List<WorkUnit>> workUnitsByTopic = ImmutableMap.of(\"topic1\",Lists.newArrayList(getWorkUnitWithTopicPartition(\"topic1\",1),getWorkUnitWithTopicPartition(\"topic1\",2),getWorkUnitWithTopicPartition(\"topic1\",3)),\"topic2\",Lists.newArrayList(getWorkUnitWithTopicPartition(\"topic2\",1),getWorkUnitWithTopicPartition(\"topic2\",2),getWorkUnitWithTopicPartition(\"topic2\",3)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Map<String,List<WorkUnit>> workUnitsByTopic = ImmutableMap.of(\"topic1\",Lists.newArrayList(getWorkUnitWithTopicPartition(\"topic1\",1),getWorkUnitWithTopicPartition(\"topic1\",2),getWorkUnitWithTopicPartition(\"topic1\",3)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(workUnits.get(3).getPropAsDouble(KafkaTopicGroupingWorkUnitPacker.CONTAINER_CAPACITY_KEY),2,0.001)@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertEquals(workUnits.size(),2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "KafkaSource source = new UniversalKafkaSource()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR,Files.createTempDir().getAbsolutePath())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(workUnits.get(3).getPropAsInt(KafkaUtils.getPartitionPropName(KafkaSource.PARTITION_ID,0)),3)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testSingleTopic['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(workUnits.get(2).getPropAsInt(KafkaUtils.getPartitionPropName(KafkaSource.PARTITION_ID,1)),2)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testMultiTopic['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(workUnits.get(2).getPropAsInt(KafkaUtils.getPartitionPropName(KafkaSource.PARTITION_ID,0)),1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(workUnits.get(0).getPropAsInt(KafkaUtils.getPartitionPropName(KafkaSource.PARTITION_ID,0)),1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(workUnits.get(0).getPropAsDouble(KafkaTopicGroupingWorkUnitPacker.CONTAINER_CAPACITY_KEY),2,0.001)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(workUnits.get(3).getProp(KafkaSource.TOPIC_NAME),\"topic2\")@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(workUnits.get(2).getPropAsDouble(KafkaTopicGroupingWorkUnitPacker.CONTAINER_CAPACITY_KEY),2,0.001)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "SourceState state = new SourceState(new State(props))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(workUnits.size(),4)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(workUnits.get(0).getProp(KafkaSource.TOPIC_NAME),\"topic1\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(workUnits.get(1).getPropAsDouble(KafkaTopicGroupingWorkUnitPacker.CONTAINER_CAPACITY_KEY),2,0.001)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(workUnits.get(1).getPropAsInt(KafkaUtils.getPartitionPropName(KafkaSource.PARTITION_ID,0)),3)@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9->18 [style = bold, label=""];
11->3 [style = bold, label=""];
13->7 [style = bold, label=""];
8->9 [style = bold, label=""];
23->15 [style = bold, label=""];
25->11 [style = solid, label="workUnitsByTopic"];
18->2 [style = bold, label=""];
17->21 [style = bold, label=""];
4->25 [style = bold, label=""];
2->5 [style = bold, label=""];
6->0 [style = bold, label=""];
20->15 [style = bold, label=""];
16->8 [style = bold, label=""];
9->2 [style = bold, label=""];
12->1 [style = bold, label=""];
3->24 [style = dashed, label="0"];
19->0 [style = bold, label=""];
6->19 [style = bold, label=""];
14->11 [style = bold, label=""];
1->6 [style = bold, label=""];
11->24 [style = bold, label=""];
14->11 [style = solid, label="workUnitsByTopic"];
25->11 [style = bold, label=""];
14->25 [style = dashed, label="0"];
7->4 [style = bold, label=""];
24->16 [style = bold, label=""];
15->13 [style = bold, label=""];
0->17 [style = bold, label=""];
5->22 [style = bold, label=""];
4->14 [style = bold, label=""];
5->12 [style = bold, label=""];
10->15 [style = bold, label=""];
3->16 [style = bold, label=""];
22->12 [style = bold, label=""];
}
