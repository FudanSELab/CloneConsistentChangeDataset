digraph {
3 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "SQLSegmentAssert.assertIs(assertContext,actual,expected)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertSubquery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertReadwriteSplittingRule(assertContext,actual.getRules(),expected.getRules())@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertNull(assertContext.getText(\"Actual statement should not exist.\"),actual)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final SubquerySegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertNull(assertContext.getText(\"Actual should not exist.\"),actual)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "final ExpectedSubquery expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final AlterReadWriteSplittingRuleStatementTestCase expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final AlterReadwriteSplittingRuleStatement actual@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual statement should exist.\"),actual)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual subquery should exist.\"),actual)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final AlterReadWriteSplittingRuleStatementTestCase expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertNull(assertContext.getText(\"Actual subquery should not exist.\"),actual)@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual should exist.\"),actual)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "SelectStatementAssert.assertIs(assertContext,actual.getSelect(),expected.getSelectTestCases())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9->12 [style = dotted, label="true"];
6->8 [style = dashed, label="0"];
2->0 [style = dotted, label="true"];
2->15 [style = dotted, label="false"];
4->17 [style = dashed, label="0"];
13->17 [style = solid, label="assertContext"];
1->2 [style = solid, label="expected"];
7->8 [style = solid, label="actual"];
19->14 [style = solid, label="actual"];
2->14 [style = dotted, label="false"];
7->10 [style = solid, label="actual"];
2->6 [style = bold, label=""];
9->11 [style = dotted, label="true"];
5->1 [style = dotted, label="true"];
9->2 [style = bold, label=""];
19->16 [style = solid, label="actual"];
18->19 [style = dotted, label="true"];
7->6 [style = solid, label="actual"];
0->16 [style = dashed, label="0"];
13->14 [style = solid, label="assertContext"];
7->20 [style = dashed, label="0"];
11->2 [style = solid, label="expected"];
7->0 [style = solid, label="actual"];
18->20 [style = dotted, label="true"];
5->3 [style = dotted, label="true"];
18->2 [style = bold, label=""];
20->14 [style = solid, label="expected"];
2->10 [style = bold, label=""];
0->10 [style = dashed, label="0"];
20->2 [style = solid, label="expected"];
6->4 [style = bold, label=""];
5->2 [style = bold, label=""];
15->17 [style = bold, label=""];
2->0 [style = bold, label=""];
19->15 [style = solid, label="actual"];
6->15 [style = dashed, label="0"];
17->14 [style = bold, label=""];
5->7 [style = dotted, label="true"];
2->15 [style = bold, label=""];
2->8 [style = dotted, label="false"];
2->6 [style = dotted, label="false"];
3->4 [style = solid, label="assertContext"];
2->4 [style = dotted, label="false"];
8->4 [style = bold, label=""];
9->7 [style = dotted, label="true"];
12->4 [style = solid, label="assertContext"];
2->8 [style = bold, label=""];
2->17 [style = dotted, label="false"];
2->16 [style = dotted, label="true"];
2->10 [style = dotted, label="true"];
18->13 [style = dotted, label="true"];
2->16 [style = bold, label=""];
}
