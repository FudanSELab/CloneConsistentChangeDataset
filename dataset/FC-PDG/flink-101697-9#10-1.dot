digraph {
0 [style = filled, label = "CommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS,arguments,true)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ProgramOptions programOptions = new ProgramOptions(commandLine)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertArrayEquals(reducedArguments,programOptions.getProgramArgs())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String(( reducedArguments = new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b0bba6@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ExecutionConfigAccessor executionOptions = ExecutionConfigAccessor.fromProgramOptions(programOptions)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "String(( reducedArguments = {\"--debug\",\"true\",\"arg1\",\"arg2\"}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testVariantWithExplicitJarAndArgumentsOption['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertArrayEquals(classpath,executionOptions.getClasspaths().toArray())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(TEST_JAR_MAIN_CLASS,prog.getMainClassName())@@@20@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "PackagedProgram prog = frontend.buildProgram(programOptions,executionOptions)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String(( arguments = {\"--classpath\",\"file:///tmp/foo\",\"--classpath\",\"file:///tmp/bar\",getTestJarPath(),\"--debug\",\"true\",\"arg1\",\"arg2\"}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertArrayEquals(reducedArguments,prog.getArguments())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testValidVariantWithNoJarAndNoArgumentsOption['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertArrayEquals(reducedArguments,programOptions.getProgramArgs())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertArrayEquals(classpath,programOptions.getClasspaths().toArray())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(getTestJarPath(),executionOptions.getJarFilePath())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testVariantWithExplicitJarAndArgumentsOption['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertEquals(getTestJarPath(),programOptions.getJarFilePath())@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "URL(( classpath = new URL((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b0bc07@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertArrayEquals(reducedArguments,prog.getArguments())@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
14->16 [style = bold, label=""];
17->8 [style = bold, label=""];
7->13 [style = solid, label="reducedArguments"];
3->1 [style = bold, label=""];
15->14 [style = bold, label=""];
16->10 [style = bold, label=""];
19->10 [style = solid, label="reducedArguments"];
1->5 [style = solid, label="executionOptions"];
11->4 [style = bold, label=""];
8->6 [style = bold, label=""];
7->0 [style = bold, label=""];
3->15 [style = bold, label=""];
6->19 [style = bold, label=""];
2->9 [style = bold, label=""];
9->10 [style = bold, label=""];
3->10 [style = solid, label="programOptions"];
8->0 [style = solid, label="arguments"];
13->11 [style = bold, label=""];
19->0 [style = bold, label=""];
0->3 [style = solid, label="commandLine"];
19->11 [style = solid, label="reducedArguments"];
10->5 [style = bold, label=""];
10->13 [style = bold, label=""];
5->10 [style = dashed, label="0"];
6->9 [style = solid, label="classpath"];
7->19 [style = dashed, label="0"];
12->8 [style = bold, label=""];
3->1 [style = solid, label="programOptions"];
7->16 [style = solid, label="reducedArguments"];
1->2 [style = bold, label=""];
5->11 [style = bold, label=""];
18->8 [style = bold, label=""];
7->10 [style = solid, label="reducedArguments"];
3->5 [style = solid, label="programOptions"];
6->7 [style = bold, label=""];
6->14 [style = solid, label="classpath"];
7->11 [style = solid, label="reducedArguments"];
}
