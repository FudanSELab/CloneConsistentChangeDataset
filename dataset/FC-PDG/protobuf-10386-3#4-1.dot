digraph {
2 [style = filled, label = "assertEquals(0xfffd,text.charAt(0))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "output.flush()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "CodedInputStream input = rawOutput.toByteString().newCodedInput()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String text = input.readString()@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testReadStringInvalidUtf8['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(tag,input.readTag())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String text = input.readString()@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertEquals(inputType.name(),0xfffd,text.charAt(0))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "output.writeRawBytes(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@351522)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testReadStringInvalidUtf8['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "output.writeRawVarint32(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "fail(\"Expected invalid UTF-8 exception.\")@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "CodedInputStream input = inputType.newDecoder(rawInput)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "int tag = WireFormat.makeTag(1,WireFormat.WIRETYPE_LENGTH_DELIMITED)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "CodedOutputStream output = CodedOutputStream.newInstance(rawOutput)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testReadStringRequireUtf8InvalidUtf8['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(inputType.name(),tag,input.readTag())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "ByteString.Output rawOutput = ByteString.newOutput()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "byte(( rawInput = rawOutput.toByteString().toByteArray()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "output.writeRawVarint32(tag)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "input.readStringRequireUtf8()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->15 [style = bold, label=""];
4->3 [style = bold, label=""];
0->9 [style = bold, label=""];
15->13 [style = bold, label=""];
0->16 [style = solid, label="tag"];
3->1 [style = bold, label=""];
8->18 [style = bold, label=""];
7->14 [style = dashed, label="0"];
9->4 [style = bold, label=""];
14->17 [style = solid, label="rawInput"];
14->17 [style = bold, label=""];
19->10 [style = bold, label=""];
6->0 [style = bold, label=""];
7->8 [style = bold, label=""];
1->7 [style = bold, label=""];
10->6 [style = bold, label=""];
13->17 [style = bold, label=""];
5->2 [style = bold, label=""];
18->20 [style = bold, label=""];
12->10 [style = bold, label=""];
8->5 [style = bold, label=""];
10->6 [style = solid, label="rawOutput"];
11->10 [style = bold, label=""];
2->13 [style = dashed, label="0"];
1->14 [style = bold, label=""];
0->8 [style = solid, label="tag"];
17->16 [style = bold, label=""];
0->9 [style = solid, label="tag"];
}
