digraph {
25 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final Sequence seqStreamTwo = mockContext.sequence(\"seqStreamTwo\")@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "cos.write(9)@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14f6ea)@@@63@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertThat(cos.size()).isEqualTo(2)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertFalse(cos.isEmpty())@@@54@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(4)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "cos.addOutputStream(streamOne)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "final OutputStream streamTwo = mock(,\"streamTwo\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "mockContext.checking(new Expectations(){})@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(2,cos.size())@@@55@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "cos.flush()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final OutputStream streamTwo = mockContext.mock(,\"streamTwo\")@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "cos.close()@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14f5f2,2,3)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertEquals(2,cos.size())@@@59@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testNewCompositeOutputStreamWithTwoStreams['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne,streamTwo)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14f605)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "testAddTwoOutputStreamsWhenEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testNewCompositeOutputStreamWithTwoStreams['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "cos.close()@@@64@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(0,cos.size())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final Sequence seqStreamOne = mockContext.sequence(\"seqStreamOne\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertTrue(cos.isEmpty())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "cos.addOutputStream(streamTwo)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "mockContext.checking(new Expectations(){})@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "cos.write(9)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14f6d7,2,3)@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "cos.flush()@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertFalse(cos.isEmpty())@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14f59c,2,3)@@@56@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(0)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "inOrderStreams.verify(streamOne,times(2)).flush()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@53@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final OutputStream streamOne = mockContext.mock(,\"streamOne\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "cos.close()@@@68@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "cos.write(9)@@@62@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(1)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->10 [style = bold, label=""];
6->21 [style = dashed, label="0"];
29->15 [style = bold, label=""];
44->42 [style = bold, label=""];
36->40 [style = bold, label=""];
1->8 [style = bold, label=""];
16->27 [style = bold, label=""];
21->19 [style = bold, label=""];
28->34 [style = bold, label=""];
25->22 [style = bold, label=""];
11->14 [style = bold, label=""];
31->16 [style = bold, label=""];
19->31 [style = bold, label=""];
15->25 [style = bold, label=""];
35->44 [style = bold, label=""];
9->4 [style = bold, label=""];
2->3 [style = bold, label=""];
37->41 [style = bold, label=""];
20->28 [style = bold, label=""];
34->29 [style = solid, label="streamTwo"];
1->34 [style = dashed, label="0"];
17->30 [style = bold, label=""];
7->44 [style = solid, label="streamTwo"];
0->28 [style = dashed, label="0"];
12->0 [style = bold, label=""];
22->23 [style = bold, label=""];
10->6 [style = bold, label=""];
24->18 [style = bold, label=""];
32->26 [style = bold, label=""];
9->37 [style = bold, label=""];
42->14 [style = bold, label=""];
33->29 [style = bold, label=""];
7->9 [style = bold, label=""];
5->2 [style = bold, label=""];
30->21 [style = bold, label=""];
23->24 [style = bold, label=""];
10->30 [style = dashed, label="0"];
1->35 [style = solid, label="streamOne"];
28->17 [style = solid, label="streamOne"];
13->7 [style = bold, label=""];
0->1 [style = bold, label=""];
1->4 [style = solid, label="streamOne"];
6->11 [style = bold, label=""];
34->17 [style = bold, label=""];
39->2 [style = bold, label=""];
2->36 [style = bold, label=""];
18->32 [style = bold, label=""];
34->17 [style = solid, label="streamTwo"];
43->0 [style = bold, label=""];
41->38 [style = bold, label=""];
40->45 [style = bold, label=""];
27->33 [style = bold, label=""];
4->37 [style = dashed, label="0"];
7->4 [style = solid, label="streamTwo"];
38->35 [style = bold, label=""];
14->39 [style = bold, label=""];
28->29 [style = solid, label="streamOne"];
8->13 [style = bold, label=""];
14->5 [style = bold, label=""];
}
