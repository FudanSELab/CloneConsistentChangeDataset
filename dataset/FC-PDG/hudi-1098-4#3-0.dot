digraph {
13 [style = filled, label = "testAddPartitionMetaWithRealRun['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "String got = removeNonWordAndStripSpace(cr.getResult().toString())@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertTrue(fs.mkdirs(new Path(partition1)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<String> paths = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs,tablePath)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "String expected = HoodiePrintHelper.print(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@162c081,rows)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(expected,cr.getResult().toString())@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "expected = HoodiePrintHelper.print(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@162bfe5,rows)@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "cr = getShell().executeCommand(\"repair addpartitionmeta\")@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "String(((( rows = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs,tablePath).stream().map(null).toArray(null)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "rows = paths.stream().map(null).toArray(null)@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "rows = paths.stream().map(null).toArray(null)@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta --dryrun false\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "cr = getShell().executeCommand(\"repair addpartitionmeta\")@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "got = removeNonWordAndStripSpace(cr.getResult().toString())@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "testAddPartitionMetaWithDryRun['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testAddPartitionMetaWithRealRun['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "expected = HoodiePrintHelper.print(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@162bf11,rows)@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(expected,cr.getResult().toString())@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(expected,cr.getResult().toString())@@@27@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String(((( rows = paths.stream().map(null).toArray(null)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "expected = removeNonWordAndStripSpace(expected)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertTrue(cr.isSuccess())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String expected = HoodiePrintHelper.print(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@162bfa4,rows)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(fs.mkdirs(new Path(partition2)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(expected,got)@@@31@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertTrue(fs.mkdirs(new Path(partition3)))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(expected,got)@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "expected = removeNonWordAndStripSpace(expected)@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1->9 [style = bold, label=""];
20->23 [style = solid, label="expected"];
3->1 [style = solid, label="expected"];
21->22 [style = bold, label=""];
10->17 [style = bold, label=""];
24->23 [style = bold, label=""];
7->31 [style = dashed, label="0"];
25->10 [style = bold, label=""];
18->21 [style = solid, label="got"];
0->16 [style = solid, label="rows"];
29->28 [style = bold, label=""];
3->19 [style = solid, label="expected"];
14->5 [style = solid, label="partition3"];
26->27 [style = solid, label="rows"];
9->0 [style = bold, label=""];
8->6 [style = bold, label=""];
31->12 [style = bold, label=""];
26->27 [style = bold, label=""];
27->20 [style = bold, label=""];
12->30 [style = bold, label=""];
3->1 [style = bold, label=""];
30->29 [style = solid, label="rows"];
5->31 [style = bold, label=""];
16->2 [style = bold, label=""];
17->4 [style = bold, label=""];
8->30 [style = dashed, label="0"];
7->12 [style = bold, label=""];
22->26 [style = bold, label=""];
19->21 [style = solid, label="expected"];
15->11 [style = bold, label=""];
32->10 [style = bold, label=""];
16->2 [style = solid, label="expected"];
6->3 [style = bold, label=""];
3->19 [style = bold, label=""];
29->28 [style = solid, label="expected"];
17->15 [style = solid, label="partition1"];
6->3 [style = solid, label="rows"];
4->14 [style = bold, label=""];
18->21 [style = bold, label=""];
20->24 [style = bold, label=""];
24->23 [style = solid, label="got"];
13->10 [style = bold, label=""];
4->11 [style = solid, label="partition2"];
27->20 [style = solid, label="expected"];
14->15 [style = bold, label=""];
12->8 [style = bold, label=""];
19->18 [style = bold, label=""];
5->7 [style = bold, label=""];
11->5 [style = bold, label=""];
30->29 [style = bold, label=""];
0->16 [style = bold, label=""];
}
