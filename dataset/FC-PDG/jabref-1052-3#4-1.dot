digraph {
2 [style = filled, label = "Collection<String> result = autoCompleter.call(getRequest((\"\")))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(Collections.emptyList(),result)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "entry.setCiteKey(\"testKey\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "completeEmptyStringReturnsNothing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "completeEmptyStringReturnsNothing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "autoCompleter.indexEntry(entry)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Collection<BibEntry> result = autoCompleter.call(getRequest((\"\")))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "completeEmptyStringReturnsNothing['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "BibEntry entry = new BibEntry()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "entry.setField(\"field\",\"testKey\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),result)@@@7@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2->6 [style = solid, label="result"];
5->1 [style = bold, label=""];
1->9 [style = dashed, label="0"];
3->5 [style = bold, label=""];
7->5 [style = bold, label=""];
0->10 [style = bold, label=""];
1->0 [style = bold, label=""];
9->0 [style = bold, label=""];
8->5 [style = bold, label=""];
5->9 [style = bold, label=""];
5->0 [style = solid, label="entry"];
2->4 [style = solid, label="result"];
10->4 [style = solid, label="result"];
2->4 [style = bold, label=""];
4->6 [style = dashed, label="0"];
2->6 [style = bold, label=""];
2->10 [style = dashed, label="0"];
0->2 [style = bold, label=""];
10->4 [style = bold, label=""];
}
