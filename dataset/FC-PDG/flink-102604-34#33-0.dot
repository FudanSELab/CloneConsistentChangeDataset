digraph {
1 [style = filled, label = "OperatorStateHandles snapshot = testHarness.snapshot(0L,0L)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),3999))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),Long.MAX_VALUE))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@47@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "expectedOutput.add(new Watermark(2999))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "closeCalled.set(0)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "expectedOutput.add(new Watermark(8000))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),0))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testHarness.processWatermark(new Watermark(3000))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "testHarness.processWatermark(new Watermark(6999))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "expectedOutput.add(new Watermark(5000))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testHarness.processWatermark(new Watermark(4000))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),2999))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "expectedOutput.add(new Watermark(1000))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "expectedOutput.add(new Watermark(6999))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),3000))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),999))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),20))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "testHarness.processWatermark(new Watermark(5999))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "testHarness.close()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",2),4999))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expectedOutput.add(new Watermark(7000))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",5),Long.MAX_VALUE))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",2),5999))@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),1999))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1999))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "testHarness.open()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testHarness.processWatermark(new Watermark(7999))@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testHarness.processWatermark(new Watermark(6000))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "expectedOutput.add(new Watermark(5999))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1998))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "expectedOutput.add(new Watermark(3999))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "testHarness.setup()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "expectedOutput.add(new Watermark(4999))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = createTestHarness(operator)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1000))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final int windowSize = 3@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",3),2999))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.processWatermark(new Watermark(3999))@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",new SumReducer(),inputType.createSerializer(new ExecutionConfig()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "expectedOutput.add(new Watermark(1999))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "testHarness.initializeState(snapshot)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),999))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "testSlidingEventTimeWindows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "expectedOutput.add(new Watermark(4000))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectedOutput.add(new Watermark(6000))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHarness.open()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",3),1999))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",5),3999))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "testContinuousWatermarkTrigger['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "testContinuousWatermarkTrigger['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),Long.MAX_VALUE))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testHarness.processWatermark(new Watermark(1000))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expectedOutput.add(new Watermark(2000))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "testHarness.processWatermark(new Watermark(4999))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testHarness.processWatermark(new Watermark(2999))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),0))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "expectedOutput.add(new Watermark(999))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),3000))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new WindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,GlobalWindow,Tuple2<String,Integer>>()),ContinuousEventTimeTrigger.of(Time.of(windowSize,TimeUnit.SECONDS)),0,null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "expectedOutput.add(new Watermark(7999))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testHarness.processWatermark(new Watermark(1999))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testHarness.processWatermark(new Watermark(7000))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness.processWatermark(new Watermark(999))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51->67 [style = bold, label=""];
48->77 [style = bold, label=""];
10->14 [style = solid, label="expectedOutput"];
38->44 [style = bold, label=""];
5->20 [style = bold, label=""];
62->54 [style = bold, label=""];
63->76 [style = solid, label="expectedOutput"];
41->21 [style = dashed, label="0"];
28->38 [style = bold, label=""];
73->74 [style = bold, label=""];
10->43 [style = solid, label="expectedOutput"];
15->57 [style = dashed, label="0"];
38->4 [style = bold, label=""];
60->71 [style = bold, label=""];
67->60 [style = bold, label=""];
6->38 [style = solid, label="windowSize"];
9->6 [style = bold, label=""];
7->26 [style = bold, label=""];
23->28 [style = bold, label=""];
1->49 [style = solid, label="snapshot"];
29->2 [style = bold, label=""];
10->39 [style = bold, label=""];
1->73 [style = dashed, label="0"];
43->35 [style = bold, label=""];
46->76 [style = bold, label=""];
71->33 [style = bold, label=""];
50->55 [style = bold, label=""];
15->0 [style = bold, label=""];
10->32 [style = solid, label="expectedOutput"];
42->1 [style = bold, label=""];
40->7 [style = dashed, label="0"];
40->31 [style = bold, label=""];
56->7 [style = bold, label=""];
37->33 [style = bold, label=""];
41->42 [style = bold, label=""];
0->3 [style = bold, label=""];
76->21 [style = bold, label=""];
54->49 [style = bold, label=""];
28->38 [style = solid, label="stateDesc"];
61->1 [style = bold, label=""];
17->41 [style = bold, label=""];
77->51 [style = bold, label=""];
63->61 [style = solid, label="expectedOutput"];
38->44 [style = solid, label="operator"];
11->43 [style = bold, label=""];
13->66 [style = bold, label=""];
25->79 [style = dashed, label="0"];
13->77 [style = dashed, label="0"];
13->11 [style = bold, label=""];
10->3 [style = solid, label="expectedOutput"];
70->59 [style = bold, label=""];
79->52 [style = bold, label=""];
12->19 [style = dashed, label="0"];
39->7 [style = bold, label=""];
10->29 [style = solid, label="expectedOutput"];
33->30 [style = bold, label=""];
2->27 [style = bold, label=""];
59->10 [style = bold, label=""];
78->75 [style = dotted, label="true"];
74->61 [style = bold, label=""];
10->16 [style = solid, label="expectedOutput"];
2->1 [style = dashed, label="0"];
37->55 [style = dashed, label="0"];
20->19 [style = bold, label=""];
1->62 [style = bold, label=""];
10->17 [style = solid, label="expectedOutput"];
4->44 [style = dashed, label="0"];
11->51 [style = dashed, label="0"];
4->10 [style = bold, label=""];
10->18 [style = bold, label=""];
36->33 [style = dashed, label="0"];
63->47 [style = bold, label=""];
72->69 [style = bold, label=""];
19->64 [style = bold, label=""];
3->37 [style = bold, label=""];
27->14 [style = bold, label=""];
49->68 [style = bold, label=""];
18->34 [style = bold, label=""];
6->23 [style = bold, label=""];
12->17 [style = bold, label=""];
65->79 [style = bold, label=""];
33->24 [style = dashed, label="0"];
80->26 [style = bold, label=""];
33->57 [style = bold, label=""];
63->50 [style = solid, label="expectedOutput"];
21->12 [style = bold, label=""];
66->58 [style = bold, label=""];
58->48 [style = bold, label=""];
22->39 [style = bold, label=""];
21->20 [style = dashed, label="0"];
14->13 [style = bold, label=""];
30->65 [style = dashed, label="0"];
19->40 [style = bold, label=""];
1->29 [style = bold, label=""];
42->53 [style = dashed, label="0"];
78->63 [style = bold, label=""];
45->9 [style = bold, label=""];
31->80 [style = dashed, label="0"];
57->50 [style = bold, label=""];
31->16 [style = bold, label=""];
26->5 [style = bold, label=""];
36->15 [style = bold, label=""];
63->48 [style = solid, label="expectedOutput"];
25->32 [style = bold, label=""];
44->10 [style = bold, label=""];
55->24 [style = bold, label=""];
30->25 [style = bold, label=""];
7->80 [style = bold, label=""];
53->73 [style = bold, label=""];
47->72 [style = bold, label=""];
64->46 [style = bold, label=""];
34->22 [style = bold, label=""];
63->60 [style = solid, label="expectedOutput"];
63->5 [style = solid, label="expectedOutput"];
16->21 [style = bold, label=""];
38->4 [style = solid, label="operator"];
39->56 [style = bold, label=""];
8->9 [style = bold, label=""];
63->52 [style = solid, label="expectedOutput"];
69->70 [style = bold, label=""];
68->13 [style = bold, label=""];
35->36 [style = bold, label=""];
35->71 [style = dashed, label="0"];
32->24 [style = bold, label=""];
24->65 [style = bold, label=""];
21->53 [style = bold, label=""];
}
