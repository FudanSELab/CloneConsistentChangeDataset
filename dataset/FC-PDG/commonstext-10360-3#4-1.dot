digraph {
6 [style = filled, label = "final int(( count = new int((((@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testAppendln_StringBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertThat(sb.toString()).isEqualTo(\"foo\" + SEP)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "verify(sb,times(1)).append(any())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "sb.appendln(new StringBuffer(\"foo\"))@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(sb.toString()).isEqualTo(\"foo\" + SEP)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final TextStringBuilder sb = spy(new TextStringBuilder())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "sb.appendln(new StringBuffer(\"foo\"),0,3)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(count(1().isEqualTo(1)@@@19@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "sb.appendln(new StringBuffer(\"foo\"))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertThat(count(0().isEqualTo(1)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final TextStringBuilder sb = new TextStringBuilder(){@Override public TextStringBuilder append(final StringBuffer str,final int startIndex,final int length){count(0(++return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@150ff10strstartIndexlength}@Override public TextStringBuilder appendNewLine(){count(1(++return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@150ff1e}}@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "verify(sb,times(1)).appendNewLine()@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testAppendln_StringBuffer_int_int['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testAppendln_StringBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
6->1 [style = bold, label=""];
1->14 [style = bold, label=""];
3->5 [style = bold, label=""];
7->11 [style = bold, label=""];
6->1 [style = solid, label="count"];
13->6 [style = bold, label=""];
9->10 [style = bold, label=""];
3->14 [style = dashed, label="0"];
11->9 [style = bold, label=""];
2->6 [style = bold, label=""];
12->7 [style = bold, label=""];
5->4 [style = bold, label=""];
4->0 [style = bold, label=""];
14->5 [style = bold, label=""];
6->12 [style = dashed, label="0"];
8->12 [style = bold, label=""];
}
