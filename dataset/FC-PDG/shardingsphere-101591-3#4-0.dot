digraph {
17 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "null != ctx.LP_()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)),(ExpressionSegment)visit(ctx.expr(1)),ctx.logicalOperator().getText(),text)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "return result@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return result@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "null != ctx.XOR()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "return visit(ctx.expr(0))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "null != ctx.logicalOperator()@@@13@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "String operator = \"XOR\"@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "visitExpr['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "NotExpression result = new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "null != ctx.booleanPrimary()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "return result@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "visitExpr['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "visitExpr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "NotExpression result = new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final ExprContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "null != ctx.logicalOperator()@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return result@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "String operator = ctx.logicalOperator().getText()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "return result@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "return visit(ctx.booleanPrimary())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->12 [style = dotted, label="true"];
15->10 [style = bold, label=""];
11->8 [style = solid, label="text"];
14->20 [style = solid, label="operator"];
19->11 [style = bold, label=""];
8->6 [style = bold, label=""];
21->24 [style = bold, label=""];
14->26 [style = dashed, label="0"];
27->11 [style = solid, label="text"];
13->9 [style = solid, label="result"];
21->24 [style = dotted, label="true"];
5->0 [style = bold, label=""];
19->11 [style = dotted, label="true"];
11->13 [style = bold, label=""];
3->20 [style = solid, label="right"];
28->25 [style = bold, label=""];
11->8 [style = dotted, label="true"];
0->3 [style = dotted, label="true"];
28->25 [style = solid, label="result"];
15->11 [style = solid, label="right"];
10->11 [style = bold, label=""];
11->7 [style = dotted, label="true"];
8->28 [style = bold, label=""];
6->8 [style = dashed, label="0"];
1->15 [style = solid, label="left"];
0->10 [style = dotted, label="true"];
18->16 [style = dotted, label="true"];
0->19 [style = bold, label=""];
11->8 [style = solid, label="result"];
8->17 [style = bold, label=""];
5->21 [style = bold, label=""];
26->27 [style = bold, label=""];
27->11 [style = bold, label=""];
21->22 [style = bold, label=""];
2->21 [style = bold, label=""];
12->11 [style = solid, label="left"];
8->6 [style = solid, label="text"];
11->8 [style = bold, label=""];
0->14 [style = dotted, label="true"];
6->7 [style = bold, label=""];
20->19 [style = bold, label=""];
23->16 [style = dotted, label="true"];
15->20 [style = dashed, label="0"];
23->5 [style = bold, label=""];
1->3 [style = bold, label=""];
12->20 [style = bold, label=""];
0->11 [style = bold, label=""];
22->28 [style = bold, label=""];
19->17 [style = bold, label=""];
19->8 [style = dotted, label="true"];
3->15 [style = solid, label="right"];
2->0 [style = bold, label=""];
22->26 [style = dotted, label="true"];
11->6 [style = dotted, label="true"];
0->1 [style = bold, label=""];
14->15 [style = solid, label="operator"];
6->7 [style = solid, label="result"];
22->27 [style = dotted, label="true"];
13->9 [style = bold, label=""];
22->15 [style = dotted, label="true"];
4->5 [style = bold, label=""];
0->1 [style = dotted, label="true"];
5->2 [style = dotted, label="true"];
7->13 [style = bold, label=""];
0->15 [style = dotted, label="true"];
3->14 [style = bold, label=""];
12->15 [style = bold, label=""];
0->20 [style = dotted, label="true"];
13->17 [style = dashed, label="0"];
22->11 [style = dotted, label="true"];
1->20 [style = solid, label="left"];
12->20 [style = solid, label="text"];
24->22 [style = bold, label=""];
22->12 [style = dotted, label="true"];
15->26 [style = bold, label=""];
5->2 [style = bold, label=""];
22->8 [style = dotted, label="true"];
0->21 [style = dashed, label="0"];
22->12 [style = bold, label=""];
18->5 [style = bold, label=""];
15->10 [style = solid, label="result"];
14->12 [style = bold, label=""];
26->11 [style = solid, label="operator"];
12->15 [style = solid, label="text"];
4->16 [style = dotted, label="true"];
}
