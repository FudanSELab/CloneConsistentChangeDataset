digraph {
5 [style = filled, label = "DateTime maxi = now.plusMinutes(60)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "String runningTaskId = captured.getValue().getId()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "supervisor.start()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "Assert.assertEquals(now,((KinesisIndexTask)captured.getValue()).getIOConfig().getMinimumMessageTime().get())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Capture<Task> aNewTaskCapture = Capture.newInstance()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Assert.assertEquals(iHaveFailed.getIOConfig().getBaseSequenceName(),((KinesisIndexTask)aNewTaskCapture.getValue()).getIOConfig().getBaseSequenceName())@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "replayAll()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "addSomeEvents(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "EasyMock.replay(taskClient)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "Task id1 = createKinesisIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamPartitions<>(\"stream\",ImmutableMap.of(shardId1,\"0\",shardId0,\"0\")),new SeekableStreamPartitions<>(\"stream\",ImmutableMap.of(shardId1,SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,shardId0,SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER)),now,maxi)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "supervisorRecordSupplier.seek(anyObject(),anyString())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "DateTime now = DateTimes.nowUtc()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "DateTime maxi = now.plusMinutes(60)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(captured.getValue())).anyTimes()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(\"id1\")).andReturn(Futures.immediateFuture(now)).anyTimes()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
96 [style = filled, label = "EasyMock.expect(taskStorage.getTask(runningTaskId)).andReturn(Optional.of(captured.getValue())).anyTimes()@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "replay(taskClient)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Task id1 = createKafkaIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamPartitions<>(\"topic\",ImmutableMap.of(0,0L,2,0L)),new SeekableStreamPartitions<>(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,2,Long.MAX_VALUE)),now,maxi)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
73 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpoints = new TreeMap<>()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "supervisor.runInternal()@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(runningTaskId)).andReturn(Futures.immediateFuture(Status.READING))@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(iHaveFailed.getId())).andReturn(Optional.of(TaskStatus.failure(iHaveFailed.getId())))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TreeMap<Integer,Map<Integer,Long>> checkpoints = new TreeMap<>()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "KafkaIndexTask iHaveFailed = (KafkaIndexTask)existingTasks.get(0)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "KinesisIndexTask iHaveFailed = (KinesisIndexTask)existingTasks.get(0)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "String runningTaskId = captured.getValue().getId()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "replayAll()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(iHaveFailed.getIOConfig().getBaseSequenceName(),((KafkaIndexTask)aNewTaskCapture.getValue()).getIOConfig().getBaseSequenceName())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "verifyAll()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.reset(taskStorage)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertEquals(now,((KafkaIndexTask)aNewTaskCapture.getValue()).getIOConfig().getMinimumMessageTime().get())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(existingTasks).anyTimes()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(0,0L,2,0L))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "EasyMock.replay(taskStorage)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "expect(supervisorRecordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Capture<Task> captured = Capture.newInstance()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(captured.getValue())).anyTimes()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
91 [style = filled, label = "expectLastCall().anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "EasyMock.reset(taskStorage)@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Capture<Task> captured = Capture.newInstance()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "supervisorRecordSupplier.seekToLatest(anyObject())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(2)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "DateTime now = DateTimes.nowUtc()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "supervisor.runInternal()@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(Status.READING))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "supervisorRecordSupplier.assign(anyObject())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Task id1 = createKafkaIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"topic\",ImmutableMap.of(0,0L,2,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,2,Long.MAX_VALUE)),now,maxi)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "expect(taskStorage.getTask(iHaveFailed.getId())).andReturn(Optional.of((Task)iHaveFailed)).anyTimes()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expect(taskQueue.add(capture(aNewTaskCapture))).andReturn(true)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "expectLastCall().anyTimes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1H\",null,null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "Assert.assertEquals(now,((KinesisIndexTask)aNewTaskCapture.getValue()).getIOConfig().getMinimumMessageTime().get())@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "replay(taskStorage)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "replay(taskQueue)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(Status.READING))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "supervisor.runInternal()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.reset(taskQueue)@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "supervisor.runInternal()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(runningTaskId)).andReturn(Futures.immediateFuture(now)).anyTimes()@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "supervisor.start()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "verifyAll()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testRequeueAdoptedTaskWhenFailed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "EasyMock.expect(taskStorage.getTask(iHaveFailed.getId())).andReturn(Optional.of((Task)iHaveFailed)).anyTimes()@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(2)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EasyMock.reset(taskClient)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "EasyMock.replay(taskQueue)@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertEquals(now,((KafkaIndexTask)captured.getValue()).getIOConfig().getMinimumMessageTime().get())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(maxi,((KafkaIndexTask)aNewTaskCapture.getValue()).getIOConfig().getMaximumMessageTime().get())@@@53@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testRequeueAdoptedTaskWhenFailed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "verifyAll()@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Assert.assertNotEquals(iHaveFailed.getId(),aNewTaskCapture.getValue().getId())@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(2)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertNotEquals(iHaveFailed.getId(),aNewTaskCapture.getValue().getId())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Capture<Task> aNewTaskCapture = Capture.newInstance()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(existingTasks).anyTimes()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
98 [style = filled, label = "testRequeueAdoptedTaskWhenFailed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
93 [style = filled, label = "expectLastCall().anyTimes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
100 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(runningTaskId)).andReturn(Optional.of(TaskStatus.running(runningTaskId))).anyTimes()@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<Task> existingTasks = ImmutableList.of(id1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "expect(supervisorRecordSupplier.getLatestSequenceNumber(anyObject())).andReturn(\"100\").anyTimes()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
94 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "EasyMock.expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(aNewTaskCapture))).andReturn(true)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "verifyAll()@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "List<Task> existingTasks = ImmutableList.of(id1)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "Assert.assertEquals(maxi,((KinesisIndexTask)aNewTaskCapture.getValue()).getIOConfig().getMaximumMessageTime().get())@@@62@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46->53 [style = solid, label="now"];
70->66 [style = bold, label=""];
72->86 [style = bold, label=""];
3->24 [style = bold, label=""];
11->87 [style = solid, label="maxi"];
46->5 [style = bold, label=""];
2->6 [style = bold, label=""];
18->30 [style = bold, label=""];
85->54 [style = bold, label=""];
45->31 [style = bold, label=""];
10->87 [style = solid, label="now"];
99->61 [style = bold, label=""];
38->64 [style = dashed, label="0"];
22->79 [style = dashed, label="0"];
5->53 [style = solid, label="maxi"];
34->68 [style = bold, label=""];
23->28 [style = bold, label=""];
74->37 [style = bold, label=""];
83->63 [style = bold, label=""];
38->49 [style = bold, label=""];
1->78 [style = bold, label=""];
0->25 [style = bold, label=""];
33->42 [style = bold, label=""];
20->48 [style = bold, label=""];
25->67 [style = dashed, label="0"];
26->15 [style = bold, label=""];
79->100 [style = bold, label=""];
64->92 [style = bold, label=""];
48->10 [style = bold, label=""];
7->83 [style = dashed, label="0"];
89->91 [style = bold, label=""];
8->4 [style = bold, label=""];
100->88 [style = bold, label=""];
71->65 [style = bold, label=""];
48->58 [style = dashed, label="0"];
35->7 [style = bold, label=""];
22->13 [style = bold, label=""];
51->74 [style = dashed, label="0"];
45->90 [style = dashed, label="0"];
10->11 [style = bold, label=""];
37->96 [style = dashed, label="0"];
5->32 [style = solid, label="maxi"];
36->9 [style = bold, label=""];
5->39 [style = bold, label=""];
9->2 [style = bold, label=""];
10->90 [style = solid, label="now"];
96->72 [style = bold, label=""];
43->51 [style = bold, label=""];
39->87 [style = dashed, label="0"];
39->8 [style = bold, label=""];
68->70 [style = bold, label=""];
50->77 [style = dashed, label="0"];
94->75 [style = bold, label=""];
0->54 [style = dashed, label="0"];
73->69 [style = bold, label=""];
27->16 [style = bold, label=""];
39->8 [style = solid, label="id1"];
12->37 [style = bold, label=""];
27->90 [style = bold, label=""];
49->32 [style = bold, label=""];
91->60 [style = bold, label=""];
13->12 [style = bold, label=""];
98->34 [style = bold, label=""];
42->94 [style = dashed, label="0"];
78->94 [style = bold, label=""];
25->26 [style = bold, label=""];
17->85 [style = dashed, label="0"];
5->53 [style = bold, label=""];
35->69 [style = dashed, label="0"];
33->78 [style = dashed, label="0"];
29->40 [style = bold, label=""];
41->46 [style = bold, label=""];
28->86 [style = dashed, label="0"];
5->39 [style = solid, label="maxi"];
39->53 [style = dashed, label="0"];
7->44 [style = bold, label=""];
12->88 [style = dashed, label="0"];
82->89 [style = bold, label=""];
47->1 [style = bold, label=""];
84->55 [style = bold, label=""];
90->22 [style = bold, label=""];
87->47 [style = solid, label="id1"];
46->49 [style = solid, label="now"];
95->76 [style = bold, label=""];
21->34 [style = bold, label=""];
55->93 [style = bold, label=""];
14->19 [style = bold, label=""];
13->74 [style = bold, label=""];
92->81 [style = bold, label=""];
60->84 [style = bold, label=""];
27->56 [style = dashed, label="0"];
16->59 [style = dashed, label="0"];
4->33 [style = bold, label=""];
14->97 [style = dashed, label="0"];
63->24 [style = bold, label=""];
53->8 [style = solid, label="id1"];
62->80 [style = bold, label=""];
10->99 [style = dashed, label="0"];
17->0 [style = bold, label=""];
54->67 [style = bold, label=""];
40->57 [style = dashed, label="0"];
40->27 [style = bold, label=""];
66->82 [style = bold, label=""];
19->35 [style = bold, label=""];
69->83 [style = bold, label=""];
31->43 [style = bold, label=""];
11->50 [style = bold, label=""];
28->17 [style = bold, label=""];
53->8 [style = bold, label=""];
49->92 [style = dashed, label="0"];
87->47 [style = bold, label=""];
28->57 [style = bold, label=""];
10->92 [style = solid, label="now"];
56->59 [style = bold, label=""];
26->62 [style = dashed, label="0"];
19->73 [style = dashed, label="0"];
59->79 [style = bold, label=""];
76->97 [style = bold, label=""];
97->73 [style = bold, label=""];
30->38 [style = bold, label=""];
58->99 [style = bold, label=""];
44->36 [style = bold, label=""];
77->95 [style = bold, label=""];
80->71 [style = bold, label=""];
65->64 [style = bold, label=""];
47->95 [style = dashed, label="0"];
42->20 [style = bold, label=""];
11->87 [style = bold, label=""];
44->63 [style = dashed, label="0"];
20->75 [style = dashed, label="0"];
34->41 [style = bold, label=""];
24->29 [style = bold, label=""];
52->34 [style = bold, label=""];
16->22 [style = bold, label=""];
37->23 [style = bold, label=""];
93->10 [style = bold, label=""];
15->18 [style = bold, label=""];
46->39 [style = solid, label="now"];
46->45 [style = solid, label="now"];
75->58 [style = bold, label=""];
67->62 [style = bold, label=""];
61->77 [style = bold, label=""];
57->56 [style = bold, label=""];
51->3 [style = bold, label=""];
13->100 [style = dashed, label="0"];
86->85 [style = bold, label=""];
50->47 [style = bold, label=""];
1->76 [style = dashed, label="0"];
11->61 [style = dashed, label="0"];
23->72 [style = dashed, label="0"];
1->14 [style = bold, label=""];
88->96 [style = bold, label=""];
32->81 [style = dashed, label="0"];
6->45 [style = bold, label=""];
11->81 [style = solid, label="maxi"];
}
