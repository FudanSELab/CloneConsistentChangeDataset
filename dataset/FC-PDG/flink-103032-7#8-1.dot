digraph {
1 [style = filled, label = "assertEquals(Boundedness.BOUNDED,bounded.getBoundedness())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(Boundedness.CONTINUOUS_UNBOUNDED,unbounded.getBoundedness())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,unbounded)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testBoundedDetection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testBoundedDetection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final SourceTransformation<Integer> unbounded = getSourceTransformation(\"Unbounded Source\",Boundedness.CONTINUOUS_UNBOUNDED)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final SourceTransformation<Integer,?,?> bounded = getSourceTransformation(\"Bounded Source\",Boundedness.BOUNDED)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testUnboundedDetection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,ScheduleMode.EAGER,true,false))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final SourceTransformation<Integer> bounded = getSourceTransformation(\"Bounded Source\",Boundedness.BOUNDED)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED,ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST,false,false))@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,bounded)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
8->10 [style = bold, label=""];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
7->10 [style = solid, label="unbounded"];
10->9 [style = solid, label="graph"];
1->8 [style = dashed, label="0"];
0->5 [style = dashed, label="0"];
0->7 [style = dashed, label="0"];
7->8 [style = bold, label=""];
3->9 [style = dashed, label="0"];
0->2 [style = solid, label="bounded"];
0->1 [style = bold, label=""];
11->7 [style = bold, label=""];
5->2 [style = solid, label="bounded"];
2->3 [style = bold, label=""];
4->0 [style = bold, label=""];
2->10 [style = dashed, label="0"];
2->3 [style = solid, label="graph"];
}
