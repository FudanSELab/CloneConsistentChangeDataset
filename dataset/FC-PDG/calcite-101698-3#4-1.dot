digraph {
9 [style = filled, label = "return new Predicate1<String>(){public boolean apply(String v1){return regex.matcher(v1).matches()}}@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "matcher['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final Pat pattern@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "namedMatcher['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return null@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "return new Predicate1<T>(){public boolean apply(T v1){return regex.matcher(v1.getName()).matches()}}@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "final Pattern regex = likeToRegex(pattern)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "pattern.s == null || pattern.s.equals(\"%\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "namedMatcher['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final Pat pattern@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return Functions.truePredicate1()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
1->5 [style = bold, label=""];
5->7 [style = bold, label=""];
10->8 [style = dotted, label="true"];
6->1 [style = bold, label=""];
8->5 [style = solid, label="pattern"];
3->5 [style = bold, label=""];
4->1 [style = bold, label=""];
6->2 [style = dotted, label="true"];
0->9 [style = dashed, label="0"];
5->0 [style = bold, label=""];
5->9 [style = bold, label=""];
10->1 [style = bold, label=""];
2->5 [style = solid, label="pattern"];
0->7 [style = dashed, label="0"];
2->8 [style = dashed, label="0"];
4->2 [style = dotted, label="true"];
1->3 [style = dotted, label="true"];
}
