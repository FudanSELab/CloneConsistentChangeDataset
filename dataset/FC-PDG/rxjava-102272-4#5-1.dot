digraph {
8 [style = filled, label = "final TestSubscriberEx<Integer> ts = new TestSubscriberEx<>()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "undeliverableUponCancel['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "{RxJavaPlugins.reset()}@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "to.assertEmpty()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Observable.just(1).map(new Function<Integer,Integer>(){@Override public Integer apply(Integer v){to.dispose()throw new TestException()}}).switchMap(new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer v){return Observable.just(v).hide()}}).subscribe(to)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Flowable.just(1).map(new Function<Integer,Integer>(){@Override public Integer apply(Integer v){ts.cancel()throw new TestException()}}).switchMap(new Function<Integer,Publisher<Integer>>(){@Override public Publisher<Integer> apply(Integer v){return Flowable.just(v).hide()}}).subscribe(ts)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Throwable> errors = TestHelper.trackPluginErrors()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "undeliverableUponCancel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final TestObserverEx<Integer> to = new TestObserverEx<Integer>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TestHelper.assertUndeliverable(errors,0,)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ts.assertEmpty()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "undeliverableUponCancel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2->1 [style = bold, label=""];
1->3 [style = bold, label=""];
0->11 [style = bold, label=""];
1->9 [style = dashed, label="0"];
7->0 [style = bold, label=""];
6->0 [style = bold, label=""];
8->2 [style = solid, label="ts"];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
2->10 [style = dashed, label="0"];
5->2 [style = bold, label=""];
8->2 [style = bold, label=""];
5->11 [style = dashed, label="0"];
11->10 [style = bold, label=""];
0->8 [style = bold, label=""];
5->8 [style = dashed, label="0"];
9->3 [style = bold, label=""];
10->9 [style = bold, label=""];
5->2 [style = solid, label="ts"];
0->3 [style = solid, label="errors"];
11->10 [style = solid, label="to"];
0->5 [style = bold, label=""];
}
