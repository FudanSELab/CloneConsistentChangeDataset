digraph {
14 [style = filled, label = "doAnswer(new Answer<TriggerResult>(){@Override public TriggerResult answer(InvocationOnMock invocation){Trigger.TriggerContext context = (Trigger.TriggerContext)invocation.getArguments()(3(timeAdaptor.registerTimer(context,0L)return TriggerResult.PURGE}}).when(mockTrigger).onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(1,timeAdaptor.numTimers(testHarness))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,List<Integer>> testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(1,timeAdaptor.numTimers(testHarness))@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testHarness.open()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(0,testHarness.extractOutputStreamRecords().size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "verify(mockWindowFunction,never()).apply(anyInt(),anyTimeWindow(),anyIntIterable(),WindowOperatorContractTest.anyCollector())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MergingWindowAssigner<Integer,TimeWindow> mockAssigner = mockMergingAssigner()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "timeAdaptor.shouldContinueOnTime(mockTrigger)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "timeAdaptor.advanceTime(testHarness,Long.MIN_VALUE)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "testNoTimerFiringForGarbageCollectedMergingWindow['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "testNoTimerFiringForGarbageCollectedMergingWindow['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "timeAdaptor.advanceTime(testHarness,0L)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "timeAdaptor.advanceTime(testHarness,4L)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "timeAdaptor.verifyTriggerCallback(mockTrigger,times(1),null,null)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "@SuppressWarnings(\"unchecked\") InternalWindowFunction<Iterable<Integer>,List<Integer>,Integer,TimeWindow> mockWindowFunction = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "WindowAssigner<Integer,TimeWindow> mockAssigner = mockTimeWindowAssigner()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "timeAdaptor.verifyTriggerCallback(mockTrigger,times(1),null,null)@@@32@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Trigger<Integer,TimeWindow> mockTrigger = mockTrigger()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "timeAdaptor.verifyTriggerCallback(mockTrigger,never(),null,null)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(2,timeAdaptor.numTimers(testHarness))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testNoTimerFiringForPurgedWindow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(2,testHarness.numKeyedStateEntries())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "timeAdaptor.setIsEventTime(mockAssigner)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(2,4)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "verify(mockTrigger,times(1)).clear(anyTimeWindow(),anyTriggerContext())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(2,timeAdaptor.numTimers(testHarness))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "verify(mockWindowFunction,never()).apply(anyInt(),anyTimeWindow(),anyIntIterable(),WindowOperatorContractTest.anyCollector())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->13 [style = solid, label="mockTrigger"];
16->17 [style = solid, label="testHarness"];
17->10 [style = bold, label=""];
15->16 [style = solid, label="mockWindowFunction"];
12->27 [style = solid, label="mockTrigger"];
0->13 [style = bold, label=""];
27->0 [style = bold, label=""];
26->25 [style = dotted, label="true"];
33->21 [style = solid, label="mockAssigner"];
6->23 [style = bold, label=""];
8->21 [style = solid, label="mockAssigner"];
16->24 [style = bold, label=""];
2->3 [style = bold, label=""];
8->33 [style = dashed, label="0"];
20->0 [style = bold, label=""];
16->1 [style = solid, label="testHarness"];
12->15 [style = bold, label=""];
12->16 [style = solid, label="mockTrigger"];
30->27 [style = bold, label=""];
0->29 [style = bold, label=""];
16->29 [style = solid, label="testHarness"];
26->8 [style = bold, label=""];
5->25 [style = dashed, label="0"];
7->31 [style = bold, label=""];
16->30 [style = solid, label="testHarness"];
16->18 [style = solid, label="testHarness"];
15->16 [style = bold, label=""];
9->7 [style = bold, label=""];
16->0 [style = solid, label="testHarness"];
19->8 [style = bold, label=""];
12->3 [style = solid, label="mockTrigger"];
16->2 [style = solid, label="testHarness"];
1->9 [style = bold, label=""];
2->31 [style = dashed, label="0"];
21->12 [style = bold, label=""];
5->32 [style = dashed, label="0"];
3->20 [style = bold, label=""];
28->32 [style = dotted, label="true"];
18->4 [style = bold, label=""];
28->33 [style = bold, label=""];
7->2 [style = bold, label=""];
24->17 [style = bold, label=""];
31->30 [style = bold, label=""];
8->16 [style = solid, label="mockAssigner"];
0->29 [style = dashed, label="0"];
11->22 [style = bold, label=""];
19->5 [style = dotted, label="true"];
8->21 [style = bold, label=""];
33->16 [style = solid, label="mockAssigner"];
4->1 [style = bold, label=""];
22->14 [style = bold, label=""];
16->31 [style = solid, label="testHarness"];
33->21 [style = bold, label=""];
6->7 [style = bold, label=""];
14->6 [style = bold, label=""];
23->18 [style = bold, label=""];
10->11 [style = bold, label=""];
12->4 [style = solid, label="mockTrigger"];
}
