digraph {
9 [style = filled, label = "expected.put(3,\"ccc\")@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expected.put(4,\"dddd\")@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expected.put(2,\"bb\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "toMapWithError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "mapped.subscribe(singleObserver)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expected.put(1,\"a\")@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Flowable<String> source = Flowable.just(\"a\",\"bb\",\"ccc\",\"dddd\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Map<Integer,String> expected = new HashMap<Integer,String>()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "toMapWithError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Observable<String> source = Observable.just(\"a\",\"bb\",\"ccc\",\"dddd\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "verify(singleObserver,never()).onSuccess(expected)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "toMapWithError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Single<Map<Integer,String>> mapped = source.toMap(lengthFuncErr)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(singleObserver,times(1)).onError(any())@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Function<String,Integer> lengthFuncErr = new Function<String,Integer>(){@Override public Integer apply(String t1){if (\"bb\".equals(t1)) {throw new RuntimeException(\"Forced Failure\")}return t1.length()}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Map<Integer,String> expected = new HashMap<>()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
4->8 [style = solid, label="expected"];
1->8 [style = bold, label=""];
9->11 [style = bold, label=""];
15->14 [style = bold, label=""];
11->1 [style = bold, label=""];
6->0 [style = bold, label=""];
4->2 [style = bold, label=""];
6->14 [style = dashed, label="0"];
13->8 [style = solid, label="expected"];
12->6 [style = bold, label=""];
3->4 [style = bold, label=""];
10->6 [style = bold, label=""];
7->9 [style = bold, label=""];
8->5 [style = bold, label=""];
14->0 [style = bold, label=""];
0->3 [style = solid, label="lengthFuncErr"];
3->13 [style = bold, label=""];
2->7 [style = bold, label=""];
4->13 [style = dashed, label="0"];
13->2 [style = bold, label=""];
}
