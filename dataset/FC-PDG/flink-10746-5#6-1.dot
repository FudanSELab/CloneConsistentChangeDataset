digraph {
5 [style = filled, label = "testMultipleSplitsWithSeparatedFinishedRecord['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "InputStatus status = reader.pollNext(new TestingReaderOutput<>())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "reader.notifyNoMoreSplits()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "status == InputStatus.END_OF_INPUT@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<MockSourceSplit> splits = Arrays.asList(getSplit(0,10,Boundedness.BOUNDED),getSplit(1,10,Boundedness.BOUNDED))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "MockSourceReader reader = new MockSourceReader(elementsQueue,null,getConfig(),new TestingReaderContext())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "reader.addSplits(splits)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "MockSourceReader reader = new MockSourceReader(elementsQueue,null,getConfig(),null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "MockSplitReader mockSplitReader = MockSplitReader.newBuilder().setNumRecordsPerSplitPerFetch(2).setBlockingFetch(true).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testMultipleSplitsWithSeparatedFinishedRecord['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "true@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "reader.isAvailable().get()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "FutureCompletingBlockingQueue<RecordsWithSplitIds<int((>> elementsQueue = new FutureCompletingBlockingQueue<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "createReader['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "MockSplitReader mockSplitReader = MockSplitReader.newBuilder().setNumRecordsPerSplitPerFetch(2).setSeparatedFinishedRecord(true).setBlockingFetch(false).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "status == InputStatus.NOTHING_AVAILABLE@@@15@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "reader.start()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return new MockSourceReader(elementsQueue,null,getConfig(),null)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4->6 [style = dotted, label="true"];
10->15 [style = dashed, label="0"];
8->6 [style = solid, label="status"];
6->3 [style = bold, label=""];
0->7 [style = solid, label="splits"];
7->11 [style = bold, label=""];
5->9 [style = bold, label=""];
8->2 [style = solid, label="status"];
2->6 [style = bold, label=""];
9->13 [style = solid, label="elementsQueue"];
11->4 [style = bold, label=""];
4->8 [style = dotted, label="true"];
12->17 [style = dashed, label="0"];
1->0 [style = bold, label=""];
9->10 [style = bold, label=""];
12->1 [style = bold, label=""];
3->4 [style = bold, label=""];
13->1 [style = bold, label=""];
4->2 [style = dotted, label="true"];
0->7 [style = bold, label=""];
6->4 [style = bold, label=""];
15->17 [style = bold, label=""];
8->2 [style = bold, label=""];
10->13 [style = bold, label=""];
10->12 [style = bold, label=""];
9->15 [style = bold, label=""];
4->8 [style = bold, label=""];
14->9 [style = bold, label=""];
12->13 [style = dashed, label="0"];
6->3 [style = dotted, label="true"];
9->17 [style = solid, label="elementsQueue"];
9->12 [style = solid, label="elementsQueue"];
16->9 [style = bold, label=""];
}
