digraph {
23 [style = filled, label = "byte(( hash = BasicAuthUtils.hashPassword(password,salt,iterations)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertNull(cachedUserMap.get(\"druid\"))@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "response = resource.getUser(req,AUTHENTICATOR_NAME,\"druid\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "int iterations = BasicAuthUtils.DEFAULT_KEY_ITERATIONS@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertNotNull(cachedUserMap)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testCreateDeleteUser['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "response = resource.getUser(req,AUTHENTICATOR_NAME,\"druid\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(BasicAuthUtils.SALT_LENGTH,salt.length)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(errorMapWithMsg(\"User (druid( does not exist.\"),response.getEntity())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(200,response.getStatus())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "char(( password = \"HELLO\".toCharArray()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(400,response.getStatus())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(400,response.getStatus())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testHashPassword['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(200,response.getStatus())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(expectedUser,response.getEntity())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "response = resource.deleteUser(req,AUTHENTICATOR_NAME,\"druid\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "BasicAuthenticatorUser expectedUser = new BasicAuthenticatorUser(\"druid\",null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testCreateDeleteUser['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(200,response.getStatus())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(errorMapWithMsg(\"User (druid( does not exist.\"),response.getEntity())@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "response = resource.getCachedSerializedUserMap(req,AUTHENTICATOR_NAME)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(BasicAuthUtils.KEY_LENGTH / 8,hash.length)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "response = resource.deleteUser(req,AUTHENTICATOR_NAME,\"druid\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Response response = resource.createUser(req,AUTHENTICATOR_NAME,\"druid\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(response.getEntity() instanceof byte(()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Map<String,BasicAuthenticatorUser> cachedUserMap = BasicAuthUtils.deserializeAuthenticatorUserMap(objectMapper,(byte(()response.getEntity())@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "byte(( salt = BasicAuthUtils.generateSalt()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(200,response.getStatus())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->23 [style = bold, label=""];
24->23 [style = solid, label="iterations"];
26->24 [style = bold, label=""];
3->11 [style = bold, label=""];
18->20 [style = bold, label=""];
20->6 [style = bold, label=""];
16->18 [style = solid, label="cachedUserMap"];
27->28 [style = bold, label=""];
4->28 [style = dashed, label="0"];
13->0 [style = bold, label=""];
0->7 [style = bold, label=""];
16->18 [style = bold, label=""];
5->1 [style = bold, label=""];
4->5 [style = bold, label=""];
15->19 [style = bold, label=""];
26->23 [style = solid, label="password"];
1->6 [style = bold, label=""];
6->8 [style = bold, label=""];
11->14 [style = bold, label=""];
2->3 [style = bold, label=""];
12->9 [style = bold, label=""];
19->16 [style = bold, label=""];
8->2 [style = bold, label=""];
22->26 [style = bold, label=""];
7->4 [style = solid, label="expectedUser"];
10->13 [style = bold, label=""];
17->15 [style = bold, label=""];
7->4 [style = bold, label=""];
1->17 [style = bold, label=""];
24->25 [style = bold, label=""];
21->9 [style = bold, label=""];
25->23 [style = solid, label="salt"];
9->10 [style = bold, label=""];
23->27 [style = bold, label=""];
}
