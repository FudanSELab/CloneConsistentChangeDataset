digraph {
4 [style = filled, label = "context.pollUntilRequest()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "FetchResponseData response = context.divergingFetchResponse(epoch,otherNodeId,2L,lastEpoch,1L)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "RaftClientTestContext context = new RaftClientTestContext.Builder(localId,voters).withElectedLeader(epoch,otherNodeId).appendToLog(lastEpoch,singletonList(\"foo\")).build()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testInitializeAsFollowerNonEmptyLog['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int otherNodeId = 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "context.assertElectedLeader(epoch,otherNodeId)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "context.assertSentFetchRequest(epoch,2L,lastEpoch)@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "context.client.poll()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(3L,context.log.endOffset().offset)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testInitializeAsFollowerNonEmptyLog['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "RaftClientTestContext context = new RaftClientTestContext.Builder(localId,voters).withElectedLeader(epoch,otherNodeId).appendToLog(0L,lastEpoch,Arrays.asList(\"foo\",\"bar\")).appendToLog(2L,lastEpoch,Arrays.asList(\"baz\")).build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "context.deliverResponse(correlationId,otherNodeId,response)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "int correlationId = context.assertSentFetchRequest(epoch,3L,lastEpoch)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "RaftClientTestContext context = new RaftClientTestContext.Builder(localId,voters).withElectedLeader(epoch,otherNodeId).appendToLog(0L,lastEpoch,singletonList(\"foo\")).build()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Set<Integer> voters = Utils.mkSet(localId,otherNodeId)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testFollowerLogReconciliation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "context.assertSentFetchRequest(epoch,1L,lastEpoch)@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int localId = 0@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "context.client.poll()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int lastEpoch = 3@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int epoch = 5@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(2L,context.log.endOffset().offset)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
4->9 [style = bold, label=""];
1->9 [style = solid, label="epoch"];
0->6 [style = solid, label="otherNodeId"];
20->17 [style = bold, label=""];
19->13 [style = solid, label="correlationId"];
16->8 [style = bold, label=""];
19->12 [style = bold, label=""];
2->6 [style = bold, label=""];
7->16 [style = dashed, label="0"];
4->19 [style = bold, label=""];
8->14 [style = bold, label=""];
2->21 [style = solid, label="lastEpoch"];
2->9 [style = solid, label="lastEpoch"];
1->12 [style = solid, label="epoch"];
7->8 [style = bold, label=""];
15->3 [style = bold, label=""];
3->0 [style = bold, label=""];
9->19 [style = dashed, label="0"];
12->13 [style = bold, label=""];
0->13 [style = solid, label="otherNodeId"];
1->8 [style = solid, label="epoch"];
1->21 [style = solid, label="epoch"];
10->8 [style = bold, label=""];
11->3 [style = bold, label=""];
6->16 [style = bold, label=""];
0->1 [style = bold, label=""];
0->8 [style = solid, label="otherNodeId"];
6->10 [style = bold, label=""];
3->6 [style = solid, label="localId"];
2->19 [style = solid, label="lastEpoch"];
1->19 [style = solid, label="epoch"];
7->10 [style = dashed, label="0"];
1->2 [style = bold, label=""];
8->4 [style = bold, label=""];
18->21 [style = bold, label=""];
6->7 [style = bold, label=""];
12->13 [style = solid, label="response"];
17->18 [style = bold, label=""];
0->12 [style = solid, label="otherNodeId"];
14->4 [style = bold, label=""];
13->20 [style = bold, label=""];
2->12 [style = solid, label="lastEpoch"];
}
