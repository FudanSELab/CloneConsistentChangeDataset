digraph {
19 [style = filled, label = "PostgreSQLComCloseExecutor closeExecutor = new PostgreSQLComCloseExecutor(packet,backendConnection)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(actualPackets.next(),is(instanceOf()))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "verify(queryResponseHeader).getQueryHeaders()@@@11@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Collection<DatabasePacket<?>> actual = closeExecutor.execute()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "QueryResponseHeader queryResponseHeader = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "when(packet.getType()).thenReturn(PostgreSQLComClosePacket.Type.PREPARED_STATEMENT)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "when(packet.getName()).thenReturn(\"S_1\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.QUERY))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(actual.size(),is(1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "setMockFieldIntoExecutor(executor)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket,backendConnection)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@8@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertThat(actual.size(),is(2))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertExecuteClosePreparedStatement['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "verify(queryResponseHeader).getQueryHeaders()@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "when(databaseCommunicationEngine.execute()).thenReturn(queryResponseHeader)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNull(executor.getResponseType())@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(actualPackets.next(),is(instanceOf()))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Iterator<DatabasePacket<?>> actualPackets = actual.iterator()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Collection<DatabasePacket<?>> actual = executor.execute()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->19 [style = bold, label=""];
14->7 [style = bold, label=""];
6->5 [style = dashed, label="0"];
11->12 [style = bold, label=""];
21->22 [style = bold, label=""];
2->17 [style = dashed, label="0"];
20->5 [style = bold, label=""];
10->11 [style = bold, label=""];
0->8 [style = bold, label=""];
17->20 [style = bold, label=""];
16->13 [style = bold, label=""];
8->2 [style = solid, label="executor"];
8->19 [style = dashed, label="0"];
8->2 [style = bold, label=""];
7->0 [style = solid, label="queryResponseHeader"];
19->17 [style = bold, label=""];
7->0 [style = bold, label=""];
2->1 [style = bold, label=""];
6->3 [style = bold, label=""];
15->16 [style = bold, label=""];
1->15 [style = bold, label=""];
18->21 [style = bold, label=""];
13->10 [style = bold, label=""];
0->22 [style = dashed, label="0"];
3->4 [style = bold, label=""];
5->15 [style = dashed, label="0"];
5->6 [style = bold, label=""];
1->5 [style = bold, label=""];
9->7 [style = bold, label=""];
}
