digraph {
0 [style = filled, label = "final RelNode rel = mockCountOver(\"EMP\",ImmutableList.of(\"DEPTNO\"),ImmutableList.of())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testOverWithoutOrderKey['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final RelBuilder builder = RelBuilder.create(config)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testUdf['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String relJson = RelOptUtil.dumpPlan(\"\",rel,SqlExplainFormat.JSON,SqlExplainLevel.EXPPLAN_ATTRIBUTES)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RelNode rel = builder.scan(\"EMP\").project(builder.call(new MockSqlOperatorTable.MyFunction(),builder.field(\"EMPNO\"))).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final String expected = \"\" + \"LogicalProject($f0=(MYFUN($0)()\" + \" LogicalTableScan(table=((scott, EMP(()\"@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(s,isLinux(expected))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String relJson = RelOptUtil.dumpPlan(\"\",rel,SqlExplainFormat.JSON,SqlExplainLevel.EXPPLAN_ATTRIBUTES)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String s = deserializeAndDumpToTextFormat(getSchema(rel),relJson)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final FrameworkConfig config = RelBuilderTest.config().build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "String s = deserializeAndDumpToTextFormat(getSchema(rel),relJson)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testOverWithoutOrderKey['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
9->8 [style = solid, label="config"];
1->5 [style = solid, label="relJson"];
7->1 [style = bold, label=""];
4->2 [style = solid, label="relJson"];
2->1 [style = bold, label=""];
12->11 [style = bold, label=""];
6->0 [style = bold, label=""];
4->2 [style = bold, label=""];
9->8 [style = bold, label=""];
5->11 [style = solid, label="s"];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
12->11 [style = solid, label="expected"];
0->4 [style = solid, label="rel"];
7->1 [style = solid, label="rel"];
1->12 [style = dashed, label="0"];
2->5 [style = solid, label="s"];
7->5 [style = solid, label="rel"];
5->12 [style = bold, label=""];
0->4 [style = bold, label=""];
1->5 [style = solid, label="expected"];
0->2 [style = solid, label="rel"];
10->9 [style = bold, label=""];
}
