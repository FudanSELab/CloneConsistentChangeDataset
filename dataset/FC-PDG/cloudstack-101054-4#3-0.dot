digraph {
34 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setReason(nullable())@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setSourcePortEnd(Mockito.anyInt())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setSourcePortStart(Mockito.anyInt())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setNumber(nullable())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setIcmpCode(nullable())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setIcmpType(Mockito.anyInt())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.getSourcePortEnd()).thenReturn(null)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.isPartialUpgrade()).thenReturn(false)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setDisplay(Mockito.anyBoolean())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setAction(Mockito.any())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setReason(Mockito.anyString())@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "networkAclServiceImpl.transferDataToNetworkAclRulePojo(updateNetworkACLItemCmdMock,networkAclItemVoMock,networkAclMock)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setSourcePortEnd(Mockito.anyInt())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.getCustomId()).thenReturn(null)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Mockito.verify(networkAclServiceImpl,Mockito.times(1)).validateAndCreateNetworkAclRuleAction(Mockito.anyString())@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setSourcePortEnd(nullable())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setTrafficType(Mockito.any())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.getNumber()).thenReturn(null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.isDisplay()).thenReturn(false)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setAction(nullable())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setIcmpType(nullable())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setReason(Mockito.anyString())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setTrafficType(nullable())@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setAction(Mockito.any())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setUuid(nullable())@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setSourceCidrList(nullable())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.getProtocol()).thenReturn(null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.getAction()).thenReturn(null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.getSourceCidrList()).thenReturn(null)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setIcmpCode(Mockito.anyInt())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Mockito.when(networkAclItemVoMock.isDisplay()).thenReturn(false)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setDisplay(nullable())@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.getIcmpCode()).thenReturn(null)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setNumber(Mockito.anyInt())@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setIcmpType(Mockito.anyInt())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setIcmpCode(Mockito.anyInt())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setProtocol(Mockito.anyString())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.getTrafficType()).thenReturn(null)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setSourcePortStart(Mockito.anyInt())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.isPartialUpgrade()).thenReturn(true)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setTrafficType(Mockito.any())@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setUuid(Mockito.anyString())@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setSourcePortStart(nullable())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setDisplay(Mockito.anyBoolean())@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.getIcmpType()).thenReturn(null)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Mockito.verify(networkAclServiceImpl,Mockito.times(0)).validateAndCreateNetworkAclRuleAction(Mockito.anyString())@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setSourceCidrList(Mockito.anyListOf())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "Mockito.verify(networkAclServiceImpl,Mockito.times(1)).validateAndCreateNetworkAclRuleAction(nullable())@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setProtocol(Mockito.anyString())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(1)).setProtocol(nullable())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "Mockito.verify(networkAclItemVoMock,Mockito.times(0)).setSourceCidrList(Mockito.anyListOf())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.getSourcePortStart()).thenReturn(null)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Mockito.when(updateNetworkACLItemCmdMock.getReason()).thenReturn(null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->33 [style = dashed, label="0"];
32->35 [style = bold, label=""];
21->54 [style = dashed, label="0"];
23->25 [style = bold, label=""];
16->13 [style = bold, label=""];
43->50 [style = bold, label=""];
3->47 [style = dashed, label="0"];
1->43 [style = dashed, label="0"];
27->0 [style = bold, label=""];
3->24 [style = bold, label=""];
26->10 [style = bold, label=""];
9->2 [style = bold, label=""];
7->12 [style = bold, label=""];
52->9 [style = bold, label=""];
54->43 [style = bold, label=""];
55->49 [style = bold, label=""];
29->41 [style = bold, label=""];
20->49 [style = dashed, label="0"];
22->9 [style = bold, label=""];
18->11 [style = bold, label=""];
28->7 [style = bold, label=""];
1->18 [style = bold, label=""];
4->55 [style = dashed, label="0"];
4->39 [style = dashed, label="0"];
13->48 [style = dashed, label="0"];
5->28 [style = bold, label=""];
19->6 [style = bold, label=""];
46->52 [style = bold, label=""];
22->52 [style = dashed, label="0"];
45->44 [style = bold, label=""];
16->53 [style = dashed, label="0"];
42->40 [style = bold, label=""];
20->29 [style = dashed, label="0"];
26->51 [style = bold, label=""];
15->22 [style = bold, label=""];
49->53 [style = bold, label=""];
6->14 [style = bold, label=""];
48->54 [style = bold, label=""];
25->27 [style = bold, label=""];
21->31 [style = dashed, label="0"];
18->50 [style = dashed, label="0"];
17->44 [style = dashed, label="0"];
41->30 [style = bold, label=""];
16->41 [style = dashed, label="0"];
3->34 [style = dashed, label="0"];
8->42 [style = bold, label=""];
40->39 [style = bold, label=""];
20->16 [style = bold, label=""];
10->40 [style = dashed, label="0"];
14->23 [style = bold, label=""];
10->51 [style = dashed, label="0"];
50->11 [style = bold, label=""];
11->3 [style = bold, label=""];
38->37 [style = bold, label=""];
30->31 [style = bold, label=""];
51->55 [style = bold, label=""];
24->45 [style = dashed, label="0"];
31->33 [style = bold, label=""];
21->1 [style = bold, label=""];
24->17 [style = bold, label=""];
4->20 [style = bold, label=""];
0->8 [style = bold, label=""];
10->4 [style = bold, label=""];
11->47 [style = bold, label=""];
33->32 [style = bold, label=""];
47->45 [style = bold, label=""];
26->42 [style = dashed, label="0"];
17->37 [style = dashed, label="0"];
34->38 [style = bold, label=""];
12->19 [style = bold, label=""];
35->34 [style = bold, label=""];
13->21 [style = bold, label=""];
39->29 [style = bold, label=""];
13->30 [style = dashed, label="0"];
24->38 [style = dashed, label="0"];
11->35 [style = dashed, label="0"];
53->48 [style = bold, label=""];
2->5 [style = bold, label=""];
18->32 [style = dashed, label="0"];
8->26 [style = bold, label=""];
36->22 [style = bold, label=""];
}
