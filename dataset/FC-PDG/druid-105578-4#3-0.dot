digraph {
8 [style = filled, label = "compressionStrategiesAndByteOrders['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "return Iterables.transform(combinations,new Function<List,Object((>(){@Override public Object(( apply(List input){return new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ad7bb9}})@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Set<List<Object>> combinations = Sets.cartesianProduct(Sets.newHashSet(compressionStrategies),Sets.newHashSet(ByteOrder.BIG_ENDIAN,ByteOrder.LITTLE_ENDIAN))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Iterable<CompressionStrategy> compressionStrategies = Iterables.transform(CompressionStrategyTest.compressionStrategies(),null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Set<List<Object>> combinations = Sets.cartesianProduct(Sets.newHashSet(compressionStrategies),Sets.newHashSet(ByteOrder.BIG_ENDIAN,ByteOrder.LITTLE_ENDIAN))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "compressionStrategies['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Set<List<Object>> combinations = Sets.cartesianProduct(Sets.newHashSet(CompressionStrategy.noNoneValues()),Sets.newHashSet(ByteOrder.BIG_ENDIAN,ByteOrder.LITTLE_ENDIAN))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "return Iterables.transform(combinations,new Function<List,Object((>(){@Override public Object(( apply(List input){return new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ad7b5c}})@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "return Iterables.transform(combinations,(Function<List,Object((>)null)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "compressionStrategies['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final Iterable<CompressionStrategy> compressionStrategies = Iterables.transform(CompressionStrategyTest.compressionStrategies(),new Function<Object((,CompressionStrategy>(){@Override public CompressionStrategy apply(Object(( input){return (CompressionStrategy)input(0(}})@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8->9 [style = bold, label=""];
6->5 [style = bold, label=""];
2->5 [style = dashed, label="0"];
2->3 [style = solid, label="compressionStrategies"];
9->10 [style = bold, label=""];
1->7 [style = dashed, label="0"];
3->1 [style = solid, label="combinations"];
3->1 [style = bold, label=""];
9->10 [style = solid, label="combinations"];
4->7 [style = bold, label=""];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
5->4 [style = solid, label="compressionStrategies"];
4->7 [style = solid, label="combinations"];
}
