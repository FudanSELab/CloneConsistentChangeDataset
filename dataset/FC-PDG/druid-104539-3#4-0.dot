digraph {
19 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,segmentLoaderFactory,RETRY_POLICY_FACTORY)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "testRunWithDynamicPartitioning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(32768,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final CompactionTask compactionTask = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "runIndexTask()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(DEFAULT_COMPACTION_STATE,segments.get(i).getLastCompactionState())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i++@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Pair<TaskStatus,List<DataSegment>> resultPair = runTask(compactionTask)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testRunRegularIndexTaskWithIngestSegmentFirehose['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final List<DataSegment> segments = resultPair.rhs@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int i = 0@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(TEST_ROWS,rowsFromSegment)@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final Pair<TaskStatus,List<DataSegment>> resultPair = runTask(indexTask)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,new IndexTask.IndexIngestionSpec(new DataSchema(\"test\",getObjectMapper().convertValue(new StringInputRowParser(DEFAULT_PARSE_SPEC,null),),new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a11f5d,new UniformGranularitySpec(Granularities.HOUR,Granularities.MINUTE,null),null,getObjectMapper()),new IndexTask.IndexIOConfig(new IngestSegmentFirehoseFactory(DATA_SOURCE,Intervals.of(\"2014-01-01/2014-01-02\"),null,null,null,null,null,getIndexIO(),coordinatorClient,segmentLoaderFactory,RETRY_POLICY_FACTORY),false),IndexTaskTest.createTuningConfig(5000000,null,null,Long.MAX_VALUE,null,false,true)),null,AuthTestUtils.TEST_AUTHORIZER_MAPPER,new NoopChatHandlerProvider(),rowIngestionMetersFactory,appenderatorsManager)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,getObjectMapper(),AuthTestUtils.TEST_AUTHORIZER_MAPPER,new NoopChatHandlerProvider(),rowIngestionMetersFactory,indexingServiceClient,coordinatorClient,segmentLoaderFactory,RETRY_POLICY_FACTORY,appenderatorsManager)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "i < 3@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testRunWithDynamicPartitioning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11->3 [style = bold, label=""];
14->17 [style = bold, label=""];
3->10 [style = bold, label=""];
3->11 [style = solid, label="i"];
21->22 [style = solid, label="indexTask"];
13->15 [style = bold, label=""];
1->11 [style = solid, label="i"];
1->10 [style = solid, label="i"];
11->3 [style = solid, label="i"];
4->7 [style = bold, label=""];
3->15 [style = dotted, label="true"];
1->11 [style = dotted, label="true"];
6->4 [style = bold, label=""];
21->22 [style = bold, label=""];
15->20 [style = dotted, label="false"];
8->0 [style = bold, label=""];
0->1 [style = solid, label="i"];
16->19 [style = bold, label=""];
15->23 [style = bold, label=""];
9->3 [style = bold, label=""];
4->7 [style = solid, label="compactionTask"];
15->23 [style = dotted, label="true"];
23->11 [style = bold, label=""];
22->17 [style = bold, label=""];
0->3 [style = solid, label="i"];
0->1 [style = bold, label=""];
3->1 [style = bold, label=""];
1->11 [style = bold, label=""];
7->14 [style = bold, label=""];
3->10 [style = dotted, label="true"];
0->11 [style = solid, label="i"];
1->3 [style = solid, label="i"];
16->21 [style = bold, label=""];
11->10 [style = bold, label=""];
1->3 [style = bold, label=""];
1->3 [style = dotted, label="true"];
10->13 [style = bold, label=""];
24->16 [style = bold, label=""];
1->13 [style = dotted, label="true"];
18->16 [style = bold, label=""];
16->6 [style = bold, label=""];
3->11 [style = dotted, label="true"];
19->4 [style = bold, label=""];
15->3 [style = bold, label=""];
17->8 [style = bold, label=""];
15->20 [style = bold, label=""];
13->9 [style = dotted, label="false"];
11->10 [style = solid, label="i"];
13->15 [style = dotted, label="true"];
13->9 [style = bold, label=""];
2->12 [style = solid, label="rowsFromSegment"];
1->2 [style = bold, label=""];
5->16 [style = bold, label=""];
17->2 [style = solid, label="segments"];
1->10 [style = dotted, label="true"];
2->12 [style = bold, label=""];
3->13 [style = dotted, label="true"];
3->1 [style = solid, label="i"];
20->11 [style = bold, label=""];
}
