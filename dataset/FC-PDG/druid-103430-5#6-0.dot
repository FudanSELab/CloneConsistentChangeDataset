digraph {
25 [style = filled, label = "File segmentDir = tempFolder.newFolder()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(descriptorFile.exists())@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"type\",\"hdfs\",\"path\",indexUri),segment.getLoadSpec())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"type\",\"hdfs\",\"path\",indexUri),pushedSegment.getLoadSpec())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "File outDir = new File(StringUtils.format(\"%s/%s\",config.getStorageDirectory(),segmentPath))@@@41@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(segmentToPush,segment)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "segments(i( = new DataSegment(\"foo\",Intervals.of(\"2015/2016\"),\"0\",new HashMap<>(),new ArrayList<>(),new ArrayList<>(),new NumberedShardSpec(i,i),0,size)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "File tmp = new File(segmentDir,\"version.bin\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "int i = 0@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "File descriptorFile = new File(StringUtils.format(\"%s/%s/%d_descriptor.json\",storageDirectory,segmentPath,segment.getShardSpec().getPartitionNum()))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "final String scheme@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "Assert.assertEquals(segments(i(.getSize(),pushedSegment.getSize())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.fail(\"should not throw exception\")@@@47@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "IOException e@@@46@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertTrue(indexFile.exists())@@@35@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "testUsingSchemeForMultipleSegments['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "i++@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "pusher.push(segmentDir,segmentToPush,false)@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "DataSegment segment = pusher.push(segmentDir,segmentToPush,false)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(segments(i(,pushedSegment)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "config.setStorageDirectory(scheme != null? StringUtils.format(\"%s://%s\",scheme,storageDirectory.getAbsolutePath()): storageDirectory.getAbsolutePath())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "HdfsDataSegmentPusher pusher = new HdfsDataSegmentPusher(config,conf,new DefaultObjectMapper())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "outDir.setReadOnly()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final byte(( data = new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a955e9@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final File storageDirectory = tempFolder.newFolder()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "File indexFile = new File(StringUtils.format(\"%s/%s/%d_index.zip\",storageDirectory,segmentPath,pushedSegment.getShardSpec().getPartitionNum()))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final int numberOfSegments@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertTrue(indexFile.exists())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "HdfsDataSegmentPusherConfig config = new HdfsDataSegmentPusherConfig()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "DataSegment(( segments = new DataSegment((((@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testUsingSchemeForMultipleSegments['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testUsingScheme['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "outDir.setReadOnly()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int i = 0@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"type\",\"hdfs\",\"path\",indexUri),fromDescriptorFileDataSegment.getLoadSpec())@@@37@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "i < numberOfSegments@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(segments(i(,pushedSegment)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.fail(\"should not throw exception\")@@@42@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "indexFile = new File(StringUtils.format(\"%s/%s/%d_index.zip\",storageDirectory,segmentPath,pushedSegment.getShardSpec().getPartitionNum()))@@@34@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "File indexFile = new File(StringUtils.format(\"%s/%s/%d_index.zip\",storageDirectory,segmentPath,segment.getShardSpec().getPartitionNum()))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Assert.assertTrue(descriptorFile.exists())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "String indexUri = StringUtils.format(\"%s/%s/%d_index.zip\",FileSystem.newInstance(conf).makeQualified(new Path(config.getStorageDirectory())).toUri().toString(),pusher.getStorageDir(segments(i(,false),segments(i(.getShardSpec().getPartitionNum())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i++@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "final String scheme@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final DataSegment pushedSegment = pusher.push(segmentDir,segments(i(,false)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "pusher.push(segmentDir,segments(i(,false)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "File outDir = new File(StringUtils.format(\"%s/%s\",config.getStorageDirectory(),segmentPath))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "DataSegment segmentToPush = new DataSegment(\"foo\",Intervals.of(\"2015/2016\"),\"0\",new HashMap<>(),new ArrayList<>(),new ArrayList<>(),NoneShardSpec.instance(),0,size)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "String indexUri = StringUtils.format(\"%s/%s/%d_index.zip\",FileSystem.newInstance(conf).makeQualified(new Path(config.getStorageDirectory())).toUri().toString(),pusher.getStorageDir(segmentToPush,false),segmentToPush.getShardSpec().getPartitionNum())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final long size = data.length@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Configuration conf = new Configuration(true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "File outDir = new File(StringUtils.format(\"%s/%s\",config.getStorageDirectory(),segmentPath))@@@36@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(segments(i(.getSize(),pushedSegment.getSize())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Files.write(data,tmp)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "File descriptorFile = new File(StringUtils.format(\"%s/%s/%d_descriptor.json\",storageDirectory,segmentPath,pushedSegment.getShardSpec().getPartitionNum()))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "String segmentPath = pusher.getStorageDir(pushedSegment,false)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final String scheme@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "i < numberOfSegments@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "indexFile = new File(StringUtils.format(\"%s/%s/%d_index.zip\",storageDirectory,segmentPath,fromDescriptorFileDataSegment.getShardSpec().getPartitionNum()))@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(indexFile.exists())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "IOException e@@@41@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Assert.assertEquals(segmentToPush.getSize(),segment.getSize())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "DataSegment fromDescriptorFileDataSegment = objectMapper.readValue(descriptorFile,)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
57 [style = filled, label = "final String segmentPath = pusher.getStorageDir(segment,false)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "segmentPath = pusher.getStorageDir(fromDescriptorFileDataSegment,false)@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26->42 [style = solid, label="numberOfSegments"];
12->29 [style = solid, label="i"];
58->50 [style = bold, label=""];
5->34 [style = solid, label="config"];
54->56 [style = bold, label=""];
26->55 [style = dashed, label="0"];
4->51 [style = dashed, label="0"];
42->37 [style = dotted, label="true"];
42->47 [style = dotted, label="true"];
26->3 [style = solid, label="numberOfSegments"];
2->64 [style = solid, label="storageDirectory"];
7->3 [style = solid, label="i"];
52->27 [style = bold, label=""];
62->54 [style = bold, label=""];
30->20 [style = solid, label="segments"];
30->13 [style = solid, label="segments"];
4->29 [style = solid, label="i"];
19->11 [style = bold, label=""];
2->32 [style = solid, label="storageDirectory"];
12->42 [style = bold, label=""];
2->51 [style = solid, label="storageDirectory"];
13->24 [style = solid, label="indexUri"];
48->27 [style = bold, label=""];
20->39 [style = solid, label="pushedSegment"];
27->34 [style = solid, label="conf"];
34->58 [style = bold, label=""];
21->46 [style = bold, label=""];
1->33 [style = bold, label=""];
48->26 [style = dotted, label="true"];
43->18 [style = solid, label="scheme"];
7->60 [style = dashed, label="0"];
19->11 [style = dotted, label="true"];
6->41 [style = bold, label=""];
60->63 [style = bold, label=""];
2->38 [style = solid, label="storageDirectory"];
42->38 [style = dotted, label="true"];
48->43 [style = dotted, label="true"];
42->22 [style = dotted, label="true"];
58->50 [style = solid, label="segmentToPush"];
42->57 [style = dashed, label="0"];
17->27 [style = bold, label=""];
27->25 [style = bold, label=""];
7->28 [style = solid, label="i"];
25->23 [style = solid, label="segmentDir"];
15->28 [style = solid, label="size"];
42->32 [style = dotted, label="true"];
12->35 [style = solid, label="i"];
28->13 [style = solid, label="segments"];
17->26 [style = dotted, label="true"];
59->64 [style = bold, label=""];
3->7 [style = dotted, label="true"];
12->20 [style = solid, label="i"];
33->15 [style = bold, label=""];
57->51 [style = bold, label=""];
25->50 [style = solid, label="segmentDir"];
16->6 [style = bold, label=""];
27->30 [style = bold, label=""];
22->9 [style = bold, label=""];
14->10 [style = solid, label="segmentPath"];
42->36 [style = dotted, label="true"];
2->18 [style = bold, label=""];
34->31 [style = bold, label=""];
14->38 [style = bold, label=""];
13->16 [style = bold, label=""];
8->22 [style = bold, label=""];
42->24 [style = dotted, label="true"];
50->61 [style = solid, label="segment"];
50->57 [style = solid, label="segment"];
55->18 [style = solid, label="scheme"];
25->29 [style = solid, label="segmentDir"];
2->22 [style = solid, label="storageDirectory"];
46->4 [style = bold, label=""];
4->21 [style = solid, label="i"];
28->21 [style = solid, label="segments"];
47->44 [style = bold, label=""];
42->16 [style = dotted, label="true"];
36->37 [style = bold, label=""];
58->49 [style = solid, label="segmentToPush"];
36->14 [style = solid, label="fromDescriptorFileDataSegment"];
31->3 [style = bold, label=""];
42->45 [style = dotted, label="true"];
44->45 [style = bold, label=""];
40->29 [style = bold, label=""];
21->4 [style = bold, label=""];
42->39 [style = dotted, label="true"];
4->20 [style = solid, label="i"];
30->29 [style = solid, label="segments"];
20->13 [style = bold, label=""];
23->33 [style = solid, label="tmp"];
4->42 [style = solid, label="i"];
42->44 [style = dotted, label="true"];
21->46 [style = dotted, label="true"];
52->55 [style = dotted, label="true"];
18->34 [style = bold, label=""];
13->41 [style = solid, label="indexUri"];
30->35 [style = solid, label="segments"];
11->4 [style = bold, label=""];
20->35 [style = solid, label="pushedSegment"];
25->49 [style = solid, label="segmentDir"];
1->33 [style = solid, label="data"];
3->12 [style = bold, label=""];
22->64 [style = dashed, label="0"];
28->7 [style = solid, label="i"];
2->47 [style = solid, label="storageDirectory"];
42->40 [style = dotted, label="true"];
29->21 [style = bold, label=""];
35->24 [style = bold, label=""];
4->6 [style = solid, label="i"];
42->41 [style = dotted, label="true"];
57->54 [style = solid, label="segmentPath"];
12->6 [style = solid, label="i"];
3->28 [style = bold, label=""];
32->8 [style = bold, label=""];
64->62 [style = bold, label=""];
50->60 [style = bold, label=""];
28->29 [style = solid, label="segments"];
57->51 [style = solid, label="segmentPath"];
39->32 [style = bold, label=""];
39->22 [style = solid, label="segmentPath"];
4->35 [style = solid, label="i"];
58->61 [style = solid, label="segmentToPush"];
30->21 [style = solid, label="segments"];
42->20 [style = dotted, label="true"];
8->37 [style = bold, label=""];
63->61 [style = bold, label=""];
37->35 [style = bold, label=""];
38->40 [style = bold, label=""];
60->53 [style = solid, label="indexUri"];
42->29 [style = dotted, label="true"];
45->40 [style = bold, label=""];
30->6 [style = solid, label="segments"];
42->13 [style = dotted, label="true"];
9->36 [style = bold, label=""];
3->28 [style = dotted, label="true"];
12->42 [style = solid, label="i"];
40->10 [style = bold, label=""];
25->21 [style = solid, label="segmentDir"];
17->0 [style = dotted, label="true"];
29->4 [style = bold, label=""];
56->49 [style = bold, label=""];
42->8 [style = dotted, label="true"];
0->18 [style = solid, label="scheme"];
14->38 [style = solid, label="segmentPath"];
25->23 [style = bold, label=""];
53->57 [style = bold, label=""];
42->20 [style = bold, label=""];
42->6 [style = dotted, label="true"];
28->7 [style = bold, label=""];
4->42 [style = bold, label=""];
42->4 [style = dotted, label="true"];
39->32 [style = solid, label="segmentPath"];
30->25 [style = bold, label=""];
22->36 [style = solid, label="descriptorFile"];
4->13 [style = solid, label="i"];
15->5 [style = bold, label=""];
7->3 [style = bold, label=""];
57->64 [style = solid, label="segmentPath"];
24->14 [style = bold, label=""];
51->59 [style = bold, label=""];
42->10 [style = dotted, label="true"];
5->2 [style = bold, label=""];
61->53 [style = bold, label=""];
39->47 [style = solid, label="segmentPath"];
42->14 [style = dotted, label="true"];
3->50 [style = dashed, label="0"];
20->6 [style = solid, label="pushedSegment"];
10->29 [style = bold, label=""];
31->3 [style = solid, label="i"];
42->9 [style = dotted, label="true"];
28->20 [style = solid, label="segments"];
12->4 [style = solid, label="i"];
12->13 [style = solid, label="i"];
28->35 [style = solid, label="segments"];
15->58 [style = solid, label="size"];
35->47 [style = bold, label=""];
23->1 [style = bold, label=""];
12->21 [style = solid, label="i"];
42->35 [style = dotted, label="true"];
21->49 [style = dashed, label="0"];
39->45 [style = solid, label="segmentPath"];
41->39 [style = bold, label=""];
28->6 [style = solid, label="segments"];
42->21 [style = dotted, label="true"];
58->60 [style = solid, label="segmentToPush"];
25->20 [style = solid, label="segmentDir"];
31->28 [style = solid, label="i"];
}
