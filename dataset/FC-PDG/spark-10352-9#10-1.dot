digraph {
14 [style = filled, label = "final byte(( bytes = new byte((((@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "getBinary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "return null@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return null@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "return null@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertIndexIsValid(ordinal)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "getUTF8String['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "return bytes@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "isNullAt(ordinal)@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "PlatformDependent.copyMemory(baseObject,baseOffset + offset,bytes,PlatformDependent.BYTE_ARRAY_OFFSET,size)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "getUTF8String['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5->9 [style = solid, label="ordinal"];
19->13 [style = solid, label="size"];
12->18 [style = solid, label="ordinal"];
5->12 [style = dashed, label="0"];
5->1 [style = solid, label="ordinal"];
8->4 [style = solid, label="size"];
4->17 [style = bold, label=""];
4->17 [style = solid, label="offsetAndSize"];
18->11 [style = dotted, label="false"];
7->18 [style = dashed, label="0"];
18->16 [style = dotted, label="true"];
9->2 [style = bold, label=""];
5->2 [style = solid, label="ordinal"];
14->13 [style = solid, label="bytes"];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
18->13 [style = dotted, label="false"];
3->4 [style = solid, label="offset"];
1->18 [style = bold, label=""];
7->0 [style = bold, label=""];
9->7 [style = bold, label=""];
7->0 [style = dotted, label="true"];
10->5 [style = dotted, label="true"];
1->7 [style = bold, label=""];
5->7 [style = solid, label="ordinal"];
17->19 [style = bold, label=""];
13->11 [style = bold, label=""];
6->1 [style = bold, label=""];
18->4 [style = dotted, label="false"];
17->13 [style = solid, label="offset"];
18->4 [style = bold, label=""];
2->8 [style = solid, label="offsetAndSize"];
2->3 [style = solid, label="offsetAndSize"];
19->14 [style = bold, label=""];
12->1 [style = solid, label="ordinal"];
7->2 [style = bold, label=""];
3->8 [style = bold, label=""];
18->19 [style = dotted, label="false"];
15->12 [style = dotted, label="true"];
10->9 [style = bold, label=""];
4->19 [style = solid, label="offsetAndSize"];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
9->7 [style = dotted, label="true"];
14->11 [style = solid, label="bytes"];
12->4 [style = solid, label="ordinal"];
18->17 [style = dotted, label="false"];
18->14 [style = dotted, label="false"];
6->5 [style = dotted, label="true"];
15->1 [style = bold, label=""];
18->16 [style = bold, label=""];
}
