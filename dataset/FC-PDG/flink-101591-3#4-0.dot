digraph {
2 [style = filled, label = "collectedContent.entrySet()@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "failurePos = (new Random().nextLong() % (failurePosMax - failurePosMin)) + failurePosMin@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Configuration parameters@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "long failurePosMin = (long)(0.4 * numElements / getRuntimeContext().getNumberOfParallelSubtasks())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Map.Entry<Integer,Set<String>> result@@@9@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "count = getRuntimeContext().getOperatorState(\"count\",0L,false)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "long failurePosMax = (long)(0.7 * numElements / getRuntimeContext().getNumberOfParallelSubtasks())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "finalCollectedContent.put(result.getKey(),new ArrayList<>(result.getValue()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "elementsToFailure = (new Random().nextLong() % (failurePosMax - failurePosMin)) + failurePosMin@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(1,getRuntimeContext().getNumberOfParallelSubtasks())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "long failurePosMin = (long)(0.4 * LINES_PER_FILE)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "finalCollectedContent = new HashMap<>()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "open['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "throw new SuccessException()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "elementCounter >= NO_OF_FILES * LINES_PER_FILE@@@7@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "open['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "open['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "long failurePosMax = (long)(0.7 * LINES_PER_FILE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->7 [style = dotted, label="true"];
4->9 [style = bold, label=""];
16->15 [style = bold, label=""];
15->13 [style = bold, label=""];
3->1 [style = bold, label=""];
8->15 [style = dashed, label="0"];
10->3 [style = bold, label=""];
14->17 [style = bold, label=""];
13->14 [style = solid, label="failurePosMax"];
1->4 [style = dotted, label="true"];
8->0 [style = bold, label=""];
0->3 [style = solid, label="failurePosMin"];
16->7 [style = dotted, label="true"];
6->4 [style = bold, label=""];
0->10 [style = bold, label=""];
1->6 [style = bold, label=""];
12->8 [style = bold, label=""];
1->9 [style = dotted, label="true"];
0->13 [style = dashed, label="0"];
15->14 [style = solid, label="failurePosMin"];
11->8 [style = bold, label=""];
1->6 [style = dotted, label="true"];
1->2 [style = dotted, label="true"];
12->7 [style = dotted, label="true"];
13->14 [style = bold, label=""];
10->14 [style = dashed, label="0"];
1->5 [style = dotted, label="true"];
10->3 [style = solid, label="failurePosMax"];
}
