digraph {
18 [style = filled, label = "assertThat(SqlUtil.isLiteral(castLiteral,false),is(false))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertThat(SqlUtil.isLiteral(defaultCall,true),is(true))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertSame(true,SqlUtil.isLiteral(castLiteral,true))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final SqlNode castLiteral = SqlStdOperatorTable.CAST.createCall(pos,zeroLiteral,integerType)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertThat(SqlUtil.isLiteral(castCastLiteral,true),is(true))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final SqlNode castCastLiteral = SqlStdOperatorTable.CAST.createCall(pos,castLiteral,integerType)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertThat(SqlUtil.isLiteral(map2Literal,true),is(true))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final SqlNode literal = SqlLiteral.createExactNumeric(\"0\",SqlParserPos.ZERO)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "final SqlParserPos pos = SqlParserPos.ZERO@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(SqlUtil.isLiteral(arrayLiteral,false),is(false))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testRexNodeLiteral['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertSame(true,RexUtil.isLiteral(literal,true))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final SqlNode nullLiteral = SqlLiteral.createNull(pos)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(SqlUtil.isLiteral(nullLiteral,false),is(true))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "final SqlNode defaultCall = SqlStdOperatorTable.DEFAULT.createCall(pos)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertSame(false,RexUtil.isLiteral(castCastLiteral,true))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testSqlNodeLiteral['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(SqlUtil.isLiteral(mapLiteral,true),is(true))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(SqlUtil.isLiteral(castCastLiteral,false),is(false))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "final SqlNode castLiteral = SqlStdOperatorTable.CAST.createCall(SqlParserPos.ZERO,literal,integerType)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertSame(false,SqlUtil.isLiteral(castCastLiteral,true))@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(SqlUtil.isLiteral(castLiteral,true),is(true))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "final RexNode castCastLiteral = rexBuilder.makeCall(integerDataType,SqlStdOperatorTable.CAST,Lists.newArrayList(castLiteral))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertSame(true,SqlUtil.isLiteral(literal,true))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(SqlUtil.isLiteral(arrayLiteral,true),is(true))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "final SqlNode mapLiteral = SqlStdOperatorTable.MAP_VALUE_CONSTRUCTOR.createCall(pos,aLiteral,oneLiteral)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "assertSame(true,RexUtil.isLiteral(castLiteral,true))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(SqlUtil.isLiteral(map2Literal,false),is(false))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final SqlNode castCastLiteral = SqlStdOperatorTable.CAST.createCall(SqlParserPos.ZERO,castLiteral,integerType)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final SqlNode arrayLiteral = SqlStdOperatorTable.ARRAY_VALUE_CONSTRUCTOR.createCall(pos,zeroLiteral,oneLiteral)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final SqlNode map2Literal = SqlStdOperatorTable.MAP_VALUE_CONSTRUCTOR.createCall(pos,aLiteral,castLiteral)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(SqlUtil.isLiteral(nullLiteral,true),is(true))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertThat(SqlUtil.isLiteral(mapLiteral,false),is(false))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "testSqlNodeLiteral['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(SqlUtil.isLiteral(defaultCall,false),is(false))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "final SqlNode zeroLiteral = SqlLiteral.createExactNumeric(\"0\",pos)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final SqlNode oneLiteral = SqlLiteral.createExactNumeric(\"1\",pos)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final SqlCharStringLiteral aLiteral = SqlLiteral.createCharString(\"a\",pos)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertThat(SqlUtil.isLiteral(zeroLiteral,false),is(true))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "final RexNode castLiteral = rexBuilder.makeCall(integerDataType,SqlStdOperatorTable.CAST,Lists.newArrayList(literal))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final RexNode literal = rexBuilder.makeZeroLiteral(integerDataType)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(SqlUtil.isLiteral(zeroLiteral,true),is(true))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14->24 [style = bold, label=""];
3->40 [style = dashed, label="0"];
38->40 [style = solid, label="literal"];
34->28 [style = solid, label="arrayLiteral"];
20->26 [style = bold, label=""];
5->1 [style = solid, label="castLiteral"];
18->30 [style = bold, label=""];
33->14 [style = solid, label="pos"];
10->17 [style = bold, label=""];
38->41 [style = bold, label=""];
25->14 [style = bold, label=""];
3->4 [style = bold, label=""];
33->34 [style = solid, label="pos"];
41->39 [style = solid, label="castLiteral"];
39->35 [style = solid, label="castCastLiteral"];
23->13 [style = bold, label=""];
15->20 [style = solid, label="zeroLiteral"];
12->18 [style = bold, label=""];
15->25 [style = solid, label="zeroLiteral"];
33->9 [style = solid, label="pos"];
14->19 [style = solid, label="castCastLiteral"];
33->13 [style = solid, label="pos"];
5->41 [style = dashed, label="0"];
40->37 [style = bold, label=""];
13->7 [style = solid, label="aLiteral"];
13->25 [style = bold, label=""];
8->28 [style = bold, label=""];
22->33 [style = bold, label=""];
15->26 [style = solid, label="zeroLiteral"];
7->17 [style = solid, label="map2Literal"];
33->15 [style = bold, label=""];
6->5 [style = solid, label="literal"];
24->29 [style = solid, label="mapLiteral"];
33->15 [style = solid, label="pos"];
7->10 [style = solid, label="map2Literal"];
33->25 [style = solid, label="pos"];
4->2 [style = bold, label=""];
32->10 [style = bold, label=""];
6->33 [style = dashed, label="0"];
38->41 [style = solid, label="literal"];
14->21 [style = solid, label="castCastLiteral"];
26->16 [style = bold, label=""];
5->1 [style = bold, label=""];
30->19 [style = bold, label=""];
21->29 [style = bold, label=""];
15->9 [style = bold, label=""];
29->32 [style = bold, label=""];
27->11 [style = solid, label="defaultCall"];
25->18 [style = solid, label="castLiteral"];
25->7 [style = solid, label="castLiteral"];
24->7 [style = bold, label=""];
27->20 [style = bold, label=""];
41->37 [style = solid, label="castLiteral"];
17->8 [style = bold, label=""];
1->39 [style = dashed, label="0"];
2->35 [style = dashed, label="0"];
33->23 [style = solid, label="pos"];
1->3 [style = bold, label=""];
25->30 [style = solid, label="castLiteral"];
34->8 [style = solid, label="arrayLiteral"];
13->24 [style = solid, label="aLiteral"];
6->3 [style = solid, label="literal"];
24->32 [style = solid, label="mapLiteral"];
11->31 [style = bold, label=""];
6->5 [style = bold, label=""];
39->40 [style = bold, label=""];
27->31 [style = solid, label="defaultCall"];
37->35 [style = bold, label=""];
4->37 [style = dashed, label="0"];
15->34 [style = solid, label="zeroLiteral"];
19->21 [style = bold, label=""];
25->14 [style = solid, label="castLiteral"];
0->6 [style = bold, label=""];
28->11 [style = bold, label=""];
9->23 [style = bold, label=""];
33->24 [style = solid, label="pos"];
33->7 [style = solid, label="pos"];
7->34 [style = bold, label=""];
9->24 [style = solid, label="oneLiteral"];
1->2 [style = solid, label="castCastLiteral"];
5->4 [style = solid, label="castLiteral"];
36->38 [style = bold, label=""];
41->39 [style = bold, label=""];
33->27 [style = solid, label="pos"];
16->12 [style = bold, label=""];
9->34 [style = solid, label="oneLiteral"];
34->27 [style = bold, label=""];
}
