digraph {
7 [style = filled, label = "final String sql2 = StringUtils.format(\"SELECT DS_GET_QUANTILE(y, 0.5), DS_GET_QUANTILE(y, 0.98) from (%s)\",sql)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(expectedQuery,actualQuery)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Query expectedQuery = Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new DoublesSketchAggregatorFactory(\"a0:agg\",\"m1\",128))).postAggregators(ImmutableList.of(new FieldAccessPostAggregator(\"p0\",\"a0:agg\"),new DoublesSketchToQuantilePostAggregator(\"p2\",new FieldAccessPostAggregator(\"p1\",\"a0:agg\"),0.5),new DoublesSketchToQuantilePostAggregator(\"s1\",new FieldAccessPostAggregator(\"s0\",\"p0\"),0.5),new DoublesSketchToQuantilePostAggregator(\"s3\",new FieldAccessPostAggregator(\"s2\",\"p0\"),0.9800000190734863))).context(TIMESERIES_CONTEXT_DEFAULT).build()@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "final String sql = \"SELECT\" + \"TDIGEST_GENERATE_SKETCH(m1)\" + \"FROM foo\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "sqlLifecycle.runSimple(sql,TIMESERIES_CONTEXT_DEFAULT,DEFAULT_PARAMETERS,AUTH_RESULT).toList()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a45ec6)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Query actualQuery = Iterables.getOnlyElement(queryLogHook.getRecordedQueries())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertArrayEquals(expectedResults.get(i),results.get(i))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "int i = 0@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testQuery(\"SELECT DS_GET_QUANTILE(y, 0.5), DS_GET_QUANTILE(y, 0.98) from (\" + \"SELECT DS_QUANTILES_SKETCH(m1) as y FROM druid.foo ORDER BY DS_GET_QUANTILE(DS_QUANTILES_SKETCH(m1), 0.5) DESC LIMIT 10\" + \")\",Collections.singletonList(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new DoublesSketchAggregatorFactory(\"a0:agg\",\"m1\",128))).postAggregators(ImmutableList.of(new FieldAccessPostAggregator(\"p0\",\"a0:agg\"),new DoublesSketchToQuantilePostAggregator(\"p2\",new FieldAccessPostAggregator(\"p1\",\"a0:agg\"),0.5),new DoublesSketchToQuantilePostAggregator(\"s1\",new FieldAccessPostAggregator(\"s0\",\"p0\"),0.5),new DoublesSketchToQuantilePostAggregator(\"s3\",new FieldAccessPostAggregator(\"s2\",\"p0\"),0.9800000190734863))).context(TIMESERIES_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a45fa5))@@@3@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql2,TIMESERIES_CONTEXT_DEFAULT,DEFAULT_PARAMETERS,AUTH_RESULT).toList()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testDoublesSketchPostAggsPostSort['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i < expectedResults.size()@@@12@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testDefaultCompressionForTDigestGenerateSketchAgg['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new TDigestSketchAggregatorFactory(\"a0:agg\",\"m1\",TDigestSketchAggregatorFactory.DEFAULT_COMPRESSION))).context(TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "i++@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "testDoublesSketchPostAggsPostSort['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "final String sql = \"SELECT DS_QUANTILES_SKETCH(m1) as y FROM druid.foo ORDER BY DS_GET_QUANTILE(DS_QUANTILES_SKETCH(m1), 0.5) DESC LIMIT 10\"@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "SqlLifecycle sqlLifecycle = getSqlLifecycle()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->11 [style = solid, label="i"];
16->0 [style = bold, label=""];
9->2 [style = bold, label=""];
2->6 [style = bold, label=""];
5->4 [style = solid, label="i"];
18->19 [style = bold, label=""];
11->12 [style = bold, label=""];
19->17 [style = bold, label=""];
5->11 [style = solid, label="i"];
11->4 [style = dotted, label="true"];
12->13 [style = solid, label="actualQuery"];
1->7 [style = bold, label=""];
4->8 [style = solid, label="i"];
7->9 [style = bold, label=""];
6->5 [style = bold, label=""];
0->1 [style = bold, label=""];
1->7 [style = solid, label="sql"];
10->0 [style = bold, label=""];
3->13 [style = bold, label=""];
3->13 [style = solid, label="expectedQuery"];
11->8 [style = bold, label=""];
0->18 [style = bold, label=""];
11->8 [style = dotted, label="true"];
14->15 [style = bold, label=""];
5->11 [style = bold, label=""];
12->3 [style = bold, label=""];
8->4 [style = bold, label=""];
4->11 [style = bold, label=""];
5->8 [style = solid, label="i"];
}
