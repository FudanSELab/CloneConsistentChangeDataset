digraph {
23 [style = filled, label = "fail(\"data should be invalid\")@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(\"byte number \" + i,data2(data.length - 5 + i(,ze(1(.getLocalFileDataData()(i()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int i = 0@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ZipExtraField(( ze = ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.READ)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ZipExtraField(( ze = ExtraFieldUtils.parse(data)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "i < 4@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testParseWithRead['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertEquals(\"mode field 1\",040755,((AsiExtraField)ze(0().getMode())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"data length field 2\",4,ze(1(.getLocalFileDataLength().getValue())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ze = ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.READ)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(\"type field 2\",ze(1( instanceof UnrecognizedExtraField)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "byte(( data2 = new byte((((@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testParse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "byte(( expectedData = new byte((((@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"number of fields\",2,ze.length)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ExtraFieldUtils.parse(data2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"number of fields\",2,ze.length)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(\"type field 2\",ze(1( instanceof UnparseableExtraFieldData)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "System.arraycopy(data,0,data2,0,data2.length)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i++@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"mode field 1\",040755,((AsiExtraField)ze(0().getMode())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"data length field 2\",1,ze(1(.getLocalFileDataLength().getValue())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testParseWithRead['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4->7 [style = solid, label="i"];
14->3 [style = bold, label=""];
12->15 [style = solid, label="data2"];
4->3 [style = bold, label=""];
12->21 [style = solid, label="data2"];
17->5 [style = bold, label=""];
16->13 [style = bold, label=""];
19->18 [style = bold, label=""];
12->7 [style = solid, label="data2"];
3->7 [style = dotted, label="true"];
24->19 [style = bold, label=""];
14->7 [style = solid, label="i"];
4->14 [style = solid, label="i"];
11->4 [style = bold, label=""];
5->24 [style = dashed, label="0"];
24->13 [style = solid, label="ze"];
5->18 [style = solid, label="ze"];
5->13 [style = solid, label="ze"];
4->3 [style = solid, label="i"];
14->3 [style = solid, label="i"];
10->6 [style = bold, label=""];
15->1 [style = solid, label="ze"];
3->14 [style = dotted, label="true"];
20->5 [style = bold, label=""];
7->14 [style = bold, label=""];
5->19 [style = bold, label=""];
12->2 [style = bold, label=""];
24->18 [style = solid, label="ze"];
3->7 [style = bold, label=""];
2->21 [style = bold, label=""];
0->1 [style = bold, label=""];
15->0 [style = bold, label=""];
6->8 [style = bold, label=""];
2->15 [style = bold, label=""];
15->6 [style = solid, label="ze"];
13->9 [style = bold, label=""];
9->12 [style = bold, label=""];
8->4 [style = bold, label=""];
22->24 [style = bold, label=""];
12->2 [style = solid, label="data2"];
1->10 [style = bold, label=""];
8->11 [style = bold, label=""];
21->23 [style = bold, label=""];
18->16 [style = bold, label=""];
}
