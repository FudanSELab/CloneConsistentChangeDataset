digraph {
10 [style = filled, label = "stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\")\"),factory)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(\"complement\",explanation.getFunctionName())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "stream = new ComplementStream(StreamExpressionParser.parse(\"complement(\" + \"search(collection1, q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),\" + \"search(collection1, q=\"id:(1 2)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),\" + \"on=\"a_f, a_s\")\"),factory)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(2,((StreamExplanation)explanation).getChildren().size())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "ComplementStream stream@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testComplementStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Explanation explanation = stream.toExplanation(factory)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(\"search\",explanation.getFunctionName())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(.getName(),explanation.getImplementingClass())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testComplementStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String expressionString@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(2,((StreamExplanation)explanation).getChildren().size())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(.getName(),explanation.getImplementingClass())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "CloudSolrStream stream@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testCloudSolrStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8->0 [style = bold, label=""];
5->7 [style = bold, label=""];
6->3 [style = bold, label=""];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
12->10 [style = bold, label=""];
13->12 [style = bold, label=""];
2->1 [style = dashed, label="0"];
3->12 [style = dashed, label="0"];
1->11 [style = bold, label=""];
5->9 [style = bold, label=""];
5->11 [style = dashed, label="0"];
0->4 [style = bold, label=""];
10->14 [style = bold, label=""];
7->9 [style = dashed, label="0"];
0->1 [style = bold, label=""];
0->10 [style = dashed, label="0"];
3->0 [style = bold, label=""];
14->1 [style = bold, label=""];
2->5 [style = bold, label=""];
}
