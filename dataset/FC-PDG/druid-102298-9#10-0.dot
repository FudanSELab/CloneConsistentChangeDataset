digraph {
18 [style = filled, label = "supervisor.addTaskGroupToPendingCompletionTaskGroup(supervisor.getTaskGroupIdForPartition(1),ImmutableMap.of(0,0L),Optional.absent(),Optional.absent(),ImmutableSet.of(\"task2\"),ImmutableSet.of())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"task1\",ImmutableMap.of(\"prop1\",\"val1\")),stats.get(\"0\"))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "supervisor = getTestableSupervisor(1,2,true,\"PT1H\",null,null,false)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"task2\",ImmutableMap.of(\"prop2\",\"val2\")),stats.get(\"1\"))@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testGetCurrentTotalStats['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(taskClient.getMovingAveragesAsync(\"task2\")).andReturn(Futures.immediateFuture(ImmutableMap.of(\"prop2\",\"val2\"))).times(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(2,stats.size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testGetCurrentTotalStats['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(\"0\",\"1\"),stats.keySet())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "supervisor.addTaskGroupToActivelyReadingTaskGroup(supervisor.getTaskGroupIdForPartition(SHARD_ID0),ImmutableMap.of(\"0\",\"0\"),Optional.absent(),Optional.absent(),ImmutableSet.of(\"task1\"),ImmutableSet.of())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "verifyAll()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testGetCurrentTotalStats['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "supervisor = getTestableSupervisor(1,2,true,\"PT1H\",null,null,false,kafkaHost)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "replayAll()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"task2\",ImmutableMap.of(\"prop2\",\"val2\")),stats.get(\"1\"))@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "supervisor.addTaskGroupToActivelyReadingTaskGroup(supervisor.getTaskGroupIdForPartition(\"0\"),ImmutableMap.of(\"0\",\"0\"),Optional.absent(),Optional.absent(),ImmutableSet.of(\"task1\"),ImmutableSet.of())@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Map<String,Map<String,Object>> stats = supervisor.getStats()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "supervisor.setPartitionIdsForTests(ImmutableList.of(SHARD_ID0,SHARD_ID1))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "EasyMock.expect(taskClient.getMovingAveragesAsync(\"task1\")).andReturn(Futures.immediateFuture(ImmutableMap.of(\"prop1\",\"val1\"))).times(1)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "supervisor.addTaskGroupToPendingCompletionTaskGroup(supervisor.getTaskGroupIdForPartition(\"1\"),ImmutableMap.of(\"0\",\"0\"),Optional.absent(),Optional.absent(),ImmutableSet.of(\"task2\"),ImmutableSet.of())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "supervisor.addTaskGroupToActivelyReadingTaskGroup(supervisor.getTaskGroupIdForPartition(0),ImmutableMap.of(0,0L),Optional.absent(),Optional.absent(),ImmutableSet.of(\"task1\"),ImmutableSet.of())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "supervisor.addTaskGroupToPendingCompletionTaskGroup(supervisor.getTaskGroupIdForPartition(SHARD_ID1),ImmutableMap.of(\"0\",\"0\"),Optional.absent(),Optional.absent(),ImmutableSet.of(\"task2\"),ImmutableSet.of())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->3 [style = bold, label=""];
19->18 [style = bold, label=""];
7->11 [style = bold, label=""];
21->19 [style = bold, label=""];
10->19 [style = dashed, label="0"];
1->21 [style = dashed, label="0"];
3->4 [style = bold, label=""];
1->17 [style = bold, label=""];
14->7 [style = bold, label=""];
0->7 [style = bold, label=""];
20->21 [style = bold, label=""];
11->5 [style = bold, label=""];
2->0 [style = bold, label=""];
5->6 [style = bold, label=""];
12->8 [style = bold, label=""];
2->16 [style = dashed, label="0"];
2->18 [style = dashed, label="0"];
4->12 [style = bold, label=""];
16->14 [style = bold, label=""];
10->2 [style = bold, label=""];
9->1 [style = bold, label=""];
1->10 [style = bold, label=""];
18->0 [style = bold, label=""];
17->16 [style = bold, label=""];
8->13 [style = bold, label=""];
15->1 [style = bold, label=""];
}
