digraph {
16 [style = filled, label = "JsonParserSession x = JsonParser.create().applyAnnotations(al,sr).build().createSession()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "check(\"1\",x.getDebugOutputLines())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<AnnotationWork> al = a.getAnnotationList().getWork(sr)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "check(\"AA\",x.getListener())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "noValuesReaderParser['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "check(\"false\",x.isAutoCloseStreams())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "check(\"true\",x.isTrimStrings())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "check(\"true\",x.isUnbuffered())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "check(\"true\",x.isStrict())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "AnnotationList al = b.getAnnotationList()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "AnnotationList al = a.getAnnotationList()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "check(\"true\",x.isAutoCloseStreams())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "basicInputStreamParser['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "check(\"5\",x.getDebugOutputLines())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "check(\"HEX\",x.getBinaryFormat())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "check(null,x.getListener())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "basicInputStreamParser['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "check(Charset.defaultCharset().toString(),x.getFileCharset())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "check(\"false\",x.isUnbuffered())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "MsgPackParserSession x = MsgPackParser.create().apply(al).build().createSession()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "check(\"UTF-8\",x.getStreamCharset())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "check(\"false\",x.isStrict())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "MsgPackParserSession x = MsgPackParser.create().applyAnnotations(al,sr).build().createSession()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "check(\"false\",x.isTrimStrings())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
9->0 [style = bold, label=""];
21->19 [style = bold, label=""];
4->17 [style = dashed, label="0"];
4->6 [style = bold, label=""];
22->16 [style = bold, label=""];
15->21 [style = bold, label=""];
8->23 [style = dashed, label="0"];
12->11 [style = bold, label=""];
14->22 [style = bold, label=""];
16->17 [style = bold, label=""];
7->8 [style = bold, label=""];
0->20 [style = dashed, label="0"];
5->16 [style = dashed, label="0"];
20->18 [style = bold, label=""];
5->10 [style = dashed, label="0"];
3->7 [style = bold, label=""];
6->15 [style = dashed, label="0"];
23->13 [style = bold, label=""];
11->10 [style = bold, label=""];
7->19 [style = dashed, label="0"];
19->23 [style = bold, label=""];
5->4 [style = bold, label=""];
9->13 [style = dashed, label="0"];
17->15 [style = bold, label=""];
8->9 [style = bold, label=""];
10->4 [style = bold, label=""];
2->11 [style = dashed, label="0"];
1->2 [style = bold, label=""];
2->22 [style = dashed, label="0"];
2->5 [style = bold, label=""];
13->20 [style = bold, label=""];
}
