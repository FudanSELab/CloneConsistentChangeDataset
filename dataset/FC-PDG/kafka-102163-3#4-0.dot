digraph {
20 [style = filled, label = "assertThat(\"should have assigned movements\",assignTaskMovements(tasksToCaughtUpClients,clientStates,maxWarmupReplicas),is(true))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final Map<UUID,List<TaskId>> expectedWarmupTaskAssignment = mkMap(mkEntry(UUID_1,EMPTY_TASK_LIST),mkEntry(UUID_2,singletonList(TASK_0_1)),mkEntry(UUID_3,EMPTY_TASK_LIST))@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final Map<UUID,List<TaskId>> expectedWarmupTaskAssignment = mkMap(mkEntry(UUID_1,EMPTY_TASK_LIST),mkEntry(UUID_2,singletonList(TASK_0_1)),mkEntry(UUID_3,singletonList(TASK_0_2)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(client1,hasProperty(\"standbyTasks\",null,mkSet()))@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(client3,hasProperty(\"standbyTasks\",null,mkSet()))@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "final Map<UUID,List<TaskId>> balancedAssignment = mkMap(mkEntry(UUID_1,singletonList(TASK_0_0)),mkEntry(UUID_2,singletonList(TASK_0_1)),mkEntry(UUID_3,singletonList(TASK_0_2)))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "verifyClientStateAssignments(expectedActiveTaskAssignment,expectedWarmupTaskAssignment)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final int maxWarmupReplicas = 1@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final Map<TaskId,SortedSet<UUID>> tasksToCaughtUpClients = new HashMap<>()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final ClientState client2 = getClientStateWithActiveAssignment(singletonList(TASK_0_1))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "final Map<UUID,ClientState> clientStates = getClientStatesMap(client1,client2,client3)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "tasksToCaughtUpClients.put(TASK_0_0,mkSortedSet(UUID_1))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Set<TaskId> allTasks = mkSet(TASK_0_0,TASK_0_1,TASK_0_2)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Map<TaskId,SortedSet<UUID>> tasksToCaughtUpClients = mkMap(mkEntry(TASK_0_0,mkSortedSet(UUID_1)),mkEntry(TASK_0_1,mkSortedSet(UUID_3)),mkEntry(TASK_0_2,mkSortedSet(UUID_2)))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(client3,hasProperty(\"activeTasks\",null,mkSet(TASK_0_1)))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "tasksToCaughtUpClients.put(TASK_0_1,mkSortedSet(UUID_3))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "shouldNotCountPreviousStandbyTasksTowardsMaxWarmupReplicas['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "shouldOnlyGetUpToMaxWarmupReplicasAndReturnTrue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(assignTaskMovements(balancedAssignment,tasksToCaughtUpClients,clientStates,getMapWithNumStandbys(allTasks,1),maxWarmupReplicas))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "tasksToCaughtUpClients.put(TASK_0_2,mkSortedSet(UUID_2))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "shouldOnlyGetUpToMaxWarmupReplicasAndReturnTrue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "final ClientState client3 = getClientStateWithActiveAssignment(singletonList(TASK_0_2))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "final ClientState client1 = getClientStateWithActiveAssignment(singletonList(TASK_0_0))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(client2,hasProperty(\"standbyTasks\",null,mkSet(TASK_0_1)))@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(client1,hasProperty(\"activeTasks\",null,mkSet(TASK_0_0)))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(client2,hasProperty(\"activeTasks\",null,mkSet(TASK_0_2)))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final Map<UUID,List<TaskId>> expectedActiveTaskAssignment = mkMap(mkEntry(UUID_1,singletonList(TASK_0_0)),mkEntry(UUID_2,singletonList(TASK_0_2)),mkEntry(UUID_3,singletonList(TASK_0_1)))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(assignTaskMovements(balancedAssignment,tasksToCaughtUpClients,clientStates,getMapWithNumStandbys(allTasks,1),maxWarmupReplicas))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "client3.addPreviousStandbyTasks(singleton(TASK_0_2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21->24 [style = solid, label="client1"];
11->0 [style = solid, label="allTasks"];
21->14 [style = solid, label="client1"];
24->13 [style = bold, label=""];
11->10 [style = solid, label="allTasks"];
22->24 [style = bold, label=""];
2->7 [style = bold, label=""];
7->9 [style = bold, label=""];
4->5 [style = bold, label=""];
5->0 [style = solid, label="maxWarmupReplicas"];
27->0 [style = bold, label=""];
18->13 [style = solid, label="client2"];
2->20 [style = dashed, label="0"];
8->0 [style = solid, label="balancedAssignment"];
14->12 [style = bold, label=""];
7->26 [style = bold, label=""];
19->16 [style = solid, label="client3"];
17->20 [style = solid, label="tasksToCaughtUpClients"];
0->25 [style = bold, label=""];
19->22 [style = solid, label="client3"];
19->23 [style = bold, label=""];
17->20 [style = bold, label=""];
18->12 [style = solid, label="client2"];
26->27 [style = bold, label=""];
8->10 [style = solid, label="balancedAssignment"];
9->26 [style = dashed, label="0"];
9->0 [style = solid, label="expectedWarmupTaskAssignment"];
6->2 [style = bold, label=""];
5->10 [style = solid, label="maxWarmupReplicas"];
12->22 [style = bold, label=""];
3->6 [style = bold, label=""];
8->1 [style = bold, label=""];
5->20 [style = solid, label="maxWarmupReplicas"];
1->3 [style = bold, label=""];
5->21 [style = bold, label=""];
5->11 [style = bold, label=""];
11->8 [style = bold, label=""];
21->18 [style = bold, label=""];
18->19 [style = bold, label=""];
13->16 [style = bold, label=""];
1->10 [style = solid, label="tasksToCaughtUpClients"];
6->17 [style = dashed, label="0"];
19->23 [style = solid, label="client3"];
15->5 [style = bold, label=""];
28->5 [style = bold, label=""];
26->25 [style = solid, label="expectedWarmupTaskAssignment"];
21->23 [style = solid, label="client1"];
7->0 [style = solid, label="expectedActiveTaskAssignment"];
1->0 [style = solid, label="tasksToCaughtUpClients"];
23->17 [style = bold, label=""];
20->14 [style = bold, label=""];
23->20 [style = solid, label="clientStates"];
7->25 [style = solid, label="expectedActiveTaskAssignment"];
10->0 [style = bold, label=""];
9->10 [style = bold, label=""];
18->23 [style = solid, label="client2"];
}
