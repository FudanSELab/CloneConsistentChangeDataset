digraph {
20 [style = filled, label = "testDeserializeDoesntLockACLCacheWhileReading['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(ranTestCase.get(),\"Didn't find the expected node\")@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "DataInputStream in = new DataInputStream(new ByteArrayInputStream(baos.toByteArray()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "tree.serialize(oa,\"test\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "ByteArrayOutputStream baos = new ByteArrayOutputStream()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "BinaryOutputArchive oa = new BinaryOutputArchive(out)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "tree.createNode(\"/marker\",new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@3b166b,null,-1,1,1,1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertTrue(\"Didn't find the expected node\",ranTestCase.get())@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "tree.createNode(\"/marker\",new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@3b16ec,null,-1,1,1,1)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DataTree tree = new DataTree()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(\"Didn't find the expected node\",ranTestCase.get())@@@38@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "DataOutputStream out = new DataOutputStream(baos)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testSerializeDoesntLockACLCacheWhileWriting['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testSerializeDoesntLockACLCacheWhileWriting['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "tree.serialize(oa,\"test\")@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final AtomicBoolean ranTestCase = new AtomicBoolean()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DataTree tree2 = new DataTree()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DataOutputStream out = new DataOutputStream(new ByteArrayOutputStream())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "BinaryInputArchive ia = new BinaryInputArchive(in){@Override public long readLong(String tag){final Semaphore semaphore = new Semaphore(0)new Thread(new Runnable(){@Override public void run(){synchronized (tree2.getReferenceCountedAclCache()) {semaphore.release()}}}).start()try {boolean acquired = semaphore.tryAcquire(30,TimeUnit.SECONDS)assertTrue(\"Couldn't acquire a lock on the ACLCache while we were calling tree.deserialize\",acquired)}catch (InterruptedException e1) ranTestCase.set(true)return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@3b176ftag}}@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "BinaryOutputArchive oa = new BinaryOutputArchive(out){@Override public void writeInt(int size,String tag){final Semaphore semaphore = new Semaphore(0)new Thread(new Runnable(){@Override public void run(){synchronized (tree.getReferenceCountedAclCache()) {semaphore.release()}}}).start()try {boolean acquired = semaphore.tryAcquire(30,TimeUnit.SECONDS)assertTrue(acquired,\"Couldn't acquire a lock on the ACLCache while we were calling tree.serialize\")}catch (InterruptedException e1) ranTestCase.set(true)super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@3b16cdsizetag}}@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "tree2.deserialize(ia,\"test\")@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
4->10 [style = bold, label=""];
15->18 [style = solid, label="out"];
16->11 [style = solid, label="in"];
16->11 [style = bold, label=""];
11->14 [style = bold, label=""];
3->6 [style = solid, label="out"];
18->19 [style = bold, label=""];
3->6 [style = bold, label=""];
19->17 [style = bold, label=""];
2->9 [style = bold, label=""];
13->15 [style = solid, label="baos"];
3->13 [style = dashed, label="0"];
15->18 [style = bold, label=""];
4->7 [style = bold, label=""];
20->2 [style = bold, label=""];
6->4 [style = bold, label=""];
2->0 [style = bold, label=""];
11->14 [style = solid, label="ia"];
8->2 [style = bold, label=""];
18->19 [style = solid, label="oa"];
5->13 [style = bold, label=""];
14->12 [style = bold, label=""];
9->5 [style = bold, label=""];
7->10 [style = dashed, label="0"];
4->14 [style = dashed, label="0"];
1->2 [style = bold, label=""];
13->15 [style = bold, label=""];
6->4 [style = solid, label="oa"];
0->9 [style = dashed, label="0"];
17->16 [style = bold, label=""];
0->5 [style = bold, label=""];
}
