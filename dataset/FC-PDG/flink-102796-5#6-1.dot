digraph {
18 [style = filled, label = "assertEquals(0,timeAdaptor.numTimers(testHarness))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "doAnswer(new Answer<Object>(){@Override public Object answer(InvocationOnMock invocation){Trigger.TriggerContext context = (Trigger.TriggerContext)invocation.getArguments()(1(timeAdaptor.deleteTimer(context,1000L)context.getPartitionedState(valueStateDescriptor).clear()return null}}).when(mockTrigger).clear(anyTimeWindow(),anyTriggerContext())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "verify(mockTrigger,times(1)).clear(anyTimeWindow(),anyTriggerContext())@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "doAnswer(new Answer<TriggerResult>(){@Override public TriggerResult answer(InvocationOnMock invocation){Trigger.TriggerContext context = (Trigger.TriggerContext)invocation.getArguments()(3(timeAdaptor.registerTimer(context,1000L)context.getPartitionedState(valueStateDescriptor).update(\"hello\")return TriggerResult.PURGE}}).when(mockTrigger).onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "timeAdaptor.setIsEventTime(mockAssigner)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(0,20)))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(mockTrigger,never()).clear(anyTimeWindow(),anyTriggerContext())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "WindowAssigner<Integer,TimeWindow> mockAssigner = mockTimeWindowAssigner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "timeAdaptor.advanceTime(testHarness,19 + 20)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(2,testHarness.numKeyedStateEntries())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.open()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Trigger<Integer,TimeWindow> mockTrigger = mockTrigger()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(0,timeAdaptor.numTimersOtherDomain(testHarness))@@@39@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(1,testHarness.numKeyedStateEntries())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(0,testHarness.getOutput().size())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testStateAndTimerCleanupAtEventTimeGarbageCollection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness = createWindowOperator(mockAssigner,mockTrigger,20L,mockWindowFunction)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "InternalWindowFunction<Iterable<Integer>,Void,Integer,TimeWindow> mockWindowFunction = mockWindowFunction()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testStateAndTimerCleanupAtEventTimeGarbageCollection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertEquals(0,timeAdaptor.numTimersOtherDomain(testHarness))@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(2,timeAdaptor.numTimers(testHarness))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->10 [style = bold, label=""];
22->2 [style = bold, label=""];
27->25 [style = dotted, label="true"];
24->2 [style = bold, label=""];
16->8 [style = bold, label=""];
11->14 [style = bold, label=""];
2->19 [style = solid, label="mockAssigner"];
12->21 [style = bold, label=""];
17->19 [style = solid, label="mockTrigger"];
8->26 [style = bold, label=""];
13->25 [style = dashed, label="0"];
19->6 [style = bold, label=""];
5->17 [style = bold, label=""];
13->23 [style = dashed, label="0"];
21->18 [style = bold, label=""];
26->11 [style = bold, label=""];
19->7 [style = solid, label="testHarness"];
4->0 [style = bold, label=""];
6->4 [style = bold, label=""];
10->26 [style = dashed, label="0"];
10->11 [style = bold, label=""];
24->23 [style = dotted, label="true"];
19->11 [style = solid, label="testHarness"];
3->19 [style = bold, label=""];
19->9 [style = solid, label="testHarness"];
1->16 [style = bold, label=""];
3->19 [style = solid, label="mockWindowFunction"];
22->13 [style = dotted, label="true"];
17->3 [style = bold, label=""];
2->5 [style = solid, label="mockAssigner"];
19->18 [style = solid, label="testHarness"];
0->20 [style = bold, label=""];
19->14 [style = solid, label="testHarness"];
14->9 [style = bold, label=""];
9->12 [style = bold, label=""];
18->7 [style = bold, label=""];
20->15 [style = bold, label=""];
27->2 [style = bold, label=""];
2->5 [style = bold, label=""];
15->1 [style = bold, label=""];
}
