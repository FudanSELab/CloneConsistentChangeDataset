digraph {
5 [style = filled, label = "emitLate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "to.assertResult(2)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ref.get().onNext(1)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ts.assertResult(2)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final AtomicReference<Subscriber<? super Integer>> ref = new AtomicReference<Subscriber<? super Integer>>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "final AtomicReference<Observer<? super Integer>> ref = new AtomicReference<Observer<? super Integer>>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestSubscriber<Integer> ts = Flowable.range(1,2).debounce(new Function<Integer,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Integer o){if (o != 1) {return Flowable.never()}return new Flowable<Integer>(){@Override protected void subscribeActual(Subscriber<? super Integer> subscriber){subscriber.onSubscribe(new BooleanSubscription())ref.set(subscriber)}}}}).test()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final AtomicReference<Subscriber<? super Integer>> ref = new AtomicReference<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "TestObserver<Integer> to = Observable.range(1,2).debounce(new Function<Integer,ObservableSource<Integer>>(){@Override public ObservableSource<Integer> apply(Integer o){if (o != 1) {return Observable.never()}return new Observable<Integer>(){@Override protected void subscribeActual(Observer<? super Integer> observer){observer.onSubscribe(Disposable.empty())ref.set(observer)}}}}).test()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "emitLate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "emitLate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
8->10 [style = bold, label=""];
1->2 [style = bold, label=""];
1->10 [style = dashed, label="0"];
7->4 [style = bold, label=""];
5->6 [style = bold, label=""];
0->9 [style = dashed, label="0"];
3->1 [style = bold, label=""];
2->7 [style = dashed, label="0"];
2->4 [style = bold, label=""];
10->7 [style = bold, label=""];
1->6 [style = dashed, label="0"];
4->0 [style = bold, label=""];
6->2 [style = bold, label=""];
}
