digraph {
8 [style = filled, label = "Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testAvgDailyCountDistinctHllSketch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9d6fac)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testAvgDailyCountDistinctHllSketch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(expected,actual)@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Query expected = GroupByQuery.builder().setDataSource(new QueryDataSource(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setVirtualColumns(new ExpressionVirtualColumn(\"v0\",\"timestamp_floor(\"__time\",'P1D',null,'UTC')\",ValueType.LONG,TestExprMacroTable.INSTANCE)).setDimensions(Collections.singletonList(new DefaultDimensionSpec(\"v0\",\"v0\",ValueType.LONG))).setAggregatorSpecs(Collections.singletonList(new HllSketchBuildAggregatorFactory(\"a0:a\",\"cnt\",null,null,ROUND))).setPostAggregatorSpecs(ImmutableList.of(new FinalizingFieldAccessPostAggregator(\"a0\",\"a0:a\"))).setContext(QUERY_CONTEXT_DEFAULT).build())).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setAggregatorSpecs(Arrays.asList(new LongSumAggregatorFactory(\"_a0:sum\",\"a0\"),new CountAggregatorFactory(\"_a0:count\"))).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"_a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"_a0:sum\"),new FieldAccessPostAggregator(null,\"_a0:count\"))))).setContext(QUERY_CONTEXT_DEFAULT).build()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "final String sql = \"SELECT\" + \" AVG(u)\" + \"FROM (\" + \" SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\" + \" FROM druid.foo\" + \" GROUP BY 1\" + \")\"@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Query expected = GroupByQuery.builder().setDataSource(new QueryDataSource(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setVirtualColumns(new ExpressionVirtualColumn(\"v0\",\"timestamp_floor(\"__time\",'P1D',null,'UTC')\",ValueType.LONG,TestExprMacroTable.INSTANCE)).setDimensions(Collections.singletonList(new DefaultDimensionSpec(\"v0\",\"v0\",ValueType.LONG))).setAggregatorSpecs(Collections.singletonList(new SketchMergeAggregatorFactory(\"a0:a\",\"cnt\",null,null,null,null))).setPostAggregatorSpecs(ImmutableList.of(new FinalizingFieldAccessPostAggregator(\"a0\",\"a0:a\"))).setContext(QUERY_CONTEXT_DEFAULT).build())).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setAggregatorSpecs(Arrays.asList(new LongSumAggregatorFactory(\"_a0:sum\",\"a0\"),new CountAggregatorFactory(\"_a0:count\"))).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"_a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"_a0:sum\"),new FieldAccessPostAggregator(null,\"_a0:count\"))))).setContext(QUERY_CONTEXT_DEFAULT).build()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int i = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,QUERY_CONTEXT_DEFAULT,authenticationResult).toList()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Query expected = GroupByQuery.builder().setDataSource(new QueryDataSource(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setVirtualColumns(new ExpressionVirtualColumn(\"v0\",\"timestamp_floor(\"__time\",'P1D',null,'UTC')\",ValueType.LONG,TestExprMacroTable.INSTANCE)).setDimensions(Collections.singletonList(new DefaultDimensionSpec(\"v0\",\"v0\",ValueType.LONG))).setAggregatorSpecs(Collections.singletonList(new HllSketchBuildAggregatorFactory(\"a0:a\",\"cnt\",null,null))).setPostAggregatorSpecs(ImmutableList.of(new FinalizingFieldAccessPostAggregator(\"a0\",\"a0:a\"))).setContext(QUERY_CONTEXT_DEFAULT).build())).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setAggregatorSpecs(Arrays.asList(new LongSumAggregatorFactory(\"_a0:sum\",\"a0\"),new CountAggregatorFactory(\"_a0:count\"))).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"_a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"_a0:sum\"),new FieldAccessPostAggregator(null,\"_a0:count\"))))).setContext(QUERY_CONTEXT_DEFAULT).build()@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "i < expectedResults.size()@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i++@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final String sql = \"SELECT\" + \" AVG(u)\" + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertArrayEquals(expectedResults.get(i),results.get(i))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testAvgDailyCountDistinctThetaSketch['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final String sql = \"SELECT\" + \" AVG(u)\" + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u FROM druid.foo GROUP BY 1)\"@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10->15 [style = dashed, label="0"];
17->8 [style = bold, label=""];
15->2 [style = bold, label=""];
7->17 [style = bold, label=""];
14->3 [style = solid, label="expected"];
0->12 [style = solid, label="i"];
7->12 [style = bold, label=""];
1->15 [style = bold, label=""];
8->3 [style = solid, label="actual"];
8->3 [style = bold, label=""];
12->11 [style = bold, label=""];
11->7 [style = solid, label="i"];
6->17 [style = dashed, label="0"];
2->9 [style = bold, label=""];
6->14 [style = dashed, label="0"];
16->2 [style = bold, label=""];
13->1 [style = bold, label=""];
7->12 [style = dotted, label="true"];
0->7 [style = bold, label=""];
7->14 [style = bold, label=""];
6->3 [style = solid, label="expected"];
7->11 [style = dotted, label="true"];
11->12 [style = solid, label="i"];
5->0 [style = bold, label=""];
18->1 [style = bold, label=""];
1->16 [style = bold, label=""];
0->11 [style = solid, label="i"];
6->8 [style = bold, label=""];
7->6 [style = bold, label=""];
9->5 [style = bold, label=""];
10->2 [style = bold, label=""];
4->1 [style = bold, label=""];
14->8 [style = bold, label=""];
10->16 [style = dashed, label="0"];
1->10 [style = bold, label=""];
17->3 [style = solid, label="expected"];
11->7 [style = bold, label=""];
0->7 [style = solid, label="i"];
}
