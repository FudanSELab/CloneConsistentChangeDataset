digraph {
7 [style = filled, label = "assertDataSourceParameter(actual.getDataSources().get(\"read_ds_0\"),\"jdbc:mysql://127.0.0.1:3306/read_ds_0\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(actual.getSchemaName(),is(\"readwrite_splitting_db\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEncryptRuleConfiguration(encryptRuleConfig.get())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(ruleConfig.isPresent())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(actual.getDataSources().size(),is(3))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(actual.getDataSources().size(),is(1))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final YamlProxyRuleConfiguration actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertNotNull(actual.getDataSource())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(actual.getSchemaName(),is(\"encrypt_db\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertDataSourceParameter(actual.getDataSources().get(\"write_ds\"),\"jdbc:mysql://127.0.0.1:3306/write_ds\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertDataSourceParameter(actual.getDataSources().get(\"read_ds_1\"),\"jdbc:mysql://127.0.0.1:3306/read_ds_1\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertFalse(actual.getRules().stream().filter(null).findFirst().map(null).isPresent())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertFalse(actual.getRules().stream().filter(null).findFirst().map(null).isPresent())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Optional<YamlReadwriteSplittingRuleConfiguration> ruleConfig = actual.getRules().stream().filter(null).findFirst().map(null)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertReadwriteSplittingRuleConfiguration['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final YamlProxyRuleConfiguration actual@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEncryptRuleConfiguration['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertNull(actual.getDataSource())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertReadwriteSplittingRuleConfiguration['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertTrue(encryptRuleConfig.isPresent())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Optional<YamlEncryptRuleConfiguration> encryptRuleConfig = actual.getRules().stream().filter(null).findFirst().map(null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertDataSourceParameter(actual.getDataSources().get(\"dataSource\"),\"jdbc:mysql://127.0.0.1:3306/encrypt_ds\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertReadwriteSplittingRuleConfiguration(each)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13->6 [style = dotted, label="true"];
10->20 [style = bold, label=""];
9->11 [style = bold, label=""];
16->10 [style = bold, label=""];
9->2 [style = bold, label=""];
7->12 [style = bold, label=""];
22->16 [style = bold, label=""];
1->15 [style = dashed, label="0"];
5->6 [style = dotted, label="true"];
10->3 [style = bold, label=""];
11->17 [style = dashed, label="0"];
15->19 [style = bold, label=""];
17->22 [style = bold, label=""];
0->20 [style = dashed, label="0"];
3->4 [style = bold, label=""];
13->1 [style = bold, label=""];
1->9 [style = bold, label=""];
4->0 [style = bold, label=""];
6->18 [style = dashed, label="0"];
9->19 [style = dashed, label="0"];
5->1 [style = bold, label=""];
12->10 [style = bold, label=""];
2->21 [style = dashed, label="0"];
0->8 [style = bold, label=""];
14->15 [style = bold, label=""];
21->17 [style = bold, label=""];
14->18 [style = dotted, label="true"];
2->11 [style = bold, label=""];
11->7 [style = bold, label=""];
3->16 [style = dashed, label="0"];
19->21 [style = bold, label=""];
}
