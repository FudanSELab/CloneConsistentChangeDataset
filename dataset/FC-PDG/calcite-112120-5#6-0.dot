digraph {
10 [style = filled, label = "implementNotNullAdd['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Expression next = Expressions.call(method.getDeclaringClass(),method.getName(),acc,Expressions.unbox(arg))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "builtInMethod = BuiltInMethod.BIT_OR@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "AggContext info@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final Method method = builtInMethod.method@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Expression acc = add.accumulator().get(0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final BuiltInMethod builtInMethod@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "accAdvance(add,acc,next)@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Expression next = Expressions.call(method.getDeclaringClass(),method.getName(),acc,Expressions.unbox(arg))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "AggContext info@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "implementNotNullAdd['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "builtInMethod = BuiltInMethod.BIT_XOR@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "builtInMethod = BuiltInMethod.BIT_AND@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Expression arg = add.arguments().get(0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "implementNotNullAdd['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final Method method = (isMin? BuiltInMethod.LESSER: BuiltInMethod.GREATER).method@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "accAdvance(add,acc,next)@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "SqlAggFunction aggregation = info.aggregation()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final boolean isMin = info.aggregation().kind == SqlKind.MIN@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "AggAddContext add@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "throw new IllegalArgumentException(\"Unknown \" + aggregation.getName() + \". Only support bit_and, bit_or and bit_xor for bit aggregation function\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "AggAddContext add@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final Method method = (aggregation == MIN? BuiltInMethod.LESSER: BuiltInMethod.GREATER).method@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "aggregation.kind@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23->16 [style = dotted, label="true"];
7->17 [style = solid, label="acc"];
11->12 [style = solid, label="isMin"];
23->16 [style = bold, label=""];
23->20 [style = bold, label=""];
16->13 [style = bold, label=""];
20->13 [style = bold, label=""];
15->13 [style = bold, label=""];
0->6 [style = bold, label=""];
2->3 [style = solid, label="next"];
2->3 [style = bold, label=""];
23->15 [style = bold, label=""];
11->12 [style = bold, label=""];
0->11 [style = dashed, label="0"];
1->4 [style = dotted, label="true"];
19->17 [style = bold, label=""];
7->8 [style = bold, label=""];
10->9 [style = dotted, label="true"];
10->5 [style = dotted, label="true"];
1->7 [style = bold, label=""];
10->7 [style = bold, label=""];
22->23 [style = bold, label=""];
6->2 [style = bold, label=""];
6->12 [style = dashed, label="0"];
8->0 [style = bold, label=""];
7->19 [style = solid, label="acc"];
12->2 [style = bold, label=""];
13->19 [style = bold, label=""];
23->20 [style = dotted, label="true"];
8->19 [style = solid, label="arg"];
23->18 [style = dotted, label="true"];
8->2 [style = solid, label="arg"];
7->3 [style = solid, label="acc"];
5->3 [style = solid, label="add"];
0->22 [style = bold, label=""];
4->3 [style = solid, label="add"];
7->2 [style = solid, label="acc"];
18->13 [style = bold, label=""];
21->14 [style = dotted, label="true"];
5->17 [style = solid, label="add"];
21->7 [style = bold, label=""];
23->15 [style = dotted, label="true"];
0->6 [style = solid, label="aggregation"];
8->11 [style = bold, label=""];
19->17 [style = solid, label="next"];
23->18 [style = bold, label=""];
1->5 [style = dotted, label="true"];
21->5 [style = dotted, label="true"];
}
