digraph {
8 [style = filled, label = "ResourceMatcher resourceMatcher = new ResourceMatcher(Arrays.asList(\"-static/**\",\"foo.jar\"),Arrays.asList(\"-**/*.jar\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(excludes).doesNotContain(\"**/*.jar\")@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "includedDeltasAndNewEntries['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Collection<String> includes = (Collection<String>)ReflectionTestUtils.getField(resourceMatcher,\"includes\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ResourceMatcher resourceMatcher = new ResourceMatcher(Arrays.asList(\"\"),Arrays.asList(\"\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(includes).contains(\"templates/**\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "defaults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(includes).doesNotContain(\"static/**\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(excludes).contains(\"**/*.jar\")@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(includes).contains(\"foo.jar\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "defaults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Collection<String> excludes = (Collection<String>)ReflectionTestUtils.getField(resourceMatcher,\"excludes\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(includes).contains(\"static/**\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->0 [style = bold, label=""];
6->4 [style = bold, label=""];
8->0 [style = solid, label="resourceMatcher"];
1->2 [style = bold, label=""];
1->9 [style = bold, label=""];
9->12 [style = bold, label=""];
5->12 [style = dashed, label="0"];
4->8 [style = dashed, label="0"];
4->0 [style = bold, label=""];
7->8 [style = bold, label=""];
4->1 [style = solid, label="resourceMatcher"];
11->10 [style = bold, label=""];
3->4 [style = bold, label=""];
0->1 [style = bold, label=""];
2->9 [style = dashed, label="0"];
4->0 [style = solid, label="resourceMatcher"];
8->1 [style = solid, label="resourceMatcher"];
2->5 [style = bold, label=""];
12->11 [style = bold, label=""];
}
