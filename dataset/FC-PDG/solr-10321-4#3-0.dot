digraph {
0 [style = filled, label = "return expression@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "toExpression['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "StreamFactory factory@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "boolean includeStreams@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "expression.addParameter(op.toExpression(factory))@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "toExpression['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expression.addParameter(evaluator.toExpression(factory))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "toExpression['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "boolean includeStreams@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "includeStreams@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "throw new IOException(\"This ReducerStream contains a non-expressible operation - it cannot be converted to an expression\")@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "boolean includeStreams@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)eq).toExpression(factory)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "expression.addParameter(\"<stream>\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "op instanceof Expressible@@@16@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "eq instanceof Expressible@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "expression.addParameter(stream.toExpression(factory))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expression.addParameter(((Expressible)stream).toExpression(factory))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "evaluator instanceof Expressible@@@10@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "throw new IOException(\"This HavingStream contains a non-expressible evaluator - it cannot be converted to an expression\")@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12->0 [style = bold, label=""];
5->14 [style = bold, label=""];
2->10 [style = solid, label="includeStreams"];
8->12 [style = solid, label="factory"];
4->6 [style = bold, label=""];
18->20 [style = dotted, label="true"];
4->14 [style = dashed, label="0"];
1->8 [style = dotted, label="true"];
18->20 [style = bold, label=""];
1->9 [style = bold, label=""];
10->7 [style = dotted, label="false"];
4->3 [style = dotted, label="false"];
8->20 [style = solid, label="factory"];
7->18 [style = bold, label=""];
6->0 [style = bold, label=""];
20->4 [style = bold, label=""];
13->11 [style = dotted, label="true"];
14->12 [style = bold, label=""];
13->8 [style = dotted, label="true"];
14->15 [style = dotted, label="false"];
5->19 [style = dashed, label="0"];
14->12 [style = dotted, label="true"];
5->4 [style = bold, label=""];
10->19 [style = bold, label=""];
7->14 [style = bold, label=""];
6->12 [style = dashed, label="0"];
10->7 [style = bold, label=""];
15->0 [style = bold, label=""];
8->5 [style = solid, label="factory"];
11->10 [style = solid, label="includeStreams"];
7->4 [style = bold, label=""];
18->21 [style = dotted, label="false"];
3->0 [style = bold, label=""];
3->15 [style = dashed, label="0"];
18->21 [style = bold, label=""];
1->2 [style = dotted, label="true"];
16->8 [style = dotted, label="true"];
8->19 [style = solid, label="factory"];
17->10 [style = solid, label="includeStreams"];
13->9 [style = bold, label=""];
16->9 [style = bold, label=""];
10->19 [style = dotted, label="true"];
4->6 [style = dotted, label="true"];
21->4 [style = bold, label=""];
14->15 [style = bold, label=""];
19->18 [style = bold, label=""];
4->3 [style = bold, label=""];
16->17 [style = dotted, label="true"];
10->5 [style = bold, label=""];
9->0 [style = solid, label="expression"];
10->5 [style = dotted, label="true"];
9->10 [style = bold, label=""];
8->6 [style = solid, label="factory"];
}
