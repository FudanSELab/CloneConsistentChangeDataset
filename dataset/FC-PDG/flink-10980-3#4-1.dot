digraph {
1 [style = filled, label = "final File testFolder = tempFolder.newFolder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final BucketState recoveredState = SimpleVersionedSerialization.readVersionAndDeSerialize(serializer,bytes)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "stream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "stream.close()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final byte(( bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer,bucketState)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final BucketState bucketState = new BucketState(\"test\",testBucket,Long.MAX_VALUE,current,new HashMap<>())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testSerializationEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final SimpleVersionedSerializer<BucketState> serializer = new BucketStateSerializer(writer.getResumeRecoverableSerializer(),writer.getCommitRecoverableSerializer())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(testBucket,recoveredState.getBucketPath())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final FileSystem fs = FileSystem.get(testFolder.toURI())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testSerializationOnlyInProgress['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final RecoverableWriter writer = fs.createRecoverableWriter()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(1L,statuses.length)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertTrue(statuses(0(.getPath().getPath().startsWith((new Path(testBucket.getParent(),\".test.inprogress\")).toString()))@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertNull(recoveredState.getInProgress())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "final Path testBucket = new Path(testFolder.getPath(),\"test\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final RecoverableWriter writer = fs.createRecoverableWriter()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final RecoverableFsDataOutputStream stream = writer.open(testBucket)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertTrue(recoveredState.getPendingPerCheckpoint().isEmpty())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "FileStatus(( statuses = fs.listStatus(testBucket.getParent())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final RecoverableWriter.ResumeRecoverable current = stream.persist()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final SimpleVersionedSerializer<BucketState> serializer = new BucketStateSerializer(writer.getResumeRecoverableSerializer(),writer.getCommitRecoverableSerializer())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "final BucketState<String> recoveredState = SimpleVersionedSerialization.readVersionAndDeSerialize(serializer,bytes)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "final SimpleVersionedSerializer<BucketState<String>> serializer = new BucketStateSerializer<>(writer.getResumeRecoverableSerializer(),writer.getCommitRecoverableSerializer(),SimpleVersionedStringSerializer.INSTANCE)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "final BucketState recoveredState = SimpleVersionedSerialization.readVersionAndDeSerialize(serializer,bytes)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(testBucket,recoveredState.getBucketPath())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testSerializationEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "byte(( bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer,bucketState)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final BucketState<String> bucketState = new BucketState<>(\"test\",testBucket,Long.MAX_VALUE,null,new HashMap<>())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final BucketState bucketState = new BucketState(\"test\",testBucket,Long.MAX_VALUE,null,new HashMap<>())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->13 [style = dashed, label="0"];
13->10 [style = bold, label=""];
5->10 [style = bold, label=""];
23->25 [style = bold, label=""];
2->7 [style = solid, label="testBucket"];
29->17 [style = bold, label=""];
28->18 [style = bold, label=""];
15->6 [style = solid, label="serializer"];
20->29 [style = solid, label="bucketState"];
6->13 [style = solid, label="bytes"];
4->6 [style = bold, label=""];
7->14 [style = dashed, label="0"];
18->26 [style = bold, label=""];
2->14 [style = solid, label="testBucket"];
1->3 [style = bold, label=""];
2->18 [style = solid, label="testBucket"];
11->29 [style = bold, label=""];
14->6 [style = solid, label="bucketState"];
11->29 [style = solid, label="serializer"];
15->6 [style = bold, label=""];
7->4 [style = bold, label=""];
2->21 [style = solid, label="testBucket"];
11->12 [style = dashed, label="0"];
4->6 [style = solid, label="serializer"];
12->0 [style = bold, label=""];
17->19 [style = bold, label=""];
2->10 [style = solid, label="testBucket"];
26->22 [style = bold, label=""];
25->27 [style = bold, label=""];
6->5 [style = bold, label=""];
4->5 [style = solid, label="serializer"];
29->19 [style = solid, label="bytes"];
11->0 [style = bold, label=""];
6->5 [style = solid, label="bytes"];
6->29 [style = dashed, label="0"];
3->2 [style = bold, label=""];
8->2 [style = bold, label=""];
16->1 [style = bold, label=""];
22->20 [style = bold, label=""];
10->12 [style = bold, label=""];
4->15 [style = dashed, label="0"];
3->8 [style = bold, label=""];
6->13 [style = bold, label=""];
7->6 [style = solid, label="bucketState"];
2->14 [style = bold, label=""];
2->20 [style = solid, label="testBucket"];
15->13 [style = solid, label="serializer"];
11->19 [style = solid, label="serializer"];
14->15 [style = bold, label=""];
2->7 [style = bold, label=""];
24->1 [style = bold, label=""];
9->1 [style = bold, label=""];
21->23 [style = bold, label=""];
2->28 [style = bold, label=""];
22->20 [style = solid, label="current"];
20->11 [style = bold, label=""];
10->11 [style = bold, label=""];
19->21 [style = bold, label=""];
}
