digraph {
3 [style = filled, label = "DisjunctionMaxQuery bQuery = (DisjunctionMaxQuery)query@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertThat(query,instanceOf())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Query query = queryStringQuery(\"test\").field(TEXT_FIELD_NAME).field(KEYWORD_FIELD_NAME).toQuery(createSearchExecutionContext())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(assertDisjunctionSubQuery(query,,1).getTerm(),equalTo(new Term(KEYWORD_FIELD_NAME,\"test\")))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery)query@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(dQuery.getDisjuncts().size(),equalTo(2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testToQueryMultipleFieldsBooleanQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testToQueryMultipleFieldsBooleanQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "testToQueryMultipleFieldsDisableDismax['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(assertDisjunctionSubQuery(query,,0).getTerm(),equalTo(new Term(TEXT_FIELD_NAME,\"test\")))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Query query = multiMatchQuery(\"test\").field(TEXT_FIELD_NAME).field(KEYWORD_FIELD_NAME).tieBreaker(1.0f).toQuery(createSearchExecutionContext())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery)query@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(assertDisjunctionSubQuery(query,,0).getTerm(),equalTo(new Term(TEXT_FIELD_NAME,\"test\")))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertThat(bQuery.getDisjuncts().size(),equalTo(2))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertThat(dQuery.getDisjuncts(),hasItems(new TermQuery(new Term(TEXT_FIELD_NAME,\"test\")),new TermQuery(new Term(KEYWORD_FIELD_NAME,\"test\"))))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertThat(dQuery.getDisjuncts().size(),equalTo(2))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(dQuery.getTieBreakerMultiplier(),equalTo(1.0f))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->6 [style = bold, label=""];
7->10 [style = bold, label=""];
2->3 [style = bold, label=""];
12->11 [style = bold, label=""];
0->16 [style = dashed, label="0"];
15->16 [style = bold, label=""];
1->13 [style = bold, label=""];
11->2 [style = bold, label=""];
14->1 [style = bold, label=""];
8->7 [style = bold, label=""];
3->0 [style = bold, label=""];
6->10 [style = dashed, label="0"];
11->15 [style = solid, label="query"];
6->1 [style = bold, label=""];
5->2 [style = bold, label=""];
5->11 [style = dashed, label="0"];
2->15 [style = bold, label=""];
5->2 [style = solid, label="query"];
9->5 [style = bold, label=""];
5->8 [style = solid, label="query"];
5->3 [style = solid, label="query"];
16->14 [style = bold, label=""];
3->8 [style = dashed, label="0"];
3->15 [style = dashed, label="0"];
11->2 [style = solid, label="query"];
0->7 [style = dashed, label="0"];
4->5 [style = bold, label=""];
2->8 [style = bold, label=""];
}
