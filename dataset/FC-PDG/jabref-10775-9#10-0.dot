digraph {
0 [style = filled, label = "assertEquals(\"\",AuthorList.fixAuthorLastNameFirstCommas(\"\",true,true))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"Smith, J.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith\",true,true))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"\",AuthorList.fixAuthorLastNameOnlyCommas(\"\",true))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(\"Smith\",AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\",false))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "String a = AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"von Neumann, John, Smith, John, and Black Brown, Peter\",AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,true))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(AuthorList.fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true),AuthorList.fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\"Smith\",AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\",false))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"\",AuthorList.fixAuthorLastNameFirstCommas(\"\",false,true))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testFixAuthorLastNameOnlyCommas['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(a,b)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"von Neumann, Smith and Black Brown\",AuthorList.fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"Smith, J. and Black Brown, P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith and Black Brown, Peter\",true,true))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"von Neumann, J., Smith, J., and Black Brown, P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"Smith\",AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\",true))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertSame(a,b)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"Smith, John and Black Brown, Peter\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith and Black Brown, Peter\",false,true))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testFixAuthorLastNameFirstCommasOxfordComma['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testFixAuthorLastNameFirstCommasOxfordComma['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertEquals(\"von Neumann, Smith, and Black Brown\",AuthorList.fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\"\",AuthorList.fixAuthorLastNameOnlyCommas(\"\",false))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(\"von Neumann, J. P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Peter von Neumann\",true,true))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"Smith, John\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith\",false,true))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(AuthorList.fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false),AuthorList.fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(\"Smith\",AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\",true))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "String b = AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->23 [style = dashed, label="0"];
2->5 [style = solid, label="a"];
7->12 [style = bold, label=""];
22->16 [style = bold, label=""];
11->16 [style = dashed, label="0"];
4->13 [style = bold, label=""];
1->3 [style = bold, label=""];
3->11 [style = bold, label=""];
18->17 [style = bold, label=""];
1->21 [style = dashed, label="0"];
3->22 [style = dashed, label="0"];
5->25 [style = dashed, label="0"];
2->9 [style = bold, label=""];
16->23 [style = bold, label=""];
15->18 [style = bold, label=""];
11->2 [style = bold, label=""];
19->25 [style = bold, label=""];
8->0 [style = bold, label=""];
9->19 [style = dashed, label="0"];
9->5 [style = solid, label="b"];
12->10 [style = bold, label=""];
14->0 [style = bold, label=""];
5->12 [style = bold, label=""];
24->21 [style = bold, label=""];
21->22 [style = bold, label=""];
0->1 [style = bold, label=""];
23->19 [style = bold, label=""];
10->17 [style = dashed, label="0"];
10->4 [style = bold, label=""];
9->5 [style = bold, label=""];
25->15 [style = bold, label=""];
0->24 [style = dashed, label="0"];
5->7 [style = bold, label=""];
7->15 [style = dashed, label="0"];
12->18 [style = dashed, label="0"];
13->6 [style = bold, label=""];
20->24 [style = bold, label=""];
9->7 [style = solid, label="b"];
2->7 [style = solid, label="a"];
}
