digraph {
6 [style = filled, label = "assertEquals(Boundedness.CONTINUOUS_UNBOUNDED,unbounded.getBoundedness())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final SourceTransformation<Integer> bounded = getSourceTransformation(\"Bounded Source\",Boundedness.BOUNDED)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,ScheduleMode.EAGER,true))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testDetectionThroughTransitivePredecessors['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(Boundedness.BOUNDED,bounded.getBoundedness())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testExplicitOverridesDetectedMode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED,graph.getGlobalDataExchangeMode())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final SourceTransformation<Integer> unbounded = getSourceTransformation(\"Unbounded Source\",Boundedness.CONTINUOUS_UNBOUNDED)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,bounded)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,streamingGraph.getGlobalDataExchangeMode())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testDetectionThroughTransitivePredecessors['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final TwoInputTransformation<Integer,Integer,Integer> resultTransform = new TwoInputTransformation<>(bounded,unbounded,\"Test Two Input Transformation\",SimpleOperatorFactory.of(new StreamGraphGeneratorTest.OutputTypeConfigurableOperationWithTwoInputs()),BasicTypeInfo.INT_TYPE_INFO,1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final StreamGraph streamingGraph = generateStreamGraph(RuntimeExecutionMode.STREAMING,bounded)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertFalse(graph.isAllVerticesInSameSlotSharingGroupByDefault())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(ScheduleMode.EAGER,streamingGraph.getScheduleMode())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(ScheduleMode.EAGER,graph.getScheduleMode())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,graph.getGlobalDataExchangeMode())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,resultTransform)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST,graph.getScheduleMode())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(streamingGraph.isAllVerticesInSameSlotSharingGroupByDefault())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(graph.isAllVerticesInSameSlotSharingGroupByDefault())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14->16 [style = bold, label=""];
6->3 [style = bold, label=""];
8->10 [style = bold, label=""];
3->8 [style = solid, label="resultTransform"];
16->13 [style = bold, label=""];
9->10 [style = dashed, label="0"];
9->0 [style = bold, label=""];
12->20 [style = bold, label=""];
8->10 [style = solid, label="graph"];
15->18 [style = bold, label=""];
5->3 [style = solid, label="unbounded"];
4->7 [style = bold, label=""];
2->12 [style = bold, label=""];
17->7 [style = bold, label=""];
0->14 [style = dashed, label="0"];
5->6 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
3->8 [style = bold, label=""];
8->9 [style = bold, label=""];
7->12 [style = solid, label="bounded"];
19->15 [style = bold, label=""];
7->18 [style = solid, label="bounded"];
20->19 [style = bold, label=""];
7->3 [style = solid, label="bounded"];
18->14 [style = bold, label=""];
11->7 [style = bold, label=""];
2->5 [style = bold, label=""];
}
