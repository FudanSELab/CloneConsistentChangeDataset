digraph {
0 [style = filled, label = "this == o@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return table().name().equals(that.table().name()) && readSchema().equals(that.readSchema()) && filterExpressions().toString().equals(that.filterExpressions().toString()) && ignoreResiduals == that.ignoreResiduals && Objects.equals(snapshotId,that.snapshotId)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "o == null || getClass() != o.getClass()@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return true@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "return false@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "SparkBatchQueryScan that = (SparkBatchQueryScan)o@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "equals['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return table().name().equals(that.table().name()) && readSchema().equals(that.readSchema()) && filterExpressions().toString().equals(that.filterExpressions().toString()) && ignoreResiduals == that.ignoreResiduals && Objects.equals(snapshotId,that.snapshotId) && Objects.equals(filteredLocations,that.filteredLocations)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Object o@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "equals['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "equals['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SparkMergeScan that = (SparkMergeScan)o@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return table().name().equals(that.table().name()) && readSchema().equals(that.readSchema()) && filterExpressions().toString().equals(that.filterExpressions().toString()) && Objects.equals(snapshotId,that.snapshotId) && Objects.equals(startSnapshotId,that.startSnapshotId) && Objects.equals(endSnapshotId,that.endSnapshotId) && Objects.equals(asOfTimestamp,that.asOfTimestamp)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
5->3 [style = bold, label=""];
6->8 [style = dashed, label="0"];
0->5 [style = dotted, label="true"];
1->8 [style = bold, label=""];
9->0 [style = bold, label=""];
3->1 [style = bold, label=""];
2->1 [style = bold, label=""];
3->11 [style = bold, label=""];
7->0 [style = bold, label=""];
12->0 [style = bold, label=""];
6->10 [style = dashed, label="0"];
4->0 [style = solid, label="o"];
1->6 [style = bold, label=""];
3->2 [style = bold, label=""];
11->10 [style = bold, label=""];
1->11 [style = dashed, label="0"];
7->4 [style = dotted, label="true"];
9->4 [style = dotted, label="true"];
12->4 [style = dotted, label="true"];
4->11 [style = solid, label="o"];
4->1 [style = solid, label="o"];
2->11 [style = bold, label=""];
4->3 [style = solid, label="o"];
3->2 [style = dotted, label="true"];
0->5 [style = bold, label=""];
}
