digraph {
18 [style = filled, label = "ctx.simpleExpr()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "ListExpression right = new ListExpression(ctx.simpleExpr(0).start.getStartIndex(),ctx.simpleExpr().get(ctx.simpleExpr().size() - 1).stop.getStopIndex())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "String operator@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "createBinaryOperationExpressionFromLike['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "operator = null != ctx.NOT()? \"NOT LIKE\": \"LIKE\"@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "ListExpression listExpression = new ListExpression(ctx.simpleExpr(0).start.getStartIndex(),ctx.simpleExpr().get(ctx.simpleExpr().size() - 1).stop.getStopIndex())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "null != ctx.SOUNDS()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "SimpleExprContext each@@@12@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "listExpression.getItems().add((ExpressionSegment)visit(each))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "String operator = null != ctx.NOT()? \"NOT LIKE\": \"LIKE\"@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "return result@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "createBinaryOperationExpressionFromLike['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "right.getItems().add((ExpressionSegment)visit(each))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final PredicateContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.bitExpr(0))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "createBinaryOperationExpressionFromLike['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ExpressionSegment right@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "operator = \"SOUNDS LIKE\"@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "right = listExpression@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "SimpleExprContext each@@@12@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "return result@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "right = (ExpressionSegment)visit(ctx.bitExpr(1))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->7 [style = dotted, label="false"];
8->10 [style = bold, label=""];
14->17 [style = solid, label="operator"];
1->8 [style = bold, label=""];
12->17 [style = solid, label="right"];
21->25 [style = solid, label="result"];
11->1 [style = bold, label=""];
2->12 [style = solid, label="listExpression"];
2->3 [style = bold, label=""];
11->16 [style = solid, label="left"];
10->3 [style = dotted, label="true"];
10->2 [style = dotted, label="false"];
19->11 [style = bold, label=""];
0->16 [style = solid, label="right"];
14->16 [style = solid, label="operator"];
3->12 [style = bold, label=""];
21->25 [style = bold, label=""];
20->21 [style = solid, label="text"];
12->9 [style = bold, label=""];
22->23 [style = bold, label=""];
24->21 [style = solid, label="operator"];
13->16 [style = bold, label=""];
26->11 [style = bold, label=""];
10->5 [style = dotted, label="false"];
22->21 [style = solid, label="right"];
0->17 [style = solid, label="right"];
10->14 [style = dotted, label="true"];
24->20 [style = bold, label=""];
20->21 [style = bold, label=""];
3->23 [style = dashed, label="0"];
10->12 [style = dotted, label="false"];
13->17 [style = bold, label=""];
0->14 [style = bold, label=""];
23->24 [style = bold, label=""];
16->4 [style = solid, label="result"];
13->17 [style = solid, label="text"];
15->11 [style = bold, label=""];
15->6 [style = dotted, label="true"];
10->0 [style = bold, label=""];
12->16 [style = solid, label="right"];
11->17 [style = solid, label="left"];
11->22 [style = bold, label=""];
11->21 [style = solid, label="left"];
10->0 [style = dotted, label="true"];
10->9 [style = dotted, label="false"];
10->2 [style = bold, label=""];
26->6 [style = dotted, label="true"];
19->6 [style = dotted, label="true"];
9->16 [style = solid, label="operator"];
14->13 [style = bold, label=""];
16->17 [style = dashed, label="0"];
16->4 [style = bold, label=""];
13->16 [style = solid, label="text"];
10->18 [style = dotted, label="false"];
9->13 [style = bold, label=""];
9->17 [style = solid, label="operator"];
}
