digraph {
14 [style = filled, label = "assertEquals(expectedByte,inResult.read())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "inResult = new BufferedInputStream(new FileInputStream(result))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "File expect@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(expectedByte,inResult.read())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "!result.exists()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEqualContent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "fail(\"Expected file \" + result + \" doesn't exist\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int expectedByte = inExpect.read()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "{if (inResult != null) {inResult.close()}if (inExpect != null) {inExpect.close()}}@@@18@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "inExpect = new BufferedInputStream(new FileInputStream(expect))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "File result@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEqualContent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "File expect@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "InputStream inExpect = null@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "File result@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "expectedByte != -1@@@9@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "int expectedByte = inExpect.read()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "InputStream inResult = null@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectedByte = inExpect.read()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectedByte != -1@@@12@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"End of file\",-1,inResult.read())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEqualContent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7->2 [style = dotted, label="true"];
21->12 [style = dotted, label="true"];
0->12 [style = dotted, label="true"];
6->3 [style = bold, label=""];
17->5 [style = bold, label=""];
2->19 [style = bold, label=""];
10->14 [style = solid, label="expectedByte"];
21->20 [style = dotted, label="true"];
7->1 [style = bold, label=""];
2->1 [style = bold, label=""];
19->16 [style = solid, label="expectedByte"];
12->9 [style = solid, label="expect"];
16->17 [style = dotted, label="true"];
9->4 [style = bold, label=""];
18->15 [style = dotted, label="true"];
5->6 [style = solid, label="expectedByte"];
14->10 [style = bold, label=""];
8->4 [style = solid, label="result"];
16->17 [style = bold, label=""];
5->16 [style = solid, label="expectedByte"];
11->9 [style = bold, label=""];
20->4 [style = solid, label="result"];
10->6 [style = bold, label=""];
19->17 [style = solid, label="expectedByte"];
1->11 [style = bold, label=""];
19->16 [style = bold, label=""];
0->7 [style = bold, label=""];
8->2 [style = solid, label="result"];
6->10 [style = dotted, label="true"];
0->8 [style = dotted, label="true"];
6->14 [style = bold, label=""];
5->16 [style = bold, label=""];
12->2 [style = solid, label="result"];
6->14 [style = dotted, label="true"];
18->12 [style = dotted, label="true"];
5->6 [style = bold, label=""];
5->14 [style = solid, label="expectedByte"];
20->2 [style = solid, label="result"];
7->2 [style = bold, label=""];
5->17 [style = solid, label="expectedByte"];
16->5 [style = dotted, label="true"];
9->13 [style = solid, label="inExpect"];
3->13 [style = bold, label=""];
21->7 [style = bold, label=""];
16->14 [style = bold, label=""];
4->13 [style = solid, label="inResult"];
18->7 [style = bold, label=""];
7->19 [style = bold, label=""];
4->5 [style = bold, label=""];
10->6 [style = solid, label="expectedByte"];
}
