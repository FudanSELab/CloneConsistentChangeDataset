digraph {
44 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",5),initialTime + 999))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",4),initialTime + 3999))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",5),initialTime + 1998))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testDeltaEvictorEvictBefore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",streamRecordSerializer)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 10999))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testHarness.open()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final int TRIGGER_COUNT = 2@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "long initialTime = 0L@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final int WINDOW_SIZE = 4@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",10),initialTime + 1000))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 20))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) TypeSerializer<StreamRecord<Tuple2<String,Integer>>> streamRecordSerializer = (TypeSerializer<StreamRecord<Tuple2<String,Integer>>>)new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final boolean EVICT_AFTER = true@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",6),initialTime + 1999))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness.close()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(TRIGGER_COUNT),DeltaEvictor.of(THRESHOLD,new DeltaFunction<Tuple2<String,Integer>>(){@Override public double getDelta(Tuple2<String,Integer> oldDataPoint,Tuple2<String,Integer> newDataPoint){return newDataPoint.f1 - oldDataPoint.f1}},EVICT_AFTER),0)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(\"Close was not called.\",1,closeCalled.get())@@@40@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "testHarness.close()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness.open()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3999))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "long initialTime = 0L@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final int THRESHOLD = 2@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",4),Long.MAX_VALUE))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",10),Long.MAX_VALUE))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",8),Long.MAX_VALUE))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "final boolean EVICT_AFTER = false@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),Long.MAX_VALUE))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",streamRecordSerializer)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),Long.MAX_VALUE))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(TRIGGER_COUNT),CountEvictor.of(WINDOW_SIZE,EVICT_AFTER),0,null)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",3),initialTime + 10999))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",11),Long.MAX_VALUE))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",6),Long.MAX_VALUE))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testCountEvictorEvictAfter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testCountEvictorEvictAfter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "AtomicInteger closeCalled = new AtomicInteger(0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35->48 [style = bold, label=""];
28->11 [style = solid, label="initialTime"];
20->52 [style = dashed, label="0"];
27->30 [style = solid, label="EVICT_AFTER"];
0->23 [style = solid, label="expectedOutput"];
0->31 [style = solid, label="expectedOutput"];
34->45 [style = solid, label="TRIGGER_COUNT"];
14->28 [style = bold, label=""];
49->45 [style = solid, label="EVICT_AFTER"];
25->35 [style = bold, label=""];
27->37 [style = solid, label="EVICT_AFTER"];
1->44 [style = dashed, label="0"];
4->44 [style = bold, label=""];
26->22 [style = bold, label=""];
37->9 [style = bold, label=""];
28->33 [style = solid, label="initialTime"];
15->38 [style = dashed, label="0"];
44->51 [style = bold, label=""];
21->18 [style = solid, label="initialTime"];
33->18 [style = bold, label=""];
33->46 [style = bold, label=""];
9->21 [style = bold, label=""];
1->12 [style = bold, label=""];
21->33 [style = solid, label="initialTime"];
41->22 [style = bold, label=""];
27->5 [style = bold, label=""];
20->15 [style = bold, label=""];
29->19 [style = solid, label="streamRecordSerializer"];
6->32 [style = bold, label=""];
5->29 [style = bold, label=""];
16->3 [style = bold, label=""];
21->0 [style = bold, label=""];
1->13 [style = solid, label="expectedOutput"];
21->20 [style = solid, label="initialTime"];
3->39 [style = dashed, label="0"];
50->30 [style = bold, label=""];
18->11 [style = bold, label=""];
8->46 [style = dashed, label="0"];
19->37 [style = bold, label=""];
0->7 [style = bold, label=""];
28->44 [style = solid, label="initialTime"];
30->45 [style = dashed, label="0"];
3->10 [style = bold, label=""];
28->15 [style = solid, label="initialTime"];
17->34 [style = bold, label=""];
30->45 [style = solid, label="stateDesc"];
45->14 [style = bold, label=""];
28->52 [style = solid, label="initialTime"];
28->43 [style = solid, label="initialTime"];
7->2 [style = bold, label=""];
34->37 [style = solid, label="TRIGGER_COUNT"];
39->35 [style = bold, label=""];
12->33 [style = bold, label=""];
22->17 [style = bold, label=""];
21->15 [style = solid, label="initialTime"];
21->8 [style = solid, label="initialTime"];
22->37 [style = solid, label="closeCalled"];
28->51 [style = solid, label="initialTime"];
32->31 [style = bold, label=""];
17->30 [style = solid, label="WINDOW_SIZE"];
19->37 [style = solid, label="stateDesc"];
16->40 [style = dashed, label="0"];
47->45 [style = solid, label="THRESHOLD"];
50->30 [style = solid, label="streamRecordSerializer"];
23->20 [style = bold, label=""];
4->24 [style = bold, label=""];
31->25 [style = bold, label=""];
0->10 [style = solid, label="expectedOutput"];
28->46 [style = solid, label="initialTime"];
34->49 [style = bold, label=""];
11->4 [style = bold, label=""];
37->9 [style = solid, label="operator"];
8->14 [style = bold, label=""];
30->9 [style = bold, label=""];
19->30 [style = solid, label="stateDesc"];
15->3 [style = bold, label=""];
3->42 [style = bold, label=""];
47->29 [style = bold, label=""];
28->38 [style = solid, label="initialTime"];
40->39 [style = bold, label=""];
29->19 [style = bold, label=""];
10->13 [style = bold, label=""];
29->50 [style = bold, label=""];
21->13 [style = solid, label="initialTime"];
28->4 [style = solid, label="initialTime"];
51->43 [style = bold, label=""];
13->6 [style = bold, label=""];
38->40 [style = bold, label=""];
13->52 [style = bold, label=""];
34->27 [style = bold, label=""];
22->45 [style = solid, label="closeCalled"];
21->1 [style = solid, label="initialTime"];
24->23 [style = bold, label=""];
1->35 [style = solid, label="expectedOutput"];
30->37 [style = dashed, label="0"];
22->30 [style = solid, label="closeCalled"];
21->12 [style = solid, label="initialTime"];
30->9 [style = solid, label="operator"];
27->49 [style = dashed, label="0"];
21->14 [style = solid, label="initialTime"];
12->51 [style = dashed, label="0"];
17->37 [style = solid, label="WINDOW_SIZE"];
52->38 [style = bold, label=""];
33->43 [style = dashed, label="0"];
28->1 [style = bold, label=""];
48->53 [style = bold, label=""];
45->14 [style = solid, label="operator"];
15->16 [style = bold, label=""];
46->11 [style = bold, label=""];
49->47 [style = bold, label=""];
43->15 [style = bold, label=""];
21->6 [style = solid, label="initialTime"];
22->34 [style = bold, label=""];
42->10 [style = bold, label=""];
34->30 [style = solid, label="TRIGGER_COUNT"];
21->28 [style = solid, label="initialTime"];
30->45 [style = bold, label=""];
2->8 [style = bold, label=""];
21->2 [style = solid, label="initialTime"];
19->30 [style = bold, label=""];
36->22 [style = bold, label=""];
}
