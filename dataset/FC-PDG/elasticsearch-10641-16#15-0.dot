digraph {
13 [style = filled, label = "HttpUtil.setContentLength(request,contentLength)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final Settings settings@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final FullHttpResponse continuationResponse = client.send(remoteAddress.address(),continuationRequest)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "{continuationResponse.release()}@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher(){@Override public void dispatchRequest(RestRequest request,RestChannel channel,ThreadContext threadContext){channel.sendResponse(new BytesRestResponse(OK,BytesRestResponse.TEXT_CONTENT_TYPE,new BytesArray(\"done\")))}@Override public void dispatchBadRequest(RestChannel channel,ThreadContext threadContext,Throwable cause){throw new AssertionError()}}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final FullHttpResponse response = client.post(remoteAddress.address(),request)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(new String(ByteBufUtil.getBytes(continuationResponse.content()),StandardCharsets.UTF_8),is(\"done\"))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final String expectation@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "transport.start()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final FullHttpResponse continuationResponse = client.post(remoteAddress.address(),continuationRequest)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(continuationResponse.status(),is(HttpResponseStatus.OK))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final FullHttpResponse response = client.send(remoteAddress.address(),request)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Settings settings@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "request.headers().set(HttpHeaderNames.EXPECT,expectation)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final FullHttpRequest continuationRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.POST,\"/\",Unpooled.EMPTY_BUFFER)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final HttpResponseStatus expectedStatus@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final HttpResponseStatus expectedStatus@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "{response.release()}@@@34@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final HttpResponseStatus expectedStatus@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "final int contentLength@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "expectedStatus.equals(HttpResponseStatus.CONTINUE)@@@22@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final int contentLength@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final String expectation@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(response.status(),equalTo(expectedStatus))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final int contentLength@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "runExpectHeaderTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "runExpectHeaderTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.POST,\"/\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "runExpectHeaderTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29->24 [style = dotted, label="true"];
18->3 [style = dotted, label="true"];
18->2 [style = bold, label=""];
20->21 [style = dotted, label="true"];
21->13 [style = solid, label="contentLength"];
27->3 [style = bold, label=""];
10->25 [style = dashed, label="0"];
12->11 [style = dotted, label="true"];
12->15 [style = bold, label=""];
13->25 [style = bold, label=""];
2->27 [style = solid, label="continuationRequest"];
20->15 [style = bold, label=""];
12->0 [style = dotted, label="true"];
22->8 [style = solid, label="expectedStatus"];
18->5 [style = bold, label=""];
9->3 [style = bold, label=""];
10->8 [style = bold, label=""];
4->13 [style = solid, label="request"];
29->26 [style = dotted, label="true"];
26->8 [style = solid, label="expectedStatus"];
19->13 [style = bold, label=""];
20->23 [style = dotted, label="true"];
2->9 [style = solid, label="continuationRequest"];
3->6 [style = bold, label=""];
17->4 [style = bold, label=""];
8->18 [style = bold, label=""];
18->6 [style = dotted, label="true"];
2->9 [style = bold, label=""];
4->19 [style = bold, label=""];
18->27 [style = dotted, label="true"];
29->14 [style = dotted, label="true"];
20->22 [style = dotted, label="true"];
15->16 [style = bold, label=""];
12->14 [style = dotted, label="true"];
2->27 [style = bold, label=""];
7->5 [style = bold, label=""];
29->15 [style = bold, label=""];
11->19 [style = solid, label="expectation"];
25->8 [style = bold, label=""];
18->2 [style = dotted, label="true"];
16->17 [style = bold, label=""];
4->25 [style = solid, label="request"];
6->7 [style = bold, label=""];
13->10 [style = bold, label=""];
12->1 [style = dotted, label="true"];
29->28 [style = dotted, label="true"];
4->10 [style = solid, label="request"];
0->8 [style = solid, label="expectedStatus"];
28->19 [style = solid, label="expectation"];
1->13 [style = solid, label="contentLength"];
18->9 [style = dotted, label="true"];
9->27 [style = dashed, label="0"];
24->13 [style = solid, label="contentLength"];
14->19 [style = solid, label="expectation"];
20->14 [style = dotted, label="true"];
}
