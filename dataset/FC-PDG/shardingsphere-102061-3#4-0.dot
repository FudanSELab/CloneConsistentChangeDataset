digraph {
9 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s algorithm segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "final AlgorithmSegment actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDiscoveryTypeName(),is(expected.getDiscoveryTypeName()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final ExpectedAlgorithm expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSources(),is(expected.getDataSources()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "null == expected@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s function segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),CoreMatchers.is(expected.getName()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual algorithm should exist.\"),actual)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "final DatabaseDiscoveryRuleSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final ExpectedDatabaseDiscoveryRule expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertDatabaseDiscoveryRule['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProps(),expected.getProps())@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertNull(assertContext.getText(\"Actual algorithm should not exist.\"),actual)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "final ExpectedAlgorithm expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"),actual)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final AlgorithmSegment actual@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertProps(assertContext,actual.getProps(),expected.getProps())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNull(assertContext.getText(\"Actual dataSource should not exist.\"),actual)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4->6 [style = dotted, label="true"];
13->6 [style = dotted, label="true"];
4->5 [style = dotted, label="true"];
8->10 [style = dashed, label="0"];
13->12 [style = dotted, label="true"];
0->10 [style = dotted, label="true"];
0->16 [style = dashed, label="0"];
2->1 [style = solid, label="actual"];
18->19 [style = dotted, label="true"];
18->15 [style = dotted, label="true"];
1->3 [style = bold, label=""];
22->21 [style = bold, label=""];
0->11 [style = bold, label=""];
8->20 [style = dashed, label="0"];
0->1 [style = dotted, label="false"];
9->7 [style = bold, label=""];
11->9 [style = bold, label=""];
12->0 [style = solid, label="expected"];
4->2 [style = dotted, label="true"];
4->0 [style = bold, label=""];
20->22 [style = bold, label=""];
0->8 [style = dotted, label="true"];
17->21 [style = solid, label="assertContext"];
0->9 [style = dotted, label="false"];
6->10 [style = solid, label="actual"];
0->10 [style = bold, label=""];
0->11 [style = dotted, label="false"];
18->16 [style = bold, label=""];
0->3 [style = dotted, label="false"];
3->7 [style = bold, label=""];
3->9 [style = dashed, label="0"];
1->11 [style = dashed, label="0"];
0->1 [style = bold, label=""];
0->7 [style = dotted, label="false"];
6->19 [style = dashed, label="0"];
2->8 [style = solid, label="actual"];
0->8 [style = bold, label=""];
18->17 [style = dotted, label="true"];
6->7 [style = solid, label="assertContext"];
13->14 [style = dotted, label="true"];
16->20 [style = bold, label=""];
5->0 [style = solid, label="expected"];
6->11 [style = solid, label="actual"];
13->0 [style = bold, label=""];
14->7 [style = solid, label="assertContext"];
}
