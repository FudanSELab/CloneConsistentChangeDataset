digraph {
5 [style = filled, label = "assertEquals(expected,builder.build().getExtension(UnittestProto.optionalNestedMessageExtension).getBb())@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testGetFieldBuilderWithExistingMessage['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Message.Builder fieldBuilder = builder.getFieldBuilder(UnittestProto.optionalNestedMessageExtension.getDescriptor())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testGetFieldBuilderForExtensionField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "TestAllExtensions.Builder builder = TestAllExtensions.newBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "fieldBuilder.setField(field,expected)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(builder.build().getExtension(UnittestProto.optionalNestedMessageExtension).getBb()).isEqualTo(expected)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "expected += 100@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(builder.build().getExtension(UnittestProto.optionalNestedMessageExtension).getBb()).isEqualTo(expected)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "fieldBuilder.setField(field,expected)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(expected,builder.build().getExtension(UnittestProto.optionalNestedMessageExtension).getBb())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "builder.setExtension(UnittestProto.optionalNestedMessageExtension,NestedMessage.newBuilder().setBb(123).build())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "int expected = 7432@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testGetFieldBuilderForExtensionField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "FieldDescriptor field = NestedMessage.getDescriptor().findFieldByNumber(NestedMessage.BB_FIELD_NUMBER)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
1->12 [style = solid, label="expected"];
1->4 [style = bold, label=""];
5->12 [style = dashed, label="0"];
7->10 [style = bold, label=""];
2->3 [style = bold, label=""];
3->6 [style = bold, label=""];
7->0 [style = bold, label=""];
9->4 [style = solid, label="field"];
6->0 [style = solid, label="expected"];
9->7 [style = bold, label=""];
6->10 [style = solid, label="expected"];
11->2 [style = bold, label=""];
1->4 [style = solid, label="expected"];
0->10 [style = dashed, label="0"];
8->2 [style = bold, label=""];
9->7 [style = solid, label="field"];
0->1 [style = bold, label=""];
1->5 [style = solid, label="expected"];
2->14 [style = bold, label=""];
4->12 [style = bold, label=""];
6->9 [style = bold, label=""];
10->1 [style = bold, label=""];
4->5 [style = bold, label=""];
13->2 [style = bold, label=""];
6->7 [style = solid, label="expected"];
}
