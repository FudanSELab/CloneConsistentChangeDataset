digraph {
23 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "verify(mockChannel,times(1)).read(isA())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "final ByteBufferSharingImpl inputSharingImpl = (ByteBufferSharingImpl)inputSharing@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "nioSslEngine.peerAppData = unwrappedBuffer@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final int individualRead = 60@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final int preexistingBytes = initialUnwrappedBufferSize - 7@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "readAtLeastUsingSmallAppBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "SocketChannel mockChannel = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertThat(inputSharing.getBuffer().capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@33@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ByteBuffer data = nioSslEngine.readAtLeast(mockChannel,amountToRead,wrappedBuffer)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@22@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "readAtLeastUsingSmallAppBufferAtWriteLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * testSSLEngine.getNumberOfUnwraps() + preexistingBytes)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final int individualRead = 150@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0->6 [style = bold, label=""];
29->9 [style = bold, label=""];
28->3 [style = bold, label=""];
26->24 [style = bold, label=""];
6->13 [style = solid, label="unwrappedBuffer"];
31->11 [style = bold, label=""];
19->6 [style = bold, label=""];
0->14 [style = solid, label="unwrappedBuffer"];
11->33 [style = bold, label=""];
13->30 [style = bold, label=""];
7->9 [style = solid, label="wrappedBuffer"];
35->4 [style = bold, label=""];
17->3 [style = solid, label="preexistingBytes"];
1->9 [style = solid, label="testSSLEngine"];
8->27 [style = solid, label="individualRead"];
10->35 [style = dashed, label="0"];
10->35 [style = bold, label=""];
24->20 [style = bold, label=""];
8->13 [style = solid, label="individualRead"];
34->6 [style = solid, label="initialUnwrappedBufferSize"];
7->18 [style = bold, label=""];
33->32 [style = solid, label="individualRead"];
4->32 [style = bold, label=""];
8->33 [style = dashed, label="0"];
15->4 [style = bold, label=""];
17->24 [style = solid, label="preexistingBytes"];
14->13 [style = bold, label=""];
1->29 [style = bold, label=""];
12->1 [style = bold, label=""];
33->34 [style = bold, label=""];
27->9 [style = bold, label=""];
34->36 [style = bold, label=""];
19->0 [style = solid, label="initialUnwrappedBufferSize"];
33->30 [style = solid, label="individualRead"];
19->0 [style = bold, label=""];
17->4 [style = solid, label="preexistingBytes"];
1->29 [style = dashed, label="0"];
5->9 [style = bold, label=""];
8->17 [style = bold, label=""];
6->22 [style = bold, label=""];
17->20 [style = solid, label="preexistingBytes"];
36->32 [style = solid, label="preexistingBytes"];
11->10 [style = solid, label="amountToRead"];
17->26 [style = solid, label="preexistingBytes"];
9->15 [style = solid, label="testSSLEngine"];
4->32 [style = dashed, label="0"];
4->2 [style = bold, label=""];
23->26 [style = bold, label=""];
2->3 [style = bold, label=""];
25->11 [style = bold, label=""];
8->26 [style = solid, label="individualRead"];
34->36 [style = solid, label="initialUnwrappedBufferSize"];
3->23 [style = bold, label=""];
15->28 [style = bold, label=""];
36->18 [style = bold, label=""];
13->12 [style = bold, label=""];
0->21 [style = solid, label="unwrappedBuffer"];
11->9 [style = solid, label="amountToRead"];
6->14 [style = bold, label=""];
8->4 [style = solid, label="individualRead"];
18->19 [style = bold, label=""];
11->8 [style = bold, label=""];
12->5 [style = solid, label="testSSLEngine"];
17->2 [style = solid, label="preexistingBytes"];
19->24 [style = solid, label="initialUnwrappedBufferSize"];
36->14 [style = solid, label="preexistingBytes"];
21->27 [style = bold, label=""];
19->10 [style = solid, label="mockChannel"];
10->15 [style = bold, label=""];
30->1 [style = bold, label=""];
22->21 [style = bold, label=""];
2->3 [style = solid, label="initialFreeSpace"];
17->7 [style = bold, label=""];
24->20 [style = solid, label="initialFreeSpace"];
17->6 [style = solid, label="preexistingBytes"];
18->10 [style = solid, label="wrappedBuffer"];
16->11 [style = bold, label=""];
19->2 [style = solid, label="initialUnwrappedBufferSize"];
9->10 [style = bold, label=""];
18->9 [style = solid, label="mockChannel"];
1->5 [style = bold, label=""];
}
