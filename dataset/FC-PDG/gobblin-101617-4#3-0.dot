digraph {
4 [style = filled, label = "dataWriter.commit()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "CopySource.serializeCopyableDataset(state,metadata)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "expectedContents(i( = (byte)((streamString(i( + 1) % 256)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "WorkUnitState state = TestUtils.createTestWorkUnitState()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "IOUtils.readFully(GPGFileDecryptor.decryptFile(new FileInputStream(writtenFilePath.toString()),.getResourceAsStream(GPGFileEncryptorTest.PRIVATE_KEY),GPGFileEncryptorTest.PASSPHRASE),decryptedContent)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,GPGFileEncryptorTest.PASSPHRASE)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(decryptedContent,streamString)@@@30@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "Assert.assertNotEquals(encryptedContent,streamString)@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "int i = 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "state.setProp(ConfigurationKeys.WRITER_FILE_PATH,RandomStringUtils.randomAlphabetic(5))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY,\"insecure_shift\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR,new Path(testTempPath,\"output\").toString())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "FileUtils.copyInputStreamToFile(.getResourceAsStream(GPGFileEncryptorTest.PUBLIC_KEY),publicKeyFile)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertEquals(IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString())),expectedContents)@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "CopySource.serializeCopyEntity(state,cf)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),cf.getDatasetAndPartition(metadata).identifier()),cf.getDestination())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,GPGFileEncryptorTest.KEY_ID)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(writtenFilePath.getName().endsWith(\"gpg\"),\"Expected encryption name to be appended to destination\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),cf.getDatasetAndPartition(metadata).identifier()),cf.getDestination())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "byte(( decryptedContent = new byte((((@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "dataWriter.commit()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "state.setProp(ConfigurationKeys.WRITER_STAGING_DIR,new Path(testTempPath,\"staging\").toString())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "dataWriter.write(fileAwareInputStream)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "FileStatus status = fs.getFileStatus(testTempPath)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "i < streamString.length@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertTrue(writtenFilePath.getName().endsWith(\"insecure_shift\"),\"Expected encryption name to be appended to destination\")@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "byte(( encryptedContent = IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString()))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "OwnerAndPermission ownerAndPermission = new OwnerAndPermission(status.getOwner(),status.getGroup(),new FsPermission(FsAction.ALL,FsAction.ALL,FsAction.ALL))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "File publicKeyFile = new File(testTempPath.toString(),\"public.key\")@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,publicKeyFile.getAbsolutePath())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "FileAwareInputStream fileAwareInputStream = new FileAwareInputStream(cf,StreamUtils.convertStream(new ByteArrayInputStream(streamString)))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testWriteWithGPGAsymmetricEncryption['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "byte(( expectedContents = new byte((((@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state,1,0)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "dataWriter.write(fileAwareInputStream)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "i++@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "byte(( streamString = \"testEncryptedContents\".getBytes(\"UTF-8\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,.getResource(GPGFileEncryptorTest.PUBLIC_KEY).toString())@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY,\"gpg\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testWriteWithEncryption['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testWriteWithGPGAsymmetricEncryption['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7->24 [style = bold, label=""];
20->6 [style = bold, label=""];
38->41 [style = bold, label=""];
0->8 [style = bold, label=""];
41->35 [style = bold, label=""];
0->2 [style = solid, label="metadata"];
14->11 [style = bold, label=""];
4->2 [style = bold, label=""];
0->35 [style = solid, label="metadata"];
16->36 [style = solid, label="streamString"];
14->25 [style = dashed, label="0"];
40->16 [style = bold, label=""];
35->37 [style = bold, label=""];
2->1 [style = bold, label=""];
16->25 [style = solid, label="streamString"];
8->41 [style = solid, label="state"];
36->39 [style = solid, label="i"];
26->23 [style = bold, label=""];
17->25 [style = solid, label="cf"];
5->12 [style = bold, label=""];
31->29 [style = bold, label=""];
24->14 [style = bold, label=""];
0->19 [style = solid, label="metadata"];
39->33 [style = bold, label=""];
17->2 [style = solid, label="cf"];
27->28 [style = bold, label=""];
15->38 [style = bold, label=""];
39->36 [style = solid, label="i"];
11->10 [style = solid, label="decryptedContent"];
16->2 [style = solid, label="streamString"];
1->25 [style = bold, label=""];
42->34 [style = bold, label=""];
16->3 [style = solid, label="streamString"];
6->27 [style = bold, label=""];
8->1 [style = solid, label="state"];
16->6 [style = solid, label="streamString"];
8->3 [style = solid, label="state"];
18->31 [style = bold, label=""];
37->3 [style = bold, label=""];
2->1 [style = solid, label="fileAwareInputStream"];
20->28 [style = solid, label="decryptedContent"];
33->36 [style = dotted, label="true"];
8->35 [style = solid, label="state"];
8->2 [style = solid, label="state"];
17->3 [style = solid, label="cf"];
36->25 [style = solid, label="expectedContents"];
42->25 [style = solid, label="expectedContents"];
16->27 [style = solid, label="streamString"];
10->20 [style = bold, label=""];
16->20 [style = solid, label="streamString"];
13->15 [style = bold, label=""];
34->33 [style = solid, label="i"];
15->18 [style = bold, label=""];
18->22 [style = bold, label=""];
21->16 [style = bold, label=""];
34->33 [style = bold, label=""];
16->42 [style = bold, label=""];
17->41 [style = solid, label="cf"];
39->33 [style = solid, label="i"];
11->10 [style = bold, label=""];
3->19 [style = solid, label="fileAwareInputStream"];
12->3 [style = bold, label=""];
3->19 [style = bold, label=""];
19->4 [style = bold, label=""];
32->16 [style = bold, label=""];
24->1 [style = dashed, label="0"];
23->17 [style = bold, label=""];
25->7 [style = solid, label="fileAwareInputStream"];
17->0 [style = bold, label=""];
29->30 [style = bold, label=""];
22->5 [style = bold, label=""];
11->6 [style = solid, label="decryptedContent"];
23->17 [style = solid, label="ownerAndPermission"];
8->9 [style = bold, label=""];
33->39 [style = dotted, label="true"];
16->26 [style = bold, label=""];
18->38 [style = dashed, label="0"];
25->7 [style = bold, label=""];
9->13 [style = bold, label=""];
17->4 [style = solid, label="cf"];
8->37 [style = solid, label="state"];
10->27 [style = solid, label="encryptedContent"];
16->28 [style = solid, label="streamString"];
31->29 [style = solid, label="publicKeyFile"];
30->3 [style = bold, label=""];
34->36 [style = solid, label="i"];
14->20 [style = solid, label="encryptedContent"];
20->6 [style = solid, label="decryptedContent"];
8->4 [style = solid, label="state"];
8->19 [style = solid, label="state"];
33->36 [style = bold, label=""];
36->39 [style = bold, label=""];
33->26 [style = bold, label=""];
}
