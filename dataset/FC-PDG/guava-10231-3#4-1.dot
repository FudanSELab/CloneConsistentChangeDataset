digraph {
10 [style = filled, label = "forTree_breadthFirst_iterableIsLazy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('h','h','d','d')@@@8@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEqualCharNodes(Iterables.limit(result,2),\"hd\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEqualCharNodes(Iterables.limit(result,2),\"hd\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "forTree_breadthFirst_iterableIsLazy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('h','d')@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Iterable<Character> result = Traverser.forGraph(graph).breadthFirst('h')@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('h','h','d')@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('h','h','h','d','d')@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "forTree_breadthFirst_iterableIsLazy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "RequestSavingGraph graph = new RequestSavingGraph(TREE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
4->3 [style = solid, label="result"];
6->5 [style = bold, label=""];
4->6 [style = solid, label="result"];
1->8 [style = dashed, label="0"];
2->0 [style = bold, label=""];
9->0 [style = bold, label=""];
6->7 [style = bold, label=""];
3->1 [style = bold, label=""];
5->7 [style = dashed, label="0"];
0->4 [style = bold, label=""];
4->6 [style = bold, label=""];
3->8 [style = bold, label=""];
7->3 [style = bold, label=""];
10->0 [style = bold, label=""];
}
