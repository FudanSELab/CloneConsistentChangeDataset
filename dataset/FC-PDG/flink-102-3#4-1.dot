digraph {
41 [style = filled, label = "Assert.assertEquals(400,((Watermark)output.poll()).getTimestamp())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "content = new ArrayList<>()@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertTrue(watermark > lastSeenWatermark)@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "@SuppressWarnings(\"unchecked\") StreamRecord<String> element = (StreamRecord<String>)line@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "TextInputFormat format = new TextInputFormat(new Path(testBasePath))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertTrue(output.peek() instanceof Watermark)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "Map<Integer,List<String>> actualFileContents = new HashMap<>()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "lineCounter++@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final long watermarkInterval = 10@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(300,((Watermark)output.poll()).getTimestamp())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(TimeCharacteristic.IngestionTime,tester.getTimeCharacteristic())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "TypeInformation<String> typeInfo = TypeExtractor.getInputFormatTypes(format)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "OneInputStreamOperatorTestHarness<TimestampedFileInputSplit,String> tester = new OneInputStreamOperatorTestHarness<>(reader)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
96 [style = filled, label = "tester.processElement(new StreamRecord<>(new TimestampedFileInputSplit(modTimes.get(split.getPath().getName()),split.getSplitNumber(),split.getPath(),split.getStart(),split.getLength(),split.getHostnames())))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "tester.setProcessingTime(501)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
104 [style = filled, label = "List<String> content = actualFileContents.get(fileIdx)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertTrue(\"file\" + fileIdx + \" not found\",actualFileContents.keySet().contains(fileIdx))@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "tester.getOutput().clear()@@@75@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "tester.open()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Collections.sort(cntnt,new Comparator<String>(){@Override public int compare(String o1,String o2){return getLineNo(o1) - getLineNo(o2)}})@@@92@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "TextInputFormat format = new TextInputFormat(new Path(hdfsURI))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "reader.setOutputType(typeInfo,new ExecutionConfig())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "Tuple2<org.apache.hadoop.fs.Path,String> file = createFileAndFillWithData(testBasePath,\"file\",i,\"This is test line.\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "int fileIdx = Character.getNumericValue(element.getValue().charAt(0))@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "tester.setProcessingTime(201)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "Thread.sleep(10)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "expectedFileContents.put(i,file.f1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "lastSeenWatermark = watermark@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "StringBuilder cntntStr = new StringBuilder()@@@98@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Tuple2<org.apache.hadoop.fs.Path,String> file = createFileAndFillWithData(hdfsURI,\"file\",i,\"This is test line.\")@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "tester.getOutput().isEmpty() || tester.getOutput().size() != (LINES_PER_FILE + 1)@@@48@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "List<String> cntnt = actualFileContents.get(fileIdx)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
108 [style = filled, label = "StringBuilder cntntStr = new StringBuilder()@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "final OneInputStreamOperatorTestHarness<TimestampedFileInputSplit,String> tester = new OneInputStreamOperatorTestHarness<>(reader)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "content == null@@@58@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "int lineCounter = 0@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Map<Integer,List<String>> actualFileContents = new HashMap<>()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(500,((Watermark)output.poll()).getTimestamp())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "filesCreated.add(file.f0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "Map<Integer,String> expectedFileContents = new HashMap<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
97 [style = filled, label = "line instanceof StreamRecord@@@33@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Assert.assertTrue(output.isEmpty())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "int fileIdx = Character.getNumericValue(element.getValue().charAt(0))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "tester.close()@@@80@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "hdfs.delete(file,false)@@@63@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertTrue(output.peek() instanceof Watermark)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "tester.close()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "i++@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "content = new ArrayList<>()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "content.add(element.getValue() + \"\")@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "tester.processElement(new StreamRecord<>(new TimestampedFileInputSplit(modTimes.get(split.getPath().getName()),split.getSplitNumber(),split.getPath(),split.getStart(),split.getLength(),split.getHostnames())))@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Assert.assertEquals(1,tester.getOutput().size())@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "content == null@@@37@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,((Watermark)tester.getOutput().poll()).getTimestamp())@@@87@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "reader.setOutputType(typeInfo,tester.getExecutionConfig())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "Assert.assertEquals(NO_OF_FILES * LINES_PER_FILE + 1,tester.getOutput().size())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "actualFileContents.put(fileIdx,content)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "hdfs.delete(file,false)@@@83@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Set<org.apache.hadoop.fs.Path> filesCreated = new HashSet<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "Assert.assertTrue(\"file\" + fileIdx + \" not found\",actualFileContents.keySet().contains(fileIdx))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertTrue(output.peek() instanceof Watermark)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "Assert.assertEquals(expectedFileContents.get(fileIdx),cntntStr.toString())@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "tester.getExecutionConfig().setAutoWatermarkInterval(watermarkInterval)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "long watermark = ((Watermark)line).getTimestamp()@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "cntntStr.append(line)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(nextTimestamp - (nextTimestamp % watermarkInterval),watermark)@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "tester.getCheckpointLock()@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "int watermarkCounter = 0@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.fail(\"Unknown element in the list.\")@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(expectedFileContents.size(),actualFileContents.size())@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testFileReadingOperatorWithIngestionTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "String testBasePath = hdfsURI + \"/\" + UUID.randomUUID() + \"/\"@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "tester.setProcessingTime(401)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(NO_OF_FILES * LINES_PER_FILE,lineCounter)@@@77@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(nextTimestamp,element.getTimestamp())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "lastElement = line@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "long lastSeenWatermark = Long.MIN_VALUE@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "ConcurrentLinkedQueue<Object> output = tester.getOutput()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "Collections.sort(cntnt,new Comparator<String>(){@Override public int compare(String o1,String o2){return getLineNo(o1) - getLineNo(o2)}})@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "watermarkCounter++@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "tester.setTimeCharacteristic(TimeCharacteristic.IngestionTime)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,((Watermark)lastElement).getTimestamp())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "filesCreated.add(file.f0)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "FileInputSplit(( splits = format.createInputSplits(reader.getRuntimeContext().getNumberOfParallelSubtasks())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "line instanceof Watermark@@@64@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "testFileReadingOperatorWithEventTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(lastElement instanceof Watermark)@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "Object lastElement = null@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Map<Integer,String> expectedFileContents = new HashMap<>()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Map<String,Long> modTimes = new HashMap<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "Assert.assertEquals(expectedFileContents.get(fileIdx),cntntStr.toString())@@@102@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(expectedFileContents.size(),actualFileContents.size())@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "tester.setProcessingTime(301)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(splits.length,watermarkCounter)@@@78@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(200,((Watermark)output.poll()).getTimestamp())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "tester.getCheckpointLock()@@@79@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "tester.setTimeCharacteristic(TimeCharacteristic.EventTime)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "testFileReadingOperatorWithIngestionTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "FileInputSplit(( splits = format.createInputSplits(reader.getRuntimeContext().getNumberOfParallelSubtasks())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "tester.setProcessingTime(nextTimestamp)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "cntntStr.append(line)@@@100@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "i < NO_OF_FILES@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ContinuousFileReaderOperator<String> reader = new ContinuousFileReaderOperator<>(format)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "modTimes.put(file.f0.getName(),hdfs.getFileStatus(file.f0).getModificationTime())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "long nextTimestamp = tester.getProcessingTime() + watermarkInterval@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(tester.getOutput().peek() instanceof Watermark)@@@86@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "List<String> cntnt = actualFileContents.get(fileIdx)@@@91@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(output.peek() instanceof Watermark)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->50 [style = bold, label=""];
48->77 [style = bold, label=""];
0->30 [style = bold, label=""];
73->82 [style = bold, label=""];
62->14 [style = bold, label=""];
70->69 [style = bold, label=""];
76->51 [style = bold, label=""];
83->92 [style = bold, label=""];
59->7 [style = solid, label="cntnt"];
3->24 [style = bold, label=""];
25->45 [style = bold, label=""];
6->95 [style = bold, label=""];
89->83 [style = bold, label=""];
36->53 [style = bold, label=""];
57->29 [style = bold, label=""];
1->20 [style = bold, label=""];
17->45 [style = bold, label=""];
46->63 [style = solid, label="format"];
8->6 [style = bold, label=""];
66->62 [style = bold, label=""];
41->11 [style = bold, label=""];
30->49 [style = bold, label=""];
5->12 [style = dotted, label="true"];
47->27 [style = bold, label=""];
99->83 [style = solid, label="fileIdx"];
77->54 [style = solid, label="i"];
45->22 [style = dotted, label="true"];
45->64 [style = solid, label="content"];
58->17 [style = bold, label=""];
63->95 [style = solid, label="typeInfo"];
58->25 [style = dotted, label="true"];
75->68 [style = dotted, label="true"];
87->74 [style = bold, label=""];
21->2 [style = solid, label="watermarkCounter"];
56->83 [style = bold, label=""];
49->22 [style = solid, label="lineCounter"];
104->105 [style = bold, label=""];
94->70 [style = bold, label=""];
107->99 [style = bold, label=""];
21->1 [style = bold, label=""];
9->19 [style = solid, label="fileIdx"];
75->68 [style = bold, label=""];
8->35 [style = solid, label="watermarkInterval"];
43->0 [style = bold, label=""];
74->78 [style = solid, label="i"];
100->89 [style = bold, label=""];
54->78 [style = bold, label=""];
45->64 [style = bold, label=""];
97->104 [style = dotted, label="true"];
92->98 [style = solid, label="cntnt"];
86->106 [style = dotted, label="true"];
92->98 [style = bold, label=""];
77->67 [style = solid, label="i"];
46->6 [style = solid, label="format"];
105->64 [style = dotted, label="true"];
18->2 [style = solid, label="watermarkCounter"];
97->84 [style = bold, label=""];
19->103 [style = bold, label=""];
67->16 [style = bold, label=""];
80->70 [style = bold, label=""];
50->19 [style = bold, label=""];
99->92 [style = solid, label="fileIdx"];
97->107 [style = dotted, label="true"];
25->76 [style = bold, label=""];
54->46 [style = bold, label=""];
79->63 [style = bold, label=""];
9->59 [style = solid, label="fileIdx"];
64->22 [style = bold, label=""];
54->67 [style = dotted, label="true"];
58->47 [style = dotted, label="true"];
42->88 [style = dashed, label="0"];
6->93 [style = solid, label="reader"];
82->48 [style = bold, label=""];
67->73 [style = bold, label=""];
75->45 [style = bold, label=""];
99->89 [style = solid, label="fileIdx"];
79->6 [style = solid, label="format"];
50->39 [style = bold, label=""];
19->56 [style = bold, label=""];
78->16 [style = bold, label=""];
45->9 [style = dotted, label="true"];
45->50 [style = dotted, label="true"];
13->75 [style = bold, label=""];
108->100 [style = bold, label=""];
6->61 [style = bold, label=""];
46->63 [style = bold, label=""];
58->17 [style = dotted, label="false"];
81->80 [style = bold, label=""];
4->27 [style = solid, label="watermark"];
17->76 [style = bold, label=""];
84->97 [style = bold, label=""];
78->33 [style = solid, label="file"];
54->77 [style = dotted, label="true"];
95->93 [style = bold, label=""];
74->77 [style = solid, label="i"];
85->3 [style = bold, label=""];
73->48 [style = bold, label=""];
29->32 [style = bold, label=""];
22->51 [style = solid, label="lineCounter"];
99->104 [style = solid, label="fileIdx"];
14->57 [style = bold, label=""];
1->47 [style = solid, label="nextTimestamp"];
12->33 [style = bold, label=""];
18->25 [style = bold, label=""];
67->90 [style = solid, label="file"];
58->18 [style = dotted, label="true"];
45->39 [style = dotted, label="true"];
80->79 [style = solid, label="testBasePath"];
26->37 [style = bold, label=""];
16->73 [style = bold, label=""];
33->65 [style = bold, label=""];
99->104 [style = bold, label=""];
54->82 [style = dotted, label="true"];
4->47 [style = bold, label=""];
4->47 [style = solid, label="watermark"];
55->9 [style = bold, label=""];
72->37 [style = bold, label=""];
54->73 [style = dotted, label="true"];
27->18 [style = bold, label=""];
9->37 [style = solid, label="fileIdx"];
20->13 [style = bold, label=""];
10->87 [style = bold, label=""];
59->7 [style = bold, label=""];
79->63 [style = solid, label="format"];
35->42 [style = bold, label=""];
77->78 [style = solid, label="i"];
84->19 [style = solid, label="lastElement"];
58->4 [style = dotted, label="true"];
22->55 [style = bold, label=""];
54->48 [style = dotted, label="true"];
91->102 [style = bold, label=""];
96->86 [style = bold, label=""];
31->36 [style = bold, label=""];
1->55 [style = solid, label="nextTimestamp"];
63->6 [style = bold, label=""];
15->19 [style = solid, label="content"];
77->54 [style = bold, label=""];
15->19 [style = bold, label=""];
86->106 [style = bold, label=""];
105->45 [style = bold, label=""];
8->1 [style = solid, label="watermarkInterval"];
54->78 [style = dotted, label="true"];
71->72 [style = bold, label=""];
52->70 [style = bold, label=""];
45->58 [style = bold, label=""];
105->45 [style = dotted, label="true"];
56->45 [style = bold, label=""];
102->101 [style = bold, label=""];
8->47 [style = solid, label="watermarkInterval"];
80->78 [style = solid, label="testBasePath"];
7->28 [style = bold, label=""];
54->67 [style = bold, label=""];
24->31 [style = bold, label=""];
74->67 [style = solid, label="i"];
51->2 [style = bold, label=""];
98->108 [style = bold, label=""];
101->84 [style = bold, label=""];
49->51 [style = solid, label="lineCounter"];
4->25 [style = solid, label="watermark"];
77->48 [style = solid, label="i"];
50->84 [style = bold, label=""];
74->54 [style = solid, label="i"];
67->78 [style = dashed, label="0"];
9->72 [style = solid, label="fileIdx"];
32->41 [style = bold, label=""];
58->4 [style = bold, label=""];
69->10 [style = bold, label=""];
105->50 [style = bold, label=""];
25->27 [style = solid, label="lastSeenWatermark"];
21->18 [style = solid, label="watermarkCounter"];
38->40 [style = bold, label=""];
97->50 [style = dotted, label="true"];
40->44 [style = bold, label=""];
2->5 [style = bold, label=""];
61->35 [style = bold, label=""];
30->27 [style = solid, label="lastSeenWatermark"];
42->34 [style = bold, label=""];
39->15 [style = bold, label=""];
76->1 [style = bold, label=""];
11->38 [style = bold, label=""];
63->34 [style = solid, label="typeInfo"];
104->105 [style = solid, label="content"];
54->79 [style = bold, label=""];
99->64 [style = solid, label="fileIdx"];
39->19 [style = dotted, label="true"];
60->26 [style = bold, label=""];
97->19 [style = bold, label=""];
3->96 [style = bold, label=""];
58->27 [style = dotted, label="true"];
97->99 [style = dotted, label="true"];
97->105 [style = dotted, label="true"];
6->61 [style = solid, label="reader"];
54->16 [style = dotted, label="true"];
45->56 [style = dotted, label="true"];
49->21 [style = bold, label=""];
44->43 [style = bold, label=""];
23->60 [style = bold, label=""];
97->107 [style = bold, label=""];
9->50 [style = solid, label="fileIdx"];
45->64 [style = dotted, label="true"];
1->20 [style = solid, label="nextTimestamp"];
46->79 [style = dashed, label="0"];
39->15 [style = dotted, label="true"];
5->12 [style = bold, label=""];
34->3 [style = bold, label=""];
10->74 [style = bold, label=""];
53->66 [style = bold, label=""];
37->59 [style = bold, label=""];
39->56 [style = bold, label=""];
28->71 [style = bold, label=""];
50->39 [style = solid, label="content"];
45->55 [style = dotted, label="true"];
63->8 [style = bold, label=""];
68->75 [style = bold, label=""];
106->91 [style = bold, label=""];
103->56 [style = bold, label=""];
89->90 [style = bold, label=""];
56->76 [style = bold, label=""];
93->88 [style = bold, label=""];
88->85 [style = bold, label=""];
64->50 [style = bold, label=""];
67->33 [style = solid, label="file"];
45->58 [style = dotted, label="false"];
74->54 [style = bold, label=""];
74->48 [style = solid, label="i"];
70->10 [style = bold, label=""];
65->23 [style = bold, label=""];
}
