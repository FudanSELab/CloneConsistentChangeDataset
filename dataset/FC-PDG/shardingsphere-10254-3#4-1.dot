digraph {
2 [style = filled, label = "assertBuild['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"test_schema\",Collections.emptyList(),mock(),Collections.singletonMap(\"name\",mock(,RETURNS_DEEP_STUBS)),new ConfigurationProperties(new Properties())),ruleConfig,Collections.emptyList()),instanceOf())@@@5@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(builder.build(new SchemaRulesBuilderMaterials(\"test_schema\",Collections.emptyList(),mock(),Collections.singletonMap(\"name\",mock(,RETURNS_DEEP_STUBS)),new ConfigurationProperties(new Properties())),ruleConfig,Collections.emptyList()),instanceOf())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "AlgorithmProvidedShardingRuleConfiguration ruleConfig = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertBuild['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(,Collections.singletonList(ruleConfig)).get(ruleConfig)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ShardingRuleConfiguration ruleConfig = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertBuild['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
3->5 [style = dashed, label="0"];
1->5 [style = solid, label="ruleConfig"];
4->1 [style = bold, label=""];
6->3 [style = solid, label="ruleConfig"];
6->0 [style = bold, label=""];
1->0 [style = bold, label=""];
6->0 [style = solid, label="ruleConfig"];
1->6 [style = dashed, label="0"];
2->1 [style = bold, label=""];
0->5 [style = bold, label=""];
7->6 [style = bold, label=""];
1->3 [style = solid, label="ruleConfig"];
1->0 [style = solid, label="ruleConfig"];
}
