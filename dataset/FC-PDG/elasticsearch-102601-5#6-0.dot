digraph {
11 [style = filled, label = "assertEquals(ex.getCause().getClass(),)@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "tlog.add(new Translog.Index(\"test\",\"\" + 1,1,primaryTerm.get(),Integer.toString(1).getBytes(Charset.forName(\"UTF-8\"))))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertNotNull(\"operation \" + i + \" must be non-null\",next)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final TranslogDeletionPolicy deletionPolicy = translog.getDeletionPolicy()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertFalse(tlog.syncNeeded())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TranslogException ex = expectThrows(,null)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "TranslogConfig config = translog.getConfig()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "translog.close()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TranslogException ex = expectThrows(,null)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Translog.Operation next = snapshot.next()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testRecoverWithUnbackedNextGenInIllegalState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "Files.copy(ckp,config.getTranslogPath().resolve(Translog.getCommitCheckpointFileName(read.generation)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(ex.getMessage(),\"failed to create new translog file\")@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "translog.add(new Translog.Index(\"test\",\"\" + 0,0,primaryTerm.get(),Integer.toString(0).getBytes(Charset.forName(\"UTF-8\"))))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "i++@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Files.createFile(config.getTranslogPath().resolve(\"translog-\" + (read.generation + 1) + \".tlog\"))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testRecoverWithUnbackedNextGenAndFutureFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Path ckp = config.getTranslogPath().resolve(Translog.CHECKPOINT_FILE_NAME)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(ex.getCause().getClass(),)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Checkpoint read = Checkpoint.read(ckp)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Files.createFile(config.getTranslogPath().resolve(\"translog-\" + (read.generation + 2) + \".tlog\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\"payload missmatch\",i,Integer.parseInt(next.getSource().source.utf8ToString()))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "i < 1@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "int i = 0@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(ex.getCause().getClass(),)@@@11@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TranslogException ex = expectThrows(,null)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testRecoverWithUnbackedNextGenInIllegalState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(ex.getMessage(),\"failed to create new translog file\")@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final String translogUUID = translog.getTranslogUUID()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(ex.getMessage(),\"failed to create new translog file\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
8->28 [style = bold, label=""];
29->15 [style = bold, label=""];
26->7 [style = bold, label=""];
0->13 [style = bold, label=""];
5->23 [style = bold, label=""];
22->16 [style = bold, label=""];
2->6 [style = bold, label=""];
15->21 [style = bold, label=""];
20->21 [style = solid, label="i"];
16->29 [style = bold, label=""];
12->11 [style = bold, label=""];
14->22 [style = bold, label=""];
23->26 [style = bold, label=""];
18->19 [style = bold, label=""];
16->20 [style = dotted, label="true"];
16->25 [style = bold, label=""];
7->8 [style = bold, label=""];
29->15 [style = solid, label="next"];
25->17 [style = bold, label=""];
10->6 [style = bold, label=""];
27->6 [style = bold, label=""];
1->9 [style = bold, label=""];
24->14 [style = bold, label=""];
7->28 [style = solid, label="ckp"];
22->20 [style = solid, label="i"];
8->0 [style = bold, label=""];
28->0 [style = bold, label=""];
3->5 [style = bold, label=""];
13->12 [style = bold, label=""];
21->20 [style = bold, label=""];
20->16 [style = bold, label=""];
0->4 [style = bold, label=""];
20->16 [style = solid, label="i"];
0->24 [style = bold, label=""];
22->15 [style = solid, label="i"];
5->7 [style = bold, label=""];
16->21 [style = dotted, label="true"];
22->16 [style = solid, label="i"];
4->1 [style = bold, label=""];
4->13 [style = dashed, label="0"];
22->21 [style = solid, label="i"];
16->29 [style = dotted, label="true"];
17->18 [style = bold, label=""];
7->8 [style = solid, label="ckp"];
20->15 [style = solid, label="i"];
16->15 [style = dotted, label="true"];
}
