digraph {
2 [style = filled, label = "createColumnOptions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final long writeBufferSize = 64 * 1024 * 1024@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "createColumnOptions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "createColumnOptions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final long targetFileSize = 256 * 1024 * 1024@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return new ColumnFamilyOptions().setCompactionStyle(CompactionStyle.LEVEL).setLevelCompactionDynamicLevelBytes(true).setTargetFileSizeBase(targetFileSize).setMaxBytesForLevelBase(4 * targetFileSize).setWriteBufferSize(writeBufferSize).setMinWriteBufferNumberToMerge(3).setMaxWriteBufferNumber(4).setTableFormatConfig(new BlockBasedTableConfig().setBlockCacheSize(blockCacheSize).setBlockSize(blockSize).setFilter(new BloomFilter()))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final long blockSize = 128 * 1024@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final long blockCacheSize = 256 * 1024 * 1024@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "return new ColumnFamilyOptions().setCompactionStyle(CompactionStyle.LEVEL).setLevelCompactionDynamicLevelBytes(true)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
4->3 [style = bold, label=""];
8->5 [style = bold, label=""];
7->8 [style = bold, label=""];
3->4 [style = bold, label=""];
0->1 [style = bold, label=""];
2->1 [style = bold, label=""];
4->7 [style = bold, label=""];
}
