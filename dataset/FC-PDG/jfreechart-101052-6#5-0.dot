digraph {
9 [style = filled, label = "assertTrue(v2.equals(v1))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "v1 = new DefaultKeyedValue(\"Test 1\",new Double(45.5))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "testSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "DefaultKeyedValue v2 = new DefaultKeyedValue(\"Test\",45.5)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "DefaultKeyedValue v1 = new DefaultKeyedValue(\"Test\",new Double(45.5))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertFalse(v1.equals(v2))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertFalse(v1.equals(v2))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testEquals['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "v2 = new DefaultKeyedValue(\"Test\",new Double(45.6))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "v1.addValue(\"Key 2\",null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "v1.addValue(\"Key 1\",new Double(23))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "v1 = new DefaultKeyedValue(\"Test\",45.5)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "DefaultKeyedValues v1 = new DefaultKeyedValues()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DefaultKeyedValue v2 = new DefaultKeyedValue(\"Test\",new Double(45.5))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "testEquals['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "v1 = new DefaultKeyedValue(\"Test\",new Double(45.5))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(v1,v2)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "v2 = new DefaultKeyedValue(\"Test 2\",45.5)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertTrue(v1.equals(v2))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "DefaultKeyedValues v2 = (DefaultKeyedValues)TestUtils.serialised(v1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "v1.addValue(\"Key 3\",new Double(42))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "v1 = new DefaultKeyedValue(\"Test 1\",45.5)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "DefaultKeyedValue v1 = new DefaultKeyedValue(\"Test\",45.5)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "v2 = new DefaultKeyedValue(\"Test\",45.6)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "v2 = new DefaultKeyedValue(\"Test 2\",new Double(45.5))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2->23 [style = dashed, label="0"];
5->3 [style = bold, label=""];
11->3 [style = solid, label="v2"];
8->10 [style = bold, label=""];
16->0 [style = bold, label=""];
16->0 [style = solid, label="v2"];
7->21 [style = dashed, label="0"];
2->9 [style = solid, label="v1"];
4->16 [style = dashed, label="0"];
18->23 [style = bold, label=""];
21->19 [style = bold, label=""];
0->6 [style = bold, label=""];
23->19 [style = solid, label="v1"];
0->17 [style = bold, label=""];
22->21 [style = bold, label=""];
5->3 [style = solid, label="v2"];
8->12 [style = dashed, label="0"];
23->21 [style = solid, label="v1"];
6->17 [style = dashed, label="0"];
7->4 [style = bold, label=""];
9->7 [style = bold, label=""];
15->16 [style = bold, label=""];
8->10 [style = solid, label="v2"];
4->0 [style = bold, label=""];
20->22 [style = bold, label=""];
24->20 [style = bold, label=""];
21->19 [style = solid, label="v2"];
3->9 [style = bold, label=""];
14->9 [style = solid, label="v1"];
23->24 [style = bold, label=""];
17->12 [style = bold, label=""];
12->10 [style = bold, label=""];
2->14 [style = dashed, label="0"];
5->11 [style = dashed, label="0"];
11->3 [style = bold, label=""];
9->15 [style = bold, label=""];
6->8 [style = bold, label=""];
7->15 [style = dashed, label="0"];
1->2 [style = bold, label=""];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
4->0 [style = solid, label="v2"];
12->10 [style = solid, label="v2"];
2->5 [style = bold, label=""];
}
