digraph {
5 [style = filled, label = "ConfigurationPropertySource source = mock(,withSettings().defaultAnswer(Answers.CALLS_REAL_METHODS))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "containsDescendantOfWhenSourceReturnsEmptyShouldReturnEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(aliased.containsDescendantOf(name)).isEqualTo(ConfigurationPropertyState.UNKNOWN)@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(filtered.containsDescendantOf(name)).isEqualTo(ConfigurationPropertyState.UNKNOWN)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "given(source.containsDescendantOf(name)).willReturn(ConfigurationPropertyState.UNKNOWN)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "containsDescendantOfWhenSourceReturnsUnknownShouldReturnUnknown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "ConfigurationPropertySource filtered = source.filter(null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "containsDescendantOfWhenSourceReturnsUnknownShouldReturnUnknown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ConfigurationPropertySource aliased = source.withAliases(new ConfigurationPropertyNameAliases(\"foo.bar\",\"foo.bar1\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->4 [style = bold, label=""];
0->9 [style = bold, label=""];
8->4 [style = bold, label=""];
1->7 [style = dashed, label="0"];
5->0 [style = bold, label=""];
9->7 [style = bold, label=""];
2->9 [style = dashed, label="0"];
3->4 [style = bold, label=""];
4->5 [style = bold, label=""];
2->1 [style = bold, label=""];
0->2 [style = bold, label=""];
}
