digraph {
2 [style = filled, label = "assertFalse(s2.hasListener(l1))@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "StandardDialScale s2 = (StandardDialScale)TestUtils.serialised(s1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(s1.getClass() == s2.getClass())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "s2 = (StandardDialScale)s1.clone()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(s1,s2)@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "s2 = (StandardDialScale)TestUtils.serialised(s1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "MyDialLayerChangeListener l1 = new MyDialLayerChangeListener()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "StandardDialScale s2 = CloneUtils.clone(s1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "s1.setMajorTickStroke(new BasicStroke(2.0f))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(s1.getClass() == s2.getClass())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(s1 != s2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(s1.equals(s2))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(s1.hasListener(l1))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "s1.setMajorTickPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.WHITE))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "StandardDialScale s1 = new StandardDialScale()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "s1.setExtent(123.4)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "StandardDialScale s2 = (StandardDialScale)s1.clone()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertTrue(s1.equals(s2))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "s1 = new StandardDialScale()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(s1,s2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "s1.addChangeListener(l1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(s1 != s2)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->9 [style = bold, label=""];
15->13 [style = bold, label=""];
18->4 [style = solid, label="s2"];
10->15 [style = bold, label=""];
7->6 [style = solid, label="s1"];
8->18 [style = bold, label=""];
23->10 [style = solid, label="s1"];
8->22 [style = solid, label="s1"];
9->4 [style = bold, label=""];
13->6 [style = solid, label="s2"];
22->21 [style = bold, label=""];
14->10 [style = bold, label=""];
13->10 [style = dashed, label="0"];
11->12 [style = bold, label=""];
16->2 [style = bold, label=""];
5->18 [style = dashed, label="0"];
12->1 [style = bold, label=""];
19->8 [style = bold, label=""];
4->7 [style = bold, label=""];
1->17 [style = bold, label=""];
8->22 [style = bold, label=""];
8->18 [style = solid, label="s1"];
7->14 [style = bold, label=""];
1->2 [style = solid, label="l1"];
23->24 [style = bold, label=""];
20->8 [style = bold, label=""];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
1->17 [style = solid, label="l1"];
6->15 [style = dashed, label="0"];
0->21 [style = dashed, label="0"];
1->16 [style = solid, label="l1"];
3->8 [style = bold, label=""];
6->11 [style = bold, label=""];
5->0 [style = solid, label="s2"];
18->0 [style = solid, label="s2"];
8->21 [style = solid, label="s1"];
22->21 [style = solid, label="s2"];
5->4 [style = solid, label="s2"];
5->22 [style = dashed, label="0"];
13->6 [style = bold, label=""];
10->15 [style = solid, label="s2"];
24->7 [style = bold, label=""];
23->15 [style = solid, label="s1"];
13->12 [style = solid, label="s2"];
18->0 [style = bold, label=""];
17->16 [style = bold, label=""];
21->23 [style = bold, label=""];
8->0 [style = solid, label="s1"];
}
