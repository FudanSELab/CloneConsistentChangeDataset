digraph {
11 [style = filled, label = "expected1.addBytes(null,0,0)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new BloomFilterAggregatorFactory(\"a0:agg\",new DefaultDimensionSpec(\"dim1\",\"a0:dim1\"),TEST_NUM_ENTRIES),new BloomFilterAggregatorFactory(\"a1:agg\",new DefaultDimensionSpec(\"dim2\",\"a1:dim2\"),TEST_NUM_ENTRIES))).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT,CalciteTestBase.DEFAULT_PARAMETERS,authenticationResult).toList()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testBloomFilterTwoAggs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new BloomFilterAggregatorFactory(\"a0:agg\",new DefaultDimensionSpec(\"dim1\",\"a0:dim1\"),TEST_NUM_ENTRIES))).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "raw == null@@@7@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "int i = 0@@@34@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expected2.addBytes(null,0,0)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testQuery(\"SELECT\" + \"BLOOM_FILTER(dim1, 1000)\" + \"FROM numfoo\",ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new BloomFilterAggregatorFactory(\"a0:agg\",new DefaultDimensionSpec(\"dim1\",\"a0:dim1\"),TEST_NUM_ENTRIES))).context(BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5b076))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "List<String> lst = row.getDimension(\"dim2\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final String sql = \"SELECT\" + \"BLOOM_FILTER(dim1, 1000),\" + \"BLOOM_FILTER(dim2, 1000)\" + \"FROM numfoo\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "BloomKFilter expected1 = new BloomKFilter(TEST_NUM_ENTRIES)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "expected2.addBytes(null,0,0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "BloomKFilter expected1 = new BloomKFilter(TEST_NUM_ENTRIES)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertArrayEquals(expectedResults.get(i),results.get(i))@@@37@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5b119)@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expected1.addString(raw)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "BloomKFilter expected2 = new BloomKFilter(TEST_NUM_ENTRIES)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "lst.size() == 0@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "i < expectedResults.size()@@@35@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final String sql = \"SELECT\" + \"BLOOM_FILTER(dim1, 1000)\" + \"FROM numfoo\"@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "expected2.addString(val)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testBloomFilterAgg['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expected1.addString(raw)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "val == null@@@22@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testBloomFilterAgg['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "raw == null@@@10@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "cannotVectorize()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "String raw = NullHandling.emptyToNullIfNeeded((String)row.getRaw(\"dim1\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "String val = NullHandling.emptyToNullIfNeeded(s)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "i++@@@36@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31->14 [style = bold, label=""];
0->3 [style = bold, label=""];
5->2 [style = solid, label="raw"];
6->3 [style = bold, label=""];
29->8 [style = bold, label=""];
24->28 [style = bold, label=""];
28->5 [style = bold, label=""];
7->1 [style = bold, label=""];
6->4 [style = solid, label="i"];
15->23 [style = dashed, label="0"];
5->9 [style = bold, label=""];
20->9 [style = bold, label=""];
4->6 [style = bold, label=""];
24->25 [style = dotted, label="true"];
26->28 [style = solid, label="val"];
32->30 [style = dotted, label="true"];
18->19 [style = solid, label="expected1"];
13->2 [style = dotted, label="false"];
30->26 [style = bold, label=""];
24->28 [style = dotted, label="false"];
28->7 [style = bold, label=""];
14->10 [style = bold, label=""];
3->4 [style = dotted, label="true"];
22->32 [style = bold, label=""];
28->26 [style = bold, label=""];
3->15 [style = bold, label=""];
1->0 [style = bold, label=""];
26->24 [style = solid, label="val"];
0->4 [style = solid, label="i"];
3->6 [style = dotted, label="true"];
10->29 [style = dashed, label="0"];
32->30 [style = bold, label=""];
26->24 [style = bold, label=""];
25->7 [style = bold, label=""];
13->11 [style = bold, label=""];
3->4 [style = bold, label=""];
32->26 [style = bold, label=""];
21->18 [style = bold, label=""];
9->16 [style = bold, label=""];
9->7 [style = solid, label="expected1"];
27->7 [style = solid, label="expected2"];
9->27 [style = bold, label=""];
5->19 [style = bold, label=""];
11->5 [style = bold, label=""];
3->23 [style = bold, label=""];
16->20 [style = dotted, label="false"];
10->8 [style = bold, label=""];
5->13 [style = solid, label="raw"];
7->19 [style = dashed, label="0"];
24->25 [style = bold, label=""];
5->13 [style = bold, label=""];
25->26 [style = bold, label=""];
0->3 [style = solid, label="i"];
12->14 [style = bold, label=""];
18->9 [style = bold, label=""];
8->9 [style = bold, label=""];
14->29 [style = bold, label=""];
9->5 [style = bold, label=""];
16->5 [style = bold, label=""];
11->22 [style = bold, label=""];
13->11 [style = dotted, label="true"];
25->5 [style = bold, label=""];
9->20 [style = solid, label="raw"];
16->5 [style = dotted, label="true"];
2->7 [style = bold, label=""];
27->5 [style = bold, label=""];
2->22 [style = bold, label=""];
20->19 [style = bold, label=""];
16->20 [style = bold, label=""];
17->21 [style = bold, label=""];
0->6 [style = solid, label="i"];
6->3 [style = solid, label="i"];
9->16 [style = solid, label="raw"];
11->7 [style = bold, label=""];
2->5 [style = bold, label=""];
13->2 [style = bold, label=""];
}
