digraph {
63 [style = filled, label = "optimizedPlan = explain(2(@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(\"(2, 3, 4(\",results.toString())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertFalse(catalog.fallback)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "query = tableEnv.sqlQuery(\"select x from db1.part where '' = p2\")@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "explain = query.explain().split(\"==.*==\")@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,\"db1\",\"part\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bb7a1b).commit(\"p1=3,p2='c'\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "tableEnv.registerCatalog(catalog.getName(),catalog)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<Row> results = Lists.newArrayList(query.execute().collect())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "assertFalse(catalog.fallback)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "results = CollectionUtil.iteratorToList(query.execute().collect())@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "TableEnvironment tableEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode(SqlDialect.HIVE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "tableEnv.useCatalog(catalog.getName())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,\"db1\",\"part\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bb7a2b).commit(\"p1=4,p2='c:2'\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,\"db1\",\"part\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bb7a0b).commit(\"p1=2,p2='b'\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"(4(\",results.toString())@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "String(( explain = query.explain().split(\"==.*==\")@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String optimizedPlan = explain(2(@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "tableEnv.executeSql(\"create database db1\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testPartitionFilterDateTimestamp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertFalse(catalog.fallback)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "tableEnv.executeSql(\"create table db1.part(x int) partitioned by (p1 int,p2 string)\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertTrue(optimizedPlan,optimizedPlan.contains(\"PartitionPruned: true, PartitionNums: 1\"))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "query = tableEnv.sqlQuery(\"select x from db1.part where p1>2 and p2<='a' order by x\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "results = Lists.newArrayList(query.execute().collect())@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "List<Row> results = CollectionUtil.iteratorToList(query.execute().collect())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "assertTrue(optimizedPlan,optimizedPlan.contains(\"PartitionPruned: true, PartitionNums: 2\"))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "{tableEnv.executeSql(\"drop database db1 cascade\")}@@@65@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "optimizedPlan = explain(2(@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,\"db1\",\"part\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bb79fb).commit(\"p1=1,p2='a'\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertEquals(\"((\",results.toString())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertTrue(optimizedPlan,optimizedPlan.contains(\"PartitionPruned: true, PartitionNums: 0\"))@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertEquals(\"(1, 3(\",results.toString())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testPartitionFilterDateTimestamp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "query = tableEnv.sqlQuery(\"select x from db1.part where p2 = 'c:2' order by x\")@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "query = tableEnv.sqlQuery(\"select x from db1.part where p1 in (1,3,5) order by x\")@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<Row> results = Lists.newArrayList(query.execute().collect())@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "explain = query.explain().split(\"==.*==\")@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "query = tableEnv.sqlQuery(\"select x from db1.part where (p1=1 and p2='a') or ((p1=2 and p2='b') or p2='d') order by x\")@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "optimizedPlan = explain(2(@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertTrue(optimizedPlan,optimizedPlan.contains(\"PartitionPruned: true, PartitionNums: 0\"))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "results = Lists.newArrayList(query.execute().collect())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "{tableEnv.executeSql(\"drop database db1 cascade\")}@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertFalse(catalog.fallback)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "explain = query.explain().split(\"==.*==\")@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Table query = tableEnv.sqlQuery(\"select x from db1.part where p1>1 or p2<>'a' order by x\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertEquals(\"((\",results.toString())@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "results = Lists.newArrayList(query.execute().collect())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "TestPartitionFilterCatalog catalog = new TestPartitionFilterCatalog(hiveCatalog.getName(),hiveCatalog.getDefaultDatabase(),hiveCatalog.getHiveConf(),hiveCatalog.getHiveVersion())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertTrue(optimizedPlan,optimizedPlan.contains(\"PartitionPruned: true, PartitionNums: 3\"))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertTrue(optimizedPlan,optimizedPlan.contains(\"PartitionPruned: true, PartitionNums: 2\"))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(catalog.fallback)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "results = Lists.newArrayList(query.execute().collect())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String optimizedPlan = explain(2(@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "tableEnv.executeSql(\"create table db1.part(x int) partitioned by (p1 date,p2 timestamp)\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "testPartitionFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertFalse(catalog.fallback)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Table query = tableEnv.sqlQuery(\"select x from db1.part where p1>cast('2018-08-09' as date) and p2<>cast('2018-08-08 08:08:09' as timestamp)\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "query = tableEnv.sqlQuery(\"select x from db1.part where timestamp '2018-08-08 08:08:09' = p2\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertFalse(catalog.fallback)@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "explain = query.explain().split(\"==.*==\")@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "explain = query.explain().split(\"==.*==\")@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "optimizedPlan = explain(2(@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "optimizedPlan = explain(2(@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "results = Lists.newArrayList(query.execute().collect())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertEquals(\"(1, 2(\",results.toString())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String(( explain = query.explain().split(\"==.*==\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"(2(\",results.toString())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
39->62 [style = bold, label=""];
61->37 [style = bold, label=""];
9->11 [style = bold, label=""];
0->13 [style = bold, label=""];
66->48 [style = solid, label="optimizedPlan"];
37->27 [style = bold, label=""];
60->29 [style = bold, label=""];
59->51 [style = bold, label=""];
48->35 [style = bold, label=""];
65->63 [style = solid, label="explain"];
14->7 [style = bold, label=""];
45->57 [style = bold, label=""];
12->10 [style = bold, label=""];
63->61 [style = solid, label="optimizedPlan"];
5->0 [style = bold, label=""];
2->49 [style = bold, label=""];
2->15 [style = bold, label=""];
13->22 [style = bold, label=""];
4->23 [style = dashed, label="0"];
19->62 [style = dashed, label="0"];
57->33 [style = solid, label="explain"];
0->13 [style = solid, label="optimizedPlan"];
40->50 [style = bold, label=""];
62->60 [style = bold, label=""];
26->47 [style = bold, label=""];
11->43 [style = bold, label=""];
16->17 [style = bold, label=""];
56->25 [style = bold, label=""];
13->16 [style = bold, label=""];
38->32 [style = bold, label=""];
66->48 [style = bold, label=""];
23->14 [style = bold, label=""];
13->28 [style = dashed, label="0"];
60->41 [style = solid, label="explain"];
27->59 [style = bold, label=""];
1->0 [style = solid, label="explain"];
50->31 [style = bold, label=""];
49->18 [style = bold, label=""];
18->9 [style = bold, label=""];
22->17 [style = bold, label=""];
25->38 [style = solid, label="optimizedPlan"];
10->2 [style = bold, label=""];
43->34 [style = bold, label=""];
33->58 [style = bold, label=""];
16->22 [style = dashed, label="0"];
25->38 [style = bold, label=""];
54->64 [style = bold, label=""];
17->39 [style = dashed, label="0"];
4->14 [style = bold, label=""];
65->30 [style = bold, label=""];
36->40 [style = bold, label=""];
13->42 [style = bold, label=""];
3->1 [style = bold, label=""];
24->66 [style = bold, label=""];
52->33 [style = bold, label=""];
4->39 [style = bold, label=""];
5->42 [style = dashed, label="0"];
51->25 [style = solid, label="explain"];
30->63 [style = bold, label=""];
41->36 [style = bold, label=""];
31->44 [style = bold, label=""];
11->3 [style = bold, label=""];
41->36 [style = solid, label="optimizedPlan"];
55->6 [style = bold, label=""];
63->61 [style = bold, label=""];
58->26 [style = bold, label=""];
44->24 [style = bold, label=""];
17->28 [style = solid, label="optimizedPlan"];
8->12 [style = bold, label=""];
13->17 [style = solid, label="explain"];
35->53 [style = bold, label=""];
14->50 [style = dashed, label="0"];
33->58 [style = solid, label="optimizedPlan"];
21->6 [style = bold, label=""];
44->66 [style = solid, label="explain"];
29->41 [style = bold, label=""];
42->17 [style = bold, label=""];
34->13 [style = bold, label=""];
8->12 [style = solid, label="catalog"];
51->56 [style = bold, label=""];
47->46 [style = bold, label=""];
20->6 [style = bold, label=""];
15->18 [style = bold, label=""];
17->19 [style = bold, label=""];
57->52 [style = bold, label=""];
17->28 [style = bold, label=""];
15->49 [style = dashed, label="0"];
19->23 [style = bold, label=""];
6->8 [style = bold, label=""];
19->4 [style = bold, label=""];
32->54 [style = bold, label=""];
46->65 [style = bold, label=""];
53->45 [style = bold, label=""];
28->4 [style = bold, label=""];
}
