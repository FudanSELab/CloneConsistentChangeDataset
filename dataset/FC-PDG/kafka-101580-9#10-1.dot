digraph {
1 [style = filled, label = "testCountHelper(builder,input,proc)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testCount['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testCount['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "builder.table(Serdes.String(),Serdes.String(),input,\"anyStoreName\").groupBy(MockKeyValueMapper.SelectValueKeyValueMapper(),stringSerialzied).count().toStream().process(proc)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final MockProcessorSupplier<String,Long> proc = new MockProcessorSupplier<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final String input = \"count-test-input\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "builder.table(input,consumed).groupBy(MockKeyValueMapper.SelectValueKeyValueMapper(),stringSerialzied).count(\"count\").toStream().process(proc)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testCountWithInternalStore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "builder.table(Serdes.String(),Serdes.String(),input,\"anyStoreName\").groupBy(MockKeyValueMapper.SelectValueKeyValueMapper(),stringSerialzied).count(\"count\").toStream().process(proc)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9->5 [style = bold, label=""];
8->1 [style = bold, label=""];
6->1 [style = bold, label=""];
0->1 [style = solid, label="input"];
2->6 [style = solid, label="proc"];
3->8 [style = dashed, label="0"];
7->5 [style = bold, label=""];
3->6 [style = dashed, label="0"];
3->1 [style = bold, label=""];
5->0 [style = bold, label=""];
2->3 [style = solid, label="proc"];
4->5 [style = bold, label=""];
2->6 [style = bold, label=""];
2->8 [style = solid, label="proc"];
5->1 [style = solid, label="builder"];
2->3 [style = bold, label=""];
2->8 [style = bold, label=""];
0->2 [style = bold, label=""];
2->1 [style = solid, label="proc"];
}
