digraph {
19 [style = filled, label = "Assert.assertTrue(Files.isDirectory(mavenHomeDir))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertTrue(Files.exists(homeDir.resolve(\"some-file\")))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Files.createFile(someFile)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Path homeDir = install.createDist(configuration)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Files.createFile(zipDestination)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testCreateDistWithExistingDistribution['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Path someFile = mavenHomeDir.resolve(\"some-file\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertEquals(zipDestination,localDistribution.getZipFile())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertTrue(zipDestination.exists())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(zipDestination.exists())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "Files.createDirectories(mavenHomeDir)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "FileUtils.touch(someFile)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(mavenHomeDir,homeDir)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "File homeDir = install.createDist(configuration)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertFalse(new File(homeDir,\"garbage\").exists())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "FileUtils.touch(zipDestination)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "File garbage = new File(mavenHomeDir,\"garbage\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testCreateDistWithExistingDistAndZipAndAlwaysUnpackTrue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "mavenHomeDir.mkdirs()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testCreateDistWithExistingDistribution['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "File someFile = new File(mavenHomeDir,\"some-file\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "File homeDir = install.createDist(configuration)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "FileUtils.touch(garbage)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertTrue(mavenHomeDir.isDirectory())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(Files.exists(zipDestination))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "createTestZip(zipDestination)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "configuration.setAlwaysUnpack(true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(distributionDir,localDistribution.getDistributionDir())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(localDistribution,pathAssembler.getDistribution(configuration))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
23->25 [style = bold, label=""];
15->10 [style = bold, label=""];
28->6 [style = bold, label=""];
16->18 [style = bold, label=""];
20->17 [style = bold, label=""];
10->7 [style = solid, label="homeDir"];
12->5 [style = bold, label=""];
26->10 [style = bold, label=""];
11->1 [style = bold, label=""];
4->0 [style = solid, label="someFile"];
6->23 [style = bold, label=""];
10->19 [style = bold, label=""];
27->28 [style = bold, label=""];
8->14 [style = dashed, label="0"];
23->25 [style = solid, label="garbage"];
7->8 [style = bold, label=""];
0->17 [style = dashed, label="0"];
10->7 [style = bold, label=""];
13->16 [style = bold, label=""];
1->9 [style = bold, label=""];
15->10 [style = solid, label="homeDir"];
4->0 [style = bold, label=""];
8->22 [style = bold, label=""];
20->17 [style = solid, label="someFile"];
6->18 [style = dashed, label="0"];
5->16 [style = dashed, label="0"];
8->22 [style = dashed, label="0"];
3->10 [style = bold, label=""];
6->4 [style = bold, label=""];
18->20 [style = bold, label=""];
5->28 [style = dashed, label="0"];
19->14 [style = bold, label=""];
5->6 [style = bold, label=""];
0->25 [style = dashed, label="0"];
8->2 [style = bold, label=""];
21->11 [style = bold, label=""];
7->19 [style = dashed, label="0"];
4->20 [style = dashed, label="0"];
2->21 [style = dashed, label="0"];
25->26 [style = bold, label=""];
17->15 [style = bold, label=""];
3->15 [style = dashed, label="0"];
3->10 [style = solid, label="homeDir"];
4->23 [style = dashed, label="0"];
2->11 [style = bold, label=""];
14->21 [style = bold, label=""];
22->11 [style = bold, label=""];
9->24 [style = bold, label=""];
}
