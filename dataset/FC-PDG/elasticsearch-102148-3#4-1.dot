digraph {
1 [style = filled, label = "assertEquals(clusterState.nodes().getSize() - 1,rebalanceDecision.getNodeDecisions().size())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Tuple<ClusterState,MoveDecision> rebalance = setupStateAndRebalance(canAllocateDecider,Settings.EMPTY,false)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(AllocationDecision.NO,rebalanceDecision.getAllocationDecision())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ClusterState clusterState = rebalance.v1()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "AllocationDecider canAllocateDecider = new AllocationDecider(Settings.EMPTY){@Override public Decision canAllocate(ShardRouting shardRouting,RoutingNode node,RoutingAllocation allocation){return Decision.YES}}@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Tuple<ClusterState,MoveDecision> rebalance = setupStateAndRebalance(canAllocateDecider,balancerSettings,false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "int prevRanking = 0@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertNotNull(rebalanceDecision.getExplanation())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ClusterState clusterState = rebalance.v1()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testRebalancingNotAllowedDueToCanAllocate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testRebalancingNotAllowedDueToCanAllocate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "MoveDecision rebalanceDecision = rebalance.v2()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "prevRanking = result.getWeightRanking()@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "AllocationDecider canAllocateDecider = new AllocationDecider(){@Override public Decision canAllocate(ShardRouting shardRouting,RoutingNode node,RoutingAllocation allocation){return Decision.NO}}@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertThat(result.getWeightRanking(),greaterThanOrEqualTo(prevRanking))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(Type.YES,rebalanceDecision.getClusterRebalanceDecision().type())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testDontBalanceShardWhenThresholdNotMet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(result.getWeightRanking(),greaterThanOrEqualTo(prevRanking))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNull(rebalanceDecision.getTargetNode())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Settings balancerSettings = Settings.builder().put(BalancedShardsAllocator.THRESHOLD_SETTING.getKey(),1000f).build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(clusterState.nodes().getSize() - 1,rebalanceDecision.getNodeDecisions().size())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->17 [style = solid, label="balancerSettings"];
11->16 [style = bold, label=""];
11->6 [style = solid, label="prevRanking"];
19->4 [style = solid, label="prevRanking"];
8->10 [style = bold, label=""];
7->11 [style = bold, label=""];
9->0 [style = bold, label=""];
15->7 [style = bold, label=""];
4->6 [style = bold, label=""];
17->9 [style = bold, label=""];
11->6 [style = bold, label=""];
12->15 [style = bold, label=""];
4->19 [style = bold, label=""];
18->17 [style = bold, label=""];
2->18 [style = bold, label=""];
12->1 [style = bold, label=""];
1->7 [style = bold, label=""];
16->4 [style = solid, label="prevRanking"];
20->2 [style = bold, label=""];
6->4 [style = bold, label=""];
4->6 [style = solid, label="prevRanking"];
2->17 [style = solid, label="canAllocateDecider"];
3->2 [style = bold, label=""];
5->12 [style = bold, label=""];
13->8 [style = solid, label="canAllocateDecider"];
2->13 [style = dashed, label="0"];
2->8 [style = solid, label="canAllocateDecider"];
12->15 [style = dashed, label="0"];
10->9 [style = bold, label=""];
19->4 [style = bold, label=""];
14->13 [style = bold, label=""];
13->8 [style = bold, label=""];
16->4 [style = bold, label=""];
2->8 [style = bold, label=""];
0->5 [style = bold, label=""];
}
