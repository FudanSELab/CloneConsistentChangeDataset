digraph {
18 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Request request = druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/redirect\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testFindCurrentLeader['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testServerFailureAndRedirect['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery).anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeRole.PEON,\"/simple/leader\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "EasyMock.replay(serverDiscoverySelector,druidNodeDiscovery,druidNodeDiscoveryProvider)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "druidLeaderClient.start()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"hello\",druidLeaderClient.go(request).getContent())@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"http://localhost:1234/\",druidLeaderClient.findCurrentLeader())@@@10@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "druidLeaderClient.start()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeRole.PEON,\"/simple/leader\",serverDiscoverySelector)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "EasyMock.replay(druidNodeDiscovery,druidNodeDiscoveryProvider)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(new DruidNode(\"test\",\"dummyhost\",false,64231,null,true,false),NodeRole.PEON,ImmutableMap.of())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testServerFailureAndRedirect['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->18 [style = solid, label="druidNodeDiscovery"];
19->21 [style = solid, label="druidNodeDiscoveryProvider"];
12->16 [style = dashed, label="0"];
13->17 [style = solid, label="serverDiscoverySelector"];
11->4 [style = bold, label=""];
13->15 [style = bold, label=""];
22->5 [style = bold, label=""];
9->2 [style = solid, label="druidNodeDiscoveryProvider"];
5->17 [style = solid, label="druidNodeDiscovery"];
8->0 [style = bold, label=""];
2->17 [style = dashed, label="0"];
6->11 [style = bold, label=""];
14->13 [style = bold, label=""];
6->11 [style = solid, label="dummyNode"];
9->21 [style = bold, label=""];
9->12 [style = solid, label="druidNodeDiscoveryProvider"];
13->16 [style = solid, label="serverDiscoverySelector"];
16->10 [style = bold, label=""];
9->16 [style = solid, label="druidNodeDiscoveryProvider"];
10->3 [style = bold, label=""];
9->7 [style = bold, label=""];
20->19 [style = bold, label=""];
21->2 [style = bold, label=""];
12->10 [style = bold, label=""];
5->9 [style = solid, label="druidNodeDiscovery"];
18->9 [style = bold, label=""];
4->9 [style = bold, label=""];
5->20 [style = bold, label=""];
3->8 [style = bold, label=""];
15->5 [style = bold, label=""];
5->2 [style = solid, label="druidNodeDiscovery"];
7->17 [style = bold, label=""];
19->9 [style = solid, label="druidNodeDiscoveryProvider"];
3->12 [style = dashed, label="0"];
17->16 [style = bold, label=""];
19->18 [style = bold, label=""];
5->6 [style = bold, label=""];
9->17 [style = solid, label="druidNodeDiscoveryProvider"];
2->12 [style = bold, label=""];
7->18 [style = dashed, label="0"];
1->5 [style = bold, label=""];
7->2 [style = bold, label=""];
}
