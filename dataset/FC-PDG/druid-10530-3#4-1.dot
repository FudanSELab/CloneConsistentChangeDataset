digraph {
11 [style = filled, label = "testCompactWithNotNullIOConfig['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "compactionConfigs.add(new DataSourceCompactionConfig(dataSource,0,500L,null,new Period(\"PT0H\"),new UserCompactionTaskQueryTuningConfig(null,null,null,null,partitionsSpec,null,null,null,null,null,3,null,null,null,null,null,null),null,null,null))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(true,dropExistingCapture.getValue())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "compactionConfigs.add(new DataSourceCompactionConfig(dataSource,0,500L,null,new Period(\"PT0H\"),new UserCompactionTaskQueryTuningConfig(null,null,null,null,partitionsSpec,null,null,null,null,null,3,null,null,null,null,null,null),null,new UserCompactionTaskIOConfig(true),null))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testCompactWithNullIOConfig['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ArgumentCaptor<Boolean> dropExistingCapture = ArgumentCaptor.forClass()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertNull(dropExistingCapture.getValue())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testCompactWithNotNullIOConfig['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "doCompactSegments(compactSegments,compactionConfigs)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER,mockIndexingServiceClient)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final CompactSegments compactSegments = new CompactSegments(COORDINATOR_CONFIG,JSON_MAPPER,mockIndexingServiceClient)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Mockito.verify(mockIndexingServiceClient).compactSegments(ArgumentMatchers.anyString(),ArgumentMatchers.any(),ArgumentMatchers.anyInt(),ArgumentMatchers.any(),ArgumentMatchers.any(),dropExistingCapture.capture(),ArgumentMatchers.any())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final String dataSource = DATA_SOURCE_PREFIX + 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->0 [style = solid, label="dataSource"];
7->1 [style = bold, label=""];
9->0 [style = bold, label=""];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
1->3 [style = bold, label=""];
10->3 [style = bold, label=""];
10->5 [style = solid, label="compactSegments"];
1->10 [style = dashed, label="0"];
0->12 [style = dashed, label="0"];
3->4 [style = solid, label="compactionConfigs"];
8->7 [style = bold, label=""];
14->7 [style = bold, label=""];
3->9 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
1->4 [style = solid, label="compactSegments"];
12->4 [style = bold, label=""];
0->4 [style = bold, label=""];
2->13 [style = dashed, label="0"];
5->13 [style = bold, label=""];
7->1 [style = solid, label="mockIndexingServiceClient"];
9->12 [style = bold, label=""];
10->4 [style = solid, label="compactSegments"];
1->5 [style = solid, label="compactSegments"];
9->12 [style = solid, label="dataSource"];
11->7 [style = bold, label=""];
7->10 [style = solid, label="mockIndexingServiceClient"];
}
