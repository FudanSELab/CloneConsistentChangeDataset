digraph {
22 [style = filled, label = "TokenMetadata metadata = StorageService.instance.getTokenMetadata()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.2\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"),new StringToken(\"A\"))))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"),new StringToken(\"K\"))))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Schema.instance.load(meta)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "configOptions.put(\"DC2\",\"2\")@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "metadata.clearUnsafe()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "configOptions.put(\"DC1\",\"1\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"),new StringToken(\"F\"))))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "testPrimaryRangeForEndpointWithinDCWithVnodes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "Multimap<InetAddress,Token> dc2 = HashMultimap.create()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"),new StringToken(\"A\"))))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddress.getByName(\"127.0.0.2\"))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"B\"),InetAddress.getByName(\"127.0.0.4\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
69 [style = filled, label = "metadata.updateNormalTokens(dc1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddress.getByName(\"127.0.0.4\"))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddress.getByName(\"127.0.0.1\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Map<String,String> configOptions = new HashMap<>()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Keyspace.clear(\"Keyspace1\")@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "configOptions.put(ReplicationParams.CLASS,\"NetworkTopologyStrategy\")@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddress.getByName(\"127.0.0.4\"))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"C\"),InetAddress.getByName(\"127.0.0.2\"))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Keyspace.clear(\"Keyspace1\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"),new StringToken(\"D\"))))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddress.getByName(\"127.0.0.1\"))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"),new StringToken(\"H\"))))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "dc2.put(InetAddress.getByName(\"127.0.0.5\"),new StringToken(\"K\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"),new StringToken(\"G\"))))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "dc2.put(InetAddress.getByName(\"127.0.0.4\"),new StringToken(\"G\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"),new StringToken(\"K\"))))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"),new StringToken(\"I\"))))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(primaryRanges.isEmpty())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddress.getByName(\"127.0.0.2\"))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"),new StringToken(\"E\"))))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertEquals(8,primaryRanges.size())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.4\"))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"),new StringToken(\"F\"))))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"),new StringToken(\"E\"))))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"C\"),InetAddressAndPort.getByName(\"127.0.0.2\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
74 [style = filled, label = "dc1.put(InetAddress.getByName(\"127.0.0.1\"),new StringToken(\"H\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"),new StringToken(\"G\"))))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"),new StringToken(\"L\"))))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(primaryRanges.isEmpty())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.1\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "dc2.put(InetAddress.getByName(\"127.0.0.4\"),new StringToken(\"L\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"),new StringToken(\"C\"))))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "dc2.put(InetAddress.getByName(\"127.0.0.5\"),new StringToken(\"D\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"),new StringToken(\"B\"))))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(primaryRanges.size() == 2)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "dc1.put(InetAddress.getByName(\"127.0.0.2\"),new StringToken(\"C\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertEquals(4,primaryRanges.size())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"),new StringToken(\"C\"))))@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\",KeyspaceParams.create(false,configOptions))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "dc1.put(InetAddress.getByName(\"127.0.0.2\"),new StringToken(\"I\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"),new StringToken(\"J\"))))@@@59@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Schema.instance.load(meta)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"),new StringToken(\"H\"))))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "metadata.updateNormalTokens(dc2)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"),new StringToken(\"D\"))))@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "dc2.put(InetAddress.getByName(\"127.0.0.4\"),new StringToken(\"B\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "Multimap<InetAddress,Token> dc1 = HashMultimap.create()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"A\"),InetAddressAndPort.getByName(\"127.0.0.1\"))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"D\"),InetAddress.getByName(\"127.0.0.5\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "configOptions.put(ReplicationParams.CLASS,\"NetworkTopologyStrategy\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"),new StringToken(\"J\"))))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "assertEquals(4,primaryRanges.size())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"A\"),InetAddress.getByName(\"127.0.0.1\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.5\"))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "dc1.put(InetAddress.getByName(\"127.0.0.1\"),new StringToken(\"A\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "dc2.put(InetAddress.getByName(\"127.0.0.5\"),new StringToken(\"F\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "assertTrue(primaryRanges.size() == 8)@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "dc1.put(InetAddress.getByName(\"127.0.0.2\"),new StringToken(\"J\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "dc1.put(InetAddress.getByName(\"127.0.0.1\"),new StringToken(\"E\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"),new StringToken(\"I\"))))@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"D\"),InetAddressAndPort.getByName(\"127.0.0.5\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddress.getByName(\"127.0.0.5\"))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Map<String,String> configOptions = new HashMap<>()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "configOptions.put(\"DC2\",\"2\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"B\"),InetAddressAndPort.getByName(\"127.0.0.4\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\",KeyspaceParams.create(false,configOptions))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"),new StringToken(\"L\"))))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"),new StringToken(\"B\"))))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19->27 [style = dashed, label="0"];
65->60 [style = bold, label=""];
0->13 [style = bold, label=""];
4->53 [style = bold, label=""];
2->6 [style = bold, label=""];
53->21 [style = bold, label=""];
7->18 [style = solid, label="meta"];
1->27 [style = bold, label=""];
83->61 [style = bold, label=""];
55->40 [style = bold, label=""];
67->81 [style = bold, label=""];
21->30 [style = bold, label=""];
0->13 [style = solid, label="meta"];
9->7 [style = bold, label=""];
25->6 [style = bold, label=""];
26->22 [style = bold, label=""];
38->72 [style = bold, label=""];
63->66 [style = bold, label=""];
43->74 [style = bold, label=""];
83->49 [style = solid, label="dc2"];
2->74 [style = dashed, label="0"];
75->68 [style = bold, label=""];
28->25 [style = bold, label=""];
77->37 [style = bold, label=""];
13->46 [style = bold, label=""];
72->47 [style = bold, label=""];
36->77 [style = bold, label=""];
49->4 [style = bold, label=""];
19->3 [style = bold, label=""];
56->79 [style = bold, label=""];
34->73 [style = bold, label=""];
74->41 [style = bold, label=""];
24->0 [style = bold, label=""];
76->48 [style = bold, label=""];
3->11 [style = bold, label=""];
4->21 [style = bold, label=""];
62->45 [style = bold, label=""];
48->50 [style = bold, label=""];
68->82 [style = bold, label=""];
12->66 [style = dashed, label="0"];
73->69 [style = bold, label=""];
23->8 [style = bold, label=""];
22->23 [style = bold, label=""];
80->36 [style = bold, label=""];
64->35 [style = bold, label=""];
3->55 [style = dashed, label="0"];
52->58 [style = bold, label=""];
29->20 [style = bold, label=""];
60->57 [style = bold, label=""];
4->0 [style = solid, label="configOptions"];
61->80 [style = bold, label=""];
15->9 [style = bold, label=""];
82->62 [style = bold, label=""];
70->75 [style = bold, label=""];
12->14 [style = bold, label=""];
6->7 [style = solid, label="configOptions"];
1->19 [style = bold, label=""];
10->1 [style = bold, label=""];
54->70 [style = bold, label=""];
3->29 [style = bold, label=""];
5->30 [style = dashed, label="0"];
23->31 [style = bold, label=""];
30->24 [style = bold, label=""];
44->56 [style = bold, label=""];
14->28 [style = dashed, label="0"];
31->32 [style = bold, label=""];
12->32 [style = dashed, label="0"];
18->33 [style = bold, label=""];
21->5 [style = bold, label=""];
35->76 [style = bold, label=""];
18->10 [style = bold, label=""];
1->64 [style = dashed, label="0"];
5->24 [style = bold, label=""];
69->83 [style = bold, label=""];
71->59 [style = bold, label=""];
23->63 [style = bold, label=""];
2->25 [style = dashed, label="0"];
66->43 [style = bold, label=""];
7->18 [style = bold, label=""];
14->2 [style = bold, label=""];
50->71 [style = bold, label=""];
24->65 [style = dashed, label="0"];
41->34 [style = bold, label=""];
8->12 [style = bold, label=""];
45->39 [style = bold, label=""];
16->15 [style = bold, label=""];
11->20 [style = bold, label=""];
81->54 [style = bold, label=""];
37->51 [style = bold, label=""];
46->64 [style = bold, label=""];
27->3 [style = bold, label=""];
11->29 [style = dashed, label="0"];
59->38 [style = bold, label=""];
10->33 [style = dashed, label="0"];
20->75 [style = dashed, label="0"];
33->1 [style = bold, label=""];
51->49 [style = bold, label=""];
79->42 [style = bold, label=""];
17->22 [style = bold, label=""];
39->65 [style = bold, label=""];
40->67 [style = bold, label=""];
20->4 [style = bold, label=""];
58->44 [style = bold, label=""];
57->52 [style = bold, label=""];
14->43 [style = dashed, label="0"];
47->55 [style = bold, label=""];
6->16 [style = bold, label=""];
63->69 [style = solid, label="dc1"];
8->31 [style = dashed, label="0"];
32->28 [style = bold, label=""];
78->22 [style = bold, label=""];
}
