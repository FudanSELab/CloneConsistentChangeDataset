digraph {
1 [style = filled, label = "final AtomicBoolean pathAdded = new AtomicBoolean(false)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testGuaranteedDeleteOnNonExistentNodeInBackground['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "BackgroundCallback background = new BackgroundCallback(){@Override public void processResult(CuratorFramework client,CuratorEvent event){backgroundLatch.countDown()}}@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "NoNodeException e@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "client.delete().guaranteed().forPath(\"/nonexistent\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testGuaranteedDeleteOnNonExistentNodeInBackground['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Assert.assertFalse(pathAdded.get())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "client.start()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "backgroundLatch.await()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "((CuratorFrameworkImpl)client).getFailedDeleteManager().debugListener = new FailedOperationManager.FailedOperationManagerListener<String>(){@Override public void pathAddedForGuaranteedOperation(String path){pathAdded.set(true)}}@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testGuaranteedDeleteOnNonExistentNodeInForeground['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertFalse(pathAdded.get())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.fail()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertFalse(pathAdded.get())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "final CountDownLatch backgroundLatch = new CountDownLatch(1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "client.delete().guaranteed().inBackground(background).forPath(\"/nonexistent\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "{client.close()}@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
16->15 [style = bold, label=""];
7->1 [style = bold, label=""];
15->14 [style = bold, label=""];
17->6 [style = bold, label=""];
3->11 [style = bold, label=""];
8->14 [style = bold, label=""];
12->6 [style = bold, label=""];
3->4 [style = bold, label=""];
9->6 [style = bold, label=""];
5->16 [style = dashed, label="0"];
2->0 [style = bold, label=""];
10->16 [style = bold, label=""];
13->8 [style = dotted, label="true"];
4->8 [style = bold, label=""];
11->8 [style = bold, label=""];
10->2 [style = bold, label=""];
4->11 [style = dashed, label="0"];
13->8 [style = bold, label=""];
6->7 [style = bold, label=""];
1->10 [style = bold, label=""];
0->5 [style = bold, label=""];
}
