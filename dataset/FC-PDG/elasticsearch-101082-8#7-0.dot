digraph {
83 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@154@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() & (int)irRightConstantNode.getConstant())@@@148@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "scope.accept(irLeftConstantNode)@@@108@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "type == @@@33@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
96 [style = filled, label = "type == @@@126@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "type == @@@30@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "type == @@@174@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "scope.accept(irLeftConstantNode)@@@144@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "type == @@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() - (float)irRightConstantNode.getConstant())@@@100@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "operation == Operation.REM@@@51@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() ^ (int)irRightConstantNode.getConstant())@@@163@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() / (double)irRightConstantNode.getConstant())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "ArithmeticException ae@@@69@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() / (long)irRightConstantNode.getConstant())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "scope.accept(irLeftConstantNode)@@@26@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "type == @@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Consumer<ExpressionNode> scope@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
114 [style = filled, label = "type == @@@99@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "type == @@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
104 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() >> (int)irRightConstantNode.getConstant())@@@124@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "BooleanNode irBooleanNode@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "operation == Operation.AND@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "visitBoolean['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "operation == Operation.BWAND@@@146@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "type == @@@123@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "operation == Operation.OR@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
118 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() * (float)irRightConstantNode.getConstant())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() % (int)irRightConstantNode.getConstant())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ConstantNode irLeftConstantNode = (ConstantNode)irBooleanNode.getLeftNode()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() >> (int)irRightConstantNode.getConstant())@@@127@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
127 [style = filled, label = "type == @@@53@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() - (double)irRightConstantNode.getConstant())@@@103@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ConstantNode irRightConstantNode = (ConstantNode)irBooleanNode.getRightNode()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "type == @@@81@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() ^ (boolean)irRightConstantNode.getConstant())@@@160@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
123 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@106@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "operation == Operation.SUB@@@92@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "type == @@@56@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
109 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() - (int)irRightConstantNode.getConstant())@@@94@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "type == @@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "scope.accept(irLeftConstantNode)@@@183@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "type == @@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "scope.accept(irLeftConstantNode)@@@156@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
129 [style = filled, label = "irBinaryMathNode.getLeftNode() instanceof ConstantNode && irBinaryMathNode.getRightNode() instanceof ConstantNode@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() << (int)irRightConstantNode.getConstant())@@@112@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
113 [style = filled, label = "operation == Operation.ADD@@@74@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
124 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() * (long)irRightConstantNode.getConstant())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "operation == Operation.XOR@@@158@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
106 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@142@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "type == @@@59@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Class<?> type = irBooleanNode.getDecoration().getType()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
107 [style = filled, label = "type == @@@177@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "type == @@@165@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Class<?> type = irBooleanNode.getDecorationValue()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "operation == Operation.LSH@@@110@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
90 [style = filled, label = "type == @@@147@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() / (int)irRightConstantNode.getConstant())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@130@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "scope.accept(irLeftConstantNode)@@@120@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
98 [style = filled, label = "type == @@@93@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "type == @@@75@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() | (long)irRightConstantNode.getConstant())@@@178@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@169@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
105 [style = filled, label = "Class<?> type = irBinaryMathNode.getDecoration().getType()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "type == @@@150@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Operation operation = irBooleanNode.getOperation()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "BooleanNode irBooleanNode@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
89 [style = filled, label = "scope.accept(irLeftConstantNode)@@@72@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@88@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
132 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() + (int)irRightConstantNode.getConstant())@@@76@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() % (long)irRightConstantNode.getConstant())@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "ConstantNode irRightConstantNode = (ConstantNode)irBinaryMathNode.getRightNode()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "throw irBooleanNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
125 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() * (double)irRightConstantNode.getConstant())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "operation == Operation.MUL@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "visitBinaryMath['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "scope.accept(irLeftConstantNode)@@@49@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@118@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "irBooleanNode.getLeftNode() instanceof ConstantNode && irBooleanNode.getRightNode() instanceof ConstantNode@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() >>> (int)irRightConstantNode.getConstant())@@@136@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
121 [style = filled, label = "operation == Operation.DIV@@@28@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "operation == Operation.BWOR@@@173@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "throw irBooleanNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"boolean operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "irBinaryMathNode.getLeftNode().visit(this,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "irBinaryMathNode.getRightNode().visit(this,null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
101 [style = filled, label = "type == @@@39@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() + (long)irRightConstantNode.getConstant())@@@79@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "scope.accept(irLeftConstantNode)@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() % (float)irRightConstantNode.getConstant())@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() & (long)irRightConstantNode.getConstant())@@@151@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
120 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() ^ (long)irRightConstantNode.getConstant())@@@166@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() - (long)irRightConstantNode.getConstant())@@@97@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "type == @@@36@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "irBooleanNode.getRightNode().visit(this,null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
122 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() >>> (int)irRightConstantNode.getConstant())@@@139@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
128 [style = filled, label = "type == @@@138@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "type == @@@62@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "operation == Operation.USH@@@134@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
99 [style = filled, label = "ConstantNode irLeftConstantNode = (ConstantNode)irBinaryMathNode.getLeftNode()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
130 [style = filled, label = "scope.accept(irLeftConstantNode)@@@171@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
119 [style = filled, label = "scope.accept(irLeftConstantNode)@@@90@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Operation operation = irBinaryMathNode.getOperation()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() | (int)irRightConstantNode.getConstant())@@@175@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "visitBoolean['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() || (boolean)irRightConstantNode.getConstant())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "type == @@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
115 [style = filled, label = "type == @@@159@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "type == @@@84@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "type == @@@78@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
110 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "irBooleanNode.getLeftNode().visit(this,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
131 [style = filled, label = "scope.accept(irLeftConstantNode)@@@132@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "operation == Operation.RSH@@@122@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
117 [style = filled, label = "type == @@@102@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() / (float)irRightConstantNode.getConstant())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Consumer<ExpressionNode> scope@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(ae)@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() % (double)irRightConstantNode.getConstant())@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
91 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(ae)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
100 [style = filled, label = "type == @@@162@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() && (boolean)irRightConstantNode.getConstant())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@181@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
111 [style = filled, label = "BinaryMathNode irBinaryMathNode@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
108 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() * (int)irRightConstantNode.getConstant())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
134 [style = filled, label = "type == @@@135@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
116 [style = filled, label = "type == @@@111@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() + (double)irRightConstantNode.getConstant())@@@85@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "type == @@@96@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() + (float)irRightConstantNode.getConstant())@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
133 [style = filled, label = "type == @@@114@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
126 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() << (int)irRightConstantNode.getConstant())@@@115@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "ArithmeticException ae@@@46@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
67->86 [style = bold, label=""];
76->49 [style = dotted, label="false"];
113->119 [style = dotted, label="true"];
82->25 [style = bold, label=""];
29->66 [style = solid, label="operation"];
3->72 [style = dashed, label="0"];
50->43 [style = dotted, label="false"];
24->33 [style = dotted, label="true"];
105->112 [style = solid, label="type"];
128->106 [style = dotted, label="false"];
49->78 [style = bold, label=""];
40->23 [style = bold, label=""];
105->110 [style = solid, label="type"];
96->48 [style = bold, label=""];
93->86 [style = dotted, label="true"];
14->21 [style = dotted, label="true"];
19->111 [style = dashed, label="0"];
133->126 [style = dotted, label="true"];
125->11 [style = bold, label=""];
105->49 [style = solid, label="type"];
65->68 [style = bold, label=""];
127->57 [style = bold, label=""];
99->32 [style = solid, label="irLeftConstantNode"];
29->58 [style = solid, label="operation"];
72->129 [style = bold, label=""];
105->76 [style = solid, label="type"];
83->86 [style = bold, label=""];
115->79 [style = dotted, label="true"];
1->4 [style = bold, label=""];
48->131 [style = bold, label=""];
106->46 [style = bold, label=""];
22->19 [style = dotted, label="true"];
105->53 [style = solid, label="type"];
21->8 [style = solid, label="type"];
107->112 [style = bold, label=""];
29->61 [style = solid, label="operation"];
99->130 [style = solid, label="irLeftConstantNode"];
29->113 [style = solid, label="operation"];
112->97 [style = bold, label=""];
6->2 [style = bold, label=""];
37->74 [style = bold, label=""];
44->76 [style = bold, label=""];
99->23 [style = solid, label="irLeftConstantNode"];
118->11 [style = bold, label=""];
43->66 [style = bold, label=""];
6->45 [style = dashed, label="0"];
105->92 [style = solid, label="type"];
77->69 [style = dotted, label="false"];
29->93 [style = solid, label="operation"];
51->89 [style = bold, label=""];
21->9 [style = solid, label="type"];
14->18 [style = bold, label=""];
60->71 [style = dotted, label="false"];
105->128 [style = solid, label="type"];
133->47 [style = bold, label=""];
114->28 [style = dotted, label="true"];
93->61 [style = bold, label=""];
4->9 [style = bold, label=""];
102->107 [style = bold, label=""];
128->122 [style = dotted, label="true"];
105->123 [style = solid, label="type"];
87->102 [style = bold, label=""];
61->130 [style = dotted, label="true"];
105->64 [style = solid, label="type"];
35->67 [style = dotted, label="true"];
100->60 [style = dotted, label="false"];
53->124 [style = dotted, label="true"];
109->68 [style = bold, label=""];
100->26 [style = dotted, label="true"];
85->113 [style = bold, label=""];
69->75 [style = bold, label=""];
45->53 [style = bold, label=""];
121->85 [style = bold, label=""];
73->37 [style = dotted, label="false"];
105->101 [style = solid, label="type"];
14->17 [style = dotted, label="true"];
117->65 [style = dotted, label="true"];
5->79 [style = dashed, label="0"];
105->107 [style = solid, label="type"];
90->36 [style = bold, label=""];
31->44 [style = bold, label=""];
13->10 [style = solid, label="type"];
2->108 [style = dashed, label="0"];
45->108 [style = bold, label=""];
105->35 [style = solid, label="type"];
33->32 [style = bold, label=""];
128->106 [style = bold, label=""];
88->119 [style = bold, label=""];
99->42 [style = bold, label=""];
9->5 [style = dotted, label="true"];
30->72 [style = bold, label=""];
50->68 [style = dotted, label="true"];
43->116 [style = dotted, label="true"];
8->92 [style = dashed, label="0"];
104->131 [style = bold, label=""];
134->94 [style = dotted, label="true"];
58->134 [style = bold, label=""];
105->96 [style = solid, label="type"];
1->11 [style = dotted, label="true"];
58->93 [style = dotted, label="false"];
116->40 [style = bold, label=""];
99->89 [style = solid, label="irLeftConstantNode"];
103->125 [style = dotted, label="true"];
39->91 [style = bold, label=""];
114->28 [style = bold, label=""];
14->13 [style = dotted, label="true"];
105->134 [style = solid, label="type"];
103->92 [style = bold, label=""];
95->68 [style = bold, label=""];
15->19 [style = dotted, label="true"];
123->68 [style = bold, label=""];
57->89 [style = bold, label=""];
105->117 [style = solid, label="type"];
49->78 [style = dotted, label="false"];
115->100 [style = dotted, label="false"];
105->59 [style = solid, label="type"];
105->73 [style = solid, label="type"];
49->88 [style = bold, label=""];
121->32 [style = dotted, label="true"];
105->52 [style = solid, label="type"];
122->46 [style = bold, label=""];
93->90 [style = dotted, label="true"];
14->0 [style = dotted, label="true"];
117->65 [style = bold, label=""];
35->83 [style = dotted, label="false"];
105->63 [style = solid, label="type"];
9->10 [style = bold, label=""];
24->101 [style = dotted, label="false"];
128->122 [style = bold, label=""];
31->132 [style = bold, label=""];
44->76 [style = dotted, label="false"];
105->90 [style = solid, label="type"];
105->31 [style = solid, label="type"];
66->64 [style = bold, label=""];
21->1 [style = bold, label=""];
127->73 [style = bold, label=""];
99->131 [style = solid, label="irLeftConstantNode"];
105->44 [style = solid, label="type"];
1->6 [style = dotted, label="true"];
85->89 [style = dotted, label="true"];
70->45 [style = dotted, label="true"];
98->109 [style = dotted, label="true"];
17->21 [style = bold, label=""];
29->121 [style = solid, label="operation"];
50->43 [style = bold, label=""];
105->133 [style = solid, label="type"];
56->32 [style = bold, label=""];
103->125 [style = bold, label=""];
129->29 [style = dotted, label="true"];
59->103 [style = dotted, label="false"];
87->97 [style = dotted, label="true"];
76->84 [style = bold, label=""];
61->87 [style = dotted, label="false"];
115->100 [style = bold, label=""];
22->20 [style = dotted, label="true"];
110->89 [style = bold, label=""];
85->127 [style = dotted, label="true"];
9->10 [style = dotted, label="false"];
129->105 [style = dotted, label="true"];
64->104 [style = bold, label=""];
18->99 [style = dashed, label="0"];
14->129 [style = dashed, label="0"];
124->11 [style = bold, label=""];
61->115 [style = dotted, label="true"];
29->70 [style = solid, label="operation"];
29->43 [style = solid, label="operation"];
133->47 [style = dotted, label="false"];
69->24 [style = dotted, label="false"];
101->34 [style = dotted, label="true"];
59->118 [style = bold, label=""];
129->99 [style = bold, label=""];
80->89 [style = bold, label=""];
58->46 [style = dotted, label="true"];
99->97 [style = solid, label="irLeftConstantNode"];
6->2 [style = dotted, label="true"];
102->62 [style = bold, label=""];
16->30 [style = dashed, label="0"];
78->119 [style = bold, label=""];
17->13 [style = bold, label=""];
50->98 [style = bold, label=""];
47->23 [style = bold, label=""];
2->11 [style = bold, label=""];
70->45 [style = bold, label=""];
96->63 [style = bold, label=""];
134->128 [style = bold, label=""];
63->131 [style = bold, label=""];
82->25 [style = dotted, label="true"];
129->70 [style = dotted, label="true"];
29->87 [style = solid, label="operation"];
84->119 [style = bold, label=""];
101->56 [style = dotted, label="false"];
29->105 [style = bold, label=""];
28->68 [style = bold, label=""];
87->102 [style = dotted, label="true"];
64->96 [style = dotted, label="false"];
75->32 [style = bold, label=""];
53->59 [style = bold, label=""];
99->119 [style = solid, label="irLeftConstantNode"];
13->9 [style = solid, label="type"];
6->8 [style = bold, label=""];
101->56 [style = bold, label=""];
105->71 [style = solid, label="type"];
134->128 [style = dotted, label="false"];
60->120 [style = dotted, label="true"];
69->75 [style = dotted, label="true"];
100->26 [style = bold, label=""];
39->91 [style = dotted, label="true"];
107->27 [style = dotted, label="true"];
60->71 [style = bold, label=""];
4->7 [style = dotted, label="true"];
13->1 [style = bold, label=""];
79->130 [style = bold, label=""];
108->11 [style = bold, label=""];
36->86 [style = bold, label=""];
115->79 [style = bold, label=""];
45->53 [style = dotted, label="false"];
113->31 [style = bold, label=""];
38->30 [style = bold, label=""];
105->77 [style = solid, label="type"];
105->24 [style = solid, label="type"];
41->89 [style = bold, label=""];
52->114 [style = bold, label=""];
113->31 [style = dotted, label="true"];
34->32 [style = bold, label=""];
98->52 [style = bold, label=""];
117->123 [style = dotted, label="false"];
113->50 [style = bold, label=""];
8->11 [style = bold, label=""];
14->18 [style = dotted, label="true"];
18->0 [style = bold, label=""];
37->80 [style = dotted, label="true"];
16->3 [style = bold, label=""];
4->121 [style = dashed, label="0"];
96->48 [style = dotted, label="true"];
93->90 [style = bold, label=""];
91->32 [style = bold, label=""];
105->98 [style = solid, label="type"];
94->46 [style = bold, label=""];
133->126 [style = bold, label=""];
117->123 [style = bold, label=""];
31->132 [style = dotted, label="true"];
38->111 [style = dotted, label="true"];
105->115 [style = solid, label="type"];
76->49 [style = bold, label=""];
6->8 [style = dotted, label="false"];
53->124 [style = bold, label=""];
101->34 [style = bold, label=""];
58->93 [style = bold, label=""];
70->121 [style = dotted, label="false"];
15->12 [style = dotted, label="true"];
14->1 [style = dotted, label="true"];
44->81 [style = dotted, label="true"];
127->57 [style = dotted, label="true"];
64->96 [style = bold, label=""];
102->107 [style = dotted, label="false"];
38->54 [style = dotted, label="true"];
76->84 [style = dotted, label="true"];
35->83 [style = bold, label=""];
121->77 [style = dotted, label="true"];
27->97 [style = bold, label=""];
24->101 [style = bold, label=""];
105->69 [style = solid, label="type"];
21->10 [style = solid, label="type"];
116->133 [style = bold, label=""];
102->62 [style = dotted, label="true"];
59->103 [style = bold, label=""];
49->88 [style = dotted, label="true"];
105->127 [style = solid, label="type"];
69->24 [style = bold, label=""];
70->11 [style = dotted, label="true"];
105->37 [style = solid, label="type"];
70->121 [style = bold, label=""];
105->102 [style = solid, label="type"];
17->4 [style = solid, label="operation"];
116->40 [style = dotted, label="true"];
105->70 [style = bold, label=""];
37->80 [style = bold, label=""];
62->97 [style = bold, label=""];
1->70 [style = dashed, label="0"];
26->130 [style = bold, label=""];
105->100 [style = solid, label="type"];
61->115 [style = bold, label=""];
105->83 [style = solid, label="type"];
21->6 [style = solid, label="type"];
99->68 [style = solid, label="irLeftConstantNode"];
129->42 [style = dotted, label="true"];
120->130 [style = bold, label=""];
13->6 [style = solid, label="type"];
107->27 [style = bold, label=""];
105->47 [style = solid, label="type"];
105->116 [style = solid, label="type"];
17->1 [style = solid, label="operation"];
81->119 [style = bold, label=""];
100->60 [style = bold, label=""];
90->36 [style = dotted, label="true"];
105->78 [style = solid, label="type"];
105->106 [style = solid, label="type"];
45->108 [style = dotted, label="true"];
50->98 [style = dotted, label="true"];
114->117 [style = dotted, label="false"];
42->29 [style = bold, label=""];
74->51 [style = bold, label=""];
43->66 [style = dotted, label="false"];
59->118 [style = dotted, label="true"];
18->11 [style = solid, label="irLeftConstantNode"];
13->21 [style = dashed, label="0"];
0->42 [style = dashed, label="0"];
66->64 [style = dotted, label="true"];
35->67 [style = bold, label=""];
9->5 [style = bold, label=""];
113->50 [style = dotted, label="false"];
99->46 [style = solid, label="irLeftConstantNode"];
121->85 [style = dotted, label="false"];
43->116 [style = bold, label=""];
73->37 [style = bold, label=""];
0->17 [style = bold, label=""];
29->50 [style = solid, label="operation"];
92->11 [style = bold, label=""];
74->110 [style = bold, label=""];
105->114 [style = solid, label="type"];
10->7 [style = bold, label=""];
107->112 [style = dotted, label="false"];
71->130 [style = bold, label=""];
73->41 [style = dotted, label="true"];
44->81 [style = bold, label=""];
18->7 [style = solid, label="irLeftConstantNode"];
74->51 [style = dotted, label="true"];
10->71 [style = dashed, label="0"];
5->7 [style = bold, label=""];
90->35 [style = bold, label=""];
99->86 [style = solid, label="irLeftConstantNode"];
13->8 [style = solid, label="type"];
55->32 [style = bold, label=""];
43->23 [style = dotted, label="true"];
103->92 [style = dotted, label="false"];
66->131 [style = dotted, label="true"];
98->52 [style = dotted, label="false"];
37->74 [style = dotted, label="false"];
93->61 [style = dotted, label="false"];
22->16 [style = bold, label=""];
60->120 [style = bold, label=""];
77->69 [style = bold, label=""];
77->55 [style = dotted, label="true"];
134->94 [style = bold, label=""];
73->41 [style = bold, label=""];
52->95 [style = bold, label=""];
85->113 [style = dotted, label="false"];
58->134 [style = dotted, label="true"];
126->23 [style = bold, label=""];
116->133 [style = dotted, label="false"];
61->87 [style = bold, label=""];
66->58 [style = bold, label=""];
24->33 [style = bold, label=""];
31->44 [style = dotted, label="false"];
13->105 [style = dashed, label="0"];
52->114 [style = dotted, label="false"];
1->6 [style = bold, label=""];
53->59 [style = dotted, label="false"];
105->45 [style = solid, label="type"];
77->55 [style = bold, label=""];
105->103 [style = solid, label="type"];
129->99 [style = dotted, label="true"];
127->73 [style = dotted, label="false"];
96->63 [style = dotted, label="false"];
66->58 [style = dotted, label="false"];
99->11 [style = solid, label="irLeftConstantNode"];
98->109 [style = bold, label=""];
64->104 [style = dotted, label="true"];
90->35 [style = dotted, label="false"];
3->14 [style = bold, label=""];
74->110 [style = dotted, label="false"];
114->117 [style = bold, label=""];
15->16 [style = bold, label=""];
17->29 [style = dashed, label="0"];
52->95 [style = dotted, label="true"];
29->85 [style = solid, label="operation"];
132->119 [style = bold, label=""];
105->56 [style = solid, label="type"];
105->74 [style = solid, label="type"];
85->127 [style = bold, label=""];
1->4 [style = dotted, label="false"];
105->60 [style = solid, label="type"];
25->89 [style = bold, label=""];
4->9 [style = dotted, label="true"];
121->77 [style = bold, label=""];
}
