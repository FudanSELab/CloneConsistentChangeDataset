digraph {
4 [style = filled, label = "testNullPatternOnEmptyString['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testNullPatternOnEmptyString['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "expectException(,\"Function(regexp_like( pattern must be a string literal\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "NullHandling.sqlCompatible()@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(ExprEval.ofLongBoolean(true).value(),result.value())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final ExprEval<?> result = eval(\"regexp_like(a, null)\",Parser.withMap(ImmutableMap.of(\"a\",\"\")))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "final ExprEval<?> result = eval(\"regexp_like(a, null)\",InputBindings.withMap(ImmutableMap.of(\"a\",\"\")))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testMatch['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(ExprEval.of(true,ExprType.LONG).value(),result.value())@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final ExprEval<?> result = eval(\"contains_string(a, 'oba')\",Parser.withMap(ImmutableMap.of(\"a\",\"foobar\")))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->7 [style = bold, label=""];
0->3 [style = bold, label=""];
7->9 [style = bold, label=""];
6->1 [style = bold, label=""];
3->6 [style = dashed, label="0"];
0->2 [style = dotted, label="true"];
3->1 [style = bold, label=""];
5->0 [style = bold, label=""];
0->6 [style = bold, label=""];
2->6 [style = bold, label=""];
2->3 [style = bold, label=""];
4->0 [style = bold, label=""];
0->2 [style = bold, label=""];
}
