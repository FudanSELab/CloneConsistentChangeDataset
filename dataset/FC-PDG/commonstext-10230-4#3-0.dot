digraph {
3 [style = filled, label = "assertEquals(\"b\",tok.next())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "tok = new StringTokenizer((char(()null,' ','\"')@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "tok = new StrTokenizer(new char((((,' ','\"')@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "tok = new StringTokenizer(new char((((,' ','\"')@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(1,tok.getQuoteMatcher().isMatch(\"\"\".toCharArray(),0,0,1))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(1,tok.getDelimiterMatcher().isMatch(\" \",0,0,1))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertFalse(tok.hasNext())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(),' ','\"')@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testConstructor_charArray_char_char['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testConstructor_charArray_char_char['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertFalse(tok.hasNext())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "tok = new StrTokenizer((char(()null,' ','\"')@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "StringTokenizer tok = new StringTokenizer(\"a b\".toCharArray(),' ','\"')@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"a\",tok.next())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(1,tok.getDelimiterMatcher().isMatch(\" \".toCharArray(),0,0,1))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertFalse(tok.hasNext())@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testConstructor_charArray_char_char['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(1,tok.getQuoteMatcher().isMatch(\"\"\",0,0,1))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4->14 [style = dashed, label="0"];
8->9 [style = bold, label=""];
10->2 [style = bold, label=""];
1->10 [style = bold, label=""];
6->4 [style = bold, label=""];
7->15 [style = dashed, label="0"];
0->7 [style = bold, label=""];
12->2 [style = bold, label=""];
11->9 [style = bold, label=""];
14->0 [style = bold, label=""];
9->16 [style = dashed, label="0"];
2->3 [style = bold, label=""];
3->6 [style = bold, label=""];
10->12 [style = bold, label=""];
6->14 [style = bold, label=""];
0->15 [style = bold, label=""];
16->1 [style = bold, label=""];
15->5 [style = bold, label=""];
7->5 [style = bold, label=""];
13->10 [style = bold, label=""];
17->16 [style = bold, label=""];
9->1 [style = bold, label=""];
4->0 [style = bold, label=""];
1->13 [style = bold, label=""];
}
