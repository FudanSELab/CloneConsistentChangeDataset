digraph {
3 [style = filled, label = "assertEquals(250,nextOffsetRanges(0(.fromOffset())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "KafkaOffsetGen kafkaOffsetGen = new KafkaOffsetGen(getConsumerConfigs(\"latest\",\"string\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "KafkaOffsetGen kafkaOffsetGen = new KafkaOffsetGen(getConsumerConfigs(\"earliest\"))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(2,nextOffsetRanges.length)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String lastCheckpointString = TEST_TOPIC_NAME + \",0:250\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(1,nextOffsetRanges.length)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "OffsetRange(( nextOffsetRanges = kafkaOffsetGen.getNextOffsetRanges(Option.of(lastCheckpointString),500,metrics)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testUtils.createTopic(TEST_TOPIC_NAME,2)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "OffsetRange(( nextOffsetRanges = kafkaOffsetGen.getNextOffsetRanges(Option.empty(),499,metrics)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testUtils.createTopic(TEST_TOPIC_NAME,1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(750,nextOffsetRanges(0(.untilOffset())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(249,nextOffsetRanges(1(.untilOffset())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testGetNextOffsetRangesFromMultiplePartitions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(0,nextOffsetRanges(1(.fromOffset())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testUtils.sendMessages(TEST_TOPIC_NAME,Helpers.jsonifyRecords(dataGenerator.generateInserts(\"000\",1000)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testGetNextOffsetRangesFromCheckpoint['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "KafkaOffsetGen kafkaOffsetGen = new KafkaOffsetGen(getConsumerConfigs(\"latest\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "testGetNextOffsetRangesFromCheckpoint['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(250,nextOffsetRanges(0(.untilOffset())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(0,nextOffsetRanges(0(.fromOffset())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
7->11 [style = bold, label=""];
9->0 [style = bold, label=""];
6->0 [style = solid, label="lastCheckpointString"];
2->6 [style = bold, label=""];
12->20 [style = bold, label=""];
8->14 [style = bold, label=""];
16->19 [style = bold, label=""];
1->7 [style = bold, label=""];
3->4 [style = bold, label=""];
10->6 [style = bold, label=""];
14->7 [style = bold, label=""];
3->19 [style = dashed, label="0"];
5->16 [style = dashed, label="0"];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
15->17 [style = bold, label=""];
20->8 [style = bold, label=""];
11->0 [style = bold, label=""];
4->15 [style = dashed, label="0"];
6->8 [style = bold, label=""];
7->18 [style = bold, label=""];
9->11 [style = dashed, label="0"];
0->18 [style = dashed, label="0"];
1->8 [style = dashed, label="0"];
17->13 [style = bold, label=""];
9->7 [style = dashed, label="0"];
19->15 [style = bold, label=""];
0->5 [style = bold, label=""];
18->16 [style = bold, label=""];
}
