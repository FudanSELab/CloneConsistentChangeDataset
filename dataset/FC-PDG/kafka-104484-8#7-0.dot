digraph {
6 [style = filled, label = "assertEquals(epoch,partitionResponse.currentLeader().leaderEpoch())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "context.becomeLeader()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "context.assertSentFetchPartitionResponse(Errors.NONE,epoch,OptionalInt.of(localId))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(oldestSnapshotId.epoch,partitionResponse.snapshotId().epoch())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "FetchResponseData.FetchablePartitionResponse partitionResponse = context.assertSentFetchPartitionResponse()@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "int otherNodeId = localId + 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "FetchResponseData.PartitionData partitionResponse = context.assertSentFetchPartitionResponse()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "testFetchRequestAtLogStartOffsetWithValidEpoch['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int syncNodeId = otherNodeId + 1@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "context.client.poll()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testFetchRequestAtLogStartOffsetWithInvalidEpoch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "context.pollUntilResponse()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "context.deliverRequest(context.fetchRequest(epoch,otherNodeId,oldestSnapshotId.offset,oldestSnapshotId.epoch,0))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "context.assertSentFetchPartitionResponse(Errors.NONE,epoch,OptionalInt.of(localId))@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "context.deliverRequest(context.fetchRequest(epoch,otherNodeId,oldestSnapshotId.offset,oldestSnapshotId.epoch + 1,0))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int epoch = context.currentEpoch()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(Errors.NONE,Errors.forCode(partitionResponse.errorCode()))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "context.pollUntilResponse()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(oldestSnapshotId.offset,partitionResponse.snapshotId().endOffset())@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "RaftClientTestContext context = new RaftClientTestContext.Builder(localId,voters).appendToLog(oldestSnapshotId.epoch,Arrays.asList(\"a\",\"b\",\"c\")).appendToLog(oldestSnapshotId.epoch,Arrays.asList(\"d\",\"e\",\"f\")).appendToLog(oldestSnapshotId.epoch + 2,Arrays.asList(\"g\",\"h\",\"i\")).withAppendLingerMs(1).build()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testFetchRequestAtLogStartOffsetWithInvalidEpoch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEquals(localId,partitionResponse.currentLeader().leaderId())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Set<Integer> voters = Utils.mkSet(localId,otherNodeId,syncNodeId)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "context.deliverRequest(context.fetchRequest(epoch,syncNodeId,context.log.endOffset().offset,epoch,0))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(oldestSnapshotId.epoch + 2 + 1,epoch)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "snapshot.freeze()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "OffsetAndEpoch oldestSnapshotId = new OffsetAndEpoch(3,2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(context.log.endOffset().offset,context.client.highWatermark().getAsLong())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int localId = 0@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->7 [style = solid, label="syncNodeId"];
17->16 [style = bold, label=""];
1->9 [style = solid, label="epoch"];
15->23 [style = bold, label=""];
27->18 [style = bold, label=""];
15->28 [style = dashed, label="0"];
21->0 [style = bold, label=""];
3->1 [style = bold, label=""];
25->23 [style = bold, label=""];
21->7 [style = solid, label="otherNodeId"];
1->28 [style = solid, label="epoch"];
18->15 [style = bold, label=""];
1->11 [style = solid, label="epoch"];
10->3 [style = bold, label=""];
16->7 [style = solid, label="localId"];
21->0 [style = solid, label="otherNodeId"];
1->12 [style = solid, label="epoch"];
1->27 [style = solid, label="epoch"];
2->10 [style = bold, label=""];
18->28 [style = bold, label=""];
16->28 [style = solid, label="localId"];
11->18 [style = bold, label=""];
0->7 [style = bold, label=""];
6->20 [style = bold, label=""];
16->9 [style = solid, label="localId"];
12->13 [style = bold, label=""];
24->16 [style = bold, label=""];
26->16 [style = bold, label=""];
15->25 [style = dashed, label="0"];
1->6 [style = solid, label="epoch"];
22->27 [style = bold, label=""];
21->11 [style = solid, label="otherNodeId"];
7->2 [style = bold, label=""];
16->21 [style = bold, label=""];
23->6 [style = bold, label=""];
0->4 [style = solid, label="syncNodeId"];
20->12 [style = bold, label=""];
8->9 [style = bold, label=""];
9->14 [style = bold, label=""];
18->25 [style = bold, label=""];
16->20 [style = solid, label="localId"];
1->19 [style = solid, label="epoch"];
4->8 [style = bold, label=""];
1->4 [style = solid, label="epoch"];
19->4 [style = bold, label=""];
11->27 [style = dashed, label="0"];
1->19 [style = bold, label=""];
5->22 [style = bold, label=""];
22->11 [style = bold, label=""];
16->21 [style = solid, label="localId"];
21->27 [style = solid, label="otherNodeId"];
14->5 [style = bold, label=""];
}
