digraph {
15 [style = filled, label = "assertEquals(Optional.of(\"Improving Urban Road Extraction in High-Resolution \" + \"Images Exploiting Directional Filtering, Perceptual \" + \"Grouping, and Simple Topological Concepts\"),a.getField(\"title\"))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(Optional.of(\"Improving Urban Road Extraction in High-Resolution Images Exploiting Directional Filtering, Perceptual Grouping, and Simple Topological Concepts\"),a.getField(\"title\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(Optional.of(\"1545-598X\"),entry.getField(\"SN\"))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "BibEntry a = entries.get(0)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(Optional.of(\"Gamba, P. and Dell'Acqua, F. and Lisini, G.\"),entry.getField(\"author\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(Optional.of(\"387--391\"),entry.getField(\"pages\"))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(Optional.of(\"4\"),a.getField(\"volume\"))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(Optional.of(\"Geoscience and Remote Sensing Letters, IEEE\"),entry.getField(\"journal\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(\"article\",a.getType())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(Optional.of(\"Geoscience and Remote Sensing Letters, IEEE\"),a.getField(\"journal\"))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "BibEntry entry = entries.get(0)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(Optional.of(\"Lorem ipsum abstract\"),a.getField(\"abstract\"))@@@17@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Path file = Paths.get(.getResource(\"IEEEImport1.txt\").toURI())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(Optional.of(\"2006\"),a.getField(\"year\"))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(Optional.of(\"2006\"),entry.getField(\"year\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertEquals(Optional.of(\"3\"),entry.getField(\"number\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(Optional.of(\"1545-598X\"),a.getField(\"SN\"))@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(Optional.of(\"4\"),entry.getField(\"volume\"))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertEquals(1,entries.size())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(Optional.of(\"387--391\"),a.getField(\"pages\"))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<BibEntry> entries = importer.importDatabase(file,StandardCharsets.UTF_8).getDatabase().getEntries()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(Optional.of(\"Lorem ipsum abstract\"),entry.getField(\"abstract\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "testImportIEEEExport['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertEquals(Optional.of(\"3\"),a.getField(\"number\"))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"article\",entry.getType())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(Optional.of(\"Gamba, P. and Dell'Acqua, F. and Lisini, G.\"),a.getField(\"author\"))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testImportIEEEExport['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testIEEEImport['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(Optional.of(\"Perceptual grouping, street extraction, urban remote sensing\"),a.getField(\"keywords\"))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(Optional.of(\"Improving Urban Road Extraction in High-Resolution \" + \"Images Exploiting Directional Filtering, Perceptual \" + \"Grouping, and Simple Topological Concepts\"),entry.getField(\"title\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(Optional.of(\"Perceptual grouping, street extraction, urban remote sensing\"),entry.getField(\"keywords\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27->13 [style = bold, label=""];
19->18 [style = bold, label=""];
9->16 [style = dashed, label="0"];
6->20 [style = dashed, label="0"];
2->3 [style = bold, label=""];
4->13 [style = bold, label=""];
12->11 [style = bold, label=""];
29->0 [style = bold, label=""];
26->8 [style = bold, label=""];
15->29 [style = dashed, label="0"];
5->14 [style = bold, label=""];
16->22 [style = bold, label=""];
18->28 [style = bold, label=""];
1->17 [style = dashed, label="0"];
1->6 [style = bold, label=""];
12->19 [style = dashed, label="0"];
10->8 [style = bold, label=""];
23->21 [style = bold, label=""];
7->28 [style = dashed, label="0"];
9->15 [style = bold, label=""];
0->1 [style = bold, label=""];
7->2 [style = bold, label=""];
15->0 [style = bold, label=""];
11->18 [style = dashed, label="0"];
4->27 [style = bold, label=""];
24->17 [style = bold, label=""];
2->25 [style = dashed, label="0"];
13->23 [style = bold, label=""];
13->5 [style = bold, label=""];
21->16 [style = bold, label=""];
28->25 [style = bold, label=""];
0->24 [style = dashed, label="0"];
14->9 [style = bold, label=""];
14->21 [style = dashed, label="0"];
8->4 [style = bold, label=""];
22->24 [style = bold, label=""];
30->8 [style = bold, label=""];
20->19 [style = bold, label=""];
9->29 [style = bold, label=""];
11->7 [style = bold, label=""];
17->20 [style = bold, label=""];
6->12 [style = bold, label=""];
}
