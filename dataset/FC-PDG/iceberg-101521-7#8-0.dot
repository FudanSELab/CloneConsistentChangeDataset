digraph {
2 [style = filled, label = "return ROWS_CANNOT_MATCH@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "cmp > 0@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int cmp = lit.comparator().compare(lower,lit.value())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return ROWS_MIGHT_MATCH@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "containsNullsOnly(id) || containsNaNsOnly(id)@@@4@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "ltEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "upperBounds != null && upperBounds.containsKey(id)@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "return ROWS_CANNOT_MATCH@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "return ROWS_MIGHT_MATCH@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "BoundReference<T> ref@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "T upper = Conversions.fromByteBuffer(ref.type(),upperBounds.get(id))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "cmp <= 0@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Literal<T> lit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "T lower = Conversions.fromByteBuffer(ref.type(),lowerBounds.get(id))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ltEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "lowerBounds != null && lowerBounds.containsKey(id)@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "gt['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Literal<T> lit@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int cmp = lit.comparator().compare(upper,lit.value())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Integer id = ref.fieldId()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "containsNullsOnly(id)@@@4@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "NaNUtil.isNaN(lower)@@@9@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3->12 [style = dotted, label="true"];
5->22 [style = dashed, label="0"];
11->3 [style = bold, label=""];
0->21 [style = solid, label="id"];
11->21 [style = bold, label=""];
1->11 [style = dotted, label="true"];
10->18 [style = dashed, label="0"];
21->22 [style = bold, label=""];
21->18 [style = dotted, label="true"];
23->20 [style = dotted, label="true"];
0->3 [style = solid, label="id"];
12->15 [style = bold, label=""];
1->21 [style = bold, label=""];
7->8 [style = dotted, label="true"];
5->12 [style = solid, label="lower"];
23->19 [style = dotted, label="true"];
0->1 [style = solid, label="id"];
22->18 [style = solid, label="upper"];
14->8 [style = dotted, label="true"];
5->10 [style = solid, label="lower"];
21->22 [style = dotted, label="true"];
12->15 [style = dotted, label="true"];
3->21 [style = dashed, label="0"];
21->17 [style = dotted, label="true"];
14->0 [style = bold, label=""];
4->17 [style = dashed, label="0"];
5->10 [style = bold, label=""];
3->5 [style = bold, label=""];
0->1 [style = bold, label=""];
23->0 [style = bold, label=""];
4->2 [style = bold, label=""];
1->11 [style = bold, label=""];
18->17 [style = solid, label="cmp"];
7->6 [style = dotted, label="true"];
8->20 [style = dashed, label="0"];
3->10 [style = dotted, label="true"];
12->10 [style = bold, label=""];
2->9 [style = bold, label=""];
1->3 [style = bold, label=""];
10->4 [style = solid, label="cmp"];
14->13 [style = dotted, label="true"];
3->4 [style = dotted, label="true"];
10->4 [style = bold, label=""];
16->3 [style = bold, label=""];
4->9 [style = bold, label=""];
3->9 [style = bold, label=""];
7->0 [style = bold, label=""];
17->9 [style = bold, label=""];
0->22 [style = solid, label="id"];
22->18 [style = bold, label=""];
17->2 [style = dotted, label="true"];
16->11 [style = dotted, label="true"];
1->16 [style = dashed, label="0"];
18->17 [style = bold, label=""];
0->16 [style = solid, label="id"];
5->12 [style = bold, label=""];
21->9 [style = bold, label=""];
4->2 [style = dotted, label="true"];
16->11 [style = bold, label=""];
3->5 [style = dotted, label="true"];
15->10 [style = bold, label=""];
17->2 [style = bold, label=""];
0->5 [style = solid, label="id"];
0->16 [style = bold, label=""];
}
