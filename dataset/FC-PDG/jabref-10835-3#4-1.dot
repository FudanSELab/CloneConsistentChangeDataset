digraph {
12 [style = filled, label = "root.addChild(new TreeNodeTestData.TreeNodeMock())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "TreeNodeTestData.TreeNodeMock previous = new TreeNodeTestData.TreeNodeMock()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "root.addChild(new TreeNodeMock())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "root.addChild(node)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(previous,node.getPreviousSibling().get())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "root.addChild(new TreeNodeMock())@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TreeNodeMock node = new TreeNodeMock()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "root.addChild(new TreeNodeTestData.TreeNodeMock())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "root.addChild(previous)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "root.addChild(next)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TreeNodeTestData.TreeNodeMock node = new TreeNodeTestData.TreeNodeMock()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "getPreviousSiblingReturnsCorrect['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TreeNodeTestData.TreeNodeMock root = new TreeNodeTestData.TreeNodeMock()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(next,node.getNextSibling().get())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "getPreviousSiblingReturnsCorrect['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "getNextSiblingReturnsCorrect['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TreeNodeMock previous = new TreeNodeMock()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "TreeNodeMock root = new TreeNodeMock()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TreeNodeMock next = new TreeNodeMock()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->8 [style = solid, label="previous"];
3->1 [style = bold, label=""];
2->3 [style = bold, label=""];
14->1 [style = solid, label="node"];
13->8 [style = solid, label="previous"];
8->3 [style = bold, label=""];
8->14 [style = bold, label=""];
1->0 [style = bold, label=""];
16->17 [style = bold, label=""];
9->7 [style = bold, label=""];
3->1 [style = solid, label="node"];
2->4 [style = bold, label=""];
0->15 [style = bold, label=""];
1->9 [style = bold, label=""];
14->1 [style = bold, label=""];
6->10 [style = dashed, label="0"];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
12->13 [style = bold, label=""];
2->12 [style = dashed, label="0"];
17->0 [style = bold, label=""];
5->6 [style = bold, label=""];
4->7 [style = solid, label="previous"];
13->7 [style = solid, label="previous"];
18->6 [style = bold, label=""];
10->12 [style = bold, label=""];
11->10 [style = bold, label=""];
1->16 [style = bold, label=""];
16->15 [style = solid, label="next"];
7->15 [style = dashed, label="0"];
4->8 [style = bold, label=""];
0->9 [style = dashed, label="0"];
13->8 [style = bold, label=""];
4->13 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
16->17 [style = solid, label="next"];
}
