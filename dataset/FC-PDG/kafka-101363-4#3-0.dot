digraph {
25 [style = filled, label = "verifyInEquality(TimeWindows.of(3).grace(2),TimeWindows.of(3).grace(1))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertNotEquals(JoinWindows.of(3).grace(9),JoinWindows.of(3).grace(2))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "verifyInEquality(TimeWindows.of(3).until(9),TimeWindows.of(3).until(4))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "verifyInEquality(TimeWindows.of(9),TimeWindows.of(3))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "assertNotEquals(JoinWindows.of(3).until(90),JoinWindows.of(3).until(60))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).hashCode(),TimeWindows.of(3).advanceBy(1).hashCode())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2),TimeWindows.of(3).advanceBy(1))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(9).after(2).grace(3).until(60).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertNotEquals(JoinWindows.of(3).after(9),JoinWindows.of(3).after(2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(9).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(1).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(1).grace(2).until(4).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertNotEquals(TimeWindows.of(3).grace(2).hashCode(),TimeWindows.of(3).grace(1).hashCode())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(1).until(4).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertNotEquals(TimeWindows.of(9).hashCode(),TimeWindows.of(3).hashCode())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertNotEquals(JoinWindows.of(9).hashCode(),JoinWindows.of(3).hashCode())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "assertNotEquals(JoinWindows.of(3).grace(9).hashCode(),JoinWindows.of(3).grace(2).hashCode())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "verifyInEquality(TimeWindows.of(3).advanceBy(1).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertNotEquals(TimeWindows.of(9),TimeWindows.of(3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertNotEquals(TimeWindows.of(4).advanceBy(2).grace(2).until(4).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(9).hashCode(),JoinWindows.of(3).before(2).hashCode())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(9).grace(3).until(60).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(1).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(9).after(2).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(2).until(9).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(2).grace(9).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(2).until(9),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "verifyInEquality(TimeWindows.of(4).advanceBy(2).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertNotEquals(JoinWindows.of(3).after(9).hashCode(),JoinWindows.of(3).after(2).hashCode())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertNotEquals(TimeWindows.of(3).grace(2),TimeWindows.of(3).grace(1))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(2).grace(9).until(60).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertNotEquals(TimeWindows.of(3).until(9),TimeWindows.of(3).until(4))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "assertNotEquals(JoinWindows.of(3).until(90).hashCode(),JoinWindows.of(3).until(60).hashCode())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(9),JoinWindows.of(3).before(2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertNotEquals(JoinWindows.of(9),JoinWindows.of(3))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertNotEquals(TimeWindows.of(3).until(9).hashCode(),TimeWindows.of(3).until(4).hashCode())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(1).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "verifyInEquality(TimeWindows.of(3).advanceBy(2),TimeWindows.of(3).advanceBy(1))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(2).until(9),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(2).grace(3).until(90).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertNotEquals(TimeWindows.of(4).advanceBy(2).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(2).grace(3).until(90),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
14->3 [style = bold, label=""];
11->16 [style = bold, label=""];
5->8 [style = bold, label=""];
8->10 [style = bold, label=""];
16->15 [style = bold, label=""];
22->25 [style = bold, label=""];
18->24 [style = bold, label=""];
23->20 [style = bold, label=""];
33->35 [style = bold, label=""];
30->38 [style = bold, label=""];
3->28 [style = dashed, label="0"];
9->0 [style = bold, label=""];
36->41 [style = bold, label=""];
10->14 [style = bold, label=""];
5->26 [style = dashed, label="0"];
28->39 [style = bold, label=""];
10->38 [style = dashed, label="0"];
43->36 [style = bold, label=""];
25->18 [style = bold, label=""];
3->11 [style = bold, label=""];
39->43 [style = bold, label=""];
44->33 [style = bold, label=""];
15->6 [style = bold, label=""];
5->25 [style = dashed, label="0"];
29->37 [style = bold, label=""];
4->22 [style = dashed, label="0"];
17->22 [style = bold, label=""];
2->17 [style = dashed, label="0"];
2->4 [style = bold, label=""];
12->7 [style = bold, label=""];
27->42 [style = bold, label=""];
26->30 [style = bold, label=""];
34->28 [style = bold, label=""];
14->23 [style = dashed, label="0"];
31->27 [style = bold, label=""];
41->40 [style = bold, label=""];
38->34 [style = bold, label=""];
37->32 [style = bold, label=""];
8->18 [style = dashed, label="0"];
1->2 [style = bold, label=""];
2->33 [style = dashed, label="0"];
13->9 [style = bold, label=""];
20->19 [style = bold, label=""];
4->5 [style = bold, label=""];
21->17 [style = bold, label=""];
35->26 [style = bold, label=""];
32->31 [style = bold, label=""];
10->24 [style = dashed, label="0"];
4->35 [style = dashed, label="0"];
40->29 [style = bold, label=""];
24->23 [style = bold, label=""];
6->12 [style = bold, label=""];
}
