digraph {
4 [style = filled, label = "builder = TestMessageSet.newBuilder()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestMessageSet messageSet = builder.build()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "extensionRegistry.add(TestMessageSetExtension2.messageSetExtension)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TextFormat.merge(messageSetText,extensionRegistry,builder)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "TestMessageSet.Builder builder = TestMessageSet.newBuilder()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(messageSet.hasExtension(TestMessageSetExtension1.messageSetExtension))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "TextFormat.merge(messageSetTextWithRepeatedExtension,extensionRegistry,builder)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(\"foo\",messageSet.getExtension(TestMessageSetExtension2.messageSetExtension).getStr())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "fail(\"expected parse exception\")@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "messageSet = builder.build()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "extensionRegistry.add(TestMessageSetExtension1.messageSetExtension)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ExtensionRegistry extensionRegistry = ExtensionRegistry.newInstance()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testMergeMessageSet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(456,messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testMergeMessageSetWithOverwriteForbidden['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"foo\",messageSet.getExtension(TestMessageSetExtension2.messageSetExtension).getStr())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "builder = TestMessageSet.newBuilder()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testMergeMessageSetWithOverwriteForbidden['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(messageSet.hasExtension(TestMessageSetExtension2.messageSetExtension))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(123,messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(123,messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "parserWithOverwriteForbidden.merge(messageSetText,extensionRegistry,builder)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->16 [style = solid, label="extensionRegistry"];
4->16 [style = solid, label="builder"];
8->14 [style = bold, label=""];
18->20 [style = bold, label=""];
2->4 [style = bold, label=""];
6->3 [style = solid, label="extensionRegistry"];
4->16 [style = bold, label=""];
2->4 [style = solid, label="builder"];
1->21 [style = bold, label=""];
6->0 [style = bold, label=""];
13->6 [style = bold, label=""];
10->8 [style = bold, label=""];
3->14 [style = dashed, label="0"];
11->6 [style = bold, label=""];
3->1 [style = bold, label=""];
8->3 [style = bold, label=""];
20->19 [style = bold, label=""];
14->1 [style = bold, label=""];
0->10 [style = bold, label=""];
6->4 [style = solid, label="extensionRegistry"];
17->15 [style = bold, label=""];
21->18 [style = bold, label=""];
8->3 [style = solid, label="builder"];
4->9 [style = bold, label=""];
5->21 [style = dashed, label="0"];
19->4 [style = bold, label=""];
6->14 [style = solid, label="extensionRegistry"];
16->17 [style = bold, label=""];
8->14 [style = solid, label="builder"];
5->7 [style = bold, label=""];
12->6 [style = bold, label=""];
7->18 [style = dashed, label="0"];
1->5 [style = bold, label=""];
7->2 [style = bold, label=""];
}
