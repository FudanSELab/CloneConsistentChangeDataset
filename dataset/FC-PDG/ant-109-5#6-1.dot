digraph {
16 [style = filled, label = "byte(( data2 = new byte((((@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"number of fields\",2,ze.length)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i < 4@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int i = 0@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"data length field 2\",1,ze(1(.getLocalFileDataLength().getValue())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testParseWithRead['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(\"type field 2\",ze(1(,instanceOf())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(\"type field 1\",ze(0(,instanceOf())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertEquals(\"number of fields\",1,ze.length)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "System.arraycopy(data,0,data2,0,data2.length)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(\"type field 2\",ze(1( instanceof UnrecognizedExtraField)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(\"type field 2\",ze(1( instanceof UnparseableExtraFieldData)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"byte number \" + i,data2(data.length - 5 + i(,ze(1(.getLocalFileDataData()(i()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ze = ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.READ)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"mode field 1\",040755,((AsiExtraField)ze(0().getMode())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"mode field 1\",040755,((AsiExtraField)ze(0().getMode())@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"data length field 2\",4,ze(1(.getLocalFileDataLength().getValue())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"number of fields\",2,ze.length)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ZipExtraField(( ze = ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.SKIP)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "ze = ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.SKIP)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ZipExtraField(( ze = ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.READ)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testParseWithRead['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "i++@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testParseWithSkip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(\"type field 1\",ze(0(,instanceOf())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(\"type field 2\",ze(1(,instanceOf())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2->17 [style = bold, label=""];
0->3 [style = bold, label=""];
13->10 [style = bold, label=""];
5->8 [style = bold, label=""];
17->5 [style = bold, label=""];
14->13 [style = solid, label="i"];
0->15 [style = solid, label="ze"];
2->21 [style = solid, label="ze"];
2->20 [style = solid, label="ze"];
12->20 [style = dashed, label="0"];
16->2 [style = solid, label="data2"];
0->22 [style = solid, label="ze"];
10->14 [style = bold, label=""];
26->5 [style = bold, label=""];
4->14 [style = solid, label="i"];
25->5 [style = solid, label="ze"];
16->6 [style = bold, label=""];
27->9 [style = solid, label="ze"];
4->13 [style = bold, label=""];
27->3 [style = bold, label=""];
21->8 [style = bold, label=""];
16->6 [style = solid, label="data2"];
0->19 [style = solid, label="ze"];
14->10 [style = solid, label="i"];
3->15 [style = bold, label=""];
1->0 [style = bold, label=""];
0->27 [style = dashed, label="0"];
16->10 [style = solid, label="data2"];
11->19 [style = bold, label=""];
9->7 [style = bold, label=""];
11->9 [style = bold, label=""];
3->22 [style = bold, label=""];
23->0 [style = bold, label=""];
13->10 [style = dotted, label="true"];
2->12 [style = solid, label="ze"];
4->13 [style = solid, label="i"];
15->22 [style = dashed, label="0"];
6->2 [style = bold, label=""];
0->9 [style = solid, label="ze"];
16->25 [style = solid, label="data2"];
20->18 [style = bold, label=""];
2->5 [style = solid, label="ze"];
9->19 [style = dashed, label="0"];
8->20 [style = bold, label=""];
15->11 [style = bold, label=""];
18->4 [style = bold, label=""];
7->16 [style = bold, label=""];
25->26 [style = bold, label=""];
12->18 [style = bold, label=""];
4->10 [style = solid, label="i"];
2->25 [style = dashed, label="0"];
5->21 [style = dashed, label="0"];
17->26 [style = dashed, label="0"];
14->13 [style = bold, label=""];
13->14 [style = dotted, label="true"];
27->15 [style = solid, label="ze"];
19->7 [style = bold, label=""];
17->21 [style = bold, label=""];
22->11 [style = bold, label=""];
8->12 [style = bold, label=""];
24->27 [style = bold, label=""];
6->25 [style = bold, label=""];
}
