digraph {
17 [style = filled, label = "verify(observer,times(1)).onNext(\"resume\")@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "verify(subscriber,Mockito.never()).onNext(\"three\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "mapResumeAsyncNext['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verify(observer,Mockito.never()).onError(any())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Flowable<String> flowable = w.onErrorReturn(new Function<Throwable,String>(){@Override public String apply(Throwable t1){return \"resume\"}})@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "mapResumeAsyncNext['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Flowable<String> w = Flowable.just(\"one\",\"fail\",\"two\",\"three\",\"fail\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "flowable.subscribe(ts)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "verify(subscriber,times(1)).onNext(\"resume\")@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "verify(observer,times(1)).onComplete()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "verify(subscriber,times(1)).onComplete()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verify(observer,Mockito.never()).onNext(\"two\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "verify(subscriber,Mockito.never()).onError(any())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "observable.subscribe(to)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<>(subscriber,Long.MAX_VALUE)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "TestObserver<String> to = new TestObserver<String>(observer)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Observable<String> observable = w.onErrorReturn(new Function<Throwable,String>(){@Override public String apply(Throwable t1){return \"resume\"}})@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "mapResumeAsyncNext['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "verify(subscriber,Mockito.never()).onNext(\"two\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Observer<String> observer = TestHelper.mockObserver()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "verify(observer,times(1)).onNext(\"one\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Observable<String> w = Observable.just(\"one\",\"fail\",\"two\",\"three\",\"fail\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "to.awaitDone(5,TimeUnit.SECONDS)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "verify(subscriber,times(1)).onNext(\"one\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Subscriber<String> subscriber = TestHelper.mockSubscriber()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "w = w.map(new Function<String,String>(){@Override public String apply(String s){if (\"fail\".equals(s)) {throw new RuntimeException(\"Forced Failure\")}System.out.println(\"BadMapper:\" + s)return s}})@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "verify(observer,Mockito.never()).onNext(\"three\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<String>(subscriber,Long.MAX_VALUE)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20->23 [style = solid, label="to"];
6->21 [style = dashed, label="0"];
0->9 [style = bold, label=""];
15->2 [style = bold, label=""];
3->28 [style = dashed, label="0"];
28->18 [style = bold, label=""];
7->23 [style = dashed, label="0"];
12->28 [style = bold, label=""];
3->1 [style = bold, label=""];
21->19 [style = bold, label=""];
26->17 [style = bold, label=""];
10->19 [style = dashed, label="0"];
16->26 [style = bold, label=""];
1->11 [style = solid, label="subscriber"];
18->20 [style = solid, label="observer"];
0->26 [style = dashed, label="0"];
1->18 [style = dashed, label="0"];
4->2 [style = bold, label=""];
14->7 [style = solid, label="ts"];
25->16 [style = bold, label=""];
27->22 [style = bold, label=""];
2->12 [style = bold, label=""];
11->7 [style = solid, label="ts"];
1->11 [style = bold, label=""];
14->7 [style = bold, label=""];
19->24 [style = bold, label=""];
5->16 [style = dashed, label="0"];
18->20 [style = bold, label=""];
13->24 [style = dashed, label="0"];
20->23 [style = bold, label=""];
8->5 [style = bold, label=""];
10->13 [style = bold, label=""];
5->0 [style = bold, label=""];
23->21 [style = bold, label=""];
22->12 [style = bold, label=""];
24->25 [style = bold, label=""];
6->10 [style = bold, label=""];
11->14 [style = dashed, label="0"];
9->17 [style = dashed, label="0"];
7->6 [style = bold, label=""];
1->14 [style = solid, label="subscriber"];
8->25 [style = dashed, label="0"];
1->14 [style = bold, label=""];
12->3 [style = bold, label=""];
13->8 [style = bold, label=""];
2->22 [style = dashed, label="0"];
11->7 [style = bold, label=""];
}
