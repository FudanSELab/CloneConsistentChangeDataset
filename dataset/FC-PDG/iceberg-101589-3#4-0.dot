digraph {
49 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().clientPool().run(null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(.getName(),hmsTable.getSd().getOutputFormat())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(Collections.singletonMap(\"dummy\",\"test\"),icebergTable.properties())@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(hmsParams.get(BaseMetastoreTableOperations.METADATA_LOCATION_PROP).startsWith(icebergTable.location()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(expectedIcebergProperties,icebergTable.properties())@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@40@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"test\",hmsParams.get(\"dummy\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "Assert.assertNotNull(hmsParams.get(hive_metastoreConstants.DDL_TIME))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(.getName(),hmsTable.getSd().getInputFormat())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "hmsTable = shell.metastore().clientPool().run(null)@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"', \" + \"'dummy'='test')\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "fs.exists(hmsTableLocation)@@@46@@@['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "hmsParams.remove(BaseMetastoreTableOperations.METADATA_LOCATION_PROP)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(0,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@26@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "IGNORED_PARAMS.forEach(null)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(.getName(),hmsTable.getSd().getSerdeInfo().getSerializationLib())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(SPEC,icebergTable.spec())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(\"TRUE\",hmsParams.get(\"EXTERNAL\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "expectedIcebergProperties.put(TableProperties.ENGINE_HIVE_ENABLED,\"true\")@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertNull(hmsParams.get(InputFormatConfig.PARTITION_SPEC))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "testCreateTableWithUnpartitionedSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testCreateDropTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "testCreateDropTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@39@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(0,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@48@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@47@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@45@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(PartitionSpec.unpartitioned(),icebergTable.spec())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "expectedIcebergProperties.put(\"dummy\",\"test\")@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(.getName(),hmsTable.getParameters().get(hive_metastoreConstants.META_TABLE_STORAGE))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\",\"customers\")@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"')\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TableIdentifier identifier = TableIdentifier.of(\"default\",\"customers\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(\"TRUE\",hmsParams.get(InputFormatConfig.EXTERNAL_TABLE_PURGE))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "fs.exists(hmsTableLocation)@@@24@@@['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(6,hmsParams.size())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(5,hmsParams.size())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Catalogs.hiveCatalog(shell.getHiveConf())@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Map<String,String> hmsParams = hmsTable.getParameters()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Map<String,String> expectedIcebergProperties = new HashMap<>(2)@@@34@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(6,hmsParams.size())@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE.toUpperCase(),hmsTable.getParameters().get(BaseMetastoreTableOperations.TABLE_TYPE_PROP))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf())@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA.asStruct(),icebergTable.schema().asStruct())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39->20 [style = solid, label="hmsTableLocation"];
40->4 [style = bold, label=""];
14->3 [style = bold, label=""];
36->8 [style = dotted, label="true"];
36->42 [style = dotted, label="false"];
27->32 [style = bold, label=""];
32->0 [style = bold, label=""];
49->14 [style = bold, label=""];
34->18 [style = bold, label=""];
38->41 [style = bold, label=""];
41->20 [style = bold, label=""];
39->44 [style = solid, label="hmsTableLocation"];
1->23 [style = bold, label=""];
36->13 [style = dotted, label="false"];
36->2 [style = bold, label=""];
1->21 [style = solid, label="hmsTableLocation"];
50->10 [style = bold, label=""];
39->38 [style = bold, label=""];
20->43 [style = bold, label=""];
4->16 [style = solid, label="identifier"];
36->21 [style = dotted, label="false"];
21->35 [style = bold, label=""];
5->36 [style = bold, label=""];
43->44 [style = bold, label=""];
4->16 [style = bold, label=""];
48->46 [style = dotted, label="false"];
36->20 [style = dotted, label="false"];
19->18 [style = bold, label=""];
10->51 [style = bold, label=""];
26->1 [style = bold, label=""];
18->12 [style = bold, label=""];
36->2 [style = dotted, label="true"];
36->26 [style = dotted, label="false"];
9->17 [style = bold, label=""];
36->11 [style = dotted, label="false"];
15->11 [style = solid, label="expectedIcebergProperties"];
10->7 [style = bold, label=""];
13->11 [style = bold, label=""];
25->27 [style = bold, label=""];
6->4 [style = bold, label=""];
36->30 [style = bold, label=""];
7->5 [style = bold, label=""];
12->29 [style = bold, label=""];
4->50 [style = solid, label="identifier"];
36->24 [style = dotted, label="false"];
31->33 [style = bold, label=""];
33->36 [style = bold, label=""];
36->39 [style = dotted, label="false"];
19->22 [style = dotted, label="true"];
28->19 [style = bold, label=""];
48->19 [style = dotted, label="true"];
36->41 [style = dotted, label="false"];
44->45 [style = bold, label=""];
19->22 [style = bold, label=""];
36->42 [style = bold, label=""];
0->31 [style = bold, label=""];
11->26 [style = bold, label=""];
24->13 [style = bold, label=""];
39->45 [style = solid, label="hmsTableLocation"];
23->20 [style = bold, label=""];
19->34 [style = dotted, label="true"];
36->43 [style = dotted, label="false"];
35->9 [style = bold, label=""];
37->25 [style = bold, label=""];
42->39 [style = bold, label=""];
29->37 [style = bold, label=""];
36->1 [style = dotted, label="false"];
48->46 [style = bold, label=""];
43->44 [style = dotted, label="true"];
3->28 [style = bold, label=""];
36->15 [style = dotted, label="false"];
4->50 [style = bold, label=""];
36->30 [style = dotted, label="true"];
4->10 [style = solid, label="identifier"];
16->10 [style = bold, label=""];
36->35 [style = dotted, label="false"];
36->15 [style = bold, label=""];
35->9 [style = dotted, label="true"];
1->9 [style = solid, label="hmsTableLocation"];
51->49 [style = bold, label=""];
5->14 [style = bold, label=""];
1->17 [style = solid, label="hmsTableLocation"];
39->43 [style = solid, label="hmsTableLocation"];
36->23 [style = dotted, label="false"];
20->21 [style = bold, label=""];
1->35 [style = solid, label="hmsTableLocation"];
43->45 [style = dotted, label="true"];
15->24 [style = bold, label=""];
22->34 [style = bold, label=""];
16->50 [style = dashed, label="0"];
48->19 [style = bold, label=""];
28->48 [style = bold, label=""];
35->17 [style = dotted, label="true"];
30->2 [style = bold, label=""];
36->38 [style = dotted, label="false"];
2->8 [style = bold, label=""];
47->4 [style = bold, label=""];
}
