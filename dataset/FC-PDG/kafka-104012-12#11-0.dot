digraph {
49 [style = filled, label = "Map<String,List<String>> initialSubscription = singletonMap(consumerId,singletonList(topicName))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertEquals(singleton(topicName),subscriptions.subscription())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(singleton(tp),rebalanceListener.assigned)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.revoked)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "subscriptions.subscribe(singleton(topic1),rebalanceListener)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "Map<String,List<String>> updatedSubscriptions = singletonMap(consumerId,Arrays.asList(topicName,otherTopicName))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.assigned)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
53 [style = filled, label = "final String consumerId = \"leader\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "final String otherTopicName = \"otherTopic\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "subscriptions.subscribe(new HashSet<>(Arrays.asList(topicName,otherTopic)),rebalanceListener)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "final List<String> updatedSubscription = Arrays.asList(topicName,otherTopicName)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertFalse(coordinator.needRejoin())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){final Map<String,Integer> updatedPartitions = new HashMap<>()for (String topic : updatedSubscription)updatedPartitions.put(topic,1)metadata.update(TestUtils.clusterWith(1,updatedPartitions),time.milliseconds())return true}},syncGroupResponse(singletonList(tp),Errors.NONE.code()))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "coordinator.ensureCoordinatorReady()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "client.prepareResponse(joinGroupFollowerResponse(2,\"consumer\",\"leader\",Errors.NONE.code()))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.assigned)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "subscriptions.subscribe(Pattern.compile(\".*\"),rebalanceListener)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(newAssignmentSet,subscriptions.assignedPartitions())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,singletonList(tp)))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testRejoinGroup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "TopicPartition otherPartition = new TopicPartition(otherTopicName,0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "metadata.update(cluster,time.milliseconds())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "client.prepareResponse(joinGroupFollowerResponse(1,\"consumer\",\"leader\",Errors.NONE.code()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String otherTopic = \"otherTopic\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "client.prepareResponse(syncGroupResponse(newAssignment,Errors.NONE.code()))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(singleton(tp),rebalanceListener.revoked)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){JoinGroupRequest join = (JoinGroupRequest)bodyProtocolMetadata protocolMetadata = join.groupProtocols().iterator().next()PartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(protocolMetadata.metadata())protocolMetadata.metadata().rewind()return subscription.topics().containsAll(updatedSubscriptionSet)}},joinGroupLeaderResponse(2,consumerId,updatedSubscriptions,Errors.NONE.code()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE.code()))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "client.prepareResponse(syncGroupResponse(singletonList(tp),Errors.NONE.code()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "assertEquals(updatedSubscriptionSet,subscriptions.subscription())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertEquals(newAssignmentSet,rebalanceListener.assigned)@@@48@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "coordinator.joinGroupIfNeeded()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "subscriptions.subscribe(singleton(topicName),rebalanceListener)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "testMetadataRefreshDuringRebalance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "List<TopicPartition> newAssignment = Arrays.asList(tp,otherPartition)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "client.prepareResponse(syncGroupResponse(singletonList(t1p),Errors.NONE.code()))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "metadata.needMetadataForAllTopics(true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testRejoinGroup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Set<TopicPartition> newAssignmentSet = new HashSet<>(newAssignment)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "coordinator.joinGroupIfNeeded()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "client.prepareResponse(joinGroupLeaderResponse(1,consumerId,initialSubscription,Errors.NONE.code()))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "client.prepareResponse(syncGroupResponse(singletonList(tp),Errors.NONE.code()))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "subscriptions.subscribe(new HashSet<>(Arrays.asList(topic1,otherTopic)),rebalanceListener)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "assertEquals(singleton(tp),rebalanceListener.revoked)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(1,rebalanceListener.assignedCount)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final Set<String> updatedSubscriptionSet = new HashSet<>(updatedSubscription)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "coordinator.poll(time.milliseconds())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(singleton(tp),rebalanceListener.assigned)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "client.prepareResponse(syncGroupResponse(singletonList(t1p),Errors.NONE.code()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "coordinator.ensureCoordinatorReady()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,newAssignment))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE.code()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41->29 [style = solid, label="updatedSubscriptions"];
55->36 [style = bold, label=""];
9->11 [style = bold, label=""];
10->19 [style = bold, label=""];
53->44 [style = bold, label=""];
48->35 [style = bold, label=""];
7->8 [style = bold, label=""];
49->52 [style = solid, label="initialSubscription"];
1->13 [style = bold, label=""];
45->40 [style = solid, label="otherPartition"];
52->28 [style = bold, label=""];
31->50 [style = bold, label=""];
19->1 [style = bold, label=""];
2->49 [style = bold, label=""];
53->41 [style = solid, label="consumerId"];
6->26 [style = dashed, label="0"];
8->51 [style = dashed, label="0"];
27->7 [style = bold, label=""];
33->48 [style = bold, label=""];
39->38 [style = bold, label=""];
14->9 [style = bold, label=""];
13->22 [style = bold, label=""];
53->34 [style = solid, label="consumerId"];
13->14 [style = bold, label=""];
25->21 [style = bold, label=""];
21->13 [style = bold, label=""];
4->21 [style = solid, label="otherTopic"];
0->3 [style = bold, label=""];
4->53 [style = dashed, label="0"];
44->50 [style = solid, label="otherTopicName"];
16->6 [style = bold, label=""];
0->23 [style = dashed, label="0"];
22->9 [style = bold, label=""];
16->26 [style = bold, label=""];
14->22 [style = dashed, label="0"];
6->31 [style = dashed, label="0"];
23->3 [style = bold, label=""];
44->45 [style = solid, label="otherTopicName"];
54->41 [style = bold, label=""];
29->46 [style = solid, label="subscription"];
54->43 [style = solid, label="newAssignmentSet"];
4->0 [style = bold, label=""];
42->29 [style = solid, label="updatedSubscriptionSet"];
7->24 [style = bold, label=""];
17->2 [style = bold, label=""];
54->51 [style = solid, label="newAssignmentSet"];
10->25 [style = bold, label=""];
38->37 [style = bold, label=""];
49->31 [style = bold, label=""];
43->33 [style = bold, label=""];
40->54 [style = solid, label="newAssignment"];
19->25 [style = dashed, label="0"];
44->45 [style = bold, label=""];
35->51 [style = bold, label=""];
4->23 [style = bold, label=""];
37->47 [style = bold, label=""];
46->43 [style = bold, label=""];
34->29 [style = bold, label=""];
50->28 [style = solid, label="updatedSubscription"];
32->46 [style = bold, label=""];
53->29 [style = solid, label="consumerId"];
6->18 [style = bold, label=""];
42->52 [style = bold, label=""];
26->18 [style = bold, label=""];
40->55 [style = solid, label="newAssignment"];
30->53 [style = bold, label=""];
3->12 [style = bold, label=""];
2->10 [style = bold, label=""];
29->55 [style = bold, label=""];
50->42 [style = bold, label=""];
5->4 [style = bold, label=""];
41->34 [style = bold, label=""];
45->39 [style = bold, label=""];
40->54 [style = bold, label=""];
40->34 [style = solid, label="newAssignment"];
28->40 [style = bold, label=""];
15->7 [style = bold, label=""];
53->31 [style = solid, label="consumerId"];
18->17 [style = bold, label=""];
4->1 [style = solid, label="otherTopic"];
36->32 [style = bold, label=""];
44->41 [style = solid, label="otherTopicName"];
12->16 [style = bold, label=""];
50->42 [style = solid, label="updatedSubscription"];
1->21 [style = dashed, label="0"];
8->24 [style = dashed, label="0"];
11->15 [style = bold, label=""];
53->49 [style = solid, label="consumerId"];
20->4 [style = bold, label=""];
42->46 [style = solid, label="updatedSubscriptionSet"];
53->52 [style = solid, label="consumerId"];
15->27 [style = dashed, label="0"];
47->17 [style = bold, label=""];
11->27 [style = bold, label=""];
}
