digraph {
17 [style = filled, label = "req = new LocalSolrQueryRequest(core,new MapSolrParams(args))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "args = new HashMap<>()@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "args = new HashMap<>()@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "args.put(CommonParams.Q,\"dest_sub_no_ast_s:AAM46\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "args = new HashMap<String,String>()@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "args.put(\"indent\",\"true\")@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testExplicitSourceGlob['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "req = new LocalSolrQueryRequest(core,new MapSolrParams(args))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testSourceGlobMatchesNoDynamicOrExplicitField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertQ(\"sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)\",req,\"//*(@numFound='1'(\")@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "SolrCore core = h.getCore()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "req = new LocalSolrQueryRequest(core,new MapSolrParams(args))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "args.put(CommonParams.Q,\"text:AAM46\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertQ(\"sku2 copied to text\",req,\"//*(@numFound='1'(\",\"//result/doc(1(/str(@name='id'((.='A5'(\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final String subsetPattern = \"*_dest_sub_s\"@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertTrue(\"schema should contain explicit field 'sku1'\",schema.getFields().containsKey(\"sku1\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "args.put(\"indent\",\"true\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertQ(\"sku1 copied to dynamic dest *_s\",req,\"//*(@numFound='1'(\",\"//result/doc(1(/str(@name='id'((.='A5'(\",\"//result/doc(1(/arr(@name='sku1'(/str(.='10-1839ACX-93'(\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertTrue(\"'\" + subsetPattern + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern1 + \"'\",dynamicPattern1.equals(\"*_s\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "args.put(\"indent\",\"true\")@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Map<String,String> args = new HashMap<String,String>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "args = new HashMap<>()@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertQ(\"sku1 copied to *_dest_sub_s (*_s subset pattern)\",req,\"//*(@numFound='1'(\")@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final String dynamicPattern2 = schema.getDynamicPattern(dest_sub_no_ast_s)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "SolrQueryRequest req = new LocalSolrQueryRequest(core,new MapSolrParams(args))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "args.put(\"indent\",\"true\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final String dynamicPattern1 = schema.getDynamicPattern(subsetPattern)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertNull(\"'testing123_*' should not be (or match) a dynamic or explicit field\",schema.getFieldOrNull(\"testing123_*\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final String dest_sub_no_ast_s = \"dest_sub_no_ast_s\"@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(\"'\" + dest_sub_no_ast_s + \"' should match dynamic field '*_s', but instead matches '\" + dynamicPattern2 + \"'\",dynamicPattern2.equals(\"*_s\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertFalse(schema.getFields().containsKey(dest_sub_no_ast_s))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertU(adoc(\"id\",\"A5\",\"sku1\",\"10-1839ACX-93\",\"sku2\",\"AAM46\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "SolrQueryRequest req = new LocalSolrQueryRequest(core,new MapSolrParams(args))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Map<String,String> args = new HashMap<String,String>()@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertU(commit())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "args.put(CommonParams.Q,\"1_s:10-1839ACX-93\")@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertTrue(\"schema should contain dynamic field '*_s'\",schema.getDynamicPattern(\"*_s\").equals(\"*_s\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "args = new HashMap<String,String>()@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "args.put(CommonParams.Q,\"1_dest_sub_s:10-1839ACX-93\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Map<String,String> args = new HashMap<>()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertTrue(\"schema should contain explicit field 'sku2'\",schema.getFields().containsKey(\"sku2\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "args = new HashMap<String,String>()@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "assertQ(\"sku2 copied to text\",req,\"//*(@numFound='1'(\",\"//result/doc(1(/str(@name='id'((.='A5'(\")@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testExplicitSourceGlob['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertNull(\"'sku*' should not be (or match) a dynamic field\",schema.getDynamicPattern(\"sku*\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "args.put(\"indent\",\"true\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "IndexSchema schema = core.getLatestSchema()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertU(adoc(\"id\",\"A5\",\"sku1\",\"10-1839ACX-93\",\"testing123_s\",\"AAM46\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "args.put(CommonParams.Q,\"text:AAM46\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertU(commit())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->39 [style = dashed, label="0"];
16->3 [style = bold, label=""];
10->18 [style = bold, label=""];
46->42 [style = bold, label=""];
30->38 [style = bold, label=""];
24->12 [style = bold, label=""];
49->47 [style = solid, label="req"];
38->2 [style = solid, label="args"];
19->2 [style = solid, label="core"];
42->43 [style = bold, label=""];
15->7 [style = bold, label=""];
41->19 [style = bold, label=""];
2->6 [style = bold, label=""];
9->17 [style = solid, label="args"];
19->29 [style = bold, label=""];
9->31 [style = bold, label=""];
19->17 [style = solid, label="core"];
23->15 [style = bold, label=""];
10->46 [style = bold, label=""];
33->30 [style = solid, label="req"];
24->3 [style = solid, label="args"];
0->2 [style = solid, label="args"];
19->49 [style = solid, label="core"];
32->14 [style = bold, label=""];
13->23 [style = solid, label="dynamicPattern2"];
5->23 [style = solid, label="dest_sub_no_ast_s"];
24->40 [style = dashed, label="0"];
12->16 [style = bold, label=""];
0->21 [style = bold, label=""];
36->26 [style = bold, label=""];
34->8 [style = bold, label=""];
29->34 [style = bold, label=""];
48->44 [style = bold, label=""];
4->33 [style = bold, label=""];
19->3 [style = solid, label="core"];
19->33 [style = solid, label="core"];
26->4 [style = bold, label=""];
5->22 [style = solid, label="dest_sub_no_ast_s"];
3->32 [style = solid, label="req"];
40->3 [style = solid, label="args"];
14->36 [style = dashed, label="0"];
27->35 [style = bold, label=""];
0->38 [style = dashed, label="0"];
49->47 [style = bold, label=""];
20->2 [style = bold, label=""];
17->11 [style = solid, label="req"];
35->5 [style = bold, label=""];
14->26 [style = bold, label=""];
2->6 [style = solid, label="req"];
40->12 [style = bold, label=""];
7->24 [style = bold, label=""];
21->20 [style = bold, label=""];
18->27 [style = solid, label="subsetPattern"];
18->35 [style = solid, label="subsetPattern"];
18->27 [style = bold, label=""];
39->31 [style = bold, label=""];
13->23 [style = bold, label=""];
33->30 [style = bold, label=""];
28->17 [style = bold, label=""];
32->36 [style = bold, label=""];
38->21 [style = bold, label=""];
43->49 [style = bold, label=""];
25->10 [style = bold, label=""];
27->35 [style = solid, label="dynamicPattern1"];
5->13 [style = solid, label="dest_sub_no_ast_s"];
30->0 [style = bold, label=""];
37->19 [style = bold, label=""];
31->28 [style = bold, label=""];
14->33 [style = solid, label="args"];
29->48 [style = bold, label=""];
6->9 [style = bold, label=""];
1->19 [style = bold, label=""];
3->32 [style = bold, label=""];
36->33 [style = solid, label="args"];
44->45 [style = bold, label=""];
5->22 [style = bold, label=""];
6->39 [style = bold, label=""];
8->25 [style = bold, label=""];
39->17 [style = solid, label="args"];
46->49 [style = solid, label="args"];
7->40 [style = bold, label=""];
22->13 [style = bold, label=""];
45->10 [style = bold, label=""];
17->11 [style = bold, label=""];
}
