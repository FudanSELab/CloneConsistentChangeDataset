digraph {
24 [style = filled, label = "final CountDownLatch loadRequestSignal = new CountDownLatch(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "loadQueueCache.start()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(1,loadQueuePeon.getTimedOutSegments().size())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final CountDownLatch segmentLoadedSignal = new CountDownLatch(1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(0,loadQueuePeon.getSegmentsToLoad().size())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testFailAssignForLoadDropTimeout['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "loadQueuePeon = new CuratorLoadQueuePeon(curator,LOAD_QUEUE_PATH,jsonMapper,Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),Execs.singleThreaded(\"test_load_queue_peon-%d\"),new TestDruidCoordinatorConfig(null,null,null,new Duration(1),null,null,10,new Duration(\"PT1s\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "loadQueueCache.start()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "curator.delete().guaranteed().forPath(loadRequestPath)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "loadQueueCache.getListenable().addListener(new PathChildrenCacheListener(){@Override public void childEvent(CuratorFramework client,PathChildrenCacheEvent event){switch (event.getType()) {case CHILD_ADDED:loadRequestSignal.countDown()breakcase CHILD_REMOVED:loadRequestRemoveSignal.countDown()breakdefault:}})@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(0,loadQueuePeon.getSegmentsToLoad().size())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "loadQueuePeon = new CuratorLoadQueuePeon(curator,LOAD_QUEUE_PATH,null,Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),Execs.singleThreaded(\"test_load_queue_peon-%d\"),new TestDruidCoordinatorConfig(null,null,null,new Duration(1),null,null,10,new Duration(\"PT1s\")))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH,segment.getId().toString())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(0L,loadQueuePeon.getLoadQueueSize())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(1200L,loadQueuePeon.getLoadQueueSize())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "loadQueuePeon.start()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testFailAssignForNonTimeoutFailures['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testFailAssignForNonTimeoutFailures['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "loadQueuePeon.loadSegment(segment,new LoadPeonCallback(){@Override public void execute(){segmentLoadedSignal.countDown()delayedSegmentLoadedSignal.countDown()}})@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(1,loadQueuePeon.getSegmentsToLoad().size())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "loadQueuePeon = new CuratorLoadQueuePeon(curator,LOAD_QUEUE_PATH,null,Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),Execs.singleThreaded(\"test_load_queue_peon-%d\"),new TestDruidCoordinatorConfig(null,null,null,null,new Duration(1),null,null,null,null,10,new Duration(\"PT1s\")))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(segment,((SegmentChangeRequestLoad)jsonMapper.readValue(curator.getData().decompressed().forPath(loadRequestPath),)).getSegment())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(0,loadQueuePeon.getTimedOutSegments().size())@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "loadQueuePeon.start()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->15 [style = solid, label="segment"];
22->26 [style = bold, label=""];
18->31 [style = bold, label=""];
15->10 [style = bold, label=""];
19->18 [style = bold, label=""];
31->22 [style = bold, label=""];
5->9 [style = bold, label=""];
4->25 [style = bold, label=""];
21->0 [style = bold, label=""];
4->6 [style = bold, label=""];
9->2 [style = bold, label=""];
4->10 [style = solid, label="segmentLoadedSignal"];
25->16 [style = solid, label="delayedSegmentLoadedSignal"];
2->3 [style = bold, label=""];
14->20 [style = solid, label="loadRequestRemoveSignal"];
10->17 [style = bold, label=""];
25->14 [style = bold, label=""];
22->30 [style = solid, label="loadRequestPath"];
27->16 [style = bold, label=""];
0->9 [style = solid, label="segment"];
12->1 [style = bold, label=""];
10->7 [style = bold, label=""];
26->30 [style = bold, label=""];
6->12 [style = dashed, label="0"];
8->0 [style = bold, label=""];
23->28 [style = bold, label=""];
6->1 [style = bold, label=""];
3->10 [style = bold, label=""];
32->9 [style = bold, label=""];
11->0 [style = bold, label=""];
24->4 [style = bold, label=""];
13->27 [style = bold, label=""];
0->4 [style = bold, label=""];
24->26 [style = solid, label="loadRequestSignal"];
0->24 [style = bold, label=""];
7->23 [style = bold, label=""];
0->31 [style = solid, label="segment"];
4->12 [style = bold, label=""];
9->19 [style = bold, label=""];
20->7 [style = bold, label=""];
14->32 [style = bold, label=""];
17->29 [style = bold, label=""];
16->20 [style = bold, label=""];
22->27 [style = solid, label="loadRequestPath"];
4->2 [style = solid, label="segmentLoadedSignal"];
30->15 [style = bold, label=""];
29->13 [style = bold, label=""];
}
