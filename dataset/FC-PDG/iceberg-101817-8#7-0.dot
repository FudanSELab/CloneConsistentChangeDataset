digraph {
5 [style = filled, label = "field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(0)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "entry = ManifestFiles.read(pending.manifests().get(1),FILE_IO).entries().iterator().next()@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Snapshot pending = table.newAppend().appendFile(newFile).apply()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "validateManifest(pending.manifests().get(0),ids(pending.snapshotId()),files(newFile))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(\"data_bucket\",field.name())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ManifestFile initialManifest = base.currentSnapshot().manifests().get(0)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(1000,field.fieldId())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DataFile newFile = DataFiles.builder(table.spec()).copy(FILE_B).build()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"Should create 1 manifest for initial write\",1,base.currentSnapshot().manifests().size())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testManifestEntryFieldIdsForChangedPartitionSpecForV1Table['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "entry = ManifestFiles.read(pending.allManifests().get(1),FILE_IO).entries().iterator().next()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "PartitionSpec newSpec = PartitionSpec.builderFor(base.schema()).bucket(\"data\",16).bucket(\"id\",4).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(\"Should use 2 manifest files\",2,pending.manifests().size())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "table.ops().commit(base,base.updatePartitionSpec(newSpec))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "validateManifest(pending.manifests().get(0),ids(pending.snapshotId()),files(newFileC))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(\"Second manifest should be the initial manifest with the old spec\",initialManifest,pending.manifests().get(1))@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testManifestEntryFieldIdsForChangedPartitionSpecForV1Table['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(\"Should use 2 manifest files\",2,pending.allManifests().size())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "ManifestEntry<DataFile> entry = ManifestFiles.read(pending.allManifests().get(0),FILE_IO).entries().iterator().next()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Assert.assertEquals(\"data_bucket\",field.name())@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testChangedPartitionSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "validateManifest(pending.allManifests().get(0),ids(pending.snapshotId()),files(newFile))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(1001,field.fieldId())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "DataFile newFileC = DataFiles.builder(newSpec).copy(FILE_C).withPartitionPath(\"data_bucket=2/id_bucket=3\").build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TableMetadata base = readMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Types.NestedField field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(0)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(\"Second manifest should be the initial manifest with the old spec\",initialManifest,pending.allManifests().get(1))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(\"id_bucket\",field.name())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ManifestEntry<DataFile> entry = ManifestFiles.read(pending.manifests().get(0),FILE_IO).entries().iterator().next()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "ManifestFile initialManifest = base.currentSnapshot().allManifests().get(0)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "PartitionSpec newSpec = PartitionSpec.builderFor(base.schema()).bucket(\"id\",8).bucket(\"data\",8).build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(1000,field.fieldId())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Snapshot pending = table.newAppend().appendFile(newFileC).apply()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "table.newAppend().appendFile(FILE_A).appendFile(FILE_B).commit()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "table.newAppend().appendFile(FILE_A).commit()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(\"Should create 1 manifest for initial write\",1,base.currentSnapshot().allManifests().size())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11->32 [style = dashed, label="0"];
14->3 [style = bold, label=""];
21->10 [style = bold, label=""];
16->36 [style = bold, label=""];
15->2 [style = bold, label=""];
36->14 [style = solid, label="newSpec"];
2->19 [style = bold, label=""];
29->5 [style = bold, label=""];
3->35 [style = dashed, label="0"];
12->33 [style = dashed, label="0"];
4->17 [style = bold, label=""];
16->8 [style = bold, label=""];
14->35 [style = bold, label=""];
9->33 [style = bold, label=""];
16->27 [style = dashed, label="0"];
24->0 [style = bold, label=""];
6->21 [style = bold, label=""];
25->30 [style = bold, label=""];
20->0 [style = bold, label=""];
30->23 [style = bold, label=""];
18->15 [style = bold, label=""];
33->4 [style = bold, label=""];
3->11 [style = bold, label=""];
23->26 [style = bold, label=""];
8->14 [style = bold, label=""];
35->32 [style = bold, label=""];
34->31 [style = bold, label=""];
8->14 [style = solid, label="newSpec"];
3->12 [style = solid, label="newFile"];
31->1 [style = bold, label=""];
12->30 [style = dashed, label="0"];
10->29 [style = dashed, label="0"];
8->36 [style = dashed, label="0"];
11->9 [style = bold, label=""];
19->6 [style = bold, label=""];
36->14 [style = bold, label=""];
1->13 [style = bold, label=""];
13->16 [style = bold, label=""];
27->23 [style = solid, label="initialManifest"];
13->28 [style = dashed, label="0"];
32->9 [style = bold, label=""];
7->22 [style = bold, label=""];
1->28 [style = bold, label=""];
21->29 [style = bold, label=""];
10->5 [style = bold, label=""];
12->4 [style = bold, label=""];
0->1 [style = bold, label=""];
9->25 [style = dashed, label="0"];
0->31 [style = dashed, label="0"];
16->4 [style = solid, label="initialManifest"];
5->7 [style = bold, label=""];
17->26 [style = dashed, label="0"];
9->12 [style = bold, label=""];
28->27 [style = bold, label=""];
35->33 [style = solid, label="newFileC"];
3->30 [style = solid, label="newFile"];
1->14 [style = solid, label="base"];
4->23 [style = dashed, label="0"];
27->8 [style = bold, label=""];
17->18 [style = bold, label=""];
11->25 [style = bold, label=""];
26->18 [style = bold, label=""];
}
