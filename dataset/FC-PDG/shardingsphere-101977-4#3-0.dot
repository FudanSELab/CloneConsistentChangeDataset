digraph {
2 [style = filled, label = "Properties props = new Properties()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertBuildWithAuthorityRuleConfigurations['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "MetaDataContexts actual = new MetaDataContextsBuilder(Collections.singletonMap(\"logic_db\",Collections.emptyMap()),Collections.singletonMap(\"logic_db\",Collections.singletonList(new FixtureRuleConfiguration())),props).build(mock())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ShardingSphereUser user = new ShardingSphereUser(\"root\",\"root\",\"\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "AuthorityRuleConfiguration authorityRuleConfig = new AuthorityRuleConfiguration(Collections.singleton(user),new ShardingSphereAlgorithmConfiguration(\"ALL_PRIVILEGES_PERMITTED\",new Properties()))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertBuildWithConfigurationsButWithoutDataSource['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(actual.getProps().getValue(ConfigurationPropertyKey.EXECUTOR_SIZE),is(1))@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(actual.getMetaData(\"logic_db\").getResource().getDataSources().isEmpty())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertRules(actual)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(actual.getProps().getProps().size(),is(1))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(actual.getProps().getProps().size(),is(1))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertBuildWithAuthorityRuleConfigurations['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "AuthorityRuleConfiguration authorityRuleConfig = new AuthorityRuleConfiguration(Collections.singleton(user),null)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "props.setProperty(ConfigurationPropertyKey.EXECUTOR_SIZE.getKey(),\"1\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "MetaDataContexts actual = new MetaDataContextsBuilder(Collections.singletonMap(\"logic_db\",Collections.emptyMap()),Collections.singletonMap(\"logic_db\",Collections.singletonList(new FixtureRuleConfiguration())),Collections.singleton(authorityRuleConfig),props).build(mock())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(actual.getProps().getValue(ConfigurationPropertyKey.EXECUTOR_SIZE),is(1))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
8->15 [style = bold, label=""];
3->1 [style = bold, label=""];
0->6 [style = bold, label=""];
0->6 [style = solid, label="user"];
6->11 [style = dashed, label="0"];
0->11 [style = bold, label=""];
4->2 [style = bold, label=""];
11->9 [style = bold, label=""];
9->3 [style = solid, label="actual"];
8->0 [style = bold, label=""];
12->13 [style = bold, label=""];
15->12 [style = solid, label="actual"];
13->3 [style = bold, label=""];
9->3 [style = bold, label=""];
5->7 [style = bold, label=""];
0->11 [style = solid, label="user"];
10->2 [style = bold, label=""];
15->12 [style = bold, label=""];
14->2 [style = bold, label=""];
6->9 [style = bold, label=""];
2->8 [style = bold, label=""];
}
