digraph {
28 [style = filled, label = "assertThat(collector.collected().get(1).timestamp(),equalTo(0L))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(collector.collected().get(0).value(),equalTo(value))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "store.put(bytesKey,valueAndTimestamp)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertThat(collector.collected().size(),equalTo(2))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(collector.collected().get(1).timestamp(),equalTo(42L))@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(collector.collected().get(0).timestamp(),equalTo(0L))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "store = new ChangeLoggingWindowBytesStore(inner,true)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "init()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Bytes key1 = WindowKeySchema.toStoreKeyBinary(bytesKey,0,1)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expectLastCall().times(2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "shouldRetainDuplicatesWhenSet['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "store.put(bytesKey,value)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "EasyMock.reset(context)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(collector.collected().get(1).key(),equalTo(key2))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(collector.collected().get(1).value(),equalTo(value))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "store = new ChangeLoggingTimestampedWindowBytesStore(inner,true)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(collector.collected().get(0).timestamp(),equalTo(42L))@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "store.put(bytesKey,valueAndTimestamp)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertThat(collector.collected().get(0).key(),equalTo(key1))@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "store.put(bytesKey,value)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "EasyMock.replay(context)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "inner.put(bytesKey,value,0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "shouldRetainDuplicatesWhenSet['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "context.logChange(store.name(),key2,value,42L)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "EasyMock.verify(inner)@@@18@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final Bytes key2 = WindowKeySchema.toStoreKeyBinary(bytesKey,0,2)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "inner.put(bytesKey,valueAndTimestamp,0)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "store.put(bytesKey,valueAndTimestamp)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "store.put(bytesKey,valueAndTimestamp)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "context.logChange(store.name(),key1,value,42L)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "EasyMock.verify(inner,context)@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "shouldRetainDuplicatesWhenSet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
19->18 [style = bold, label=""];
4->13 [style = solid, label="key2"];
1->8 [style = bold, label=""];
12->5 [style = bold, label=""];
9->0 [style = bold, label=""];
0->13 [style = bold, label=""];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
31->16 [style = bold, label=""];
26->5 [style = bold, label=""];
3->31 [style = dashed, label="0"];
27->30 [style = bold, label=""];
5->14 [style = solid, label="key1"];
15->30 [style = dashed, label="0"];
10->28 [style = dashed, label="0"];
3->16 [style = bold, label=""];
15->3 [style = bold, label=""];
4->18 [style = solid, label="key2"];
11->15 [style = bold, label=""];
20->21 [style = bold, label=""];
6->14 [style = bold, label=""];
5->19 [style = solid, label="key1"];
12->26 [style = dashed, label="0"];
28->2 [style = bold, label=""];
18->22 [style = bold, label=""];
7->28 [style = bold, label=""];
16->1 [style = bold, label=""];
30->31 [style = bold, label=""];
13->7 [style = bold, label=""];
23->19 [style = bold, label=""];
5->4 [style = bold, label=""];
25->26 [style = bold, label=""];
0->29 [style = dashed, label="0"];
22->17 [style = bold, label=""];
8->25 [style = dashed, label="0"];
14->9 [style = bold, label=""];
10->2 [style = bold, label=""];
9->29 [style = bold, label=""];
1->25 [style = bold, label=""];
8->12 [style = bold, label=""];
4->23 [style = bold, label=""];
17->20 [style = bold, label=""];
24->15 [style = bold, label=""];
29->13 [style = bold, label=""];
}
