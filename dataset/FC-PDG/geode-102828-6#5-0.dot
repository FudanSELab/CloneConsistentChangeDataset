digraph {
26 [style = filled, label = "sn.updateLoad(l1,new ServerLoad(10,1,1,1))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119821),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,-1))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "sn.updateLoad(l1,\"\",new ServerLoad(10,1,1,1))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "sn.addServer(l2,\"\",new String((((,new ServerLoad(100,.2f,10,.2f),LOAD_POLL_INTERVAL)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertNull(sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "sn.addServer(l2,\"\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119658,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "testGroups['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11988e),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "sn.addServer(l1,\"\",new String((((,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1197f9),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "LocatorLoadSnapshot sn = new LocatorLoadSnapshot()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11980d),sn.getServersForQueue(\"c\",Collections.EMPTY_SET,-1))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testRemoveServer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ServerLocation l1 = new ServerLocation(\"localhost\",1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "sn.updateLoad(l2,\"\",new ServerLoad(100,1,1,1))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testGroups['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1198a1),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@42@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(Collections.singletonList(l2),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertNotNull(sn.getServerForConnection(null,Collections.EMPTY_SET))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "sn.removeServer(l1)@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "sn.addServer(l1,\"\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119646,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1198f6),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "sn.removeServer(l1,\"\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119836),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11984b),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "sn.addServer(l1,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11978c,new ServerLoad(1,1,1,1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "sn.updateLoad(l2,new ServerLoad(100,1,1,1))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "sn.addServer(l2,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11979c,new ServerLoad(1,1,1,1))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "ServerLocation l2 = new ServerLocation(\"localhost\",2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "sn.removeServer(l1,\"\")@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20->6 [style = solid, label="l2"];
1->37 [style = solid, label="l1"];
17->25 [style = bold, label=""];
1->15 [style = solid, label="l1"];
1->26 [style = solid, label="l1"];
20->17 [style = solid, label="l2"];
1->3 [style = solid, label="l1"];
1->31 [style = solid, label="l1"];
37->36 [style = bold, label=""];
20->33 [style = solid, label="l2"];
26->17 [style = bold, label=""];
29->30 [style = bold, label=""];
20->29 [style = bold, label=""];
20->3 [style = solid, label="l2"];
0->19 [style = bold, label=""];
20->37 [style = solid, label="l2"];
20->12 [style = solid, label="l2"];
16->25 [style = dashed, label="0"];
4->15 [style = bold, label=""];
4->26 [style = bold, label=""];
1->20 [style = bold, label=""];
1->0 [style = solid, label="l1"];
7->31 [style = dashed, label="0"];
20->31 [style = bold, label=""];
1->27 [style = solid, label="l1"];
0->27 [style = dashed, label="0"];
16->2 [style = bold, label=""];
20->23 [style = solid, label="l2"];
25->2 [style = bold, label=""];
1->7 [style = solid, label="l1"];
11->18 [style = bold, label=""];
3->0 [style = bold, label=""];
1->23 [style = solid, label="l1"];
20->21 [style = solid, label="l2"];
3->27 [style = bold, label=""];
2->13 [style = bold, label=""];
1->13 [style = solid, label="l1"];
20->35 [style = solid, label="l2"];
6->14 [style = bold, label=""];
20->25 [style = solid, label="l2"];
8->1 [style = bold, label=""];
19->5 [style = bold, label=""];
7->22 [style = bold, label=""];
30->11 [style = bold, label=""];
15->17 [style = bold, label=""];
1->2 [style = solid, label="l1"];
32->8 [style = bold, label=""];
20->16 [style = solid, label="l2"];
13->12 [style = bold, label=""];
19->38 [style = dashed, label="0"];
18->4 [style = bold, label=""];
10->8 [style = bold, label=""];
34->37 [style = bold, label=""];
5->35 [style = dashed, label="0"];
20->19 [style = solid, label="l2"];
20->38 [style = solid, label="l2"];
1->29 [style = solid, label="l1"];
5->24 [style = bold, label=""];
31->33 [style = bold, label=""];
28->8 [style = bold, label=""];
1->34 [style = solid, label="l1"];
1->36 [style = solid, label="l1"];
22->30 [style = dashed, label="0"];
20->9 [style = solid, label="l2"];
15->26 [style = dashed, label="0"];
9->3 [style = bold, label=""];
20->4 [style = solid, label="l2"];
7->29 [style = dashed, label="0"];
12->23 [style = bold, label=""];
27->19 [style = bold, label=""];
1->18 [style = solid, label="l1"];
36->38 [style = bold, label=""];
20->22 [style = solid, label="l2"];
20->7 [style = bold, label=""];
20->5 [style = solid, label="l2"];
38->35 [style = bold, label=""];
24->6 [style = bold, label=""];
1->9 [style = solid, label="l1"];
23->9 [style = bold, label=""];
33->34 [style = bold, label=""];
22->11 [style = bold, label=""];
14->21 [style = bold, label=""];
17->16 [style = bold, label=""];
20->30 [style = solid, label="l2"];
}
