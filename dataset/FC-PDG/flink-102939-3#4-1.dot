digraph {
9 [style = filled, label = "testTriggerCheckpointsWithEndOfPartition['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(validator.triggeredCheckpoints,contains(6L,7L))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(validator.triggeredCheckpoints,contains(1L))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(0,validator.getAbortedCheckpointCounter())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "inputGate = createCheckpointedInputGate(3,sequence,validator)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "check(bufferOrEvent,inputGate.pollNext().get(),PAGE_SIZE)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "BufferOrEvent(( sequence = {createEndOfPartition(2),createBarrier(6,0),createBarrier(6,1),createEndOfPartition(1),createBarrier(7,0)}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "inputGate.getCheckpointBarrierHandler().setEnableCheckpointAfterTasksFinished(true)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testTriggerCheckpointsAfterReceivedEndOfPartition['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testTriggerCheckpointsWithEndOfPartition['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ValidatingCheckpointHandler validator = new ValidatingCheckpointHandler(-1L)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(inputGate.getCheckpointBarrierHandler().isCheckpointPending(),equalTo(false))@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3->11 [style = bold, label=""];
6->3 [style = bold, label=""];
0->6 [style = solid, label="sequence"];
11->7 [style = bold, label=""];
1->6 [style = bold, label=""];
4->11 [style = dashed, label="0"];
9->0 [style = bold, label=""];
5->0 [style = bold, label=""];
7->8 [style = bold, label=""];
3->4 [style = bold, label=""];
0->1 [style = bold, label=""];
1->6 [style = solid, label="validator"];
4->7 [style = bold, label=""];
10->0 [style = bold, label=""];
2->3 [style = bold, label=""];
6->2 [style = bold, label=""];
}
