digraph {
24 [style = filled, label = "testFromMismatchedMerkleTrees['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "MerkleTrees mts1 = new MerkleTrees(Murmur3Partitioner.instance)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Range<Token> fullRange = new Range<>(partitioner.getMinimumToken(),partitioner.getMinimumToken())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "mt2.addMerkleTree(32,fullRange)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "MerkleTrees mts2 = new MerkleTrees(Murmur3Partitioner.instance)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "range.addAll(new MerkleTreesTest.HIterator(range.right))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "range.addAll(new MerkleTreesTest.HIterator(range.right))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "InetAddressAndPort a1 = InetAddressAndPort.getByName(\"127.0.0.1\")@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "mt2.init()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1,tr2))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "MerkleTrees mt1 = new MerkleTrees(partitioner)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "TreeResponse tr2 = new TreeResponse(a2,mts2)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "TreeResponse tr1 = new TreeResponse(a1,mt1)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "TreeResponse tr2 = new TreeResponse(a2,mt2)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "InetAddressAndPort a2 = InetAddressAndPort.getByName(\"127.0.0.2\")@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertTrue(dh.get(a1).get(a2).size() == 1)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TreeResponse tr1 = new TreeResponse(a1,mts1)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "IPartitioner partitioner = Murmur3Partitioner.instance@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "MerkleTree.TreeRange leftmost = null@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "mt1.get(partitioner.midpoint(leftmost.left,leftmost.right)).hash(digest(\"even more arbitrary!\"))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "mt2.init()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testFromEmptyMerkleTrees['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Iterator<MerkleTree.TreeRange> ranges = mt1.rangeIterator()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "middle = mt1.get(leftmost.right)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "mt1.maxsize(fullRange,maxsize + 2)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "leftmost = ranges.next()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "MerkleTrees mt2 = new MerkleTrees(partitioner)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "mts2.init()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "int maxsize = 16@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "mts1.init()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "mt1.init()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "MerkleTree.TreeRange middle = null@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1,tr2))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "mt1.addMerkleTree(32,fullRange)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(Sets.newHashSet(a1),dh.keyHosts())@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TreeResponse tr2 = new TreeResponse(a2,mt2)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "testFromEmptyMerkleTrees['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "mt1.split(leftmost.right)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TreeResponse tr1 = new TreeResponse(a1,mt1)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "middle.hash(digest(\"arbitrary!\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "MerkleTrees mt1 = new MerkleTrees(Murmur3Partitioner.instance)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "InetAddressAndPort a2 = InetAddressAndPort.getByName(\"127.0.0.2\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertTrue(dh.hasDifferenceBetween(a1,a2,fullRange))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "InetAddressAndPort a1 = InetAddressAndPort.getByName(\"127.0.0.1\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
33->7 [style = bold, label=""];
32->35 [style = bold, label=""];
4->18 [style = dashed, label="0"];
31->37 [style = bold, label=""];
7->32 [style = bold, label=""];
28->33 [style = solid, label="fullRange"];
0->9 [style = bold, label=""];
27->38 [style = bold, label=""];
4->27 [style = solid, label="a1"];
4->39 [style = solid, label="a1"];
38->21 [style = solid, label="tr2"];
28->43 [style = solid, label="fullRange"];
1->5 [style = solid, label="tr2"];
41->19 [style = bold, label=""];
28->34 [style = bold, label=""];
6->14 [style = solid, label="a1"];
27->21 [style = solid, label="tr1"];
4->17 [style = dashed, label="0"];
1->15 [style = dashed, label="0"];
2->3 [style = bold, label=""];
37->25 [style = bold, label=""];
3->16 [style = dashed, label="0"];
34->31 [style = solid, label="maxsize"];
22->31 [style = bold, label=""];
11->12 [style = bold, label=""];
2->1 [style = solid, label="a2"];
16->17 [style = bold, label=""];
21->30 [style = bold, label=""];
2->15 [style = solid, label="a2"];
0->12 [style = dashed, label="0"];
3->4 [style = bold, label=""];
10->6 [style = bold, label=""];
9->5 [style = solid, label="tr1"];
6->9 [style = solid, label="a1"];
15->5 [style = bold, label=""];
42->18 [style = solid, label="partitioner"];
15->5 [style = solid, label="tr2"];
6->2 [style = bold, label=""];
8->0 [style = bold, label=""];
20->18 [style = bold, label=""];
23->29 [style = bold, label=""];
28->31 [style = solid, label="fullRange"];
35->23 [style = bold, label=""];
26->41 [style = bold, label=""];
8->38 [style = solid, label="a2"];
8->39 [style = solid, label="a2"];
4->36 [style = solid, label="a1"];
8->20 [style = bold, label=""];
9->14 [style = dashed, label="0"];
18->43 [style = bold, label=""];
3->9 [style = solid, label="mt1"];
16->14 [style = solid, label="mts1"];
19->27 [style = bold, label=""];
42->20 [style = solid, label="partitioner"];
20->27 [style = solid, label="mt1"];
3->20 [style = dashed, label="0"];
7->30 [style = dashed, label="0"];
12->14 [style = bold, label=""];
17->15 [style = solid, label="mts2"];
14->5 [style = solid, label="tr1"];
28->39 [style = solid, label="fullRange"];
43->33 [style = bold, label=""];
34->4 [style = bold, label=""];
4->8 [style = bold, label=""];
5->7 [style = bold, label=""];
40->26 [style = bold, label=""];
14->15 [style = bold, label=""];
38->21 [style = bold, label=""];
30->39 [style = bold, label=""];
4->1 [style = solid, label="mt2"];
18->38 [style = solid, label="mt2"];
29->22 [style = bold, label=""];
13->6 [style = bold, label=""];
42->28 [style = bold, label=""];
9->1 [style = bold, label=""];
8->11 [style = dashed, label="0"];
39->36 [style = bold, label=""];
25->40 [style = bold, label=""];
24->42 [style = bold, label=""];
17->11 [style = bold, label=""];
2->16 [style = bold, label=""];
}
