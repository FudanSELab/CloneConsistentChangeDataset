digraph {
7 [style = filled, label = "networkVlanRange == null || networkVlanRange.isEmpty()@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "overlappingNetworks.add(network)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "String broadcastUri@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<Integer> existingPvlan = UriUtils.expandPvlanUri(networkVlanRange)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "return overlappingNetworks@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "return overlappingNetworks@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final String searchRange = BroadcastDomainType.getValue(searchUri)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "!searchUri.getScheme().equalsIgnoreCase(\"vlan\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "long physicalNetworkId@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final List<NetworkVO> overlappingNetworks = new ArrayList<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "!VLAN_OR_VXLAN.contains(searchUri.getScheme().toLowerCase())@@@4@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "Network.PVlanType pVlanType@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final URI searchUri = BroadcastDomainType.fromString(broadcastUri)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final String networkVlanRange = BroadcastDomainType.getValue(network.getBroadcastUri())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "overlappingNetworks.add(network)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "listByPhysicalNetworkPvlan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "throw new CloudRuntimeException(String.format(\"Requested URI '%s' is not in the expected format. Expected URI Scheme as 'vlan://VID' or 'vxlan://VID'.\",searchUri.toString()))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "listByPhysicalNetworkPvlan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final SearchCriteria<NetworkVO> sc = PhysicalNetworkSearch.create()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "long physicalNetworkId@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "isNetworkOverlappingRequestedPvlan(existingPvlan.get(0),existingPvlan.get(1),existingPvlanType,searchVlans.get(0),searchVlans.get(1),pVlanType)@@@22@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "long physicalNetworkId@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "throw new CloudRuntimeException(\"VLAN requested but URI is not in the expected format: \" + searchUri.toString())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Network.PVlanType existingPvlanType = getNetworkPvlanType(network.getId(),existingPvlan)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final List<Integer> searchVlans = UriUtils.expandPvlanUri(searchRange)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final List<Integer> searchVlans = UriUtils.expandVlanUri(searchRange)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "listByPhysicalNetworkPvlan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "isNetworkOverlappingRequestedPvlan(existingPvlan.get(0),existingPvlan.get(1),searchVlans.get(0))@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String broadcastUri@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "throw new CloudRuntimeException(\"PVLAN requested but URI is not in the expected format: \" + searchUri.toString())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "!searchUri.getScheme().equalsIgnoreCase(\"pvlan\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "network.getBroadcastUri() == null || !network.getBroadcastUri().getScheme().equalsIgnoreCase(\"pvlan\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "sc.setParameters(\"physicalNetworkId\",physicalNetworkId)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
30->24 [style = bold, label=""];
6->11 [style = solid, label="overlappingNetworks"];
5->17 [style = solid, label="searchUri"];
16->0 [style = bold, label=""];
7->11 [style = bold, label=""];
7->1 [style = bold, label=""];
20->17 [style = bold, label=""];
23->30 [style = bold, label=""];
30->1 [style = bold, label=""];
5->20 [style = bold, label=""];
4->6 [style = bold, label=""];
25->31 [style = dotted, label="true"];
23->30 [style = solid, label="existingPvlanType"];
10->13 [style = dotted, label="true"];
12->11 [style = bold, label=""];
19->0 [style = solid, label="physicalNetworkId"];
1->3 [style = bold, label=""];
18->19 [style = dotted, label="true"];
18->15 [style = dotted, label="true"];
2->23 [style = solid, label="existingPvlan"];
9->0 [style = solid, label="physicalNetworkId"];
8->15 [style = dotted, label="true"];
10->17 [style = bold, label=""];
25->28 [style = dotted, label="true"];
20->21 [style = dotted, label="true"];
17->32 [style = bold, label=""];
10->22 [style = dashed, label="0"];
12->1 [style = bold, label=""];
3->2 [style = solid, label="networkVlanRange"];
6->24 [style = solid, label="overlappingNetworks"];
32->6 [style = bold, label=""];
30->29 [style = bold, label=""];
2->12 [style = bold, label=""];
1->11 [style = bold, label=""];
26->0 [style = solid, label="physicalNetworkId"];
20->21 [style = bold, label=""];
4->32 [style = dashed, label="0"];
2->23 [style = bold, label=""];
12->14 [style = dotted, label="true"];
13->17 [style = bold, label=""];
7->24 [style = bold, label=""];
30->29 [style = dotted, label="true"];
13->21 [style = dashed, label="0"];
13->27 [style = dashed, label="0"];
3->7 [style = solid, label="networkVlanRange"];
10->13 [style = bold, label=""];
17->32 [style = solid, label="searchRange"];
3->7 [style = bold, label=""];
8->5 [style = bold, label=""];
6->16 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
18->5 [style = bold, label=""];
22->27 [style = bold, label=""];
1->24 [style = bold, label=""];
22->27 [style = dotted, label="true"];
17->4 [style = solid, label="searchRange"];
28->5 [style = solid, label="broadcastUri"];
12->14 [style = bold, label=""];
27->17 [style = bold, label=""];
15->31 [style = dashed, label="0"];
22->17 [style = bold, label=""];
25->5 [style = bold, label=""];
10->20 [style = dashed, label="0"];
8->9 [style = dotted, label="true"];
29->24 [style = bold, label=""];
5->22 [style = bold, label=""];
31->30 [style = solid, label="pVlanType"];
14->11 [style = bold, label=""];
21->17 [style = bold, label=""];
25->26 [style = dotted, label="true"];
17->4 [style = bold, label=""];
15->5 [style = solid, label="broadcastUri"];
}
