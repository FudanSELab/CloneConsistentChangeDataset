digraph {
24 [style = filled, label = "final URI uri = URI.create(uriBase.toString() + zipPath)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final File outTmpDir = FileUtils.createTempDir()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testDir['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Assert.assertTrue(outFile.exists())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testDir['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertArrayEquals(pathByteContents,Files.readAllBytes(outFile.toPath()))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final File outTmpDir = com.google.common.io.Files.createTempDir()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "puller.getSegmentFiles(new Path(uri),outTmpDir)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final Path zipPath = new Path(perTestPath,\"test.txt\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Path zipPath = new Path(\"/tmp/testZip.zip\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertTrue(tmpFile.exists())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "outFile.delete()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ByteStreams.copy(new ByteArrayInputStream(pathByteContents),stream)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final File outFile = new File(outTmpDir,\"test.txt\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testZip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertArrayEquals(pathByteContents,Files.readAllBytes(outFile.toPath()))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final File outFile = new File(outTmpDir,tmpFile.getName())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final URI uri = URI.create(uriBase.toString() + perTestPath)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final File tmpDir = com.google.common.io.Files.createTempDir()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(outFile.exists())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "CompressionUtils.zip(tmpDir,stream)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "puller.getSegmentFiles(new Path(uri),outTmpDir)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "{if (tmpFile.exists()) {tmpFile.delete()}if (outFile.exists()) {outFile.delete()}if (outTmpDir.exists()) {outTmpDir.delete()}if (tmpDir.exists()) {tmpDir.delete()}}@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ByteStreams.copy(inputStream,outputStream)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final File outTmpDir = com.google.common.io.Files.createTempDir()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "final File tmpFile = File.createTempFile(\"zipContents\",\".txt\",tmpDir)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertFalse(outFile.exists())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
4->10 [style = bold, label=""];
17->25 [style = bold, label=""];
11->20 [style = bold, label=""];
22->15 [style = solid, label="tmpDir"];
8->0 [style = solid, label="outTmpDir"];
2->5 [style = bold, label=""];
25->1 [style = bold, label=""];
4->24 [style = bold, label=""];
24->19 [style = bold, label=""];
10->9 [style = solid, label="uri"];
13->9 [style = solid, label="outTmpDir"];
14->24 [style = solid, label="zipPath"];
9->2 [style = bold, label=""];
1->15 [style = bold, label=""];
19->17 [style = bold, label=""];
4->25 [style = solid, label="outTmpDir"];
7->8 [style = bold, label=""];
10->6 [style = bold, label=""];
12->7 [style = bold, label=""];
1->9 [style = bold, label=""];
8->13 [style = dashed, label="0"];
24->20 [style = solid, label="uri"];
8->0 [style = bold, label=""];
6->1 [style = bold, label=""];
21->26 [style = bold, label=""];
22->18 [style = bold, label=""];
23->22 [style = bold, label=""];
20->16 [style = bold, label=""];
15->11 [style = bold, label=""];
13->0 [style = solid, label="outTmpDir"];
3->7 [style = bold, label=""];
0->4 [style = bold, label=""];
8->9 [style = solid, label="outTmpDir"];
16->21 [style = bold, label=""];
5->11 [style = bold, label=""];
22->18 [style = solid, label="tmpDir"];
18->14 [style = bold, label=""];
13->0 [style = bold, label=""];
14->4 [style = bold, label=""];
4->20 [style = solid, label="outTmpDir"];
}
