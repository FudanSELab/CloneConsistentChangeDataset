digraph {
14 [style = filled, label = "Optional<URL> pdfLink = Optional.empty()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "UnirestException e@@@18@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "!doi.isPresent()@@@5@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "JSONObject json = jsonResponse.getBody().getObject()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "LOGGER.info(\"Fulltext PDF found @ Springer.\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "pdfLink = Optional.of(new URL(\"http\",CONTENT_HOST,String.format(\"/content/pdf/%s.pdf\",doi.get().getDOI())))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return findFullText(doi.get())@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Objects.requireNonNull(entry)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "findFullText['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "doi.isPresent()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "return findFullText(doi.get())@@@7@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "findFullText['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "results > 0@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "HttpResponse<JsonNode> jsonResponse = Unirest.get(API_URL).queryString(\"api_key\",API_KEY).queryString(\"q\",String.format(\"doi:%s\",doi.get().getDOI())).asJson()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Optional<DOI> doi = entry.getField(StandardField.DOI).flatMap(null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "return pdfLink@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "LOGGER.warn(\"SpringerLink API request failed\",e)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "jsonResponse.getBody() != null@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Optional<DOI> doi = entry.getField(StandardField.DOI).flatMap(null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "findFullText['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "doi.isPresent()@@@5@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "return Optional.empty()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "int results = json.getJSONArray(\"result\").getJSONObject(0).getInt(\"total\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "return Optional.empty()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "BibEntry entry@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22->21 [style = dotted, label="true"];
4->10 [style = bold, label=""];
15->23 [style = bold, label=""];
1->4 [style = bold, label=""];
6->5 [style = dotted, label="false"];
7->1 [style = bold, label=""];
18->23 [style = bold, label=""];
3->1 [style = bold, label=""];
24->15 [style = bold, label=""];
4->6 [style = bold, label=""];
12->21 [style = bold, label=""];
19->18 [style = dotted, label="true"];
19->11 [style = bold, label=""];
21->17 [style = dotted, label="true"];
7->0 [style = dotted, label="true"];
9->8 [style = bold, label=""];
10->9 [style = dotted, label="true"];
22->23 [style = bold, label=""];
17->19 [style = bold, label=""];
11->18 [style = bold, label=""];
0->1 [style = solid, label="entry"];
22->12 [style = dotted, label="true"];
20->22 [style = bold, label=""];
6->10 [style = dashed, label="0"];
6->2 [style = bold, label=""];
2->12 [style = dashed, label="0"];
6->5 [style = bold, label=""];
13->17 [style = bold, label=""];
6->2 [style = dotted, label="true"];
16->0 [style = dotted, label="true"];
10->8 [style = bold, label=""];
14->23 [style = solid, label="pdfLink"];
16->1 [style = bold, label=""];
19->11 [style = dotted, label="true"];
22->12 [style = bold, label=""];
18->23 [style = solid, label="pdfLink"];
19->23 [style = bold, label=""];
21->19 [style = dotted, label="true"];
24->15 [style = dotted, label="true"];
3->0 [style = dotted, label="true"];
1->14 [style = bold, label=""];
10->9 [style = bold, label=""];
21->13 [style = dotted, label="true"];
17->19 [style = solid, label="results"];
14->20 [style = bold, label=""];
21->13 [style = bold, label=""];
21->23 [style = bold, label=""];
}
