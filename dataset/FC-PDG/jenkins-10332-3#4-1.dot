digraph {
1 [style = filled, label = "File workDir = tmpDir.newFolder(\"workDir\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testHeadlessLaunchWithCustomWorkDir['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(\"Remoting work dir should have been created\",new File(workDir,\"remoting\").exists())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "launchJnlpAndVerify(c,buildJnlpArgs(c).add(\"-arg\",\"-headless\",\"-workDir\",workDir.getAbsolutePath()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assume.assumeFalse(\"Skipping JNLPLauncherTest.testLaunch because we are running headless\",GraphicsEnvironment.isHeadless())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Computer c = addTestAgent(false)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testLaunchWithWorkDir['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "launchJnlpAndVerify(c,buildJnlpArgs(c).add(\"-workDir\",workDir.getAbsolutePath()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(1,ComputerListener.all().get().offlined)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testLaunchWithWorkDir['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Computer c = addTestSlave(false)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
9->3 [style = bold, label=""];
6->3 [style = bold, label=""];
5->10 [style = bold, label=""];
5->4 [style = solid, label="c"];
7->4 [style = solid, label="c"];
4->2 [style = bold, label=""];
7->4 [style = bold, label=""];
5->10 [style = solid, label="c"];
10->8 [style = bold, label=""];
3->1 [style = bold, label=""];
5->7 [style = dashed, label="0"];
4->10 [style = dashed, label="0"];
1->7 [style = bold, label=""];
5->4 [style = bold, label=""];
}
