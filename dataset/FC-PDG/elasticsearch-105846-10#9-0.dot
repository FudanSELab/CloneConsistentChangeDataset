digraph {
29 [style = filled, label = "assertNotNull(responseRef.get())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertNull(responseRef.get().get(1))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"dfs_query\",phase.getName())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SearchTransportService searchTransportService = new SearchTransportService(null,null){@Override public void sendExecuteQuery(Transport.Connection connection,QuerySearchRequest request,SearchTask task,SearchActionListener<QuerySearchResult> listener){if (request.id() == 1) {QuerySearchResult queryResult = new QuerySearchResult(123,new SearchShardTarget(\"node1\",new Index(\"test\",\"na\"),0,null))queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1,TotalHits.Relation.EQUAL_TO),new ScoreDoc((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@133b817),2.0F),new DocValueFormat(((()queryResult.size(2)listener.onResponse(queryResult)}if (request.id() == 2) {listener.onFailure(new MockDirectoryWrapper.FakeIOException())}{fail(\"no such request ID: \" + request.id())}}}@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty())@@@39@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(mockSearchPhaseContext.failures.get(0).getCause() instanceof MockDirectoryWrapper.FakeIOException)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "results.set(0,newSearchResult(0,1,new SearchShardTarget(\"node1\",new ShardId(\"test\",\"na\",0),null,OriginalIndices.NONE)))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "results.get(0).termsStatistics(new Term((((,new TermStatistics(((()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "results.set(0,newSearchResult(0,1,new SearchShardTarget(\"node1\",new Index(\"test\",\"na\"),0,null)))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "phase.run()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "results.set(1,newSearchResult(1,2,new SearchShardTarget(\"node2\",new Index(\"test\",\"na\"),0,null)))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "results.set(1,newSearchResult(1,2,new SearchShardTarget(\"node2\",new ShardId(\"test\",\"na\",0),null,OriginalIndices.NONE)))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "expectThrows(,null)@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "AtomicArray<DfsSearchResult> results = new AtomicArray<>(2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertNull(responseRef.get().get(0).fetchResult())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(42,responseRef.get().get(0).queryResult().topDocs().topDocs.scoreDocs(0(.doc)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testFailPhaseOnException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(1,mockSearchPhaseContext.failures.size())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "mockSearchPhaseContext.searchTransport = searchTransportService@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "AtomicReference<AtomicArray<SearchPhaseResult>> responseRef = new AtomicReference<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertNull(responseRef.get().get(1))@@@51@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertNotNull(responseRef.get().get(0))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "SearchPhaseController controller = new SearchPhaseController(null)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testDfsWith1ShardFailed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "DfsQueryPhase phase = new DfsQueryPhase(results,controller,null,mockSearchPhaseContext)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "mockSearchPhaseContext.assertNoFailure()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testFailPhaseOnException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertEquals(1,responseRef.get().get(0).queryResult().topDocs().topDocs.totalHits.value)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "results.get(1).termsStatistics(new Term((((,new TermStatistics(((()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(1,mockSearchPhaseContext.releasedSearchContexts.size())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(2L))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expectThrows(,null)@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "assertEquals(1,mockSearchPhaseContext.numSuccess.get())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->16 [style = bold, label=""];
1->4 [style = bold, label=""];
16->11 [style = bold, label=""];
33->20 [style = bold, label=""];
23->27 [style = bold, label=""];
29->30 [style = bold, label=""];
10->1 [style = solid, label="searchTransportService"];
2->6 [style = bold, label=""];
8->15 [style = dashed, label="0"];
3->14 [style = bold, label=""];
8->3 [style = bold, label=""];
18->15 [style = bold, label=""];
22->31 [style = bold, label=""];
2->18 [style = bold, label=""];
30->32 [style = bold, label=""];
24->29 [style = bold, label=""];
15->3 [style = bold, label=""];
32->26 [style = bold, label=""];
26->22 [style = bold, label=""];
21->28 [style = bold, label=""];
4->0 [style = bold, label=""];
7->4 [style = solid, label="results"];
6->18 [style = dashed, label="0"];
20->21 [style = bold, label=""];
17->7 [style = bold, label=""];
5->16 [style = dashed, label="0"];
25->24 [style = bold, label=""];
12->10 [style = bold, label=""];
0->25 [style = bold, label=""];
28->23 [style = bold, label=""];
7->2 [style = bold, label=""];
13->7 [style = bold, label=""];
31->33 [style = bold, label=""];
14->12 [style = bold, label=""];
12->4 [style = solid, label="controller"];
6->8 [style = bold, label=""];
11->24 [style = dashed, label="0"];
10->9 [style = bold, label=""];
5->11 [style = bold, label=""];
9->1 [style = bold, label=""];
19->7 [style = bold, label=""];
9->4 [style = solid, label="mockSearchPhaseContext"];
0->5 [style = bold, label=""];
}
