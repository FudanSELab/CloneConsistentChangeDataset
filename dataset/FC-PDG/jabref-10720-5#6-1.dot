digraph {
2 [style = filled, label = "List<BibEntry> entries = bibtexImporter.importDatabase(importFile,charset).getDatabase().getEntries()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testPerformExport['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String xmlFileName = filename.replace(\".bib\",\".xml\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Path tempFilename = tempFile.toAbsolutePath()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testImportAsModsAndExportAsMods['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Builder test = Input.from(Files.newInputStream(Paths.get(tempFilename)))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String tempFilename = tempFile.getCanonicalPath()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertThat(test,CompareMatcher.isSimilarTo(control).withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure())@@@10@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "modsExportFormat.export(databaseContext,tempFile,charset,entries)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertThat(test,CompareMatcher.isSimilarTo(control).withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "List<BibEntry> entries = modsImporter.importDatabase(xmlFile,charset).getDatabase().getEntries()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Path xmlFile = Paths.get(.getResource(xmlFileName).toURI())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "importFile = Paths.get(.getResource(filename).toURI())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testPerformExport['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Builder control = Input.from(Files.newInputStream(xmlFile))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "modsExportFormat.export(databaseContext,tempFile.toPath(),charset,entries)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Builder test = Input.from(Files.newInputStream(tempFilename))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "String filename@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
6->3 [style = bold, label=""];
10->15 [style = solid, label="tempFilename"];
16->8 [style = bold, label=""];
0->6 [style = bold, label=""];
2->3 [style = bold, label=""];
4->15 [style = bold, label=""];
8->14 [style = bold, label=""];
10->3 [style = bold, label=""];
4->1 [style = solid, label="test"];
7->4 [style = bold, label=""];
8->14 [style = dashed, label="0"];
3->16 [style = bold, label=""];
12->9 [style = bold, label=""];
8->7 [style = bold, label=""];
9->6 [style = bold, label=""];
2->8 [style = solid, label="entries"];
6->10 [style = dashed, label="0"];
6->2 [style = bold, label=""];
6->4 [style = solid, label="tempFilename"];
12->13 [style = dotted, label="true"];
17->0 [style = bold, label=""];
15->11 [style = bold, label=""];
5->0 [style = bold, label=""];
1->11 [style = dashed, label="0"];
4->15 [style = dashed, label="0"];
3->8 [style = bold, label=""];
6->10 [style = bold, label=""];
4->1 [style = bold, label=""];
3->7 [style = solid, label="xmlFile"];
16->8 [style = solid, label="entries"];
15->11 [style = solid, label="test"];
3->14 [style = solid, label="entries"];
8->4 [style = solid, label="xmlFile"];
14->4 [style = bold, label=""];
}
