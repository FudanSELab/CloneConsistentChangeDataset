digraph {
22 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "replicas.sort(comparator)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\"@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"node4\",getHost(replicas.get(2).getNodeName()))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "replicas.add(new Replica(\"node5\",map(ZkStateReader.NODE_NAME_PROP,\"node5:8983_solr\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"PULL\"),\"c1\",\"s1\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "replicaTypeAndReplicaBase['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(4).getNodeName()))@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "replicaTypeAndReplicaLocationTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(\"node5\",getHost(replicas.get(4).getNodeName()))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(3).getNodeName()))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "replicas.add(new Replica(\"node4\",Map.of(ZkStateReader.NODE_NAME_PROP,\"node4:8983_solr\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"c1\",\"s1\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(2).getNodeName()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "params.add(\"routingPreference\",\"0\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"node4\",getHost(replicas.get(1).getNodeName()))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<PreferenceRule> rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://node4\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "replicaTypeAndReplicaBase['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"node5\",getHost(replicas.get(3).getNodeName()))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(2).getNodeName()))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "params.set(\"routingPreference\",\"1\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.NODE_NAME_PROP,\"node4:8983_solr\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"collection1\",\"shard1\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "rlt.transform(replicas)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "replicas.add(new Replica(\"node5\",Map.of(ZkStateReader.NODE_NAME_PROP,\"node5:8983_solr\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"PULL\"),\"c1\",\"s1\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.NODE_NAME_PROP,\"node4:8983_solr\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"c1\",\"s1\"))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ReplicaListTransformer rlt = generator.getReplicaListTransformer(params)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"node4\",getHost(replicas.get(1).getNodeName()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "rlt.transform(replicas)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "params.add(ShardParams.SHARDS_PREFERENCE,rulesParam)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(1).getNodeName()))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(3).getNodeName()))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
8->16 [style = bold, label=""];
14->24 [style = bold, label=""];
18->23 [style = bold, label=""];
15->14 [style = bold, label=""];
26->5 [style = bold, label=""];
19->20 [style = bold, label=""];
27->30 [style = bold, label=""];
5->15 [style = bold, label=""];
35->32 [style = bold, label=""];
32->14 [style = bold, label=""];
4->2 [style = bold, label=""];
7->4 [style = bold, label=""];
29->34 [style = bold, label=""];
1->32 [style = dashed, label="0"];
14->33 [style = bold, label=""];
14->1 [style = bold, label=""];
3->18 [style = bold, label=""];
33->29 [style = bold, label=""];
22->3 [style = bold, label=""];
13->28 [style = dashed, label="0"];
21->5 [style = bold, label=""];
11->0 [style = bold, label=""];
30->28 [style = bold, label=""];
31->35 [style = bold, label=""];
14->33 [style = solid, label="rules"];
15->16 [style = solid, label="params"];
25->11 [style = bold, label=""];
1->24 [style = dashed, label="0"];
24->25 [style = bold, label=""];
11->8 [style = solid, label="rulesParam"];
0->8 [style = bold, label=""];
9->19 [style = bold, label=""];
14->12 [style = solid, label="replicas"];
17->13 [style = bold, label=""];
13->6 [style = bold, label=""];
20->7 [style = bold, label=""];
33->29 [style = solid, label="comparator"];
1->10 [style = bold, label=""];
23->9 [style = bold, label=""];
16->12 [style = bold, label=""];
14->7 [style = solid, label="replicas"];
10->25 [style = dashed, label="0"];
12->22 [style = bold, label=""];
34->27 [style = bold, label=""];
10->11 [style = bold, label=""];
15->20 [style = solid, label="params"];
}
