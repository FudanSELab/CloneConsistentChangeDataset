digraph {
8 [style = filled, label = "exceptionsIncludeClassPackaging['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(fileContents).is(Matched.by(expectedOutput))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "this.output.expect(expectedOutput)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "this.logger.warn(\"Expected exception\",new RuntimeException(\"Expected\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "{System.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD)}@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "this.logger.info(\"Hidden\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "System.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD,\"%ex\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String fileContents = FileCopyUtils.copyToString(new FileReader(new File(tmpDir() + \"/spring.log\")))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Matcher<String> expectedOutput = Matchers.allOf(containsString(\"java.lang.RuntimeException: Expected\"),not(containsString(\"Wrapped by:\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "this.loggingSystem.initialize(this.initializationContext,null,getLogFile(null,tmpDir()))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "this.loggingSystem.beforeInitialize()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String fileContents = contentOf(new File(tmpDir() + \"/spring.log\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "this.logger.warn(\"Expected exception\",new RuntimeException(\"Expected\",new RuntimeException(\"Cause\")))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "String fileContents = FileCopyUtils.copyToString(new FileReader(new File(tmpDir() + \"/spring.log\")))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "customExceptionConversionWord['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "this.loggingSystem.initialize(null,null,getLogFile(null,tmpDir()))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "exceptionsIncludeClassPackaging['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "this.loggingSystem.beforeInitialize()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "this.output.expect(expectedOutput)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
2->17 [style = bold, label=""];
4->9 [style = bold, label=""];
0->6 [style = bold, label=""];
2->3 [style = bold, label=""];
1->9 [style = dashed, label="0"];
7->0 [style = bold, label=""];
15->5 [style = solid, label="expectedOutput"];
3->4 [style = bold, label=""];
13->16 [style = bold, label=""];
15->5 [style = bold, label=""];
4->12 [style = dashed, label="0"];
6->2 [style = bold, label=""];
8->0 [style = bold, label=""];
5->12 [style = bold, label=""];
17->14 [style = bold, label=""];
11->10 [style = bold, label=""];
12->18 [style = bold, label=""];
18->13 [style = bold, label=""];
9->5 [style = bold, label=""];
2->3 [style = solid, label="expectedOutput"];
15->13 [style = solid, label="expectedOutput"];
10->2 [style = bold, label=""];
4->1 [style = bold, label=""];
14->15 [style = bold, label=""];
2->5 [style = solid, label="expectedOutput"];
}
