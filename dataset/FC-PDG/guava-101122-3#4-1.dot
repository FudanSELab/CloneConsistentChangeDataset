digraph {
0 [style = filled, label = "sb.appendCodePoint(randomCodePoint)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "HashMap<Integer,Integer> utf8Lengths = new HashMap<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "sb.setLength(0)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "utf8Lengths.put(MIN_SUPPLEMENTARY_CODE_POINT - 1,3)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "trial < 100@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Integer randomCodePoint = codePoints(rnd.nextInt(codePoints.length)(@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Random rnd = new Random()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "j++@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "HashMap<Integer,Integer> utf8Lengths = new HashMap<Integer,Integer>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "int j = 0@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testEncodedLength_validStrings2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "utf8Length += utf8Lengths.get(randomCodePoint)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "utf8Lengths.put(MAX_CODE_POINT,4)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int utf8Length = 0@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "utf8Length != Utf8.encodedLength(sb)@@@28@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "int trial = 0@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "trial++@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = 0@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "utf8Lengths.put(0x7f,1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "utf8Lengths.put(0x7ff,2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "StringBuilder repro = new StringBuilder()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "utf8Lengths.put(MIN_SUPPLEMENTARY_CODE_POINT,4)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(repro.toString(),utf8Length,Utf8.encodedLength(sb))@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i < 6@@@23@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i++@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testEncodedLength_validStrings2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "j < sb.length()@@@31@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "utf8Lengths.put(0x00,1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "repro.append(\" \" + (int)sb.charAt(j))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testEncodedLength_validStrings2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "utf8Lengths.put(0x800,3)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "StringBuilder sb = new StringBuilder()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Integer(( codePoints = utf8Lengths.keySet().toArray(new Integer((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11bed90)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "utf8Lengths.put(0x80,2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
2->26 [style = bold, label=""];
26->20 [style = solid, label="j"];
28->15 [style = bold, label=""];
12->28 [style = bold, label=""];
17->1 [style = bold, label=""];
3->24 [style = bold, label=""];
30->20 [style = solid, label="j"];
6->22 [style = bold, label=""];
4->10 [style = dotted, label="true"];
5->4 [style = solid, label="i"];
24->18 [style = solid, label="trial"];
31->32 [style = bold, label=""];
11->21 [style = bold, label=""];
18->11 [style = bold, label=""];
26->30 [style = solid, label="j"];
4->0 [style = dotted, label="true"];
18->21 [style = dotted, label="true"];
1->3 [style = bold, label=""];
10->0 [style = solid, label="randomCodePoint"];
12->20 [style = bold, label=""];
4->7 [style = dotted, label="true"];
15->4 [style = solid, label="i"];
25->12 [style = dotted, label="true"];
1->25 [style = solid, label="sb"];
22->32 [style = dashed, label="0"];
25->28 [style = dotted, label="true"];
16->17 [style = bold, label=""];
4->15 [style = dotted, label="true"];
4->25 [style = dotted, label="true"];
24->18 [style = bold, label=""];
7->28 [style = solid, label="utf8Length"];
25->2 [style = bold, label=""];
12->30 [style = dotted, label="true"];
23->18 [style = solid, label="trial"];
0->7 [style = bold, label=""];
21->5 [style = bold, label=""];
24->23 [style = solid, label="trial"];
18->11 [style = dotted, label="true"];
26->12 [style = bold, label=""];
30->12 [style = bold, label=""];
13->27 [style = bold, label=""];
17->10 [style = solid, label="codePoints"];
12->20 [style = dotted, label="true"];
19->14 [style = bold, label=""];
26->12 [style = solid, label="j"];
33->22 [style = bold, label=""];
5->15 [style = solid, label="i"];
5->4 [style = bold, label=""];
10->0 [style = bold, label=""];
10->7 [style = solid, label="randomCodePoint"];
15->4 [style = bold, label=""];
8->9 [style = bold, label=""];
7->25 [style = solid, label="utf8Length"];
25->15 [style = bold, label=""];
14->8 [style = bold, label=""];
27->19 [style = bold, label=""];
7->25 [style = bold, label=""];
18->5 [style = dotted, label="true"];
18->4 [style = dotted, label="true"];
22->13 [style = bold, label=""];
30->12 [style = solid, label="j"];
32->13 [style = bold, label=""];
20->30 [style = bold, label=""];
9->29 [style = bold, label=""];
1->28 [style = solid, label="sb"];
25->2 [style = dotted, label="true"];
29->16 [style = bold, label=""];
23->18 [style = bold, label=""];
25->26 [style = dotted, label="true"];
4->23 [style = bold, label=""];
18->23 [style = dotted, label="true"];
}
