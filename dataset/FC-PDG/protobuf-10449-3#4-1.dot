digraph {
9 [style = filled, label = "testParseMessageSetExtensionWithFlag['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testMergeLazyMessageSetExtensionWithFlag['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(123,messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI())@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "extensionRegistry.add(TestMessageSetExtension1.messageSetExtension)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "RawMessageSet raw = RawMessageSet.newBuilder().addItem(RawMessageSet.Item.newBuilder().setTypeId(TYPE_ID_1).setMessage(TestMessageSetExtension1.newBuilder().setI(123).build().toByteString()).build()).build()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "RawMessageSet raw = RawMessageSet.newBuilder().addItem(RawMessageSet.Item.newBuilder().setTypeId(TYPE_ID_1).setMessage(TestMessageSetExtension1.newBuilder().setI(123).build().toByteString()).build()).build()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ExtensionRegistry extensionRegistry = ExtensionRegistry.newInstance()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int TYPE_ID_1 = TestMessageSetExtension1.getDescriptor().getExtensions().get(0).getNumber()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testParseMessageSetExtensionWithFlag['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "messageSet = messageSet.toBuilder().mergeFrom(data,extensionRegistry).build()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ByteString data = raw.toByteString()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ExtensionRegistryLite.setEagerlyParseMessageSets(eagerParsing)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ByteString data = raw.toByteString()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "TestMessageSet messageSet = TestMessageSet.parseFrom(data,extensionRegistry)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "boolean eagerParsing@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "boolean eagerParsing@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2->3 [style = solid, label="extensionRegistry"];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
15->7 [style = bold, label=""];
0->11 [style = bold, label=""];
10->3 [style = bold, label=""];
5->15 [style = bold, label=""];
2->5 [style = solid, label="extensionRegistry"];
6->8 [style = solid, label="eagerParsing"];
9->8 [style = bold, label=""];
9->6 [style = dotted, label="true"];
13->8 [style = solid, label="eagerParsing"];
14->13 [style = dotted, label="true"];
3->5 [style = solid, label="data"];
7->5 [style = dashed, label="0"];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
6->13 [style = dashed, label="0"];
10->3 [style = solid, label="data"];
8->2 [style = bold, label=""];
12->6 [style = dotted, label="true"];
11->10 [style = bold, label=""];
12->8 [style = bold, label=""];
0->1 [style = bold, label=""];
1->11 [style = dashed, label="0"];
5->7 [style = bold, label=""];
14->8 [style = bold, label=""];
}
