digraph {
0 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",17000.0d,\"rows\",2L,\"idx\",175L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",12000.0d,\"rows\",2L,\"idx\",324L))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testGroupByDoubleColumnDescending['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testGroupByLongColumnDescending['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"double\")@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql_alias\",1700L,\"rows\",2L,\"idx\",175L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql_alias\",1200L,\"rows\",2L,\"idx\",324L))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"qualityLong\",\"ql_alias\",ValueType.LONG)).setDimFilter(new InDimFilter(\"quality\",Arrays.asList(\"entertainment\",\"technology\"),null)).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(new OrderByColumnSpec(\"ql_alias\",OrderByColumnSpec.Direction.DESCENDING,StringComparators.NUMERIC)).setGranularity(QueryRunnerTestHelper.allGran).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"qualityDouble\",\"alias\",ValueType.DOUBLE)).setDimFilter(new InDimFilter(\"quality\",Arrays.asList(\"entertainment\",\"technology\"),null)).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(new OrderByColumnSpec(\"alias\",OrderByColumnSpec.Direction.DESCENDING,StringComparators.NUMERIC)).setGranularity(QueryRunnerTestHelper.allGran).build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "expectedException.expect()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertNotEquals(Functions.identity(),query.getLimitSpec().build(query.getDimensions(),query.getAggregatorSpecs(),query.getPostAggregatorSpecs(),query.getGranularity(),query.getContextSortByDimsFirst()))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expectedException.expectMessage(\"GroupBy v1 only supports dimensions with an outputType of STRING.\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"\")@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testGroupByDoubleColumnDescending['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8->2 [style = solid, label="query"];
8->5 [style = bold, label=""];
10->6 [style = bold, label=""];
2->7 [style = bold, label=""];
0->9 [style = solid, label="expectedResults"];
8->13 [style = dashed, label="0"];
6->13 [style = bold, label=""];
4->8 [style = bold, label=""];
1->6 [style = bold, label=""];
6->8 [style = bold, label=""];
11->2 [style = bold, label=""];
7->9 [style = dashed, label="0"];
2->9 [style = solid, label="results"];
6->4 [style = dotted, label="true"];
2->9 [style = bold, label=""];
5->0 [style = bold, label=""];
0->11 [style = dashed, label="0"];
5->11 [style = bold, label=""];
13->2 [style = solid, label="query"];
2->7 [style = solid, label="results"];
6->3 [style = bold, label=""];
0->7 [style = solid, label="expectedResults"];
6->3 [style = dotted, label="true"];
11->7 [style = solid, label="expectedResults"];
4->13 [style = bold, label=""];
0->2 [style = bold, label=""];
3->4 [style = bold, label=""];
13->5 [style = bold, label=""];
12->6 [style = bold, label=""];
}
