digraph {
2 [style = filled, label = "Assert.assertEquals(ExprEval.of(true,ExprType.LONG).value(),result.value())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "NullHandling.sqlCompatible()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testNullSearchOnEmptyString['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final ExprEval<?> result = eval(\"icontains_string(a, 'oba')\",InputBindings.withMap(ImmutableMap.of(\"a\",\"FOOBAR\")))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(ExprEval.of(true,ExprType.LONG).value(),result.value())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testMatchSearchUpperCase['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final ExprEval<?> result = eval(\"icontains_string(a, 'oba')\",Parser.withMap(ImmutableMap.of(\"a\",\"FOOBAR\")))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(ExprEval.ofBoolean(true,ExprType.LONG).value(),result.value())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final ExprEval<?> result = eval(\"contains_string(a, null)\",Parser.withMap(ImmutableMap.of(\"a\",\"\")))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testMatchSearchUpperCase['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "expectException(,\"Function(contains_string( substring must be a string literal\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
2->4 [style = dashed, label="0"];
0->3 [style = dashed, label="0"];
1->0 [style = bold, label=""];
9->10 [style = bold, label=""];
10->8 [style = bold, label=""];
6->9 [style = bold, label=""];
9->7 [style = bold, label=""];
9->7 [style = dotted, label="true"];
7->10 [style = bold, label=""];
3->4 [style = bold, label=""];
0->2 [style = bold, label=""];
}
