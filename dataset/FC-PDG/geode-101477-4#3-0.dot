digraph {
8 [style = filled, label = "assertThat(region.getGroups()).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "filter.setGroup(\"group2\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(regions.get(0).getId()).isEqualTo(\"customers2\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "listGroup2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertThat(regions.get(0).getId()).isEqualTo(\"customers1\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(regions.get(0).getGroup()).isEqualTo(\"group1\")@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "RuntimeCacheElement region = CacheElement.findElement(regions,\"customers2\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "listGroup1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "List<RuntimeCacheElement> regions = client.list(filter).getResult()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "filter.setGroup(\"group1\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(regions).hasSize(2)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group2\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "region = CacheElement.findElement(regions,\"customers3\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertThat(regions.get(0).getConfigGroup()).isEqualTo(\"group1\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(regions).hasSize(1)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<CacheElement> regions = client.list(filter).getResult()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(regions.get(0).getConfigGroup()).isEqualTo(\"group2\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "listGroup2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(regions.get(0).getGroup()).isEqualTo(\"group2\")@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
13->10 [style = bold, label=""];
4->16 [style = dashed, label="0"];
2->6 [style = bold, label=""];
4->13 [style = bold, label=""];
6->11 [style = dashed, label="0"];
18->15 [style = bold, label=""];
0->15 [style = dashed, label="0"];
2->18 [style = bold, label=""];
6->0 [style = bold, label=""];
7->4 [style = bold, label=""];
11->9 [style = bold, label=""];
3->4 [style = bold, label=""];
2->10 [style = dashed, label="0"];
6->18 [style = dashed, label="0"];
1->13 [style = dashed, label="0"];
15->17 [style = bold, label=""];
5->17 [style = dashed, label="0"];
16->1 [style = bold, label=""];
12->8 [style = bold, label=""];
13->12 [style = solid, label="regions"];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
9->12 [style = bold, label=""];
0->9 [style = dashed, label="0"];
0->5 [style = bold, label=""];
13->11 [style = solid, label="regions"];
10->11 [style = bold, label=""];
}
