digraph {
2 [style = filled, label = "VirtualColumns virtualColumns = VirtualColumns.create(ImmutableList.of(new ExpressionVirtualColumn(\"v1\",\"concat('virtual-column-', \"channel\")\",ValueType.STRING,TestExprMacroTable.INSTANCE)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(joinableClauses,originalFilter)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(new SelectorFilter(\"channel\",\"#en.wikipedia\"),null,ImmutableList.of())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Filter originalFilter = new AndFilter(ImmutableList.of(new SelectorFilter(\"v1\",\"virtual-column-#en.wikipedia\")))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Filter originalFilter = new SelectorFilter(\"channel\",\"#en.wikipedia\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "test_filterPushDown_factToRegionToCountryLeftFilterOnChannelVirtualColumn['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(originalFilter,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",FACT_TO_REGION_PREFIX + \"regionName\",REGION_TO_COUNTRY_PREFIX + \"countryName\"),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@97164d,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@971653,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@971659,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@97165f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@971665,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@97166b,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@971671,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@971677,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@97167d,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@971683,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@971689,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@97168f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@971695,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@97169b))@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),ImmutableList.of(factToRegion(JoinType.LEFT),regionToCountry(JoinType.LEFT)))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(originalFilter,Intervals.ETERNITY,virtualColumns,Granularities.ALL,false,null),ImmutableList.of(\"page\",FACT_TO_REGION_PREFIX + \"regionName\",REGION_TO_COUNTRY_PREFIX + \"countryName\"),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@97158e,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@971594,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@97159a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9715a0,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9715a6,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9715ac,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9715b2,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9715b8,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9715be,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9715c4,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9715ca,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9715d0,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9715d6,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9715dc))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(adapter,adapter.determineBaseColumnsWithPreAndPostJoinVirtualColumns(VirtualColumns.EMPTY,null,null),originalFilter,true,true)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "test_filterPushDown_factToRegionToCountryLeftFilterOnChannel['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "test_filterPushDown_factToRegionToCountryLeftFilterOnChannelVirtualColumn['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "List<JoinableClause> joinableClauses = ImmutableList.of(factToRegion(JoinType.LEFT),regionToCountry(JoinType.LEFT))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(expectedFilterSplit,actualFilterSplit)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(adapter,adapter.determineBaseColumnsWithPreAndPostJoinVirtualColumns(virtualColumns,null,null),originalFilter,true,true)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),joinableClauses,joinFilterPreAnalysis)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(new SelectorFilter(\"v1\",\"virtual-column-#en.wikipedia\"),null,ImmutableList.of())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->12 [style = dashed, label="0"];
5->14 [style = solid, label="adapter"];
4->6 [style = bold, label=""];
7->17 [style = dashed, label="0"];
2->3 [style = solid, label="virtualColumns"];
2->1 [style = bold, label=""];
7->3 [style = solid, label="originalFilter"];
1->3 [style = bold, label=""];
14->15 [style = solid, label="actualFilterSplit"];
17->14 [style = solid, label="originalFilter"];
7->6 [style = solid, label="originalFilter"];
7->8 [style = bold, label=""];
5->17 [style = bold, label=""];
3->4 [style = bold, label=""];
7->8 [style = solid, label="originalFilter"];
12->7 [style = bold, label=""];
11->2 [style = bold, label=""];
6->4 [style = dashed, label="0"];
3->4 [style = solid, label="actualFilterSplit"];
12->8 [style = solid, label="joinableClauses"];
7->2 [style = bold, label=""];
15->4 [style = bold, label=""];
10->4 [style = bold, label=""];
16->5 [style = bold, label=""];
2->6 [style = solid, label="virtualColumns"];
13->15 [style = solid, label="expectedFilterSplit"];
5->7 [style = bold, label=""];
14->15 [style = bold, label=""];
17->13 [style = bold, label=""];
1->4 [style = solid, label="expectedFilterSplit"];
9->12 [style = bold, label=""];
8->11 [style = solid, label="joinFilterPreAnalysis"];
8->10 [style = solid, label="joinFilterPreAnalysis"];
3->10 [style = dashed, label="0"];
10->4 [style = solid, label="actualFilterSplit"];
12->11 [style = solid, label="joinableClauses"];
1->10 [style = bold, label=""];
8->11 [style = bold, label=""];
5->3 [style = solid, label="adapter"];
13->14 [style = bold, label=""];
17->4 [style = solid, label="originalFilter"];
0->5 [style = bold, label=""];
}
