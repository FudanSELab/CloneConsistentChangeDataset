digraph {
17 [style = filled, label = "testExpressions(expressions)@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Double floatResult = (Double)getStatResult(\"sosr\",\"float_fd\",VAL_TYPE.DOUBLE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(getRawResponse(),doubleResult,doubleTest)@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"sosr\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "sumOfSquaresTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Double doubleTest = (Double)calculateNumberStat(doubleTestStart,\"sumOfSquares\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(getRawResponse(),intResult,intTest)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expressions.put(\"single\",new ETP(\"mean(int_i)\",3.3529411764))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"mr\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Double intTest = (Double)calculateNumberStat(intTestStart,\"sumOfSquares\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Double doubleTest = (Double)calculateNumberStat(doubleTestStart,\"mean\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "expressions.put(\"multi\",new ETP(\"mean(long_lm)\",6.0))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Double longResult = (Double)getStatResult(\"sosr\",\"long_ld\",VAL_TYPE.DOUBLE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Double longResult = (Double)getStatResult(\"mr\",\"long_ld\",VAL_TYPE.DOUBLE)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "meanTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Double floatResult = (Double)getStatResult(\"mr\",\"float_fd\",VAL_TYPE.DOUBLE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Double longTest = (Double)calculateNumberStat(longTestStart,\"mean\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Double intResult = (Double)getStatResult(\"mr\",\"int_id\",VAL_TYPE.DOUBLE)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(getRawResponse(),floatResult,floatTest)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Double intResult = (Double)getStatResult(\"sosr\",\"int_id\",VAL_TYPE.DOUBLE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Double floatTest = (Double)calculateNumberStat(floatTestStart,\"sumOfSquares\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Double floatTest = (Double)calculateNumberStat(floatTestStart,\"mean\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Double intTest = (Double)calculateNumberStat(intTestStart,\"mean\")@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(getRawResponse(),longResult,longTest)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "meanTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Map<String,ETP> expressions = new HashMap<>()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Double longTest = (Double)calculateNumberStat(longTestStart,\"sumOfSquares\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->19 [style = dashed, label="0"];
4->24 [style = bold, label=""];
7->23 [style = dashed, label="0"];
3->8 [style = solid, label="intResult"];
9->11 [style = bold, label=""];
12->5 [style = bold, label=""];
22->8 [style = solid, label="intTest"];
8->19 [style = bold, label=""];
25->11 [style = solid, label="longTest"];
12->6 [style = solid, label="doubleResult"];
1->3 [style = bold, label=""];
23->26 [style = bold, label=""];
10->8 [style = solid, label="intTest"];
7->0 [style = bold, label=""];
0->26 [style = dashed, label="0"];
2->9 [style = bold, label=""];
10->22 [style = dashed, label="0"];
23->4 [style = solid, label="floatResult"];
15->16 [style = bold, label=""];
5->18 [style = dashed, label="0"];
26->4 [style = bold, label=""];
24->18 [style = bold, label=""];
26->4 [style = solid, label="floatTest"];
19->25 [style = bold, label=""];
20->22 [style = bold, label=""];
22->8 [style = bold, label=""];
3->10 [style = bold, label=""];
13->17 [style = bold, label=""];
21->20 [style = bold, label=""];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
8->2 [style = bold, label=""];
18->6 [style = bold, label=""];
0->4 [style = bold, label=""];
25->11 [style = bold, label=""];
12->24 [style = dashed, label="0"];
3->20 [style = dashed, label="0"];
9->25 [style = dashed, label="0"];
20->8 [style = solid, label="intResult"];
4->12 [style = bold, label=""];
9->11 [style = solid, label="longTest"];
16->14 [style = bold, label=""];
16->17 [style = solid, label="expressions"];
18->6 [style = solid, label="doubleTest"];
14->13 [style = bold, label=""];
7->4 [style = solid, label="floatResult"];
0->4 [style = solid, label="floatTest"];
19->11 [style = solid, label="longResult"];
2->11 [style = solid, label="longResult"];
11->23 [style = bold, label=""];
11->7 [style = bold, label=""];
5->6 [style = solid, label="doubleTest"];
24->6 [style = solid, label="doubleResult"];
}
