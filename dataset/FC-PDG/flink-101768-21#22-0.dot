digraph {
18 [style = filled, label = "Plan plan = (Plan)PackagedProgramUtils.getPipelineFromProgram(prg,config,-1,true)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Configuration config = new Configuration()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "dumper2.setEncodeForHTML(true)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Optimizer optimizer = new Optimizer(new DataStatistics(),new DefaultCostEstimator(),config)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "InetAddress mockAddress = InetAddress.getLocalHost()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(-1,htmlEscaped.indexOf('\'))@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertNotNull(dumper.getOptimizerPlanAsJSON(op))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "PackagedProgram prg = PackagedProgram.newBuilder().setEntryPointClassName(.getName()).setArguments(\"/dev/random\",\"/tmp\").build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "InetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress,12345)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testGetExecutionPlan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(-1,htmlEscaped.indexOf('\'))@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "config.setString(JobManagerOptions.ADDRESS,mockJmAddress.getHostName())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Plan plan = (Plan)PackagedProgramUtils.getPipelineFromProgram(prg,1,true)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testGetExecutionPlan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Plan plan = (Plan)PackagedProgramUtils.getPipelineFromProgram(prg,-1,true)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testGetExecutionPlan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "PlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String htmlEscaped = dumper2.getOptimizerPlanAsJSON(op)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "OptimizedPlan op = optimizer.compile(plan)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNotNull(op)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "config.setInteger(JobManagerOptions.PORT,mockJmAddress.getPort())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21->16 [style = solid, label="op"];
0->9 [style = bold, label=""];
10->7 [style = solid, label="plan"];
18->7 [style = solid, label="plan"];
5->18 [style = solid, label="config"];
21->6 [style = solid, label="op"];
11->21 [style = bold, label=""];
3->11 [style = bold, label=""];
5->15 [style = bold, label=""];
0->11 [style = bold, label=""];
11->21 [style = solid, label="plan"];
7->4 [style = bold, label=""];
19->11 [style = solid, label="prg"];
15->3 [style = bold, label=""];
10->7 [style = bold, label=""];
1->13 [style = bold, label=""];
11->18 [style = bold, label=""];
19->0 [style = bold, label=""];
9->14 [style = solid, label="mockAddress"];
10->18 [style = dashed, label="0"];
10->11 [style = dashed, label="0"];
8->0 [style = bold, label=""];
12->2 [style = bold, label=""];
7->4 [style = solid, label="op"];
17->0 [style = bold, label=""];
16->1 [style = bold, label=""];
11->10 [style = bold, label=""];
0->10 [style = solid, label="prg"];
9->14 [style = bold, label=""];
21->7 [style = bold, label=""];
7->12 [style = solid, label="op"];
7->1 [style = solid, label="op"];
13->6 [style = bold, label=""];
18->7 [style = bold, label=""];
20->19 [style = bold, label=""];
0->18 [style = solid, label="prg"];
21->7 [style = solid, label="op"];
5->11 [style = solid, label="config"];
4->16 [style = bold, label=""];
14->5 [style = bold, label=""];
6->12 [style = bold, label=""];
}
