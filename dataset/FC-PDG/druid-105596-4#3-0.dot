digraph {
1 [style = filled, label = "int b = (int)(Math.random() * values.length)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "int a = (int)(ThreadLocalRandom.current().nextDouble() * values.length)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "i < 10@@@16@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int end = a < b? b: a@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(baos.size(),serializer.getSerializedSize())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "serializer.writeTo(Channels.newChannel(baos),null)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int b = (int)(ThreadLocalRandom.current().nextDouble() * values.length)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "testValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "serializer.open()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "i++@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int start = a < b? a: b@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ColumnarLongsSerializer serializer = CompressionFactory.getLongSerializer(new OffHeapMemorySegmentWriteOutMedium(),\"test\",order,encodingStrategy,compressionStrategy)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "CompressedColumnarLongsSupplier supplier = CompressedColumnarLongsSupplier.fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()),order)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "CompressedColumnarLongsSupplier supplier = CompressedColumnarLongsSupplier.fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()),order)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "longs.close()@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int i = 0@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "serializer.add(value)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int a = (int)(Math.random() * values.length)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "testConcurrentThreadReads(supplier,longs,values)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testSupplierSerde(supplier,values)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "tryFill(longs,values,start,end - start)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "long(( values@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertIndexMatchesVals(longs,values)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final ByteArrayOutputStream baos = new ByteArrayOutputStream()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ColumnarLongs longs = supplier.get()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(values.length,serializer.size())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->10 [style = bold, label=""];
23->25 [style = bold, label=""];
7->11 [style = bold, label=""];
22->15 [style = bold, label=""];
0->19 [style = solid, label="values"];
23->13 [style = solid, label="a"];
20->22 [style = solid, label="supplier"];
5->20 [style = bold, label=""];
25->13 [style = bold, label=""];
8->22 [style = solid, label="longs"];
20->27 [style = dashed, label="0"];
25->6 [style = solid, label="b"];
4->13 [style = solid, label="a"];
26->14 [style = bold, label=""];
18->12 [style = bold, label=""];
3->4 [style = dotted, label="true"];
4->6 [style = solid, label="a"];
13->19 [style = solid, label="start"];
8->19 [style = solid, label="longs"];
23->6 [style = solid, label="a"];
10->3 [style = bold, label=""];
0->2 [style = solid, label="values"];
6->19 [style = bold, label=""];
25->13 [style = solid, label="b"];
26->0 [style = dotted, label="true"];
6->19 [style = solid, label="end"];
3->6 [style = dotted, label="true"];
12->9 [style = bold, label=""];
3->4 [style = bold, label=""];
1->13 [style = bold, label=""];
3->25 [style = dotted, label="true"];
11->18 [style = bold, label=""];
1->13 [style = solid, label="b"];
14->7 [style = bold, label=""];
24->14 [style = bold, label=""];
0->22 [style = solid, label="values"];
8->17 [style = bold, label=""];
1->6 [style = solid, label="b"];
3->23 [style = bold, label=""];
0->17 [style = solid, label="values"];
20->8 [style = bold, label=""];
3->19 [style = dotted, label="true"];
20->2 [style = solid, label="supplier"];
16->0 [style = dotted, label="true"];
12->9 [style = solid, label="baos"];
3->2 [style = bold, label=""];
10->21 [style = solid, label="i"];
3->21 [style = dotted, label="true"];
24->0 [style = dotted, label="true"];
17->15 [style = bold, label=""];
3->13 [style = dotted, label="true"];
9->5 [style = bold, label=""];
16->14 [style = bold, label=""];
4->1 [style = bold, label=""];
5->27 [style = bold, label=""];
13->6 [style = bold, label=""];
2->22 [style = bold, label=""];
1->25 [style = dashed, label="0"];
21->3 [style = solid, label="i"];
4->23 [style = dashed, label="0"];
3->1 [style = dotted, label="true"];
27->8 [style = bold, label=""];
8->17 [style = solid, label="longs"];
10->3 [style = solid, label="i"];
21->3 [style = bold, label=""];
3->23 [style = dotted, label="true"];
19->21 [style = bold, label=""];
}
