digraph {
18 [style = filled, label = "PhysLeafRel resultLeaf = (PhysLeafRel)result@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "planner.addRule(new ReformedSingleRule())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "planner.addRule(ReformedSingleRule.INSTANCE)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertTrue(result instanceof PhysLeafRel)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "planner.addRule(new PhysLeafRule())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "planner.addRule(PhysLeafRule.INSTANCE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "planner.addRule(new ReformedRemoveSingleRule())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testRemoveSingleReformed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "NoneSingleRel singleRel = new NoneSingleRel(cluster,leafRel)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testTransformSingleReformed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "RelNode result = planner.chooseDelegate().findBestExp()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "RelNode convertedRel = planner.changeTraits(singleRel,cluster.traitSetOf(PHYS_CALLING_CONVENTION))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "RelOptCluster cluster = newCluster(planner)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"c\",resultLeaf.label)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(result instanceof PhysSingleRel)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testTransformSingleReformed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "planner.addRelTraitDef(ConventionTraitDef.INSTANCE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "NoneLeafRel leafRel = new NoneLeafRel(cluster,\"a\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "planner.setRoot(convertedRel)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "VolcanoPlanner planner = new VolcanoPlanner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->17 [style = dashed, label="0"];
1->2 [style = solid, label="singleRel"];
12->5 [style = bold, label=""];
2->10 [style = solid, label="convertedRel"];
17->6 [style = bold, label=""];
11->18 [style = solid, label="result"];
9->1 [style = solid, label="leafRel"];
11->4 [style = bold, label=""];
8->3 [style = bold, label=""];
11->4 [style = solid, label="result"];
3->6 [style = bold, label=""];
6->1 [style = solid, label="cluster"];
8->14 [style = dashed, label="0"];
2->10 [style = bold, label=""];
3->13 [style = dashed, label="0"];
15->18 [style = bold, label=""];
11->15 [style = bold, label=""];
8->17 [style = bold, label=""];
19->5 [style = bold, label=""];
7->5 [style = bold, label=""];
0->14 [style = bold, label=""];
11->15 [style = solid, label="result"];
5->0 [style = bold, label=""];
6->9 [style = solid, label="cluster"];
4->15 [style = dashed, label="0"];
0->8 [style = bold, label=""];
5->6 [style = solid, label="planner"];
1->2 [style = bold, label=""];
14->13 [style = bold, label=""];
13->6 [style = bold, label=""];
6->9 [style = bold, label=""];
9->1 [style = bold, label=""];
10->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
