digraph {
31 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "int i = 0@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Thread.sleep(10)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@30@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "i < numToAdd@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "i++@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "insertData()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@55@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "int i = numToAdd@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "maxTotalRows = 3L@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@56@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@15@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@57@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
69 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "i++@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,nextOffsets)))))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,false))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,4L,1,2L))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@58@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "kafkaProducer.send(record).get()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
59 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Thread.sleep(10)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@24@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@62@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L,1,0L))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets) || checkpoint2.getPartitionSequenceNumberMap().equals(currentOffsets))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "i < records.size()@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6->22 [style = solid, label="startPartitions"];
22->35 [style = solid, label="task"];
6->36 [style = solid, label="startPartitions"];
59->49 [style = bold, label=""];
22->4 [style = solid, label="task"];
30->20 [style = solid, label="desc5"];
13->28 [style = dotted, label="true"];
38->8 [style = solid, label="desc2"];
25->34 [style = bold, label=""];
22->23 [style = solid, label="task"];
31->9 [style = bold, label=""];
20->26 [style = bold, label=""];
54->68 [style = bold, label=""];
42->6 [style = solid, label="consumerProps"];
53->67 [style = dotted, label="true"];
30->21 [style = solid, label="desc5"];
4->21 [style = solid, label="desc7"];
0->66 [style = solid, label="desc7"];
10->14 [style = solid, label="desc3"];
43->42 [style = bold, label=""];
18->30 [style = bold, label=""];
33->50 [style = dashed, label="0"];
36->38 [style = solid, label="desc1"];
23->14 [style = solid, label="desc5"];
35->26 [style = solid, label="desc6"];
22->29 [style = solid, label="task"];
58->12 [style = bold, label=""];
1->63 [style = dashed, label="0"];
6->19 [style = solid, label="task"];
38->27 [style = solid, label="desc6"];
6->18 [style = solid, label="task"];
11->22 [style = solid, label="baseSequenceName"];
48->52 [style = bold, label=""];
71->67 [style = bold, label=""];
33->60 [style = solid, label="currentOffsets"];
29->14 [style = solid, label="desc7"];
62->64 [style = dotted, label="true"];
22->6 [style = dashed, label="0"];
73->10 [style = bold, label=""];
7->16 [style = bold, label=""];
29->14 [style = bold, label=""];
52->48 [style = dotted, label="true"];
70->26 [style = solid, label="task"];
4->17 [style = solid, label="desc3"];
70->31 [style = bold, label=""];
7->70 [style = solid, label="consumerProps"];
16->13 [style = solid, label="currentOffsets"];
13->31 [style = bold, label=""];
16->9 [style = solid, label="currentOffsets"];
29->8 [style = solid, label="desc7"];
72->64 [style = solid, label="i"];
59->73 [style = solid, label="nextOffsets"];
19->21 [style = solid, label="desc2"];
14->20 [style = bold, label=""];
6->35 [style = solid, label="task"];
18->20 [style = solid, label="desc4"];
10->50 [style = bold, label=""];
47->64 [style = bold, label=""];
12->3 [style = dotted, label="true"];
33->51 [style = solid, label="currentOffsets"];
14->56 [style = solid, label="desc4"];
42->46 [style = bold, label=""];
28->70 [style = solid, label="endPartitions"];
9->33 [style = bold, label=""];
0->17 [style = bold, label=""];
63->54 [style = bold, label=""];
50->30 [style = bold, label=""];
6->36 [style = solid, label="task"];
34->33 [style = bold, label=""];
12->11 [style = bold, label=""];
3->11 [style = bold, label=""];
7->37 [style = bold, label=""];
4->21 [style = bold, label=""];
70->31 [style = solid, label="task"];
23->15 [style = solid, label="desc5"];
56->57 [style = bold, label=""];
67->53 [style = bold, label=""];
67->53 [style = solid, label="i"];
31->9 [style = solid, label="currentOffsets"];
49->73 [style = bold, label=""];
26->57 [style = solid, label="desc6"];
6->2 [style = bold, label=""];
22->38 [style = solid, label="task"];
26->0 [style = bold, label=""];
70->29 [style = solid, label="task"];
35->0 [style = solid, label="desc2"];
5->6 [style = bold, label=""];
2->69 [style = dashed, label="0"];
19->29 [style = solid, label="desc2"];
70->14 [style = solid, label="task"];
72->62 [style = solid, label="i"];
44->32 [style = bold, label=""];
33->36 [style = bold, label=""];
52->48 [style = bold, label=""];
38->14 [style = solid, label="desc6"];
17->15 [style = bold, label=""];
36->21 [style = solid, label="desc1"];
10->21 [style = solid, label="desc3"];
22->70 [style = solid, label="startPartitions"];
65->53 [style = bold, label=""];
8->55 [style = bold, label=""];
22->30 [style = solid, label="task"];
61->28 [style = bold, label=""];
27->8 [style = bold, label=""];
22->30 [style = solid, label="startPartitions"];
6->10 [style = solid, label="task"];
29->17 [style = solid, label="desc3"];
21->23 [style = bold, label=""];
1->39 [style = bold, label=""];
10->18 [style = bold, label=""];
24->12 [style = bold, label=""];
16->13 [style = bold, label=""];
70->0 [style = solid, label="task"];
22->16 [style = bold, label=""];
57->66 [style = bold, label=""];
6->30 [style = solid, label="task"];
33->30 [style = solid, label="currentOffsets"];
11->6 [style = solid, label="baseSequenceName"];
25->9 [style = bold, label=""];
21->15 [style = solid, label="desc4"];
65->53 [style = solid, label="i"];
68->65 [style = bold, label=""];
26->17 [style = solid, label="desc6"];
70->38 [style = solid, label="task"];
6->2 [style = solid, label="task"];
19->10 [style = bold, label=""];
68->72 [style = solid, label="numToAdd"];
14->17 [style = solid, label="desc4"];
11->70 [style = solid, label="baseSequenceName"];
45->44 [style = bold, label=""];
31->36 [style = solid, label="currentOffsets"];
21->14 [style = solid, label="desc4"];
37->7 [style = bold, label=""];
28->41 [style = bold, label=""];
45->6 [style = solid, label="startPartitions"];
31->25 [style = solid, label="currentOffsets"];
9->51 [style = dashed, label="0"];
40->12 [style = bold, label=""];
37->22 [style = bold, label=""];
64->62 [style = bold, label=""];
30->35 [style = bold, label=""];
4->14 [style = solid, label="desc3"];
39->32 [style = bold, label=""];
68->53 [style = solid, label="numToAdd"];
41->31 [style = bold, label=""];
12->3 [style = bold, label=""];
62->47 [style = bold, label=""];
65->67 [style = solid, label="i"];
35->14 [style = solid, label="desc2"];
62->47 [style = dotted, label="true"];
59->49 [style = solid, label="nextOffsets"];
5->6 [style = solid, label="endPartitions"];
36->19 [style = bold, label=""];
7->61 [style = dashed, label="0"];
62->59 [style = bold, label=""];
32->5 [style = bold, label=""];
72->62 [style = bold, label=""];
70->20 [style = solid, label="task"];
33->19 [style = solid, label="currentOffsets"];
30->14 [style = solid, label="desc1"];
59->60 [style = solid, label="nextOffsets"];
38->17 [style = solid, label="desc2"];
11->1 [style = bold, label=""];
11->63 [style = bold, label=""];
1->43 [style = bold, label=""];
18->21 [style = solid, label="desc4"];
38->29 [style = bold, label=""];
23->27 [style = solid, label="desc1"];
37->22 [style = solid, label="endPartitions"];
53->71 [style = dotted, label="true"];
52->72 [style = bold, label=""];
28->13 [style = bold, label=""];
22->16 [style = solid, label="task"];
35->4 [style = bold, label=""];
16->28 [style = solid, label="currentOffsets"];
7->37 [style = dotted, label="true"];
55->56 [style = bold, label=""];
9->25 [style = dotted, label="true"];
69->61 [style = bold, label=""];
35->21 [style = solid, label="desc6"];
20->17 [style = solid, label="desc5"];
53->71 [style = bold, label=""];
28->70 [style = bold, label=""];
64->62 [style = solid, label="i"];
60->35 [style = bold, label=""];
20->56 [style = solid, label="desc5"];
33->51 [style = bold, label=""];
53->7 [style = bold, label=""];
22->69 [style = bold, label=""];
32->22 [style = solid, label="consumerProps"];
22->21 [style = solid, label="task"];
45->9 [style = solid, label="startPartitions"];
9->25 [style = bold, label=""];
23->38 [style = bold, label=""];
4->0 [style = solid, label="desc7"];
70->23 [style = solid, label="task"];
46->45 [style = bold, label=""];
0->17 [style = solid, label="desc7"];
2->7 [style = bold, label=""];
30->26 [style = solid, label="desc1"];
29->55 [style = solid, label="desc3"];
15->27 [style = bold, label=""];
51->19 [style = bold, label=""];
6->4 [style = solid, label="task"];
23->17 [style = solid, label="desc1"];
19->52 [style = bold, label=""];
13->28 [style = bold, label=""];
30->60 [style = bold, label=""];
}
