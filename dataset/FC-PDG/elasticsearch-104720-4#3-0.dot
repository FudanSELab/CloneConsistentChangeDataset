digraph {
83 [style = filled, label = "corrections = suggester.getCorrections(analyzer,new BytesRef(\"captain usw\"),generator,2,4,ir,\"body\",wordScorer,1,2).corrections@@@110@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Zorr the Got-Jewel\"),generator,0.5f,4,ir,\"body\",wordScorer,0,2).corrections@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "assertThat(corrections(0(.join(space).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Map<String,Analyzer> mapping = new HashMap<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "doc.add(new Field(\"body_reverse\",line,TextField.TYPE_NOT_STORED))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "assertThat(corrections.length,equalTo(4))@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
106 [style = filled, label = "wordScorer = new LaplaceScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.5f)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testMultiGenerator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "DirectoryReader ir = DirectoryReader.open(writer)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "wordScorer = new LaplaceScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.5f)@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "assertThat(corrections.length,equalTo(4))@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertThat(result.cutoffScore,greaterThan(0d))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "assertThat(corrections(2(.join(space).utf8ToString(),equalTo(\"xorn the god jewel\"))@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Quazar II\"),generator,1,1,ir,\"body\",wordScorer,1,2).corrections@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "LaplaceScorer wordScorer = new LaplaceScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.95d,new BytesRef(\" \"),0.5f)@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Xor the Got-Jewel\"),generator,0.5f,1,ir,\"body\",wordScorer,1.5f,2).corrections@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "assertThat(corrections(1(.join(space,preTag,postTag).utf8ToString(),equalTo(\"xor the <em>god</em> jewel\"))@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertThat(corrections(3(.join(space,preTag,postTag).utf8ToString(),equalTo(\"xor teh <em>god</em> jewel\"))@@@80@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "mapping.put(\"body\",new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer t = new StandardTokenizer()return new TokenStreamComponents(t,new LowerCaseFilter(t))}})@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"american <em>ace</em>\"))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
97 [style = filled, label = "generator = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_MORE_POPULAR,ir,0.85,10,null,analyzer,MultiFields.getTerms(ir,\"body\"))@@@109@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "wordScorer = new LaplaceScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.5f)@@@101@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Xor the Got-Jewel\"),generator,0.5f,4,ir,\"body\",wordScorer,1,2).corrections@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
104 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"captain <em>america</em>\"))@@@112@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "testNgram['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
101 [style = filled, label = "corrections = result.corrections@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"captain america\"))@@@111@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "assertThat(corrections(1(.join(space).utf8ToString(),equalTo(\"xor the god jewel\"))@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
93 [style = filled, label = "suggester = new NoisyChannelSpellChecker(0.85)@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "testMultiGenerator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(),mapping)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "doc.add(new Field(\"body_ngram\",line,TextField.TYPE_NOT_STORED))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(corrections.length,equalTo(0))@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"american ame\"),generator,1,1,ir,\"body\",wordScorer,1,2).corrections@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "spellchecker.setMinQueryLength(1)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertThat(corrections(0(.join(space).utf8ToString(),equalTo(\"american ace\"))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertThat(corrections(2(.join(space).utf8ToString(),equalTo(\"xorn the god jewel\"))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
110 [style = filled, label = "Correction(( corrections = result.corrections@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"american ace\"))@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Analyzer analyzer = new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer t = new StandardTokenizer()TokenFilter filter = new LowerCaseFilter(t)try {SolrSynonymParser parser = new SolrSynonymParser(true,false,new WhitespaceAnalyzer())parser.parse(new StringReader(\"usa => usa, america, american\"))filter = new SynonymFilter(filter,parser.build(),true)}catch (Exception e) return new TokenStreamComponents(t,filter)}}@@@81@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"american ame\"))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "DirectCandidateGenerator reverse = new DirectCandidateGenerator(spellchecker,\"body_reverse\",SuggestMode.SUGGEST_ALWAYS,ir,0.95,10,wrapper,wrapper,MultiFields.getTerms(ir,\"body_reverse\"))@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
105 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Xor teh Got-Jewel\"),generator,4f,4,ir,\"body\",wordScorer,1,2).corrections@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(corrections(2(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"four the god jewel\"))@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "doc.add(new Field(\"body\",line,TextField.TYPE_NOT_STORED))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "assertThat(corrections(0(.join(space).utf8ToString(),equalTo(\"captain america\"))@@@103@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"america cae\"),generator,2,1,ir,\"body\",wordScorer,1,2).corrections@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "IndexWriterConfig conf = new IndexWriterConfig(wrapper)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "mapping.put(\"body_ngram\",new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer t = new StandardTokenizer()ShingleFilter tf = new ShingleFilter(t,2,3)tf.setOutputUnigrams(false)return new TokenStreamComponents(t,new LowerCaseFilter(tf))}})@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "assertThat(corrections(3(.join(space).utf8ToString(),equalTo(\"xor teh god jewel\"))@@@76@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertThat(corrections(1(.join(space).utf8ToString(),equalTo(\"xor the god jewel\"))@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(corrections(0(.join(space).utf8ToString(),equalTo(\"american ame\"))@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"captain america\"))@@@107@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(corrections.length,equalTo(4))@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"quasar ii\"))@@@74@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>captain america</em>\"))@@@108@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "corrections = suggester.getCorrections(analyzer,new BytesRef(\"captian usw\"),generator,2,4,ir,\"body\",wordScorer,1,2).corrections@@@106@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"american ace\"))@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "assertThat(corrections(2(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>xorn the god</em> jewel\"))@@@79@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "RAMDirectory dir = new RAMDirectory()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "assertThat(corrections(2(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>xorn</em> the <em>god</em> jewel\"))@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Correction(( corrections = suggester.getCorrections(wrapper,new BytesRef(\"american cae\"),generator,1,1,ir,\"body\",wordScorer,1,2).corrections@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "writer.addDocument(doc)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"american ace\"))@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>xorr the god</em> jewel\"))@@@77@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "suggester = new NoisyChannelSpellChecker(0.85)@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "WordScorer wordScorer = new LaplaceScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.95d,new BytesRef(\" \"),0.5f)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>captain america</em>\"))@@@104@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
99 [style = filled, label = "assertThat(corrections(0(.join(space).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Zorr the Got-Jewel\"),generator,0.5f,1,ir,\"body\",wordScorer,1.5f,2).corrections@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>xorr</em> the <em>god</em> jewel\"))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
89 [style = filled, label = "result = suggester.getCorrections(wrapper,new BytesRef(\"american ame\"),generator,1,1,ir,\"body\",wordScorer,0,1)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "assertThat(corrections(3(.join(space).utf8ToString(),equalTo(\"xorr the got jewel\"))@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "DirectSpellChecker spellchecker = new DirectSpellChecker()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "CandidateGenerator generator = new MultiCandidateGeneratorWrapper(10,forward,reverse)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "spellchecker.setAccuracy(0.0f)@@@97@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "DirectCandidateGenerator generator = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_MORE_POPULAR,ir,0.95,5)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "assertThat(corrections(3(.join(space).utf8ToString(),equalTo(\"xorr the got jewel\"))@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
91 [style = filled, label = "assertThat(corrections(2(.join(space).utf8ToString(),equalTo(\"xorn the god jewel\"))@@@75@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "assertThat(result.cutoffScore,equalTo(Double.MIN_VALUE))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "LaplaceScorer wordScorer = new LaplaceScorer(ir,MultiTerms.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.95d,new BytesRef(\" \"),0.5f)@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
71 [style = filled, label = "generator = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_MORE_POPULAR,ir,0.85,10,null,analyzer,MultiFields.getTerms(ir,\"body\"))@@@105@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "IndexWriter writer = new IndexWriter(dir,conf)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "assertThat(corrections(3(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>xorr</em> the got jewel\"))@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "spellchecker.setMinPrefix(1)@@@98@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "mapping.put(\"body_reverse\",new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer t = new StandardTokenizer()return new TokenStreamComponents(t,new ReverseStringFilter(new LowerCaseFilter(t)))}})@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Document doc = new Document()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "assertThat(corrections(1(.join(space,preTag,postTag).utf8ToString(),equalTo(\"xor <em>the god</em> jewel\"))@@@78@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "Result result = suggester.getCorrections(wrapper,new BytesRef(\"american ame\"),generator,1,1,ir,\"body\",wordScorer,1,2)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertThat(corrections(1(.join(space).utf8ToString(),equalTo(\"xor the god jewel\"))@@@74@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "suggester = new NoisyChannelSpellChecker(0.85)@@@100@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "String(( strings = new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@149c13e@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "corrections = suggester.getCorrections(analyzer,new BytesRef(\"captian usa\"),generator,2,4,ir,\"body\",wordScorer,1,2).corrections@@@102@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "generator = new MultiCandidateGeneratorWrapper(5,forward,reverse)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Xor the Got-Jewel\"),generator,0.5f,4,ir,\"body\",wordScorer,0,2).corrections@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "assertThat(corrections.length,equalTo(4))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "assertThat(corrections(0(.join(space).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "DirectCandidateGenerator forward = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_ALWAYS,ir,0.95,10)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "spellchecker.setMinQueryLength(1)@@@99@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "DirectCandidateGenerator reverse = new DirectCandidateGenerator(spellchecker,\"body_reverse\",SuggestMode.SUGGEST_ALWAYS,ir,0.95,10,wrapper,wrapper,MultiTerms.getTerms(ir,\"body_reverse\"))@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13->46 [style = solid, label="wrapper"];
15->14 [style = solid, label="corrections"];
27->38 [style = bold, label=""];
45->56 [style = dashed, label="0"];
37->28 [style = bold, label=""];
50->18 [style = solid, label="reverse"];
56->100 [style = solid, label="generator"];
1->15 [style = dashed, label="0"];
4->86 [style = dashed, label="0"];
10->19 [style = bold, label=""];
20->0 [style = bold, label=""];
73->100 [style = bold, label=""];
86->75 [style = bold, label=""];
21->8 [style = bold, label=""];
45->33 [style = bold, label=""];
37->42 [style = solid, label="ir"];
13->15 [style = solid, label="wrapper"];
33->50 [style = dashed, label="0"];
40->46 [style = solid, label="corrections"];
37->79 [style = bold, label=""];
37->73 [style = solid, label="ir"];
9->35 [style = bold, label=""];
100->107 [style = bold, label=""];
37->26 [style = solid, label="ir"];
80->105 [style = solid, label="wordScorer"];
3->27 [style = bold, label=""];
65->90 [style = bold, label=""];
45->15 [style = solid, label="forward"];
51->15 [style = solid, label="wordScorer"];
54->96 [style = bold, label=""];
71->67 [style = bold, label=""];
51->14 [style = solid, label="wordScorer"];
55->57 [style = bold, label=""];
13->105 [style = solid, label="wrapper"];
32->45 [style = solid, label="spellchecker"];
37->12 [style = solid, label="ir"];
63->99 [style = bold, label=""];
83->69 [style = bold, label=""];
9->76 [style = dashed, label="0"];
33->18 [style = bold, label=""];
34->2 [style = bold, label=""];
8->21 [style = solid, label="doc"];
57->78 [style = bold, label=""];
103->97 [style = bold, label=""];
94->70 [style = bold, label=""];
13->89 [style = solid, label="wrapper"];
6->41 [style = bold, label=""];
97->83 [style = bold, label=""];
43->29 [style = bold, label=""];
40->24 [style = bold, label=""];
82->52 [style = bold, label=""];
66->60 [style = bold, label=""];
56->98 [style = solid, label="generator"];
28->15 [style = solid, label="wordScorer"];
5->82 [style = dashed, label="0"];
101->64 [style = solid, label="corrections"];
28->26 [style = solid, label="wordScorer"];
14->40 [style = solid, label="corrections"];
33->7 [style = solid, label="reverse"];
37->17 [style = solid, label="ir"];
15->95 [style = bold, label=""];
69->104 [style = bold, label=""];
58->11 [style = bold, label=""];
37->106 [style = solid, label="ir"];
52->85 [style = bold, label=""];
10->57 [style = solid, label="t"];
37->83 [style = solid, label="ir"];
87->61 [style = bold, label=""];
37->45 [style = solid, label="ir"];
98->110 [style = bold, label=""];
22->46 [style = bold, label=""];
110->59 [style = bold, label=""];
107->53 [style = bold, label=""];
8->23 [style = bold, label=""];
37->98 [style = solid, label="ir"];
68->76 [style = bold, label=""];
90->77 [style = bold, label=""];
7->17 [style = solid, label="generator"];
50->18 [style = bold, label=""];
62->89 [style = bold, label=""];
35->102 [style = bold, label=""];
36->99 [style = dashed, label="0"];
13->64 [style = solid, label="wrapper"];
16->32 [style = bold, label=""];
11->43 [style = bold, label=""];
0->21 [style = bold, label=""];
56->64 [style = solid, label="generator"];
51->16 [style = bold, label=""];
25->7 [style = bold, label=""];
78->66 [style = bold, label=""];
28->14 [style = solid, label="wordScorer"];
13->50 [style = solid, label="wrapper"];
31->11 [style = bold, label=""];
60->74 [style = bold, label=""];
64->70 [style = solid, label="corrections"];
72->103 [style = bold, label=""];
13->26 [style = solid, label="wrapper"];
21->37 [style = bold, label=""];
13->98 [style = solid, label="wrapper"];
57->71 [style = solid, label="analyzer"];
13->33 [style = solid, label="wrapper"];
85->93 [style = bold, label=""];
19->13 [style = bold, label=""];
91->108 [style = bold, label=""];
17->39 [style = bold, label=""];
10->19 [style = solid, label="t"];
89->101 [style = bold, label=""];
102->81 [style = bold, label=""];
32->48 [style = bold, label=""];
7->14 [style = solid, label="generator"];
37->97 [style = solid, label="ir"];
32->56 [style = solid, label="spellchecker"];
59->44 [style = bold, label=""];
70->105 [style = solid, label="corrections"];
37->51 [style = solid, label="ir"];
13->42 [style = solid, label="wrapper"];
108->54 [style = bold, label=""];
73->67 [style = solid, label="wordScorer"];
45->7 [style = solid, label="forward"];
23->20 [style = bold, label=""];
4->14 [style = bold, label=""];
7->17 [style = bold, label=""];
37->79 [style = solid, label="ir"];
76->35 [style = bold, label=""];
75->106 [style = bold, label=""];
77->94 [style = bold, label=""];
106->64 [style = bold, label=""];
18->26 [style = bold, label=""];
37->46 [style = solid, label="ir"];
93->80 [style = bold, label=""];
105->100 [style = solid, label="corrections"];
80->105 [style = bold, label=""];
61->91 [style = bold, label=""];
32->33 [style = solid, label="spellchecker"];
37->100 [style = solid, label="ir"];
23->0 [style = bold, label=""];
67->72 [style = bold, label=""];
51->17 [style = solid, label="wordScorer"];
28->51 [style = dashed, label="0"];
13->17 [style = solid, label="wrapper"];
43->13 [style = solid, label="mapping"];
28->12 [style = solid, label="wordScorer"];
28->40 [style = solid, label="wordScorer"];
67->83 [style = solid, label="corrections"];
7->40 [style = solid, label="generator"];
32->71 [style = solid, label="spellchecker"];
106->64 [style = solid, label="wordScorer"];
28->79 [style = dashed, label="0"];
96->109 [style = bold, label=""];
51->42 [style = solid, label="wordScorer"];
7->42 [style = solid, label="generator"];
30->12 [style = bold, label=""];
37->40 [style = solid, label="ir"];
37->71 [style = solid, label="ir"];
79->98 [style = solid, label="wordScorer"];
109->55 [style = bold, label=""];
81->65 [style = bold, label=""];
26->44 [style = bold, label=""];
10->13 [style = bold, label=""];
71->67 [style = solid, label="generator"];
101->84 [style = bold, label=""];
3->27 [style = solid, label="conf"];
51->46 [style = solid, label="wordScorer"];
37->70 [style = solid, label="ir"];
57->97 [style = solid, label="analyzer"];
17->15 [style = solid, label="corrections"];
37->50 [style = solid, label="ir"];
32->97 [style = solid, label="spellchecker"];
29->10 [style = bold, label=""];
44->25 [style = bold, label=""];
39->1 [style = bold, label=""];
36->5 [style = bold, label=""];
13->3 [style = solid, label="wrapper"];
12->42 [style = solid, label="corrections"];
38->8 [style = bold, label=""];
37->56 [style = solid, label="ir"];
13->40 [style = solid, label="wrapper"];
37->80 [style = solid, label="ir"];
73->100 [style = solid, label="wordScorer"];
49->11 [style = bold, label=""];
25->44 [style = dashed, label="0"];
79->89 [style = solid, label="wordScorer"];
24->9 [style = bold, label=""];
88->87 [style = bold, label=""];
105->88 [style = bold, label=""];
92->62 [style = bold, label=""];
28->46 [style = solid, label="wordScorer"];
97->83 [style = solid, label="generator"];
79->16 [style = bold, label=""];
48->56 [style = bold, label=""];
95->86 [style = bold, label=""];
28->17 [style = solid, label="wordScorer"];
37->64 [style = solid, label="ir"];
73->83 [style = solid, label="wordScorer"];
37->51 [style = bold, label=""];
51->12 [style = solid, label="wordScorer"];
6->94 [style = dashed, label="0"];
35->22 [style = bold, label=""];
1->15 [style = bold, label=""];
37->89 [style = solid, label="ir"];
11->27 [style = solid, label="dir"];
74->73 [style = bold, label=""];
51->40 [style = solid, label="wordScorer"];
13->70 [style = solid, label="wrapper"];
70->63 [style = bold, label=""];
45->18 [style = solid, label="forward"];
14->34 [style = bold, label=""];
37->15 [style = solid, label="ir"];
56->89 [style = solid, label="generator"];
2->40 [style = bold, label=""];
13->12 [style = solid, label="wrapper"];
42->36 [style = bold, label=""];
56->98 [style = bold, label=""];
13->14 [style = solid, label="wrapper"];
37->67 [style = solid, label="ir"];
46->47 [style = bold, label=""];
12->6 [style = bold, label=""];
28->16 [style = bold, label=""];
84->15 [style = bold, label=""];
99->82 [style = bold, label=""];
18->26 [style = solid, label="generator"];
46->12 [style = solid, label="corrections"];
37->105 [style = solid, label="ir"];
7->12 [style = solid, label="generator"];
47->30 [style = bold, label=""];
37->14 [style = solid, label="ir"];
53->71 [style = bold, label=""];
110->101 [style = solid, label="corrections"];
57->100 [style = solid, label="analyzer"];
57->67 [style = solid, label="analyzer"];
48->45 [style = bold, label=""];
29->10 [style = solid, label="t"];
106->70 [style = solid, label="wordScorer"];
13->3 [style = bold, label=""];
27->37 [style = solid, label="writer"];
45->50 [style = bold, label=""];
50->7 [style = solid, label="reverse"];
22->102 [style = dashed, label="0"];
56->105 [style = solid, label="generator"];
33->18 [style = solid, label="reverse"];
64->68 [style = bold, label=""];
15->4 [style = bold, label=""];
26->17 [style = solid, label="corrections"];
32->50 [style = solid, label="spellchecker"];
28->42 [style = solid, label="wordScorer"];
57->83 [style = solid, label="analyzer"];
51->26 [style = solid, label="wordScorer"];
47->65 [style = dashed, label="0"];
44->92 [style = bold, label=""];
37->28 [style = solid, label="ir"];
7->46 [style = solid, label="generator"];
100->67 [style = solid, label="corrections"];
30->90 [style = dashed, label="0"];
56->70 [style = solid, label="generator"];
37->33 [style = solid, label="ir"];
41->42 [style = bold, label=""];
}
