digraph {
15 [style = filled, label = "assertEquals(new TimeWindow(5,8),windowSet.getStateWindow(new TimeWindow(5,8)))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(new TimeWindow(10,13),windowSet.addWindow(new TimeWindow(10,13),mergeFunction))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertFalse(mergeFunction.hasMerged())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(new TimeWindow(5,8),windowSet.addWindow(new TimeWindow(5,8),mergeFunction))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(new TimeWindow(1,2),windowSet.getStateWindow(new TimeWindow(0,3)))@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertFalse(mergeFunction.hasMerged())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(new TimeWindow(1,3),windowSet.getStateWindow(new TimeWindow(1,3)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "mergeFunction.reset()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testMergeLargeWindowCoveringSingleWindow['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "@SuppressWarnings(\"unchecked\") ListState<Tuple2<TimeWindow,TimeWindow>> mockState = mock()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertEquals(new TimeWindow(0,13),windowSet.addWindow(new TimeWindow(0,13),mergeFunction))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TestingMergeFunction mergeFunction = new TestingMergeFunction()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)),mockState)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertFalse(mergeFunction.hasMerged())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertFalse(mergeFunction.hasMerged())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(new TimeWindow(10,13),windowSet.getStateWindow(new TimeWindow(10,13)))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(windowSet.getStateWindow(new TimeWindow(0,13)),anyOf(is(new TimeWindow(1,3)),is(new TimeWindow(5,8)),is(new TimeWindow(10,13))))@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testMergeLargeWindowCoveringMultipleWindows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(new TimeWindow(0,3),windowSet.addWindow(new TimeWindow(0,3),mergeFunction))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(mergeFunction.hasMerged())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "mergeFunction.reset()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testMergeLargeWindowCoveringSingleWindow['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "mergeFunction.reset()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(mergeFunction.hasMerged())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(new TimeWindow(1,3),windowSet.addWindow(new TimeWindow(1,3),mergeFunction))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "mergeFunction.reset()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "mergeFunction.reset()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(mergeFunction.mergedStateWindows(),anyOf(containsInAnyOrder(new TimeWindow(0,3),new TimeWindow(5,8)),containsInAnyOrder(new TimeWindow(0,3),new TimeWindow(10,13)),containsInAnyOrder(new TimeWindow(5,8),new TimeWindow(10,13))))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "mergeFunction.reset()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
6->3 [style = bold, label=""];
27->18 [style = bold, label=""];
8->19 [style = dashed, label="0"];
2->5 [style = bold, label=""];
25->1 [style = bold, label=""];
28->15 [style = bold, label=""];
21->19 [style = bold, label=""];
2->6 [style = solid, label="mergeFunction"];
6->23 [style = bold, label=""];
0->2 [style = bold, label=""];
0->22 [style = solid, label="mergeFunction"];
23->4 [style = bold, label=""];
18->17 [style = bold, label=""];
12->13 [style = solid, label="mockState"];
4->29 [style = bold, label=""];
1->0 [style = bold, label=""];
0->27 [style = solid, label="mergeFunction"];
10->29 [style = dashed, label="0"];
7->8 [style = bold, label=""];
2->7 [style = solid, label="mergeFunction"];
3->4 [style = bold, label=""];
10->7 [style = bold, label=""];
15->26 [style = bold, label=""];
19->24 [style = bold, label=""];
0->10 [style = solid, label="mergeFunction"];
29->28 [style = bold, label=""];
3->23 [style = dashed, label="0"];
12->13 [style = bold, label=""];
26->27 [style = bold, label=""];
20->16 [style = bold, label=""];
5->6 [style = bold, label=""];
16->21 [style = bold, label=""];
14->12 [style = bold, label=""];
17->20 [style = bold, label=""];
5->22 [style = dashed, label="0"];
0->5 [style = solid, label="mergeFunction"];
9->1 [style = bold, label=""];
2->22 [style = bold, label=""];
8->11 [style = bold, label=""];
0->29 [style = solid, label="mergeFunction"];
22->6 [style = bold, label=""];
13->2 [style = bold, label=""];
0->16 [style = solid, label="mergeFunction"];
}
