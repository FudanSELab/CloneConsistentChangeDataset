digraph {
26 [style = filled, label = "final DistributedQueue queueHandles = new DistributedQueue((((@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final int num_clients = 1@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(takeResult(0( != null)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testRemove1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final String testString = \"Hello World\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "queueHandles(i( = new DistributedQueue(clients(i(,dir,null)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "queueHandles(0(.remove()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "clients(i( = createClient()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "takeThread.join()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testTakeWait1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "takeThread.start()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Thread takeThread = new Thread(){public void run(){try {takeResult(0( = queueHandles(0(.take()}catch (KeeperException e) catch (InterruptedException e) }}@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "i++@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "String dir = \"/testTakeWait1\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "int i = 0@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DistributedQueue(( queueHandles = new DistributedQueue((((@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "return@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String testString = \"Hello World\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ZooKeeper clients = new ZooKeeper((((@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "i < clients.length@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(new String(takeResult(0(),testString)@@@45@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String dir = \"/testRemove1\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "offerThread.start()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "NoSuchElementException e@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ZooKeeper(( clients = new ZooKeeper((((@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Thread.sleep(1000)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final byte(( takeResult = new byte((((((@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testRemove1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "DistributedQueue queueHandles = new DistributedQueue((((@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "Thread offerThread = new Thread(){public void run(){try {queueHandles(0(.offer(testString.getBytes())}catch (KeeperException e) catch (InterruptedException e) }}@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "offerThread.join()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final ZooKeeper clients = new ZooKeeper((((@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(false)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9->22 [style = bold, label=""];
0->3 [style = bold, label=""];
17->8 [style = bold, label=""];
18->31 [style = bold, label=""];
12->9 [style = solid, label="i"];
16->0 [style = bold, label=""];
9->12 [style = dotted, label="true"];
10->6 [style = dotted, label="true"];
3->28 [style = dashed, label="0"];
1->8 [style = bold, label=""];
11->20 [style = dashed, label="0"];
14->13 [style = solid, label="clients"];
11->1 [style = bold, label=""];
11->15 [style = dashed, label="0"];
20->26 [style = bold, label=""];
1->26 [style = dashed, label="0"];
0->13 [style = solid, label="dir"];
4->15 [style = bold, label=""];
24->32 [style = bold, label=""];
29->13 [style = solid, label="dir"];
26->8 [style = bold, label=""];
31->21 [style = bold, label=""];
21->25 [style = bold, label=""];
28->23 [style = solid, label="testString"];
9->7 [style = bold, label=""];
12->9 [style = bold, label=""];
32->30 [style = bold, label=""];
8->9 [style = solid, label="i"];
3->4 [style = bold, label=""];
10->6 [style = bold, label=""];
9->14 [style = dotted, label="true"];
13->12 [style = solid, label="i"];
6->2 [style = bold, label=""];
29->28 [style = bold, label=""];
22->19 [style = solid, label="takeResult"];
25->24 [style = bold, label=""];
30->19 [style = bold, label=""];
15->17 [style = bold, label=""];
22->18 [style = bold, label=""];
1->17 [style = dashed, label="0"];
13->12 [style = bold, label=""];
22->23 [style = solid, label="takeResult"];
5->0 [style = bold, label=""];
7->2 [style = bold, label=""];
19->23 [style = bold, label=""];
9->13 [style = dotted, label="true"];
0->29 [style = dashed, label="0"];
4->20 [style = bold, label=""];
8->9 [style = bold, label=""];
9->14 [style = bold, label=""];
14->13 [style = bold, label=""];
27->29 [style = bold, label=""];
4->11 [style = bold, label=""];
28->4 [style = bold, label=""];
}
