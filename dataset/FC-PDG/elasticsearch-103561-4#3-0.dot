digraph {
14 [style = filled, label = "final IndicesService indicesService = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()),new IndexNameExpressionResolver())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final RetentionLeaseBackgroundSyncAction.Request request = new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(),retentionLeases)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final ReplicationOperation.PrimaryResult<RetentionLeaseBackgroundSyncAction.Request> result = action.shardOperationOnPrimary(request,indexShard)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testRetentionLeaseBackgroundSyncActionOnPrimary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(flushRequest.getValue().waitIfOngoing())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(result.replicaRequest(),sameInstance(request))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "when(indexService.getShard(id)).thenReturn(indexShard)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final Index index = new Index(\"index\",\"uuid\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()),new IndexNameExpressionResolver())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testRetentionLeaseSyncActionOnPrimary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final TransportWriteAction.WritePrimaryResult<RetentionLeaseSyncAction.Request,RetentionLeaseSyncAction.Response> result = action.shardOperationOnPrimary(request,indexShard)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final IndexShard indexShard = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(flushRequest.getValue().force())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "verify(indexShard).persistRetentionLeases()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testRetentionLeaseBackgroundSyncActionOnPrimary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertNull(result.finalResponseIfSuccessful.getShardInfo())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final ShardId shardId = new ShardId(index,id)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final ArgumentCaptor<FlushRequest> flushRequest = ArgumentCaptor.forClass()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "when(indexShard.shardId()).thenReturn(shardId)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final RetentionLeases retentionLeases = mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final RetentionLeaseSyncAction.Request request = new RetentionLeaseSyncAction.Request(indexShard.shardId(),retentionLeases)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final int id = randomIntBetween(0,4)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(indicesService.indexServiceSafe(index)).thenReturn(indexService)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(result.replicaRequest(),sameInstance(request))@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(indexShard).afterWriteOperation()@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "verify(indexShard).flush(flushRequest.capture())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final IndexService indexService = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->10 [style = bold, label=""];
8->10 [style = bold, label=""];
23->25 [style = bold, label=""];
18->24 [style = bold, label=""];
7->1 [style = bold, label=""];
27->14 [style = bold, label=""];
12->15 [style = solid, label="index"];
7->20 [style = dashed, label="0"];
0->11 [style = bold, label=""];
20->1 [style = bold, label=""];
12->0 [style = bold, label=""];
4->7 [style = bold, label=""];
1->9 [style = bold, label=""];
6->15 [style = bold, label=""];
15->4 [style = solid, label="shardId"];
14->20 [style = solid, label="indicesService"];
19->25 [style = solid, label="request"];
9->19 [style = dashed, label="0"];
14->7 [style = solid, label="indicesService"];
9->13 [style = solid, label="request"];
13->17 [style = bold, label=""];
3->5 [style = bold, label=""];
22->18 [style = bold, label=""];
3->15 [style = solid, label="id"];
5->6 [style = solid, label="indexShard"];
13->21 [style = dashed, label="0"];
5->6 [style = bold, label=""];
11->3 [style = bold, label=""];
21->22 [style = bold, label=""];
14->12 [style = bold, label=""];
2->14 [style = bold, label=""];
25->26 [style = bold, label=""];
1->19 [style = solid, label="retentionLeases"];
4->20 [style = bold, label=""];
15->4 [style = bold, label=""];
15->19 [style = solid, label="shardId"];
16->14 [style = bold, label=""];
9->10 [style = solid, label="request"];
8->17 [style = dashed, label="0"];
5->13 [style = solid, label="indexShard"];
0->11 [style = solid, label="indexService"];
19->21 [style = solid, label="request"];
13->8 [style = bold, label=""];
1->19 [style = bold, label=""];
1->9 [style = solid, label="retentionLeases"];
15->9 [style = solid, label="shardId"];
5->21 [style = solid, label="indexShard"];
9->13 [style = bold, label=""];
24->23 [style = bold, label=""];
19->21 [style = bold, label=""];
}
