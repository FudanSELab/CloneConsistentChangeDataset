digraph {
28 [style = filled, label = "assertTrue(Arrays.equals(\"junit\".toCharArray(),a),\"toCharArray(int,int) result does not match\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "testToCharArrayIntInt['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final IndexOutOfBoundsException e@@@21@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "a = sb.toCharArray(0,1)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testToCharArrayIntInt['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final IndexOutOfBoundsException e@@@21@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "char(( a = sb.toCharArray(0,20)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"toCharArray(int,int) result incorrect length\",4,a.length)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "sb.toCharArray(-1,5)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(\"toCharArray(int,int) result does not match\",Arrays.equals(\"juni\".toCharArray(),a))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final IndexOutOfBoundsException e@@@21@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "a = sb.toCharArray(0,4)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertNotNull(\"toCharArray(int,int) result is null\",a)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"toCharArray(int,int) result incorrect length\",5,a.length)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final StrBuilder sb = new StrBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(\"toCharArray(int,int) result does not match\",Arrays.equals(\"junit\".toCharArray(),a))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final TextStringBuilder sb = new TextStringBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(Arrays.equals(\"juni\".toCharArray(),a),\"toCharArray(int,int) result does not match\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertTrue(Arrays.equals(\"juni\".toCharArray(),a),\"toCharArray(int,int) result does not match\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertTrue(\"toCharArray(int,int) result does not match\",Arrays.equals(\"juni\".toCharArray(),a))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testToCharArrayIntInt['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertEquals(5,a.length,\"toCharArray(int,int) result incorrect length\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertEquals(4,a.length,\"toCharArray(int,int) result incorrect length\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "fail(\"no string index out of bound on -1\")@@@25@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(4,a.length,\"toCharArray(int,int) result incorrect length\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(\"toCharArray(int,int) result incorrect length\",4,a.length)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(0,sb.toCharArray(0,0).length)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "fail(\"no string index out of bound on -1\")@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "a = sb.toCharArray(0,4)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "sb.toCharArray(6,5)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "sb.append(\"junit\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "{}@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertNotNull(a,\"toCharArray(int,int) result is null\")@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->29 [style = bold, label=""];
1->23 [style = solid, label="a"];
18->3 [style = bold, label=""];
15->2 [style = bold, label=""];
8->15 [style = bold, label=""];
3->24 [style = bold, label=""];
25->23 [style = bold, label=""];
27->9 [style = bold, label=""];
3->6 [style = bold, label=""];
9->17 [style = bold, label=""];
30->32 [style = bold, label=""];
12->8 [style = solid, label="a"];
20->31 [style = bold, label=""];
16->23 [style = dashed, label="0"];
12->26 [style = bold, label=""];
5->14 [style = bold, label=""];
13->25 [style = dashed, label="0"];
4->21 [style = dashed, label="0"];
1->13 [style = bold, label=""];
17->19 [style = bold, label=""];
13->16 [style = bold, label=""];
31->11 [style = bold, label=""];
9->32 [style = dashed, label="0"];
29->28 [style = bold, label=""];
7->9 [style = bold, label=""];
19->5 [style = bold, label=""];
6->4 [style = bold, label=""];
12->26 [style = solid, label="a"];
22->20 [style = bold, label=""];
24->21 [style = bold, label=""];
11->10 [style = bold, label=""];
12->8 [style = bold, label=""];
6->24 [style = dashed, label="0"];
21->1 [style = bold, label=""];
26->15 [style = bold, label=""];
3->4 [style = solid, label="a"];
18->28 [style = dashed, label="0"];
14->18 [style = bold, label=""];
0->20 [style = bold, label=""];
4->1 [style = bold, label=""];
23->12 [style = bold, label=""];
28->3 [style = bold, label=""];
5->28 [style = solid, label="a"];
5->18 [style = solid, label="a"];
14->29 [style = dashed, label="0"];
16->12 [style = bold, label=""];
1->25 [style = bold, label=""];
2->11 [style = bold, label=""];
32->17 [style = bold, label=""];
3->21 [style = solid, label="a"];
1->16 [style = solid, label="a"];
20->11 [style = bold, label=""];
8->26 [style = dashed, label="0"];
}
