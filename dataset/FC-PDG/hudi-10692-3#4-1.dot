digraph {
3 [style = filled, label = "HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(compositeKeyGenerator.getPartitionPathFields().size(),1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "HoodieKey hoodieKey = compositeKeyGenerator.getKey(record)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY,\"timestamp\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "String rowKey = \"timestamp\" + ComplexAvroKeyGenerator.DEFAULT_RECORD_KEY_SEPARATOR + record.get(\"timestamp\").toString() + \",\" + \"driver\" + ComplexAvroKeyGenerator.DEFAULT_RECORD_KEY_SEPARATOR + record.get(\"driver\").toString()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testSingleValueKeyGenerator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testSingleValueKeyGenerator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "TypedProperties properties = new TypedProperties()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(keyGenerator.getPartitionPathFields().size(),0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY,\"_row_key\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(partitionPath,hoodieKey.getPartitionPath())@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testMultipleValueKeyGeneratorNonPartitioned1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "String partitionPath = \"\"@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(rowKey,hoodieKey.getRecordKey())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(),\"timestamp\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "GenericRecord record = dataGenerator.generateGenericRecords(1).get(0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"_row_key:\" + rowKey,hoodieKey.getRecordKey())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(),\"_row_key\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "HoodieKey hoodieKey = keyGenerator.getKey(record)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY,\"\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String partitionPath = record.get(\"timestamp\").toString()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(keyGenerator.getRecordKeyFields().size(),2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY,\"timestamp,driver\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String rowKey = record.get(\"_row_key\").toString()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(compositeKeyGenerator.getRecordKeyFields().size(),1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
16->15 [style = bold, label=""];
15->10 [style = bold, label=""];
12->9 [style = solid, label="rowKey"];
12->20 [style = dashed, label="0"];
13->17 [style = solid, label="properties"];
11->1 [style = bold, label=""];
26->5 [style = bold, label=""];
4->21 [style = solid, label="record"];
0->2 [style = bold, label=""];
25->3 [style = bold, label=""];
12->11 [style = bold, label=""];
0->16 [style = dashed, label="0"];
20->26 [style = solid, label="rowKey"];
11->23 [style = dashed, label="0"];
1->21 [style = dashed, label="0"];
2->10 [style = bold, label=""];
10->7 [style = bold, label=""];
3->4 [style = bold, label=""];
13->16 [style = bold, label=""];
17->19 [style = bold, label=""];
0->22 [style = dashed, label="0"];
1->9 [style = bold, label=""];
19->25 [style = bold, label=""];
13->10 [style = solid, label="properties"];
23->5 [style = solid, label="partitionPath"];
2->15 [style = dashed, label="0"];
4->1 [style = solid, label="record"];
21->26 [style = bold, label=""];
20->23 [style = bold, label=""];
6->25 [style = dashed, label="0"];
23->21 [style = bold, label=""];
7->19 [style = dashed, label="0"];
7->6 [style = bold, label=""];
24->17 [style = bold, label=""];
4->20 [style = bold, label=""];
10->17 [style = dashed, label="0"];
18->13 [style = bold, label=""];
9->26 [style = dashed, label="0"];
9->5 [style = bold, label=""];
4->12 [style = bold, label=""];
11->5 [style = solid, label="partitionPath"];
13->22 [style = bold, label=""];
14->13 [style = bold, label=""];
22->24 [style = bold, label=""];
2->24 [style = dashed, label="0"];
8->13 [style = bold, label=""];
13->0 [style = bold, label=""];
}
