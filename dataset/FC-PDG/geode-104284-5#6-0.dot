digraph {
10 [style = filled, label = "assertThat(locatorState.getJvmArguments()).isEqualTo(ManagementFactory.getRuntimeMXBean().getInputArguments())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertThat(locatorState.getUptime().intValue()).isEqualTo(0)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(locatorState.getHost()).isEqualTo(getLocalHost().getCanonicalHostName())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(locatorState.getStatus()).isEqualTo(NOT_RESPONDING)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "LocatorState locatorState = new Builder().setWorkingDirectory(getWorkingDirectoryPath()).build().status()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(locatorState.getHost()).isEqualTo(InetAddress.getLocalHost().getCanonicalHostName())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "statusWithEmptyWorkingDirectoryReturnsNotRespondingWithDetails['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "statusWithEmptyWorkingDirectoryReturnsNotRespondingWithDetails['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(locatorState.getHost()).isEqualTo(SocketCreator.getLocalHost().getCanonicalHostName())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(locatorState.getJavaVersion()).isEqualTo(System.getProperty(\"java.version\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "givenEmptyWorkingDirectory()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "statusWithEmptyWorkingDirectoryReturnsNotRespondingWithDetails['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "LocatorState locatorState = new Builder().setWorkingDirectory(getWorkingDirectoryPath()).build().status()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertThat(locatorState.getWorkingDirectory()).isEqualTo(getWorkingDirectoryPath())@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(locatorState.getPid()).isNull()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(locatorState.getClasspath()).isNull()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(locatorState.getJvmArguments()).isEqualTo(getRuntimeMXBean().getInputArguments())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(locatorState.getMemberName()).isNull()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(locatorState.getGemFireVersion()).isEqualTo(GemFireVersion.getGemFireVersion())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(locatorState.getLogFile()).isNull()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->6 [style = bold, label=""];
0->6 [style = bold, label=""];
0->17 [style = bold, label=""];
5->14 [style = bold, label=""];
9->7 [style = bold, label=""];
12->9 [style = bold, label=""];
10->6 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
19->0 [style = bold, label=""];
13->14 [style = dashed, label="0"];
3->19 [style = dashed, label="0"];
8->1 [style = bold, label=""];
6->4 [style = bold, label=""];
11->5 [style = bold, label=""];
0->10 [style = bold, label=""];
13->12 [style = bold, label=""];
18->5 [style = bold, label=""];
15->0 [style = bold, label=""];
14->12 [style = bold, label=""];
5->13 [style = bold, label=""];
10->17 [style = dashed, label="0"];
16->5 [style = bold, label=""];
3->15 [style = dashed, label="0"];
4->8 [style = bold, label=""];
7->15 [style = bold, label=""];
1->2 [style = bold, label=""];
7->19 [style = bold, label=""];
}
