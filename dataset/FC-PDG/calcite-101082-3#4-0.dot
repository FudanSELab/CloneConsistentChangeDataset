digraph {
27 [style = filled, label = "f.checkNotImplies(node1,node3)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "final RexNode node3 = f.ge(f.i,f.literal(30))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "checkImplies(node2,node1)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "checkNotImplies(node1,node6)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "f.checkNotImplies(node1,node2)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "f.checkImplies(node3,node1)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "RexNode node1 = rexBuilder.makeCall(SqlStdOperatorTable.GREATER_THAN,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "checkImplies(node5,node1)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "f.checkNotImplies(node1,node6)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "RexNode node4 = rexBuilder.makeCall(SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "checkNotImplies(node1,node2)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "testSimpleEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "RexNode node6 = rexBuilder.makeCall(SqlStdOperatorTable.NOT_EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "checkNotImplies(node1,node3)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "RexNode node2 = rexBuilder.makeCall(SqlStdOperatorTable.NOT_EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "RexNode node2 = rexBuilder.makeCall(SqlStdOperatorTable.GREATER_THAN,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "f.checkNotImplies(node4,node6)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "checkImplies(node1,node1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "RexNode node1 = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final Fixture f = new Fixture()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testSimpleGreaterCond['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "checkNotImplies(node1,node5)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "f.checkNotImplies(node1,node5)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "final RexNode node5 = f.eq(f.i,f.literal(30))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "final RexNode node4 = f.ge(f.i,f.literal(10))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "checkImplies(node1,node2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "RexNode node3 = rexBuilder.makeCall(SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final RexNode node2 = f.gt(f.i,f.literal(30))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "RexNode node5 = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testSimpleGreaterCond['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "checkNotImplies(node4,node6)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "final RexNode node6 = f.ne(f.i,f.literal(10))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "checkImplies(node3,node1)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "f.checkImplies(node2,node1)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "checkNotImplies(node2,node1)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "f.checkImplies(node5,node1)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "final RexNode node1 = f.gt(f.i,f.literal(10))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7->13 [style = bold, label=""];
5->3 [style = bold, label=""];
4->9 [style = bold, label=""];
18->30 [style = solid, label="node4"];
8->10 [style = bold, label=""];
15->23 [style = bold, label=""];
23->17 [style = solid, label="node1"];
22->15 [style = bold, label=""];
28->18 [style = bold, label=""];
12->5 [style = bold, label=""];
20->30 [style = solid, label="node6"];
9->7 [style = solid, label="node1"];
29->30 [style = bold, label=""];
9->12 [style = solid, label="node1"];
23->24 [style = solid, label="node1"];
3->21 [style = dashed, label="0"];
2->1 [style = bold, label=""];
19->29 [style = bold, label=""];
9->5 [style = solid, label="node1"];
35->33 [style = bold, label=""];
23->26 [style = bold, label=""];
14->12 [style = solid, label="node3"];
26->24 [style = solid, label="node2"];
23->19 [style = solid, label="node1"];
12->17 [style = dashed, label="0"];
9->2 [style = solid, label="node1"];
20->29 [style = solid, label="node6"];
26->17 [style = solid, label="node2"];
21->25 [style = bold, label=""];
11->13 [style = solid, label="node6"];
6->1 [style = solid, label="node2"];
28->27 [style = solid, label="node3"];
13->19 [style = dashed, label="0"];
6->33 [style = dashed, label="0"];
11->2 [style = bold, label=""];
9->13 [style = solid, label="node1"];
11->0 [style = solid, label="node6"];
16->25 [style = solid, label="node5"];
9->6 [style = bold, label=""];
10->3 [style = solid, label="node5"];
33->32 [style = solid, label="node2"];
9->35 [style = dashed, label="0"];
14->5 [style = solid, label="node3"];
6->14 [style = bold, label=""];
5->27 [style = dashed, label="0"];
9->3 [style = solid, label="node1"];
31->35 [style = bold, label=""];
9->1 [style = solid, label="node1"];
3->7 [style = bold, label=""];
10->7 [style = solid, label="node5"];
1->24 [style = dashed, label="0"];
6->2 [style = solid, label="node2"];
33->36 [style = bold, label=""];
35->36 [style = solid, label="node1"];
8->0 [style = solid, label="node4"];
24->17 [style = bold, label=""];
25->19 [style = bold, label=""];
0->29 [style = dashed, label="0"];
1->12 [style = bold, label=""];
7->25 [style = dashed, label="0"];
23->27 [style = solid, label="node1"];
23->29 [style = solid, label="node1"];
34->32 [style = bold, label=""];
14->8 [style = bold, label=""];
35->32 [style = solid, label="node1"];
33->34 [style = solid, label="node2"];
26->28 [style = bold, label=""];
23->25 [style = solid, label="node1"];
17->27 [style = bold, label=""];
28->21 [style = solid, label="node3"];
20->24 [style = bold, label=""];
16->20 [style = bold, label=""];
27->21 [style = bold, label=""];
16->19 [style = solid, label="node5"];
36->34 [style = bold, label=""];
23->21 [style = solid, label="node1"];
35->34 [style = solid, label="node1"];
13->0 [style = bold, label=""];
10->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
