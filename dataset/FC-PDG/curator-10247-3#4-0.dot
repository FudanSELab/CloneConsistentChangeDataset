digraph {
22 [style = filled, label = "Assert.assertNotNull(lease)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testInterruptAcquire['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Lease lease = s1.acquire(timing.forWaiting().seconds(),TimeUnit.SECONDS)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testSimple['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertTrue(timing.awaitLatch(debugWaitLatch))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Timing timing = new Timing()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertNull(semaphore.acquire(timing.forWaiting().seconds(),TimeUnit.SECONDS))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "final InterProcessSemaphoreV2 s2 = new InterProcessSemaphoreV2(client,\"/test\",1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final InterProcessSemaphoreV2 s3 = new InterProcessSemaphoreV2(client,\"/test\",1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final CountDownLatch debugWaitLatch = s2.debugWaitLatch = new CountDownLatch(1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Future<Object> handle = Executors.newSingleThreadExecutor().submit(new Callable<Object>(){@Override public Object call(){s2.acquire()return null}})@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "InterProcessSemaphoreV2 semaphore = new InterProcessSemaphoreV2(client,\"/test\",1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "{TestCleanState.closeAndTestClean(client)}@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "s1.returnLease(lease)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "handle.cancel(true)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testSimple['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertNotNull(s3.acquire(timing.forWaiting().seconds(),TimeUnit.SECONDS))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final InterProcessSemaphoreV2 s1 = new InterProcessSemaphoreV2(client,\"/test\",1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertNotNull(semaphore.acquire(timing.forWaiting().seconds(),TimeUnit.SECONDS))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "client.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "timing.sleepABit()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "{TestCleanState.closeAndTestClean(client)}@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertNull(semaphore.acquire(timing.forWaiting().seconds(),TimeUnit.SECONDS))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertNotNull(semaphore.acquire(timing.forWaiting().seconds(),TimeUnit.SECONDS))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(client.getChildren().forPath(\"/test/leases\").size(),1)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final Timing timing = new Timing()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->21 [style = dashed, label="0"];
6->3 [style = bold, label=""];
22->25 [style = bold, label=""];
23->13 [style = solid, label="debugWaitLatch"];
25->13 [style = bold, label=""];
4->6 [style = solid, label="client"];
4->17 [style = solid, label="client"];
19->20 [style = bold, label=""];
4->16 [style = solid, label="client"];
18->26 [style = bold, label=""];
15->19 [style = solid, label="lease"];
23->15 [style = bold, label=""];
26->14 [style = bold, label=""];
14->19 [style = bold, label=""];
11->12 [style = bold, label=""];
16->17 [style = bold, label=""];
9->10 [style = bold, label=""];
2->4 [style = bold, label=""];
17->23 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
0->10 [style = dashed, label="0"];
15->22 [style = bold, label=""];
2->12 [style = dashed, label="0"];
4->5 [style = solid, label="client"];
10->5 [style = bold, label=""];
8->2 [style = bold, label=""];
12->4 [style = bold, label=""];
3->9 [style = dashed, label="0"];
7->6 [style = bold, label=""];
21->16 [style = bold, label=""];
7->21 [style = bold, label=""];
4->21 [style = solid, label="client"];
1->2 [style = bold, label=""];
6->9 [style = bold, label=""];
20->24 [style = bold, label=""];
15->22 [style = solid, label="lease"];
13->18 [style = bold, label=""];
0->5 [style = bold, label=""];
4->24 [style = solid, label="client"];
}
