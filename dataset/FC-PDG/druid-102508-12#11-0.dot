digraph {
11 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@57@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@65@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "maxTotalRows = 3L@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int i = 0@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i++@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@43@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "kafkaProducer.initTransactions()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@59@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@58@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testIncrementalHandOffMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@42@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "i < numToAdd@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@41@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@62@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@63@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
67 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@66@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@73@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@63@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,4L,1,2L))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "kafkaProducer.beginTransaction()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "i++@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "Thread.sleep(10)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "insertData()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@62@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
77 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,nextOffsets)))))@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "testIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "kafkaProducer.beginTransaction()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@61@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
73 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "i < records.size()@@@41@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Thread.sleep(10)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@61@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "kafkaProducer.commitTransaction()@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "kafkaProducer.commitTransaction()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "kafkaProducer.initTransactions()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "int i = numToAdd@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L,1,0L))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@60@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets) || checkpoint2.getPartitionSequenceNumberMap().equals(currentOffsets))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28->24 [style = solid, label="desc5"];
47->9 [style = bold, label=""];
19->60 [style = bold, label=""];
46->70 [style = dashed, label="0"];
44->4 [style = solid, label="task"];
35->51 [style = dotted, label="true"];
62->61 [style = bold, label=""];
16->7 [style = bold, label=""];
50->56 [style = bold, label=""];
44->61 [style = solid, label="task"];
26->88 [style = bold, label=""];
55->13 [style = bold, label=""];
56->12 [style = bold, label=""];
85->86 [style = bold, label=""];
15->57 [style = bold, label=""];
66->67 [style = solid, label="desc3"];
0->15 [style = bold, label=""];
54->65 [style = bold, label=""];
53->81 [style = bold, label=""];
76->82 [style = solid, label="task"];
42->17 [style = dotted, label="true"];
28->16 [style = solid, label="desc5"];
43->40 [style = bold, label=""];
44->62 [style = solid, label="task"];
44->64 [style = solid, label="task"];
76->53 [style = solid, label="task"];
37->31 [style = bold, label=""];
17->14 [style = bold, label=""];
38->7 [style = bold, label=""];
40->59 [style = solid, label="desc6"];
66->64 [style = bold, label=""];
69->59 [style = solid, label="desc2"];
62->59 [style = solid, label="desc5"];
21->1 [style = bold, label=""];
43->59 [style = solid, label="desc5"];
65->69 [style = bold, label=""];
61->59 [style = solid, label="desc6"];
25->15 [style = bold, label=""];
2->15 [style = solid, label="numToAdd"];
74->9 [style = bold, label=""];
50->12 [style = dotted, label="true"];
5->30 [style = bold, label=""];
79->76 [style = solid, label="consumerProps"];
31->20 [style = bold, label=""];
44->70 [style = solid, label="task"];
15->57 [style = dotted, label="true"];
58->22 [style = bold, label=""];
24->59 [style = solid, label="desc2"];
58->22 [style = dotted, label="true"];
44->65 [style = solid, label="task"];
64->67 [style = solid, label="desc4"];
46->59 [style = bold, label=""];
81->30 [style = solid, label="desc7"];
11->73 [style = bold, label=""];
82->16 [style = solid, label="desc2"];
0->25 [style = solid, label="i"];
26->16 [style = solid, label="startPartitions"];
44->43 [style = solid, label="task"];
62->21 [style = solid, label="desc5"];
11->16 [style = solid, label="desc3"];
18->59 [style = solid, label="desc1"];
61->67 [style = solid, label="desc6"];
26->32 [style = bold, label=""];
44->46 [style = solid, label="task"];
50->19 [style = bold, label=""];
11->48 [style = bold, label=""];
64->21 [style = solid, label="desc4"];
44->66 [style = solid, label="task"];
69->20 [style = solid, label="desc2"];
6->44 [style = solid, label="consumerProps"];
76->80 [style = bold, label=""];
2->34 [style = bold, label=""];
60->38 [style = solid, label="nextOffsets"];
81->16 [style = solid, label="desc7"];
26->44 [style = solid, label="startPartitions"];
73->24 [style = solid, label="desc4"];
57->25 [style = bold, label=""];
51->35 [style = bold, label=""];
30->21 [style = solid, label="desc4"];
11->18 [style = solid, label="desc3"];
65->59 [style = solid, label="desc1"];
24->5 [style = bold, label=""];
6->52 [style = solid, label="currentOffsets"];
25->15 [style = solid, label="i"];
70->59 [style = solid, label="desc7"];
86->76 [style = solid, label="endPartitions"];
58->39 [style = bold, label=""];
60->55 [style = bold, label=""];
0->15 [style = solid, label="i"];
24->20 [style = solid, label="desc2"];
70->59 [style = bold, label=""];
53->16 [style = solid, label="desc6"];
65->31 [style = solid, label="desc1"];
44->4 [style = bold, label=""];
53->5 [style = solid, label="desc6"];
18->65 [style = dashed, label="0"];
32->84 [style = dashed, label="0"];
83->77 [style = bold, label=""];
14->44 [style = solid, label="baseSequenceName"];
9->44 [style = bold, label=""];
10->0 [style = bold, label=""];
59->63 [style = bold, label=""];
71->42 [style = bold, label=""];
23->74 [style = dashed, label="0"];
51->16 [style = solid, label="desc1"];
76->73 [style = solid, label="task"];
77->83 [style = dotted, label="true"];
75->79 [style = bold, label=""];
61->70 [style = bold, label=""];
64->59 [style = solid, label="desc4"];
76->11 [style = solid, label="task"];
48->28 [style = bold, label=""];
86->76 [style = bold, label=""];
41->50 [style = bold, label=""];
35->51 [style = bold, label=""];
82->11 [style = bold, label=""];
77->6 [style = bold, label=""];
44->69 [style = solid, label="task"];
78->9 [style = solid, label="startPartitions"];
52->26 [style = bold, label=""];
66->36 [style = solid, label="desc3"];
9->44 [style = solid, label="endPartitions"];
18->24 [style = bold, label=""];
5->36 [style = solid, label="desc3"];
1->8 [style = bold, label=""];
30->59 [style = solid, label="desc4"];
79->72 [style = bold, label=""];
30->43 [style = bold, label=""];
78->84 [style = bold, label=""];
70->8 [style = solid, label="desc7"];
6->9 [style = solid, label="currentOffsets"];
47->85 [style = dashed, label="0"];
88->74 [style = bold, label=""];
59->37 [style = bold, label=""];
3->42 [style = bold, label=""];
42->14 [style = bold, label=""];
41->50 [style = solid, label="i"];
64->62 [style = bold, label=""];
18->31 [style = solid, label="desc1"];
84->85 [style = bold, label=""];
22->58 [style = bold, label=""];
51->45 [style = solid, label="desc1"];
2->41 [style = solid, label="numToAdd"];
11->16 [style = solid, label="currentOffsets"];
70->67 [style = solid, label="desc7"];
63->67 [style = bold, label=""];
14->29 [style = bold, label=""];
77->83 [style = bold, label=""];
76->51 [style = solid, label="task"];
82->54 [style = solid, label="desc2"];
53->23 [style = bold, label=""];
66->59 [style = solid, label="desc3"];
11->48 [style = solid, label="currentOffsets"];
15->25 [style = dotted, label="true"];
69->66 [style = bold, label=""];
49->6 [style = bold, label=""];
33->2 [style = bold, label=""];
20->36 [style = bold, label=""];
28->58 [style = bold, label=""];
65->67 [style = solid, label="desc1"];
76->28 [style = solid, label="task"];
62->67 [style = solid, label="desc5"];
15->49 [style = bold, label=""];
30->64 [style = dashed, label="0"];
4->35 [style = bold, label=""];
12->50 [style = bold, label=""];
23->16 [style = bold, label=""];
61->1 [style = solid, label="desc6"];
24->69 [style = dashed, label="0"];
73->16 [style = solid, label="desc4"];
44->30 [style = solid, label="task"];
13->53 [style = bold, label=""];
51->82 [style = bold, label=""];
44->40 [style = solid, label="task"];
28->53 [style = bold, label=""];
44->24 [style = solid, label="task"];
42->17 [style = bold, label=""];
39->27 [style = bold, label=""];
87->75 [style = bold, label=""];
73->28 [style = bold, label=""];
34->10 [style = bold, label=""];
81->16 [style = bold, label=""];
6->52 [style = bold, label=""];
43->21 [style = solid, label="desc5"];
69->67 [style = solid, label="desc2"];
44->18 [style = solid, label="task"];
6->26 [style = solid, label="currentOffsets"];
7->45 [style = bold, label=""];
45->54 [style = bold, label=""];
40->46 [style = bold, label=""];
72->78 [style = bold, label=""];
36->21 [style = bold, label=""];
68->42 [style = bold, label=""];
60->13 [style = solid, label="nextOffsets"];
48->52 [style = dashed, label="0"];
44->5 [style = solid, label="task"];
14->76 [style = solid, label="baseSequenceName"];
29->33 [style = bold, label=""];
40->61 [style = dashed, label="0"];
54->18 [style = bold, label=""];
5->59 [style = solid, label="desc3"];
29->87 [style = dashed, label="0"];
32->47 [style = bold, label=""];
46->59 [style = solid, label="desc7"];
46->8 [style = solid, label="desc7"];
50->56 [style = dotted, label="true"];
27->41 [style = bold, label=""];
76->80 [style = solid, label="task"];
76->81 [style = solid, label="task"];
80->77 [style = bold, label=""];
11->28 [style = solid, label="currentOffsets"];
5->66 [style = dashed, label="0"];
67->37 [style = bold, label=""];
78->76 [style = solid, label="startPartitions"];
11->38 [style = solid, label="currentOffsets"];
12->50 [style = solid, label="i"];
40->1 [style = solid, label="desc6"];
43->62 [style = dashed, label="0"];
41->12 [style = solid, label="i"];
60->55 [style = solid, label="nextOffsets"];
14->87 [style = bold, label=""];
16->38 [style = bold, label=""];
35->11 [style = bold, label=""];
}
