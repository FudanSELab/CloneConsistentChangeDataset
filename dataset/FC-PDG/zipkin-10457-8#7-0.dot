digraph {
5 [style = filled, label = "publish(new byte(((()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "produceSpans(THRIFT.encodeList(spans),builder.queue)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(receivedSpans.take()).containsExactlyElementsOf(spans)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "publish(malformed1)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "publish(malformed2)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertThat(rabbitmqMetrics.messages()).isEqualTo(5)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "collector.start()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "collector.start()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "skipsMalformedData['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(rabbitmqMetrics.spansDropped()).isZero()@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "produceSpans(new byte((((,builder.queue)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "skipsMalformedData['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(rabbitmqMetrics.bytes()).isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertThat(kafkaMetrics.spansDropped()).isZero()@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "produceSpans(malformed2,builder.queue)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "skipsMalformedData['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size() * 2)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertThat(receivedSpans.take()).containsExactlyElementsOf(spans)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Thread.sleep(200L)@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "produceSpans(malformed1,builder.topic)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(rabbitmqMetrics.messagesDropped()).isEqualTo(2)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(receivedSpans.take()).containsExactlyElementsOf(spans)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "assertThat(kafkaMetrics.spans()).isEqualTo(spans.size() * 2)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "byte(( malformed2 = \"malformed\".getBytes(UTF_8)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "produceSpans(THRIFT.encodeList(spans),builder.queue)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "produceSpans(THRIFT.encodeList(spans),builder.topic)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size() * 2)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(rabbitmqMetrics.bytes()).isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length)@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertThat(rabbitmqMetrics.spansDropped()).isZero()@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "produceSpans(malformed2,builder.topic)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertThat(kafkaMetrics.messages()).isEqualTo(5)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "produceSpans(new byte((((,builder.topic)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(rabbitmqMetrics.messages()).isEqualTo(5)@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(rabbitmqMetrics.messagesDropped()).isEqualTo(2)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "produceSpans(malformed1,builder.queue)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "publish(THRIFT.encodeList(spans))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "RabbitMQCollector.Builder builder = builder(\"decoder_exception\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertThat(receivedSpans.take()).containsExactlyElementsOf(spans)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "byte(( malformed2 = \"malformed\".getBytes(UTF_8)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "byte(( malformed1 = \"(\"='\".getBytes(UTF_8)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "KafkaCollector.Builder builder = builder(\"decoder_exception\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "produceSpans(THRIFT.encodeList(spans),builder.topic)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertThat(kafkaMetrics.bytes()).isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
28->18 [style = bold, label=""];
15->14 [style = bold, label=""];
9->24 [style = dashed, label="0"];
0->27 [style = bold, label=""];
21->15 [style = bold, label=""];
9->4 [style = bold, label=""];
0->32 [style = dashed, label="0"];
42->39 [style = bold, label=""];
5->42 [style = dashed, label="0"];
16->26 [style = bold, label=""];
22->21 [style = bold, label=""];
7->20 [style = dashed, label="0"];
3->6 [style = bold, label=""];
33->41 [style = bold, label=""];
31->2 [style = bold, label=""];
11->32 [style = bold, label=""];
11->33 [style = solid, label="malformed2"];
0->24 [style = solid, label="malformed2"];
0->27 [style = dashed, label="0"];
38->31 [style = bold, label=""];
29->34 [style = bold, label=""];
30->29 [style = bold, label=""];
26->11 [style = bold, label=""];
11->20 [style = solid, label="malformed1"];
39->33 [style = bold, label=""];
9->33 [style = dashed, label="0"];
7->9 [style = bold, label=""];
43->40 [style = bold, label=""];
4->25 [style = dashed, label="0"];
36->30 [style = bold, label=""];
37->43 [style = bold, label=""];
11->0 [style = bold, label=""];
18->22 [style = bold, label=""];
41->36 [style = bold, label=""];
2->7 [style = solid, label="malformed1"];
5->17 [style = dashed, label="0"];
13->3 [style = bold, label=""];
14->23 [style = bold, label=""];
35->37 [style = bold, label=""];
10->12 [style = bold, label=""];
12->8 [style = bold, label=""];
24->25 [style = bold, label=""];
11->9 [style = solid, label="malformed2"];
25->19 [style = bold, label=""];
27->17 [style = bold, label=""];
5->7 [style = bold, label=""];
2->39 [style = solid, label="malformed1"];
8->30 [style = dashed, label="0"];
1->2 [style = bold, label=""];
19->28 [style = bold, label=""];
34->35 [style = bold, label=""];
7->39 [style = dashed, label="0"];
20->24 [style = bold, label=""];
32->42 [style = bold, label=""];
2->11 [style = bold, label=""];
8->13 [style = bold, label=""];
0->5 [style = bold, label=""];
17->20 [style = bold, label=""];
4->41 [style = dashed, label="0"];
}
