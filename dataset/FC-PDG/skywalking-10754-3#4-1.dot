digraph {
5 [style = filled, label = "return EMPTY@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "double result = Arrays.stream(samples).mapToDouble(null).average().orElse(0.0D)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "double result = Arrays.stream(samples).mapToDouble(null).reduce(aggregator).orElse(0.0D)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "DoubleBinaryOperator aggregator@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "aggregate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "this == EMPTY@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "avg['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "avg['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "List<String> by@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ExpressionParsingContext.get().ifPresent(null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return SampleFamily.build(this.context,Arrays.stream(samples).map(null).collect(groupingBy(null,mapping(null,toList()))).entrySet().stream().map(null).toArray(null))@@@11@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return SampleFamily.build(this.context,newSample(ImmutableMap.of(),samples(0(.timestamp,result))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return SampleFamily.build(this.context,Arrays.stream(samples).collect(groupingBy(null,mapping(identity(),toList()))).entrySet().stream().map(null).toArray(null))@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "double result = Arrays.stream(samples).mapToDouble(null).average().orElse(0.0D)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "List<String> by@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "return SampleFamily.build(this.context,Arrays.stream(samples).map(null).collect(groupingBy(null,mapping(null,toList()))).entrySet().stream().map(null).toArray(null))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "by == null@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
2->3 [style = dotted, label="true"];
8->16 [style = dashed, label="0"];
15->2 [style = solid, label="by"];
0->5 [style = dotted, label="true"];
12->7 [style = solid, label="result"];
7->10 [style = bold, label=""];
2->6 [style = bold, label=""];
2->3 [style = bold, label=""];
3->7 [style = solid, label="result"];
0->2 [style = bold, label=""];
4->8 [style = dotted, label="true"];
1->0 [style = bold, label=""];
2->10 [style = bold, label=""];
12->7 [style = bold, label=""];
2->12 [style = bold, label=""];
14->1 [style = bold, label=""];
2->13 [style = bold, label=""];
2->11 [style = dotted, label="true"];
9->8 [style = dotted, label="true"];
14->16 [style = dotted, label="true"];
14->15 [style = dotted, label="true"];
5->2 [style = bold, label=""];
3->12 [style = dashed, label="0"];
6->13 [style = dashed, label="0"];
8->2 [style = solid, label="by"];
3->7 [style = bold, label=""];
2->7 [style = dotted, label="true"];
7->6 [style = bold, label=""];
11->7 [style = solid, label="result"];
2->12 [style = dotted, label="true"];
4->1 [style = bold, label=""];
9->1 [style = bold, label=""];
2->11 [style = bold, label=""];
11->7 [style = bold, label=""];
3->11 [style = dashed, label="0"];
0->5 [style = bold, label=""];
}
