digraph {
9 [style = filled, label = "final int individualRead = 150@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * testSSLEngine.getNumberOfUnwraps() + preexistingBytes)@@@30@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "readAtLeastUsingSmallAppBufferAtWriteLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verify(mockChannel,times(1)).read(isA())@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "nioSslEngine.peerAppData = unwrappedBuffer@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "SocketChannel mockChannel = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertThat(nioSslEngine.peerAppData.capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final int individualRead = 60@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "readAtLeastUsingSmallAppBufferAtWriteLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * testSSLEngine.getNumberOfUnwraps() + preexistingBytes)@@@26@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final ByteBufferSharingImpl inputSharingImpl = (ByteBufferSharingImpl)inputSharing@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ByteBuffer data = nioSslEngine.readAtLeast(mockChannel,amountToRead,wrappedBuffer)@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final int preexistingBytes = initialUnwrappedBufferSize - 7@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26->1 [style = solid, label="individualRead"];
12->7 [style = solid, label="initialUnwrappedBufferSize"];
12->7 [style = bold, label=""];
17->26 [style = bold, label=""];
1->31 [style = bold, label=""];
20->6 [style = bold, label=""];
26->8 [style = solid, label="individualRead"];
31->33 [style = solid, label="initialFreeSpace"];
5->11 [style = solid, label="testSSLEngine"];
32->5 [style = bold, label=""];
7->23 [style = solid, label="preexistingBytes"];
29->31 [style = solid, label="preexistingBytes"];
35->11 [style = solid, label="wrappedBuffer"];
25->20 [style = bold, label=""];
29->35 [style = bold, label=""];
8->32 [style = bold, label=""];
30->13 [style = solid, label="unwrappedBuffer"];
24->17 [style = bold, label=""];
14->11 [style = solid, label="mockChannel"];
3->6 [style = dashed, label="0"];
17->6 [style = solid, label="amountToRead"];
9->23 [style = solid, label="individualRead"];
7->4 [style = solid, label="preexistingBytes"];
10->11 [style = bold, label=""];
0->25 [style = solid, label="unwrappedBuffer"];
9->26 [style = dashed, label="0"];
11->6 [style = bold, label=""];
19->23 [style = bold, label=""];
0->13 [style = bold, label=""];
5->10 [style = bold, label=""];
9->4 [style = solid, label="individualRead"];
7->13 [style = solid, label="preexistingBytes"];
12->0 [style = solid, label="initialUnwrappedBufferSize"];
3->1 [style = bold, label=""];
10->5 [style = dashed, label="0"];
7->14 [style = bold, label=""];
9->20 [style = solid, label="individualRead"];
29->33 [style = solid, label="preexistingBytes"];
21->25 [style = bold, label=""];
29->1 [style = solid, label="preexistingBytes"];
32->28 [style = solid, label="testSSLEngine"];
2->30 [style = solid, label="initialUnwrappedBufferSize"];
18->19 [style = bold, label=""];
27->17 [style = bold, label=""];
6->34 [style = bold, label=""];
17->9 [style = bold, label=""];
6->3 [style = bold, label=""];
17->11 [style = solid, label="amountToRead"];
15->5 [style = bold, label=""];
22->18 [style = bold, label=""];
30->0 [style = bold, label=""];
1->4 [style = bold, label=""];
2->30 [style = bold, label=""];
6->1 [style = solid, label="testSSLEngine"];
14->2 [style = bold, label=""];
29->0 [style = solid, label="preexistingBytes"];
2->31 [style = solid, label="initialUnwrappedBufferSize"];
2->6 [style = solid, label="mockChannel"];
2->0 [style = bold, label=""];
16->17 [style = bold, label=""];
4->1 [style = dashed, label="0"];
9->15 [style = solid, label="individualRead"];
13->8 [style = bold, label=""];
14->6 [style = solid, label="wrappedBuffer"];
5->28 [style = bold, label=""];
1->22 [style = bold, label=""];
28->11 [style = bold, label=""];
31->33 [style = bold, label=""];
0->8 [style = solid, label="unwrappedBuffer"];
26->29 [style = bold, label=""];
35->14 [style = bold, label=""];
8->15 [style = bold, label=""];
9->12 [style = bold, label=""];
34->1 [style = bold, label=""];
13->21 [style = bold, label=""];
}
