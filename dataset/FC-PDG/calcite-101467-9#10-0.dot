digraph {
20 [style = filled, label = "RelNode transformed = RelOptUtil.pushDownJoinConditions(join,relBuilder)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "splitJoinConditionHelper(joinCond,Collections.singletonList(leftJoinIndex),Collections.singletonList(rightJoinIndex),Collections.singletonList(false),relBuilder.literal(true))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "relBuilder.push(deptScan)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Project leftInput = (Project)newJoin.getLeft()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testSplitJoinConditionExpandedIsNotDistinctFromUsingCase2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(transformed.getRowType(),is(join.getRowType()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "RexInputRef rightKeyInputRef = RexInputRef.of(empRow.getFieldCount() + rightJoinIndex,empDeptJoinRelFields)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "RelNode transformedInput = transformed.getInput(0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(transformedInput,is(instanceOf()))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(newJoin.getLeft(),is(instanceOf()))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Join join = (Join)relBuilder.build()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int rightJoinIndex = deptRow.getFieldNames().indexOf(\"DEPTNO\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "RexNode joinCond = relBuilder.call(SqlStdOperatorTable.CASE,relBuilder.isNull(leftKeyInputRef),relBuilder.isNull(rightKeyInputRef),relBuilder.isNull(rightKeyInputRef),relBuilder.isNull(leftKeyInputRef),relBuilder.equals(leftKeyInputRef,rightKeyInputRef))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "RexNode joinCond = relBuilder.call(SqlStdOperatorTable.CASE,relBuilder.call(SqlStdOperatorTable.IS_NULL,relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1))),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1))),relBuilder.call(SqlStdOperatorTable.EQUALS,relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1)),rightKeyInputRef))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(newJoin.getCondition().toString(),is(relBuilder.call(SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,RexInputRef.of(empRow.getFieldCount(),join.getRowType()),RexInputRef.of(empRow.getFieldCount() + 1 + rightJoinIndex,join.getRowType())).toString()))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "RexNode joinCond = relBuilder.call(SqlStdOperatorTable.CASE,relBuilder.call(SqlStdOperatorTable.IS_NULL,leftKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,leftKeyInputRef),relBuilder.call(SqlStdOperatorTable.EQUALS,leftKeyInputRef,rightKeyInputRef))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(leftInput.getProjects().get(empRow.getFieldCount()).toString(),is(relBuilder.call(SqlStdOperatorTable.PLUS,leftKeyInputRef,relBuilder.literal(1)).toString()))@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "int leftJoinIndex = empScan.getRowType().getFieldNames().indexOf(\"DEPTNO\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testPushDownJoinConditionsWithExpandedIsNotDistinctUsingCase['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Join newJoin = (Join)transformedInput@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "relBuilder.push(empScan)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "relBuilder.join(JoinRelType.INNER,joinCond)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testSplitJoinConditionExpandedIsNotDistinctFromUsingCase2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "RexInputRef leftKeyInputRef = RexInputRef.of(leftJoinIndex,empDeptJoinRelFields)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(transformed,is(instanceOf()))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->6 [style = bold, label=""];
19->10 [style = bold, label=""];
4->7 [style = bold, label=""];
23->19 [style = bold, label=""];
4->6 [style = solid, label="rightKeyInputRef"];
22->24 [style = bold, label=""];
4->7 [style = solid, label="rightKeyInputRef"];
19->10 [style = solid, label="transformedInput"];
15->12 [style = bold, label=""];
5->7 [style = solid, label="leftKeyInputRef"];
18->13 [style = bold, label=""];
0->4 [style = solid, label="rightJoinIndex"];
0->2 [style = solid, label="rightJoinIndex"];
4->17 [style = bold, label=""];
6->17 [style = dashed, label="0"];
6->2 [style = solid, label="joinCond"];
9->21 [style = bold, label=""];
5->4 [style = bold, label=""];
3->1 [style = bold, label=""];
6->2 [style = bold, label=""];
1->5 [style = solid, label="leftJoinIndex"];
17->9 [style = solid, label="joinCond"];
14->1 [style = bold, label=""];
8->1 [style = bold, label=""];
1->2 [style = solid, label="leftJoinIndex"];
7->2 [style = solid, label="joinCond"];
21->20 [style = solid, label="join"];
21->20 [style = bold, label=""];
13->16 [style = bold, label=""];
19->15 [style = solid, label="transformedInput"];
11->23 [style = bold, label=""];
12->18 [style = bold, label=""];
5->17 [style = solid, label="leftKeyInputRef"];
5->6 [style = solid, label="leftKeyInputRef"];
24->9 [style = bold, label=""];
10->15 [style = bold, label=""];
17->22 [style = bold, label=""];
0->5 [style = bold, label=""];
4->17 [style = solid, label="rightKeyInputRef"];
20->23 [style = solid, label="transformed"];
1->0 [style = bold, label=""];
20->11 [style = bold, label=""];
7->2 [style = bold, label=""];
}
