digraph {
6 [style = filled, label = "assertFalse(\"file should not exist\",target.exists())@@@24@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertFalse(\"file should not exist\",target.exists())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "exception = true@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertFalse(target.exists(),\"file should not exist\")@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertTrue(exception,\"should have raised an exception\")@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testWriterFailureNE['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "File target = new File(tmpdir,\"target.txt\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "new AtomicFileWritingIdiom(target,new OutputStreamStatement(){@Override public void write(OutputStream os){os.write(\"after\".getBytes(StandardCharsets.US_ASCII))os.flush()assertTrue(tmp.exists(),\"implementation of AtomicFileOutputStream has changed, update the test\")throw new RuntimeException()}})@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertFalse(tmp.exists(),\"tmp file should have been deleted\")@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "boolean exception = false@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "target.delete()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testOutputStreamFailureNE['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertFalse(\"tmp file should have been deleted\",tmp.exists())@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testOutputStreamFailureNE['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertTrue(\"should have raised an exception\",exception)@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertFalse(target.exists(),\"file should not exist\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final File tmp = new File(tmpdir,\"target.txt.tmp\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "new AtomicFileWritingIdiom(target,new WriterStatement(){@Override public void write(Writer os){os.write(\"after\")os.flush()assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\",tmp.exists())throw new RuntimeException()}})@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "RuntimeException ex@@@19@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
9->16 [style = dashed, label="0"];
4->17 [style = bold, label=""];
17->9 [style = bold, label=""];
10->12 [style = dashed, label="0"];
4->12 [style = solid, label="exception"];
4->2 [style = bold, label=""];
2->9 [style = bold, label=""];
9->10 [style = bold, label=""];
3->16 [style = bold, label=""];
6->14 [style = dashed, label="0"];
7->8 [style = bold, label=""];
2->17 [style = dashed, label="0"];
1->7 [style = bold, label=""];
10->6 [style = bold, label=""];
3->10 [style = solid, label="exception"];
8->13 [style = dashed, label="0"];
3->9 [style = bold, label=""];
5->0 [style = bold, label=""];
0->17 [style = solid, label="target"];
11->3 [style = bold, label=""];
4->10 [style = solid, label="exception"];
0->1 [style = bold, label=""];
15->0 [style = bold, label=""];
12->14 [style = bold, label=""];
8->4 [style = bold, label=""];
3->12 [style = solid, label="exception"];
11->3 [style = dotted, label="true"];
16->12 [style = bold, label=""];
18->0 [style = bold, label=""];
0->2 [style = solid, label="target"];
13->4 [style = bold, label=""];
2->16 [style = bold, label=""];
}
