digraph {
20 [style = filled, label = "StateModelDefinition stateModel@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "!ZKUtil.isClusterSetup(clusterName,_zkClient)@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "logger.info(\"Deleting cluster \" + clusterName)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "accessor.setProperty(keyBuilder.stateModelDef(stateModelDef),stateModel)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "logger.info(\"Skip the operation. State Model directory exists:\" + stateModelPath)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "_zkClient.exists(stateModelPath)@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "String clusterName@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "recreateIfExists@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName,new ZkBaseDataAccessor<ZNRecord>(_zkClient))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String stateModelDef@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Builder keyBuilder = accessor.keyBuilder()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "addStateModelDef['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "throw new HelixException(\"There are still LEADER in the cluster, shut them down first.\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "String root = \"/\" + clusterName@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "boolean recreateIfExists@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "_zkClient.deleteRecursive(stateModelPath)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String stateModelDefPath = HelixUtil.getStateModelDefinitionPath(clusterName)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String stateModelPath = stateModelDefPath + \"/\" + stateModelDef@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "accessor.getProperty(keyBuilder.controllerLeader()) != null@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "accessor.getChildNames(keyBuilder.liveInstances()).size() > 0@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "_zkClient.deleteRecursive(root)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Builder keyBuilder = accessor.keyBuilder()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "addStateModelDef['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "throw new HelixException(\"There are still live instances in the cluster, shut them down first.\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String clusterName@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "accessor.setProperty(keyBuilder.stateModelDef(stateModel.getId()),stateModel)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName,new ZkBaseDataAccessor<ZNRecord>(_zkClient))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "dropCluster['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "boolean recreateIfExists@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "StateModelDefinition stateModel@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "logger.info(\"Operation.State Model directory exists:\" + stateModelPath + \", remove and recreate.\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "String clusterName@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19->10 [style = dotted, label="true"];
17->8 [style = bold, label=""];
6->1 [style = solid, label="clusterName"];
0->16 [style = bold, label=""];
16->11 [style = bold, label=""];
13->17 [style = solid, label="stateModelPath"];
5->16 [style = solid, label="recreateIfExists"];
13->11 [style = solid, label="stateModelPath"];
19->12 [style = bold, label=""];
10->7 [style = solid, label="stateModelDef"];
19->20 [style = dotted, label="true"];
31->32 [style = bold, label=""];
26->29 [style = bold, label=""];
23->31 [style = solid, label="clusterName"];
11->4 [style = bold, label=""];
12->15 [style = bold, label=""];
19->18 [style = dotted, label="true"];
14->22 [style = bold, label=""];
12->15 [style = dotted, label="true"];
27->31 [style = bold, label=""];
23->26 [style = solid, label="clusterName"];
30->25 [style = bold, label=""];
10->13 [style = solid, label="stateModelDef"];
23->29 [style = solid, label="clusterName"];
24->30 [style = dotted, label="true"];
19->21 [style = dotted, label="true"];
18->1 [style = solid, label="clusterName"];
16->17 [style = bold, label=""];
28->26 [style = bold, label=""];
16->4 [style = dotted, label="true"];
31->25 [style = solid, label="root"];
9->6 [style = dotted, label="true"];
21->16 [style = solid, label="recreateIfExists"];
15->3 [style = bold, label=""];
32->33 [style = bold, label=""];
32->33 [style = dotted, label="true"];
14->7 [style = bold, label=""];
24->30 [style = bold, label=""];
3->13 [style = solid, label="stateModelDefPath"];
12->26 [style = dashed, label="0"];
8->1 [style = bold, label=""];
29->27 [style = bold, label=""];
20->22 [style = solid, label="stateModel"];
6->15 [style = solid, label="clusterName"];
18->3 [style = solid, label="clusterName"];
2->7 [style = solid, label="stateModel"];
9->2 [style = dotted, label="true"];
0->1 [style = bold, label=""];
33->24 [style = bold, label=""];
24->25 [style = bold, label=""];
3->13 [style = bold, label=""];
28->23 [style = dotted, label="true"];
13->0 [style = solid, label="stateModelPath"];
10->22 [style = solid, label="stateModelDef"];
1->14 [style = bold, label=""];
4->1 [style = bold, label=""];
12->3 [style = bold, label=""];
0->16 [style = dotted, label="true"];
9->12 [style = bold, label=""];
16->11 [style = dotted, label="true"];
16->8 [style = dotted, label="false"];
6->3 [style = solid, label="clusterName"];
13->4 [style = solid, label="stateModelPath"];
16->17 [style = dotted, label="false"];
18->15 [style = solid, label="clusterName"];
9->10 [style = dotted, label="true"];
32->24 [style = bold, label=""];
7->22 [style = dashed, label="0"];
13->0 [style = bold, label=""];
9->5 [style = dotted, label="true"];
}
