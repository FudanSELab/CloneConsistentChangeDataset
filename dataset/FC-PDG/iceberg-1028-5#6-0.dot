digraph {
3 [style = filled, label = "shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA,and(greaterThan(\"id\",5),lessThanOrEqual(\"id\",30))).shouldRead(parquetSchema,rowGroupMetadata,dictionaryStore)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA,and(lessThan(\"id\",INT_MIN_VALUE - 25),greaterThanOrEqual(\"id\",INT_MAX_VALUE + 1))).shouldRead(parquetSchema,rowGroupMetadata,dictionaryStore)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA,or(lessThan(\"id\",5),greaterThanOrEqual(\"id\",60))).shouldRead(parquetSchema,rowGroupMetadata,dictionaryStore)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA,and(lessThan(\"id\",5),greaterThanOrEqual(\"id\",0))).shouldRead(parquetSchema,rowGroupMetadata,dictionaryStore)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA,and(greaterThan(\"id\",INT_MIN_VALUE - 25),lessThanOrEqual(\"id\",INT_MIN_VALUE))).shouldRead(parquetSchema,rowGroupMetadata,dictionaryStore)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertFalse(\"Should skip: or(false, false)\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertFalse(\"Should skip: and(false, false)\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA,and(lessThan(\"id\",INT_MIN_VALUE - 25),greaterThanOrEqual(\"id\",INT_MIN_VALUE - 30))).shouldRead(parquetSchema,rowGroupMetadata,dictionaryStore)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA,or(lessThan(\"id\",5),greaterThanOrEqual(\"id\",80))).shouldRead(parquetSchema,rowGroupMetadata,dictionaryStore)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertTrue(\"Should read: or(false, true)\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertFalse(\"Should skip: and(false, false)\",shouldRead)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testOr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testAnd['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertFalse(\"Should skip: and(false, true)\",shouldRead)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertTrue(\"Should read: and(true, true)\",shouldRead)@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testAnd['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
4->3 [style = bold, label=""];
0->3 [style = solid, label="shouldRead"];
0->4 [style = solid, label="shouldRead"];
11->14 [style = solid, label="shouldRead"];
11->14 [style = bold, label=""];
0->6 [style = dashed, label="0"];
15->12 [style = solid, label="shouldRead"];
12->11 [style = bold, label=""];
0->15 [style = dashed, label="0"];
8->6 [style = bold, label=""];
1->0 [style = bold, label=""];
2->9 [style = bold, label=""];
9->7 [style = bold, label=""];
3->2 [style = solid, label="shouldRead"];
6->5 [style = solid, label="shouldRead"];
10->9 [style = solid, label="shouldRead"];
4->12 [style = dashed, label="0"];
10->2 [style = solid, label="shouldRead"];
15->11 [style = solid, label="shouldRead"];
6->5 [style = bold, label=""];
2->14 [style = dashed, label="0"];
3->2 [style = bold, label=""];
3->9 [style = dashed, label="0"];
6->10 [style = solid, label="shouldRead"];
0->4 [style = bold, label=""];
9->7 [style = solid, label="shouldRead"];
10->2 [style = bold, label=""];
15->12 [style = bold, label=""];
13->15 [style = bold, label=""];
3->11 [style = dashed, label="0"];
}
