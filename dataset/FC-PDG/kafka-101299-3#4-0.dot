digraph {
3 [style = filled, label = "context.restore(subject.name(),entries)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(subject.get(\"3\"),\"c\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"),\"a\".getBytes(\"UTF-8\")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "shouldRestoreThenDeleteOnRestoreAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "iterator.hasNext()@@@16@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"),(byte(()null))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final List<KeyValue<byte((,byte((>> entries = new ArrayList<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "getKeyValueEntries['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final List<KeyValue<byte((,byte((>> entries = getKeyValueEntries()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(subject.get(\"1\"),\"a\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "context.restore(subject.name(),entries)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"),\"b\".getBytes(\"UTF-8\")))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"),\"c\".getBytes(\"UTF-8\")))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(subject.get(\"2\"),\"b\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "shouldRestoreThenDeleteOnRestoreAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "keys.add(iterator.next().key)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "entries.clear()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Set<String> keys = new HashSet<>()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "keys.add(stringDeserializer.deserialize(null,iterator.next().key.get()))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertEquals(stringDeserializer.deserialize(null,subject.get(new Bytes(stringSerializer.serialize(null,\"3\")))),\"c\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertEquals(stringDeserializer.deserialize(null,subject.get(new Bytes(stringSerializer.serialize(null,\"2\")))),\"b\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(stringDeserializer.deserialize(null,subject.get(new Bytes(stringSerializer.serialize(null,\"1\")))),\"a\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"),\"c\".getBytes(\"UTF-8\")))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final KeyValueIterator<String,String> iterator = subject.all()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"),\"b\".getBytes(\"UTF-8\")))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "return entries@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final KeyValueIterator<Bytes,byte((> iterator = subject.all()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertThat(keys,equalTo(Utils.mkSet(\"2\",\"3\")))@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "subject.init(context,subject)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->18 [style = dotted, label="true"];
10->18 [style = bold, label=""];
7->11 [style = solid, label="keys"];
4->14 [style = bold, label=""];
24->28 [style = solid, label="entries"];
3->1 [style = bold, label=""];
7->10 [style = bold, label=""];
1->19 [style = dashed, label="0"];
8->20 [style = dashed, label="0"];
22->21 [style = bold, label=""];
13->14 [style = solid, label="entries"];
16->2 [style = bold, label=""];
9->16 [style = bold, label=""];
6->22 [style = dashed, label="0"];
8->7 [style = bold, label=""];
25->27 [style = bold, label=""];
13->24 [style = dashed, label="0"];
0->10 [style = bold, label=""];
23->24 [style = bold, label=""];
1->6 [style = bold, label=""];
13->12 [style = bold, label=""];
27->26 [style = bold, label=""];
18->10 [style = bold, label=""];
3->19 [style = bold, label=""];
9->21 [style = dashed, label="0"];
24->25 [style = bold, label=""];
5->13 [style = bold, label=""];
10->0 [style = bold, label=""];
2->15 [style = bold, label=""];
15->4 [style = bold, label=""];
21->16 [style = bold, label=""];
0->18 [style = dashed, label="0"];
10->0 [style = dotted, label="true"];
14->8 [style = bold, label=""];
12->3 [style = bold, label=""];
17->13 [style = bold, label=""];
26->28 [style = bold, label=""];
13->3 [style = solid, label="entries"];
6->9 [style = bold, label=""];
20->7 [style = bold, label=""];
19->22 [style = bold, label=""];
14->20 [style = bold, label=""];
10->11 [style = bold, label=""];
}
