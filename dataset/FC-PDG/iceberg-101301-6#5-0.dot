digraph {
13 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",INT_MIN_VALUE - 1)),SPEC,true).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",INT_MIN_VALUE)),SPEC,true).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",5)),SPEC,true).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",30)),SPEC,true).eval(FILE)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",75)),SPEC,true).eval(FILE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(not(lessThan(\"id\",5)),SPEC,true).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to upper bound\",shouldRead)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",INT_MIN_VALUE - 25)),SPEC,true).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",29)),SPEC,true).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to lower bound\",shouldRead)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",80)),SPEC,true).eval(FILE)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "testNot['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertFalse(\"Should skip: not(true)\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertTrue(\"Should read: not(false)\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",79)),SPEC,true).eval(FILE)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",INT_MAX_VALUE)),SPEC,true).eval(FILE)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "testIntegerNotEqRewritten['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",85)),SPEC,true).eval(FILE)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(greaterThan(\"id\",5)),SPEC,true).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",INT_MAX_VALUE + 6)),SPEC,true).eval(FILE)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",INT_MAX_VALUE + 1)),SPEC,true).eval(FILE)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(\"Should read: id between lower and upper bounds\",shouldRead)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testIntegerNotEqRewritten['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",INT_MAX_VALUE - 4)),SPEC,true).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
5->2 [style = solid, label="shouldRead"];
18->14 [style = solid, label="shouldRead"];
0->3 [style = solid, label="shouldRead"];
23->25 [style = bold, label=""];
8->16 [style = dashed, label="0"];
15->13 [style = bold, label=""];
19->3 [style = solid, label="shouldRead"];
16->11 [style = bold, label=""];
23->25 [style = solid, label="shouldRead"];
7->10 [style = bold, label=""];
10->14 [style = bold, label=""];
1->15 [style = dashed, label="0"];
0->19 [style = dashed, label="0"];
8->11 [style = solid, label="shouldRead"];
14->22 [style = bold, label=""];
6->12 [style = solid, label="shouldRead"];
12->16 [style = bold, label=""];
13->25 [style = dashed, label="0"];
11->19 [style = bold, label=""];
27->26 [style = solid, label="shouldRead"];
24->23 [style = bold, label=""];
2->4 [style = bold, label=""];
4->21 [style = dashed, label="0"];
1->13 [style = bold, label=""];
6->22 [style = dashed, label="0"];
4->7 [style = bold, label=""];
21->7 [style = solid, label="shouldRead"];
17->2 [style = solid, label="shouldRead"];
25->27 [style = bold, label=""];
13->17 [style = bold, label=""];
5->2 [style = bold, label=""];
5->27 [style = dashed, label="0"];
11->0 [style = bold, label=""];
5->17 [style = dashed, label="0"];
17->2 [style = bold, label=""];
2->21 [style = bold, label=""];
12->8 [style = bold, label=""];
22->12 [style = solid, label="shouldRead"];
22->12 [style = bold, label=""];
13->5 [style = bold, label=""];
7->18 [style = bold, label=""];
15->13 [style = solid, label="shouldRead"];
21->7 [style = bold, label=""];
16->11 [style = solid, label="shouldRead"];
4->7 [style = solid, label="shouldRead"];
1->13 [style = solid, label="shouldRead"];
2->26 [style = dashed, label="0"];
9->1 [style = bold, label=""];
8->11 [style = bold, label=""];
20->15 [style = bold, label=""];
10->14 [style = solid, label="shouldRead"];
18->14 [style = bold, label=""];
14->6 [style = bold, label=""];
19->3 [style = bold, label=""];
10->18 [style = dashed, label="0"];
1->23 [style = dashed, label="0"];
27->26 [style = bold, label=""];
6->12 [style = bold, label=""];
}
