digraph {
19 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@83@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@14@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "QueryRunner queryable = expectations.getQueryRunner()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "query instanceof SearchQuery@@@45@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
104 [style = filled, label = "results.add(expectation.getResults())@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@90@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "DruidServer server = entry.getKey()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "i < queryIntervals.size()@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
117 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){HashMap<String,List> context = new HashMap<String,List>()for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(new MergeIterable<>(Comparators.naturalNullsFirst(),FunctionalIterable.create(new RangeIterable(expectedResultsRangeStart,expectedResultsRangeEnd)).transformCat(new Function<Integer,Iterable<Iterable<Result<Object>>>>(){@Override public Iterable<Iterable<Result<Object>>> apply(@Nullable Integer input){List<Iterable<Result<Object>>> retVal = new ArrayList<>()final Map<DruidServer,ServerExpectations> exps = serverExpectationList.get(input)for (ServerExpectations expectations : exps.values()){for (ServerExpectation expectation : expectations){retVal.add(expectation.getResults())}}return retVal}})),runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval)))),context))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@103@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "queryCaptures@@@129@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final int expectedResultsRangeEnd@@@94@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "intervals.add(expectation.getInterval())@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "List<Iterable<Result<SelectResultValue>>> results = new ArrayList<>()@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "ServerExpectation expectation@@@49@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "List<Capture> queryCaptures = new ArrayList<>()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
113 [style = filled, label = "testQueryCaching['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "++i@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<Object> mocks = new ArrayList<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testQueryCachingWithFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@80@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "ServerExpectation expectation@@@24@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "query instanceof SelectQuery@@@56@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "results.add(expectation.getResults())@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
107 [style = filled, label = "intervals.add(expectation.getInterval())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "intervals.add(expectation.getInterval())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Object args@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
120 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
125 [style = filled, label = "expectations@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final Capture<? extends QueryPlus> capture = new Capture()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "parseResults(queryIntervals,expectedResults,args)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "Query capturedQuery = capturedQueryPlus.getQuery()@@@131@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final QueryRunner runner@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
118 [style = filled, label = "Capture queryCapture@@@129@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
127 [style = filled, label = "query instanceof TopNQuery@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "ServerExpectation expectation@@@82@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "ServerExpectations expectations = entry.getValue()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
123 [style = filled, label = "expectations@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
98 [style = filled, label = "ServerExpectation expectation@@@27@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "expectedResultsRangeStart = 0@@@100@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
122 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@79@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> filteredExpected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "final Capture<? extends Map> context = new Capture()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@15@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@97@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
116 [style = filled, label = "query instanceof TimeBoundaryQuery@@@95@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testQueryCachingWithFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "final Query query@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
63 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
119 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@101@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
103 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "int intervalNo = 0@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
126 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final List<List<Iterable<Result<Object>>>> expectedResults = Lists.newArrayListWithCapacity(queryIntervals.size())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "finalExpectation.entrySet()@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "results.add(expectation.getResults())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final Query query@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final int numTimesToQuery@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> filteredExpected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "expectations@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "expectedResultsRangeStart = i@@@96@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "final Query query@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeBoundaryResults(segmentIds,intervals,results)).once()@@@87@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "queryCaptures.add(capture)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "intervalNo++@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final List<SegmentId> segmentIds = new ArrayList<>()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
124 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSelectResults(segmentIds,intervals,results)).once()@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
128 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "query instanceof TimeseriesQuery@@@23@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "mocks.add(serverView)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "results.add(expectation.getResults())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "intervalNo < i + 1@@@41@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "intervals.add(expectation.getInterval())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeseriesResults(expectBySegment,segmentIds,intervals,results)).once()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
108 [style = filled, label = "query instanceof TimeBoundaryQuery@@@78@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
109 [style = filled, label = "results.add(expectation.getResults())@@@74@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Iterables.addAll((List)expected,filteredExpected.get(intervalNo))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "List<Iterable<Result<SearchResultValue>>> results = new ArrayList<>()@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "Assert.assertTrue(capturedQuery.getContextValue(\"bySegment\") == null || capturedQuery.getContextValue(\"bySegment\").equals(false))@@@136@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Object args@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final List<String> segmentIds = new ArrayList<>()@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
96 [style = filled, label = "intervals.add(expectation.getInterval())@@@84@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
105 [style = filled, label = "List<Iterable<Row>> results = new ArrayList<>()@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
111 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "expectBySegment@@@132@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andAnswer(new IAnswer<Sequence>(){@Override public Sequence answer(){return toFilteredQueryableTimeseriesResults((TimeseriesQuery)capture.getValue().getQuery(),segmentIds,queryIntervals,results)}}).times(0,1)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "query instanceof GroupByQuery@@@67@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Assert.assertEquals(true,capturedQuery.getContextValue(\"bySegment\"))@@@133@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final Map<DruidServer,ServerExpectations> finalExpectation = serverExpectationList.get(serverExpectationList.size() - 1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "intervals.add(expectation.getInterval())@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "ServerExpectation expectation@@@71@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "final Interval actualQueryInterval = new Interval(queryIntervals.get(0).getStart(),queryIntervals.get(i).getEnd())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "boolean expectBySegment@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
97 [style = filled, label = "finalExpectation.entrySet()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableGroupByResults(segmentIds,intervals,results)).once()@@@76@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
89 [style = filled, label = "expectations@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "ServerExpectation expectation@@@60@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
99 [style = filled, label = "ServerExpectation expectation@@@38@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
115 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSearchResults(segmentIds,intervals,results)).once()@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "expectations@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
114 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).once()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
121 [style = filled, label = "QueryPlus capturedQueryPlus = (QueryPlus)queryCapture.getValue()@@@130@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
106 [style = filled, label = "List<Iterable<Result<TimeBoundaryResultValue>>> results = new ArrayList<>()@@@81@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Object args@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final int numTimesToQuery@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
93 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expectations@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).times(0,1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ServerExpectation expectation@@@24@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final List<Interval> queryIntervals = Lists.newArrayListWithCapacity(args.length / 2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "final int expectedResultsRangeStart@@@93@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTopNResults(segmentIds,intervals,results)).once()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "results.add(expectation.getResults())@@@85@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
90 [style = filled, label = "List<Iterable<Result<TopNResultValue>>> results = new ArrayList<>()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "expectations@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "final List<Map<DruidServer,ServerExpectations>> serverExpectationList = populateTimeline(queryIntervals,expectedResults,i,mocks)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38->117 [style = dotted, label="true"];
27->13 [style = bold, label=""];
55->103 [style = bold, label=""];
38->81 [style = dotted, label="true"];
127->99 [style = dotted, label="true"];
29->5 [style = bold, label=""];
2->4 [style = solid, label="expectedResults"];
26->117 [style = solid, label="i"];
119->117 [style = bold, label=""];
8->127 [style = dotted, label="false"];
61->112 [style = bold, label=""];
64->3 [style = bold, label=""];
94->61 [style = bold, label=""];
26->119 [style = solid, label="i"];
74->82 [style = bold, label=""];
22->37 [style = bold, label=""];
16->35 [style = solid, label="mocks"];
101->58 [style = bold, label=""];
91->96 [style = bold, label=""];
38->34 [style = dotted, label="true"];
110->105 [style = dotted, label="true"];
8->63 [style = bold, label=""];
38->39 [style = dotted, label="true"];
63->128 [style = bold, label=""];
84->50 [style = bold, label=""];
6->32 [style = dotted, label="true"];
117->121 [style = bold, label=""];
20->28 [style = solid, label="intervalNo"];
111->126 [style = bold, label=""];
71->108 [style = solid, label="query"];
3->38 [style = bold, label=""];
127->70 [style = bold, label=""];
127->70 [style = dotted, label="true"];
15->40 [style = dashed, label="0"];
8->40 [style = bold, label=""];
110->126 [style = dotted, label="true"];
10->37 [style = solid, label="context"];
42->8 [style = solid, label="query"];
117->50 [style = solid, label="i"];
127->101 [style = dotted, label="true"];
71->116 [style = solid, label="query"];
108->89 [style = dotted, label="true"];
37->3 [style = bold, label=""];
82->110 [style = dotted, label="false"];
127->74 [style = dotted, label="false"];
107->101 [style = bold, label=""];
23->29 [style = bold, label=""];
94->27 [style = bold, label=""];
10->76 [style = bold, label=""];
72->94 [style = bold, label=""];
8->61 [style = dotted, label="true"];
23->117 [style = solid, label="expectations"];
32->80 [style = dashed, label="0"];
38->16 [style = dotted, label="true"];
103->57 [style = bold, label=""];
108->88 [style = dotted, label="false"];
36->37 [style = solid, label="actualQueryInterval"];
79->52 [style = dotted, label="true"];
108->62 [style = dotted, label="true"];
10->39 [style = bold, label=""];
62->112 [style = bold, label=""];
38->7 [style = dotted, label="true"];
110->108 [style = dotted, label="false"];
14->35 [style = solid, label="queryIntervals"];
36->117 [style = solid, label="actualQueryInterval"];
113->14 [style = bold, label=""];
75->115 [style = bold, label=""];
81->79 [style = bold, label=""];
38->8 [style = dotted, label="true"];
115->34 [style = bold, label=""];
113->71 [style = dotted, label="true"];
41->42 [style = dotted, label="true"];
127->74 [style = bold, label=""];
6->0 [style = dotted, label="true"];
6->11 [style = dotted, label="true"];
74->82 [style = dotted, label="false"];
87->104 [style = bold, label=""];
26->38 [style = solid, label="i"];
38->5 [style = dotted, label="true"];
8->65 [style = dotted, label="true"];
8->33 [style = dotted, label="false"];
127->107 [style = dotted, label="true"];
20->30 [style = solid, label="intervalNo"];
26->22 [style = solid, label="i"];
117->38 [style = solid, label="i"];
8->31 [style = dotted, label="true"];
68->106 [style = bold, label=""];
74->57 [style = dotted, label="true"];
38->79 [style = dotted, label="true"];
38->118 [style = dotted, label="true"];
5->10 [style = bold, label=""];
30->28 [style = solid, label="intervalNo"];
83->17 [style = bold, label=""];
88->34 [style = bold, label=""];
38->12 [style = dotted, label="true"];
108->96 [style = dotted, label="true"];
69->4 [style = solid, label="args"];
28->30 [style = bold, label=""];
41->46 [style = dotted, label="true"];
108->86 [style = dotted, label="true"];
8->98 [style = dotted, label="true"];
108->68 [style = dotted, label="true"];
37->38 [style = solid, label="i"];
38->20 [style = dotted, label="true"];
39->8 [style = bold, label=""];
82->56 [style = dotted, label="true"];
44->37 [style = solid, label="numTimesToQuery"];
104->124 [style = bold, label=""];
128->65 [style = bold, label=""];
26->37 [style = solid, label="i"];
8->40 [style = dotted, label="true"];
113->54 [style = dotted, label="true"];
38->116 [style = dotted, label="true"];
38->97 [style = dotted, label="true"];
85->55 [style = bold, label=""];
2->4 [style = bold, label=""];
32->4 [style = solid, label="args"];
77->78 [style = bold, label=""];
71->82 [style = solid, label="query"];
38->112 [style = dotted, label="true"];
110->77 [style = dotted, label="true"];
38->1 [style = dotted, label="true"];
56->51 [style = bold, label=""];
66->34 [style = bold, label=""];
75->103 [style = bold, label=""];
52->121 [style = bold, label=""];
38->24 [style = dotted, label="true"];
17->34 [style = bold, label=""];
38->76 [style = dotted, label="true"];
65->27 [style = bold, label=""];
71->8 [style = solid, label="query"];
121->81 [style = bold, label=""];
79->52 [style = bold, label=""];
8->43 [style = dotted, label="true"];
19->13 [style = bold, label=""];
82->59 [style = dotted, label="true"];
113->69 [style = dotted, label="true"];
29->114 [style = dashed, label="0"];
26->50 [style = solid, label="i"];
93->85 [style = bold, label=""];
95->91 [style = bold, label=""];
116->119 [style = dotted, label="false"];
38->23 [style = dotted, label="true"];
21->61 [style = dashed, label="0"];
6->25 [style = dotted, label="true"];
35->17 [style = bold, label=""];
37->119 [style = bold, label=""];
8->18 [style = dotted, label="true"];
116->84 [style = bold, label=""];
74->93 [style = dotted, label="true"];
113->80 [style = dotted, label="true"];
116->37 [style = bold, label=""];
36->35 [style = bold, label=""];
114->5 [style = bold, label=""];
26->84 [style = solid, label="i"];
20->22 [style = solid, label="intervalNo"];
10->117 [style = solid, label="context"];
82->124 [style = dotted, label="true"];
8->19 [style = dotted, label="true"];
101->92 [style = bold, label=""];
64->121 [style = bold, label=""];
8->128 [style = dotted, label="true"];
38->37 [style = dotted, label="true"];
8->33 [style = bold, label=""];
35->83 [style = bold, label=""];
38->10 [style = dotted, label="true"];
74->75 [style = dotted, label="true"];
25->4 [style = solid, label="args"];
8->15 [style = bold, label=""];
82->110 [style = bold, label=""];
8->21 [style = dotted, label="true"];
8->94 [style = dotted, label="true"];
92->34 [style = bold, label=""];
116->50 [style = dotted, label="true"];
16->24 [style = bold, label=""];
124->34 [style = bold, label=""];
73->120 [style = bold, label=""];
116->37 [style = dotted, label="false"];
21->34 [style = bold, label=""];
38->16 [style = bold, label=""];
104->51 [style = bold, label=""];
109->66 [style = bold, label=""];
95->62 [style = bold, label=""];
12->20 [style = bold, label=""];
40->19 [style = bold, label=""];
88->112 [style = bold, label=""];
112->12 [style = bold, label=""];
38->22 [style = dotted, label="true"];
8->15 [style = dotted, label="true"];
22->28 [style = bold, label=""];
33->12 [style = bold, label=""];
48->117 [style = solid, label="numTimesToQuery"];
15->19 [style = bold, label=""];
74->93 [style = bold, label=""];
122->68 [style = bold, label=""];
110->100 [style = dotted, label="true"];
21->12 [style = bold, label=""];
116->84 [style = dotted, label="true"];
12->28 [style = solid, label="expected"];
108->106 [style = dotted, label="true"];
113->48 [style = dotted, label="true"];
61->34 [style = bold, label=""];
38->83 [style = dotted, label="true"];
71->127 [style = solid, label="query"];
5->76 [style = solid, label="capture"];
13->27 [style = bold, label=""];
8->63 [style = dotted, label="true"];
6->9 [style = dotted, label="true"];
127->92 [style = dotted, label="true"];
90->58 [style = bold, label=""];
49->90 [style = bold, label=""];
26->35 [style = solid, label="i"];
108->95 [style = dotted, label="true"];
14->4 [style = solid, label="queryIntervals"];
117->84 [style = solid, label="i"];
76->39 [style = bold, label=""];
126->105 [style = bold, label=""];
41->47 [style = dotted, label="true"];
62->34 [style = bold, label=""];
41->32 [style = dotted, label="true"];
74->102 [style = dotted, label="true"];
34->23 [style = bold, label=""];
14->2 [style = bold, label=""];
115->112 [style = bold, label=""];
8->13 [style = dotted, label="true"];
38->45 [style = dotted, label="true"];
27->21 [style = bold, label=""];
82->73 [style = dotted, label="true"];
74->67 [style = dotted, label="true"];
41->44 [style = dotted, label="true"];
92->112 [style = bold, label=""];
38->36 [style = dotted, label="true"];
8->72 [style = dotted, label="true"];
41->14 [style = bold, label=""];
82->51 [style = dotted, label="true"];
70->49 [style = bold, label=""];
120->56 [style = bold, label=""];
109->77 [style = bold, label=""];
127->49 [style = dotted, label="true"];
66->112 [style = bold, label=""];
108->91 [style = dotted, label="true"];
37->35 [style = solid, label="i"];
110->109 [style = dotted, label="true"];
96->95 [style = bold, label=""];
30->22 [style = bold, label=""];
8->127 [style = bold, label=""];
74->115 [style = dotted, label="true"];
110->125 [style = dotted, label="true"];
74->85 [style = dotted, label="true"];
105->77 [style = bold, label=""];
108->122 [style = bold, label=""];
4->26 [style = bold, label=""];
108->88 [style = bold, label=""];
22->28 [style = dotted, label="true"];
82->123 [style = dotted, label="true"];
82->104 [style = dotted, label="true"];
110->111 [style = dotted, label="true"];
15->63 [style = dashed, label="0"];
27->72 [style = bold, label=""];
80->79 [style = solid, label="expectBySegment"];
74->55 [style = dotted, label="true"];
57->75 [style = bold, label=""];
108->122 [style = dotted, label="true"];
2->35 [style = solid, label="expectedResults"];
12->37 [style = solid, label="expected"];
124->112 [style = bold, label=""];
110->111 [style = bold, label=""];
38->121 [style = dotted, label="true"];
38->114 [style = dotted, label="true"];
74->103 [style = dotted, label="true"];
82->120 [style = dotted, label="true"];
20->22 [style = bold, label=""];
11->8 [style = solid, label="query"];
6->14 [style = bold, label=""];
26->38 [style = bold, label=""];
110->78 [style = dotted, label="true"];
24->36 [style = bold, label=""];
38->3 [style = dotted, label="true"];
37->22 [style = solid, label="i"];
50->117 [style = bold, label=""];
127->90 [style = dotted, label="true"];
79->64 [style = bold, label=""];
58->107 [style = bold, label=""];
38->53 [style = dotted, label="true"];
38->35 [style = dotted, label="true"];
32->37 [style = solid, label="numTimesToQuery"];
127->60 [style = dotted, label="true"];
78->109 [style = bold, label=""];
38->17 [style = dotted, label="true"];
117->119 [style = solid, label="i"];
12->116 [style = bold, label=""];
30->22 [style = solid, label="intervalNo"];
106->91 [style = bold, label=""];
19->128 [style = dashed, label="0"];
52->3 [style = bold, label=""];
82->87 [style = dotted, label="true"];
117->35 [style = solid, label="i"];
110->66 [style = dotted, label="true"];
38->29 [style = dotted, label="true"];
8->27 [style = dotted, label="true"];
22->30 [style = dotted, label="true"];
33->34 [style = bold, label=""];
79->64 [style = dotted, label="false"];
71->74 [style = solid, label="query"];
71->110 [style = solid, label="query"];
23->114 [style = bold, label=""];
51->87 [style = bold, label=""];
82->73 [style = bold, label=""];
110->108 [style = bold, label=""];
127->58 [style = dotted, label="true"];
}
