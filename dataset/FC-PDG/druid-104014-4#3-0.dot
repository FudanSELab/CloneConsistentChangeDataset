digraph {
54 [style = filled, label = "testAveraging['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(iter.hasNext())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(7.5f,result.getMetric(\"movingAvgPageViews\").floatValue(),0.0f)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertTrue(iter.hasNext())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "event3.put(\"gender\",\"m\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "Assert.assertEquals(8.571428f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(\"m\",(result.getDimension(\"gender\")).get(0))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertTrue(iter.hasNext())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertFalse(iter.hasNext())@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(\"m\",(caResult.getDimension(\"gender\")).get(0))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "NullHandling.initializeForTests()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Map<String,Object> event3 = new HashMap<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(2.5f,result.getMetric(\"movingAvgPageViews\").floatValue(),0.0f)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "event4.put(\"pageViews\",40L)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Row row2 = new MapBasedRow(JAN_2,event2)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(4.285714f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "event1.put(\"gender\",\"m\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "caResult = iter.next()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "Iterator<Row> iter = new MovingAverageIterable(seq,ds,Arrays.asList(new ConstantAveragerFactory(\"costPageViews\",7,retval),new LongMeanAveragerFactory(\"movingAvgPageViews\",7,1,\"pageViews\")),Collections.emptyList(),Collections.singletonList(new LongSumAggregatorFactory(\"pageViews\",\"pageViews\"))).iterator()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "List<DimensionSpec> ds = new ArrayList<>()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertTrue(iter.hasNext())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(\"m\",(caResult.getDimension(\"gender\")).get(0))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "System.setProperty(\"druid.generic.useDefaultValueForNull\",\"true\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(\"m\",(result.getDimension(\"gender\")).get(0))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"m\",(result.getDimension(\"gender\")).get(0))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "event2.put(\"pageViews\",20L)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "event3.put(\"pageViews\",30L)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertFalse(iter.hasNext())@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testMissingDaysInMiddle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(\"f\",(caResult.getDimension(\"gender\")).get(0))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Map<String,Object> event2 = new HashMap<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Iterator<Row> iter = new MovingAverageIterable(seq,ds,Collections.singletonList(new LongMeanAveragerFactory(\"movingAvgPageViews\",4,1,\"pageViews\")),Collections.emptyList(),Collections.singletonList(new LongSumAggregatorFactory(\"pageViews\",\"pageViews\"))).iterator()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Row row4 = new MapBasedRow(JAN_3,event4)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ds.add(new DefaultDimensionSpec(\"gender\",\"gender\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Row result = iter.next()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "result = iter.next()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(2.5f,result.getMetric(\"movingAvgPageViews\").floatValue(),0.0f)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Assert.assertEquals(retval,caResult.getMetric(\"costPageViews\").floatValue(),0.0f)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Map<String,Object> event4 = new HashMap<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "Assert.assertEquals(1.4285715f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(new RowBucket(JAN_1,Collections.singletonList(row1)),new RowBucket(JAN_2,Collections.singletonList(row2)),new RowBucket(JAN_3,Arrays.asList(row3,row4))))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertEquals(JAN_1,caResult.getTimestamp())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Row caResult = iter.next()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "float retval = 14.5f@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "event1.put(\"pageViews\",10L)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "event2.put(\"gender\",\"m\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "caResult = iter.next()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(5.714285850f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertEquals(\"m\",(caResult.getDimension(\"gender\")).get(0))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "result = iter.next()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "caResult = iter.next()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Row row2 = new MapBasedRow(JAN_4,event2)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testMissingDaysInMiddle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(new RowBucket(JAN_1,Collections.singletonList(row1)),new RowBucket(JAN_2,Collections.emptyList()),new RowBucket(JAN_3,Collections.emptyList()),new RowBucket(JAN_4,Collections.singletonList(row2))))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Row row3 = new MapBasedRow(JAN_3,event3)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Assert.assertTrue(iter.hasNext())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertTrue(iter.hasNext())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(\"m\",(result.getDimension(\"gender\")).get(0))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "event4.put(\"gender\",\"f\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Row row1 = new MapBasedRow(JAN_1,event1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(iter.hasNext())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertTrue(iter.hasNext())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Map<String,Object> event1 = new HashMap<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25->61 [style = bold, label=""];
8->14 [style = bold, label=""];
38->47 [style = bold, label=""];
28->16 [style = bold, label=""];
49->60 [style = bold, label=""];
56->53 [style = bold, label=""];
22->61 [style = dashed, label="0"];
30->0 [style = solid, label="event2"];
0->8 [style = bold, label=""];
25->12 [style = bold, label=""];
6->2 [style = bold, label=""];
19->27 [style = bold, label=""];
18->36 [style = dashed, label="0"];
0->49 [style = bold, label=""];
39->40 [style = solid, label="event4"];
30->7 [style = bold, label=""];
15->26 [style = bold, label=""];
6->57 [style = dashed, label="0"];
44->30 [style = bold, label=""];
16->6 [style = bold, label=""];
18->21 [style = bold, label=""];
51->46 [style = bold, label=""];
39->37 [style = bold, label=""];
34->56 [style = bold, label=""];
55->38 [style = bold, label=""];
41->47 [style = solid, label="retval"];
9->55 [style = bold, label=""];
62->59 [style = bold, label=""];
7->34 [style = solid, label="event3"];
53->40 [style = bold, label=""];
29->5 [style = bold, label=""];
34->48 [style = solid, label="row3"];
22->9 [style = bold, label=""];
0->48 [style = solid, label="row2"];
30->19 [style = solid, label="event1"];
5->31 [style = bold, label=""];
42->52 [style = bold, label=""];
52->51 [style = bold, label=""];
59->36 [style = bold, label=""];
7->39 [style = bold, label=""];
12->18 [style = bold, label=""];
25->62 [style = dashed, label="0"];
14->23 [style = bold, label=""];
37->3 [style = bold, label=""];
9->42 [style = dashed, label="0"];
35->9 [style = bold, label=""];
61->42 [style = bold, label=""];
58->35 [style = bold, label=""];
1->13 [style = bold, label=""];
10->20 [style = bold, label=""];
44->11 [style = solid, label="event1"];
11->48 [style = solid, label="row1"];
9->4 [style = bold, label=""];
13->17 [style = bold, label=""];
1->9 [style = dashed, label="0"];
20->22 [style = bold, label=""];
48->58 [style = bold, label=""];
24->1 [style = bold, label=""];
7->3 [style = bold, label=""];
7->8 [style = solid, label="event2"];
40->48 [style = solid, label="row4"];
40->41 [style = bold, label=""];
17->38 [style = dashed, label="0"];
26->11 [style = bold, label=""];
11->19 [style = bold, label=""];
16->46 [style = dashed, label="0"];
36->33 [style = bold, label=""];
19->14 [style = solid, label="row1"];
31->30 [style = bold, label=""];
50->45 [style = bold, label=""];
12->59 [style = dashed, label="0"];
57->43 [style = bold, label=""];
13->55 [style = dashed, label="0"];
8->0 [style = dashed, label="0"];
46->57 [style = bold, label=""];
20->25 [style = dashed, label="0"];
23->24 [style = bold, label=""];
32->5 [style = bold, label=""];
27->0 [style = bold, label=""];
41->48 [style = bold, label=""];
2->25 [style = bold, label=""];
54->44 [style = bold, label=""];
4->28 [style = bold, label=""];
47->50 [style = bold, label=""];
5->30 [style = bold, label=""];
60->34 [style = bold, label=""];
8->14 [style = solid, label="row2"];
28->51 [style = dashed, label="0"];
3->15 [style = bold, label=""];
43->62 [style = bold, label=""];
45->25 [style = bold, label=""];
17->10 [style = bold, label=""];
}
