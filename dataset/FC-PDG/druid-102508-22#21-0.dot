digraph {
77 [style = filled, label = "Thread.sleep(10)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "maxTotalRows = 3L@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "kafkaProducer.commitTransaction()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2009/P1D\",0)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(6)))@@@71@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "SegmentDescriptor desc7 = sd(\"2013/P1D\",0)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "i++@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))))@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "int numToAdd = records.size() - 2@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "kafkaProducer.initTransactions()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "kafkaProducer.beginTransaction()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,currentOffsets)))))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "SegmentDescriptor desc5 = sd(\"2011/P1D\",1)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "int i = numToAdd@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,currentOffsets,ImmutableSet.of())),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,nextOffsets)))))@@@50@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,3L,1,0L))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "i < numToAdd@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Thread.sleep(10)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "SegmentDescriptor desc6 = sd(\"2012/P1D\",0)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(5)))@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "testIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "SegmentDescriptor desc4 = sd(\"2011/P1D\",0)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "SegmentDescriptor desc6 = sd(\"2012/P1D\",0)@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L,1,0L))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets) || checkpoint2.getPartitionSequenceNumberMap().equals(currentOffsets))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2010/P1D\",0)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(2)))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(2)))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "i < records.size()@@@38@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "insertData()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions))))@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(5)))@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "SegmentDescriptor desc7 = sd(\"2013/P1D\",0)@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "int i = 0@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,4L,1,2L))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "kafkaProducer.commitTransaction()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,0L))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))))@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "testIncrementalHandOffMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@31@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "i++@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(6)))@@@41@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,currentOffsets,ImmutableSet.of())))))@@@50@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "kafkaProducer.beginTransaction()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "kafkaProducer.initTransactions()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals(checkpoint2.getPartitionSequenceNumberMap(),nextOffsets)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32->35 [style = bold, label=""];
14->24 [style = bold, label=""];
80->49 [style = solid, label="desc7"];
27->38 [style = bold, label=""];
21->42 [style = bold, label=""];
28->6 [style = bold, label=""];
79->73 [style = solid, label="startPartitions"];
20->26 [style = bold, label=""];
2->49 [style = solid, label="startPartitions"];
81->73 [style = bold, label=""];
46->2 [style = bold, label=""];
10->49 [style = solid, label="currentOffsets"];
73->74 [style = bold, label=""];
1->27 [style = bold, label=""];
76->49 [style = solid, label="desc2"];
49->48 [style = bold, label=""];
16->60 [style = solid, label="desc1"];
54->51 [style = solid, label="desc6"];
49->0 [style = bold, label=""];
24->43 [style = bold, label=""];
39->42 [style = dotted, label="true"];
37->55 [style = bold, label=""];
80->49 [style = bold, label=""];
30->18 [style = bold, label=""];
38->39 [style = bold, label=""];
25->44 [style = bold, label=""];
7->9 [style = solid, label="endPartitions"];
56->54 [style = bold, label=""];
29->18 [style = bold, label=""];
47->49 [style = bold, label=""];
2->9 [style = solid, label="startPartitions"];
7->9 [style = bold, label=""];
13->51 [style = bold, label=""];
53->78 [style = dashed, label="0"];
30->18 [style = solid, label="i"];
2->53 [style = bold, label=""];
5->46 [style = dashed, label="0"];
49->63 [style = dashed, label="0"];
66->50 [style = bold, label=""];
33->49 [style = solid, label="desc5"];
53->41 [style = bold, label=""];
81->73 [style = solid, label="endPartitions"];
70->68 [style = bold, label=""];
16->51 [style = solid, label="desc1"];
41->82 [style = dashed, label="0"];
35->10 [style = bold, label=""];
22->45 [style = solid, label="nextOffsets"];
19->3 [style = bold, label=""];
10->33 [style = solid, label="currentOffsets"];
79->7 [style = solid, label="startPartitions"];
66->77 [style = dotted, label="true"];
64->0 [style = bold, label=""];
19->60 [style = solid, label="desc2"];
5->33 [style = bold, label=""];
22->48 [style = solid, label="nextOffsets"];
20->26 [style = dotted, label="true"];
39->8 [style = bold, label=""];
3->60 [style = solid, label="desc3"];
10->64 [style = solid, label="currentOffsets"];
76->10 [style = bold, label=""];
56->60 [style = solid, label="desc5"];
12->35 [style = bold, label=""];
47->63 [style = bold, label=""];
16->19 [style = bold, label=""];
71->75 [style = bold, label=""];
8->22 [style = bold, label=""];
34->59 [style = bold, label=""];
55->65 [style = dashed, label="0"];
9->12 [style = solid, label="task"];
18->4 [style = bold, label=""];
65->72 [style = bold, label=""];
15->31 [style = bold, label=""];
33->36 [style = bold, label=""];
48->64 [style = dashed, label="0"];
19->51 [style = solid, label="desc2"];
38->42 [style = solid, label="i"];
10->49 [style = solid, label="desc3"];
78->82 [style = bold, label=""];
26->20 [style = bold, label=""];
18->29 [style = dotted, label="true"];
2->71 [style = bold, label=""];
31->38 [style = solid, label="numToAdd"];
57->37 [style = bold, label=""];
68->79 [style = bold, label=""];
42->39 [style = bold, label=""];
45->36 [style = bold, label=""];
29->18 [style = solid, label="i"];
13->60 [style = solid, label="desc7"];
35->32 [style = bold, label=""];
50->9 [style = solid, label="consumerProps"];
47->75 [style = dashed, label="0"];
4->29 [style = bold, label=""];
37->9 [style = solid, label="baseSequenceName"];
20->1 [style = bold, label=""];
3->51 [style = solid, label="desc3"];
37->65 [style = bold, label=""];
54->60 [style = solid, label="desc6"];
31->34 [style = bold, label=""];
74->66 [style = bold, label=""];
77->66 [style = bold, label=""];
39->21 [style = bold, label=""];
51->40 [style = bold, label=""];
17->60 [style = solid, label="desc4"];
17->51 [style = solid, label="desc4"];
60->61 [style = bold, label=""];
10->5 [style = bold, label=""];
10->5 [style = solid, label="currentOffsets"];
22->58 [style = bold, label=""];
73->74 [style = solid, label="task"];
55->15 [style = bold, label=""];
37->73 [style = solid, label="baseSequenceName"];
3->17 [style = bold, label=""];
52->50 [style = bold, label=""];
32->49 [style = solid, label="desc1"];
9->12 [style = bold, label=""];
18->52 [style = bold, label=""];
75->7 [style = bold, label=""];
69->49 [style = solid, label="desc4"];
82->81 [style = bold, label=""];
30->29 [style = solid, label="i"];
66->77 [style = bold, label=""];
36->49 [style = solid, label="desc6"];
39->21 [style = dotted, label="true"];
2->63 [style = solid, label="startPartitions"];
36->47 [style = bold, label=""];
41->7 [style = bold, label=""];
33->20 [style = bold, label=""];
42->39 [style = solid, label="i"];
63->64 [style = bold, label=""];
50->46 [style = bold, label=""];
72->70 [style = bold, label=""];
50->7 [style = solid, label="currentOffsets"];
32->76 [style = bold, label=""];
13->51 [style = solid, label="desc7"];
31->18 [style = solid, label="numToAdd"];
36->80 [style = bold, label=""];
48->0 [style = bold, label=""];
50->2 [style = solid, label="currentOffsets"];
69->33 [style = bold, label=""];
54->13 [style = bold, label=""];
61->14 [style = bold, label=""];
62->37 [style = bold, label=""];
79->78 [style = bold, label=""];
6->16 [style = bold, label=""];
50->46 [style = solid, label="currentOffsets"];
70->73 [style = solid, label="consumerProps"];
10->69 [style = bold, label=""];
58->45 [style = bold, label=""];
56->51 [style = solid, label="desc5"];
44->11 [style = bold, label=""];
59->30 [style = bold, label=""];
67->37 [style = bold, label=""];
38->39 [style = solid, label="i"];
18->4 [style = dotted, label="true"];
17->56 [style = bold, label=""];
40->60 [style = bold, label=""];
43->25 [style = bold, label=""];
11->23 [style = bold, label=""];
10->48 [style = solid, label="currentOffsets"];
22->58 [style = solid, label="nextOffsets"];
0->28 [style = bold, label=""];
35->32 [style = dotted, label="true"];
}
