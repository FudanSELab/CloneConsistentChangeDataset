digraph {
3 [style = filled, label = "assertEquals(launcher.outputStream.type(),ProcessBuilder.Redirect.Type.PIPE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "testRedirectsSimple['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testRedirectsSimple['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "launcher.redirectOutput(ProcessBuilder.Redirect.PIPE)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(ProcessBuilder.Redirect.Type.PIPE,launcher.errorStream.type())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(launcher.errorStream.type(),ProcessBuilder.Redirect.Type.PIPE)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "launcher.redirectError(ProcessBuilder.Redirect.PIPE)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(launcher.outputStream.type(),ProcessBuilder.Redirect.Type.INHERIT)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "SparkLauncher launcher = new SparkLauncher()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "launcher.redirectError(ProcessBuilder.Redirect.PIPE).redirectError(ProcessBuilder.Redirect.INHERIT)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(ProcessBuilder.Redirect.Type.PIPE,launcher.outputStream.type())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertNotNull(launcher.outputStream)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(launcher.errorStream.type(),ProcessBuilder.Redirect.Type.INHERIT)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "launcher.redirectOutput(ProcessBuilder.Redirect.PIPE).redirectOutput(ProcessBuilder.Redirect.INHERIT)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testRedirectLastWins['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNotNull(launcher.errorStream)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
5->8 [style = bold, label=""];
9->0 [style = bold, label=""];
7->10 [style = bold, label=""];
1->15 [style = dashed, label="0"];
0->2 [style = bold, label=""];
6->0 [style = bold, label=""];
7->4 [style = bold, label=""];
12->0 [style = bold, label=""];
13->11 [style = bold, label=""];
11->15 [style = bold, label=""];
0->14 [style = bold, label=""];
2->14 [style = dashed, label="0"];
7->13 [style = dashed, label="0"];
3->8 [style = dashed, label="0"];
4->1 [style = bold, label=""];
2->7 [style = bold, label=""];
14->13 [style = bold, label=""];
4->11 [style = dashed, label="0"];
4->10 [style = dashed, label="0"];
10->1 [style = bold, label=""];
}
