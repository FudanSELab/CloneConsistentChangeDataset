digraph {
17 [style = filled, label = "Principal principal = mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "filterCapturesSessionIdWhenSessionIsUsed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "request.setUserPrincipal(principal)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(tracedPrincipal.getName()).isEqualTo(\"alice\")@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "given(principal.getName()).willReturn(\"alice\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "org.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository.findAll().get(0).getPrincipal()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(this.repository.findAll()).hasSize(1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(session.getId()).isNotNull()@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "this.filter.filter(MockServerWebExchange.from(MockServerHttpRequest.get(\"https://api.example.com\")),new WebFilterChain(){@Override public Mono<Void> filter(ServerWebExchange exchange){exchange.getSession().block(Duration.ofSeconds(30)).getAttributes().put(\"a\",\"alpha\")return Mono.empty()}}).block(Duration.ofSeconds(30))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "this.filter.filter(MockServerWebExchange.from(MockServerHttpRequest.get(\"https://api.example.com\")),null).block(Duration.ofSeconds(30))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(this.repository.findAll()).hasSize(1)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "filterCapturesSessionIdWhenSessionIsUsed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "MockHttpServletRequest request = new MockHttpServletRequest()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "this.filter.doFilter(request,new MockHttpServletResponse(),new MockFilterChain())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(session).isNotNull()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(tracedPrincipal).isNotNull()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "filterCapturesPrincipal['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(session.getId()).isNotNull()@@@13@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15->10 [style = bold, label=""];
12->15 [style = solid, label="request"];
2->3 [style = bold, label=""];
0->6 [style = dashed, label="0"];
11->4 [style = bold, label=""];
12->17 [style = bold, label=""];
3->16 [style = dashed, label="0"];
17->14 [style = solid, label="principal"];
1->0 [style = bold, label=""];
5->2 [style = bold, label=""];
5->11 [style = dashed, label="0"];
0->4 [style = bold, label=""];
6->8 [style = bold, label=""];
7->6 [style = bold, label=""];
14->15 [style = bold, label=""];
17->13 [style = bold, label=""];
9->12 [style = bold, label=""];
8->4 [style = bold, label=""];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
4->16 [style = bold, label=""];
2->4 [style = dashed, label="0"];
10->11 [style = bold, label=""];
}
