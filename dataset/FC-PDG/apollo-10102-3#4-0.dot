digraph {
7 [style = filled, label = "verify(restTemplate).getForObject(serviceThree + \"/\" + path,)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "verify(restTemplate).getForObject(serviceTwo + \"/\" + path,)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "when(restTemplate.postForEntity(serviceOne + \"/\" + path,request,)).thenThrow(socketTimeoutException)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "retryableRestTemplate.post(Env.DEV,path,request,)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testPostSocketTimeoutNotRetry['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(restTemplate.getForObject(serviceOne + \"/\" + path,)).thenThrow(socketTimeoutException)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "verify(restTemplate,times(0)).postForEntity(serviceTwo + \"/\" + path,request,)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "when(restTemplate.getForObject(serviceThree + \"/\" + path,)).thenThrow(connectTimeoutException)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "when(restTemplate.getForObject(serviceTwo + \"/\" + path,)).thenThrow(httpHostConnectException)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "verify(restTemplate,times(1)).exchange(eq(serviceOne + \"/\" + path),eq(HttpMethod.GET),any(),eq())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "verify(restTemplate,times(1)).exchange(eq(serviceTwo + \"/\" + path),eq(HttpMethod.GET),any(),eq())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "verify(restTemplate,times(1)).exchange(eq(serviceThree + \"/\" + path),eq(HttpMethod.GET),any(),eq())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "when(restTemplate.exchange(eq(serviceTwo + \"/\" + path),eq(HttpMethod.GET),any(),eq())).thenThrow(httpHostConnectException)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "retryableRestTemplate.get(Env.DEV,path,)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "when(restTemplate.exchange(eq(serviceOne + \"/\" + path),eq(HttpMethod.GET),any(),eq())).thenThrow(socketTimeoutException)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "when(restTemplate.exchange(eq(serviceThree + \"/\" + path),eq(HttpMethod.GET),any(),eq())).thenThrow(connectTimeoutException)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testAllServerDown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "verify(restTemplate).getForObject(serviceOne + \"/\" + path,)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testAllServerDown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "verify(restTemplate).postForEntity(serviceOne + \"/\" + path,request,)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "when(restTemplate.postForEntity(serviceTwo + \"/\" + path,request,)).thenReturn(entity)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->13 [style = bold, label=""];
10->15 [style = bold, label=""];
21->19 [style = bold, label=""];
3->21 [style = dashed, label="0"];
2->1 [style = bold, label=""];
1->15 [style = dashed, label="0"];
8->3 [style = bold, label=""];
0->16 [style = dashed, label="0"];
6->9 [style = dashed, label="0"];
3->11 [style = bold, label=""];
14->10 [style = bold, label=""];
1->0 [style = bold, label=""];
4->2 [style = bold, label=""];
18->2 [style = bold, label=""];
15->16 [style = bold, label=""];
11->9 [style = bold, label=""];
0->17 [style = dashed, label="0"];
2->10 [style = dashed, label="0"];
1->22 [style = dashed, label="0"];
8->13 [style = dashed, label="0"];
20->21 [style = bold, label=""];
3->5 [style = bold, label=""];
5->6 [style = bold, label=""];
13->3 [style = bold, label=""];
5->11 [style = dashed, label="0"];
0->8 [style = bold, label=""];
7->12 [style = dashed, label="0"];
22->17 [style = bold, label=""];
9->12 [style = bold, label=""];
6->7 [style = bold, label=""];
2->22 [style = bold, label=""];
5->19 [style = dashed, label="0"];
17->20 [style = bold, label=""];
}
