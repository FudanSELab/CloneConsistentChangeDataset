digraph {
18 [style = filled, label = "testSinkAutoFlush['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "server.close()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testSocketSink['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "final int port = server.getLocalPort()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Thread sinkRunner = new Thread(\"Test sink runner\"){@Override public void run(){try {simpleSink.invoke(TEST_MESSAGE + '')}catch (Throwable t) }}@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ServerSocket server = new ServerSocket(0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "error.get() != null@@@26@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "t.printStackTrace()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testSocketSink['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String value = rdr.readLine()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "BufferedReader rdr = new BufferedReader(new InputStreamReader(sk.getInputStream()))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final SocketClientSink<String> simpleSink = new SocketClientSink<>(host,port,simpleSchema,0,true)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final AtomicReference<Throwable> error = new AtomicReference<Throwable>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "sinkRunner.start()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(TEST_MESSAGE,value)@@@31@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Socket sk = server.accept()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "sinkRunner.join()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Throwable t = error.get()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "fail(\"Error in spawned thread: \" + t.getMessage())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "simpleSink.open(new Configuration())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "simpleSink.close()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
8->15 [style = solid, label="value"];
4->10 [style = bold, label=""];
14->2 [style = dotted, label="true"];
5->8 [style = bold, label=""];
7->11 [style = bold, label=""];
14->12 [style = dotted, label="true"];
10->19 [style = bold, label=""];
19->20 [style = bold, label=""];
9->17 [style = bold, label=""];
10->11 [style = solid, label="port"];
10->19 [style = solid, label="port"];
12->6 [style = bold, label=""];
10->7 [style = bold, label=""];
3->4 [style = bold, label=""];
6->15 [style = bold, label=""];
2->12 [style = bold, label=""];
11->0 [style = bold, label=""];
18->4 [style = bold, label=""];
0->1 [style = bold, label=""];
8->9 [style = bold, label=""];
14->15 [style = bold, label=""];
14->2 [style = bold, label=""];
17->13 [style = bold, label=""];
16->4 [style = bold, label=""];
20->7 [style = bold, label=""];
13->14 [style = bold, label=""];
9->13 [style = bold, label=""];
14->6 [style = dotted, label="true"];
}
