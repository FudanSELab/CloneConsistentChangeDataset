digraph {
4 [style = filled, label = "assertTrue(actual.isEmpty())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "QueryResponseHeader queryResponseHeader = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Collection<DatabasePacket<?>> actual = queryExecutor.execute()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(queryExecutor.getResponseType(),is(ResponseType.QUERY))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "when(textProtocolBackendHandler.execute()).thenReturn(new UpdateResponseHeader(mock()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "verify(queryResponseHeader).getQueryHeaders()@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(queryExecutor.getResponseType(),is(ResponseType.UPDATE))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertExecuteQueryAndReturnEmptyResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertNull(queryExecutor.getResponseType())@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(actual.size(),is(1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertExecuteUpdate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "when(textProtocolBackendHandler.execute()).thenReturn(queryResponseHeader)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertExecuteQueryAndReturnEmptyResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertThat(actual.size(),is(1))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "verify(queryResponseHeader).getQueryHeaders()@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
11->8 [style = bold, label=""];
10->2 [style = bold, label=""];
1->2 [style = bold, label=""];
2->6 [style = solid, label="queryResponseHeader"];
7->11 [style = bold, label=""];
3->15 [style = bold, label=""];
14->13 [style = bold, label=""];
13->3 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
15->16 [style = bold, label=""];
4->7 [style = dashed, label="0"];
4->5 [style = bold, label=""];
3->4 [style = bold, label=""];
2->6 [style = bold, label=""];
12->14 [style = bold, label=""];
8->9 [style = bold, label=""];
4->3 [style = dashed, label="0"];
}
