digraph {
19 [style = filled, label = "assertEquals(Optional.of(\"Lorem ipsum abstract\"),first.getField(StandardField.ABSTRACT))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(Optional.of(\"testJ\"),second.getField(StandardField.JOURNAL))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "second = tmp@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertEquals(Optional.of(\"testF\"),fifth.getCiteKeyOptional())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertEquals(Optional.of(\"testD\"),second.getField(StandardField.YEAR))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertEquals(5,bibEntries.size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "BibEntry fourth = bibEntries.get(3)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "first.getField(StandardField.TITLE).equals(Optional.of(\"Optical and photoelectric spectroscopy of photorefractive Sn$_2$P$_2$S$_6$ crystals\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testImportEntriesINSPEC['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<BibEntry> entries = importer.importDatabase(file,StandardCharsets.UTF_8).getDatabase().getEntries()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(StandardEntryType.Misc,second.getType())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(StandardEntryType.Article,second.getType())@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(Optional.of(\"2006\"),first.getField(StandardField.YEAR))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "BibEntry tmp = first@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testImportEntriesINSPEC['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "assertEquals(StandardEntryType.Misc,first.getType())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertEquals(Optional.of(\"testB0\"),third.getField(StandardField.JOURNAL))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertEquals(Optional.of(\"test8\"),second.getField(StandardField.DATE))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "BibEntry second = entries.get(1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertEquals(Optional.of(\"testP\"),fifth.getField(StandardField.PAGES))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "BibEntry first = bibEntries.get(0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Path file = Paths.get(.getResource(\"Endnote.entries.enw\").toURI())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(2,entries.size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(Optional.of(\"testR\"),fifth.getField(StandardField.DOI))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertEquals(Optional.of(\"testB2\"),second.getField(StandardField.BOOKTITLE))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertEquals(Optional.of(\"testX\"),fifth.getField(StandardField.ABSTRACT))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(Optional.of(\"4\"),first.getField(StandardField.NUMBER))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(Optional.of(\"testO1\"),fifth.getField(StandardField.NOTE))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(StandardEntryType.MastersThesis,fifth.getType())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Path file = Paths.get(.getResource(\"IsiImporterTestInspec.isi\").toURI())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "assertEquals(Optional.of(\"testI0\"),fourth.getField(StandardField.PUBLISHER))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(Optional.of(\"testB1\"),fourth.getField(StandardField.SERIES))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(Optional.of(\"testA0 and testA1\"),first.getField(StandardField.AUTHOR))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertEquals(Optional.of(\"testK\"),fifth.getField(StandardField.KEYWORDS))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(Optional.of(\"testE0 and testE1\"),first.getField(StandardField.EDITOR))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(Optional.of(\"testN\"),fifth.getField(StandardField.NUMBER))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(Optional.of(\"Optical and photoelectric spectroscopy of photorefractive Sn$_2$P$_2$S$_6$ crystals\"),second.getField(StandardField.TITLE))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(Optional.of(\"Second harmonic generation of continuous wave ultraviolet light and production of beta -BaB$_2$O$_4$ optical waveguides\"),first.getField(StandardField.TITLE))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "BibEntry first = entries.get(0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(StandardEntryType.Article,first.getType())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testImportEntries0['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(StandardEntryType.Article,third.getType())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(Optional.of(\"Aip\"),first.getField(StandardField.PUBLISHER))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertEquals(Optional.of(\"testV\"),fifth.getField(StandardField.VOLUME))@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertEquals(Optional.of(\"test7\"),second.getField(StandardField.EDITION))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(Optional.of(\"89\"),first.getField(StandardField.VOLUME))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(StandardEntryType.Book,fourth.getType())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(Optional.of(Month.JULY),first.getMonth())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertEquals(Optional.of(\"testC\"),second.getField(StandardField.ADDRESS))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(Optional.of(\"testU\"),fifth.getField(StandardField.URL))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "BibEntry third = bibEntries.get(2)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "BibEntry fifth = bibEntries.get(4)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertEquals(Optional.of(\"testT\"),first.getField(StandardField.TITLE))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "BibEntry second = bibEntries.get(1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Path file = Path.of(.getResource(\"IsiImporterTestInspec.isi\").toURI())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertEquals(Optional.of(\"testI1\"),fifth.getField(StandardField.SCHOOL))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(Optional.of(\"Applied Physics Letters\"),first.getField(StandardField.JOURNAL))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "first = second@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(Optional.of(\"Degl'Innocenti, R. and Guarino, A. and Poberaj, G. and Gunter, P.\"),first.getField(StandardField.AUTHOR))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "List<BibEntry> bibEntries = importer.importDatabase(file,StandardCharsets.UTF_8).getDatabase().getEntries()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54->51 [style = bold, label=""];
36->43 [style = bold, label=""];
16->15 [style = bold, label=""];
1->13 [style = solid, label="first"];
18->3 [style = bold, label=""];
35->27 [style = bold, label=""];
4->17 [style = bold, label=""];
48->36 [style = bold, label=""];
21->0 [style = bold, label=""];
16->24 [style = dashed, label="0"];
15->21 [style = bold, label=""];
28->53 [style = bold, label=""];
6->21 [style = bold, label=""];
44->29 [style = bold, label=""];
19->20 [style = bold, label=""];
6->13 [style = dotted, label="true"];
3->14 [style = bold, label=""];
34->47 [style = bold, label=""];
26->34 [style = bold, label=""];
8->34 [style = dashed, label="0"];
14->19 [style = bold, label=""];
33->41 [style = bold, label=""];
46->31 [style = bold, label=""];
55->38 [style = bold, label=""];
58->55 [style = bold, label=""];
22->23 [style = bold, label=""];
10->6 [style = bold, label=""];
13->16 [style = bold, label=""];
42->40 [style = bold, label=""];
11->18 [style = bold, label=""];
45->44 [style = bold, label=""];
25->59 [style = bold, label=""];
20->5 [style = bold, label=""];
47->49 [style = bold, label=""];
9->47 [style = dashed, label="0"];
40->33 [style = bold, label=""];
13->15 [style = solid, label="tmp"];
51->37 [style = bold, label=""];
56->45 [style = bold, label=""];
10->16 [style = solid, label="second"];
30->35 [style = bold, label=""];
1->49 [style = dashed, label="0"];
17->2 [style = bold, label=""];
57->39 [style = bold, label=""];
10->30 [style = dashed, label="0"];
49->30 [style = bold, label=""];
0->4 [style = bold, label=""];
13->27 [style = dashed, label="0"];
12->8 [style = bold, label=""];
6->13 [style = bold, label=""];
52->48 [style = bold, label=""];
53->32 [style = bold, label=""];
32->25 [style = bold, label=""];
8->9 [style = bold, label=""];
5->7 [style = bold, label=""];
38->46 [style = bold, label=""];
27->24 [style = bold, label=""];
37->52 [style = bold, label=""];
31->28 [style = bold, label=""];
9->1 [style = bold, label=""];
39->58 [style = bold, label=""];
50->54 [style = bold, label=""];
1->10 [style = bold, label=""];
23->9 [style = bold, label=""];
29->57 [style = bold, label=""];
41->50 [style = bold, label=""];
2->11 [style = bold, label=""];
43->56 [style = bold, label=""];
6->16 [style = dotted, label="true"];
8->23 [style = dashed, label="0"];
24->42 [style = bold, label=""];
6->15 [style = dotted, label="true"];
}
