digraph {
120 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@14@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
122 [style = filled, label = "intervalNo++@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTopNResults(segmentIds,intervals,results)).once()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "expectations@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "query instanceof SearchQuery@@@45@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "++i@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final Capture<? extends ResponseContext> context = Capture.newInstance()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
113 [style = filled, label = "final int numTimesToQuery@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "QueryPlus capturedQueryPlus = (QueryPlus)queryCapture.getValue()@@@118@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final List<Map<DruidServer,ServerExpectations>> serverExpectationList = populateTimeline(queryIntervals,expectedResults,i,mocks)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectations@@@71@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "intervals.add(expectation.getInterval())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "ServerExpectation expectation@@@27@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "ServerExpectation expectation@@@71@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "testQueryCaching['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
71 [style = filled, label = "query instanceof TimeBoundaryQuery@@@84@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "ServerExpectation expectation@@@38@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ServerExpectations expectations = entry.getValue()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "i < queryIntervals.size()@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "expectBySegment@@@120@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "intervals.add(expectation.getInterval())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "ServerExpectation expectation@@@24@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
111 [style = filled, label = "final Query query@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "ServerExpectation expectation@@@49@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "final Map<DruidServer,ServerExpectations> finalExpectation = serverExpectationList.get(serverExpectationList.size() - 1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "final Query query@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "QueryRunner queryable = expectations.getQueryRunner()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
118 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "List<Iterable<Result<TimeBoundaryResultValue>>> results = new ArrayList<>()@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "expectations@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "DruidServer server = entry.getKey()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "ServerExpectation expectation@@@38@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testQueryCaching['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
117 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andAnswer(new IAnswer<Sequence>(){@Override public Sequence answer(){return toFilteredQueryableTimeseriesResults((TimeseriesQuery)capture.getValue().getQuery(),segmentIds,queryIntervals,results)}}).times(0,1)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "expectations@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "results.add(expectation.getResults())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(true,capturedQuery.getContextValue(\"bySegment\"))@@@121@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
115 [style = filled, label = "int intervalNo = 0@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "results.add(expectation.getResults())@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "Object args@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
107 [style = filled, label = "testQueryCachingWithFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
104 [style = filled, label = "queryCaptures@@@117@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expectations@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "parseResults(queryIntervals,expectedResults,args)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@15@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeseriesResults(expectBySegment,segmentIds,intervals,results)).once()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "expectations@@@71@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
106 [style = filled, label = "expectations@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "results.add(expectation.getResults())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "final int numTimesToQuery@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "final QueryRunner runner@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "ServerExpectation expectation@@@60@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
60 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "Capture queryCapture@@@117@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "List<Iterable<ResultRow>> results = new ArrayList<>()@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "Object args@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "List<Object> mocks = new ArrayList<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final Query query@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "List<Capture> queryCaptures = new ArrayList<>()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "query instanceof GroupByQuery@@@56@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeBoundaryResults(segmentIds,intervals,results)).once()@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "results.add(expectation.getResults())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Capture queryCapture@@@117@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "intervals.add(expectation.getInterval())@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "intervals.add(expectation.getInterval())@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(expected,runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval))))))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "boolean expectBySegment@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "finalExpectation.entrySet()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "query instanceof TimeBoundaryQuery@@@67@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "results.add(expectation.getResults())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).times(0,1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).once()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "final Interval actualQueryInterval = new Interval(queryIntervals.get(0).getStart(),queryIntervals.get(i).getEnd())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
114 [style = filled, label = "intervalNo < i + 1@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "query instanceof TimeseriesQuery@@@21@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@15@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Query capturedQuery = capturedQueryPlus.getQuery()@@@119@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final Capture<? extends QueryPlus> capture = Capture.newInstance()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "ServerExpectation expectation@@@49@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "results.add(expectation.getResults())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "expectedResultsRangeStart = i@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "List<Iterable<Result<TopNResultValue>>> results = new ArrayList<>()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "final Iterable<Result<Object>> expected = new ArrayList<>()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "mocks.add(serverView)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "final List<Interval> queryIntervals = Lists.newArrayListWithCapacity(args.length / 2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(new MergeIterable(query instanceof GroupByQuery? ((GroupByQuery)query).getResultOrdering(): Comparators.naturalNullsFirst(),FunctionalIterable.create(new RangeIterable(expectedResultsRangeStart,expectedResultsRangeEnd)).transformCat(new Function<Integer,Iterable<Iterable<Result<Object>>>>(){@Override public Iterable<Iterable<Result<Object>>> apply(@Nullable Integer input){List<Iterable<Result<Object>>> retVal = new ArrayList<>()final Map<DruidServer,ServerExpectations> exps = serverExpectationList.get(input)for (ServerExpectations expectations : exps.values()){for (ServerExpectation expectation : expectations){retVal.add(expectation.getResults())}}return retVal}})),runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval)))),initializeResponseContext()))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@92@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableGroupByResults((GroupByQuery)query,segmentIds,intervals,results)).once()@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> filteredExpected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
121 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "List<Iterable<Result<SearchResultValue>>> results = new ArrayList<>()@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "intervals.add(expectation.getInterval())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "final List<SegmentId> segmentIds = new ArrayList<>()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@86@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
119 [style = filled, label = "Iterables.addAll((List)expected,filteredExpected.get(intervalNo))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
99 [style = filled, label = "boolean expectBySegment@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
80 [style = filled, label = "final int numTimesToQuery@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "queryCaptures.add(capture)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSearchResults(segmentIds,intervals,results)).once()@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "final int expectedResultsRangeStart@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertTrue(capturedQuery.getContextValue(\"bySegment\") == null || capturedQuery.getContextValue(\"bySegment\").equals(false))@@@124@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "final List<List<Iterable<Result<Object>>>> expectedResults = Lists.newArrayListWithCapacity(queryIntervals.size())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "query instanceof TopNQuery@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "expectations@@@60@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->18 [style = dotted, label="true"];
82->3 [style = bold, label=""];
95->80 [style = dotted, label="true"];
9->61 [style = bold, label=""];
36->59 [style = dotted, label="true"];
47->16 [style = dotted, label="true"];
94->24 [style = solid, label="query"];
36->29 [style = dotted, label="true"];
92->19 [style = solid, label="i"];
60->13 [style = bold, label=""];
24->4 [style = dotted, label="false"];
36->104 [style = dotted, label="true"];
27->105 [style = bold, label=""];
4->12 [style = dotted, label="true"];
114->2 [style = bold, label=""];
4->7 [style = dotted, label="true"];
22->33 [style = bold, label=""];
24->72 [style = dotted, label="true"];
117->48 [style = bold, label=""];
4->30 [style = dotted, label="true"];
7->6 [style = bold, label=""];
92->58 [style = solid, label="i"];
79->105 [style = dashed, label="0"];
114->122 [style = dotted, label="true"];
21->92 [style = solid, label="query"];
2->14 [style = solid, label="i"];
24->69 [style = dotted, label="true"];
16->60 [style = bold, label=""];
46->0 [style = bold, label=""];
48->115 [style = bold, label=""];
81->65 [style = bold, label=""];
12->30 [style = bold, label=""];
36->73 [style = dotted, label="true"];
36->115 [style = dotted, label="true"];
71->58 [style = bold, label=""];
6->82 [style = bold, label=""];
35->0 [style = bold, label=""];
24->22 [style = dotted, label="true"];
47->41 [style = dotted, label="true"];
50->15 [style = bold, label=""];
21->71 [style = solid, label="query"];
45->39 [style = dotted, label="true"];
115->122 [style = solid, label="intervalNo"];
41->82 [style = bold, label=""];
24->68 [style = dotted, label="true"];
94->4 [style = solid, label="query"];
80->118 [style = dashed, label="0"];
89->74 [style = solid, label="expectedResults"];
36->62 [style = dotted, label="true"];
107->116 [style = dotted, label="true"];
36->34 [style = dotted, label="true"];
24->96 [style = dotted, label="true"];
43->14 [style = solid, label="i"];
17->119 [style = dashed, label="0"];
86->48 [style = dashed, label="0"];
47->85 [style = dotted, label="true"];
27->79 [style = bold, label=""];
52->82 [style = bold, label=""];
36->44 [style = dotted, label="true"];
36->82 [style = dotted, label="true"];
45->42 [style = dotted, label="true"];
43->19 [style = solid, label="i"];
58->17 [style = bold, label=""];
27->106 [style = dotted, label="true"];
14->10 [style = bold, label=""];
65->42 [style = bold, label=""];
107->54 [style = bold, label=""];
27->79 [style = dotted, label="true"];
4->28 [style = dotted, label="true"];
50->22 [style = bold, label=""];
36->98 [style = dotted, label="true"];
36->40 [style = dotted, label="true"];
4->63 [style = dotted, label="true"];
19->92 [style = bold, label=""];
91->35 [style = bold, label=""];
109->67 [style = bold, label=""];
43->2 [style = solid, label="i"];
45->11 [style = dotted, label="true"];
45->53 [style = dotted, label="true"];
27->100 [style = dotted, label="true"];
36->10 [style = dotted, label="true"];
61->52 [style = bold, label=""];
27->121 [style = dotted, label="false"];
89->74 [style = bold, label=""];
53->82 [style = bold, label=""];
52->117 [style = dashed, label="0"];
61->77 [style = bold, label=""];
78->31 [style = bold, label=""];
94->92 [style = solid, label="query"];
1->63 [style = bold, label=""];
80->74 [style = solid, label="args"];
119->122 [style = bold, label=""];
20->31 [style = bold, label=""];
121->48 [style = bold, label=""];
36->20 [style = dotted, label="true"];
36->31 [style = dotted, label="true"];
77->9 [style = bold, label=""];
71->19 [style = dotted, label="false"];
94->27 [style = solid, label="query"];
32->53 [style = bold, label=""];
15->86 [style = bold, label=""];
48->71 [style = bold, label=""];
47->103 [style = dotted, label="true"];
24->72 [style = bold, label=""];
79->66 [style = bold, label=""];
93->74 [style = solid, label="args"];
27->121 [style = bold, label=""];
27->109 [style = dotted, label="true"];
52->86 [style = bold, label=""];
49->54 [style = bold, label=""];
115->114 [style = bold, label=""];
85->56 [style = bold, label=""];
4->1 [style = bold, label=""];
43->36 [style = solid, label="i"];
116->74 [style = solid, label="args"];
11->32 [style = bold, label=""];
36->88 [style = dotted, label="true"];
36->26 [style = dotted, label="true"];
44->10 [style = bold, label=""];
94->45 [style = solid, label="query"];
57->73 [style = bold, label=""];
29->14 [style = solid, label="mocks"];
73->91 [style = bold, label=""];
0->36 [style = bold, label=""];
47->8 [style = bold, label=""];
89->14 [style = solid, label="expectedResults"];
77->67 [style = bold, label=""];
10->82 [style = bold, label=""];
24->90 [style = dotted, label="true"];
105->109 [style = bold, label=""];
56->76 [style = bold, label=""];
13->85 [style = bold, label=""];
107->118 [style = dotted, label="true"];
30->28 [style = bold, label=""];
71->17 [style = dotted, label="true"];
24->25 [style = dotted, label="true"];
24->15 [style = dotted, label="true"];
59->92 [style = solid, label="actualQueryInterval"];
66->37 [style = bold, label=""];
45->101 [style = dotted, label="true"];
92->17 [style = solid, label="i"];
27->45 [style = bold, label=""];
115->114 [style = solid, label="intervalNo"];
95->99 [style = dotted, label="true"];
54->74 [style = solid, label="queryIntervals"];
34->59 [style = bold, label=""];
27->61 [style = dotted, label="true"];
43->92 [style = solid, label="i"];
39->11 [style = bold, label=""];
107->113 [style = dotted, label="true"];
27->105 [style = dotted, label="true"];
21->45 [style = solid, label="query"];
62->40 [style = bold, label=""];
55->92 [style = solid, label="numTimesToQuery"];
117->82 [style = bold, label=""];
45->81 [style = dotted, label="true"];
41->86 [style = bold, label=""];
95->94 [style = dotted, label="true"];
111->27 [style = solid, label="query"];
47->51 [style = dotted, label="true"];
27->66 [style = dotted, label="true"];
4->47 [style = bold, label=""];
36->57 [style = dotted, label="true"];
122->119 [style = solid, label="intervalNo"];
36->2 [style = dotted, label="true"];
92->36 [style = solid, label="i"];
71->2 [style = bold, label=""];
27->45 [style = dotted, label="false"];
24->33 [style = dotted, label="true"];
4->97 [style = dotted, label="true"];
107->111 [style = dotted, label="true"];
24->4 [style = bold, label=""];
86->48 [style = bold, label=""];
59->2 [style = solid, label="actualQueryInterval"];
47->13 [style = dotted, label="true"];
71->58 [style = dotted, label="true"];
45->65 [style = dotted, label="true"];
36->120 [style = dotted, label="true"];
36->114 [style = dotted, label="true"];
94->47 [style = solid, label="query"];
113->2 [style = solid, label="numTimesToQuery"];
2->36 [style = solid, label="i"];
95->54 [style = bold, label=""];
20->78 [style = bold, label=""];
4->1 [style = dotted, label="true"];
27->112 [style = dotted, label="true"];
91->35 [style = dotted, label="true"];
47->8 [style = dotted, label="false"];
107->108 [style = dotted, label="true"];
49->64 [style = dotted, label="true"];
91->46 [style = bold, label=""];
2->19 [style = bold, label=""];
45->83 [style = dotted, label="true"];
59->14 [style = bold, label=""];
27->52 [style = dotted, label="true"];
33->50 [style = bold, label=""];
54->14 [style = solid, label="queryIntervals"];
114->119 [style = dotted, label="true"];
92->57 [style = bold, label=""];
21->4 [style = solid, label="query"];
43->114 [style = solid, label="i"];
2->114 [style = solid, label="i"];
43->17 [style = solid, label="i"];
53->86 [style = bold, label=""];
35->57 [style = bold, label=""];
47->60 [style = dotted, label="true"];
43->36 [style = bold, label=""];
99->91 [style = solid, label="expectBySegment"];
47->76 [style = dotted, label="true"];
122->114 [style = solid, label="intervalNo"];
114->119 [style = bold, label=""];
74->43 [style = bold, label=""];
2->0 [style = bold, label=""];
4->23 [style = dotted, label="true"];
47->16 [style = bold, label=""];
37->77 [style = bold, label=""];
24->50 [style = dotted, label="true"];
36->92 [style = dotted, label="true"];
48->119 [style = solid, label="expected"];
94->71 [style = solid, label="query"];
45->81 [style = bold, label=""];
72->68 [style = bold, label=""];
4->47 [style = dotted, label="false"];
47->56 [style = dotted, label="true"];
71->2 [style = dotted, label="false"];
28->7 [style = bold, label=""];
36->0 [style = dotted, label="true"];
42->39 [style = bold, label=""];
43->58 [style = solid, label="i"];
49->55 [style = dotted, label="true"];
27->117 [style = dotted, label="true"];
66->109 [style = dashed, label="0"];
27->9 [style = dotted, label="true"];
121->82 [style = bold, label=""];
36->3 [style = dotted, label="true"];
4->75 [style = dotted, label="true"];
48->2 [style = solid, label="expected"];
3->110 [style = bold, label=""];
6->86 [style = bold, label=""];
46->57 [style = bold, label=""];
67->77 [style = bold, label=""];
36->27 [style = dotted, label="true"];
36->91 [style = dotted, label="true"];
45->32 [style = dotted, label="true"];
49->38 [style = dotted, label="true"];
36->29 [style = bold, label=""];
17->92 [style = bold, label=""];
32->39 [style = bold, label=""];
45->24 [style = dotted, label="false"];
3->62 [style = bold, label=""];
63->12 [style = bold, label=""];
21->47 [style = solid, label="query"];
8->82 [style = bold, label=""];
110->40 [style = bold, label=""];
27->67 [style = dotted, label="true"];
95->102 [style = dotted, label="true"];
14->44 [style = bold, label=""];
40->78 [style = solid, label="capture"];
115->119 [style = solid, label="intervalNo"];
29->34 [style = bold, label=""];
49->80 [style = dotted, label="true"];
45->24 [style = bold, label=""];
122->114 [style = bold, label=""];
36->48 [style = dotted, label="true"];
92->14 [style = solid, label="i"];
36->87 [style = dotted, label="true"];
15->82 [style = bold, label=""];
21->24 [style = solid, label="query"];
76->41 [style = bold, label=""];
38->91 [style = solid, label="expectBySegment"];
54->89 [style = bold, label=""];
36->84 [style = dotted, label="true"];
21->27 [style = solid, label="query"];
3->92 [style = solid, label="expectations"];
80->92 [style = solid, label="numTimesToQuery"];
27->77 [style = dotted, label="true"];
45->70 [style = dotted, label="true"];
62->110 [style = dashed, label="0"];
76->85 [style = bold, label=""];
91->46 [style = dotted, label="false"];
36->86 [style = dotted, label="true"];
36->71 [style = dotted, label="true"];
49->21 [style = dotted, label="true"];
8->86 [style = bold, label=""];
77->117 [style = bold, label=""];
40->20 [style = bold, label=""];
36->14 [style = dotted, label="true"];
4->6 [style = dotted, label="true"];
25->22 [style = bold, label=""];
27->37 [style = dotted, label="true"];
31->27 [style = bold, label=""];
95->93 [style = dotted, label="true"];
36->78 [style = dotted, label="true"];
36->110 [style = dotted, label="true"];
7->30 [style = bold, label=""];
68->25 [style = bold, label=""];
47->5 [style = dotted, label="true"];
}
