digraph {
5 [style = filled, label = "IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state,IndicesOptions.lenientExpandOpen())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "IndexNameExpressionResolver.WildcardExpressionResolver resolver = new IndexNameExpressionResolver.WildcardExpressionResolver()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"-kuku\"))),equalTo(newHashSet(\"-kuku\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"test*\",\"-testYYY\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\")))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testX*\",\"testYYY\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Metadata.Builder mdBuilder = Metadata.builder().put(indexBuilder(\"testXXX\")).put(indexBuilder(\"testXYY\")).put(indexBuilder(\"testYYY\"))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"_all\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testYYY\",\"testX*\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "MetaData.Builder mdBuilder = MetaData.builder().put(indexBuilder(\"testXXX\").putAlias(AliasMetaData.builder(\"alias1\")).putAlias(AliasMetaData.builder(\"alias2\"))).put(indexBuilder(\"testXYY\").putAlias(AliasMetaData.builder(\"alias2\"))).put(indexBuilder(\"testYYY\").putAlias(AliasMetaData.builder(\"alias3\"))).put(indexBuilder(\"kuku\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testYY*\",\"alias*\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testConvertWildcardsTests['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "MetaData.Builder mdBuilder = MetaData.builder().put(indexBuilder(\"testXXX\")).put(indexBuilder(\"testXYY\")).put(indexBuilder(\"testYYY\"))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
15->10 [style = bold, label=""];
5->10 [style = solid, label="context"];
7->1 [style = bold, label=""];
5->9 [style = solid, label="context"];
5->12 [style = solid, label="context"];
2->1 [style = bold, label=""];
0->2 [style = bold, label=""];
5->15 [style = bold, label=""];
11->12 [style = bold, label=""];
2->7 [style = dashed, label="0"];
12->9 [style = bold, label=""];
2->5 [style = solid, label="state"];
8->7 [style = bold, label=""];
4->0 [style = bold, label=""];
5->3 [style = solid, label="context"];
7->5 [style = solid, label="state"];
0->13 [style = dashed, label="0"];
6->8 [style = bold, label=""];
3->15 [style = dashed, label="0"];
0->8 [style = dashed, label="0"];
14->13 [style = bold, label=""];
5->11 [style = solid, label="context"];
5->15 [style = solid, label="context"];
13->2 [style = bold, label=""];
10->11 [style = bold, label=""];
}
