digraph {
22 [style = filled, label = "List<QueryRunner<ResultRow>> singleSegmentRunners = new ArrayList<>()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "bySegmentResults.add(singleSegmentResult)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "ExecutorService exec = Executors.newCachedThreadPool()@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<Result> bySegmentResults = new ArrayList<>()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ExecutorService exec = Executors.newCachedThreadPool()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "QueryRunner<Row> mergeRunner = factory.getToolchest().mergeResults(runner)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setLimit(limit)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "int segmentCount = 32@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "QueryToolChest toolChest = factory.getToolchest()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final int limit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testBySegmentResultsUnOptimizedDimextraction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "i++@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i++@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"automotive\",\"rows\",2L,\"idx\",269L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"entertainment\",\"rows\",2L,\"idx\",319L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health\",\"rows\",2L,\"idx\",216L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news\",\"rows\",2L,\"idx\",221L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"technology\",\"rows\",2L,\"idx\",177L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"travel\",\"rows\",2L,\"idx\",243L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "int segmentCount = 32@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final GroupByQuery fullQuery = builder.build()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "singleSegmentRunners.add(toolChest.preMergeQueryDecoration(runner))@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,limit),mergeRunner.run(QueryPlus.wrap(fullQuery)),StringUtils.format(\"limit: %d\",limit))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "TestHelper.assertExpectedObjects(bySegmentResults,theRunner.run(QueryPlus.wrap(fullQuery)),\"bySegment\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Result<BySegmentResultValue> singleSegmentResult = new Result<>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new BySegmentResultValueClass<>(Collections.singletonList(makeRow(fullQuery,\"2011-04-01\",\"alias\",\"mezzanine0\",\"rows\",6L,\"idx\",4420L)),QueryRunnerTestHelper.segmentId.toString(),Intervals.of(\"2011-04-02T00:00:00.000Z/2011-04-04T00:00:00.000Z\")))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "doTestMergeResultsWithValidLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testBySegmentResultsUnOptimizedDimextraction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "QueryRunner theRunner = toolChest.postMergeQueryDecoration(new FinalizeResultsQueryRunner<>(toolChest.mergeResults(factory.mergeRunners(Executors.newCachedThreadPool(),singleSegmentRunners)),toolChest))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(ImmutableMap.of(\"mezzanine\",\"mezzanine0\"),false),false,null,false,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setDimFilter(new SelectorDimFilter(\"quality\",\"mezzanine\",null)).overrideContext(ImmutableMap.of(\"bySegment\",true))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "int i = 0@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final GroupByQuery fullQuery = builder.build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "exec.shutdownNow()@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "cannotVectorize()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "List<Result> bySegmentResults = new ArrayList<>()@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "QueryToolChest toolChest = factory.getToolchest()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(ImmutableMap.of(\"mezzanine\",\"mezzanine0\"),false),false,null,false,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setDimFilter(new SelectorDimFilter(\"quality\",\"mezzanine\",null)).setContext(ImmutableMap.of(\"bySegment\",true))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "final GroupByQuery fullQuery = builder.build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "i < segmentCount@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i < segmentCount@@@16@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int i = 0@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int i = 0@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->3 [style = bold, label=""];
5->4 [style = solid, label="toolChest"];
18->10 [style = solid, label="i"];
25->23 [style = solid, label="fullQuery"];
8->33 [style = dashed, label="0"];
11->14 [style = solid, label="fullQuery"];
10->3 [style = dotted, label="true"];
25->15 [style = solid, label="fullQuery"];
25->6 [style = bold, label=""];
12->9 [style = bold, label=""];
34->29 [style = solid, label="fullQuery"];
9->10 [style = solid, label="i"];
20->17 [style = solid, label="i"];
19->20 [style = solid, label="segmentCount"];
13->17 [style = bold, label=""];
28->21 [style = bold, label=""];
18->3 [style = dotted, label="true"];
20->13 [style = dotted, label="true"];
12->22 [style = bold, label=""];
6->17 [style = solid, label="segmentCount"];
17->20 [style = bold, label=""];
30->29 [style = solid, label="limit"];
23->24 [style = solid, label="singleSegmentResult"];
2->20 [style = bold, label=""];
6->13 [style = solid, label="singleSegmentResult"];
12->14 [style = solid, label="toolChest"];
10->26 [style = bold, label=""];
21->25 [style = bold, label=""];
19->6 [style = bold, label=""];
18->3 [style = solid, label="i"];
6->10 [style = solid, label="segmentCount"];
17->20 [style = solid, label="i"];
1->11 [style = bold, label=""];
19->18 [style = solid, label="segmentCount"];
3->10 [style = bold, label=""];
3->10 [style = solid, label="i"];
31->30 [style = dotted, label="true"];
22->18 [style = bold, label=""];
12->4 [style = solid, label="singleSegmentRunners"];
31->33 [style = bold, label=""];
10->26 [style = dotted, label="true"];
14->15 [style = bold, label=""];
34->35 [style = bold, label=""];
2->17 [style = solid, label="i"];
18->7 [style = bold, label=""];
9->18 [style = solid, label="i"];
24->13 [style = bold, label=""];
22->14 [style = solid, label="singleSegmentRunners"];
30->33 [style = solid, label="limit"];
10->18 [style = bold, label=""];
4->14 [style = bold, label=""];
20->13 [style = bold, label=""];
16->8 [style = bold, label=""];
20->17 [style = dotted, label="true"];
6->23 [style = bold, label=""];
26->3 [style = bold, label=""];
12->32 [style = dashed, label="0"];
35->32 [style = bold, label=""];
2->15 [style = solid, label="bySegmentResults"];
7->4 [style = bold, label=""];
20->1 [style = bold, label=""];
20->13 [style = solid, label="i"];
2->20 [style = solid, label="i"];
18->10 [style = dotted, label="true"];
11->5 [style = bold, label=""];
17->12 [style = bold, label=""];
9->18 [style = bold, label=""];
18->10 [style = bold, label=""];
12->22 [style = dashed, label="0"];
23->2 [style = bold, label=""];
17->24 [style = dotted, label="true"];
20->17 [style = bold, label=""];
13->17 [style = solid, label="i"];
0->14 [style = solid, label="bySegmentResults"];
8->19 [style = bold, label=""];
10->18 [style = solid, label="i"];
0->2 [style = bold, label=""];
6->0 [style = bold, label=""];
8->21 [style = dashed, label="0"];
35->29 [style = solid, label="expectedResults"];
32->29 [style = bold, label=""];
17->24 [style = bold, label=""];
5->12 [style = bold, label=""];
10->4 [style = bold, label=""];
17->13 [style = dotted, label="true"];
15->27 [style = bold, label=""];
33->34 [style = bold, label=""];
6->23 [style = dashed, label="0"];
}
