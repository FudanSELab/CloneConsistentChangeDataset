digraph {
0 [style = filled, label = "assertContains(\"hello world\",contents)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "buildRule.executeTarget(\"replaceregex\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertContains(\"found WhiteSpace\",contents)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertContains(\"Found digits (1234(\",contents)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertContains(\"World here\",contents)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertContains(\"dog Cat dog\",contents)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(contents,containsString(\"hello world\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/filtercontainsregex\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(contents,containsString(\"World here\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(contents,not(containsString(\"this is the moon\")))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "testReplaceRegex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertContains(\"world world world world\",contents)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "buildRule.executeTarget(\"filtercontainsregex\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertNotContains(\"this is the moon\",contents)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "buildRule.executeTarget(\"hasregex\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testFilterContainsRegex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertNotContains(\"This is a line with digits\",contents)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testFilterContainsRegex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assumeTrue(\"Regex not present\",getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertContains(\"moon Sun Sun\",contents)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
19->16 [style = solid, label="contents"];
7->0 [style = solid, label="contents"];
7->5 [style = solid, label="contents"];
19->13 [style = solid, label="contents"];
19->17 [style = solid, label="contents"];
19->12 [style = solid, label="contents"];
11->6 [style = bold, label=""];
18->19 [style = bold, label=""];
0->15 [style = dashed, label="0"];
5->9 [style = dashed, label="0"];
7->0 [style = bold, label=""];
20->6 [style = bold, label=""];
9->10 [style = bold, label=""];
7->4 [style = solid, label="contents"];
7->8 [style = bold, label=""];
15->16 [style = bold, label=""];
19->15 [style = solid, label="contents"];
7->9 [style = solid, label="contents"];
7->8 [style = solid, label="contents"];
3->18 [style = bold, label=""];
5->16 [style = dashed, label="0"];
12->13 [style = bold, label=""];
13->17 [style = bold, label=""];
1->6 [style = bold, label=""];
3->2 [style = bold, label=""];
7->19 [style = dashed, label="0"];
14->12 [style = bold, label=""];
5->4 [style = bold, label=""];
8->9 [style = bold, label=""];
2->18 [style = dashed, label="0"];
16->14 [style = bold, label=""];
0->8 [style = dashed, label="0"];
4->14 [style = dashed, label="0"];
7->10 [style = solid, label="contents"];
19->14 [style = solid, label="contents"];
2->7 [style = bold, label=""];
19->15 [style = bold, label=""];
4->10 [style = dashed, label="0"];
0->5 [style = bold, label=""];
}
