digraph {
21 [style = filled, label = "to.assertNoErrors()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "normalBehavior['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Flowable<String> source = Flowable.fromIterable(Arrays.asList(\" foo\",\" FoO \",\"baR \",\"foO \",\" Baz \",\" qux \",\" bar\",\" BAR \",\"FOO \",\"baz \",\" bAZ \",\" fOo \"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Function<String,String> keysel = new Function<String,String>(){@Override public String apply(String t1){return t1.trim().toLowerCase()}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "System.out.println(\"ts .get \" + to.values())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Observable<String> source = Observable.fromIterable(Arrays.asList(\" foo\",\" FoO \",\"baR \",\"foO \",\" Baz \",\" qux \",\" bar\",\" BAR \",\"FOO \",\"baz \",\" bAZ \",\" fOo \"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Flowable<String> m = source.groupBy(keysel,valuesel).flatMap(new Function<GroupedFlowable<String,String>,Publisher<String>>(){@Override public Publisher<String> apply(final GroupedFlowable<String,String> g){System.out.println(\"---------- NEXT: \" + g.getKey())return g.take(2).map(new Function<String,String>(){@Override public String apply(String v){System.out.println(v)return g.getKey() + \"-\" + count++}})}})@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Function<String,String> valuesel = new Function<String,String>(){@Override public String apply(String t1){return t1 + t1}}@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "m.subscribe(ts)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<>()@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(to.values(),Arrays.asList(\"foo-0\",\"foo-1\",\"bar-0\",\"foo-0\",\"baz-0\",\"qux-0\",\"bar-1\",\"bar-0\",\"foo-1\",\"baz-1\",\"baz-0\",\"foo-0\"))@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TestObserver<String> to = new TestObserver<String>()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Observable<String> m = source.groupBy(keysel,valuesel).flatMap(new Function<GroupedObservable<String,String>,Observable<String>>(){@Override public Observable<String> apply(final GroupedObservable<String,String> g){System.out.println(\"---------- NEXT: \" + g.getKey())return g.take(2).map(new Function<String,String>(){@Override public String apply(String v){System.out.println(v)return g.getKey() + \"-\" + count++}})}})@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "System.out.println(\"ts .get \" + ts.values())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "normalBehavior['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(ts.values(),Arrays.asList(\"foo-0\",\"foo-1\",\"bar-0\",\"foo-0\",\"baz-0\",\"qux-0\",\"bar-1\",\"bar-0\",\"foo-1\",\"baz-1\",\"baz-0\",\"foo-0\"))@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<String>()@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "normalBehavior['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "m.subscribe(to)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ts.assertNoErrors()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "to.awaitDone(5,TimeUnit.SECONDS)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
16->15 [style = bold, label=""];
17->19 [style = solid, label="to"];
6->21 [style = dashed, label="0"];
0->9 [style = bold, label=""];
1->8 [style = bold, label=""];
7->18 [style = dashed, label="0"];
0->13 [style = bold, label=""];
3->1 [style = bold, label=""];
9->2 [style = bold, label=""];
11->1 [style = bold, label=""];
1->15 [style = dashed, label="0"];
2->17 [style = dashed, label="0"];
2->4 [style = bold, label=""];
2->4 [style = solid, label="ts"];
17->19 [style = bold, label=""];
21->18 [style = bold, label=""];
5->20 [style = dashed, label="0"];
20->21 [style = bold, label=""];
8->0 [style = bold, label=""];
2->12 [style = dashed, label="0"];
13->17 [style = bold, label=""];
10->5 [style = bold, label=""];
5->6 [style = bold, label=""];
19->14 [style = bold, label=""];
12->4 [style = bold, label=""];
12->4 [style = solid, label="ts"];
9->13 [style = dashed, label="0"];
4->19 [style = dashed, label="0"];
9->12 [style = bold, label=""];
6->7 [style = bold, label=""];
15->8 [style = bold, label=""];
10->14 [style = dashed, label="0"];
14->20 [style = bold, label=""];
}
