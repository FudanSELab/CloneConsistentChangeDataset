digraph {
18 [style = filled, label = "assertEquals(Optional.of(\"2006\"),first.getField(\"year\"))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "first.getField(\"title\").equals(Optional.of(\"Optical and photoelectric spectroscopy of photorefractive Sn$_2$P$_2$S$_6$ crystals\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertEquals(StandardEntryType.Article,first.getType())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertEquals(Optional.of(\"Optical and photoelectric spectroscopy of photorefractive Sn$_2$P$_2$S$_6$ crystals\"),second.getField(StandardField.TITLE))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(\"article\",second.getType())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(Optional.of(\"Aip\"),first.getField(\"publisher\"))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "first = second@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "BibEntry second = entries.get(1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Path file = Paths.get(.getResource(\"IsiImporterTestWOS.isi\").toURI())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(Optional.of(\"Degl'Innocenti, R. and Guarino, A. and Poberaj, G. and Gunter, P.\"),first.getField(StandardField.AUTHOR))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertEquals(Optional.of(\"Second harmonic generation of continuous wave ultraviolet light and production of beta -BaB$_2$O$_4$ optical waveguides\"),first.getField(StandardField.TITLE))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(StandardEntryType.Article,second.getType())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testImportEntriesINSPEC['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(Optional.of(\"#jul#\"),first.getField(\"month\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertEquals(Optional.of(\"#jul#\"),first.getField(StandardField.MONTH))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "first.getField(StandardField.TITLE).equals(Optional.of(\"Optical and photoelectric spectroscopy of photorefractive Sn$_2$P$_2$S$_6$ crystals\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertEquals(Optional.of(\"Optical and photoelectric spectroscopy of photorefractive Sn2P2S6 crystals\"),first.getField(\"title\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(2,entries.size())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(Optional.of(\"2006\"),first.getField(StandardField.YEAR))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "testImportEntriesINSPEC['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Path file = Paths.get(.getResource(\"IsiImporterTestInspec.isi\").toURI())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(Optional.of(\"Second harmonic generation of continuous wave ultraviolet light and production of beta -BaB$_2$O$_4$ optical waveguides\"),first.getField(\"title\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "assertEquals(Optional.of(\"89\"),first.getField(StandardField.VOLUME))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(Optional.of(\"89\"),first.getField(\"volume\"))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "assertEquals(Optional.of(\"Optical waveguides in Sn2P2S6 by low fluence MeV He+ ion implantation\"),second.getField(\"title\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(Optional.of(\"4\"),first.getField(\"number\"))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertEquals(Optional.of(\"4\"),first.getField(StandardField.NUMBER))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(Optional.of(\"Lorem ipsum abstract\"),first.getField(\"abstract\"))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "BibEntry tmp = first@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(Optional.of(\"Applied Physics Letters\"),first.getField(StandardField.JOURNAL))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(Optional.of(\"Optical and photoelectric spectroscopy of photorefractive Sn$_2$P$_2$S$_6$ crystals\"),second.getField(\"title\"))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "second = tmp@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(Optional.of(\"Aip\"),first.getField(StandardField.PUBLISHER))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(Optional.of(\"Degl'Innocenti, R. and Guarino, A. and Poberaj, G. and Gunter, P.\"),first.getField(\"author\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "testImportEntriesWOS['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(Optional.of(\"Applied Physics Letters\"),first.getField(\"journal\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"article\",first.getType())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "assertEquals(Optional.of(\"Journal of Physics-condensed Matter\"),first.getField(\"journal\"))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "List<BibEntry> entries = importer.importDatabase(file,StandardCharsets.UTF_8).getDatabase().getEntries()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "BibEntry first = entries.get(0)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(Optional.of(\"Lorem ipsum abstract\"),first.getField(StandardField.ABSTRACT))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9->22 [style = bold, label=""];
14->2 [style = dotted, label="true"];
2->20 [style = bold, label=""];
25->28 [style = bold, label=""];
31->23 [style = bold, label=""];
7->23 [style = dashed, label="0"];
39->13 [style = bold, label=""];
8->18 [style = bold, label=""];
21->1 [style = solid, label="first"];
1->2 [style = solid, label="tmp"];
27->30 [style = bold, label=""];
4->13 [style = bold, label=""];
26->34 [style = bold, label=""];
33->4 [style = bold, label=""];
5->24 [style = dashed, label="0"];
8->32 [style = dashed, label="0"];
12->31 [style = dashed, label="0"];
14->22 [style = dashed, label="0"];
34->31 [style = bold, label=""];
19->11 [style = bold, label=""];
9->20 [style = bold, label=""];
6->0 [style = bold, label=""];
4->39 [style = dashed, label="0"];
15->19 [style = bold, label=""];
38->39 [style = bold, label=""];
3->4 [style = bold, label=""];
12->7 [style = bold, label=""];
14->1 [style = bold, label=""];
1->17 [style = bold, label=""];
28->32 [style = bold, label=""];
29->26 [style = bold, label=""];
35->25 [style = bold, label=""];
32->29 [style = bold, label=""];
22->2 [style = dotted, label="true"];
15->35 [style = dashed, label="0"];
9->17 [style = solid, label="second"];
14->17 [style = dotted, label="true"];
11->28 [style = dashed, label="0"];
16->34 [style = dashed, label="0"];
7->5 [style = bold, label=""];
21->9 [style = bold, label=""];
23->24 [style = bold, label=""];
20->40 [style = bold, label=""];
22->1 [style = dotted, label="true"];
10->26 [style = dashed, label="0"];
5->6 [style = bold, label=""];
17->2 [style = bold, label=""];
18->10 [style = bold, label=""];
10->16 [style = bold, label=""];
22->20 [style = bold, label=""];
40->36 [style = bold, label=""];
6->27 [style = dashed, label="0"];
19->36 [style = dashed, label="0"];
0->30 [style = dashed, label="0"];
9->14 [style = bold, label=""];
11->8 [style = bold, label=""];
11->37 [style = dashed, label="0"];
22->17 [style = dotted, label="true"];
36->37 [style = bold, label=""];
22->1 [style = bold, label=""];
20->35 [style = bold, label=""];
14->1 [style = dotted, label="true"];
19->25 [style = dashed, label="0"];
13->21 [style = bold, label=""];
20->15 [style = bold, label=""];
16->12 [style = bold, label=""];
24->27 [style = bold, label=""];
14->20 [style = bold, label=""];
18->29 [style = dashed, label="0"];
}
