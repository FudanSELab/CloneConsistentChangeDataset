digraph {
4 [style = filled, label = "Assert.assertEquals(1,loadQueuePeon.getTimedOutSegments().size())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "LoadQueuePeonTester['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final CountDownLatch segmentLoadedSignal = new CountDownLatch(1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final CountDownLatch loadRequestSignal = new CountDownLatch(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "loadQueuePeon = new CuratorLoadQueuePeon(curator,LOAD_QUEUE_PATH,jsonMapper,Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),Execs.singleThreaded(\"test_load_queue_peon-%d\"),new TestDruidCoordinatorConfig(null,null,null,new Duration(1),null,null,10,new Duration(\"PT1s\")))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(1,loadQueuePeon.getSegmentsToLoad().size())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "loadQueueCache.getListenable().addListener(new PathChildrenCacheListener(){@Override public void childEvent(CuratorFramework client,PathChildrenCacheEvent event){switch (event.getType()) {case CHILD_ADDED:loadRequestSignal.countDown()breakcase CHILD_REMOVED:loadRequestRemoveSignal.countDown()breakdefault:}})@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "super(null,null,null,Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),null,new TestDruidCoordinatorConfig(null,null,null,new Duration(1),null,null,10,null,new Duration(\"PT1s\")))@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(segment,((SegmentChangeRequestLoad)jsonMapper.readValue(curator.getData().decompressed().forPath(loadRequestPath),)).getSegment())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH,segment.getId().toString())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "loadQueuePeon.loadSegment(segment,new LoadPeonCallback(){@Override public void execute(){segmentLoadedSignal.countDown()delayedSegmentLoadedSignal.countDown()}})@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(1200L,loadQueuePeon.getLoadQueueSize())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "loadQueueCache.start()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(0,loadQueuePeon.getSegmentsToLoad().size())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "curator.delete().guaranteed().forPath(loadRequestPath)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(0L,loadQueuePeon.getLoadQueueSize())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testFailAssignForLoadDropTimeout['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(0,loadQueuePeon.getTimedOutSegments().size())@@@42@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "loadQueuePeon = new CuratorLoadQueuePeon(curator,LOAD_QUEUE_PATH,jsonMapper,Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),Execs.singleThreaded(\"test_load_queue_peon-%d\"),new TestDruidCoordinatorConfig(null,null,null,null,new Duration(1),null,null,null,null,10,new Duration(\"PT1s\")))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testFailAssignForLoadDropTimeout['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "loadQueuePeon.start()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
15->13 [style = solid, label="segmentLoadedSignal"];
1->8 [style = bold, label=""];
7->0 [style = solid, label="loadRequestPath"];
14->22 [style = bold, label=""];
18->19 [style = bold, label=""];
26->9 [style = bold, label=""];
11->12 [style = bold, label=""];
3->15 [style = bold, label=""];
15->16 [style = bold, label=""];
19->6 [style = bold, label=""];
7->1 [style = solid, label="loadRequestPath"];
5->25 [style = bold, label=""];
5->10 [style = solid, label="loadRequestRemoveSignal"];
4->0 [style = bold, label=""];
20->10 [style = bold, label=""];
22->4 [style = bold, label=""];
9->8 [style = solid, label="segment"];
17->24 [style = bold, label=""];
21->9 [style = bold, label=""];
3->23 [style = solid, label="loadRequestSignal"];
25->12 [style = bold, label=""];
7->23 [style = bold, label=""];
12->18 [style = bold, label=""];
11->25 [style = dashed, label="0"];
16->5 [style = bold, label=""];
23->1 [style = bold, label=""];
9->3 [style = bold, label=""];
9->6 [style = solid, label="segment"];
0->20 [style = bold, label=""];
10->2 [style = bold, label=""];
5->11 [style = bold, label=""];
28->27 [style = bold, label=""];
16->20 [style = solid, label="delayedSegmentLoadedSignal"];
6->7 [style = bold, label=""];
13->14 [style = bold, label=""];
8->13 [style = bold, label=""];
}
