digraph {
20 [style = filled, label = "TreeMap<Integer,Map<Integer,Long>> checkpoints = new TreeMap<>()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id2\"),anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final Task id1 = createKafkaIndexTask(\"id1\",DATASOURCE,0,new KafkaPartitions(topic,ImmutableMap.of(0,0L,1,0L,2,0L)),new KafkaPartitions(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "verifyAll()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Thread.sleep(100)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final TreeMap<Integer,Map<Integer,Long>> checkpoints = new TreeMap<>()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expect(taskClient.getStatusAsync(\"id3\")).andReturn(Futures.immediateFuture(KafkaIndexTask.Status.READING))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expect(taskStorage.getTask(\"id3\")).andReturn(Optional.of(id3)).anyTimes()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "verifyAll()@@@41@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertNull(serviceEmitter.getExceptionClass())@@@49@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "expect(taskRunner.getRunningTasks()).andReturn(workItems).anyTimes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "supervisor.getNoticesQueueSize() > 0@@@43@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "replayAll()@@@37@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1S\",null,null,false)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "final TaskLocation location2 = new TaskLocation(\"testHost2\",145,-1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(id1,id2,id3)).anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id3\")).andReturn(Futures.immediateFuture(startTime))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject())@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final DateTime startTime = DateTimes.nowUtc()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "supervisor.start()@@@38@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "expect(taskStorage.getTask(\"id2\")).andReturn(Optional.of(id2)).anyTimes()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertNull(serviceEmitter.getStackTrace(),serviceEmitter.getStackTrace())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id1,null,location1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "final Task id2 = createKafkaIndexTask(\"id2\",DATASOURCE,0,new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,20L,2,30L)),new KafkaPartitions(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "final TaskLocation location1 = new TaskLocation(\"testHost\",1234,-1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "supervisor.moveTaskGroupToPendingCompletion(0)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Task id3 = createKafkaIndexTask(\"id3\",DATASOURCE,0,new KafkaPartitions(\"topic\",ImmutableMap.of(0,10L,1,20L,2,30L)),new KafkaPartitions(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "supervisor.runInternal()@@@39@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expect(taskStorage.getStatus(\"id2\")).andReturn(Optional.of(TaskStatus.running(\"id2\"))).anyTimes()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Collection workItems = new ArrayList<>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "supervisor.start()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "supervisor.checkpoint(0,((KafkaIndexTask)id1).getIOConfig().getBaseSequenceName(),new KafkaDataSourceMetadata(new KafkaPartitions(topic,checkpoints.get(0))),new KafkaDataSourceMetadata(new KafkaPartitions(topic,fakeCheckpoints)))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id2,null,location2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "taskQueue.shutdown(\"id2\",\"DataSourceMetadata is not found while reset\")@@@37@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "expect(taskStorage.getStatus(\"id3\")).andReturn(Optional.of(TaskStatus.running(\"id3\"))).anyTimes()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id2,null,location2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id2\")).andReturn(Futures.immediateFuture(startTime))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Map<Integer,Long> fakeCheckpoints = Collections.emptyMap()@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(KafkaIndexTask.Status.READING))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "expect(taskStorage.getStatus(\"id3\")).andReturn(Optional.of(TaskStatus.running(\"id3\"))).anyTimes()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(0,10L,1,20L,2,30L))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "expect(taskClient.getStatusAsync(\"id2\")).andReturn(Futures.immediateFuture(KafkaIndexTask.Status.READING))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testNoDataIngestionTasks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Task id1 = createKafkaIndexTask(\"id1\",DATASOURCE,0,new KafkaPartitions(\"topic\",ImmutableMap.of(0,0L,1,0L,2,0L)),new KafkaPartitions(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Assert.assertNull(serviceEmitter.getExceptionMessage(),serviceEmitter.getExceptionMessage())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "testNoDataIngestionTasks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "expect(taskStorage.getStatus(\"id2\")).andReturn(Optional.of(TaskStatus.running(\"id2\"))).anyTimes()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testCheckpointForInactiveTaskGroup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "taskQueue.shutdown(\"id1\",\"DataSourceMetadata is not found while reset\")@@@36@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id3\"),anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "final Task id3 = createKafkaIndexTask(\"id3\",DATASOURCE,0,new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,20L,2,30L)),new KafkaPartitions(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id1\")).andReturn(Futures.immediateFuture(startTime))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final DateTime startTime = DateTimes.nowUtc()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Task id2 = createKafkaIndexTask(\"id2\",DATASOURCE,0,new KafkaPartitions(\"topic\",ImmutableMap.of(0,10L,1,20L,2,30L)),new KafkaPartitions(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "taskQueue.shutdown(\"id3\",\"DataSourceMetadata is not found while reset\")@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(id1,id2,id3)).anyTimes()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23->9 [style = bold, label=""];
20->27 [style = bold, label=""];
60->61 [style = bold, label=""];
21->3 [style = bold, label=""];
7->24 [style = bold, label=""];
65->29 [style = bold, label=""];
30->13 [style = bold, label=""];
56->36 [style = bold, label=""];
43->28 [style = bold, label=""];
19->0 [style = bold, label=""];
13->63 [style = dashed, label="0"];
22->20 [style = bold, label=""];
61->57 [style = bold, label=""];
25->1 [style = bold, label=""];
14->28 [style = bold, label=""];
52->55 [style = bold, label=""];
10->36 [style = solid, label="startTime"];
3->25 [style = bold, label=""];
28->18 [style = bold, label=""];
15->42 [style = dashed, label="0"];
4->23 [style = bold, label=""];
64->27 [style = bold, label=""];
25->41 [style = bold, label=""];
47->37 [style = bold, label=""];
10->56 [style = solid, label="startTime"];
34->26 [style = bold, label=""];
58->59 [style = bold, label=""];
29->21 [style = bold, label=""];
12->39 [style = bold, label=""];
24->35 [style = bold, label=""];
41->40 [style = bold, label=""];
22->64 [style = bold, label=""];
27->33 [style = bold, label=""];
36->19 [style = bold, label=""];
48->50 [style = bold, label=""];
58->60 [style = solid, label="location2"];
0->38 [style = bold, label=""];
63->50 [style = solid, label="id2"];
16->51 [style = dashed, label="0"];
16->2 [style = bold, label=""];
10->19 [style = solid, label="startTime"];
28->35 [style = solid, label="startTime"];
35->5 [style = bold, label=""];
20->0 [style = dashed, label="0"];
50->60 [style = bold, label=""];
1->41 [style = dashed, label="0"];
2->32 [style = bold, label=""];
5->22 [style = bold, label=""];
52->55 [style = dotted, label="true"];
55->52 [style = bold, label=""];
63->51 [style = bold, label=""];
28->22 [style = solid, label="startTime"];
58->50 [style = solid, label="location2"];
31->15 [style = bold, label=""];
18->30 [style = bold, label=""];
44->58 [style = bold, label=""];
15->17 [style = bold, label=""];
44->48 [style = solid, label="location1"];
26->8 [style = bold, label=""];
40->42 [style = bold, label=""];
1->31 [style = bold, label=""];
17->53 [style = solid, label="fakeCheckpoints"];
33->10 [style = bold, label=""];
0->65 [style = bold, label=""];
63->60 [style = solid, label="id2"];
18->48 [style = solid, label="id1"];
45->53 [style = bold, label=""];
17->37 [style = bold, label=""];
57->4 [style = bold, label=""];
13->16 [style = bold, label=""];
42->17 [style = bold, label=""];
46->18 [style = bold, label=""];
37->62 [style = bold, label=""];
28->5 [style = solid, label="startTime"];
52->47 [style = bold, label=""];
32->12 [style = bold, label=""];
9->11 [style = bold, label=""];
17->45 [style = bold, label=""];
30->18 [style = dashed, label="0"];
8->4 [style = bold, label=""];
39->34 [style = bold, label=""];
31->40 [style = dashed, label="0"];
51->44 [style = bold, label=""];
38->29 [style = bold, label=""];
10->36 [style = bold, label=""];
18->63 [style = bold, label=""];
59->48 [style = bold, label=""];
62->54 [style = bold, label=""];
11->7 [style = bold, label=""];
37->6 [style = bold, label=""];
10->56 [style = bold, label=""];
49->46 [style = bold, label=""];
9->22 [style = dashed, label="0"];
53->52 [style = bold, label=""];
}
