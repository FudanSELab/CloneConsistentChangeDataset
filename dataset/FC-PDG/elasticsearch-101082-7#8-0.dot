digraph {
118 [style = filled, label = "scope.accept(irLeftConstantNode)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
108 [style = filled, label = "operation == Operation.USH@@@134@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "ArithmeticException ae@@@46@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "type == @@@39@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() - (int)irRightConstantNode.getConstant())@@@94@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@181@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "type == @@@56@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "type == @@@111@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() << (int)irRightConstantNode.getConstant())@@@115@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() * (double)irRightConstantNode.getConstant())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() / (float)irRightConstantNode.getConstant())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "type == @@@30@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@154@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
114 [style = filled, label = "visitBinaryMath['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "Consumer<ExpressionNode> scope@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "scope.accept(irLeftConstantNode)@@@108@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
119 [style = filled, label = "Operation operation = irBooleanNode.getOperation()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "type == @@@33@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "type == @@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "scope.accept(irLeftConstantNode)@@@49@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() << (int)irRightConstantNode.getConstant())@@@112@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "operation == Operation.DIV@@@28@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "irBinaryMathNode.getLeftNode() instanceof ConstantNode && irBinaryMathNode.getRightNode() instanceof ConstantNode@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "type == @@@150@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "type == @@@135@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "scope.accept(irLeftConstantNode)@@@72@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() >>> (int)irRightConstantNode.getConstant())@@@136@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
123 [style = filled, label = "visitBoolean['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() - (float)irRightConstantNode.getConstant())@@@100@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "scope.accept(irLeftConstantNode)@@@171@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() ^ (long)irRightConstantNode.getConstant())@@@166@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "type == @@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "type == @@@162@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() + (long)irRightConstantNode.getConstant())@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
130 [style = filled, label = "BooleanNode irBooleanNode@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() % (double)irRightConstantNode.getConstant())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
121 [style = filled, label = "type == @@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "type == @@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() % (int)irRightConstantNode.getConstant())@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() >> (int)irRightConstantNode.getConstant())@@@124@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
133 [style = filled, label = "irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() || (boolean)irRightConstantNode.getConstant())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() / (int)irRightConstantNode.getConstant())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() >> (int)irRightConstantNode.getConstant())@@@127@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() / (double)irRightConstantNode.getConstant())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "Operation operation = irBinaryMathNode.getOperation()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "scope.accept(irLeftConstantNode)@@@120@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "ArithmeticException ae@@@69@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "type == @@@36@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() * (float)irRightConstantNode.getConstant())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
117 [style = filled, label = "throw irBooleanNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"boolean operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
120 [style = filled, label = "operation == Operation.AND@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "operation == Operation.LSH@@@110@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() + (int)irRightConstantNode.getConstant())@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
134 [style = filled, label = "irBooleanNode.getLeftNode() instanceof ConstantNode && irBooleanNode.getRightNode() instanceof ConstantNode@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() & (long)irRightConstantNode.getConstant())@@@151@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(ae)@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
115 [style = filled, label = "BinaryMathNode irBinaryMathNode@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "operation == Operation.BWOR@@@173@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "type == @@@53@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
122 [style = filled, label = "irBooleanNode.getLeftNode().visit(this,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "irBinaryMathNode.getLeftNode().visit(this,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Class<?> type = irBinaryMathNode.getDecoration().getType()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "type == @@@81@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "type == @@@165@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "type == @@@114@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() - (double)irRightConstantNode.getConstant())@@@103@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "type == @@@93@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "type == @@@59@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "type == @@@123@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
124 [style = filled, label = "ConstantNode irLeftConstantNode = (ConstantNode)irBooleanNode.getLeftNode()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() ^ (boolean)irRightConstantNode.getConstant())@@@160@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
126 [style = filled, label = "operation == Operation.OR@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "ConstantNode irLeftConstantNode = (ConstantNode)irBinaryMathNode.getLeftNode()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "operation == Operation.XOR@@@158@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "operation == Operation.REM@@@51@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "scope.accept(irLeftConstantNode)@@@132@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "operation == Operation.BWAND@@@146@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "type == @@@174@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "operation == Operation.RSH@@@122@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() | (long)irRightConstantNode.getConstant())@@@178@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() * (long)irRightConstantNode.getConstant())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() | (int)irRightConstantNode.getConstant())@@@175@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@169@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "type == @@@62@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
132 [style = filled, label = "throw irBooleanNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
113 [style = filled, label = "Operation operation = irBinaryMathNode.getDecorationValue()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
99 [style = filled, label = "type == @@@177@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() * (int)irRightConstantNode.getConstant())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "operation == Operation.ADD@@@74@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@142@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() + (float)irRightConstantNode.getConstant())@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "visitBinaryMath['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "ConstantNode irRightConstantNode = (ConstantNode)irBinaryMathNode.getRightNode()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() % (float)irRightConstantNode.getConstant())@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "type == @@@147@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
127 [style = filled, label = "irBooleanNode.getRightNode().visit(this,null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
129 [style = filled, label = "type == @@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
97 [style = filled, label = "type == @@@138@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "type == @@@102@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "scope.accept(irLeftConstantNode)@@@90@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
125 [style = filled, label = "Class<?> type = irBooleanNode.getDecoration().getType()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "type == @@@96@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(ae)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
131 [style = filled, label = "Consumer<ExpressionNode> scope@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "irBinaryMathNode.getRightNode().visit(this,null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() / (long)irRightConstantNode.getConstant())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() % (long)irRightConstantNode.getConstant())@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
104 [style = filled, label = "type == @@@75@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() - (long)irRightConstantNode.getConstant())@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "scope.accept(irLeftConstantNode)@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "operation == Operation.SUB@@@92@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() >>> (int)irRightConstantNode.getConstant())@@@139@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
135 [style = filled, label = "ConstantNode irRightConstantNode = (ConstantNode)irBooleanNode.getRightNode()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "scope.accept(irLeftConstantNode)@@@183@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
128 [style = filled, label = "irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() && (boolean)irRightConstantNode.getConstant())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Consumer<ExpressionNode> scope@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "scope.accept(irLeftConstantNode)@@@156@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@118@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "type == @@@126@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() ^ (int)irRightConstantNode.getConstant())@@@163@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "type == @@@99@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@106@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "type == @@@78@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "type == @@@84@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "type == @@@159@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "scope.accept(irLeftConstantNode)@@@144@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() & (int)irRightConstantNode.getConstant())@@@148@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "Class<?> type = irBinaryMathNode.getDecorationValue()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
101 [style = filled, label = "operation == Operation.MUL@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "type == @@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() + (double)irRightConstantNode.getConstant())@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
111 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@130@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52->27 [style = solid, label="type"];
83->9 [style = bold, label=""];
52->80 [style = solid, label="type"];
15->54 [style = bold, label=""];
21->75 [style = bold, label=""];
24->73 [style = bold, label=""];
105->81 [style = bold, label=""];
116->39 [style = solid, label="type"];
13->34 [style = dotted, label="false"];
52->18 [style = solid, label="type"];
96->48 [style = bold, label=""];
52->28 [style = solid, label="type"];
65->50 [style = bold, label=""];
116->4 [style = solid, label="type"];
52->32 [style = solid, label="type"];
54->41 [style = dotted, label="false"];
52->39 [style = solid, label="type"];
113->87 [style = solid, label="operation"];
116->112 [style = solid, label="type"];
48->56 [style = solid, label="irLeftConstantNode"];
96->52 [style = dotted, label="true"];
87->98 [style = dotted, label="false"];
34->55 [style = dotted, label="true"];
70->46 [style = dotted, label="false"];
96->134 [style = dashed, label="0"];
99->105 [style = dotted, label="false"];
41->83 [style = dotted, label="true"];
22->61 [style = dotted, label="true"];
78->38 [style = bold, label=""];
31->2 [style = bold, label=""];
113->33 [style = solid, label="operation"];
99->43 [style = bold, label=""];
134->120 [style = dotted, label="true"];
52->8 [style = solid, label="type"];
91->3 [style = bold, label=""];
52->53 [style = solid, label="type"];
126->118 [style = dotted, label="true"];
14->81 [style = dotted, label="true"];
1->59 [style = bold, label=""];
87->79 [style = bold, label=""];
89->20 [style = bold, label=""];
99->43 [style = dotted, label="true"];
113->10 [style = solid, label="operation"];
4->97 [style = bold, label=""];
97->74 [style = bold, label=""];
52->25 [style = solid, label="type"];
98->22 [style = bold, label=""];
53->42 [style = bold, label=""];
116->15 [style = solid, label="type"];
92->81 [style = bold, label=""];
34->55 [style = bold, label=""];
85->7 [style = solid, label="operation"];
33->9 [style = dotted, label="true"];
44->14 [style = bold, label=""];
24->16 [style = dotted, label="true"];
112->69 [style = bold, label=""];
122->127 [style = bold, label=""];
39->28 [style = dotted, label="false"];
10->13 [style = dotted, label="true"];
116->105 [style = solid, label="type"];
52->34 [style = solid, label="type"];
96->68 [style = dotted, label="true"];
116->51 [style = solid, label="type"];
120->126 [style = dotted, label="false"];
116->111 [style = solid, label="type"];
59->128 [style = dashed, label="0"];
116->65 [style = solid, label="type"];
46->107 [style = dotted, label="true"];
116->71 [style = solid, label="type"];
10->40 [style = dotted, label="true"];
116->90 [style = solid, label="type"];
22->33 [style = dotted, label="false"];
104->30 [style = bold, label=""];
86->61 [style = bold, label=""];
11->63 [style = bold, label=""];
52->1 [style = solid, label="type"];
70->94 [style = dotted, label="true"];
52->45 [style = solid, label="type"];
129->132 [style = bold, label=""];
8->90 [style = bold, label=""];
87->98 [style = bold, label=""];
85->14 [style = solid, label="operation"];
52->65 [style = solid, label="type"];
78->122 [style = dashed, label="0"];
38->96 [style = bold, label=""];
7->108 [style = bold, label=""];
116->34 [style = solid, label="type"];
4->82 [style = bold, label=""];
48->106 [style = solid, label="irLeftConstantNode"];
33->15 [style = dotted, label="true"];
116->24 [style = solid, label="type"];
113->14 [style = solid, label="operation"];
4->97 [style = dotted, label="false"];
116->28 [style = solid, label="type"];
73->62 [style = bold, label=""];
52->54 [style = solid, label="type"];
124->135 [style = bold, label=""];
121->117 [style = dotted, label="false"];
28->9 [style = bold, label=""];
43->81 [style = bold, label=""];
48->40 [style = solid, label="irLeftConstantNode"];
52->97 [style = solid, label="type"];
58->9 [style = bold, label=""];
116->1 [style = solid, label="type"];
108->4 [style = dotted, label="true"];
52->35 [style = solid, label="type"];
113->22 [style = solid, label="operation"];
1->8 [style = dotted, label="false"];
51->61 [style = bold, label=""];
102->51 [style = dotted, label="false"];
65->50 [style = dotted, label="true"];
79->65 [style = dotted, label="false"];
52->4 [style = solid, label="type"];
39->93 [style = bold, label=""];
52->116 [style = dashed, label="0"];
104->30 [style = dotted, label="true"];
11->63 [style = dotted, label="true"];
104->89 [style = dotted, label="false"];
116->79 [style = solid, label="type"];
37->75 [style = bold, label=""];
116->102 [style = solid, label="type"];
85->22 [style = solid, label="operation"];
123->130 [style = dotted, label="true"];
84->56 [style = bold, label=""];
15->66 [style = bold, label=""];
1->59 [style = dotted, label="true"];
116->46 [style = solid, label="type"];
134->124 [style = dotted, label="true"];
71->132 [style = dashed, label="0"];
67->56 [style = bold, label=""];
121->117 [style = bold, label=""];
113->5 [style = solid, label="operation"];
18->71 [style = dotted, label="false"];
116->109 [style = solid, label="type"];
129->128 [style = bold, label=""];
116->45 [style = solid, label="type"];
27->11 [style = bold, label=""];
119->125 [style = bold, label=""];
52->70 [style = solid, label="type"];
44->2 [style = dotted, label="true"];
60->72 [style = dotted, label="true"];
96->113 [style = dotted, label="true"];
90->17 [style = bold, label=""];
133->118 [style = bold, label=""];
45->21 [style = bold, label=""];
59->56 [style = bold, label=""];
112->23 [style = dotted, label="true"];
69->100 [style = dotted, label="true"];
116->8 [style = solid, label="type"];
71->56 [style = bold, label=""];
27->103 [style = bold, label=""];
94->64 [style = bold, label=""];
116->53 [style = solid, label="type"];
101->120 [style = dashed, label="0"];
72->75 [style = bold, label=""];
63->26 [style = bold, label=""];
65->70 [style = dotted, label="false"];
89->20 [style = dotted, label="false"];
91->80 [style = dotted, label="false"];
112->23 [style = bold, label=""];
125->117 [style = solid, label="type"];
68->85 [style = bold, label=""];
113->116 [style = bold, label=""];
85->33 [style = solid, label="operation"];
116->18 [style = solid, label="type"];
116->41 [style = solid, label="type"];
121->133 [style = bold, label=""];
102->86 [style = bold, label=""];
80->19 [style = bold, label=""];
48->68 [style = bold, label=""];
126->121 [style = bold, label=""];
7->106 [style = dotted, label="true"];
52->89 [style = solid, label="type"];
24->73 [style = dotted, label="false"];
113->7 [style = solid, label="operation"];
103->26 [style = bold, label=""];
8->84 [style = dotted, label="true"];
82->49 [style = bold, label=""];
52->20 [style = solid, label="type"];
25->112 [style = bold, label=""];
65->70 [style = bold, label=""];
30->61 [style = bold, label=""];
114->77 [style = dotted, label="true"];
73->53 [style = dotted, label="false"];
1->129 [style = dashed, label="0"];
52->73 [style = solid, label="type"];
16->2 [style = bold, label=""];
80->111 [style = bold, label=""];
76->99 [style = dotted, label="false"];
125->120 [style = bold, label=""];
69->45 [style = dotted, label="false"];
34->47 [style = dotted, label="false"];
5->44 [style = dotted, label="false"];
116->69 [style = solid, label="type"];
52->104 [style = solid, label="type"];
134->124 [style = bold, label=""];
8->90 [style = dotted, label="false"];
119->120 [style = solid, label="operation"];
45->21 [style = dotted, label="true"];
101->56 [style = dotted, label="true"];
52->15 [style = solid, label="type"];
5->27 [style = bold, label=""];
17->56 [style = bold, label=""];
85->101 [style = solid, label="operation"];
96->85 [style = dotted, label="true"];
102->86 [style = dotted, label="true"];
7->91 [style = dotted, label="true"];
134->135 [style = dotted, label="true"];
120->126 [style = bold, label=""];
70->94 [style = bold, label=""];
85->87 [style = solid, label="operation"];
52->90 [style = solid, label="type"];
85->10 [style = solid, label="operation"];
20->36 [style = dotted, label="true"];
119->126 [style = solid, label="operation"];
129->128 [style = dotted, label="true"];
111->106 [style = bold, label=""];
80->111 [style = dotted, label="false"];
52->71 [style = solid, label="type"];
41->39 [style = dotted, label="false"];
20->102 [style = dotted, label="false"];
116->54 [style = solid, label="type"];
108->4 [style = bold, label=""];
14->76 [style = dotted, label="true"];
97->29 [style = bold, label=""];
57->78 [style = bold, label=""];
45->32 [style = dotted, label="false"];
41->83 [style = bold, label=""];
116->97 [style = solid, label="type"];
87->126 [style = dashed, label="0"];
18->67 [style = dotted, label="true"];
52->46 [style = solid, label="type"];
15->66 [style = dotted, label="true"];
125->121 [style = solid, label="type"];
89->0 [style = dotted, label="true"];
22->33 [style = bold, label=""];
96->48 [style = dotted, label="true"];
52->112 [style = solid, label="type"];
42->2 [style = bold, label=""];
127->134 [style = bold, label=""];
48->9 [style = solid, label="irLeftConstantNode"];
98->22 [style = dotted, label="false"];
54->41 [style = bold, label=""];
108->49 [style = dotted, label="true"];
52->11 [style = solid, label="type"];
134->119 [style = dotted, label="true"];
7->91 [style = bold, label=""];
4->82 [style = dotted, label="true"];
97->29 [style = dotted, label="false"];
52->41 [style = solid, label="type"];
8->84 [style = bold, label=""];
38->127 [style = dashed, label="0"];
5->26 [style = dotted, label="true"];
98->25 [style = dotted, label="true"];
69->100 [style = bold, label=""];
53->42 [style = dotted, label="false"];
52->109 [style = solid, label="type"];
128->56 [style = bold, label=""];
85->5 [style = solid, label="operation"];
23->75 [style = bold, label=""];
1->8 [style = bold, label=""];
89->0 [style = bold, label=""];
135->119 [style = bold, label=""];
90->18 [style = bold, label=""];
126->121 [style = dotted, label="true"];
32->75 [style = bold, label=""];
96->116 [style = dotted, label="true"];
116->91 [style = solid, label="type"];
70->46 [style = bold, label=""];
44->14 [style = dotted, label="false"];
113->44 [style = solid, label="operation"];
110->6 [style = dotted, label="true"];
104->89 [style = bold, label=""];
53->31 [style = dotted, label="true"];
110->6 [style = bold, label=""];
7->108 [style = dotted, label="false"];
116->89 [style = solid, label="type"];
66->9 [style = bold, label=""];
5->44 [style = bold, label=""];
132->56 [style = bold, label=""];
134->125 [style = dotted, label="true"];
57->12 [style = dotted, label="true"];
46->35 [style = bold, label=""];
5->27 [style = dotted, label="true"];
50->64 [style = bold, label=""];
27->11 [style = dotted, label="false"];
52->125 [style = dashed, label="0"];
101->1 [style = bold, label=""];
13->95 [style = bold, label=""];
108->5 [style = bold, label=""];
52->105 [style = solid, label="type"];
44->24 [style = bold, label=""];
76->92 [style = dotted, label="true"];
15->54 [style = dotted, label="false"];
114->115 [style = dotted, label="true"];
20->36 [style = bold, label=""];
98->75 [style = dotted, label="true"];
85->44 [style = solid, label="operation"];
48->64 [style = solid, label="irLeftConstantNode"];
25->37 [style = dotted, label="true"];
116->76 [style = solid, label="type"];
11->109 [style = dotted, label="false"];
114->78 [style = bold, label=""];
52->47 [style = solid, label="type"];
113->108 [style = solid, label="operation"];
116->99 [style = solid, label="type"];
116->80 [style = solid, label="type"];
33->10 [style = bold, label=""];
53->31 [style = bold, label=""];
13->95 [style = dotted, label="true"];
39->28 [style = bold, label=""];
52->91 [style = solid, label="type"];
18->71 [style = bold, label=""];
52->76 [style = solid, label="type"];
91->3 [style = dotted, label="true"];
91->80 [style = bold, label=""];
48->124 [style = dashed, label="0"];
52->24 [style = solid, label="type"];
35->64 [style = bold, label=""];
41->39 [style = bold, label=""];
109->26 [style = bold, label=""];
10->7 [style = dotted, label="false"];
14->76 [style = bold, label=""];
116->104 [style = solid, label="type"];
98->25 [style = bold, label=""];
116->13 [style = solid, label="type"];
113->101 [style = solid, label="operation"];
116->32 [style = solid, label="type"];
48->49 [style = solid, label="irLeftConstantNode"];
48->81 [style = solid, label="irLeftConstantNode"];
27->103 [style = dotted, label="true"];
120->129 [style = bold, label=""];
116->25 [style = solid, label="type"];
52->99 [style = solid, label="type"];
55->40 [style = bold, label=""];
96->101 [style = dotted, label="true"];
20->102 [style = bold, label=""];
44->24 [style = dotted, label="true"];
116->73 [style = solid, label="type"];
116->70 [style = solid, label="type"];
16->133 [style = dashed, label="0"];
42->117 [style = dashed, label="0"];
116->35 [style = solid, label="type"];
99->105 [style = bold, label=""];
116->101 [style = bold, label=""];
52->111 [style = solid, label="type"];
6->64 [style = bold, label=""];
85->98 [style = solid, label="operation"];
125->129 [style = solid, label="type"];
79->88 [style = bold, label=""];
62->2 [style = bold, label=""];
101->87 [style = bold, label=""];
68->135 [style = dashed, label="0"];
85->108 [style = solid, label="operation"];
13->34 [style = bold, label=""];
33->15 [style = bold, label=""];
108->5 [style = dotted, label="false"];
48->26 [style = solid, label="irLeftConstantNode"];
93->9 [style = bold, label=""];
34->47 [style = bold, label=""];
76->92 [style = bold, label=""];
48->61 [style = solid, label="irLeftConstantNode"];
79->88 [style = dotted, label="true"];
10->7 [style = bold, label=""];
48->2 [style = solid, label="irLeftConstantNode"];
54->58 [style = bold, label=""];
87->79 [style = dotted, label="true"];
25->37 [style = bold, label=""];
88->64 [style = bold, label=""];
116->42 [style = solid, label="type"];
11->109 [style = bold, label=""];
125->132 [style = solid, label="type"];
74->49 [style = bold, label=""];
25->112 [style = dotted, label="false"];
85->119 [style = dashed, label="0"];
120->129 [style = dotted, label="true"];
87->64 [style = dotted, label="true"];
48->75 [style = solid, label="irLeftConstantNode"];
73->62 [style = dotted, label="true"];
54->58 [style = dotted, label="true"];
57->77 [style = dotted, label="true"];
47->40 [style = bold, label=""];
113->98 [style = solid, label="operation"];
33->10 [style = dotted, label="false"];
45->32 [style = bold, label=""];
52->51 [style = solid, label="type"];
100->75 [style = bold, label=""];
39->93 [style = dotted, label="true"];
29->49 [style = bold, label=""];
22->104 [style = bold, label=""];
124->56 [style = solid, label="irLeftConstantNode"];
116->11 [style = solid, label="type"];
79->65 [style = bold, label=""];
77->131 [style = dashed, label="0"];
46->35 [style = dotted, label="false"];
116->27 [style = solid, label="type"];
129->132 [style = dotted, label="false"];
95->40 [style = bold, label=""];
101->1 [style = dotted, label="true"];
52->102 [style = solid, label="type"];
116->47 [style = solid, label="type"];
10->13 [style = bold, label=""];
60->72 [style = bold, label=""];
116->20 [style = solid, label="type"];
0->61 [style = bold, label=""];
124->118 [style = solid, label="irLeftConstantNode"];
85->113 [style = dashed, label="0"];
52->101 [style = bold, label=""];
73->53 [style = bold, label=""];
117->118 [style = bold, label=""];
18->67 [style = bold, label=""];
90->17 [style = dotted, label="true"];
116->29 [style = solid, label="type"];
52->42 [style = solid, label="type"];
52->69 [style = solid, label="type"];
121->133 [style = dotted, label="true"];
120->56 [style = dotted, label="true"];
52->29 [style = solid, label="type"];
101->87 [style = dotted, label="false"];
76->99 [style = bold, label=""];
52->13 [style = solid, label="type"];
112->69 [style = dotted, label="false"];
3->106 [style = bold, label=""];
19->106 [style = bold, label=""];
123->122 [style = bold, label=""];
123->131 [style = dotted, label="true"];
107->64 [style = bold, label=""];
90->18 [style = dotted, label="false"];
68->113 [style = bold, label=""];
24->16 [style = bold, label=""];
85->52 [style = bold, label=""];
46->107 [style = bold, label=""];
22->104 [style = dotted, label="true"];
52->79 [style = solid, label="type"];
97->74 [style = dotted, label="true"];
102->51 [style = bold, label=""];
80->19 [style = dotted, label="true"];
36->61 [style = bold, label=""];
69->45 [style = bold, label=""];
}
