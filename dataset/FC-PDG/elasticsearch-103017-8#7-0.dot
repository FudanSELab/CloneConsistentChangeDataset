digraph {
1 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"shape\").field(\"ignore_malformed\",\"true\").endObject().endObject().endObject().endObject())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "ignoreMalformed = ((GeoShapeFieldMapper)fieldMapper).ignoreMalformed()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(ignoreMalformed,equalTo(false))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Mapper fieldMapper = mapper.mappers().getMapper(\"field\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "fieldMapper = defaultMapper.mappers().getMapper(FIELD_NAME)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "ignoreMalformed = ((ShapeFieldMapper)fieldMapper).ignoreMalformed()@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Explicit<Boolean> ignoreMalformed = ((ShapeFieldMapper)fieldMapper).ignoreMalformed()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(ignoreMalformed,equalTo(true))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\")@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "mapper = createDocumentMapper(fieldMapping(null))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "boolean ignoreMalformed = ((GeoShapeFieldMapper)fieldMapper).ignoreMalformed()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "ignoreMalformed = ((ShapeFieldMapper)fieldMapper).ignoreMalformed()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "testIgnoreMalformedParsing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "fieldMapper = mapper.mappers().getMapper(\"field\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Mapper fieldMapper = defaultMapper.mappers().getMapper(FIELD_NAME)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "boolean ignoreMalformed = ((ShapeFieldMapper)fieldMapper).ignoreMalformed()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testIgnoreMalformedParsing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "DocumentMapper defaultMapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "fieldMapper = defaultMapper.mappers().getMapper(\"location\")@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(ignoreMalformed,equalTo(true))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(ignoreMalformed.explicit(),equalTo(true))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertThat(ignoreMalformed.value(),equalTo(true))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(ignoreMalformed.value(),equalTo(false))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "defaultMapper = createDocumentMapper(fieldMapping(null))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "testIgnoreMalformedParsing['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(ignoreMalformed,equalTo(false))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7->13 [style = bold, label=""];
33->29 [style = solid, label="ignoreMalformed"];
28->24 [style = solid, label="ignoreMalformed"];
28->33 [style = solid, label="ignoreMalformed"];
25->33 [style = bold, label=""];
22->16 [style = bold, label=""];
31->32 [style = bold, label=""];
3->9 [style = solid, label="fieldMapper"];
8->3 [style = bold, label=""];
19->15 [style = solid, label="ignoreMalformed"];
27->31 [style = bold, label=""];
30->25 [style = bold, label=""];
14->17 [style = bold, label=""];
20->14 [style = bold, label=""];
32->34 [style = bold, label=""];
9->10 [style = bold, label=""];
16->12 [style = solid, label="fieldMapper"];
1->2 [style = solid, label="mapping"];
13->15 [style = dashed, label="0"];
10->6 [style = bold, label=""];
21->18 [style = bold, label=""];
4->7 [style = bold, label=""];
4->28 [style = dashed, label="0"];
26->30 [style = bold, label=""];
12->8 [style = solid, label="mapping"];
33->29 [style = bold, label=""];
7->10 [style = solid, label="ignoreMalformed"];
3->9 [style = bold, label=""];
34->28 [style = bold, label=""];
6->18 [style = dashed, label="0"];
24->26 [style = bold, label=""];
13->12 [style = bold, label=""];
23->22 [style = bold, label=""];
7->19 [style = dashed, label="0"];
5->4 [style = solid, label="fieldMapper"];
12->8 [style = bold, label=""];
0->1 [style = bold, label=""];
6->11 [style = bold, label=""];
15->20 [style = bold, label=""];
5->4 [style = bold, label=""];
14->17 [style = solid, label="fieldMapper"];
21->18 [style = solid, label="ignoreMalformed"];
28->24 [style = bold, label=""];
30->25 [style = solid, label="fieldMapper"];
19->21 [style = solid, label="ignoreMalformed"];
1->2 [style = bold, label=""];
32->34 [style = solid, label="fieldMapper"];
19->15 [style = bold, label=""];
12->19 [style = bold, label=""];
16->12 [style = bold, label=""];
17->21 [style = bold, label=""];
2->5 [style = bold, label=""];
}
