digraph {
29 [style = filled, label = "assertEquals(\"index source must have all shards allocated on the same node to shrink index\",expectThrows(,null).getMessage())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"can't shrink an index with only one shard\",expectThrows(,null).getMessage())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "int targetShards@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "RoutingTable routingTable = service.reroute(clusterState,\"reroute\").routingTable()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testValidateShrinkIndex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "AllocationService service = new AllocationService(new AllocationDeciders(Collections.singleton(new MaxRetryAllocationDecider())),new TestGatewayAllocator(),new BalancedShardsAllocator(Settings.EMPTY),EmptyClusterInfoService.INSTANCE)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(\"index source must be read-only to resize index. use \"index.blocks.write=true\"\",expectThrows(,null).getMessage())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertEquals(\"the number of source shards (8( must be a multiple of (3(\",expectThrows(,null).getMessage())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertEquals(\"the number of source shards (10( must be less that the number of target shards (5(\",expectThrows(,null).getMessage())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Settings targetSettings = Settings.builder().put(\"index.number_of_shards\",numShards * 2).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "routingTable = ESAllocationTestCase.startInitializingShardsAndReroute(service,clusterState,\"source\").routingTable()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "routingTable = ESAllocationTestCase.startInitializingShardsAndReroute(service,clusterState,\"source\").routingTable()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ClusterState state = createClusterState(\"source\",numShards,randomIntBetween(0,10),Settings.builder().put(\"index.blocks.write\",true).build())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"index (source( already exists\",expectThrows(,null).getMessage())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "isSplitable(numShards,targetShards) == false@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"the number of target shards (10( must be less that the number of source shards (5(\",expectThrows(,null).getMessage())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "RoutingTable routingTable = service.reroute(clusterState,\"reroute\").routingTable()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"no such index (no_such_index(\",expectThrows(,null).getMessage())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertEquals(\"no such index (no_such_index(\",expectThrows(,null).getMessage())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "targetShards = randomIntBetween(numShards + 1,100)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Settings targetSettings = Settings.builder().put(\"index.number_of_shards\",1).build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"index source must have all shards allocated on the same node to shrink index\",expectThrows(,null).getMessage())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "AllocationService service = new AllocationService(new AllocationDeciders(Collections.singleton(new MaxRetryAllocationDecider())),new TestGatewayAllocator(),new BalancedShardsAllocator(Settings.EMPTY),EmptyClusterInfoService.INSTANCE)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"the number of target shards (10( must be less that the number of source shards (5(\",expectThrows(,null).getMessage())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "ClusterState state = createClusterState(\"source\",numShards,randomIntBetween(0,10),Settings.builder().put(\"index.blocks.write\",true).build())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "MetadataCreateIndexService.validateShrinkIndex(clusterState,\"source\",Collections.emptySet(),\"target\",Settings.builder().put(\"index.number_of_shards\",targetShards).build())@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "MetaDataCreateIndexService.validateShrinkIndex(clusterState,\"source\",Collections.emptySet(),\"target\",Settings.builder().put(\"index.number_of_shards\",targetShards).build())@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "assertEquals(\"mappings are not allowed when resizing indices, all mappings are copied from the source index\",expectThrows(,null).getMessage())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(\"the number of source shards (3( must be a factor of (4(\",expectThrows(,null).getMessage())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "MetaDataCreateIndexService.validateSplitIndex(clusterState,\"source\",Collections.emptySet(),\"target\",Settings.builder().put(\"index.number_of_shards\",targetShards).build())@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"mappings are not allowed when resizing indices, all mappings are copied from the source index\",expectThrows(,null).getMessage())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"index source must be read-only to resize index. use \"index.blocks.write=true\"\",expectThrows(,null).getMessage())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "ClusterState clusterState = ClusterState.builder(createClusterState(\"source\",numShards,0,Settings.builder().put(\"index.blocks.write\",true).put(\"index.number_of_routing_shards\",targetShards).build())).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"no such index (no_such_index(\",expectThrows(,null).getMessage())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "isShrinkable(numShards,targetShards) == false@@@27@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "int numShards = randomIntBetween(1,42)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\"can't shrink an index with only one shard\",expectThrows(,null).getMessage())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "assertEquals(\"index (source( already exists\",expectThrows(,null).getMessage())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "int numShards = randomIntBetween(2,42)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(\"index source must be read-only to resize index. use \"index.blocks.write=true\"\",expectThrows(,null).getMessage())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "testValidateSplitIndex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "int targetShards@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testValidateShrinkIndex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"the number of source shards (8( must be a multiple of (3(\",expectThrows(,null).getMessage())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
4->35 [style = solid, label="clusterState"];
39->37 [style = bold, label=""];
4->35 [style = bold, label=""];
20->2 [style = solid, label="numShards"];
8->40 [style = dashed, label="0"];
33->3 [style = bold, label=""];
17->34 [style = dashed, label="0"];
28->20 [style = bold, label=""];
7->47 [style = bold, label=""];
47->40 [style = bold, label=""];
25->30 [style = bold, label=""];
16->6 [style = bold, label=""];
44->3 [style = solid, label="numShards"];
31->32 [style = bold, label=""];
12->32 [style = dashed, label="0"];
42->39 [style = bold, label=""];
43->36 [style = bold, label=""];
36->4 [style = bold, label=""];
34->31 [style = bold, label=""];
9->22 [style = dashed, label="0"];
15->29 [style = dashed, label="0"];
4->2 [style = bold, label=""];
2->9 [style = bold, label=""];
16->10 [style = solid, label="routingTable"];
40->34 [style = bold, label=""];
3->38 [style = bold, label=""];
15->19 [style = bold, label=""];
7->8 [style = bold, label=""];
1->9 [style = solid, label="clusterState"];
44->7 [style = solid, label="numShards"];
1->22 [style = solid, label="clusterState"];
2->4 [style = bold, label=""];
30->29 [style = bold, label=""];
38->3 [style = bold, label=""];
38->42 [style = bold, label=""];
45->44 [style = bold, label=""];
19->0 [style = bold, label=""];
37->36 [style = solid, label="routingTable"];
29->26 [style = bold, label=""];
21->12 [style = bold, label=""];
4->2 [style = solid, label="targetShards"];
3->18 [style = bold, label=""];
8->17 [style = bold, label=""];
7->27 [style = dashed, label="0"];
44->46 [style = bold, label=""];
7->47 [style = dashed, label="0"];
26->0 [style = bold, label=""];
20->11 [style = solid, label="numShards"];
17->24 [style = bold, label=""];
37->43 [style = bold, label=""];
3->38 [style = solid, label="targetShards"];
38->3 [style = dotted, label="true"];
12->25 [style = dashed, label="0"];
19->26 [style = dashed, label="0"];
20->44 [style = dashed, label="0"];
5->35 [style = dashed, label="0"];
24->25 [style = bold, label=""];
6->10 [style = bold, label=""];
14->30 [style = dashed, label="0"];
5->4 [style = bold, label=""];
46->7 [style = bold, label=""];
2->4 [style = dotted, label="true"];
12->14 [style = bold, label=""];
11->27 [style = bold, label=""];
23->17 [style = bold, label=""];
14->15 [style = bold, label=""];
27->23 [style = bold, label=""];
32->41 [style = bold, label=""];
44->38 [style = solid, label="numShards"];
41->33 [style = bold, label=""];
2->22 [style = bold, label=""];
10->1 [style = bold, label=""];
21->24 [style = dashed, label="0"];
20->4 [style = solid, label="numShards"];
17->21 [style = bold, label=""];
11->7 [style = bold, label=""];
8->23 [style = dashed, label="0"];
20->11 [style = bold, label=""];
13->20 [style = bold, label=""];
18->16 [style = bold, label=""];
}
