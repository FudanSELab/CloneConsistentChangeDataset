digraph {
12 [style = filled, label = "testSubqueryWithOuterFilterAggregator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final GroupByQuery query = GroupByQuery.builder().setDataSource(subquery).setQuerySegmentSpec(QueryRunnerTestHelper.fullOnInterval).setDimensions(new ArrayList<>()).setDimFilter(firstDaysFilter).setAggregatorSpecs(new FilteredAggregatorFactory(QueryRunnerTestHelper.rowsCount,fridayFilter)).setGranularity(QueryRunnerTestHelper.dayGran).build()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-02-01\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-02-02\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-02-03\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-03-01\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-03-02\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-03-03\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"rows\",13L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-03\",\"rows\",0L))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final GroupByQuery query = GroupByQuery.builder().setDataSource(subquery).setQuerySegmentSpec(QueryRunnerTestHelper.fullOnInterval).setDimensions(new ArrayList<>()).setAggregatorSpecs(new FilteredAggregatorFactory(QueryRunnerTestHelper.rowsCount,filter)).setGranularity(QueryRunnerTestHelper.allGran).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final GroupByQuery subquery = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.fullOnInterval).setDimensions(new DefaultDimensionSpec(\"market\",\"market\"),new DefaultDimensionSpec(\"quality\",\"quality\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"index\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final DimFilter fridayFilter = new SelectorDimFilter(ColumnHolder.TIME_COLUMN_NAME,\"Friday\",new TimeFormatExtractionFn(\"EEEE\",null,null,null,false))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "final DimFilter firstDaysFilter = new InDimFilter(ColumnHolder.TIME_COLUMN_NAME,ImmutableList.of(\"1\",\"2\",\"3\"),new TimeFormatExtractionFn(\"d\",null,null,null,false))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"subquery-time-filter\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final DimFilter filter = new SelectorDimFilter(\"market\",\"spot\",null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "List<Row> expectedResults = Collections.singletonList(GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"rows\",837L))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testSubqueryWithOuterTimeFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"\")@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testSubqueryWithOuterTimeFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
6->8 [style = dashed, label="0"];
3->1 [style = bold, label=""];
7->6 [style = solid, label="results"];
11->14 [style = bold, label=""];
9->2 [style = bold, label=""];
11->7 [style = solid, label="expectedResults"];
4->2 [style = bold, label=""];
7->8 [style = bold, label=""];
2->10 [style = bold, label=""];
13->11 [style = bold, label=""];
5->6 [style = solid, label="expectedResults"];
14->7 [style = bold, label=""];
12->2 [style = bold, label=""];
2->0 [style = bold, label=""];
10->13 [style = bold, label=""];
7->8 [style = solid, label="results"];
7->6 [style = bold, label=""];
13->14 [style = solid, label="query"];
5->7 [style = bold, label=""];
1->7 [style = solid, label="query"];
14->7 [style = solid, label="results"];
5->8 [style = solid, label="expectedResults"];
}
