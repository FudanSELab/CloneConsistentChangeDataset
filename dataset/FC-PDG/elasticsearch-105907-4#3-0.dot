digraph {
7 [style = filled, label = "final CountDownLatch countDownLatch = new CountDownLatch(2)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertTrue(countDownLatch.await(30,TimeUnit.SECONDS))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testReturnsImmediatelyIfVoteAlreadyWithdrawn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "transportService.sendRequest(localNode,AddVotingConfigExclusionsAction.NAME,new AddVotingConfigExclusionsRequest(\"other1\"),expectSuccess(null))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final CountDownLatch countDownLatch = new CountDownLatch(1)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final ClusterState state = clusterService.state()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testExcludeExistingNodesByNodeNames['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),contains(otherNode1Exclusion))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final CountDownLatch countDownLatch = new CountDownLatch(1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "clusterStateObserver.waitForNextChange(new AdjustConfigurationForExclusions())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "setState(clusterService,builder(state).metadata(Metadata.builder(state.metadata()).coordinationMetadata(CoordinationMetadata.builder(state.coordinationMetadata()).lastCommittedConfiguration(VotingConfiguration.of(localNode,otherNode2)).lastAcceptedConfiguration(VotingConfiguration.of(localNode,otherNode2)).build())))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "clusterStateObserver.waitForNextChange(new AdjustConfigurationForExclusions(countDownLatch))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testExcludeExistingNodesByNodeNames['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(countDownLatch.await(30,TimeUnit.SECONDS))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
8->0 [style = bold, label=""];
4->9 [style = bold, label=""];
5->8 [style = dashed, label="0"];
4->9 [style = dashed, label="0"];
3->5 [style = bold, label=""];
6->7 [style = bold, label=""];
5->0 [style = bold, label=""];
12->4 [style = bold, label=""];
7->8 [style = bold, label=""];
7->8 [style = solid, label="countDownLatch"];
2->4 [style = bold, label=""];
11->10 [style = bold, label=""];
13->11 [style = bold, label=""];
3->7 [style = dashed, label="0"];
10->0 [style = bold, label=""];
0->12 [style = bold, label=""];
0->2 [style = bold, label=""];
}
