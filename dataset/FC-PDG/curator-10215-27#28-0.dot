digraph {
7 [style = filled, label = "assertTrue(deletionTrigger.firedWithin(timing.multiple(1.5).forSessionSleep().seconds(),TimeUnit.SECONDS))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "{CloseableUtils.closeQuietly(node)}@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "CuratorFramework curator = newCurator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNodeExists(observer,path)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "{CloseableUtils.closeQuietly(node)}@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Trigger creationTrigger = Trigger.created()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Trigger deletionTrigger = Trigger.deletedOrSetData()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Stat stat = observer.checkExists().usingWatcher(deletionTrigger).forPath(path)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "node.debugCreateNodeLatch.countDown()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertNotNull(stat,\"node should exist: \" + path)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "node.debugCreateNodeLatch = new CountDownLatch(1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(stat != null || creationTrigger.firedWithin(timing.forWaiting().seconds(),TimeUnit.SECONDS))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "curator.getZookeeperClient().getZooKeeper().getTestable().injectSessionExpiration()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Trigger createdWatchTrigger = Trigger.created()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "PersistentEphemeralNode node = new PersistentEphemeralNode(curator,PersistentEphemeralNode.Mode.EPHEMERAL,PATH,new byte(((()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertNodeExists(curator,originalNode)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "node.waitForInitialCreate(timing.forWaiting().seconds(),TimeUnit.SECONDS)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "CuratorFramework observer = newCurator()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String path = node.getActualPath()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertNotNull(stat,\"node should exist: \" + path)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "stat = observer.checkExists().usingWatcher(creationTrigger).forPath(path)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testRecreatesNodeWhenSessionReconnectsMultipleTimes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "i < 5@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int i = 0@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(),TimeUnit.SECONDS))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "i++@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testRecreatesNodeWhenSessionReconnectsMultipleTimes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "String originalNode = node.getActualPath()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testRecreatesNodeWhenItGetsDeleted['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "node.start()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "curator.delete().forPath(originalNode)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
32->31 [style = solid, label="stat"];
3->29 [style = dashed, label="0"];
16->15 [style = bold, label=""];
6->3 [style = bold, label=""];
5->10 [style = bold, label=""];
8->16 [style = bold, label=""];
23->16 [style = bold, label=""];
18->12 [style = solid, label="i"];
16->26 [style = solid, label="curator"];
29->26 [style = solid, label="originalNode"];
29->28 [style = solid, label="originalNode"];
29->32 [style = solid, label="originalNode"];
11->26 [style = dashed, label="0"];
12->2 [style = dotted, label="true"];
3->11 [style = bold, label=""];
18->12 [style = bold, label=""];
25->32 [style = bold, label=""];
3->24 [style = solid, label="path"];
12->1 [style = dotted, label="true"];
5->24 [style = solid, label="stat"];
14->12 [style = solid, label="i"];
4->2 [style = bold, label=""];
16->22 [style = bold, label=""];
12->9 [style = bold, label=""];
12->1 [style = bold, label=""];
20->21 [style = solid, label="stat"];
12->21 [style = dotted, label="true"];
11->18 [style = bold, label=""];
19->0 [style = bold, label=""];
15->22 [style = bold, label=""];
6->29 [style = bold, label=""];
29->26 [style = bold, label=""];
20->21 [style = bold, label=""];
3->11 [style = solid, label="path"];
12->14 [style = dotted, label="true"];
24->4 [style = bold, label=""];
5->10 [style = solid, label="stat"];
12->20 [style = dotted, label="true"];
18->14 [style = solid, label="i"];
31->27 [style = bold, label=""];
12->10 [style = dotted, label="true"];
12->5 [style = dotted, label="true"];
12->19 [style = dotted, label="true"];
5->24 [style = bold, label=""];
14->12 [style = bold, label=""];
3->10 [style = solid, label="path"];
12->24 [style = dotted, label="true"];
10->4 [style = bold, label=""];
16->22 [style = solid, label="curator"];
22->17 [style = bold, label=""];
28->25 [style = bold, label=""];
3->5 [style = solid, label="path"];
3->20 [style = solid, label="path"];
0->20 [style = bold, label=""];
12->0 [style = dotted, label="true"];
17->13 [style = bold, label=""];
15->11 [style = solid, label="observer"];
22->27 [style = solid, label="node"];
26->28 [style = bold, label=""];
2->7 [style = bold, label=""];
13->6 [style = bold, label=""];
12->4 [style = dotted, label="true"];
22->9 [style = solid, label="node"];
12->7 [style = dotted, label="true"];
30->16 [style = bold, label=""];
7->19 [style = bold, label=""];
10->24 [style = dashed, label="0"];
32->31 [style = bold, label=""];
21->14 [style = bold, label=""];
}
