digraph {
28 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "SocketChannel mockChannel = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ByteBuffer unwrappedBuffer = inputSharing.getBuffer()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final int individualRead = 60@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "readAtLeastUsingSmallAppBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "readAtLeast['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "unwrappedBuffer.limit(unwrappedBuffer.position() + preexistingBytes)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final ByteBufferSharingImpl inputSharingImpl = (ByteBufferSharingImpl)inputSharing@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "nioSslEngine.peerAppData = unwrappedBuffer@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@27@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(inputSharing.getBuffer().capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "unwrappedBuffer.position(unwrappedBuffer.capacity() - individualRead)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->32 [style = bold, label=""];
4->10 [style = bold, label=""];
11->20 [style = bold, label=""];
22->25 [style = bold, label=""];
21->24 [style = solid, label="testSSLEngine"];
8->0 [style = solid, label="unwrappedBuffer"];
3->15 [style = solid, label="individualRead"];
2->3 [style = bold, label=""];
29->31 [style = bold, label=""];
3->14 [style = bold, label=""];
14->16 [style = solid, label="preexistingBytes"];
9->6 [style = solid, label="wrappedBuffer"];
18->27 [style = solid, label="initialUnwrappedBufferSize"];
5->6 [style = solid, label="mockChannel"];
19->11 [style = bold, label=""];
15->6 [style = bold, label=""];
5->18 [style = bold, label=""];
6->13 [style = solid, label="testSSLEngine"];
20->1 [style = bold, label=""];
27->16 [style = bold, label=""];
14->1 [style = solid, label="preexistingBytes"];
16->19 [style = bold, label=""];
3->11 [style = solid, label="individualRead"];
2->6 [style = solid, label="amountToRead"];
14->26 [style = solid, label="preexistingBytes"];
31->15 [style = bold, label=""];
8->22 [style = solid, label="unwrappedBuffer"];
30->29 [style = bold, label=""];
0->15 [style = bold, label=""];
21->28 [style = bold, label=""];
14->11 [style = solid, label="preexistingBytes"];
12->13 [style = bold, label=""];
26->27 [style = bold, label=""];
27->16 [style = solid, label="initialFreeSpace"];
14->31 [style = solid, label="preexistingBytes"];
17->2 [style = bold, label=""];
20->1 [style = solid, label="initialFreeSpace"];
13->26 [style = bold, label=""];
13->7 [style = bold, label=""];
10->0 [style = bold, label=""];
7->16 [style = bold, label=""];
0->29 [style = dashed, label="0"];
3->25 [style = solid, label="individualRead"];
3->26 [style = solid, label="individualRead"];
9->5 [style = bold, label=""];
28->24 [style = bold, label=""];
14->9 [style = bold, label=""];
18->8 [style = bold, label=""];
23->2 [style = bold, label=""];
5->30 [style = bold, label=""];
8->4 [style = bold, label=""];
14->20 [style = solid, label="preexistingBytes"];
32->13 [style = bold, label=""];
24->6 [style = bold, label=""];
3->29 [style = solid, label="individualRead"];
14->4 [style = solid, label="preexistingBytes"];
4->22 [style = bold, label=""];
18->8 [style = solid, label="initialUnwrappedBufferSize"];
33->2 [style = bold, label=""];
14->27 [style = solid, label="preexistingBytes"];
25->21 [style = bold, label=""];
18->20 [style = solid, label="initialUnwrappedBufferSize"];
6->12 [style = bold, label=""];
}
