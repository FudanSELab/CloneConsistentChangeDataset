digraph {
10 [style = filled, label = "SpringConfigurationPropertySource adapter = new SpringConfigurationPropertySource(propertySource,DefaultPropertyMapper.INSTANCE,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EnumerablePropertySource<?> propertySource = new OriginCapablePropertySource<>(new MapPropertySource(\"test\",source))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "PropertySource<?> propertySource = new MapPropertySource(\"test\",source)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Map<String,Object> source = new LinkedHashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "containsDescendantOfShouldReturnEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "containsDescendantOfShouldCheckSourceNames['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(adapter.containsDescendantOf(ConfigurationPropertyName.of(\"fof\"))).isEqualTo(ConfigurationPropertyState.ABSENT)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "source.put(\"foo.bar\",\"value\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(adapter.containsDescendantOf(ConfigurationPropertyName.of(\"foo\"))).isEqualTo(ConfigurationPropertyState.PRESENT)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "source.put(\"faf\",\"value\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "containsDescendantOfShouldCheckSourceNames['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertThat(adapter.containsDescendantOf(ConfigurationPropertyName.of(\"faf\"))).isEqualTo(ConfigurationPropertyState.ABSENT)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(adapter.containsDescendantOf(ConfigurationPropertyName.of(\"foo\"))).isEqualTo(ConfigurationPropertyState.UNKNOWN)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(propertySource,DefaultPropertyMapper.INSTANCE)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->12 [style = dashed, label="0"];
4->12 [style = bold, label=""];
6->4 [style = bold, label=""];
12->10 [style = bold, label=""];
13->6 [style = bold, label=""];
5->6 [style = bold, label=""];
6->12 [style = solid, label="source"];
8->2 [style = bold, label=""];
8->2 [style = solid, label="propertySource"];
7->8 [style = bold, label=""];
0->1 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
2->3 [style = bold, label=""];
9->6 [style = bold, label=""];
12->10 [style = solid, label="propertySource"];
10->11 [style = bold, label=""];
6->8 [style = solid, label="source"];
}
