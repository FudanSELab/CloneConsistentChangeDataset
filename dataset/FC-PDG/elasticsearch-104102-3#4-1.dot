digraph {
4 [style = filled, label = "testPreservesThreadsOriginalContextOnAfterException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertFalse(threadContext.isSystemContext())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertNull(threadContext.getHeader(\"foo\"))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"from onAfter\",e.getMessage())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "threadContext.putHeader(\"foo\",\"bar\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testMarkAsSystemContext['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ThreadContext threadContext = new ThreadContext(Settings.EMPTY)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertNull(e.getCause())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(threadContext.isSystemContext())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "threadContext.putTransient(\"foo\",\"bar_transient\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertNull(threadContext.getTransient(\"foo\"))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertFalse(threadContext.isSystemContext())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(threadContext.isDefaultContext())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "threadContext.markAsSystemContext()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "RuntimeException e = expectThrows(,null)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testPreservesThreadsOriginalContextOnAfterException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertNull(threadContext.getHeader(\"foo\"))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Runnable withContext@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertFalse(threadContext.isSystemContext())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "withContext = threadContext.preserveContext(new AbstractRunnable(){@Override public void onAfter(){throw new RuntimeException(\"from onAfter\")}@Override public void onFailure(Exception e){throw new RuntimeException(\"from onFailure\",e)}@Override protected void doRun(){assertEquals(\"bar\",threadContext.getHeader(\"foo\"))assertEquals(\"bar_transient\",threadContext.getTransient(\"foo\"))assertFalse(threadContext.isDefaultContext())}})@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertNull(threadContext.getTransient(\"foo\"))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(threadContext.isDefaultContext())@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
15->10 [style = bold, label=""];
19->18 [style = bold, label=""];
7->1 [style = bold, label=""];
21->19 [style = bold, label=""];
9->2 [style = bold, label=""];
10->19 [style = dashed, label="0"];
1->3 [style = bold, label=""];
3->6 [style = bold, label=""];
16->17 [style = bold, label=""];
0->20 [style = dashed, label="0"];
2->12 [style = bold, label=""];
8->0 [style = bold, label=""];
5->16 [style = dashed, label="0"];
18->20 [style = bold, label=""];
20->16 [style = bold, label=""];
10->8 [style = bold, label=""];
6->11 [style = bold, label=""];
11->13 [style = bold, label=""];
5->7 [style = bold, label=""];
8->18 [style = dashed, label="0"];
14->15 [style = bold, label=""];
13->9 [style = bold, label=""];
0->5 [style = bold, label=""];
}
