digraph {
12 [style = filled, label = "assertNotNull(\"null graph after resolver\",res)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"wrong # of edges v1-v3 in the resulting graph after resolver\",1,res.getIncidentEdges(v3).size())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"1.1\",res.getIncidentEdges(v3).get(0).getVersion(),\"wrong edge v1-v3 in the resulting graph after resolver\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertNotNull(\"no vertices in the resulting graph after resolver\",res.getVertices())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(1,res.getIncidentEdges(v4).size(),\"wrong # of edges v3-v4 in the resulting graph after resolver\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertNotNull(res.getExcidentEdges(v1),\"no edges in the resulting graph after resolver\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(4,res.getVertices().size(),\"wrong # of vertices in the resulting graph after resolver\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertNotNull(res,\"null graph after resolver\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "MetadataGraph res@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertNotNull(res.getVertices(),\"no vertices in the resulting graph after resolver\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(\"1.2\",res.getIncidentEdges(v2).get(0).getVersion(),\"wrong edge v1-v2 in the resulting graph after resolver\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(\"wrong edge v3-v4 in the resulting graph after resolver\",\"1.2\",res.getIncidentEdges(v4).get(0).getVersion())@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"wrong edge v1-v2 in the resulting graph after resolver\",\"1.2\",res.getIncidentEdges(v2).get(0).getVersion())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"wrong # of vertices in the resulting graph after resolver\",4,res.getVertices().size())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testCompileResolution['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertEquals(\"wrong # of excident edges in the resulting graph entry after resolver\",2,res.getExcidentEdges(v1).size())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"1.2\",res.getIncidentEdges(v4).get(0).getVersion(),\"wrong edge v3-v4 in the resulting graph after resolver\")@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "res = resolver.resolveConflicts(graph,ArtifactScopeEnum.compile)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNotNull(\"no edges in the resulting graph after resolver\",res.getExcidentEdges(v1))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"wrong # of v2 incident edges in the resulting graph after resolver\",1,res.getIncidentEdges(v2).size())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "res = resolver.resolveConflicts(graph,ArtifactScopeEnum.test)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(\"wrong edge v1-v3 in the resulting graph after resolver\",\"1.1\",res.getIncidentEdges(v3).get(0).getVersion())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(1,res.getIncidentEdges(v3).size(),\"wrong # of edges v1-v3 in the resulting graph after resolver\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testCompileResolution['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testTestResolution['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"wrong # of edges v3-v4 in the resulting graph after resolver\",1,res.getIncidentEdges(v4).size())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(1,res.getIncidentEdges(v2).size(),\"wrong # of v2 incident edges in the resulting graph after resolver\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertEquals(2,res.getExcidentEdges(v1).size(),\"wrong # of excident edges in the resulting graph entry after resolver\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14->24 [style = bold, label=""];
2->12 [style = solid, label="res"];
0->26 [style = bold, label=""];
9->11 [style = bold, label=""];
18->23 [style = bold, label=""];
27->0 [style = bold, label=""];
11->16 [style = dashed, label="0"];
15->25 [style = bold, label=""];
0->2 [style = bold, label=""];
20->0 [style = bold, label=""];
3->24 [style = dashed, label="0"];
13->17 [style = dashed, label="0"];
10->3 [style = bold, label=""];
7->0 [style = bold, label=""];
16->17 [style = bold, label=""];
3->4 [style = bold, label=""];
12->21 [style = dashed, label="0"];
1->9 [style = bold, label=""];
2->12 [style = bold, label=""];
19->16 [style = bold, label=""];
6->18 [style = dashed, label="0"];
2->21 [style = solid, label="res"];
9->19 [style = dashed, label="0"];
26->12 [style = bold, label=""];
12->10 [style = bold, label=""];
23->22 [style = bold, label=""];
8->5 [style = bold, label=""];
2->21 [style = bold, label=""];
4->15 [style = dashed, label="0"];
11->13 [style = bold, label=""];
6->8 [style = bold, label=""];
25->19 [style = bold, label=""];
26->12 [style = solid, label="res"];
4->1 [style = bold, label=""];
13->6 [style = bold, label=""];
2->26 [style = dashed, label="0"];
1->25 [style = dashed, label="0"];
10->14 [style = dashed, label="0"];
17->18 [style = bold, label=""];
8->23 [style = dashed, label="0"];
21->14 [style = bold, label=""];
24->15 [style = bold, label=""];
5->22 [style = dashed, label="0"];
}
