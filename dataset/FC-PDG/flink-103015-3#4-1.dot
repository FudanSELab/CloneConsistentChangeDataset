digraph {
22 [style = filled, label = "assertThat(graph.getStateBackend(),nullValue())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final Configuration configuration = new Configuration()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "configuration.set(ExecutionOptions.USE_BATCH_STATE_BACKEND,false)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "StreamNode processNode = graph.getStreamNode(process.getId())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "StreamNode processNode = graph.getStreamNode(process.getId())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "StreamGraphGenerator graphGenerator = new StreamGraphGenerator(Collections.singletonList(sink.getTransformation()),env.getConfig(),env.getCheckpointConfig(),configuration)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(graph.getTimerServiceProvider(),nullValue())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testDisablingStateBackendOneInputTransformation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final Map<ManagedMemoryUseCase,Integer> expectedOperatorWeights = new HashMap<>()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "configuration.set(ExecutionOptions.SORTED_INPUTS_MEMORY,MemorySize.ofMebiBytes(42))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "StreamGraph graph = graphGenerator.generate()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(processNode.getManagedMemoryOperatorScopeUseCaseWeights(),equalTo(expectedOperatorWeights))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(processNode.getManagedMemorySlotScopeUseCases(),equalTo(Collections.singleton(ManagedMemoryUseCase.STATE_BACKEND)))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "graphGenerator.setRuntimeExecutionMode(RuntimeExecutionMode.BATCH)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testCustomManagedMemoryWeights['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(processNode.getOperatorFactory().getChainingStrategy(),equalTo(ChainingStrategy.HEAD))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testCustomManagedMemoryWeights['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(processNode.getManagedMemorySlotScopeUseCases(),equalTo(Collections.singleton(ManagedMemoryUseCase.STATE_BACKEND)))@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "StreamGraph graph = getStreamGraphInBatchMode(sink,configuration)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Configuration configuration = new Configuration()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(processNode.getManagedMemoryOperatorScopeUseCaseWeights(),equalTo(expectedOperatorWeights))@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "SingleOutputStreamOperator<Integer> process = env.fromElements(1,2).keyBy(null).process(DUMMY_PROCESS_FUNCTION)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(processNode.getInputRequirements().get(0),equalTo(StreamConfig.InputRequirement.SORTED))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DataStreamSink<Integer> sink = process.addSink(new DiscardingSink<>())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
6->4 [style = solid, label="configuration"];
0->9 [style = bold, label=""];
19->18 [style = bold, label=""];
7->17 [style = bold, label=""];
6->20 [style = dashed, label="0"];
2->1 [style = bold, label=""];
10->1 [style = solid, label="expectedOperatorWeights"];
3->6 [style = bold, label=""];
7->4 [style = bold, label=""];
15->16 [style = bold, label=""];
22->23 [style = bold, label=""];
1->13 [style = bold, label=""];
3->17 [style = solid, label="sink"];
12->10 [style = bold, label=""];
3->20 [style = bold, label=""];
24->4 [style = bold, label=""];
18->22 [style = bold, label=""];
21->9 [style = bold, label=""];
7->24 [style = dashed, label="0"];
16->10 [style = solid, label="expectedOperatorWeights"];
17->15 [style = bold, label=""];
9->5 [style = bold, label=""];
11->8 [style = bold, label=""];
14->9 [style = bold, label=""];
10->2 [style = bold, label=""];
20->4 [style = solid, label="configuration"];
6->7 [style = bold, label=""];
4->11 [style = bold, label=""];
20->24 [style = bold, label=""];
12->19 [style = bold, label=""];
6->17 [style = solid, label="configuration"];
16->12 [style = bold, label=""];
8->12 [style = bold, label=""];
}
