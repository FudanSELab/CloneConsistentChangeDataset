digraph {
14 [style = filled, label = "tableEnv.executeSql(\"create table db1.src (x int, y string)\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "tableEnv.executeSql(\"create table db1.src (x int)\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "verifyHiveQueryResult(\"select * from db1.dest\",Arrays.asList(\"11'11.1\",\"21'11.1\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testStaticPartition['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "tableEnv.executeSql(\"create database db1\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testStaticPartition['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveCatalog,\"db1\",\"src\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c0b0b2).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c0b0b8).commit()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "tableEnv.executeSql(\"create table db1.dest (x int) partitioned by (p1 string, p2 double)\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "tableEnv.executeSql(\"insert into db1.dest partition (p1='1''1', p2=1.1) select x from db1.src\").await()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals(1,hiveCatalog.listPartitions(new ObjectPath(\"db1\",\"dest\")).size())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "tableEnv.executeSql(\"create table db1.dest (x int) partitioned by (p1 double, p2 string)\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(2,hiveCatalog.listPartitions(new ObjectPath(\"db1\",\"dest\")).size())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testPartialDynamicPartition['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "verifyHiveQueryResult(\"select * from db1.dest\",Arrays.asList(\"11.1a\",\"21.1b\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "{tableEnv.executeSql(\"drop database db1 cascade\")}@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "tableEnv.executeSql(\"insert into db1.dest partition (p1=1.1) select x,y from db1.src\").await()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TableEnvironment tableEnv = getTableEnvWithHiveCatalog()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "tableEnv.executeSql(\"insert into db1.dest partition (p1='1\'1', p2=1.1) select x from db1.src\").await()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->3 [style = bold, label=""];
1->4 [style = bold, label=""];
8->10 [style = dashed, label="0"];
1->15 [style = dashed, label="0"];
0->16 [style = dashed, label="0"];
7->0 [style = bold, label=""];
16->17 [style = bold, label=""];
5->14 [style = bold, label=""];
11->2 [style = bold, label=""];
14->7 [style = bold, label=""];
6->2 [style = bold, label=""];
12->2 [style = bold, label=""];
0->10 [style = bold, label=""];
3->7 [style = bold, label=""];
7->16 [style = bold, label=""];
9->13 [style = dashed, label="0"];
15->4 [style = bold, label=""];
8->9 [style = bold, label=""];
0->8 [style = bold, label=""];
8->17 [style = dashed, label="0"];
10->9 [style = bold, label=""];
17->13 [style = bold, label=""];
13->15 [style = bold, label=""];
3->14 [style = dashed, label="0"];
9->1 [style = bold, label=""];
2->5 [style = bold, label=""];
}
