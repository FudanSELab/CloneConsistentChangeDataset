digraph {
10 [style = filled, label = "DeleteByQueryRequestBuilder request = deleteByQuery().source(\"test\").filter(QueryBuilders.matchAllQuery()).size(2).refresh(true)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setSize(0).get(),0)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(deleteByQuery().source(\"test\").filter(QueryBuilders.matchAllQuery()).refresh(true).setSlices(slices).get(),matcher().deleted(5).slices(hasSize(expectedSlices)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testBasics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setTypes(\"test\").setSize(0).get(),0)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setTypes(\"test\").setSize(0).get(),3)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setTypes(\"test\").setSize(0).get(),7)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "indexRandom(true,client().prepareIndex(\"test\",\"test\",\"1\").setSource(\"foo\",\"a\"),client().prepareIndex(\"test\",\"test\",\"2\").setSource(\"foo\",\"a\"),client().prepareIndex(\"test\",\"test\",\"3\").setSource(\"foo\",\"b\"),client().prepareIndex(\"test\",\"test\",\"4\").setSource(\"foo\",\"c\"),client().prepareIndex(\"test\",\"test\",\"5\").setSource(\"foo\",\"d\"),client().prepareIndex(\"test\",\"test\",\"6\").setSource(\"foo\",\"e\"),client().prepareIndex(\"test\",\"test\",\"7\").setSource(\"foo\",\"f\"))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "int expectedSlices = expectedSliceStatuses(slices,\"test\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(deleteByQuery().source(\"test\").filter(termQuery(\"foo\",\"a\")).refresh(true).setSlices(slices).get(),matcher().deleted(2).slices(hasSize(expectedSlices)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setTypes(\"test\").setSize(0).get(),5)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setSize(0).get(),5)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testBasics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setTypes(\"test\").setSize(0).get(),3)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setTypes(\"test\").setSize(0).get(),5)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testSlices['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setTypes(\"test\").setSize(0).get(),0)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setSize(0).get(),3)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertThat(deleteByQuery().source(\"test\").filter(termQuery(\"foo\",\"a\")).refresh(true).get(),matcher().deleted(2))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(deleteByQuery().source(\"test\").filter(QueryBuilders.matchAllQuery()).refresh(true).get(),matcher().deleted(3))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setSize(0).get(),3)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "int slices = randomSlices()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setSize(0).get(),7)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThat(deleteByQuery().source(\"test\").filter(termQuery(\"foo\",\"no_match\")).refresh(true).get(),matcher().deleted(0))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(request.get(),matcher().deleted(2))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->23 [style = solid, label="slices"];
5->3 [style = bold, label=""];
4->10 [style = bold, label=""];
22->24 [style = solid, label="slices"];
15->10 [style = bold, label=""];
7->17 [style = bold, label=""];
11->16 [style = dashed, label="0"];
10->19 [style = dashed, label="0"];
0->12 [style = bold, label=""];
6->19 [style = bold, label=""];
5->14 [style = bold, label=""];
20->1 [style = bold, label=""];
16->2 [style = bold, label=""];
23->24 [style = solid, label="expectedSlices"];
2->4 [style = bold, label=""];
22->23 [style = bold, label=""];
10->6 [style = bold, label=""];
12->7 [style = bold, label=""];
11->2 [style = bold, label=""];
3->0 [style = bold, label=""];
13->1 [style = bold, label=""];
1->11 [style = bold, label=""];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
6->5 [style = bold, label=""];
23->19 [style = solid, label="expectedSlices"];
23->24 [style = bold, label=""];
14->0 [style = bold, label=""];
1->16 [style = bold, label=""];
4->15 [style = dashed, label="0"];
9->17 [style = dashed, label="0"];
2->15 [style = bold, label=""];
11->22 [style = bold, label=""];
12->18 [style = dashed, label="0"];
0->18 [style = bold, label=""];
3->14 [style = dashed, label="0"];
18->7 [style = bold, label=""];
24->6 [style = bold, label=""];
22->19 [style = solid, label="slices"];
19->21 [style = bold, label=""];
}
