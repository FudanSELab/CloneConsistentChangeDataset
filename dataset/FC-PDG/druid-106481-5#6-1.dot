digraph {
16 [style = filled, label = "extractionMap.put(\"travel\",\"travel0\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "NullHandling.replaceWithDefault()@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testGroupByWithExtractionDimFilterCaseMappingValueIsNullOrEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "extractionMap.put(\"business\",\"business0\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "extractionMap.put(\"news\",\"\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"dim-extraction\")@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "extractionMap.put(\"automotive\",\"automotive0\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news\",\"rows\",1L,\"idx\",121L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"news\",\"rows\",1L,\"idx\",114L))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "extractionMap.put(\"premium\",\"premium0\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "MapLookupExtractor mapLookupExtractor = new MapLookupExtractor(extractionMap,false)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testGroupByWithExtractionDimFilterWhenSearchValueNotInTheMap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "extractionMap.put(\"mezzanine\",null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"dim-extraction\")@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "LookupExtractionFn lookupExtractionFn = new LookupExtractionFn(mapLookupExtractor,false,null,true,false)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).setDimFilter(new ExtractionDimFilter(\"quality\",\"\",lookupExtractionFn,null)).build()@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "testGroupByWithExtractionDimFilterCaseMappingValueIsNullOrEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<Row> expectedResults@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "extractionMap.put(\"entertainment\",\"entertainment0\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).setDimFilter(new ExtractionDimFilter(\"quality\",\"\",lookupExtractionFn,null)).build()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",3L,\"idx\",2870L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news\",\"rows\",1L,\"idx\",121L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"mezzanine\",\"rows\",3L,\"idx\",2447L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"news\",\"rows\",1L,\"idx\",114L))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "extractionMap.put(\"health\",\"health0\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "extractionMap.put(\"technology\",\"technology0\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Map<String,String> extractionMap = new HashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<Row> expectedResults = Collections.emptyList()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).setDimFilter(new ExtractionDimFilter(\"quality\",\"NOT_THERE\",lookupExtractionFn,null)).build()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->9 [style = bold, label=""];
0->16 [style = bold, label=""];
12->5 [style = bold, label=""];
15->14 [style = bold, label=""];
1->10 [style = solid, label="mapLookupExtractor"];
10->24 [style = bold, label=""];
25->22 [style = solid, label="expectedResults"];
6->1 [style = solid, label="extractionMap"];
18->19 [style = bold, label=""];
10->21 [style = bold, label=""];
20->6 [style = bold, label=""];
8->9 [style = solid, label="expectedResults"];
21->4 [style = solid, label="query"];
11->4 [style = solid, label="query"];
17->25 [style = dashed, label="0"];
3->0 [style = bold, label=""];
26->22 [style = bold, label=""];
6->2 [style = bold, label=""];
6->1 [style = bold, label=""];
26->22 [style = solid, label="results"];
17->12 [style = bold, label=""];
12->8 [style = dotted, label="false"];
16->1 [style = bold, label=""];
4->9 [style = solid, label="results"];
12->5 [style = dotted, label="true"];
12->8 [style = bold, label=""];
24->25 [style = bold, label=""];
23->6 [style = bold, label=""];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
2->15 [style = bold, label=""];
25->26 [style = bold, label=""];
11->24 [style = dashed, label="0"];
11->17 [style = bold, label=""];
24->26 [style = solid, label="query"];
14->13 [style = bold, label=""];
8->4 [style = bold, label=""];
1->10 [style = bold, label=""];
19->3 [style = bold, label=""];
21->17 [style = bold, label=""];
5->9 [style = solid, label="expectedResults"];
13->18 [style = bold, label=""];
10->11 [style = bold, label=""];
11->21 [style = dashed, label="0"];
}
