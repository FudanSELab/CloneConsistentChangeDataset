digraph {
4 [style = filled, label = "!isRewriteJoinToFilter(queryContext)@@@3@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Map<String,Object> queryContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testRemovableLeftJoin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testTopNFilterJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testQuery(\"SELECT t1.dim1, SUM(t1.cnt)\" + \"FROM druid.foo t1\" + \" LEFT JOIN (\" + \" SELECT\" + \" SUM(cnt) AS sum_cnt,\" + \" dim2\" + \" FROM druid.foo\" + \" GROUP BY dim2\" + \" ORDER BY 1 DESC\" + \" LIMIT 2\" + \") t2 ON (t1.dim2 = t2.dim2)\" + \"GROUP BY t1.dim1\" + \"ORDER BY 1\",queryContext,ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\",\"d0\"))).setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\",\"cnt\"))).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"d0\",OrderByColumnSpec.Direction.ASCENDING,StringComparators.LEXICOGRAPHIC)),Integer.MAX_VALUE)).setContext(queryContext).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a22239,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a2223e,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a22243,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a22248,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a2224d,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a22252))@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Map<String,Object> queryContext@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "cannotVectorize()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testTopNFilterJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testQuery(\"SELECT t1.dim1, SUM(t1.cnt)\" + \"FROM druid.foo t1\" + \" INNER JOIN (\" + \" SELECT\" + \" SUM(cnt) AS sum_cnt,\" + \" dim2\" + \" FROM druid.foo\" + \" GROUP BY dim2\" + \" ORDER BY 1 DESC\" + \" LIMIT 2\" + \") t2 ON (t1.dim2 = t2.dim2)\" + \"GROUP BY t1.dim1\" + \"ORDER BY 1\",queryContext,ImmutableList.of(GroupByQuery.builder().setDataSource(join(new TableDataSource(CalciteTests.DATASOURCE1),new QueryDataSource(new TopNQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).dimension(new DefaultDimensionSpec(\"dim2\",\"d0\")).aggregators(new LongSumAggregatorFactory(\"a0\",\"cnt\")).metric(\"a0\").threshold(2).context(QUERY_CONTEXT_DEFAULT).build()),\"j0.\",equalsCondition(DruidExpression.fromColumn(\"dim2\"),DruidExpression.fromColumn(\"j0.d0\")),JoinType.INNER)).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\",\"d0\"))).setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\",\"cnt\"))).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"d0\",OrderByColumnSpec.Direction.ASCENDING,StringComparators.LEXICOGRAPHIC)),Integer.MAX_VALUE)).setContext(queryContext).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a221d1,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a221d6))@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8->6 [style = solid, label="queryContext"];
0->3 [style = solid, label="queryContext"];
5->0 [style = dotted, label="true"];
7->6 [style = bold, label=""];
2->6 [style = dashed, label="0"];
4->2 [style = dotted, label="true"];
4->3 [style = bold, label=""];
1->2 [style = bold, label=""];
0->8 [style = dashed, label="0"];
1->0 [style = dotted, label="true"];
5->4 [style = bold, label=""];
4->2 [style = bold, label=""];
2->3 [style = bold, label=""];
7->8 [style = dotted, label="true"];
}
