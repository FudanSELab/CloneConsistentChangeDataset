digraph {
10 [style = filled, label = "validateUserPasswordAndUpdateIfNeededTestDomainAdminUpdatingUserPassword['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Mockito.verify(accountManagerImpl,Mockito.times(1)).validateCurrentPassword(userVoMock,currentPassword)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "accountManagerImpl.validateUserPasswordAndUpdateIfNeeded(newPassword,userVoMock,null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Mockito.doReturn(accountMock).when(accountManagerImpl).getCurrentCallingAccount()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String expectedUserPasswordAfterEncoded = configureUserMockAuthenticators(newPassword)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "accountManagerImpl.validateUserPasswordAndUpdateIfNeeded(newPassword,userVoMock,currentPassword)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Mockito.lenient().doNothing().when(accountManagerImpl).validateCurrentPassword(Mockito.eq(userVoMock),Mockito.anyString())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Mockito.doReturn(false).when(accountManagerImpl).isDomainAdmin(accountMockId)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Mockito.doReturn(true).when(accountManagerImpl).isDomainAdmin(accountMockId)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Mockito.verify(userVoMock,Mockito.times(1)).setPassword(expectedUserPasswordAfterEncoded)@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String currentPassword = \"theCurrentPassword\"@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Mockito.verify(accountManagerImpl,Mockito.times(0)).validateCurrentPassword(Mockito.eq(userVoMock),Mockito.anyString())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Mockito.doNothing().when(accountManagerImpl).validateCurrentPassword(Mockito.eq(userVoMock),Mockito.anyString())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "validateUserPasswordAndUpdateIfNeededTestDomainAdminUpdatingUserPassword['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "validateUserPasswordAndUpdateIfNeededTestUserUpdatingHisPassword['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String newPassword = \"newPassword\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Mockito.verify(userVoMock,Mockito.times(1)).setPassword(expectedUserPasswordAfterEncoded)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Mockito.doReturn(false).when(accountManagerImpl).isRootAdmin(accountMockId)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->12 [style = solid, label="currentPassword"];
14->7 [style = bold, label=""];
9->11 [style = dashed, label="0"];
8->4 [style = bold, label=""];
5->4 [style = solid, label="expectedUserPasswordAfterEncoded"];
12->15 [style = bold, label=""];
11->0 [style = bold, label=""];
17->12 [style = bold, label=""];
9->0 [style = bold, label=""];
0->8 [style = bold, label=""];
5->9 [style = bold, label=""];
5->13 [style = solid, label="expectedUserPasswordAfterEncoded"];
3->5 [style = bold, label=""];
3->5 [style = solid, label="newPassword"];
10->7 [style = bold, label=""];
5->11 [style = bold, label=""];
16->3 [style = bold, label=""];
9->17 [style = bold, label=""];
3->0 [style = solid, label="newPassword"];
6->3 [style = bold, label=""];
6->16 [style = dashed, label="0"];
15->13 [style = bold, label=""];
2->6 [style = bold, label=""];
2->16 [style = bold, label=""];
17->15 [style = solid, label="currentPassword"];
3->12 [style = solid, label="newPassword"];
1->7 [style = bold, label=""];
7->2 [style = bold, label=""];
}
