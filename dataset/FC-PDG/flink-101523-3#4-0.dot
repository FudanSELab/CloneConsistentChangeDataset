digraph {
12 [style = filled, label = "DataStream<String> stringMap = src.map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"x \" + value}})@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "DataStream<Long> longMap = src.map(new MapFunction<Integer,Long>(){@Override public Long map(Integer value){return (long)(value + 1)}}).keyBy(new KeySelector<Long,Integer>(){@Override public Integer getKey(Long value){return value.intValue()}})@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(expected,result)@@@53@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Exception e@@@46@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "stringMap.connect(longMap).map(new CoMapFunction<String,Long,String>(){@Override public String map1(String value){return value}@Override public String map2(Long value){return value.toString()}}).addSink(resultSink)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "env.setParallelism(1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "e.printStackTrace()@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "List<String> expected = Arrays.asList(\"x 1\",\"x 3\",\"x 5\",\"2\",\"4\",\"6\")@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "env.setParallelism(3)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "differentDataStreamSameChain['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "differentDataStreamDifferentChain['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "stringMap.connect(src).map(new CoMapFunction<String,Integer,String>(){@Override public String map1(String value){return value}@Override public String map2(Integer value){return String.valueOf(value + 1)}}).addSink(resultSink)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DataStream<Integer> src = env.fromElements(1,3,5)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<String> expected = Arrays.asList(\"x 1\",\"x 3\",\"x 5\",\"2\",\"4\",\"6\")@@@49@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Collections.sort(result)@@@52@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TestListResultSink<String> resultSink = new TestListResultSink<String>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Collections.sort(result)@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Collections.sort(expected)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "env.execute()@@@44@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "env.execute()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertEquals(expected,result)@@@22@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "DataStream<Integer> src = env.fromElements(1,3,5).disableChaining()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "List<String> result = resultSink.getResult()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "DataStream<String> stringMap = src.map(null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Collections.sort(expected)@@@51@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "stringMap.connect(src).map(new CoMapFunction<String,Integer,String>(){@Override public String map1(String value){return value}@Override public String map2(Integer value){return String.valueOf(value + 1)}}).addSink(resultSink)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "differentDataStreamSameChain['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "List<String> result = resultSink.getResult()@@@50@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "DataStream<String> stringMap = src.flatMap(new FlatMapFunction<Integer,String>(){@Override public void flatMap(Integer value,Collector<String> out){out.collect(\"x \" + value)}}).keyBy(new KeySelector<String,Integer>(){@Override public Integer getKey(String value){return value.length()}})@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "TestListResultSink<String> resultSink = new TestListResultSink<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->3 [style = bold, label=""];
21->19 [style = bold, label=""];
6->25 [style = solid, label="resultSink"];
29->30 [style = bold, label=""];
7->10 [style = bold, label=""];
6->20 [style = dashed, label="0"];
23->28 [style = dotted, label="true"];
0->12 [style = bold, label=""];
26->25 [style = bold, label=""];
30->27 [style = bold, label=""];
18->15 [style = bold, label=""];
14->22 [style = bold, label=""];
22->21 [style = bold, label=""];
2->11 [style = solid, label="expected"];
13->18 [style = solid, label="result"];
20->3 [style = bold, label=""];
20->22 [style = solid, label="resultSink"];
5->29 [style = dashed, label="0"];
9->6 [style = bold, label=""];
1->11 [style = bold, label=""];
19->15 [style = solid, label="expected"];
23->28 [style = bold, label=""];
28->2 [style = bold, label=""];
13->17 [style = bold, label=""];
3->5 [style = bold, label=""];
0->14 [style = bold, label=""];
6->4 [style = solid, label="resultSink"];
19->13 [style = bold, label=""];
12->14 [style = dashed, label="0"];
12->4 [style = bold, label=""];
5->0 [style = bold, label=""];
8->2 [style = bold, label=""];
7->11 [style = solid, label="result"];
0->30 [style = dashed, label="0"];
12->27 [style = dashed, label="0"];
19->17 [style = solid, label="expected"];
4->8 [style = bold, label=""];
2->10 [style = solid, label="expected"];
25->8 [style = bold, label=""];
13->15 [style = solid, label="result"];
2->7 [style = bold, label=""];
10->1 [style = bold, label=""];
16->20 [style = bold, label=""];
24->6 [style = bold, label=""];
3->29 [style = bold, label=""];
17->18 [style = bold, label=""];
7->1 [style = solid, label="result"];
27->26 [style = bold, label=""];
}
