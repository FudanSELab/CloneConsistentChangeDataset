digraph {
11 [style = filled, label = "byte(( bytes = new byte((((@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Random rand = new Random()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(bytes)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "i < size@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWords(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "i++@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytesBlock(mb))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "randomizedStressTestBytes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "rand.nextBytes(bytes)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "randomizedStressTestBytes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Set<Long> hashcodes = new HashSet<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Set<Integer> hashcodes = new HashSet<>()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWords(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),hasher.hashUnsafeWords(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytesBlock(mb),HiveHasher.hashUnsafeBytesBlock(mb))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "int size = 65536@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "randomizedStressTestBytes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "int byteArrSize = rand.nextInt(100) * 8@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
9->20 [style = dashed, label="0"];
5->19 [style = solid, label="byteArrSize"];
10->16 [style = solid, label="size"];
10->8 [style = solid, label="size"];
1->8 [style = bold, label=""];
11->4 [style = solid, label="bytes"];
3->1 [style = bold, label=""];
10->21 [style = solid, label="size"];
1->17 [style = dotted, label="true"];
9->2 [style = bold, label=""];
7->10 [style = bold, label=""];
2->1 [style = bold, label=""];
1->11 [style = dotted, label="true"];
1->22 [style = dotted, label="true"];
12->15 [style = bold, label=""];
14->10 [style = bold, label=""];
11->12 [style = bold, label=""];
3->1 [style = solid, label="i"];
1->4 [style = dotted, label="true"];
11->19 [style = solid, label="bytes"];
8->21 [style = dashed, label="0"];
0->17 [style = dashed, label="0"];
1->19 [style = dotted, label="true"];
10->6 [style = bold, label=""];
2->3 [style = solid, label="i"];
0->22 [style = dashed, label="0"];
4->0 [style = bold, label=""];
20->2 [style = bold, label=""];
11->12 [style = solid, label="bytes"];
1->3 [style = dotted, label="true"];
6->20 [style = bold, label=""];
22->3 [style = bold, label=""];
11->0 [style = solid, label="bytes"];
1->13 [style = dotted, label="true"];
15->17 [style = bold, label=""];
13->3 [style = bold, label=""];
12->4 [style = bold, label=""];
18->10 [style = bold, label=""];
1->16 [style = bold, label=""];
1->21 [style = bold, label=""];
5->22 [style = solid, label="byteArrSize"];
1->15 [style = dotted, label="true"];
5->4 [style = solid, label="byteArrSize"];
2->1 [style = solid, label="i"];
11->22 [style = solid, label="bytes"];
1->12 [style = dotted, label="true"];
4->19 [style = dashed, label="0"];
11->15 [style = solid, label="bytes"];
15->17 [style = solid, label="mb"];
5->11 [style = bold, label=""];
17->13 [style = bold, label=""];
5->0 [style = solid, label="byteArrSize"];
1->0 [style = dotted, label="true"];
15->13 [style = solid, label="mb"];
6->9 [style = bold, label=""];
12->19 [style = bold, label=""];
10->1 [style = solid, label="size"];
19->22 [style = bold, label=""];
1->5 [style = dotted, label="true"];
}
