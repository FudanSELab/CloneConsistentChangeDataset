digraph {
21 [style = filled, label = "null != ctx.LP_()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final ExprContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "return visit(ctx.booleanPrimary())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "null != ctx.booleanPrimary()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "String operator = ctx.logicalOperator().getText()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String operator = \"XOR\"@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "return visit(ctx.expr(0))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "null != ctx.orOperator()@@@12@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "visitExpr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "null != ctx.logicalOperator()@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "return createBinaryOperationExpression(ctx,ctx.andOperator().getText())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "null != ctx.XOR()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "visitExpr['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)),(ExpressionSegment)visit(ctx.expr(1)),ctx.logicalOperator().getText(),text)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@17@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return createBinaryOperationExpression(ctx,ctx.orOperator().getText())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "visitExpr['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return createBinaryOperationExpression(ctx,\"XOR\")@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "null != ctx.andOperator()@@@9@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
12->5 [style = solid, label="operator"];
6->3 [style = bold, label=""];
16->15 [style = bold, label=""];
6->21 [style = dashed, label="0"];
9->0 [style = dotted, label="true"];
25->1 [style = bold, label=""];
12->23 [style = dashed, label="0"];
4->5 [style = solid, label="right"];
9->0 [style = bold, label=""];
5->23 [style = bold, label=""];
0->6 [style = bold, label=""];
8->14 [style = solid, label="ctx"];
19->20 [style = dotted, label="true"];
19->20 [style = bold, label=""];
8->20 [style = solid, label="ctx"];
16->17 [style = dotted, label="true"];
3->10 [style = dotted, label="true"];
11->4 [style = bold, label=""];
22->9 [style = bold, label=""];
6->1 [style = dotted, label="true"];
11->5 [style = solid, label="left"];
14->19 [style = bold, label=""];
18->8 [style = dotted, label="true"];
21->24 [style = bold, label=""];
0->21 [style = bold, label=""];
6->19 [style = bold, label=""];
16->17 [style = bold, label=""];
21->25 [style = bold, label=""];
23->3 [style = bold, label=""];
10->26 [style = bold, label=""];
8->17 [style = solid, label="ctx"];
5->10 [style = solid, label="right"];
12->1 [style = bold, label=""];
1->10 [style = solid, label="left"];
9->6 [style = bold, label=""];
19->16 [style = bold, label=""];
3->19 [style = dashed, label="0"];
6->14 [style = bold, label=""];
3->10 [style = bold, label=""];
25->5 [style = dotted, label="true"];
6->14 [style = dotted, label="true"];
22->8 [style = dotted, label="true"];
6->5 [style = dotted, label="true"];
23->10 [style = solid, label="operator"];
3->10 [style = solid, label="text"];
20->16 [style = bold, label=""];
6->4 [style = dotted, label="true"];
21->24 [style = dotted, label="true"];
3->7 [style = bold, label=""];
13->8 [style = dotted, label="true"];
24->25 [style = bold, label=""];
6->11 [style = bold, label=""];
25->26 [style = bold, label=""];
1->5 [style = solid, label="text"];
17->15 [style = bold, label=""];
18->9 [style = bold, label=""];
9->21 [style = bold, label=""];
25->3 [style = dotted, label="true"];
4->12 [style = bold, label=""];
10->2 [style = solid, label="text"];
10->2 [style = bold, label=""];
6->12 [style = dotted, label="true"];
25->23 [style = dotted, label="true"];
6->11 [style = dotted, label="true"];
25->10 [style = dotted, label="true"];
2->7 [style = bold, label=""];
13->9 [style = bold, label=""];
3->2 [style = dotted, label="true"];
25->1 [style = dotted, label="true"];
}
