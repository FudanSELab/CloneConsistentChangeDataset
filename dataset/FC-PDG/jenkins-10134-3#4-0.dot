digraph {
5 [style = filled, label = "getNodeShouldFailIfNodeDoesNotExist['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.EXTENDED_READ,Jenkins.READ).invokeWithArgs(\"MySlave\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "updateNodeShouldFailIfNodeDoesNotExist['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(result.stderr(),containsString(\"No such node 'MySlave'\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.ADMINISTER).withStdin(getClass().getResourceAsStream(\"node.xml\")).invokeWithArgs(\"MySlave\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(\"Command is expected to fail\",result.returnCode(),equalTo(-1))@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.ADMINISTER).invokeWithArgs(\"MySlave\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "getNodeShouldFailIfNodeDoesNotExist['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(\"No output expected\",result.stdout(),isEmptyString())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->4 [style = bold, label=""];
4->3 [style = bold, label=""];
1->2 [style = bold, label=""];
7->4 [style = bold, label=""];
5->6 [style = bold, label=""];
2->7 [style = dashed, label="0"];
2->4 [style = bold, label=""];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
2->6 [style = dashed, label="0"];
}
