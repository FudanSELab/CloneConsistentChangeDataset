digraph {
8 [style = filled, label = "return new ClusterModel(context,assignableReplicas,assignableNodes,Collections.emptyMap(),Collections.emptyMap())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "initialize()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ClusterModel clusterModel = new ClusterModel(context,assignableReplicas,assignableNodes,Collections.emptyMap(),Collections.emptyMap())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream().allMatch(null))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Set<AssignableReplica> assignableReplicas = generateReplicas(testCache)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Set<AssignableNode> assignableNodes = generateNodes(testCache)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "clusterModel.assign(\"NOT-EXIST\",replica.getPartitionName(),replica.getReplicaState(),assignableNode.getInstanceName())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "{}@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "clusterModel.assign(replica.getResourceName(),replica.getPartitionName(),replica.getReplicaState(),\"NON-EXIST\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "ResourceControllerDataProvider testCache = setupClusterDataCache()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertTrue(assignableNode.getAssignedPartitionsMap().get(replica.getResourceName()).contains(replica.getPartitionName()))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.fail(\"Assigning a resource partition to a non existing instance shall fail.\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertFalse(clusterModel.getAssignableNodes().values().stream().anyMatch(null))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ClusterContext context = new ClusterContext(assignableReplicas,2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "AssignableReplica replica = assignableReplicas.iterator().next()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "AssignableNode assignableNode = assignableNodes.iterator().next()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "HelixException ex@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.fail(\"Assigning a non existing resource partition shall fail.\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().get(assignableNode.getFaultZone()).get(replica.getResourceName()).contains(replica.getPartitionName()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "{}@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "getDefaultClusterModel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "return new ClusterModel(context,assignableReplicas,assignableNodes)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "getDefaultClusterModel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "clusterModel.release(replica.getResourceName(),replica.getPartitionName(),replica.getReplicaState(),assignableNode.getInstanceName())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "clusterModel.assign(replica.getResourceName(),replica.getPartitionName(),replica.getReplicaState(),assignableNode.getInstanceName())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ClusterContext context = new ClusterContext(assignableReplicas,assignableNodes,Collections.emptyMap(),Collections.emptyMap())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "HelixException ex@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream().allMatch(null))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ClusterContext context = new ClusterContext(assignableReplicas,2)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "testNormalUsage['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertFalse(clusterModel.getAssignableNodes().values().stream().anyMatch(null))@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27->18 [style = bold, label=""];
15->10 [style = bold, label=""];
3->2 [style = dashed, label="0"];
0->1 [style = solid, label="assignableReplicas"];
5->0 [style = solid, label="testCache"];
3->1 [style = bold, label=""];
19->12 [style = bold, label=""];
3->1 [style = solid, label="context"];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
5->2 [style = solid, label="testCache"];
0->8 [style = solid, label="assignableReplicas"];
5->2 [style = solid, label="assignableReplicas"];
10->17 [style = bold, label=""];
21->24 [style = bold, label=""];
2->9 [style = bold, label=""];
7->4 [style = bold, label=""];
25->29 [style = bold, label=""];
9->8 [style = bold, label=""];
13->11 [style = bold, label=""];
26->22 [style = bold, label=""];
24->5 [style = bold, label=""];
2->16 [style = solid, label="context"];
29->26 [style = bold, label=""];
23->14 [style = bold, label=""];
0->3 [style = solid, label="assignableReplicas"];
6->4 [style = bold, label=""];
30->28 [style = bold, label=""];
5->0 [style = bold, label=""];
2->1 [style = solid, label="assignableNodes"];
0->9 [style = solid, label="assignableReplicas"];
2->3 [style = solid, label="assignableNodes"];
24->0 [style = solid, label="testCache"];
3->9 [style = dashed, label="0"];
1->16 [style = dashed, label="0"];
9->8 [style = solid, label="context"];
18->25 [style = bold, label=""];
24->5 [style = solid, label="testCache"];
1->8 [style = dashed, label="0"];
5->16 [style = solid, label="assignableReplicas"];
0->16 [style = solid, label="assignableNodes"];
17->27 [style = bold, label=""];
16->20 [style = bold, label=""];
20->15 [style = bold, label=""];
14->11 [style = bold, label=""];
4->5 [style = bold, label=""];
11->30 [style = bold, label=""];
12->22 [style = bold, label=""];
22->13 [style = bold, label=""];
2->8 [style = solid, label="assignableNodes"];
2->16 [style = bold, label=""];
}
