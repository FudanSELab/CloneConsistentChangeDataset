digraph {
7 [style = filled, label = "testHandleAddSplitsEvent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "operator.initializeState(getStateContext())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "operator.open()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "operator.snapshotState(new StateSnapshotContextSynchronousImpl(100L,100L))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "operator.initializeState(stateContext)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "StateInitializationContext stateContext = getStateContext()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "List<MockSourceSplit> splitsInState = CollectionUtil.iterableToList(operator.getReaderState().get())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "operator.open()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "{operator.close()}@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "MockSourceSplit newSplit = new MockSourceSplit((2))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(Arrays.asList(MOCK_SPLIT,newSplit),splitsInState)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "{operator.close()}@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testSnapshotState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testHandleAddSplitsEvent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "operator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit),new MockSourceSplitSerializer()))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "MockSourceSplit newSplit = new MockSourceSplit((2))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
4->3 [style = bold, label=""];
8->15 [style = bold, label=""];
3->1 [style = bold, label=""];
15->14 [style = bold, label=""];
4->3 [style = solid, label="newSplit"];
12->11 [style = bold, label=""];
3->1 [style = solid, label="newSplit"];
7->0 [style = bold, label=""];
9->8 [style = bold, label=""];
8->15 [style = solid, label="stateContext"];
12->11 [style = solid, label="splitsInState"];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
10->12 [style = bold, label=""];
4->1 [style = solid, label="newSplit"];
11->13 [style = bold, label=""];
5->4 [style = bold, label=""];
0->8 [style = dashed, label="0"];
3->11 [style = solid, label="newSplit"];
1->10 [style = bold, label=""];
0->5 [style = bold, label=""];
}
