digraph {
22 [style = filled, label = "assertThat(abstractBuilder.getInitializationErrorString()).isEqualTo(\"c\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(\"c\",abstractBuilder.getInitializationErrorString())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(abstractBuilder.getInitializationErrorString()).isEqualTo(\"a, b, c\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "builder.setC(1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(abstractBuilder.getInitializationErrorString()).isEmpty()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertThat(abstractBuilder.isInitialized()).isTrue()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "builder.setA(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(\"\",abstractBuilder.getInitializationErrorString())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"b, c\",abstractBuilder.getInitializationErrorString())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testIsInitialized['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertFalse(builder.isInitialized())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertFalse(abstractBuilder.isInitialized())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertTrue(builder.isInitialized())@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertFalse(builder.isInitialized())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "AbstractMessageWrapper.Builder abstractBuilder = new AbstractMessageWrapper.Builder(builder)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestRequired.Builder builder = TestRequired.newBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "builder.setB(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(abstractBuilder.isInitialized()).isFalse()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertFalse(abstractBuilder.isInitialized())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertThat(abstractBuilder.getInitializationErrorString()).isEqualTo(\"b, c\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertFalse(builder.isInitialized())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"a, b, c\",abstractBuilder.getInitializationErrorString())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "testIsInitialized['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertTrue(abstractBuilder.isInitialized())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "builder.setC(1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(abstractBuilder.isInitialized()).isFalse()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "testRequired['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(abstractBuilder.isInitialized()).isFalse()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertFalse(abstractBuilder.isInitialized())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->3 [style = bold, label=""];
8->28 [style = bold, label=""];
9->16 [style = dashed, label="0"];
2->19 [style = dashed, label="0"];
7->21 [style = dashed, label="0"];
7->1 [style = dashed, label="0"];
2->1 [style = bold, label=""];
1->15 [style = bold, label=""];
11->21 [style = bold, label=""];
0->2 [style = bold, label=""];
26->1 [style = bold, label=""];
3->11 [style = bold, label=""];
18->17 [style = bold, label=""];
12->17 [style = dashed, label="0"];
4->18 [style = bold, label=""];
3->22 [style = dashed, label="0"];
5->18 [style = dashed, label="0"];
0->20 [style = dashed, label="0"];
8->4 [style = solid, label="builder"];
15->22 [style = bold, label=""];
7->9 [style = bold, label=""];
12->13 [style = bold, label=""];
19->1 [style = bold, label=""];
23->24 [style = bold, label=""];
1->6 [style = bold, label=""];
13->27 [style = bold, label=""];
27->26 [style = bold, label=""];
10->8 [style = bold, label=""];
5->12 [style = bold, label=""];
6->15 [style = dashed, label="0"];
6->27 [style = dashed, label="0"];
28->23 [style = bold, label=""];
21->16 [style = bold, label=""];
0->24 [style = dashed, label="0"];
25->8 [style = bold, label=""];
17->13 [style = bold, label=""];
14->8 [style = bold, label=""];
8->4 [style = bold, label=""];
20->19 [style = bold, label=""];
4->5 [style = bold, label=""];
22->11 [style = bold, label=""];
11->7 [style = bold, label=""];
13->0 [style = bold, label=""];
24->13 [style = bold, label=""];
13->20 [style = bold, label=""];
}
