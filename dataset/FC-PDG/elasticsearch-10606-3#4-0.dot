digraph {
17 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,12),equalTo(10))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,mapperService.documentMapperParser(),documentMapper,null,null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(fields.size(),equalTo(1))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "bq.add(rangeQuery2,Occur.MUST)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "PercolatorFieldMapper.FieldType fieldType = (PercolatorFieldMapper.FieldType)fieldMapper.fieldType()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(LongPoint.decodeDimension(fields.get(1).binaryValue().bytes,8),equalTo(15L))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,28),equalTo(20))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(1).binaryValue().bytes,28),equalTo(20))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(document.getFields().size(),equalTo(3))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertThat(fields.size(),equalTo(2))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Query rangeQuery2 = mapperService.fullName(\"number_field1\").rangeQuery(15,20,true,true,null,null,null,null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "fieldMapper.processQuery(bq.build(),parseContext)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Query rangeQuery2 = mapperService.documentMapper(\"doc\").mappers().getMapper(\"number_field1\").fieldType().rangeQuery(15,20,true,true,null,null,null,null)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "ParseContext.Document document = parseContext.doc()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "PercolatorFieldMapper.FieldType fieldType = (PercolatorFieldMapper.FieldType)fieldMapper.fieldType()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "document = parseContext.doc()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.minimumShouldMatchField.name())))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<IndexableField> fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.rangeField.name())))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "fieldMapper.processQuery(phraseQuery,parseContext)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "bq.add(rangeQuery1,Occur.MUST)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Query rangeQuery1 = mapperService.documentMapper(\"doc\").mappers().getMapper(\"number_field1\").fieldType().rangeQuery(10,20,true,true,null,null,null,null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "testExtractRanges['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "bq = new BooleanQuery.Builder()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Query rangeQuery1 = mapperService.fullName(\"number_field1\").rangeQuery(10,20,true,true,null,null,null,null)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "testExtractTermsAndRanges_partial['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(1).binaryValue().bytes,12),equalTo(15))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "bq.add(rangeQuery1,Occur.MUST)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "PercolatorFieldMapper fieldMapper = (PercolatorFieldMapper)documentMapper.mappers().getMapper(fieldName)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.minimumShouldMatchField.name())))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(fields.size(),equalTo(1))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "rangeQuery2 = mapperService.fullName(\"number_field2\").rangeQuery(15,20,true,true,null,null,null,null)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "bq.add(rangeQuery2,Occur.MUST)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "PhraseQuery phraseQuery = new PhraseQuery(\"field\",\"term\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "BooleanQuery.Builder bq = new BooleanQuery.Builder()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,28),equalTo(20))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(fields.get(0).numericValue(),equalTo(2L))@@@43@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "addQueryFieldMappings()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(fields.size(),equalTo(2))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,12),equalTo(10))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(LongPoint.decodeDimension(fields.get(1).binaryValue().bytes,24),equalTo(20L))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "rangeQuery2 = mapperService.documentMapper(\"doc\").mappers().getMapper(\"number_field2\").fieldType().rangeQuery(15,20,true,true,null,null,null,null)@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "fields.sort(Comparator.comparing(null))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.rangeField.name())))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testExtractRanges['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "fields.sort(Comparator.comparing(null))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "fieldMapper.processQuery(bq.build(),parseContext)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(fields.get(0).numericValue(),equalTo(1L))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(document.getFields().get(0).binaryValue().utf8ToString(),equalTo(\"field term\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "DocumentMapper documentMapper = mapperService.documentMapper(\"doc\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,mapperService.documentMapperParser(),documentMapper,null,null)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52->11 [style = bold, label=""];
30->22 [style = solid, label="rangeQuery2"];
10->20 [style = bold, label=""];
30->22 [style = bold, label=""];
34->9 [style = bold, label=""];
32->23 [style = bold, label=""];
28->40 [style = bold, label=""];
22->2 [style = bold, label=""];
0->37 [style = bold, label=""];
15->7 [style = bold, label=""];
27->43 [style = bold, label=""];
47->48 [style = bold, label=""];
48->49 [style = bold, label=""];
41->4 [style = solid, label="rangeQuery1"];
0->5 [style = solid, label="documentMapper"];
49->51 [style = solid, label="parseContext"];
33->17 [style = bold, label=""];
46->51 [style = solid, label="phraseQuery"];
31->51 [style = dashed, label="0"];
16->44 [style = dashed, label="0"];
16->26 [style = bold, label=""];
41->4 [style = bold, label=""];
49->51 [style = bold, label=""];
51->0 [style = bold, label=""];
12->34 [style = bold, label=""];
43->40 [style = solid, label="rangeQuery1"];
31->1 [style = bold, label=""];
11->46 [style = bold, label=""];
36->10 [style = bold, label=""];
20->38 [style = bold, label=""];
3->12 [style = bold, label=""];
25->6 [style = bold, label=""];
46->47 [style = bold, label=""];
0->2 [style = solid, label="documentMapper"];
4->44 [style = bold, label=""];
14->33 [style = bold, label=""];
7->3 [style = bold, label=""];
38->14 [style = bold, label=""];
43->4 [style = bold, label=""];
45->11 [style = bold, label=""];
37->5 [style = bold, label=""];
26->0 [style = bold, label=""];
5->31 [style = solid, label="parseContext"];
30->42 [style = dashed, label="0"];
19->13 [style = bold, label=""];
5->31 [style = bold, label=""];
44->26 [style = bold, label=""];
21->11 [style = bold, label=""];
50->1 [style = bold, label=""];
24->25 [style = bold, label=""];
39->35 [style = bold, label=""];
16->26 [style = solid, label="rangeQuery2"];
27->41 [style = bold, label=""];
2->36 [style = bold, label=""];
44->26 [style = solid, label="rangeQuery2"];
35->8 [style = bold, label=""];
18->32 [style = bold, label=""];
23->39 [style = bold, label=""];
17->15 [style = bold, label=""];
42->22 [style = solid, label="rangeQuery2"];
41->40 [style = solid, label="rangeQuery1"];
40->30 [style = bold, label=""];
42->22 [style = bold, label=""];
41->43 [style = dashed, label="0"];
1->19 [style = bold, label=""];
5->50 [style = bold, label=""];
29->24 [style = bold, label=""];
43->4 [style = solid, label="rangeQuery1"];
8->29 [style = bold, label=""];
40->42 [style = bold, label=""];
4->16 [style = bold, label=""];
13->18 [style = bold, label=""];
47->49 [style = solid, label="documentMapper"];
6->28 [style = bold, label=""];
11->27 [style = bold, label=""];
2->36 [style = solid, label="parseContext"];
}
