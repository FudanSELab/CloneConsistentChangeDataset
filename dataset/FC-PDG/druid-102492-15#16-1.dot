digraph {
72 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id2,null,location2))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id3\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Task id1 = createKafkaIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"topic\",ImmutableMap.of(0,0L,1,0L,2,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id1,null,location1))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
61 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(Status.READING))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "supervisor.start()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "EasyMock.expect(taskStorage.getTask(\"id3\")).andReturn(Optional.of(id3)).anyTimes()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "supervisor.start()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(\"id2\")).andReturn(Optional.of(TaskStatus.running(\"id2\"))).anyTimes()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Task id3 = createKafkaIndexTask(\"id3\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"topic\",ImmutableMap.of(0,10L,1,20L,2,30L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "Thread.sleep(100)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final Task id1 = createKafkaIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L,2,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(Status.READING))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "expect(taskStorage.getTask(\"id3\")).andReturn(Optional.of(id3)).anyTimes()@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "expect(taskStorage.getTask(\"id2\")).andReturn(Optional.of(id2)).anyTimes()@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(\"id3\")).andReturn(Optional.of(TaskStatus.running(\"id3\"))).anyTimes()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "expect(taskClient.getStatusAsync(\"id2\")).andReturn(Futures.immediateFuture(Status.READING))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
60 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "final TreeMap<Integer,Map<Integer,Long>> checkpoints = new TreeMap<>()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "Assert.assertNull(serviceEmitter.getExceptionMessage(),serviceEmitter.getExceptionMessage())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertNull(serviceEmitter.getStackTrace(),serviceEmitter.getStackTrace())@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "supervisor.checkpoint(0,((KafkaIndexTask)id1).getIOConfig().getBaseSequenceName(),new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,checkpoints.get(0),ImmutableSet.of())),new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,fakeCheckpoints,fakeCheckpoints.keySet())))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(id1,id2,id3)).anyTimes()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "final DateTime startTime = DateTimes.nowUtc()@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "supervisor = getTestableSupervisor(2,1,true,\"PT1S\",null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final Map<Integer,Long> fakeCheckpoints = Collections.emptyMap()@@@41@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes()@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id2\")).andReturn(Futures.immediateFuture(startTime))@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(\"id1\")).andReturn(Futures.immediateFuture(startTime))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
64 [style = filled, label = "supervisor.getNoticesQueueSize() > 0@@@44@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "expect(taskStorage.getStatus(\"id2\")).andReturn(Optional.of(TaskStatus.running(\"id2\"))).anyTimes()@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true)@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "EasyMock.expect(taskStorage.getTask(\"id2\")).andReturn(Optional.of(id2)).anyTimes()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "final Task id3 = createKafkaIndexTask(\"id3\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,20L,2,30L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id3\")).andReturn(Futures.immediateFuture(Status.READING))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(\"id2\")).andReturn(Futures.immediateFuture(startTime))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
80 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id2,null,location2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "final Task id2 = createKafkaIndexTask(\"id2\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,20L,2,30L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "TreeMap<Integer,Map<Integer,Long>> checkpoints = new TreeMap<>()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expect(taskStorage.getStatus(\"id3\")).andReturn(Optional.of(TaskStatus.running(\"id3\"))).anyTimes()@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "supervisor.runInternal()@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id2\")).andReturn(Futures.immediateFuture(Status.READING))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
79 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id1\")).andReturn(Futures.immediateFuture(startTime))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(id1,id2,id3)).anyTimes()@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "testCheckpointForInactiveTaskGroup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id3\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expect(taskClient.getStatusAsync(\"id3\")).andReturn(Futures.immediateFuture(Status.READING))@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "replayAll()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testNoDataIngestionTasks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id3\")).andReturn(Futures.immediateFuture(startTime))@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "EasyMock.expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
70 [style = filled, label = "Assert.assertNull(serviceEmitter.getExceptionClass())@@@50@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id2\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "expect(taskRunner.getRunningTasks()).andReturn(workItems).anyTimes()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expect(taskStorage.getStatus(\"id3\")).andReturn(Optional.of(TaskStatus.running(\"id3\"))).anyTimes()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "supervisor.getStateManager().markRunFinished()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "EasyMock.replay(taskQueue,indexerMetadataStorageCoordinator)@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
74 [style = filled, label = "final TaskLocation location2 = new TaskLocation(\"testHost2\",145,-1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "final TaskLocation location1 = new TaskLocation(\"testHost\",1234,-1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "testNoDataIngestionTasks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject())@@@37@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Task id2 = createKafkaIndexTask(\"id2\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"topic\",ImmutableMap.of(0,10L,1,20L,2,30L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(id1,id2,id3)).anyTimes()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
81 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(0,10L,1,20L,2,30L))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "expect(taskStorage.getStatus(\"id2\")).andReturn(Optional.of(TaskStatus.running(\"id2\"))).anyTimes()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "final DateTime startTime = DateTimes.nowUtc()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verifyAll()@@@42@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(\"id3\")).andReturn(Futures.immediateFuture(startTime))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "verifyAll()@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "Collection workItems = new ArrayList<>()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "supervisor.moveTaskGroupToPendingCompletion(0)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id2\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
84 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
75->83 [style = bold, label=""];
5->3 [style = bold, label=""];
11->53 [style = dashed, label="0"];
40->38 [style = dashed, label="0"];
15->39 [style = solid, label="startTime"];
15->16 [style = solid, label="startTime"];
25->34 [style = bold, label=""];
81->28 [style = bold, label=""];
20->26 [style = bold, label=""];
31->63 [style = dashed, label="0"];
79->39 [style = bold, label=""];
55->40 [style = bold, label=""];
59->62 [style = bold, label=""];
24->67 [style = bold, label=""];
0->65 [style = dashed, label="0"];
20->46 [style = dashed, label="0"];
60->47 [style = bold, label=""];
37->31 [style = bold, label=""];
71->74 [style = bold, label=""];
84->31 [style = bold, label=""];
71->83 [style = solid, label="location1"];
21->1 [style = bold, label=""];
54->53 [style = bold, label=""];
2->24 [style = bold, label=""];
31->20 [style = bold, label=""];
8->27 [style = bold, label=""];
6->78 [style = bold, label=""];
33->7 [style = bold, label=""];
13->25 [style = bold, label=""];
45->63 [style = bold, label=""];
30->82 [style = bold, label=""];
85->64 [style = bold, label=""];
74->80 [style = solid, label="location2"];
24->40 [style = bold, label=""];
12->48 [style = bold, label=""];
76->84 [style = bold, label=""];
56->57 [style = bold, label=""];
64->85 [style = bold, label=""];
24->55 [style = dashed, label="0"];
9->8 [style = bold, label=""];
46->41 [style = bold, label=""];
41->61 [style = bold, label=""];
1->11 [style = bold, label=""];
4->0 [style = bold, label=""];
35->62 [style = dashed, label="0"];
6->49 [style = dashed, label="0"];
30->19 [style = bold, label=""];
8->60 [style = dashed, label="0"];
3->23 [style = bold, label=""];
7->5 [style = bold, label=""];
51->60 [style = bold, label=""];
15->79 [style = solid, label="startTime"];
21->61 [style = dashed, label="0"];
64->66 [style = bold, label=""];
47->44 [style = bold, label=""];
66->30 [style = bold, label=""];
34->14 [style = bold, label=""];
78->68 [style = bold, label=""];
44->45 [style = bold, label=""];
14->6 [style = bold, label=""];
27->47 [style = dashed, label="0"];
7->2 [style = solid, label="startTime"];
18->37 [style = bold, label=""];
74->75 [style = bold, label=""];
27->18 [style = bold, label=""];
7->32 [style = solid, label="startTime"];
39->16 [style = bold, label=""];
1->54 [style = dashed, label="0"];
62->51 [style = bold, label=""];
2->58 [style = dashed, label="0"];
80->72 [style = bold, label=""];
35->9 [style = bold, label=""];
36->52 [style = bold, label=""];
38->81 [style = bold, label=""];
4->69 [style = dashed, label="0"];
53->42 [style = bold, label=""];
11->32 [style = bold, label=""];
13->48 [style = dashed, label="0"];
65->71 [style = bold, label=""];
69->72 [style = solid, label="id2"];
22->59 [style = dashed, label="0"];
64->85 [style = dotted, label="true"];
26->41 [style = dashed, label="0"];
26->21 [style = bold, label=""];
43->7 [style = bold, label=""];
83->80 [style = bold, label=""];
15->79 [style = bold, label=""];
7->55 [style = solid, label="startTime"];
9->51 [style = dashed, label="0"];
12->13 [style = bold, label=""];
18->44 [style = dashed, label="0"];
7->42 [style = solid, label="startTime"];
10->52 [style = dashed, label="0"];
23->3 [style = dashed, label="0"];
17->12 [style = bold, label=""];
63->46 [style = bold, label=""];
42->58 [style = bold, label=""];
40->36 [style = bold, label=""];
49->30 [style = bold, label=""];
82->70 [style = bold, label=""];
28->17 [style = bold, label=""];
3->69 [style = bold, label=""];
7->24 [style = solid, label="startTime"];
61->54 [style = bold, label=""];
22->35 [style = bold, label=""];
0->59 [style = bold, label=""];
36->10 [style = bold, label=""];
68->64 [style = bold, label=""];
69->65 [style = bold, label=""];
7->58 [style = solid, label="startTime"];
10->15 [style = bold, label=""];
77->5 [style = bold, label=""];
14->49 [style = bold, label=""];
74->72 [style = solid, label="location2"];
57->50 [style = bold, label=""];
38->29 [style = bold, label=""];
39->57 [style = dashed, label="0"];
23->4 [style = bold, label=""];
52->56 [style = bold, label=""];
69->80 [style = solid, label="id2"];
58->55 [style = bold, label=""];
32->2 [style = bold, label=""];
15->56 [style = dashed, label="0"];
26->24 [style = dashed, label="0"];
72->76 [style = bold, label=""];
29->28 [style = bold, label=""];
3->83 [style = solid, label="id1"];
37->45 [style = dashed, label="0"];
50->38 [style = bold, label=""];
6->68 [style = solid, label="fakeCheckpoints"];
0->22 [style = bold, label=""];
15->39 [style = bold, label=""];
32->42 [style = dashed, label="0"];
48->25 [style = bold, label=""];
16->50 [style = dashed, label="0"];
73->77 [style = bold, label=""];
67->36 [style = bold, label=""];
16->38 [style = bold, label=""];
6->30 [style = bold, label=""];
}
