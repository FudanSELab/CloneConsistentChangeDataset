digraph {
1 [style = filled, label = "Assert.assertTrue(this.opResults.get(2) instanceof OpResult.ErrorResult)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertTrue(this.opResults.get(1) instanceof OpResult.ErrorResult)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "verifyMultiFailure_AllErrorResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<Op> ops = Arrays.asList(Op.create(\"/multi\",new byte((((,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT),Op.delete(\"/nonexist1\",-1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "verifyMultiFailure_NoSideEffect['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "verifyMultiFailure_AllErrorResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "List<Op> ops = Arrays.asList(Op.create(\"/multi\",new byte((((,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT),Op.delete(\"/nonexist1\",-1),Op.setData(\"/multi\",\"test\".getBytes(),-1))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(this.opResults.get(0) instanceof OpResult.ErrorResult)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(this.opResults.get(1) instanceof OpResult.ErrorResult)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertTrue(this.opResults.get(2) instanceof OpResult.ErrorResult)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "zk.multi(ops,this,null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertNull(zk.exists(\"/multi\",false))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "latch_await()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(this.opResults.get(0) instanceof OpResult.ErrorResult)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3->13 [style = bold, label=""];
0->3 [style = bold, label=""];
3->8 [style = dashed, label="0"];
2->11 [style = dashed, label="0"];
5->1 [style = bold, label=""];
8->10 [style = bold, label=""];
1->9 [style = dashed, label="0"];
3->5 [style = bold, label=""];
10->9 [style = bold, label=""];
6->0 [style = bold, label=""];
4->2 [style = bold, label=""];
11->6 [style = solid, label="ops"];
5->10 [style = dashed, label="0"];
2->6 [style = solid, label="ops"];
7->2 [style = bold, label=""];
2->6 [style = bold, label=""];
11->6 [style = bold, label=""];
0->8 [style = bold, label=""];
12->11 [style = bold, label=""];
}
