digraph {
13 [style = filled, label = "verify(functions,times(1)).getFunctionState(eq(TENANT),eq(NAMESPACE),eq(FN_NAME),eq(key))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "String tenant = TEST_NAME + \"-tenant\"@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(TENANT,stateGetter.getTenant())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(FN_NAME,stateGetter.getFunctionName())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(NAMESPACE,stateGetter.getNamespace())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "String fnName = TEST_NAME + \"-function\"@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testStateGetter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "cmd.run(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@17a2faa)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "consoleOutputCapturer.start()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ConsoleOutputCapturer consoleOutputCapturer = new ConsoleOutputCapturer()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(output.replace(\"\",\"\").contains(\"State key needs to be specified\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "String key = TEST_NAME + \"-key\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "StateGetter stateGetter = cmd.getStateGetter()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testStateGetter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertEquals(fnName,stateGetter.getFunctionName())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "cmd.run(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@17a3011)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "consoleOutputCapturer.stop()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String namespace = TEST_NAME + \"-namespace\"@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "String output = consoleOutputCapturer.getStderr()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testStateGetterWithoutKey['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "verify(functions,times(0)).getFunctionState(any(),any(),any(),any())@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(tenant,stateGetter.getTenant())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "StateGetter stateGetter = cmd.getStateGetter()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(namespace,stateGetter.getNamespace())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->19 [style = solid, label="tenant"];
1->4 [style = bold, label=""];
4->17 [style = bold, label=""];
15->14 [style = bold, label=""];
7->16 [style = dashed, label="0"];
8->7 [style = solid, label="tenant"];
12->15 [style = bold, label=""];
10->12 [style = dashed, label="0"];
18->19 [style = bold, label=""];
10->3 [style = bold, label=""];
9->10 [style = bold, label=""];
4->6 [style = solid, label="fnName"];
5->7 [style = solid, label="key"];
5->6 [style = solid, label="key"];
4->19 [style = solid, label="fnName"];
3->0 [style = bold, label=""];
1->0 [style = solid, label="namespace"];
0->7 [style = bold, label=""];
1->3 [style = solid, label="namespace"];
0->14 [style = dashed, label="0"];
8->1 [style = bold, label=""];
11->5 [style = bold, label=""];
20->8 [style = bold, label=""];
23->22 [style = bold, label=""];
4->0 [style = solid, label="fnName"];
5->6 [style = bold, label=""];
5->13 [style = solid, label="key"];
7->16 [style = bold, label=""];
4->7 [style = solid, label="fnName"];
22->10 [style = bold, label=""];
7->13 [style = dashed, label="0"];
8->10 [style = solid, label="tenant"];
8->3 [style = solid, label="tenant"];
3->15 [style = dashed, label="0"];
1->7 [style = solid, label="namespace"];
1->19 [style = solid, label="namespace"];
9->12 [style = bold, label=""];
14->13 [style = bold, label=""];
6->9 [style = bold, label=""];
4->5 [style = bold, label=""];
1->6 [style = solid, label="namespace"];
17->18 [style = bold, label=""];
8->6 [style = solid, label="tenant"];
2->8 [style = bold, label=""];
21->23 [style = bold, label=""];
19->21 [style = bold, label=""];
}
