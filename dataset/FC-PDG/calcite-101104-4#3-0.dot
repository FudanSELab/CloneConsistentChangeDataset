digraph {
2 [style = filled, label = "assertEquals(Aggregate.Group.OTHER,Aggregate.Group.induce(groupSet,groupSets))@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "groupSets = Lists.newArrayList()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "groupSets.add(groupSet)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "groupSets = Lists.newArrayList()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "groupSets = Lists.newArrayList()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "groupSets = new ArrayList<>()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "groupSets.add(ImmutableBitSet.of())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "groupSets.add(groupSet)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "groupSets.add(ImmutableBitSet.of())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<ImmutableBitSet> groupSets = new ArrayList<>()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(Aggregate.Group.OTHER,Aggregate.Group.induce(groupSet,groupSets))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testInduceGroupingType0['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<ImmutableBitSet> groupSets = Lists.newArrayList()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testInduceGroupingType0['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "final ImmutableBitSet groupSet = ImmutableBitSet.of()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(Aggregate.Group.CUBE,Aggregate.Group.induce(groupSet,groupSets))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testInduceGroupingType1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final ImmutableBitSet groupSet = ImmutableBitSet.of(2)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(Aggregate.Group.SIMPLE,Aggregate.Group.induce(groupSet,groupSets))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->18 [style = solid, label="groupSet"];
13->15 [style = bold, label=""];
6->4 [style = bold, label=""];
10->17 [style = bold, label=""];
4->9 [style = dashed, label="0"];
4->13 [style = solid, label="groupSets"];
4->5 [style = bold, label=""];
12->4 [style = bold, label=""];
7->6 [style = bold, label=""];
14->12 [style = bold, label=""];
11->18 [style = bold, label=""];
6->2 [style = solid, label="groupSet"];
0->8 [style = bold, label=""];
8->2 [style = solid, label="groupSets"];
1->8 [style = dashed, label="0"];
16->13 [style = bold, label=""];
0->1 [style = bold, label=""];
3->6 [style = bold, label=""];
6->9 [style = bold, label=""];
15->17 [style = solid, label="groupSets"];
6->12 [style = dashed, label="0"];
5->0 [style = bold, label=""];
8->2 [style = bold, label=""];
9->0 [style = solid, label="groupSets"];
12->13 [style = solid, label="groupSet"];
12->17 [style = solid, label="groupSet"];
6->0 [style = solid, label="groupSet"];
17->11 [style = bold, label=""];
6->5 [style = solid, label="groupSet"];
11->0 [style = solid, label="groupSets"];
1->2 [style = solid, label="groupSets"];
12->5 [style = solid, label="groupSet"];
9->5 [style = bold, label=""];
15->10 [style = bold, label=""];
1->2 [style = bold, label=""];
5->16 [style = bold, label=""];
4->0 [style = solid, label="groupSets"];
12->0 [style = solid, label="groupSet"];
12->2 [style = solid, label="groupSet"];
18->0 [style = bold, label=""];
}
