digraph {
18 [style = filled, label = "assertThat(scalingEntry.getImporterClass(),equalTo())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(scalingEntry.getDataConsistencyCheckerClass(),equalTo())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(scalingEntry.getLogDumperClass(),equalTo())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertThat(scalingEntry.getPositionInitializer(),equalTo())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(scalingEntry.getLogDumperClass(),equalTo())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(scalingEntry.getJdbcDumperClass(),equalTo())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertThat(scalingEntry.getDataConsistencyCheckerClass(),equalTo())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(scalingEntry.getImporterClass(),equalTo())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(scalingEntry.getDataSourceCheckerClass(),equalTo())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(scalingEntry.getJdbcDumperClass(),equalTo())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(scalingEntry.getDataSourceCheckerClass(),equalTo())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ScalingEntry scalingEntry = ScalingEntryLoader.getInstance(\"PostgreSQL\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertGetScalingEntryByDatabaseType['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertGetScalingEntryByDatabaseType['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "ScalingEntry scalingEntry = ScalingEntryLoader.getInstance(\"MySQL\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(scalingEntry instanceof PostgreSQLScalingEntry)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(scalingEntry instanceof MySQLScalingEntry)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(scalingEntry.getPositionInitializer(),equalTo())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(scalingEntry.getIncrementalDumperClass(),equalTo())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertThat(scalingEntry.getInventoryDumperClass(),equalTo())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertGetScalingEntryByDatabaseType['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
5->10 [style = bold, label=""];
16->13 [style = bold, label=""];
2->20 [style = dashed, label="0"];
17->15 [style = solid, label="scalingEntry"];
1->14 [style = dashed, label="0"];
7->17 [style = dashed, label="0"];
3->18 [style = dashed, label="0"];
8->15 [style = dashed, label="0"];
7->8 [style = solid, label="scalingEntry"];
19->17 [style = bold, label=""];
0->12 [style = dashed, label="0"];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
5->16 [style = dashed, label="0"];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
8->2 [style = bold, label=""];
1->11 [style = dashed, label="0"];
15->20 [style = bold, label=""];
5->4 [style = bold, label=""];
20->12 [style = bold, label=""];
12->18 [style = bold, label=""];
17->15 [style = bold, label=""];
4->1 [style = bold, label=""];
6->7 [style = bold, label=""];
4->10 [style = dashed, label="0"];
4->13 [style = dashed, label="0"];
13->14 [style = bold, label=""];
10->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
