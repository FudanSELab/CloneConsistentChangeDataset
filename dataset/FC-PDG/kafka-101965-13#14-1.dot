digraph {
30 [style = filled, label = "shouldCommitNonCorruptedTasksOnTaskCorruptedException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assignment.putAll(taskId01Assignment)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final OffsetAndMetadata offsetAndMetadata = new OffsetAndMetadata(0L)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "taskManager.setPartitionResetter(null)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "verify(consumer)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final StateMachineTask corruptedTask = new StateMachineTask(taskId00,taskId00Partitions,true,stateManager)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final ProcessorStateManager stateManager = EasyMock.createStrictMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "nonCorruptedTask.setCommitNeeded()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "taskManager.handleCorruption(singleton(taskId00))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertThat(nonRunningNonCorruptedTask.state(),is(Task.State.CREATED))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "expect(consumer.assignment()).andReturn(taskId00Partitions)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "nonRunningNonCorruptedTask.setCommitNeeded()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = new HashMap<>(taskId00Assignment)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "verify(consumer)@@@31@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "taskManager.handleCorruption(singletonMap(taskId00,taskId00Partitions))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "expect(consumer.committed(taskId00Partitions)).andReturn(singletonMap(t1p0,offsetAndMetadata))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "shouldNotCommitNonRunningNonCorruptedTasks['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "consumer.pause(taskId00Partitions)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final StateMachineTask nonCorruptedTask = new StateMachineTask(taskId01,taskId01Partitions,true,stateManager)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expectLastCall().anyTimes()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "taskManager.handleAssignment(assignment,emptyMap())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "final StateMachineTask nonRunningNonCorruptedTask = new StateMachineTask(taskId01,taskId01Partitions,true,stateManager)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(nonCorruptedTask.commitPrepared)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expectLastCall()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = new HashMap<>(taskId00Assignment)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "replay(stateManager)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "taskManager.handleCorruption(singletonMap(taskId00,taskId00Partitions))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "consumer.seek(t1p0,offsetAndMetadata)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertFalse(nonRunningNonCorruptedTask.commitPrepared)@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andStubReturn(asList(corruptedTask,nonRunningNonCorruptedTask))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(nonCorruptedTask.state(),is(Task.State.RUNNING))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "replay(activeTaskCreator,topologyBuilder,consumer,changeLogReader)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "corruptedTask.setChangelogOffsets(singletonMap(t1p0,0L))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "shouldCommitNonCorruptedTasksOnTaskCorruptedException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "topologyBuilder.addSubscribedTopicsFromAssignment(anyObject(),anyString())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectLastCall()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "verify(activeTaskCreator)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "stateManager.markChangelogAsCorrupted(taskId00Partitions)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "consumer.commitSync(eq(emptyMap()))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "topologyBuilder.addSubscribedTopicsFromAssignment(anyObject(),anyString())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expect(consumer.assignment()).andReturn(taskId00Partitions)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39->37 [style = bold, label=""];
5->3 [style = bold, label=""];
33->7 [style = bold, label=""];
21->15 [style = solid, label="nonCorruptedTask"];
16->18 [style = bold, label=""];
9->39 [style = bold, label=""];
22->2 [style = bold, label=""];
26->32 [style = bold, label=""];
27->12 [style = bold, label=""];
37->11 [style = bold, label=""];
20->9 [style = bold, label=""];
3->25 [style = bold, label=""];
10->18 [style = solid, label="offsetAndMetadata"];
36->22 [style = bold, label=""];
0->32 [style = dashed, label="0"];
9->15 [style = solid, label="corruptedTask"];
7->9 [style = solid, label="stateManager"];
31->2 [style = bold, label=""];
15->6 [style = bold, label=""];
7->4 [style = bold, label=""];
9->40 [style = solid, label="corruptedTask"];
15->40 [style = dashed, label="0"];
13->11 [style = bold, label=""];
11->15 [style = bold, label=""];
7->20 [style = solid, label="stateManager"];
39->40 [style = solid, label="nonRunningNonCorruptedTask"];
24->14 [style = bold, label=""];
11->28 [style = solid, label="assignment"];
21->39 [style = dashed, label="0"];
17->7 [style = bold, label=""];
7->21 [style = solid, label="stateManager"];
22->38 [style = bold, label=""];
1->28 [style = bold, label=""];
26->0 [style = bold, label=""];
28->35 [style = bold, label=""];
10->16 [style = bold, label=""];
18->27 [style = bold, label=""];
13->1 [style = solid, label="assignment"];
7->39 [style = solid, label="stateManager"];
19->26 [style = bold, label=""];
30->7 [style = bold, label=""];
0->22 [style = bold, label=""];
34->36 [style = bold, label=""];
6->8 [style = bold, label=""];
4->20 [style = bold, label=""];
9->21 [style = bold, label=""];
28->19 [style = bold, label=""];
23->1 [style = bold, label=""];
10->16 [style = solid, label="offsetAndMetadata"];
15->40 [style = bold, label=""];
25->10 [style = bold, label=""];
12->23 [style = bold, label=""];
16->18 [style = solid, label="offsetAndMetadata"];
35->34 [style = bold, label=""];
2->29 [style = bold, label=""];
16->27 [style = solid, label="offsetAndMetadata"];
24->3 [style = bold, label=""];
32->31 [style = bold, label=""];
40->8 [style = bold, label=""];
21->13 [style = bold, label=""];
14->5 [style = bold, label=""];
8->24 [style = bold, label=""];
}
