digraph {
27 [style = filled, label = "Assert.assertEquals(instance,service)@@@36@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Client client = Client.create(config)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ServiceNames names = resource.path(\"/v1/service\").get()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Map<String,String> payload = Maps.newHashMap()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(instances.getServices().get(0),service)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "GenericType<ServiceInstance<ServiceDetails>> singleInstanceType = new GenericType<ServiceInstance<ServiceDetails>>(){}@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "payload.setDescription(\"Example description for test\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(instances.getServices().size(),1)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "WebResource resource = client.resource(\"http://localhost:\" + port)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "payload.getData().put(\"two\",\"2\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "ClientConfig config = new DefaultClientConfig(){@Override public Set<Object> getSingletons(){Set<Object> singletons = Sets.newHashSet()singletons.add(context)singletons.add(serviceNamesMarshaller)singletons.add(serviceInstanceMarshaller)singletons.add(serviceInstancesMarshaller)return singletons}}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "WebResource resource = client.resource(\"http://localhost:8080\")@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testRegisterService['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "payload.put(\"one\",\"1\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ServiceInstance<ServiceDetails> service = ServiceInstance.builder().name(\"test\").payload(payload).serviceType(ServiceType.STATIC).build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ServiceInstances<Map<String,String>> instances = resource.path(\"/v1/service/test\").get(type)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "payload.put(\"three\",\"3\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ServiceInstance<ServiceDetails> instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "ServiceInstances<ServiceDetails> instances = resource.path(\"/v1/service/test\").get(type)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testRegisterService['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ServiceInstance<Map<String,String>> instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(instances.getServices().size(),1)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "ServiceDetails payload = new ServiceDetails()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(instances.getServices().get(0).getPayload(),payload)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ClientConfig config = new DefaultClientConfig(){@Override public Set<Object> getSingletons(){Set<Object> singletons = Sets.newHashSet()singletons.add(context)singletons.add(serviceNamesMarshaller)singletons.add(serviceInstanceMarshaller)singletons.add(serviceInstancesMarshaller)return singletons}}@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "payload.getData().put(\"three\",\"3\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testRegisterService['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Client client = Client.create(config)@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ServiceInstance<Map<String,String>> service = ServiceInstance.builder().name(\"test\").payload(payload).serviceType(ServiceType.STATIC).build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "payload.put(\"two\",\"2\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(instance,service)@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "payload.getData().put(\"one\",\"1\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(names.getNames(),Lists.newArrayList(\"test\"))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "GenericType<ServiceInstances<ServiceDetails>> type = new GenericType<ServiceInstances<ServiceDetails>>(){}@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24->28 [style = bold, label=""];
18->3 [style = bold, label=""];
19->15 [style = solid, label="singleInstanceType"];
23->22 [style = solid, label="singleInstanceType"];
1->8 [style = bold, label=""];
12->5 [style = bold, label=""];
28->30 [style = bold, label=""];
22->27 [style = solid, label="instance"];
9->2 [style = bold, label=""];
9->8 [style = solid, label="service"];
12->21 [style = bold, label=""];
34->5 [style = bold, label=""];
34->5 [style = solid, label="config"];
15->11 [style = solid, label="instance"];
25->32 [style = bold, label=""];
31->29 [style = bold, label=""];
2->12 [style = solid, label="config"];
20->6 [style = bold, label=""];
25->32 [style = solid, label="type"];
29->34 [style = bold, label=""];
0->10 [style = solid, label="type"];
26->24 [style = bold, label=""];
5->17 [style = bold, label=""];
9->17 [style = solid, label="service"];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
2->12 [style = bold, label=""];
33->26 [style = bold, label=""];
9->11 [style = solid, label="service"];
15->22 [style = dashed, label="0"];
6->4 [style = bold, label=""];
19->23 [style = dashed, label="0"];
0->10 [style = bold, label=""];
13->19 [style = bold, label=""];
32->8 [style = bold, label=""];
23->22 [style = bold, label=""];
10->32 [style = dashed, label="0"];
15->11 [style = bold, label=""];
0->25 [style = dashed, label="0"];
22->27 [style = bold, label=""];
16->30 [style = dashed, label="0"];
29->18 [style = solid, label="service"];
0->25 [style = bold, label=""];
30->31 [style = bold, label=""];
6->26 [style = dashed, label="0"];
29->13 [style = solid, label="service"];
19->23 [style = bold, label=""];
7->28 [style = dashed, label="0"];
26->19 [style = solid, label="payload"];
7->16 [style = bold, label=""];
5->21 [style = dashed, label="0"];
6->13 [style = solid, label="payload"];
29->27 [style = solid, label="service"];
4->24 [style = dashed, label="0"];
19->15 [style = bold, label=""];
10->1 [style = bold, label=""];
21->17 [style = bold, label=""];
14->6 [style = bold, label=""];
16->9 [style = bold, label=""];
17->18 [style = bold, label=""];
8->13 [style = bold, label=""];
}
