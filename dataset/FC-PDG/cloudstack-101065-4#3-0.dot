digraph {
30 [style = filled, label = "testGetRouterControlIp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final String ip4address = this.routerControlHelper.getRouterControlIp(ROUTER_ID)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "when(nw2.getTrafficType()).thenReturn(TrafficType.Control)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "when(nic1.getNetworkId()).thenReturn(NW_ID_1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "when(nic2.getIPv4Address()).thenReturn(IP4_ADDRES1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "NetworkVO nw3 = mock()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(DIDN_T_GET_THE_EXPECTED_IP4_ADDRESS,IP4_ADDRES1,ip4address)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "when(this.nwDao.findById(NW_ID_2)).thenReturn(nw2)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "NetworkVO nw2 = mock()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "NicVO nic2 = mock()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "when(nic1.getIPv4Address()).thenReturn(null)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "NetworkVO nw1 = mock()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final String ip4address = this.routerControlHelper.getRouterControlIp(ROUTER_ID)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "nics.add(nic1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "nics.add(nic2)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "nics.add(nic3)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "when(nic2.getNetworkId()).thenReturn(NW_ID_2)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "when(nw3.getTrafficType()).thenReturn(TrafficType.Control)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "when(this.nicDao.listByVmId(ROUTER_ID)).thenReturn(nics)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testGetRouterControlIpWithRouterIp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "NetworkVO nw1 = mock()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testGetRouterControlIpWithRouterIp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "assertEquals(DIDN_T_GET_THE_EXPECTED_IP4_ADDRESS,IP4_ADDRES1,ip4address)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "when(this.nicDao.listByVmId(ROUTER_ID)).thenReturn(nics)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "NicVO nic3 = mock()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "when(this.nwDao.findById(NW_ID_3)).thenReturn(nw3)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "lenient().when(nic1.getIPv4Address()).thenReturn(null)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "when(this.nwDao.findById(NW_ID_1)).thenReturn(nw1)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "when(nic3.getIPv4Address()).thenReturn(IP4_ADDRES2)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<NicVO> nics = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(nw1.getTrafficType()).thenReturn(TrafficType.Public)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "when(nic3.getNetworkId()).thenReturn(NW_ID_3)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "nics.add(nic1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "NicVO nic1 = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->15 [style = dashed, label="0"];
13->10 [style = bold, label=""];
32->22 [style = bold, label=""];
22->33 [style = bold, label=""];
19->28 [style = solid, label="nic2"];
13->32 [style = bold, label=""];
9->11 [style = bold, label=""];
12->5 [style = bold, label=""];
3->1 [style = bold, label=""];
15->14 [style = bold, label=""];
24->2 [style = bold, label=""];
10->14 [style = bold, label=""];
23->5 [style = bold, label=""];
26->17 [style = bold, label=""];
21->31 [style = solid, label="nic3"];
8->19 [style = bold, label=""];
20->26 [style = solid, label="nw2"];
11->3 [style = solid, label="nw1"];
2->3 [style = bold, label=""];
28->31 [style = bold, label=""];
12->20 [style = bold, label=""];
5->26 [style = bold, label=""];
4->3 [style = solid, label="nics"];
12->17 [style = dashed, label="0"];
29->17 [style = solid, label="nw3"];
6->0 [style = bold, label=""];
7->4 [style = bold, label=""];
25->29 [style = bold, label=""];
29->23 [style = bold, label=""];
18->27 [style = solid, label="ip4address"];
20->25 [style = bold, label=""];
8->14 [style = solid, label="nic1"];
4->9 [style = solid, label="nics"];
11->2 [style = bold, label=""];
5->6 [style = bold, label=""];
10->32 [style = dashed, label="0"];
18->27 [style = bold, label=""];
30->4 [style = bold, label=""];
33->24 [style = bold, label=""];
6->0 [style = solid, label="ip4address"];
1->12 [style = bold, label=""];
4->8 [style = bold, label=""];
14->9 [style = bold, label=""];
13->15 [style = bold, label=""];
16->4 [style = bold, label=""];
31->3 [style = bold, label=""];
1->5 [style = solid, label="nw1"];
8->2 [style = solid, label="nic1"];
2->28 [style = bold, label=""];
17->18 [style = bold, label=""];
8->13 [style = bold, label=""];
21->13 [style = bold, label=""];
1->12 [style = solid, label="router"];
19->21 [style = bold, label=""];
}
