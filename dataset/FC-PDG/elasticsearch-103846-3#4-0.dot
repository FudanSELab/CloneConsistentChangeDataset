digraph {
25 [style = filled, label = "assertManifestIdenticalExceptIndices(manifest,newManifest)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "boolean verbose = randomBoolean()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "new NodeEnvironment(noDataNoMasterSettings,environment).close()@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "verifySuccess(noDataMasterSettings,matcher,verbose)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "String messageText = NodeRepurposeCommand.noMasterMessage(1,environment.dataFiles().length * shardCount,0)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Manifest newManifest = loadManifest()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int shardCount = randomIntBetween(1,10)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "createIndexDataFiles(dataMasterSettings,shardCount,hasClusterState)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "manifest != null@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testCleanupAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Matcher<String> outputMatcher = allOf(containsString(messageText),conditionalNot(containsString(\"testIndex\"),verbose == false || hasClusterState == false),conditionalNot(containsString(\"no name for uuid: testUUID\"),verbose == false || hasClusterState))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "verifyUnchangedOnAbort(noDataMasterSettings,matcher,verbose)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(newManifest.getIndexGenerations().entrySet(),hasSize(1))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "int shardCount = randomIntBetween(1,10)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "createIndexDataFiles(dataMasterSettings,shardCount)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testCleanupAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Manifest oldManifest = createManifest(INDEX)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Matcher<String> matcher = allOf(containsString(NodeRepurposeCommand.shardMessage(environment.dataFiles().length * shardCount,1)),conditionalNot(containsString(\"testUUID\"),verbose == false),conditionalNot(containsString(\"testIndex\"),verbose == false))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "verifyUnchangedOnAbort(noDataNoMasterSettings,outputMatcher,verbose)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "verifySuccess(noDataNoMasterSettings,outputMatcher,verbose)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "new NodeEnvironment(noDataMasterSettings,environment).close()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "boolean hasClusterState = randomBoolean()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertManifestIdenticalExceptIndices(oldManifest,newManifest)@@@7@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testCleanupShardData['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "expectThrows(,null)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "checkCleanupAll(not(containsString(PRE_V7_MESSAGE)))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(newManifest.getIndexGenerations().entrySet(),hasSize(0))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Manifest newManifest = loadManifest()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "expectThrows(,null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Manifest manifest = randomBoolean()? createManifest(INDEX): null@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "boolean verbose = randomBoolean()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20->25 [style = dotted, label="true"];
7->13 [style = solid, label="verbose"];
28->18 [style = solid, label="verbose"];
28->27 [style = solid, label="verbose"];
9->11 [style = bold, label=""];
2->25 [style = dashed, label="0"];
0->2 [style = solid, label="oldManifest"];
10->15 [style = solid, label="shardCount"];
20->21 [style = dotted, label="true"];
4->21 [style = dashed, label="0"];
24->20 [style = bold, label=""];
19->25 [style = solid, label="newManifest"];
12->15 [style = bold, label=""];
7->11 [style = solid, label="verbose"];
15->13 [style = solid, label="messageText"];
7->16 [style = bold, label=""];
22->27 [style = bold, label=""];
13->6 [style = bold, label=""];
29->25 [style = solid, label="manifest"];
0->3 [style = bold, label=""];
23->22 [style = solid, label="shardCount"];
16->12 [style = solid, label="hasClusterState"];
11->14 [style = bold, label=""];
3->5 [style = bold, label=""];
5->4 [style = bold, label=""];
4->2 [style = bold, label=""];
20->19 [style = bold, label=""];
6->9 [style = bold, label=""];
16->12 [style = bold, label=""];
19->21 [style = bold, label=""];
21->25 [style = bold, label=""];
10->7 [style = bold, label=""];
7->6 [style = solid, label="verbose"];
10->12 [style = solid, label="shardCount"];
15->13 [style = bold, label=""];
16->13 [style = solid, label="hasClusterState"];
28->30 [style = solid, label="verbose"];
27->18 [style = bold, label=""];
29->20 [style = solid, label="manifest"];
29->22 [style = bold, label=""];
26->23 [style = bold, label=""];
18->17 [style = bold, label=""];
13->6 [style = solid, label="outputMatcher"];
23->28 [style = bold, label=""];
20->19 [style = dotted, label="true"];
5->2 [style = solid, label="newManifest"];
17->30 [style = bold, label=""];
23->27 [style = solid, label="shardCount"];
27->18 [style = solid, label="matcher"];
30->24 [style = bold, label=""];
8->10 [style = bold, label=""];
13->11 [style = solid, label="outputMatcher"];
28->29 [style = bold, label=""];
27->30 [style = solid, label="matcher"];
1->0 [style = bold, label=""];
}
