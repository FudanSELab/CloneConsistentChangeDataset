digraph {
5 [style = filled, label = "final List<Integer> list = new ArrayList<Integer>()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Flowable<Flowable<Integer>> source = Flowable.range(1,10).window(1,TimeUnit.MINUTES,scheduler,3)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(Arrays.asList(7,8,9),lists.get(2))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final List<Integer> list = new ArrayList<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(1,lists.get(3).size())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "exactWindowSize['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(4,lists.size())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final List<List<Integer>> lists = new ArrayList<List<Integer>>()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "source.subscribe(observeWindow(list,lists))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(3,lists.get(2).size())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "exactWindowSize['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertEquals(Arrays.asList(4,5,6),lists.get(1))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(Arrays.asList(10),lists.get(3))@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(Arrays.asList(1,2,3),lists.get(0))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "exactWindowSize['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(3,lists.get(0).size())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(3,lists.get(1).size())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final List<List<Integer>> lists = new ArrayList<>()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Observable<Observable<Integer>> source = Observable.range(1,10).window(1,TimeUnit.MINUTES,scheduler,3)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
13->10 [style = bold, label=""];
14->13 [style = solid, label="lists"];
7->12 [style = bold, label=""];
9->18 [style = dashed, label="0"];
3->6 [style = bold, label=""];
2->9 [style = bold, label=""];
9->16 [style = bold, label=""];
5->16 [style = dashed, label="0"];
5->13 [style = solid, label="list"];
15->9 [style = bold, label=""];
12->8 [style = bold, label=""];
18->5 [style = bold, label=""];
11->14 [style = dashed, label="0"];
10->0 [style = bold, label=""];
11->13 [style = bold, label=""];
9->5 [style = bold, label=""];
16->14 [style = bold, label=""];
5->11 [style = bold, label=""];
4->1 [style = bold, label=""];
11->13 [style = solid, label="lists"];
16->13 [style = solid, label="list"];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
6->7 [style = bold, label=""];
17->18 [style = bold, label=""];
}
