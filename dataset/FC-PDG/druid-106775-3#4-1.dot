digraph {
8 [style = filled, label = "testTimeseriesWithBoundFilter1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Arrays.asList(new Result<>(DateTimes.of(\"2011-04-01\"),new TimeseriesResultValue(ImmutableMap.of(\"rows\",9L,\"index\",1102L,\"addRowsIndexConstant\",1112.0,\"uniques\",QueryRunnerTestHelper.UNIQUES_9))),new Result<>(DateTimes.of(\"2011-04-02\"),new TimeseriesResultValue(ImmutableMap.of(\"rows\",9L,\"index\",1120L,\"addRowsIndexConstant\",1130.0,\"uniques\",QueryRunnerTestHelper.UNIQUES_9))))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TestHelper.assertExpectedResults(expectedResults,results)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testTimeseriesWithInFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testTimeseriesWithInFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(new AndDimFilter(Arrays.asList(new BoundDimFilter(QueryRunnerTestHelper.marketDimension,\"spa\",\"spot\",true,null,null,null,StringComparators.LEXICOGRAPHIC),new BoundDimFilter(QueryRunnerTestHelper.marketDimension,\"spot\",\"spotify\",null,true,null,null,StringComparators.LEXICOGRAPHIC),new BoundDimFilter(QueryRunnerTestHelper.marketDimension,\"SPOT\",\"spot\",null,null,null,null,StringComparators.LEXICOGRAPHIC)))).intervals(QueryRunnerTestHelper.firstToThird).aggregators(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.indexLongSum,QueryRunnerTestHelper.qualityUniques).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(new InDimFilter(QueryRunnerTestHelper.marketDimension,Arrays.asList(\"spot\",\"upfront\",\"total_market\",\"billyblank\"),null)).intervals(QueryRunnerTestHelper.firstToThird).aggregators(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.indexLongSum,QueryRunnerTestHelper.qualityUniques).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertExpectedResults(expectedResults,results)@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query),CONTEXT).toList()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Arrays.asList(new Result<>(DateTimes.of(\"2011-04-01\"),new TimeseriesResultValue(ImmutableMap.of(\"rows\",13L,\"index\",6619L,\"addRowsIndexConstant\",6633.0,\"uniques\",QueryRunnerTestHelper.UNIQUES_9))),new Result<>(DateTimes.of(\"2011-04-02\"),new TimeseriesResultValue(ImmutableMap.of(\"rows\",13L,\"index\",5827L,\"addRowsIndexConstant\",5841.0,\"uniques\",QueryRunnerTestHelper.UNIQUES_9))))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(new InDimFilter(QueryRunnerTestHelper.marketDimension,Arrays.asList(\"spot\",\"upfront\",\"total_market\",\"billyblank\"),null)).intervals(QueryRunnerTestHelper.firstToThird).aggregators(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.indexLongSum,QueryRunnerTestHelper.qualityUniques).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).context(makeContext()).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->5 [style = dashed, label="0"];
5->3 [style = bold, label=""];
7->9 [style = bold, label=""];
4->3 [style = bold, label=""];
6->5 [style = bold, label=""];
1->2 [style = bold, label=""];
9->1 [style = bold, label=""];
3->1 [style = bold, label=""];
3->2 [style = solid, label="expectedResults"];
1->10 [style = bold, label=""];
0->4 [style = bold, label=""];
1->2 [style = solid, label="results"];
1->10 [style = solid, label="results"];
9->10 [style = solid, label="expectedResults"];
4->7 [style = dashed, label="0"];
3->9 [style = dashed, label="0"];
8->7 [style = bold, label=""];
2->10 [style = dashed, label="0"];
}
