digraph {
12 [style = filled, label = "searchAfterBuilder.innerToXContent(builder)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(searchAfterBuilder,secondSearchAfterBuilder)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "randomBoolean()@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testFromXContent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "runs < NUMBER_OF_RUNS@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "parser.nextToken()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "runs < 20@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertNotSame(suggestBuilder,secondSuggestBuilder)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "builder.endObject()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "parser.nextToken()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "suggestBuilder.toXContent(xContentBuilder,ToXContent.EMPTY_PARAMS)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testFromXContent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "SearchAfterBuilder searchAfterBuilder = randomJsonSearchFromBuilder()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "SuggestBuilder secondSuggestBuilder = SuggestBuilder.fromXContent(parser)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "XContentParser parser = createParser(shuffleXContent(builder))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "SuggestBuilder suggestBuilder = randomSuggestBuilder()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(suggestBuilder,secondSuggestBuilder)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "XContentBuilder xContentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(suggestBuilder.hashCode(),secondSuggestBuilder.hashCode())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "builder.startObject()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SearchAfterBuilder secondSearchAfterBuilder = SearchAfterBuilder.fromXContent(parser)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "parser.nextToken()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "xContentBuilder.prettyPrint()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(searchAfterBuilder.hashCode(),secondSearchAfterBuilder.hashCode())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "runs++@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int runs = 0@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "builder.prettyPrint()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testFromXContent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "XContentParser parser = createParser(xContentBuilder)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertNotSame(searchAfterBuilder,secondSearchAfterBuilder)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->27 [style = solid, label="runs"];
5->9 [style = bold, label=""];
4->25 [style = bold, label=""];
4->1 [style = dotted, label="true"];
2->15 [style = dotted, label="true"];
27->23 [style = dotted, label="true"];
25->29 [style = bold, label=""];
2->18 [style = dotted, label="true"];
24->30 [style = bold, label=""];
22->4 [style = bold, label=""];
2->11 [style = dotted, label="true"];
11->5 [style = solid, label="searchAfterBuilder"];
11->13 [style = bold, label=""];
7->25 [style = dashed, label="0"];
28->25 [style = bold, label=""];
10->5 [style = solid, label="secondSearchAfterBuilder"];
18->0 [style = bold, label=""];
2->8 [style = dotted, label="true"];
17->16 [style = bold, label=""];
13->12 [style = solid, label="builder"];
2->10 [style = dotted, label="true"];
11->21 [style = dashed, label="0"];
2->0 [style = dotted, label="true"];
27->22 [style = dotted, label="true"];
27->25 [style = dotted, label="true"];
23->26 [style = solid, label="secondSuggestBuilder"];
6->0 [style = solid, label="runs"];
0->2 [style = solid, label="runs"];
2->27 [style = dashed, label="0"];
14->10 [style = bold, label=""];
27->24 [style = dotted, label="true"];
13->16 [style = solid, label="builder"];
29->23 [style = bold, label=""];
27->21 [style = dotted, label="true"];
19->6 [style = bold, label=""];
26->24 [style = bold, label=""];
4->28 [style = dotted, label="true"];
6->2 [style = bold, label=""];
27->29 [style = dotted, label="true"];
21->22 [style = bold, label=""];
17->15 [style = bold, label=""];
2->12 [style = dotted, label="true"];
17->23 [style = dashed, label="0"];
6->2 [style = solid, label="runs"];
22->25 [style = solid, label="xContentBuilder"];
16->10 [style = solid, label="parser"];
12->17 [style = bold, label=""];
8->14 [style = bold, label=""];
3->6 [style = bold, label=""];
1->28 [style = dashed, label="0"];
1->7 [style = bold, label=""];
27->4 [style = dotted, label="true"];
4->7 [style = bold, label=""];
22->29 [style = solid, label="xContentBuilder"];
6->27 [style = bold, label=""];
9->18 [style = bold, label=""];
10->5 [style = bold, label=""];
2->9 [style = dotted, label="true"];
2->4 [style = dotted, label="true"];
2->14 [style = dotted, label="true"];
4->1 [style = bold, label=""];
30->0 [style = bold, label=""];
2->5 [style = dotted, label="true"];
23->24 [style = solid, label="secondSuggestBuilder"];
27->21 [style = bold, label=""];
2->11 [style = bold, label=""];
15->8 [style = bold, label=""];
2->16 [style = dotted, label="true"];
16->15 [style = bold, label=""];
21->24 [style = solid, label="suggestBuilder"];
7->12 [style = bold, label=""];
0->27 [style = bold, label=""];
27->26 [style = dotted, label="true"];
2->17 [style = dotted, label="true"];
0->2 [style = bold, label=""];
23->26 [style = bold, label=""];
29->23 [style = solid, label="parser"];
6->27 [style = solid, label="runs"];
20->6 [style = bold, label=""];
11->9 [style = solid, label="searchAfterBuilder"];
4->28 [style = bold, label=""];
10->9 [style = solid, label="secondSearchAfterBuilder"];
27->30 [style = dotted, label="true"];
27->0 [style = dotted, label="true"];
2->7 [style = dotted, label="true"];
21->26 [style = solid, label="suggestBuilder"];
13->22 [style = dashed, label="0"];
2->13 [style = dotted, label="true"];
13->4 [style = bold, label=""];
}
