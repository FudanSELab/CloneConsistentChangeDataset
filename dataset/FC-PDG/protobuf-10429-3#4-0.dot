digraph {
11 [style = filled, label = "testRoundtripProto3Optional['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "TextFormat.merge(\"# this is a comment\" + \"optional_int32: 1 # another comment\" + \"optional_int64: 2\" + \"# EOF comment\",builder)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestProto3Optional.Builder message2 = TestProto3Optional.newBuilder()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(NestedEnum.BAZ,message2.getOptionalNestedEnum())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "TestAllTypes.Builder builder = TestAllTypes.newBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(message2.getOptionalNestedEnum()).isEqualTo(NestedEnum.BAZ)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "TextFormat.merge(message.toString(),message2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(message2.hasOptionalNestedEnum()).isTrue()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(message2.hasOptionalInt32()).isTrue()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertEquals(1,builder.getOptionalInt32())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(1,message2.getOptionalInt32())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "testRoundtripProto3Optional['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(message2.hasOptionalInt64()).isTrue()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(2,builder.getOptionalInt64())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(2,message2.getOptionalInt64())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertTrue(message2.hasOptionalNestedEnum())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Message message = TestProto3Optional.newBuilder().setOptionalInt32(1).setOptionalInt64(2).setOptionalNestedEnum(NestedEnum.BAZ).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(message2.getOptionalInt64()).isEqualTo(2)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(message2.getOptionalInt32()).isEqualTo(1)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertTrue(message2.hasOptionalInt64())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "testMergeComment['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(message2.hasOptionalInt32())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4->9 [style = bold, label=""];
6->3 [style = bold, label=""];
13->10 [style = bold, label=""];
19->18 [style = bold, label=""];
9->10 [style = dashed, label="0"];
2->1 [style = bold, label=""];
1->15 [style = bold, label=""];
0->2 [style = bold, label=""];
18->17 [style = bold, label=""];
7->20 [style = dashed, label="0"];
12->16 [style = bold, label=""];
2->1 [style = solid, label="message2"];
8->14 [style = dashed, label="0"];
1->7 [style = bold, label=""];
6->12 [style = dashed, label="0"];
11->0 [style = bold, label=""];
21->20 [style = bold, label=""];
5->0 [style = bold, label=""];
18->17 [style = solid, label="builder"];
3->8 [style = bold, label=""];
7->6 [style = bold, label=""];
7->15 [style = dashed, label="0"];
16->14 [style = bold, label=""];
15->12 [style = bold, label=""];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
4->13 [style = dashed, label="0"];
17->21 [style = bold, label=""];
3->16 [style = dashed, label="0"];
}
