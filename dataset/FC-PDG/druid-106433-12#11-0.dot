digraph {
1 [style = filled, label = "expectedException.expect()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "expectedException.expect()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final GroupByQuery subquery = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.fullOnIntervalSpec).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setGranularity(QueryRunnerTestHelper.dayGran).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"alias\",OrderByColumnSpec.Direction.ASCENDING)),null)).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testSubqueryWithOuterMaxOnDiskStorageContextOverride['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "expectedException.expectMessage(\"Unknown column in order clause\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testSubqueryWithOuterCountAggregator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<Row> expectedResults = Collections.singletonList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"count\",18L))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "final GroupByQuery query = makeQueryBuilder().setDataSource(subquery).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new ArrayList<>()).setAggregatorSpecs(new CountAggregatorFactory(\"count\")).setGranularity(QueryRunnerTestHelper.allGran).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final GroupByQuery query = makeQueryBuilder().setDataSource(subquery).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new ArrayList<>()).setAggregatorSpecs(new CountAggregatorFactory(\"count\")).setGranularity(QueryRunnerTestHelper.allGran).overrideContext(ImmutableMap.of(\"maxOnDiskStorage\",0,\"bufferGrouperMaxSize\",0)).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testSubqueryWithOuterCountAggregator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "List<ResultRow> expectedResults = Collections.singletonList(makeRow(query,\"2011-04-01\",\"count\",18L))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final GroupByQuery subquery = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.fullOnIntervalSpec).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setGranularity(QueryRunnerTestHelper.dayGran).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"alias\",OrderByColumnSpec.Direction.ASCENDING)),null)).overrideContext(ImmutableMap.of(\"maxOnDiskStorage\",Integer.MAX_VALUE,\"bufferGrouperMaxSize\",Integer.MAX_VALUE)).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"subquery-count-agg\")@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "expectedException.expectMessage(\"Not enough aggregation buffer space to execute this query\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13->5 [style = solid, label="query"];
4->10 [style = bold, label=""];
16->15 [style = bold, label=""];
4->3 [style = bold, label=""];
4->5 [style = dotted, label="true"];
7->12 [style = solid, label="query"];
4->1 [style = dotted, label="true"];
8->9 [style = solid, label="results"];
4->3 [style = dotted, label="false"];
8->12 [style = dashed, label="0"];
6->0 [style = bold, label=""];
7->4 [style = bold, label=""];
12->9 [style = bold, label=""];
4->8 [style = dotted, label="false"];
4->17 [style = dotted, label="false"];
4->15 [style = dotted, label="false"];
7->5 [style = solid, label="query"];
0->7 [style = bold, label=""];
0->14 [style = dashed, label="0"];
12->9 [style = solid, label="results"];
4->9 [style = dotted, label="false"];
15->17 [style = bold, label=""];
11->0 [style = bold, label=""];
10->9 [style = solid, label="expectedResults"];
10->12 [style = bold, label=""];
3->8 [style = bold, label=""];
4->12 [style = dotted, label="false"];
8->9 [style = bold, label=""];
13->17 [style = solid, label="query"];
7->13 [style = dashed, label="0"];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
3->10 [style = dashed, label="0"];
14->13 [style = bold, label=""];
4->16 [style = dotted, label="false"];
4->10 [style = dotted, label="false"];
18->14 [style = bold, label=""];
3->9 [style = solid, label="expectedResults"];
4->2 [style = dotted, label="true"];
7->10 [style = solid, label="query"];
4->16 [style = bold, label=""];
7->8 [style = solid, label="query"];
2->5 [style = bold, label=""];
13->4 [style = bold, label=""];
}
