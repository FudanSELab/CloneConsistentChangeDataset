digraph {
2 [style = filled, label = "assertEquals(\"(10: Fred+Bill+Eric+Janet(\",s)@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testGroupByWithKeySelectorAndResultSelectorAndComparer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertEquals(\"(10: Fred+Bill+Eric+Janet(\",s)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String s = Linq4j.asEnumerable(emps).groupBy(EMP_DEPTNO_SELECTOR,EMP_NAME_SELECTOR,new Function2<Integer,Enumerable<String>,String>(){public String apply(Integer key,Enumerable<String> group){return String.format(\"%s: %s\",key,stringJoin(\"+\",group))}},new EqualityComparer<Integer>(){public boolean equal(Integer v1,Integer v2){return true}public int hashCode(Integer integer){return 0}}).toList().toString()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testGroupByWithKeySelectorAndElementSelectorAndResultSelectorAndComparer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String s = Linq4j.asEnumerable(emps).groupBy(EMP_DEPTNO_SELECTOR,new Function2<Integer,Enumerable<Employee>,String>(){public String apply(Integer key,Enumerable<Employee> group){return String.format(Locale.ROOT,\"%s: %s\",key,stringJoin(\"+\",group.select(new Function1<Employee,String>(){public String apply(Employee element){return element.name}})))}},new EqualityComparer<Integer>(){public boolean equal(Integer v1,Integer v2){return true}public int hashCode(Integer integer){return 0}}).toList().toString()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testGroupByWithKeySelectorAndResultSelectorAndComparer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4->6 [style = solid, label="s"];
5->4 [style = bold, label=""];
0->4 [style = dashed, label="0"];
1->0 [style = bold, label=""];
4->6 [style = bold, label=""];
0->2 [style = solid, label="s"];
3->0 [style = bold, label=""];
0->2 [style = bold, label=""];
}
