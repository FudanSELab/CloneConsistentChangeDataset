digraph {
22 [style = filled, label = "MBeanServer mbeanServer = getMBeanServer()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Integer max = (Integer)mbeanServer.getAttribute(on,\"MaximumCacheSize\")@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "current = (Integer)mbeanServer.getAttribute(on,\"DynamicSize\")@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "on = name@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "template.sendBody(\"direct:start\",\"Hello World\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "getMockEndpoint(\"mock:result\").expectedMessageCount(1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "current = (Integer)mbeanServer.getAttribute(on,\"DynamicSize\")@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "mbeanServer.invoke(on,\"purge\",null,null)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Integer current = (Integer)mbeanServer.getAttribute(on,\"Size\")@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(1000,max.intValue())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "name.getCanonicalName().contains(\"DefaultValidatorRegistry\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertNotNull(on,\"Should have found EndpointRegistry\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "name.getCanonicalName().contains(\"DefaultEndpointRegistry\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ObjectName on = null@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(3,data.size())@@@29@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertMockEndpointsSatisfied()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "current = (Integer)mbeanServer.getAttribute(on,\"StaticSize\")@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(2,data.size())@@@39@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "template.sendBody(\"log:foo\",\"Hello World\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<ObjectName> list = new ArrayList<>(set)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testManageEndpointRegistry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "assertEquals(0,current.intValue())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(2,current.intValue())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Set<ObjectName> set = mbeanServer.queryNames(new ObjectName(\"*:type=services,*\"),null)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(2,current.intValue())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "data = (TabularData)mbeanServer.invoke(on,\"listEndpoints\",null,null)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testManageValidatorRegistry['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "String source = (String)mbeanServer.getAttribute(on,\"Source\")@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(source.startsWith(\"EndpointRegistry\"))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(3,current.intValue())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "current = (Integer)mbeanServer.getAttribute(on,\"Size\")@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(2,current.intValue())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testManageEndpointRegistry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(3,current.intValue())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertTrue(source.startsWith(\"ValidatorRegistry\"))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(source.endsWith(\"capacity: 1000\"))@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(0,current.intValue())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TabularData data = (TabularData)mbeanServer.invoke(on,\"listEndpoints\",null,null)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertTrue(source.endsWith(\"capacity: 1000(\"))@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "current = (Integer)mbeanServer.getAttribute(on,\"StaticSize\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertNotNull(on,\"Should have found ValidatorRegistry\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(1,current.intValue())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "TabularData data = (TabularData)mbeanServer.invoke(on,\"listValidators\",null,null)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11->34 [style = bold, label=""];
7->23 [style = bold, label=""];
13->4 [style = solid, label="set"];
2->42 [style = solid, label="on"];
40->28 [style = bold, label=""];
37->33 [style = bold, label=""];
6->22 [style = bold, label=""];
2->24 [style = solid, label="on"];
2->17 [style = solid, label="on"];
4->2 [style = bold, label=""];
11->38 [style = dashed, label="0"];
20->25 [style = bold, label=""];
11->27 [style = bold, label=""];
36->21 [style = bold, label=""];
2->40 [style = solid, label="on"];
0->15 [style = bold, label=""];
39->24 [style = bold, label=""];
33->17 [style = solid, label="on"];
17->42 [style = dashed, label="0"];
33->42 [style = solid, label="on"];
33->9 [style = bold, label=""];
29->12 [style = bold, label=""];
9->28 [style = bold, label=""];
33->24 [style = solid, label="on"];
2->30 [style = solid, label="on"];
22->13 [style = bold, label=""];
33->30 [style = solid, label="on"];
2->21 [style = solid, label="on"];
33->3 [style = solid, label="on"];
14->37 [style = dashed, label="0"];
26->21 [style = bold, label=""];
23->39 [style = dashed, label="0"];
2->12 [style = solid, label="on"];
19->5 [style = bold, label=""];
28->32 [style = bold, label=""];
27->34 [style = dashed, label="0"];
26->36 [style = dashed, label="0"];
34->17 [style = bold, label=""];
32->20 [style = bold, label=""];
35->5 [style = bold, label=""];
37->40 [style = bold, label=""];
2->9 [style = solid, label="on"];
33->40 [style = solid, label="on"];
27->17 [style = bold, label=""];
33->21 [style = solid, label="on"];
7->39 [style = bold, label=""];
33->9 [style = solid, label="on"];
33->15 [style = solid, label="on"];
41->5 [style = bold, label=""];
24->26 [style = bold, label=""];
9->40 [style = dashed, label="0"];
5->16 [style = bold, label=""];
8->10 [style = bold, label=""];
18->6 [style = bold, label=""];
2->3 [style = solid, label="on"];
3->29 [style = bold, label=""];
21->11 [style = bold, label=""];
15->30 [style = bold, label=""];
13->4 [style = bold, label=""];
14->33 [style = dotted, label="true"];
18->22 [style = bold, label=""];
14->9 [style = bold, label=""];
27->42 [style = bold, label=""];
33->40 [style = bold, label=""];
33->12 [style = solid, label="on"];
33->28 [style = solid, label="on"];
37->33 [style = dotted, label="true"];
21->38 [style = bold, label=""];
30->1 [style = bold, label=""];
2->10 [style = solid, label="on"];
12->8 [style = bold, label=""];
17->0 [style = bold, label=""];
33->10 [style = solid, label="on"];
2->28 [style = solid, label="on"];
33->20 [style = solid, label="on"];
42->0 [style = bold, label=""];
33->7 [style = solid, label="on"];
23->24 [style = bold, label=""];
24->36 [style = bold, label=""];
16->18 [style = bold, label=""];
25->7 [style = bold, label=""];
10->31 [style = bold, label=""];
2->15 [style = solid, label="on"];
2->37 [style = bold, label=""];
1->3 [style = bold, label=""];
14->33 [style = bold, label=""];
2->7 [style = solid, label="on"];
2->14 [style = bold, label=""];
38->27 [style = bold, label=""];
2->20 [style = solid, label="on"];
}
