digraph {
35 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal1),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal10),gt(aRef,literal5))),\"true\")@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,nullBool),ge(bRef,literal1)),\"false\")@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "checkSimplifyFilter(and(args2),\"false\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "checkSimplify2(and(vBool(1),vBool(2),vBool(3),not(vBool(1)),not(vBool(2)),not(vBool())),\"AND(?0.bool3, null, IS NULL(?0.bool1),\" + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\"false\")@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "checkSimplifyFilter(case_(cRef,trueLiteral,dRef,trueLiteral,eRef,falseLiteral,fRef,falseLiteral,nullBool),\"OR(?0.c, ?0.d)\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "final RelDataType booleanType = typeFactory.createSqlType(SqlTypeName.BOOLEAN)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal10),gt(bRef,literal1),gt(aRef,literal10)),\"OR(>(?0.a, 10), >(?0.b, 1))\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal10),gt(aRef,literal1)),\">(?0.a, 10)\")@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "checkSimplifyFilter(and(gt(literal1,aRef),gt(literal5,aRef)),RelOptPredicateList.EMPTY,\">(1, ?0.a)\")@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testSimplifyFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "checkSimplifyFilter(and(or(eq(aRef,literal1),eq(aRef,literal10)),eq(aRef,literal1)),\"=(?0.a, 1)\")@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal1),ge(aRef,literal1)),\"=(?0.a, 1)\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "checkSimplifyFilter(and(lt(aRef,literal1),eq(aRef,literal1),ge(aRef,literal1)),\"false\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal5),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal10),ge(aRef,literal5))),\">(?0.a, 5)\")@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "final ImmutableList<RexNode> args = ImmutableList.of(eq(eq(aRef,literal1),trueLiteral),eq(bRef,literal1))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "checkSimplifyFilter(and(gt(literal1,aRef),gt(aRef,literal5)),RelOptPredicateList.EMPTY,\"false\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal5),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal5),le(bRef,literal5))),\"false\")@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),lt(aRef,literal10),lt(aRef,literal5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(gt(aRef,literal5))),\"false\")@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "final RexNode fRef = rexBuilder.makeFieldAccess(range,5)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal10),ge(bRef,literal1),lt(aRef,literal10)),\"false\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"a\",intType).add(\"b\",intType).add(\"c\",booleanType).add(\"d\",booleanType).add(\"e\",booleanType).add(\"f\",booleanType).add(\"g\",booleanType).add(\"h\",intType).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "checkSimplify3(and(nullBool,not(or(nullBool,vBool()))),\"AND(null, NOT(?0.bool0))\",\"false\",\"NOT(?0.bool0)\")@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "checkSimplifyFilter(and(or(eq(aRef,literal(1)),eq(aRef,literal(10))),eq(aRef,literal(1))),\"=(?0.a, 1)\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "testSimplifyAndPush['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal1),eq(bRef,literal10),eq(aRef,bRef)),\"false\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal1),eq(bRef,literal1),eq(aRef,bRef)),\"AND(=(?0.a, 1), =(?0.b, 1))\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "checkSimplifyFilter(lt(aRef,literal1),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal10),gt(aRef,literal5))),\"false\")@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN)@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal1),gt(aRef,literal1)),\"false\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "checkSimplifyFilter(or(and(eq(aRef,literal(1)),eq(aRef,literal(1))),and(eq(aRef,literal(10)),eq(aRef,literal(1)))),\"=(?0.a, 1)\")@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "checkSimplifyFilter(and(lt(literal1,aRef),lt(aRef,literal5)),RelOptPredicateList.EMPTY,\"AND(<(1, ?0.a), <(?0.a, 5))\")@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),lt(aRef,literal10),lt(aRef,literal5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal10),ge(aRef,literal1))),\"AND(>(?0.a, 1), <(?0.a, 5))\")@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal5),gt(bRef,literal5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal5),le(bRef,literal5))),\"false\")@@@44@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final RexNode aRef = rexBuilder.makeFieldAccess(range,0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal(1)),or(eq(aRef,literal(1)),eq(aRef,literal(10)))),\"=(?0.a, 1)\")@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(10)),gt(aRef,literal(1))),\">(?0.a, 10)\")@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "checkSimplifyFilter(or(or(eq(aRef,literal(1)),eq(aRef,literal(1))),eq(aRef,literal(1))),\"=(?0.a, 1)\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "final RexLiteral literal5 = rexBuilder.makeExactLiteral(new BigDecimal(5))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "final ImmutableList<RexNode> args2 = ImmutableList.of(eq(aRef,literal1),eq(aRef,literal10))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal5),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal5))),\"false\")@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final RexNode bRef = rexBuilder.makeFieldAccess(range,1)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "checkSimplifyFilter(and(lt(literal1,aRef),lt(literal5,aRef)),RelOptPredicateList.EMPTY,\"<(5, ?0.a)\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),lt(aRef,literal10),le(aRef,literal5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(ge(aRef,literal5))),\"=(?0.a, 5)\")@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "checkSimplifyFilter(or(and(eq(aRef,literal1),eq(aRef,literal1)),and(eq(aRef,literal10),eq(aRef,literal1))),\"=(?0.a, 1)\")@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testSimplifyAndPush['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal1),or(eq(aRef,literal1),eq(aRef,literal10))),\"=(?0.a, 1)\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType,0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "checkSimplify2(and(vBool(1),vBool(2),vBool(3),not(vBool(1)),not(vBool(2)),not(vBool())),\"AND(?0.bool3, null, IS NULL(?0.bool1),\" + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\"false\")@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "assertThat(simplify.simplifyFilterPredicates(args).toString(),equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertThat(simplify.simplifyFilterPredicates(args2),nullValue())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "checkSimplify3(and(nullBool,not(or(nullBool,vBool()))),\"AND(null, NOT(?0.bool0))\",\"false\",\"NOT(?0.bool0)\")@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType,0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final RexNode dRef = rexBuilder.makeFieldAccess(range,3)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "checkSimplifyFilter(and(args),\"AND(=(?0.a, 1), =(?0.b, 1))\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),lt(aRef,literal10),lt(aRef,literal5)),RelOptPredicateList.EMPTY,\"AND(>(?0.a, 1), <(?0.a, 5))\")@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),gt(aRef,literal(10))),\">(?0.a, 10)\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "final RexNode cRef = rexBuilder.makeFieldAccess(range,2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final RexNode eRef = rexBuilder.makeFieldAccess(range,4)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),gt(aRef,literal10)),\">(?0.a, 10)\")@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14->24 [style = bold, label=""];
16->0 [style = bold, label=""];
38->39 [style = solid, label="literal5"];
11->14 [style = bold, label=""];
5->26 [style = solid, label="literal1"];
0->44 [style = dashed, label="0"];
11->27 [style = solid, label="range"];
38->30 [style = solid, label="literal5"];
60->44 [style = solid, label="args"];
52->55 [style = bold, label=""];
3->16 [style = bold, label=""];
53->54 [style = bold, label=""];
1->39 [style = solid, label="literal10"];
1->42 [style = solid, label="literal10"];
5->38 [style = bold, label=""];
1->13 [style = bold, label=""];
12->7 [style = bold, label=""];
5->52 [style = solid, label="literal1"];
29->11 [style = solid, label="rowType"];
48->52 [style = bold, label=""];
15->42 [style = solid, label="bRef"];
11->24 [style = solid, label="aRef"];
5->56 [style = solid, label="literal1"];
32->62 [style = bold, label=""];
14->53 [style = solid, label="aRef"];
10->12 [style = bold, label=""];
14->57 [style = solid, label="aRef"];
6->11 [style = bold, label=""];
54->37 [style = bold, label=""];
5->51 [style = solid, label="literal1"];
1->62 [style = solid, label="literal10"];
11->15 [style = solid, label="range"];
5->36 [style = solid, label="literal1"];
4->16 [style = solid, label="literal10"];
26->28 [style = bold, label=""];
55->31 [style = bold, label=""];
46->50 [style = bold, label=""];
11->13 [style = solid, label="aRef"];
34->28 [style = solid, label="cRef"];
11->18 [style = solid, label="aRef"];
1->52 [style = solid, label="literal10"];
38->46 [style = solid, label="literal5"];
7->29 [style = bold, label=""];
6->14 [style = solid, label="range"];
15->58 [style = solid, label="bRef"];
4->9 [style = solid, label="literal10"];
14->51 [style = solid, label="aRef"];
14->61 [style = solid, label="aRef"];
52->31 [style = solid, label="args2"];
15->34 [style = bold, label=""];
5->43 [style = solid, label="literal1"];
3->33 [style = dashed, label="0"];
38->50 [style = solid, label="literal5"];
11->1 [style = solid, label="aRef"];
38->54 [style = solid, label="literal5"];
11->23 [style = solid, label="aRef"];
15->57 [style = solid, label="bRef"];
5->60 [style = solid, label="literal1"];
41->49 [style = bold, label=""];
1->51 [style = solid, label="literal10"];
57->45 [style = bold, label=""];
9->8 [style = bold, label=""];
38->32 [style = solid, label="literal5"];
24->18 [style = bold, label=""];
15->60 [style = solid, label="bRef"];
11->9 [style = solid, label="aRef"];
62->39 [style = bold, label=""];
14->33 [style = solid, label="aRef"];
5->62 [style = solid, label="literal1"];
11->17 [style = solid, label="aRef"];
27->59 [style = bold, label=""];
31->57 [style = bold, label=""];
38->61 [style = solid, label="literal5"];
15->26 [style = solid, label="bRef"];
1->45 [style = solid, label="literal10"];
7->6 [style = bold, label=""];
14->52 [style = solid, label="aRef"];
14->30 [style = solid, label="aRef"];
1->61 [style = solid, label="literal10"];
43->33 [style = bold, label=""];
5->38 [style = dashed, label="0"];
14->15 [style = bold, label=""];
51->42 [style = bold, label=""];
15->53 [style = solid, label="bRef"];
14->32 [style = solid, label="aRef"];
35->51 [style = bold, label=""];
29->11 [style = bold, label=""];
15->9 [style = solid, label="literal1"];
59->28 [style = solid, label="fRef"];
38->47 [style = solid, label="literal5"];
21->23 [style = bold, label=""];
60->44 [style = bold, label=""];
36->43 [style = bold, label=""];
7->6 [style = solid, label="rowType"];
5->33 [style = solid, label="literal1"];
15->13 [style = solid, label="literal1"];
23->20 [style = bold, label=""];
14->35 [style = solid, label="aRef"];
34->40 [style = bold, label=""];
22->19 [style = bold, label=""];
11->34 [style = solid, label="range"];
38->51 [style = solid, label="literal5"];
5->39 [style = solid, label="literal1"];
37->30 [style = bold, label=""];
4->3 [style = solid, label="literal10"];
15->3 [style = solid, label="literal1"];
38->62 [style = solid, label="literal5"];
42->47 [style = bold, label=""];
11->21 [style = solid, label="aRef"];
11->59 [style = solid, label="range"];
30->32 [style = bold, label=""];
5->53 [style = solid, label="literal1"];
14->37 [style = solid, label="aRef"];
27->28 [style = solid, label="eRef"];
59->5 [style = bold, label=""];
38->42 [style = solid, label="literal5"];
6->11 [style = solid, label="range"];
5->30 [style = solid, label="literal1"];
14->43 [style = solid, label="aRef"];
11->16 [style = solid, label="aRef"];
38->1 [style = bold, label=""];
38->35 [style = solid, label="literal5"];
14->54 [style = solid, label="aRef"];
14->26 [style = solid, label="aRef"];
45->58 [style = bold, label=""];
14->56 [style = solid, label="aRef"];
14->60 [style = solid, label="aRef"];
38->56 [style = solid, label="literal5"];
14->62 [style = solid, label="aRef"];
14->58 [style = solid, label="aRef"];
5->37 [style = solid, label="literal1"];
8->2 [style = bold, label=""];
14->42 [style = solid, label="aRef"];
14->50 [style = solid, label="aRef"];
40->27 [style = bold, label=""];
4->13 [style = solid, label="literal10"];
5->4 [style = bold, label=""];
15->51 [style = solid, label="bRef"];
52->55 [style = solid, label="args2"];
49->7 [style = bold, label=""];
4->1 [style = bold, label=""];
14->46 [style = solid, label="aRef"];
5->61 [style = solid, label="literal1"];
18->21 [style = bold, label=""];
58->26 [style = bold, label=""];
11->40 [style = solid, label="range"];
5->45 [style = solid, label="literal1"];
15->0 [style = solid, label="literal1"];
1->23 [style = dashed, label="0"];
5->57 [style = solid, label="literal1"];
5->35 [style = solid, label="literal1"];
61->35 [style = bold, label=""];
11->3 [style = solid, label="aRef"];
0->9 [style = bold, label=""];
5->54 [style = solid, label="literal1"];
20->17 [style = bold, label=""];
3->17 [style = dashed, label="0"];
33->60 [style = bold, label=""];
5->58 [style = solid, label="literal1"];
28->53 [style = bold, label=""];
15->1 [style = solid, label="literal1"];
5->32 [style = solid, label="literal1"];
1->58 [style = solid, label="literal10"];
11->0 [style = solid, label="aRef"];
15->50 [style = solid, label="bRef"];
15->45 [style = solid, label="bRef"];
38->37 [style = solid, label="literal5"];
47->46 [style = bold, label=""];
56->61 [style = bold, label=""];
15->46 [style = solid, label="bRef"];
1->35 [style = solid, label="literal10"];
17->22 [style = bold, label=""];
1->36 [style = bold, label=""];
40->28 [style = solid, label="dRef"];
14->36 [style = solid, label="aRef"];
11->14 [style = solid, label="range"];
15->5 [style = bold, label=""];
11->20 [style = solid, label="aRef"];
1->36 [style = dashed, label="0"];
13->3 [style = bold, label=""];
25->12 [style = bold, label=""];
44->48 [style = bold, label=""];
14->47 [style = solid, label="aRef"];
39->56 [style = bold, label=""];
15->16 [style = solid, label="literal1"];
1->26 [style = solid, label="literal10"];
14->45 [style = solid, label="aRef"];
15->35 [style = solid, label="bRef"];
4->0 [style = solid, label="literal10"];
7->29 [style = dashed, label="0"];
14->39 [style = solid, label="aRef"];
1->56 [style = solid, label="literal10"];
15->61 [style = solid, label="bRef"];
}
