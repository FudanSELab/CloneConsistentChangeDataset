digraph {
21 [style = filled, label = "destinationLoadQueuePeon = new CuratorLoadQueuePeon(curator,DESTINATION_LOAD_PATH,objectMapper,Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),druidCoordinatorConfig)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "druidNode = new DruidNode(\"hey\",\"what\",false,1234,null,true,false)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "serverInventoryView = EasyMock.createMock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "coordinator = new DruidCoordinator(druidCoordinatorConfig,new ZkPathsConfig(){@Override public String getBase(){return \"druid\"}},configManager,segmentsMetadata,baseView,metadataRuleManager,curator,new NoopServiceEmitter(),scheduledExecutorFactory,null,null,new NoopServiceAnnouncer(){@Override public void announce(DruidNode node){leaderAnnouncerLatch.countDown()}@Override public void unannounce(DruidNode node){leaderUnannouncerLatch.countDown()}},druidNode,loadManagementPeons,null,new CostBalancerStrategyFactory(),EasyMock.createNiceMock(),new TestDruidLeaderSelector())@@@28@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "sourceLoadQueuePeon = new CuratorLoadQueuePeon(curator,SOURCE_LOAD_PATH,objectMapper,Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),druidCoordinatorConfig)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "druidCoordinatorConfig = new TestDruidCoordinatorConfig(new Duration(COORDINATOR_START_DELAY),new Duration(COORDINATOR_PERIOD),null,null,new Duration(COORDINATOR_PERIOD),null,10,null,new Duration(\"PT0s\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "setUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "druidCoordinatorConfig = new TestDruidCoordinatorConfig(new Duration(COORDINATOR_START_DELAY),new Duration(COORDINATOR_PERIOD),null,null,new Duration(COORDINATOR_PERIOD),null,10,null,new Duration(\"PT0s\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "loadQueuePeon = new CuratorLoadQueuePeon(curator,LOADPATH,objectMapper,Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),druidCoordinatorConfig)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "dataSourcesSnapshot = EasyMock.createNiceMock()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "EasyMock.expect(configManager.watch(EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),EasyMock.anyObject(),EasyMock.anyObject())).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "loadQueuePeon.start()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "configManager = EasyMock.createNiceMock()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "scheduledExecutorFactory = null@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "sourceLoadQueueChildrenCache = new PathChildrenCache(curator,SOURCE_LOAD_PATH,true,true,Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "setUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "pathChildrenCache = new PathChildrenCache(curator,LOADPATH,true,true,Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\"))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "curator.blockUntilConnected()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "metadataRuleManager = EasyMock.createNiceMock()@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "EasyMock.expect(configManager.watch(EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),EasyMock.anyObject(),EasyMock.anyObject())).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "druidNode = new DruidNode(\"hey\",\"what\",false,1234,null,true,false)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "druidServer = EasyMock.createMock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "setupServerAndCurator()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "objectMapper = new DefaultObjectMapper()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "EasyMock.expect(databaseSegmentManager.isStarted()).andReturn(true).anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "curator.blockUntilConnected()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "destinationLoadQueueChildrenCache = new PathChildrenCache(curator,DESTINATION_LOAD_PATH,true,true,Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\"))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "EasyMock.replay(databaseSegmentManager)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "coordinator = new DruidCoordinator(druidCoordinatorConfig,new ZkPathsConfig(){@Override public String getBase(){return \"druid\"}},configManager,databaseSegmentManager,serverInventoryView,metadataRuleManager,curator,serviceEmitter,scheduledExecutorFactory,null,null,new NoopServiceAnnouncer(){@Override public void announce(DruidNode node){leaderAnnouncerLatch.countDown()}@Override public void unannounce(DruidNode node){leaderUnannouncerLatch.countDown()}},druidNode,loadManagementPeons,null,new CostBalancerStrategyFactory(),EasyMock.createNiceMock(),new TestDruidLeaderSelector())@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "loadManagementPeons = new ConcurrentHashMap<>()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "dataSourcesSnapshot = EasyMock.createNiceMock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.replay(configManager)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "leaderUnannouncerLatch = new CountDownLatch(1)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "leaderUnannouncerLatch = new CountDownLatch(1)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "leaderAnnouncerLatch = new CountDownLatch(1)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "scheduledExecutorFactory = new ScheduledExecutorFactory(){@Override public ScheduledExecutorService create(int corePoolSize,final String nameFormat){return Executors.newSingleThreadScheduledExecutor()}}@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "coordinatorRuntimeParams = EasyMock.createNiceMock()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "curator.create().creatingParentsIfNeeded().forPath(LOADPATH)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "curator.create().creatingParentsIfNeeded().forPath(SEGPATH)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EasyMock.expect(configManager.watch(EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),EasyMock.anyObject(),EasyMock.anyObject())).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "metadataRuleManager = EasyMock.createNiceMock()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "setUp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "loadManagementPeons = new ConcurrentHashMap<>()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "EasyMock.expect(databaseSegmentManager.getDataSourcesSnapshot()).andReturn(dataSourcesSnapshot).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "databaseSegmentManager = EasyMock.createNiceMock()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "EasyMock.expect(configManager.watch(EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),EasyMock.anyObject(),EasyMock.anyObject())).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "curator.start()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "segmentsMetadata = EasyMock.createNiceMock()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "leaderAnnouncerLatch = new CountDownLatch(1)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "JacksonConfigManager configManager = EasyMock.createNiceMock()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25->14 [style = solid, label="druidCoordinatorConfig"];
21->3 [style = bold, label=""];
43->48 [style = bold, label=""];
22->24 [style = bold, label=""];
4->27 [style = solid, label="scheduledExecutorFactory"];
25->18 [style = solid, label="druidCoordinatorConfig"];
28->26 [style = bold, label=""];
44->49 [style = solid, label="serverInventoryView"];
19->0 [style = bold, label=""];
11->16 [style = bold, label=""];
0->25 [style = bold, label=""];
7->22 [style = bold, label=""];
3->13 [style = bold, label=""];
44->2 [style = bold, label=""];
13->27 [style = solid, label="loadManagementPeons"];
6->12 [style = bold, label=""];
4->23 [style = bold, label=""];
2->41 [style = solid, label="databaseSegmentManager"];
31->29 [style = bold, label=""];
24->14 [style = bold, label=""];
15->8 [style = bold, label=""];
1->2 [style = bold, label=""];
34->49 [style = solid, label="druidNode"];
7->27 [style = solid, label="druidCoordinatorConfig"];
12->5 [style = solid, label="configManager"];
40->0 [style = bold, label=""];
14->21 [style = bold, label=""];
8->32 [style = bold, label=""];
13->39 [style = dashed, label="0"];
8->27 [style = solid, label="configManager"];
38->43 [style = bold, label=""];
25->21 [style = solid, label="objectMapper"];
16->47 [style = bold, label=""];
42->40 [style = bold, label=""];
22->25 [style = dashed, label="0"];
6->18 [style = solid, label="metadataRuleManager"];
33->49 [style = solid, label="loadManagementPeons"];
23->18 [style = bold, label=""];
40->25 [style = solid, label="druidCoordinatorConfig"];
12->18 [style = solid, label="configManager"];
9->47 [style = dashed, label="0"];
18->27 [style = bold, label=""];
25->24 [style = solid, label="druidCoordinatorConfig"];
42->25 [style = solid, label="objectMapper"];
9->10 [style = bold, label=""];
20->11 [style = bold, label=""];
45->38 [style = bold, label=""];
13->4 [style = bold, label=""];
0->14 [style = solid, label="objectMapper"];
29->27 [style = solid, label="segmentsMetadata"];
15->27 [style = solid, label="metadataRuleManager"];
7->21 [style = solid, label="druidCoordinatorConfig"];
0->24 [style = solid, label="objectMapper"];
34->33 [style = bold, label=""];
15->45 [style = bold, label=""];
2->49 [style = solid, label="databaseSegmentManager"];
30->20 [style = bold, label=""];
26->15 [style = bold, label=""];
3->18 [style = solid, label="loadManagementPeons"];
38->49 [style = solid, label="configManager"];
40->49 [style = solid, label="druidCoordinatorConfig"];
41->8 [style = bold, label=""];
2->29 [style = dashed, label="0"];
2->6 [style = bold, label=""];
7->14 [style = solid, label="druidCoordinatorConfig"];
47->42 [style = bold, label=""];
25->50 [style = bold, label=""];
36->37 [style = bold, label=""];
21->18 [style = solid, label="druidNode"];
8->20 [style = solid, label="configManager"];
25->14 [style = solid, label="objectMapper"];
37->44 [style = bold, label=""];
12->15 [style = bold, label=""];
25->7 [style = bold, label=""];
2->18 [style = solid, label="databaseSegmentManager"];
29->28 [style = bold, label=""];
7->0 [style = dashed, label="0"];
8->17 [style = bold, label=""];
48->41 [style = bold, label=""];
10->19 [style = bold, label=""];
45->49 [style = solid, label="metadataRuleManager"];
3->27 [style = solid, label="druidNode"];
39->49 [style = solid, label="scheduledExecutorFactory"];
33->39 [style = bold, label=""];
46->35 [style = bold, label=""];
5->20 [style = bold, label=""];
35->49 [style = bold, label=""];
50->34 [style = bold, label=""];
32->30 [style = bold, label=""];
39->46 [style = bold, label=""];
38->5 [style = solid, label="configManager"];
13->18 [style = solid, label="scheduledExecutorFactory"];
2->15 [style = bold, label=""];
17->5 [style = bold, label=""];
16->9 [style = bold, label=""];
}
