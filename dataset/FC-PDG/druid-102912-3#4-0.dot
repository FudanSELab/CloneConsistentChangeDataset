digraph {
25 [style = filled, label = "s3Module.getAmazonS3Client(provider,new AWSProxyConfig(),new AWSEndpointConfig(),new AWSClientConfig(),new S3StorageConfig(new NoopServerSideEncryption()))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"secretKeySample\")).atLeastOnce()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "out.write(\"sessionToken=sessionTokenSamplesecretKey=secretKeySampleaccessKey=accessKeySample\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "File file = folder.newFile()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.replay(config)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(sessionCredentials.getAWSAccessKeyId(),\"accessKeySample\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(credentials.getAWSSecretKey(),\"secretKeySample\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "AWSSessionCredentials sessionCredentials = (AWSSessionCredentials)credentials@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testWithFixedAWSKeys['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.replay(config)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "AWSCredentialsConfig config = EasyMock.createMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "AWSCredentials credentials = provider.getCredentials()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"secretKeySample\",credentials.getAWSSecretKey())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "EasyMock.expect(config.getFileSessionCredentials()).andReturn(file.getAbsolutePath()).atLeastOnce()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(sessionCredentials.getSessionToken(),\"sessionTokenSample\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(credentials instanceof AWSSessionCredentials)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"accessKeySample\")).atLeastOnce()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testWithFixedAWSKeys['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertEquals(credentials.getAWSAccessKeyId(),\"accessKeySample\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "AWSCredentials credentials = provider.getCredentials()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(sessionCredentials.getAWSSecretKey(),\"secretKeySample\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testWithFileSessionCredentials['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(\"accessKeySample\",credentials.getAWSAccessKeyId())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->10 [style = bold, label=""];
5->8 [style = bold, label=""];
5->3 [style = solid, label="config"];
9->24 [style = dashed, label="0"];
9->2 [style = bold, label=""];
4->6 [style = bold, label=""];
21->15 [style = bold, label=""];
2->3 [style = bold, label=""];
3->0 [style = solid, label="provider"];
5->23 [style = solid, label="config"];
1->0 [style = bold, label=""];
23->25 [style = solid, label="provider"];
15->19 [style = bold, label=""];
5->17 [style = bold, label=""];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
20->25 [style = bold, label=""];
6->10 [style = dashed, label="0"];
5->0 [style = solid, label="config"];
14->26 [style = bold, label=""];
6->1 [style = bold, label=""];
24->16 [style = bold, label=""];
11->5 [style = bold, label=""];
26->0 [style = bold, label=""];
7->5 [style = bold, label=""];
17->24 [style = bold, label=""];
1->12 [style = dashed, label="0"];
0->23 [style = bold, label=""];
18->15 [style = solid, label="credentials"];
22->20 [style = bold, label=""];
10->12 [style = bold, label=""];
5->2 [style = solid, label="config"];
8->9 [style = bold, label=""];
13->5 [style = bold, label=""];
8->17 [style = dashed, label="0"];
16->14 [style = bold, label=""];
18->21 [style = bold, label=""];
18->21 [style = solid, label="credentials"];
19->22 [style = bold, label=""];
23->18 [style = bold, label=""];
}
