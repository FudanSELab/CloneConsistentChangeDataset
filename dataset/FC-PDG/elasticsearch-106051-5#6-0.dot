digraph {
11 [style = filled, label = "assertThat(threadNameReference.get(),equalTo(name))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final int status@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final AtomicInteger observedStatus = new AtomicInteger()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(throwableReference.get(),equalTo(error))@@@42@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "thread.join()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(throwableReference.get(),equalTo(e))@@@28@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testUncaughtError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertThat(threadNameReference.get(),equalTo(name))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "thread.setName(name)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "status = expectedStatus.get(error.getClass())@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "thread.start()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "EXPECTED_STATUS.containsKey(error.getClass())@@@34@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "final Error error = randomFrom(new InternalError(),new OutOfMemoryError(),new StackOverflowError(),new UnknownError(),new IOError(new IOException(\"fatal\")),new Error(){})@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(observedStatus.get(),equalTo(status))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "thread.join()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testUncaughtException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final AtomicBoolean halt = new AtomicBoolean()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectedStatus.containsKey(error.getClass())@@@34@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler(){@Override void halt(int status){fail()}@Override void onFatalUncaught(String threadName,Throwable t){fail()}@Override void onNonFatalUncaught(String threadName,Throwable t){threadNameReference.set(threadName)throwableReference.set(t)}})@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler(){@Override void halt(int status){halt.set(true)observedStatus.set(status)}@Override void onFatalUncaught(String threadName,Throwable t){threadNameReference.set(threadName)throwableReference.set(t)}@Override void onNonFatalUncaught(String threadName,Throwable t){fail()}})@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final AtomicReference<Throwable> throwableReference = new AtomicReference<>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final AtomicReference<Throwable> throwableReference = new AtomicReference<>()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testUncaughtError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "status = 1@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final AtomicReference<String> threadNameReference = new AtomicReference<>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Thread thread = new Thread(null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final Thread thread = new Thread(null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final String name = randomAlphaOfLength(10)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final RuntimeException e = new RuntimeException(\"boom\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "status = EXPECTED_STATUS.get(error.getClass())@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertTrue(halt.get())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->13 [style = bold, label=""];
11->16 [style = bold, label=""];
25->28 [style = bold, label=""];
7->11 [style = bold, label=""];
22->19 [style = bold, label=""];
10->14 [style = bold, label=""];
4->6 [style = bold, label=""];
2->6 [style = bold, label=""];
6->23 [style = bold, label=""];
13->11 [style = solid, label="name"];
23->26 [style = bold, label=""];
0->18 [style = dotted, label="false"];
29->25 [style = bold, label=""];
1->21 [style = dashed, label="0"];
24->29 [style = bold, label=""];
19->17 [style = bold, label=""];
20->21 [style = dotted, label="true"];
9->10 [style = bold, label=""];
1->7 [style = solid, label="status"];
0->20 [style = dashed, label="0"];
1->7 [style = bold, label=""];
21->7 [style = solid, label="status"];
3->0 [style = bold, label=""];
6->15 [style = bold, label=""];
28->30 [style = solid, label="name"];
26->30 [style = bold, label=""];
20->21 [style = bold, label=""];
13->2 [style = solid, label="name"];
20->18 [style = bold, label=""];
5->19 [style = bold, label=""];
29->10 [style = solid, label="e"];
3->20 [style = bold, label=""];
28->27 [style = solid, label="name"];
15->9 [style = bold, label=""];
0->1 [style = bold, label=""];
16->10 [style = dashed, label="0"];
14->12 [style = bold, label=""];
30->10 [style = bold, label=""];
21->7 [style = bold, label=""];
0->18 [style = bold, label=""];
17->13 [style = bold, label=""];
12->3 [style = bold, label=""];
28->27 [style = bold, label=""];
8->4 [style = bold, label=""];
20->18 [style = dotted, label="false"];
18->7 [style = bold, label=""];
18->7 [style = solid, label="status"];
2->8 [style = bold, label=""];
0->1 [style = dotted, label="true"];
13->2 [style = bold, label=""];
19->16 [style = solid, label="error"];
}
