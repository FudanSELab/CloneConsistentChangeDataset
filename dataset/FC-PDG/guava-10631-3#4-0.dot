digraph {
3 [style = filled, label = "expectedTranspose.addEdge(N1,N3,E31)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "transpose_directedNetwork['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertThat(Graphs.equivalent(transpose,expectedTranspose)).isTrue()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "directedGraph.addEdge(N3,N1,E31)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(transpose.edgesConnecting(N1,N2)).containsExactly(E21)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "directedGraph.addEdge(N1,N2,E12_A)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "AbstractNetworkTest.validateNetwork(transpose)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "directedGraph.addEdge(N2,N1,E21)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "directedGraph.addEdge(N3,N4,E34)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "AbstractNetworkTest.validateNetwork(transpose)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "buildDirectedNetwork['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "return directedGraph@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expectedTranspose.addEdge(N1,N1,E11)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(transpose).isEqualTo(expectedTranspose)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "directedGraph.addEdge(N1,N2,E12)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "MutableNetwork<Integer,String> directedGraph = NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "directedGraph.addEdge(N1,N1,E11)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Network<Integer,String> transpose = Graphs.transpose(directedGraph)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(transpose.edgesConnecting(N1,N2)).isEmpty()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(transpose(transpose)).isEqualTo(directedGraph)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "expectedTranspose.addEdge(N2,N1,E12)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "transpose_directedNetwork['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "directedGraph.addEdge(N1,N1,E11_A)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "MutableNetwork<Integer,String> directedGraph = NetworkBuilder.directed().allowsSelfLoops(true).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(transpose(transpose)).isSameAs(directedGraph)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "directedGraph.addEdge(N1,N2,E12)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "directedGraph.addEdge(N2,N1,E21)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "MutableNetwork<Integer,String> expectedTranspose = NetworkBuilder.directed().allowsSelfLoops(true).build()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectedTranspose.addEdge(N4,N3,E34)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
6->17 [style = bold, label=""];
1->0 [style = solid, label="directedGraph"];
7->11 [style = bold, label=""];
15->7 [style = bold, label=""];
23->27 [style = bold, label=""];
9->18 [style = solid, label="expectedTranspose"];
1->26 [style = dashed, label="0"];
0->19 [style = dashed, label="0"];
0->2 [style = bold, label=""];
11->22 [style = dashed, label="0"];
5->15 [style = bold, label=""];
8->6 [style = bold, label=""];
19->2 [style = bold, label=""];
11->9 [style = bold, label=""];
1->19 [style = solid, label="directedGraph"];
2->4 [style = bold, label=""];
22->7 [style = bold, label=""];
3->23 [style = dashed, label="0"];
3->10 [style = bold, label=""];
12->13 [style = bold, label=""];
24->26 [style = bold, label=""];
16->1 [style = bold, label=""];
10->12 [style = bold, label=""];
18->20 [style = dashed, label="0"];
7->23 [style = bold, label=""];
21->1 [style = bold, label=""];
26->25 [style = solid, label="directedGraph"];
9->3 [style = bold, label=""];
4->8 [style = bold, label=""];
14->18 [style = bold, label=""];
26->28 [style = bold, label=""];
20->19 [style = bold, label=""];
14->2 [style = solid, label="transpose"];
13->14 [style = bold, label=""];
27->25 [style = bold, label=""];
18->0 [style = bold, label=""];
1->14 [style = solid, label="directedGraph"];
28->22 [style = bold, label=""];
14->17 [style = solid, label="transpose"];
14->20 [style = bold, label=""];
}
