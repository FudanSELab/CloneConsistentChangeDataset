digraph {
18 [style = filled, label = "messageWithMultipleSpans['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(rabbitmqMetrics.messagesDropped()).isZero()@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(kafkaMetrics.bytes()).isEqualTo(message.length)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(receivedSpans.take()).containsAll(spans)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(rabbitmqMetrics.spansDropped()).isZero()@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertThat(kafkaMetrics.messages()).isEqualTo(1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "messageWithMultipleSpans['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "produceSpans(message,builder.queue)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertThat(kafkaMetrics.spans()).isEqualTo(spans.size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(kafkaMetrics.messagesDropped()).isZero()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(rabbitmqMetrics.messages()).isEqualTo(1)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "collector.start()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "RabbitMQCollector.Builder builder@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "publish(message)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Thread.sleep(200L)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(rabbitmqMetrics.bytes()).isEqualTo(message.length)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(rabbitmqMetrics.messagesDropped()).isZero()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "SpanBytesEncoder encoder@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertThat(rabbitmqMetrics.messages()).isEqualTo(1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "produceSpans(message,builder.topic)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "SpanBytesEncoder encoder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "byte(( message = encoder.encodeList(spans)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(storage.acceptedSpanCount()).isEqualTo(spans.size())@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "KafkaCollector.Builder builder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "SpanBytesEncoder encoder@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertThat(receivedSpans.take()).containsAll(spans)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(kafkaMetrics.spansDropped()).isZero()@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "collector.start()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "messageWithMultipleSpans['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0->8 [style = solid, label="message"];
22->25 [style = bold, label=""];
18->16 [style = dotted, label="true"];
7->10 [style = bold, label=""];
28->20 [style = dotted, label="true"];
26->29 [style = bold, label=""];
8->15 [style = dashed, label="0"];
12->17 [style = bold, label=""];
6->0 [style = bold, label=""];
0->21 [style = bold, label=""];
21->24 [style = bold, label=""];
28->19 [style = dotted, label="true"];
8->21 [style = dashed, label="0"];
1->7 [style = bold, label=""];
0->15 [style = bold, label=""];
2->13 [style = bold, label=""];
25->27 [style = bold, label=""];
28->0 [style = bold, label=""];
24->26 [style = bold, label=""];
18->11 [style = dotted, label="true"];
5->2 [style = bold, label=""];
3->20 [style = dashed, label="0"];
0->21 [style = solid, label="message"];
8->9 [style = bold, label=""];
0->8 [style = bold, label=""];
10->4 [style = bold, label=""];
0->15 [style = solid, label="message"];
27->23 [style = bold, label=""];
15->12 [style = bold, label=""];
29->22 [style = bold, label=""];
9->1 [style = bold, label=""];
6->3 [style = dotted, label="true"];
7->26 [style = dashed, label="0"];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
18->0 [style = bold, label=""];
17->4 [style = bold, label=""];
3->16 [style = dashed, label="0"];
}
