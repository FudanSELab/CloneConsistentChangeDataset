digraph {
18 [style = filled, label = "testNoPrioritization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(workUnit.getExtract(),extract)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "CopyableFile file = (CopyableFile)CopySource.deserializeCopyEntity(workUnit)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "state.setProp(DatasetUtils.DATASET_PROFILE_CLASS_KEY,.getName())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "state.setProp(DatasetUtils.DATASET_PROFILE_CLASS_KEY,.getName())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "state.setProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI,\"file:///\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testCopySource['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(workunits.size(),MyFinder.DATASETS * MyDataset.FILE_SETS * MyFileSet.FILES)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "state.setProp(ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR,\"/target/dir\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "SourceState state = new SourceState()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "workunits = JobLauncherUtils.flattenWorkUnits(workunits)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<WorkUnit> workunits = source.getWorkunits(state)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Extract extract = workunits.get(0).getExtract()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(workUnit.getProp(ServiceConfigKeys.WORK_UNIT_SIZE),String.valueOf(TestCopyableDataset.FILE_LENGTH))@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "CopySource source = new CopySource()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "state.setProp(ConfigurationKeys.SOURCE_FILEBASED_FS_URI,\"file:///\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(file.getDestinationOwnerAndPermission(),TestCopyableDataset.OWNER_AND_PERMISSION)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testCopySource['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(workunits.size(),TestCopyableDataset.FILE_COUNT)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(file.getOrigin().getPath().toString().startsWith(TestCopyableDataset.ORIGIN_PREFIX))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->6 [style = bold, label=""];
13->15 [style = bold, label=""];
15->9 [style = bold, label=""];
9->2 [style = bold, label=""];
16->8 [style = bold, label=""];
12->1 [style = bold, label=""];
17->3 [style = bold, label=""];
0->13 [style = bold, label=""];
3->5 [style = bold, label=""];
6->2 [style = bold, label=""];
10->12 [style = bold, label=""];
8->11 [style = bold, label=""];
5->7 [style = solid, label="workunits"];
12->17 [style = bold, label=""];
1->3 [style = bold, label=""];
11->10 [style = bold, label=""];
8->5 [style = solid, label="state"];
7->4 [style = bold, label=""];
14->8 [style = bold, label=""];
6->9 [style = solid, label="extract"];
2->0 [style = bold, label=""];
13->9 [style = bold, label=""];
7->19 [style = bold, label=""];
18->8 [style = bold, label=""];
4->19 [style = dashed, label="0"];
1->17 [style = dashed, label="0"];
5->7 [style = bold, label=""];
}
