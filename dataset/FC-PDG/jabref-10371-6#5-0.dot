digraph {
25 [style = filled, label = "assertEquals(\"UNKNOWN\",repository.getShortestUniqueAbbreviation(\"?\").orElse(\"UNKNOWN\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"Long Name\",repository.getNextAbbreviation(\"L N\").orElse(\"WRONG\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(\"L N\",repository.getMedlineAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"L. N.\",repository.getDefaultAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testDuplicateKeys['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertFalse(repository.getAbbreviations().isEmpty())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(1,repository.size())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"UNKNOWN\",repository.getDefaultAbbreviation(\"?\").orElse(\"UNKNOWN\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(\"L. N.\",repository.getNextAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testDuplicateKeys['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(1,repository.getCustomAbbreviations().size())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertFalse(repository.isKnownName(\"?\"))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(repository.isKnownName(\"L N\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(repository.isKnownName(\"L. N.\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"LA. N.\",repository.getDefaultAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@9@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(repository.isKnownName(\"Long Name\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(\"L N\",repository.getNextAbbreviation(\"L. N.\").orElse(\"WRONG\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "JournalAbbreviationRepository repository = new JournalAbbreviationRepository()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"L. N.\",repository.getDefaultAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(1,repository.getCustomAbbreviations().size())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertEquals(\"L. N.\",repository.getShortestUniqueAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(1,repository.size())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "repository.addCustomAbbreviation(new Abbreviation(\"Long Name\",\"L. N.\"))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "repository.addEntry(new Abbreviation(\"Long Name\",\"LA. N.\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "repository.addEntry(new Abbreviation(\"Long Name\",\"L. N.\"))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"LA. N.\",repository.getDefaultAbbreviation(\"Long Name\").orElse(\"WRONG\"))@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEquals(\"UNKNOWN\",repository.getMedlineAbbreviation(\"?\").orElse(\"UNKNOWN\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\"UNKNOWN\",repository.getNextAbbreviation(\"?\").orElse(\"UNKNOWN\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "oneElement['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
16->0 [style = bold, label=""];
9->0 [style = bold, label=""];
28->20 [style = bold, label=""];
4->6 [style = bold, label=""];
0->19 [style = bold, label=""];
1->19 [style = dashed, label="0"];
7->11 [style = dashed, label="0"];
0->11 [style = bold, label=""];
6->0 [style = bold, label=""];
3->4 [style = bold, label=""];
1->7 [style = bold, label=""];
26->22 [style = bold, label=""];
20->27 [style = bold, label=""];
12->13 [style = bold, label=""];
21->26 [style = bold, label=""];
15->17 [style = bold, label=""];
14->23 [style = bold, label=""];
7->28 [style = dashed, label="0"];
11->10 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
6->16 [style = bold, label=""];
25->15 [style = bold, label=""];
13->9 [style = bold, label=""];
19->28 [style = bold, label=""];
18->21 [style = bold, label=""];
22->14 [style = bold, label=""];
27->25 [style = bold, label=""];
24->3 [style = bold, label=""];
8->12 [style = bold, label=""];
17->18 [style = bold, label=""];
1->0 [style = dashed, label="0"];
}
