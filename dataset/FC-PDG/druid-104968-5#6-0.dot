digraph {
1 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(0,startOrder,stopOrder))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(9,startOrder.size())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "final List<Integer> startOrder = new ArrayList<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<Integer> startOrder = new ArrayList<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "lifecycle.start()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(4,startOrder,stopOrder))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testSanity['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(expectedOrder,startOrder)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(expectedOrder,startOrder)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(Lists.reverse(expectedOrder),stopOrder)@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "lifecycle.addHandler(new Lifecycle.Handler(){@Override public void start(){lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(1,startOrder,stopOrder),Lifecycle.Stage.NORMAL)lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(2,startOrder,stopOrder),Lifecycle.Stage.NORMAL)lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(3,startOrder,stopOrder),Lifecycle.Stage.LAST)lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(4,startOrder,stopOrder))lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(5,startOrder,stopOrder))lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(6,startOrder,stopOrder),Lifecycle.Stage.LAST)lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(7,startOrder,stopOrder))}@Override public void stop(){}})@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<Integer> stopOrder = new ArrayList<>()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(0,stopOrder.size())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(1,startOrder,stopOrder),Lifecycle.Stage.NORMAL)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "lifecycle.start()@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "lifecycle.start()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(6,startOrder,stopOrder),Lifecycle.Stage.LAST)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Lifecycle lifecycle = new Lifecycle()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final List<Integer> expectedOrder = Arrays.asList(0,1,2,4,5,7,3,6)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testAddToLifecycleInStartMethod['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "lifecycle.stop()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(7,startOrder,stopOrder))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(0,stopOrder.size())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(9,stopOrder.size())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(expectedOrder,startOrder)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(5,startOrder,stopOrder))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(0,stopOrder.size())@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(2,startOrder,stopOrder),Lifecycle.Stage.NORMAL)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final List<Integer> expectedOrder = Arrays.asList(0,1,2,4,5,7,3,6)@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final List<Integer> expectedOrder = Arrays.asList(8,0,1,2,4,5,7,3,6)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "final List<Integer> stopOrder = new ArrayList<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "lifecycle.stop()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(3,startOrder,stopOrder),Lifecycle.Stage.LAST)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(9,startOrder.size())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testSanity['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(8,startOrder,stopOrder),Lifecycle.Stage.INIT)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "Assert.assertEquals(Lists.reverse(expectedOrder),stopOrder)@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "final Lifecycle lifecycle = new Lifecycle()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24->10 [style = bold, label=""];
29->36 [style = bold, label=""];
4->9 [style = bold, label=""];
28->29 [style = bold, label=""];
9->1 [style = solid, label="stopOrder"];
4->23 [style = solid, label="startOrder"];
9->21 [style = solid, label="stopOrder"];
4->12 [style = solid, label="startOrder"];
16->18 [style = bold, label=""];
4->1 [style = solid, label="startOrder"];
35->1 [style = solid, label="startOrder"];
17->32 [style = solid, label="expectedOrder"];
30->1 [style = bold, label=""];
15->14 [style = bold, label=""];
19->12 [style = bold, label=""];
9->14 [style = solid, label="stopOrder"];
31->32 [style = bold, label=""];
37->17 [style = bold, label=""];
14->5 [style = bold, label=""];
20->28 [style = bold, label=""];
36->31 [style = bold, label=""];
26->18 [style = bold, label=""];
30->1 [style = solid, label="stopOrder"];
17->31 [style = solid, label="expectedOrder"];
4->7 [style = solid, label="startOrder"];
6->20 [style = solid, label="expectedOrder"];
10->26 [style = bold, label=""];
9->12 [style = solid, label="stopOrder"];
9->19 [style = solid, label="stopOrder"];
4->19 [style = solid, label="startOrder"];
9->5 [style = solid, label="stopOrder"];
3->4 [style = bold, label=""];
9->23 [style = solid, label="stopOrder"];
4->18 [style = solid, label="startOrder"];
9->7 [style = solid, label="stopOrder"];
8->17 [style = bold, label=""];
25->27 [style = bold, label=""];
22->3 [style = bold, label=""];
35->31 [style = solid, label="startOrder"];
30->32 [style = solid, label="stopOrder"];
12->2 [style = bold, label=""];
23->24 [style = bold, label=""];
10->26 [style = dashed, label="0"];
3->34 [style = dashed, label="0"];
9->20 [style = solid, label="stopOrder"];
9->2 [style = solid, label="stopOrder"];
10->16 [style = bold, label=""];
13->3 [style = bold, label=""];
4->2 [style = solid, label="startOrder"];
24->21 [style = solid, label="expectedOrder"];
11->10 [style = bold, label=""];
6->18 [style = solid, label="expectedOrder"];
6->11 [style = bold, label=""];
7->23 [style = bold, label=""];
7->6 [style = bold, label=""];
2->15 [style = bold, label=""];
0->8 [style = bold, label=""];
4->0 [style = solid, label="startOrder"];
5->7 [style = bold, label=""];
8->25 [style = dashed, label="0"];
4->5 [style = solid, label="startOrder"];
4->15 [style = solid, label="startOrder"];
24->0 [style = solid, label="expectedOrder"];
34->35 [style = bold, label=""];
9->15 [style = solid, label="stopOrder"];
9->30 [style = dashed, label="0"];
17->28 [style = solid, label="expectedOrder"];
1->19 [style = bold, label=""];
9->1 [style = bold, label=""];
35->28 [style = solid, label="startOrder"];
8->31 [style = dashed, label="0"];
27->21 [style = bold, label=""];
35->30 [style = bold, label=""];
8->25 [style = bold, label=""];
33->34 [style = bold, label=""];
18->0 [style = bold, label=""];
35->37 [style = solid, label="startOrder"];
30->37 [style = solid, label="stopOrder"];
4->14 [style = solid, label="startOrder"];
4->35 [style = dashed, label="0"];
1->37 [style = bold, label=""];
17->20 [style = bold, label=""];
17->27 [style = dashed, label="0"];
}
