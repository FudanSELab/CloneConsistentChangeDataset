digraph {
12 [style = filled, label = "assertNotEquals(TimeWindows.of(4).advanceBy(2).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "equalsAndHashcodeShouldBeValidForPositiveCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(TimeWindows.of(3).hashCode(),TimeWindows.of(3).hashCode())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNotEquals(TimeWindows.of(9).hashCode(),TimeWindows.of(3).hashCode())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2),TimeWindows.of(3).advanceBy(1))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "verifyInEquality(TimeWindows.of(3).until(9),TimeWindows.of(3).until(4))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verifyInEquality(TimeWindows.of(3).advanceBy(1).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(2).until(9).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "verifyInEquality(TimeWindows.of(3).grace(2),TimeWindows.of(3).grace(1))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(1).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertNotEquals(TimeWindows.of(3).until(9),TimeWindows.of(3).until(4))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "verifyInEquality(TimeWindows.of(3).advanceBy(2),TimeWindows.of(3).advanceBy(1))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(1).grace(2).until(4).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertEquals(TimeWindows.of(3).grace(1),TimeWindows.of(3).grace(1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(TimeWindows.of(3).until(4).hashCode(),TimeWindows.of(3).until(4).hashCode())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(TimeWindows.of(3).until(4),TimeWindows.of(3).until(4))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertNotEquals(TimeWindows.of(3).grace(2).hashCode(),TimeWindows.of(3).grace(1).hashCode())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "verifyInEquality(TimeWindows.of(4).advanceBy(2).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(1).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(1).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertEquals(TimeWindows.of(3).advanceBy(1).hashCode(),TimeWindows.of(3).advanceBy(1).hashCode())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(TimeWindows.of(3).advanceBy(1),TimeWindows.of(3).advanceBy(1))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertNotEquals(TimeWindows.of(9),TimeWindows.of(3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).hashCode(),TimeWindows.of(3).advanceBy(1).hashCode())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "assertEquals(TimeWindows.of(3),TimeWindows.of(3))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertNotEquals(TimeWindows.of(3).grace(2),TimeWindows.of(3).grace(1))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "assertEquals(TimeWindows.of(3).grace(1).hashCode(),TimeWindows.of(3).grace(1).hashCode())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(1).until(4).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(2).until(9),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "verifyInEquality(TimeWindows.of(9),TimeWindows.of(3))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertEquals(TimeWindows.of(3).advanceBy(1).grace(1).until(4).hashCode(),TimeWindows.of(3).advanceBy(1).grace(1).until(4).hashCode())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(2).until(9),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertNotEquals(TimeWindows.of(4).advanceBy(2).grace(2).until(4).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertEquals(TimeWindows.of(3).advanceBy(1).grace(1).until(4),TimeWindows.of(3).advanceBy(1).grace(1).until(4))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNotEquals(TimeWindows.of(3).until(9).hashCode(),TimeWindows.of(3).until(4).hashCode())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14->3 [style = bold, label=""];
5->10 [style = bold, label=""];
16->15 [style = bold, label=""];
4->18 [style = dashed, label="0"];
35->27 [style = bold, label=""];
12->35 [style = dashed, label="0"];
16->27 [style = dashed, label="0"];
36->29 [style = bold, label=""];
7->20 [style = dashed, label="0"];
10->28 [style = dashed, label="0"];
0->26 [style = dashed, label="0"];
5->25 [style = dashed, label="0"];
12->16 [style = bold, label=""];
21->25 [style = bold, label=""];
32->30 [style = bold, label=""];
11->36 [style = dashed, label="0"];
25->17 [style = bold, label=""];
1->13 [style = bold, label=""];
22->23 [style = bold, label=""];
4->33 [style = dashed, label="0"];
9->32 [style = dashed, label="0"];
4->0 [style = bold, label=""];
33->26 [style = bold, label=""];
19->24 [style = bold, label=""];
24->20 [style = bold, label=""];
6->14 [style = bold, label=""];
7->9 [style = bold, label=""];
20->21 [style = bold, label=""];
26->31 [style = bold, label=""];
18->22 [style = bold, label=""];
30->28 [style = bold, label=""];
28->33 [style = bold, label=""];
31->35 [style = bold, label=""];
9->21 [style = dashed, label="0"];
29->32 [style = bold, label=""];
11->7 [style = bold, label=""];
34->36 [style = bold, label=""];
11->24 [style = dashed, label="0"];
0->8 [style = bold, label=""];
10->17 [style = dashed, label="0"];
10->4 [style = bold, label=""];
9->5 [style = bold, label=""];
7->29 [style = dashed, label="0"];
8->31 [style = dashed, label="0"];
13->6 [style = bold, label=""];
2->11 [style = bold, label=""];
8->12 [style = bold, label=""];
17->18 [style = bold, label=""];
5->30 [style = dashed, label="0"];
15->1 [style = bold, label=""];
}
