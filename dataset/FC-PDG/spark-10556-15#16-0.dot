digraph {
17 [style = filled, label = "int i = 0@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(value.length,loc.getValueLength())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "!expected.containsKey(ByteBuffer.wrap(key))@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final byte(( value = getRandomByteArray(rand.nextInt(512) + 1)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "expected.put(ByteBuffer.wrap(key),value)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(loc.isDefined())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i++@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(arrayEquals(key,loc.getKeyBase(),loc.getKeyOffset(),loc.getKeyLength()))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(key.length,loc.getKeyLength())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "{map.free()}@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final BytesToBytesMap.Location loc = map.lookup(key,Platform.BYTE_ARRAY_OFFSET,key.length)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final byte(( value = getRandomByteArray(rand.nextInt(128))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "final long pageSizeBytes = 128@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final byte(( key = JavaUtils.bufferToArray(entry.getKey())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i++@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final Map<ByteBuffer,byte((> expected = new HashMap<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final int size = 65536@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "final Map<ByteBuffer,byte((> expected = new HashMap<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager,64,pageSizeBytes)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final byte(( value = getRandomByteArray(rand.nextInt(256) + 1)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final byte(( key = JavaUtils.bufferToArray(entry.getKey())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final byte(( value = entry.getValue()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final int size = 32768@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "{map.free()}@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "randomizedStressTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "randomizedTestWithRecordsLargerThanPageSize['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertTrue(arrayEquals(value,loc.getValueBase(),loc.getValueOffset(),value.length))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final BytesToBytesMap.Location loc = map.lookup(key,Platform.BYTE_ARRAY_OFFSET,key.length)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(loc.append(key,Platform.BYTE_ARRAY_OFFSET,key.length,value,Platform.BYTE_ARRAY_OFFSET,value.length))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(arrayEquals(key,loc.getKeyBase(),loc.getKeyOffset(),key.length))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "randomizedStressTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "!expected.containsKey(ByteBuffer.wrap(key))@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertFalse(loc.isDefined())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(loc.isDefined())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertTrue(arrayEquals(value,loc.getValueBase(),loc.getValueOffset(),loc.getValueLength()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "final byte(( key = getRandomByteArray(rand.nextInt(128))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "i < 1000@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
19->10 [style = dotted, label="true"];
4->24 [style = solid, label="key"];
8->16 [style = bold, label=""];
1->25 [style = solid, label="size"];
32->37 [style = bold, label=""];
5->9 [style = bold, label=""];
25->22 [style = bold, label=""];
28->20 [style = bold, label=""];
17->6 [style = dotted, label="true"];
37->13 [style = solid, label="key"];
27->28 [style = bold, label=""];
1->20 [style = bold, label=""];
1->17 [style = solid, label="size"];
17->8 [style = solid, label="i"];
8->19 [style = solid, label="key"];
6->19 [style = dotted, label="true"];
16->26 [style = dashed, label="0"];
17->8 [style = dotted, label="true"];
4->24 [style = solid, label="value"];
6->18 [style = dotted, label="true"];
32->8 [style = dotted, label="true"];
29->10 [style = solid, label="value"];
29->33 [style = solid, label="value"];
19->11 [style = dotted, label="true"];
0->24 [style = bold, label=""];
11->13 [style = bold, label=""];
32->37 [style = dotted, label="true"];
17->32 [style = solid, label="i"];
36->30 [style = solid, label="pageSizeBytes"];
17->2 [style = dotted, label="true"];
32->4 [style = bold, label=""];
6->11 [style = dotted, label="true"];
6->3 [style = dotted, label="true"];
37->21 [style = solid, label="key"];
35->31 [style = bold, label=""];
17->26 [style = dotted, label="true"];
8->3 [style = solid, label="key"];
16->6 [style = bold, label=""];
6->13 [style = dotted, label="true"];
12->11 [style = bold, label=""];
18->12 [style = bold, label=""];
37->29 [style = bold, label=""];
19->33 [style = dotted, label="true"];
22->2 [style = solid, label="i"];
28->25 [style = solid, label="size"];
4->9 [style = solid, label="key"];
19->21 [style = dotted, label="true"];
26->6 [style = bold, label=""];
16->19 [style = solid, label="value"];
20->25 [style = bold, label=""];
6->2 [style = bold, label=""];
29->21 [style = solid, label="value"];
17->16 [style = dotted, label="true"];
3->10 [style = bold, label=""];
36->30 [style = bold, label=""];
19->3 [style = dotted, label="true"];
34->36 [style = bold, label=""];
6->7 [style = dotted, label="true"];
22->17 [style = bold, label=""];
21->7 [style = bold, label=""];
6->12 [style = dotted, label="true"];
2->17 [style = solid, label="i"];
33->8 [style = bold, label=""];
16->13 [style = solid, label="value"];
2->17 [style = bold, label=""];
17->8 [style = bold, label=""];
10->18 [style = bold, label=""];
8->11 [style = solid, label="key"];
8->21 [style = solid, label="key"];
19->18 [style = dotted, label="true"];
19->12 [style = dotted, label="true"];
26->3 [style = solid, label="value"];
28->17 [style = solid, label="size"];
19->7 [style = dotted, label="true"];
23->5 [style = solid, label="key"];
1->28 [style = dashed, label="0"];
25->17 [style = bold, label=""];
17->23 [style = bold, label=""];
6->10 [style = dotted, label="true"];
26->13 [style = solid, label="value"];
16->3 [style = solid, label="value"];
29->19 [style = bold, label=""];
32->29 [style = dotted, label="true"];
6->21 [style = dotted, label="true"];
4->5 [style = bold, label=""];
13->2 [style = bold, label=""];
24->15 [style = bold, label=""];
22->17 [style = solid, label="i"];
24->23 [style = bold, label=""];
19->21 [style = bold, label=""];
8->37 [style = dashed, label="0"];
9->0 [style = bold, label=""];
8->32 [style = bold, label=""];
24->35 [style = bold, label=""];
37->10 [style = solid, label="key"];
23->0 [style = solid, label="key"];
37->7 [style = solid, label="key"];
23->4 [style = bold, label=""];
30->25 [style = bold, label=""];
17->32 [style = dashed, label="0"];
19->13 [style = dotted, label="true"];
6->19 [style = bold, label=""];
17->32 [style = bold, label=""];
5->35 [style = solid, label="value"];
35->4 [style = bold, label=""];
7->3 [style = bold, label=""];
14->1 [style = bold, label=""];
19->8 [style = bold, label=""];
26->19 [style = solid, label="value"];
8->32 [style = solid, label="i"];
1->36 [style = dashed, label="0"];
16->29 [style = dashed, label="0"];
13->33 [style = bold, label=""];
32->19 [style = dotted, label="true"];
8->26 [style = bold, label=""];
}
