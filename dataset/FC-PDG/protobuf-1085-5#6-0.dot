digraph {
17 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "i < 6@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertNull(map.remove(3))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(2,map.size())@@@36@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "SmallSortedMap<Integer,Integer> map = SmallSortedMap.newInstanceForTest(3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertNull(map.put(i,i + 1))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(3,map.size())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "i++@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(2,map.getNumOverflowEntries())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(Integer.valueOf(i + 1),map.put(i,i + 2))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,3,4,5),map.keySet())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testReplacingPut['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(map.remove(i + 1)).isNull()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(Integer.valueOf(2),map.remove(1))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(3,map.size())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(6,map.size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testRemove['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertEquals(3,map.getNumOverflowEntries())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(Integer.valueOf(1),map.remove(0))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testReplacingPut['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(map.put(i,i + 1)).isNull()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "assertEquals(Integer.valueOf(5),map.remove(4))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(map.put(i,i + 2)).isEqualTo(Integer.valueOf(i + 1))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(4,map.size())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,3,5),map.keySet())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertNull(map.remove(i + 1))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "i < 6@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(makeSortedKeySet(0,1,2,3,4,5),map.keySet())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,5),map.keySet())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(2,map.getNumArrayEntries())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(Integer.valueOf(4),map.remove(3))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(1,map.getNumOverflowEntries())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(5,map.size())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "int i = 0@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
28->29 [style = bold, label=""];
23->25 [style = bold, label=""];
7->1 [style = bold, label=""];
9->14 [style = solid, label="i"];
9->2 [style = bold, label=""];
19->31 [style = bold, label=""];
35->22 [style = bold, label=""];
7->1 [style = solid, label="i"];
1->11 [style = dotted, label="true"];
41->37 [style = bold, label=""];
30->27 [style = bold, label=""];
21->41 [style = bold, label=""];
9->2 [style = solid, label="i"];
38->36 [style = bold, label=""];
37->15 [style = bold, label=""];
1->4 [style = dotted, label="true"];
6->14 [style = solid, label="i"];
2->10 [style = bold, label=""];
12->0 [style = bold, label=""];
10->6 [style = bold, label=""];
42->40 [style = bold, label=""];
17->19 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
1->9 [style = bold, label=""];
1->11 [style = bold, label=""];
15->26 [style = bold, label=""];
7->4 [style = solid, label="i"];
6->2 [style = bold, label=""];
20->21 [style = bold, label=""];
7->5 [style = solid, label="i"];
9->10 [style = solid, label="i"];
8->1 [style = bold, label=""];
26->16 [style = bold, label=""];
34->28 [style = bold, label=""];
36->30 [style = bold, label=""];
25->20 [style = bold, label=""];
1->7 [style = dotted, label="true"];
1->13 [style = dotted, label="true"];
6->2 [style = solid, label="i"];
31->35 [style = bold, label=""];
9->6 [style = solid, label="i"];
5->11 [style = dashed, label="0"];
16->33 [style = bold, label=""];
2->6 [style = dotted, label="true"];
13->7 [style = bold, label=""];
8->5 [style = solid, label="i"];
8->1 [style = solid, label="i"];
5->4 [style = bold, label=""];
11->13 [style = bold, label=""];
2->14 [style = bold, label=""];
0->8 [style = bold, label=""];
27->17 [style = bold, label=""];
6->10 [style = solid, label="i"];
1->32 [style = bold, label=""];
22->39 [style = bold, label=""];
40->24 [style = bold, label=""];
2->14 [style = dotted, label="true"];
29->38 [style = bold, label=""];
4->13 [style = dashed, label="0"];
32->42 [style = bold, label=""];
8->7 [style = solid, label="i"];
33->34 [style = bold, label=""];
1->5 [style = dotted, label="true"];
10->24 [style = dashed, label="0"];
14->6 [style = bold, label=""];
18->0 [style = bold, label=""];
8->4 [style = solid, label="i"];
10->14 [style = dashed, label="0"];
2->10 [style = dotted, label="true"];
24->23 [style = bold, label=""];
}
