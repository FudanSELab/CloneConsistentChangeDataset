digraph {
4 [style = filled, label = "assertThat(graph.edges()).containsExactly(\"p\",\"i\",\"e\").inOrder()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(graph.nodeOrder()).isEqualTo(ElementOrder.insertion())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(graph.nodeOrder()).isEqualTo(unordered())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(graph.edgeOrder()).isEqualTo(ElementOrder.sorted(Ordering.natural().reverse()))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "MutableNetwork<Integer,String> graph = NetworkBuilder.directed().nodeOrder(unordered()).edgeOrder(ElementOrder.sorted(Ordering.natural().reverse())).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "nodeOrderUnorderedandEdgesSorted['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "edgeOrder_sorted['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(graph.nodes()).containsExactly(4,1,3)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "addEdges(graph)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "edgeOrder_sorted['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "MutableNetwork<Integer,String> graph = NetworkBuilder.directed().edgeOrder(ElementOrder.sorted(Ordering.natural().reverse())).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
6->3 [style = bold, label=""];
4->8 [style = bold, label=""];
8->10 [style = bold, label=""];
1->8 [style = dashed, label="0"];
4->1 [style = bold, label=""];
7->0 [style = bold, label=""];
7->0 [style = solid, label="graph"];
3->0 [style = solid, label="graph"];
9->7 [style = bold, label=""];
2->4 [style = bold, label=""];
3->7 [style = dashed, label="0"];
3->0 [style = bold, label=""];
0->2 [style = bold, label=""];
}
