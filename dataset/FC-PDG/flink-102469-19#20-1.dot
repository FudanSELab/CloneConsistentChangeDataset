digraph {
17 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\",initialTime),1,1)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Ciao-0-0\",initialTime))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "long initialTime = 0L@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Hello-0-0\",initialTime))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,1)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Hello-0-0\",initialTime),0,0)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final OneInputStreamTaskTestHarness<String,String> testHarness = new OneInputStreamTaskTestHarness<>(null,2,2,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testCheckpointBarriers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Hello-1-1\",initialTime))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),0,1)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Hello-1-1\",initialTime),1,1)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Ciao-1-1\",initialTime))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "testHarness.waitForTaskRunning()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\",initialTime))@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Hello-0-0\",initialTime))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "testOvertakingCheckpointBarriers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "expectedOutput.add(new CancelCheckpointMarker(0))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Ciao-1-1\",initialTime),1,1)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\",initialTime))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "StreamConfig streamConfig = testHarness.getStreamConfig()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testHarness.waitForTaskCompletion()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,0)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testHarness.waitForInputProcessing()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testHarness.endInput()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testCheckpointBarriers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "StreamMap<String,String> mapOperator = new StreamMap<String,String>(new IdentityMap())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,1)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Hello-1-1\",initialTime))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),0,0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Hello-1-1\",initialTime),1,1)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\",initialTime),0,0)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "streamConfig.setOperatorID(new OperatorID())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),1,0)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\",initialTime))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Hello-0-0\",initialTime))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "testHarness.invoke()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness.setupOutputForSingletonOperatorChain()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),1,1)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testHarness.waitForInputProcessing()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Hello-0-0\",initialTime),0,0)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Ciao-0-0\",initialTime),0,0)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,0)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testHarness.waitForInputProcessing()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "streamConfig.setStreamOperator(mapOperator)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@38@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "StreamMap<String,String> mapOperator = new StreamMap<>(new IdentityMap())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->13 [style = bold, label=""];
2->32 [style = dashed, label="0"];
10->38 [style = dashed, label="0"];
49->51 [style = bold, label=""];
14->17 [style = bold, label=""];
38->15 [style = solid, label="mapOperator"];
10->15 [style = solid, label="mapOperator"];
42->48 [style = bold, label=""];
21->23 [style = solid, label="expectedOutput"];
9->10 [style = bold, label=""];
38->15 [style = bold, label=""];
36->11 [style = bold, label=""];
19->24 [style = bold, label=""];
3->18 [style = bold, label=""];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
1->33 [style = bold, label=""];
8->20 [style = bold, label=""];
39->31 [style = bold, label=""];
19->31 [style = solid, label="initialTime"];
16->14 [style = bold, label=""];
19->16 [style = solid, label="initialTime"];
26->28 [style = bold, label=""];
17->27 [style = bold, label=""];
9->38 [style = bold, label=""];
44->47 [style = bold, label=""];
32->20 [style = bold, label=""];
19->33 [style = solid, label="initialTime"];
2->20 [style = bold, label=""];
16->37 [style = dashed, label="0"];
21->19 [style = bold, label=""];
28->30 [style = bold, label=""];
40->0 [style = solid, label="expectedOutput"];
19->44 [style = solid, label="initialTime"];
48->44 [style = bold, label=""];
29->23 [style = bold, label=""];
50->49 [style = bold, label=""];
6->33 [style = dashed, label="0"];
6->2 [style = bold, label=""];
43->11 [style = bold, label=""];
19->14 [style = solid, label="initialTime"];
19->37 [style = solid, label="initialTime"];
5->21 [style = bold, label=""];
4->34 [style = dashed, label="0"];
14->35 [style = dashed, label="0"];
17->39 [style = dashed, label="0"];
22->16 [style = bold, label=""];
35->39 [style = bold, label=""];
21->0 [style = solid, label="expectedOutput"];
40->19 [style = bold, label=""];
19->30 [style = solid, label="initialTime"];
19->4 [style = solid, label="initialTime"];
27->31 [style = dashed, label="0"];
31->34 [style = bold, label=""];
24->26 [style = bold, label=""];
1->6 [style = bold, label=""];
22->30 [style = dashed, label="0"];
4->12 [style = bold, label=""];
19->32 [style = solid, label="initialTime"];
33->32 [style = bold, label=""];
19->27 [style = solid, label="initialTime"];
18->8 [style = bold, label=""];
37->35 [style = bold, label=""];
5->40 [style = bold, label=""];
40->23 [style = solid, label="expectedOutput"];
28->22 [style = bold, label=""];
10->15 [style = bold, label=""];
19->34 [style = solid, label="initialTime"];
20->29 [style = bold, label=""];
47->46 [style = bold, label=""];
45->13 [style = bold, label=""];
30->37 [style = bold, label=""];
34->12 [style = bold, label=""];
12->0 [style = bold, label=""];
0->50 [style = bold, label=""];
15->5 [style = bold, label=""];
19->17 [style = solid, label="initialTime"];
27->4 [style = bold, label=""];
13->3 [style = bold, label=""];
19->22 [style = solid, label="initialTime"];
25->11 [style = bold, label=""];
19->6 [style = solid, label="initialTime"];
21->40 [style = dashed, label="0"];
19->48 [style = solid, label="initialTime"];
21->45 [style = solid, label="expectedOutput"];
46->45 [style = bold, label=""];
19->35 [style = solid, label="initialTime"];
19->39 [style = solid, label="initialTime"];
19->2 [style = solid, label="initialTime"];
51->41 [style = bold, label=""];
11->7 [style = bold, label=""];
41->42 [style = bold, label=""];
}
