digraph {
19 [style = filled, label = "assertFalse(indexService.getRefreshTask().mustReschedule())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "client().admin().indices().prepareUpdateSettings(\"test\").setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(),\"200ms\")).get()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "client().admin().indices().prepareUpdateSettings(\"test\").setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(),\"100ms\")).get()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testRefreshTaskIsUpdated['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Settings settings = Settings.builder().put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(),Translog.Durability.ASYNC).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(refreshTask.mustReschedule())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(200,refreshTask.getInterval().millis())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(refreshTask.isScheduled())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "indexService = createIndex(\"test1\",Settings.EMPTY)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(100,refreshTask.getInterval().millis())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(indexService.getRefreshTask().mustReschedule())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(refreshTask.isScheduled())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertEquals(5000,fsyncTask.getInterval().millis())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "IndexService.AsyncRefreshTask refreshTask = indexService.getRefreshTask()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "client().admin().indices().prepareUpdateSettings(\"test\").setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(),\"200ms\")).get()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(refreshTask.isClosed())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertTrue(fsyncTask.isScheduled())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(refreshTask.isScheduled())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "refreshTask = indexService.getRefreshTask()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertNull(indexService.getFsyncTask())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "indexService.close(\"simon says\",false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(200,refreshTask.getInterval().millis())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertFalse(refreshTask.isScheduled())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "refreshTask = indexService.getRefreshTask()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertTrue(fsyncTask.mustReschedule())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "IndexService.AsyncTranslogFSync fsyncTask = indexService.getFsyncTask()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(1000,refreshTask.getInterval().millis())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "indexService.close(\"simon says\",false)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "IndexService indexService = createIndex(\"test\",settings)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertSame(refreshTask,indexService.getRefreshTask())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertTrue(fsyncTask.isClosed())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertNotSame(refreshTask,indexService.getRefreshTask())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(refreshTask.isClosed())@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(indexService.getRefreshTask().mustReschedule())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertNotSame(refreshTask,indexService.getRefreshTask())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(refreshTask.isClosed())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(refreshTask.mustReschedule())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "IndexService indexService = createIndex(\"test\",Settings.EMPTY)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertFalse(refreshTask.isClosed())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertFalse(refreshTask.isScheduled())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertFalse(fsyncTask.isScheduled())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testFsyncTaskIsRunning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertNotSame(refreshTask,indexService.getRefreshTask())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "client().admin().indices().prepareUpdateSettings(\"test\").setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(),-1)).get()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testRefreshTaskIsUpdated['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertTrue(refreshTask.isClosed())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertNotNull(fsyncTask)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->10 [style = bold, label=""];
4->3 [style = bold, label=""];
27->26 [style = solid, label="refreshTask"];
8->40 [style = dashed, label="0"];
28->15 [style = bold, label=""];
42->46 [style = bold, label=""];
21->19 [style = bold, label=""];
27->0 [style = bold, label=""];
36->41 [style = bold, label=""];
1->43 [style = dashed, label="0"];
39->36 [style = solid, label="fsyncTask"];
10->31 [style = solid, label="refreshTask"];
10->30 [style = solid, label="refreshTask"];
12->17 [style = bold, label=""];
44->40 [style = bold, label=""];
20->31 [style = bold, label=""];
34->42 [style = bold, label=""];
46->39 [style = bold, label=""];
33->5 [style = bold, label=""];
32->30 [style = bold, label=""];
22->23 [style = bold, label=""];
9->16 [style = bold, label=""];
23->14 [style = bold, label=""];
3->9 [style = bold, label=""];
14->26 [style = bold, label=""];
6->27 [style = bold, label=""];
26->2 [style = bold, label=""];
25->20 [style = bold, label=""];
19->32 [style = bold, label=""];
7->28 [style = bold, label=""];
43->35 [style = bold, label=""];
30->4 [style = bold, label=""];
37->38 [style = bold, label=""];
18->5 [style = bold, label=""];
0->22 [style = bold, label=""];
21->32 [style = bold, label=""];
35->45 [style = bold, label=""];
8->21 [style = bold, label=""];
3->13 [style = solid, label="refreshTask"];
17->13 [style = bold, label=""];
2->7 [style = bold, label=""];
13->6 [style = bold, label=""];
24->1 [style = bold, label=""];
29->24 [style = bold, label=""];
39->36 [style = bold, label=""];
31->8 [style = bold, label=""];
16->12 [style = bold, label=""];
41->44 [style = bold, label=""];
15->29 [style = bold, label=""];
24->38 [style = dashed, label="0"];
38->43 [style = bold, label=""];
11->25 [style = bold, label=""];
40->37 [style = bold, label=""];
42->46 [style = solid, label="settings"];
10->11 [style = bold, label=""];
}
