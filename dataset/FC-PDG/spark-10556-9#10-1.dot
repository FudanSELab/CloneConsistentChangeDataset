digraph {
12 [style = filled, label = "final Map<ByteBuffer,byte((> expected = new HashMap<ByteBuffer,byte((>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(loc.isDefined())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "randomizedTestWithRecordsLargerThanPageSize['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "final long pageSizeBytes = 128@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertTrue(arrayEquals(value,loc.getValueAddress(),value.length))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "!expected.containsKey(ByteBuffer.wrap(key))@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager,64,pageSizeBytes)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final int size = 65536@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final byte(( key = JavaUtils.bufferToArray(entry.getKey())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertTrue(arrayEquals(value,loc.getValueBase(),loc.getValueOffset(),value.length))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "{map.free()}@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final BytesToBytesMap.Location loc = map.lookup(key,Platform.BYTE_ARRAY_OFFSET,key.length)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "{map.free()}@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "randomizedStressTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertTrue(arrayEquals(value,loc.getValueBase(),loc.getValueOffset(),loc.getValueLength()))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertFalse(loc.isDefined())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final byte(( key = getRandomByteArray(rand.nextInt(128))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "i++@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final byte(( value = entry.getValue()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expected.put(ByteBuffer.wrap(key),value)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "!expected.containsKey(ByteBuffer.wrap(key))@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertTrue(arrayEquals(key,loc.getKeyBase(),loc.getKeyOffset(),key.length))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertTrue(arrayEquals(key,loc.getKeyAddress(),key.length))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "i < 1000@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "final byte(( value = getRandomByteArray(rand.nextInt(128))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final Map<ByteBuffer,byte((> expected = new HashMap<ByteBuffer,byte((>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(key.length,loc.getKeyLength())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(loc.putNewKey(key,Platform.BYTE_ARRAY_OFFSET,key.length,value,Platform.BYTE_ARRAY_OFFSET,value.length))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "randomizedStressTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "int i = 0@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i++@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(value.length,loc.getValueLength())@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(arrayEquals(key,loc.getKeyBase(),loc.getKeyOffset(),loc.getKeyLength()))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final BytesToBytesMap.Location loc = map.lookup(key,Platform.BYTE_ARRAY_OFFSET,key.length)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final byte(( value = getRandomByteArray(rand.nextInt(512) + 1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(arrayEquals(value,loc.getValueAddress(),loc.getValueLength()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertTrue(arrayEquals(key,loc.getKeyAddress(),loc.getKeyLength()))@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertTrue(loc.isDefined())@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final byte(( key = JavaUtils.bufferToArray(entry.getKey())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29->15 [style = bold, label=""];
39->36 [style = dotted, label="true"];
33->9 [style = solid, label="key"];
15->2 [style = solid, label="size"];
5->20 [style = bold, label=""];
21->18 [style = dotted, label="true"];
33->3 [style = solid, label="key"];
24->25 [style = solid, label="key"];
20->0 [style = bold, label=""];
2->39 [style = solid, label="i"];
10->3 [style = dotted, label="true"];
17->3 [style = solid, label="value"];
9->7 [style = bold, label=""];
25->6 [style = bold, label=""];
10->30 [style = dotted, label="true"];
3->4 [style = bold, label=""];
4->2 [style = solid, label="i"];
7->14 [style = bold, label=""];
12->2 [style = bold, label=""];
36->9 [style = solid, label="value"];
0->25 [style = bold, label=""];
21->7 [style = dotted, label="true"];
21->37 [style = dotted, label="true"];
10->1 [style = dotted, label="true"];
2->24 [style = bold, label=""];
17->36 [style = dashed, label="0"];
33->7 [style = solid, label="key"];
2->10 [style = dotted, label="true"];
17->21 [style = solid, label="value"];
6->32 [style = bold, label=""];
10->18 [style = dotted, label="true"];
21->19 [style = bold, label=""];
28->30 [style = bold, label=""];
11->4 [style = solid, label="i"];
2->19 [style = solid, label="i"];
12->11 [style = bold, label=""];
14->22 [style = bold, label=""];
19->39 [style = bold, label=""];
36->37 [style = solid, label="value"];
21->22 [style = dotted, label="true"];
4->2 [style = bold, label=""];
10->21 [style = bold, label=""];
18->28 [style = bold, label=""];
24->5 [style = bold, label=""];
19->39 [style = solid, label="i"];
2->39 [style = bold, label=""];
13->28 [style = dashed, label="0"];
26->27 [style = bold, label=""];
21->9 [style = bold, label=""];
21->9 [style = dotted, label="true"];
15->12 [style = solid, label="size"];
6->27 [style = dashed, label="0"];
24->26 [style = solid, label="key"];
33->36 [style = bold, label=""];
2->39 [style = dashed, label="0"];
19->14 [style = solid, label="key"];
21->13 [style = dotted, label="true"];
19->21 [style = solid, label="key"];
35->34 [style = bold, label=""];
38->35 [style = bold, label=""];
32->31 [style = bold, label=""];
2->19 [style = dotted, label="true"];
17->10 [style = bold, label=""];
3->30 [style = dashed, label="0"];
8->15 [style = bold, label=""];
3->37 [style = bold, label=""];
10->28 [style = dotted, label="true"];
39->5 [style = bold, label=""];
25->26 [style = dashed, label="0"];
6->23 [style = bold, label=""];
6->24 [style = bold, label=""];
19->17 [style = bold, label=""];
10->9 [style = dotted, label="true"];
24->20 [style = solid, label="key"];
17->14 [style = solid, label="value"];
39->33 [style = bold, label=""];
5->0 [style = solid, label="key"];
15->35 [style = dashed, label="0"];
10->13 [style = dotted, label="true"];
2->4 [style = dotted, label="true"];
11->2 [style = solid, label="i"];
21->3 [style = dotted, label="true"];
27->24 [style = bold, label=""];
36->22 [style = solid, label="value"];
22->1 [style = bold, label=""];
17->30 [style = solid, label="value"];
39->21 [style = dotted, label="true"];
32->5 [style = bold, label=""];
2->19 [style = bold, label=""];
0->26 [style = bold, label=""];
21->1 [style = dotted, label="true"];
39->19 [style = dotted, label="true"];
2->17 [style = dotted, label="true"];
19->13 [style = solid, label="key"];
19->28 [style = solid, label="key"];
5->6 [style = solid, label="value"];
1->18 [style = bold, label=""];
19->9 [style = solid, label="key"];
34->12 [style = bold, label=""];
15->16 [style = bold, label=""];
11->2 [style = bold, label=""];
10->14 [style = dotted, label="true"];
36->21 [style = bold, label=""];
13->3 [style = bold, label=""];
35->34 [style = solid, label="pageSizeBytes"];
30->4 [style = bold, label=""];
21->14 [style = dotted, label="true"];
18->13 [style = bold, label=""];
10->4 [style = bold, label=""];
20->32 [style = solid, label="value"];
10->22 [style = dotted, label="true"];
27->23 [style = bold, label=""];
37->19 [style = bold, label=""];
33->22 [style = solid, label="key"];
5->27 [style = solid, label="value"];
19->33 [style = dashed, label="0"];
10->21 [style = dotted, label="true"];
16->12 [style = bold, label=""];
39->33 [style = dotted, label="true"];
10->7 [style = dotted, label="true"];
5->6 [style = solid, label="key"];
}
