digraph {
10 [style = filled, label = "testBufferedTableSink['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(provider,instanceOf())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final SinkFunction<RowData> sinkFunction = sinkFunctionProvider.createSinkFunction()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(sinkFunction,instanceOf())@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testTableSink['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final DynamicTableSink actualSink = createTableSink(SINK_SCHEMA,getModifiedOptions(getFullSinkOptions(),null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider)provider@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(provider,instanceOf())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testBufferedTableSink['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final DynamicTableSink expectedSink = createExpectedSink(SINK_SCHEMA.toPhysicalRowDataType(),keyEncodingFormat,valueEncodingFormat,SINK_KEY_FIELDS,SINK_VALUE_FIELDS,null,SINK_TOPIC,UPSERT_KAFKA_SINK_PROPERTIES,SinkBufferFlushMode.DISABLED,null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final DynamicTableSink expectedSink = createExpectedSink(SINK_SCHEMA.toPhysicalRowDataType(),keyEncodingFormat,valueEncodingFormat,SINK_KEY_FIELDS,SINK_VALUE_FIELDS,null,SINK_TOPIC,UPSERT_KAFKA_SINK_PROPERTIES,new SinkBufferFlushMode(100,1000L),null)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "DynamicTableSink.SinkRuntimeProvider provider = actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final SinkFunction<RowData> sinkFunction = sinkFunctionProvider.createSinkFunction()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink)actualSink@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(expectedSink,actualSink)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(sinkFunction,instanceOf())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final DynamicTableSink expectedSink = createExpectedSink(SINK_SCHEMA.toPhysicalRowDataType(),keyEncodingFormat,valueEncodingFormat,SINK_KEY_FIELDS,SINK_VALUE_FIELDS,null,SINK_TOPIC,UPSERT_KAFKA_SINK_PROPERTIES,DeliveryGuarantee.AT_LEAST_ONCE,new SinkBufferFlushMode(100,1000L),null)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider)provider@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final DynamicTableSink actualSink = createTableSink(SINK_SCHEMA,getFullSinkOptions())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->4 [style = solid, label="expectedSink"];
15->13 [style = bold, label=""];
0->6 [style = bold, label=""];
15->17 [style = solid, label="actualSink"];
12->17 [style = bold, label=""];
16->7 [style = bold, label=""];
3->11 [style = bold, label=""];
13->17 [style = solid, label="expectedSink"];
10->3 [style = bold, label=""];
7->4 [style = bold, label=""];
4->5 [style = solid, label="sinkFunction"];
5->0 [style = solid, label="provider"];
8->7 [style = bold, label=""];
6->1 [style = bold, label=""];
18->16 [style = solid, label="provider"];
2->5 [style = dashed, label="0"];
18->7 [style = solid, label="provider"];
13->12 [style = bold, label=""];
1->2 [style = solid, label="sinkFunction"];
5->6 [style = solid, label="provider"];
5->0 [style = bold, label=""];
3->8 [style = bold, label=""];
11->7 [style = bold, label=""];
3->15 [style = dashed, label="0"];
9->3 [style = bold, label=""];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
15->12 [style = solid, label="actualSink"];
8->11 [style = dashed, label="0"];
4->5 [style = bold, label=""];
3->7 [style = solid, label="actualSink"];
11->4 [style = solid, label="expectedSink"];
17->18 [style = bold, label=""];
3->4 [style = solid, label="actualSink"];
18->16 [style = bold, label=""];
}
