digraph {
3 [style = filled, label = "Random rand = new Random()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "int size = 65536@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "byte(( paddedBytes = new byte((((@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "randomizedStressTestBytes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "rand.nextBytes(bytes)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytesBlock(mb),HiveHasher.hashUnsafeBytesBlock(mb))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "int size = 64000@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "System.arraycopy(strBytes,0,paddedBytes,0,strBytes.length)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "byte(( bytes = new byte((((@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "randomizedStressTestBytes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "int byteArrSize = rand.nextInt(100) * 8@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "byte(( strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "randomizedStressTestPaddedStrings['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(paddedBytes)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "int byteArrSize = 8@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(bytes)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytesBlock(mb),HiveHasher.hashUnsafeBytesBlock(mb))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytesBlock(mb))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "i++@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Set<Integer> hashcodes = new HashSet<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@16@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i < size@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int i = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6->1 [style = solid, label="i"];
5->3 [style = bold, label=""];
19->22 [style = solid, label="paddedBytes"];
6->24 [style = dotted, label="true"];
12->2 [style = solid, label="mb"];
19->23 [style = solid, label="paddedBytes"];
6->4 [style = solid, label="i"];
1->8 [style = bold, label=""];
1->10 [style = dotted, label="true"];
1->6 [style = solid, label="i"];
4->25 [style = bold, label=""];
5->15 [style = solid, label="size"];
1->17 [style = dotted, label="true"];
20->9 [style = bold, label=""];
24->0 [style = bold, label=""];
10->19 [style = dashed, label="0"];
1->15 [style = bold, label=""];
18->7 [style = solid, label="size"];
1->11 [style = dotted, label="true"];
6->1 [style = dotted, label="true"];
4->1 [style = solid, label="i"];
6->23 [style = dotted, label="true"];
12->0 [style = solid, label="mb"];
23->0 [style = solid, label="mb"];
1->4 [style = dotted, label="true"];
16->17 [style = bold, label=""];
6->22 [style = dotted, label="true"];
11->17 [style = solid, label="bytes"];
11->10 [style = solid, label="bytes"];
9->1 [style = solid, label="i"];
2->17 [style = dashed, label="0"];
8->17 [style = solid, label="byteArrSize"];
1->7 [style = bold, label=""];
22->23 [style = bold, label=""];
6->19 [style = dotted, label="true"];
21->18 [style = bold, label=""];
5->18 [style = dashed, label="0"];
9->6 [style = bold, label=""];
11->12 [style = solid, label="bytes"];
25->22 [style = solid, label="strBytes"];
3->9 [style = bold, label=""];
6->1 [style = bold, label=""];
6->4 [style = bold, label=""];
18->20 [style = bold, label=""];
12->2 [style = bold, label=""];
23->24 [style = bold, label=""];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
10->16 [style = bold, label=""];
9->6 [style = solid, label="i"];
6->4 [style = dotted, label="true"];
0->4 [style = bold, label=""];
11->10 [style = bold, label=""];
10->12 [style = bold, label=""];
0->1 [style = bold, label=""];
23->24 [style = solid, label="mb"];
1->12 [style = dotted, label="true"];
11->16 [style = solid, label="bytes"];
6->25 [style = dotted, label="true"];
25->19 [style = bold, label=""];
1->8 [style = dotted, label="true"];
11->25 [style = dashed, label="0"];
13->5 [style = bold, label=""];
5->1 [style = solid, label="size"];
5->7 [style = solid, label="size"];
4->1 [style = bold, label=""];
1->16 [style = dotted, label="true"];
1->0 [style = dotted, label="true"];
6->0 [style = dotted, label="true"];
8->4 [style = dashed, label="0"];
6->7 [style = bold, label=""];
8->16 [style = solid, label="byteArrSize"];
1->2 [style = dotted, label="true"];
8->11 [style = bold, label=""];
19->22 [style = bold, label=""];
17->4 [style = bold, label=""];
18->6 [style = solid, label="size"];
14->5 [style = bold, label=""];
}
