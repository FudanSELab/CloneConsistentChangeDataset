digraph {
6 [style = filled, label = "Assert.assertEquals(\"Table order ID should match\",0,table.sortOrder().orderId())@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testReplaceWithIncompatibleSchemaUpdate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "PartitionSpec v2Expected = PartitionSpec.builderFor(table.schema()).withSpecId(1).build()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Version should be 1\",1L,(long)version())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"Schema should match previous schema\",schema.asStruct(),table.schema().asStruct())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Schema newSchema = new Schema(required(4,\"id\",Types.IntegerType.get()),required(5,\"data\",Types.StringType.get()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertNull(\"Table should not have a current snapshot\",table.currentSnapshot())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testReplaceTransaction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Assert.assertTrue(\"Table should be unsorted\",table.sortOrder().isUnsorted())@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Table should have 1 order\",1,table.sortOrders().size())@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "table.refresh()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Transaction replace = TestTables.beginReplace(tableDir,\"test\",newSchema,unpartitioned())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Snapshot start = table.currentSnapshot()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"Table order ID should match\",0,table.sortOrder().orderId())@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Schema schema = table.schema()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "V2Assert.assertEquals(\"Table should have an unpartitioned spec\",v2Expected,table.spec())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Version should be 2\",2L,(long)version())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(\"Table should have 1 order\",1,table.sortOrders().size())@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Schema newSchema = new Schema(required(4,\"obj_id\",Types.IntegerType.get()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testReplaceTransaction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "V1Assert.assertEquals(\"Table should have a spec with one void field\",v1Expected,table.spec())@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "validateSnapshot(start,table.currentSnapshot(),FILE_A)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(\"Schema should use new schema, not compatible with previous\",new Schema(required(3,\"obj_id\",Types.IntegerType.get())).asStruct(),table.schema().asStruct())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "table.newAppend().appendFile(FILE_A).commit()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "replace.commitTransaction()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(\"Table should be unsorted\",table.sortOrder().isUnsorted())@@@21@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "PartitionSpec v1Expected = PartitionSpec.builderFor(table.schema()).alwaysNull(\"data\",\"data_bucket\").withSpecId(1).build()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(\"Partition spec should have no fields\",0,table.spec().fields().size())@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->3 [style = bold, label=""];
3->10 [style = bold, label=""];
4->13 [style = solid, label="newSchema"];
4->7 [style = bold, label=""];
11->21 [style = bold, label=""];
27->25 [style = bold, label=""];
10->6 [style = bold, label=""];
11->26 [style = dashed, label="0"];
23->24 [style = bold, label=""];
19->23 [style = solid, label="v1Expected"];
7->9 [style = bold, label=""];
25->7 [style = bold, label=""];
12->4 [style = bold, label=""];
24->17 [style = bold, label=""];
16->0 [style = bold, label=""];
21->20 [style = solid, label="v2Expected"];
19->23 [style = bold, label=""];
4->25 [style = dashed, label="0"];
20->19 [style = bold, label=""];
2->9 [style = bold, label=""];
0->15 [style = bold, label=""];
21->20 [style = bold, label=""];
15->11 [style = bold, label=""];
7->8 [style = solid, label="start"];
15->26 [style = bold, label=""];
14->8 [style = bold, label=""];
8->13 [style = bold, label=""];
9->14 [style = bold, label=""];
17->22 [style = bold, label=""];
6->1 [style = bold, label=""];
5->16 [style = bold, label=""];
13->5 [style = bold, label=""];
25->13 [style = solid, label="newSchema"];
18->4 [style = bold, label=""];
7->2 [style = bold, label=""];
}
