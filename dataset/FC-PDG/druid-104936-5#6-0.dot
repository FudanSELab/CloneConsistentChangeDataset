digraph {
28 [style = filled, label = "assertOutputType(\"case_searched(y==1,1,y==2,2.0,0)\",inspector,ExprType.DOUBLE)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1,z==2.0,2,null)\",inspector,ExprType.LONG)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertOutputType(\"nvl(z, 2.0)\",inputTypes,ExprType.DOUBLE)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertOutputType(\"case_searched(y==1,1,y==2,2.0,0)\",inputTypes,ExprType.DOUBLE)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertOutputType(\"if(y,2,3.0)\",inputTypes,ExprType.DOUBLE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertOutputType(\"if(y, 'foo', 'bar')\",inputTypes,ExprType.STRING)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertOutputType(\"nvl(x, 'foo')\",inputTypes,ExprType.STRING)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1.0,z==2.0,2.0,0.0)\",inspector,ExprType.DOUBLE)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertOutputType(\"case_searched(y==1,1,y==2,2,0)\",inputTypes,ExprType.LONG)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "assertOutputType(\"case_searched(x=='baz','is baz',x=='foo','is foo','is other')\",inspector,ExprType.STRING)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertOutputType(\"if(y, 'foo', 'bar')\",inspector,ExprType.STRING)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertOutputType(\"case_simple(z,2.0,2.0,3.0,3.0,null)\",inspector,ExprType.DOUBLE)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertOutputType(\"isnull(z)\",inputTypes,ExprType.LONG)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertOutputType(\"notnull(x)\",inspector,ExprType.LONG)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "assertOutputType(\"isnull(x)\",inspector,ExprType.LONG)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertOutputType(\"if(y,2,3)\",inputTypes,ExprType.LONG)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "assertOutputType(\"nvl(y, 1)\",inspector,ExprType.LONG)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "assertOutputType(\"greatest(y, 0)\",inputTypes,ExprType.LONG)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertOutputType(\"if(y,2,3.0)\",inspector,ExprType.DOUBLE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertOutputType(\"case_searched(y==1,1,y==2,2,0)\",inspector,ExprType.LONG)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertOutputType(\"nvl(y, 1.1)\",inputTypes,ExprType.DOUBLE)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "assertOutputType(\"least(y, 0)\",inputTypes,ExprType.LONG)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertOutputType(\"least('B', x, 'A')\",inputTypes,ExprType.STRING)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertOutputType(\"case_simple(y,2,2,3,3.0,4)\",inputTypes,ExprType.DOUBLE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertOutputType(\"case_simple(y,2,2,3,3,4)\",inputTypes,ExprType.LONG)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertOutputType(\"case_simple(z,2.0,2.0,3.0,3.0,4.0)\",inputTypes,ExprType.DOUBLE)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertOutputType(\"notnull(z)\",inputTypes,ExprType.LONG)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "assertOutputType(\"greatest(34.0, z, 5.0, 767.0)\",inputTypes,ExprType.DOUBLE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "testReduceFunctions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertOutputType(\"if(y,2,3)\",inspector,ExprType.LONG)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "assertOutputType(\"notnull(z)\",inspector,ExprType.LONG)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1.0,z==2.0,2.0,null)\",inspector,ExprType.DOUBLE)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertOutputType(\"isnull(y)\",inputTypes,ExprType.LONG)@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "testConditionalFunctions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1.0,z==2.0,2.0,0.0)\",inputTypes,ExprType.DOUBLE)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "assertOutputType(\"isnull(y)\",inspector,ExprType.LONG)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertOutputType(\"case_searched(x=='baz','is baz',x=='foo','is foo','is other')\",inputTypes,ExprType.STRING)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertOutputType(\"notnull(y)\",inputTypes,ExprType.LONG)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1,z==2.0,2,null)\",inputTypes,ExprType.LONG)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertOutputType(\"case_simple(z,2.0,2.0,3.0,3.0,4.0)\",inspector,ExprType.DOUBLE)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "assertOutputType(\"nvl(z, 2.0)\",inspector,ExprType.DOUBLE)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "testConditionalFunctions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertOutputType(\"case_simple(x,'baz','is baz','foo','is foo','is other')\",inputTypes,ExprType.STRING)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "assertOutputType(\"nvl(x, 'foo')\",inspector,ExprType.STRING)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1.0,z==2.0,2.0,null)\",inputTypes,ExprType.DOUBLE)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
57 [style = filled, label = "assertOutputType(\"greatest('B', x, 'A')\",inputTypes,ExprType.STRING)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertOutputType(\"notnull(x)\",inputTypes,ExprType.LONG)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertOutputType(\"nvl(y, 1)\",inputTypes,ExprType.LONG)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "assertOutputType(\"case_simple(y,2,2,3,3,4)\",inspector,ExprType.LONG)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "assertOutputType(\"least(34.0, z, 5.0, 767.0)\",inputTypes,ExprType.DOUBLE)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertOutputType(\"case_simple(x,'baz','is baz','foo','is foo','is other')\",inspector,ExprType.STRING)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertOutputType(\"case_simple(z,2.0,2.0,3.0,3.0,null)\",inputTypes,ExprType.DOUBLE)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "assertOutputType(\"case_simple(y,2,2,3,3.0,4)\",inspector,ExprType.DOUBLE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "assertOutputType(\"nvl(y, 1.1)\",inspector,ExprType.DOUBLE)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertOutputType(\"isnull(x)\",inputTypes,ExprType.LONG)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "assertOutputType(\"isnull(z)\",inspector,ExprType.LONG)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertOutputType(\"nvl(y, 2.0)\",inputTypes,ExprType.DOUBLE)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "assertOutputType(\"notnull(y)\",inspector,ExprType.LONG)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "assertOutputType(\"nvl(y, 2.0)\",inspector,ExprType.DOUBLE)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20->40 [style = dashed, label="0"];
15->25 [style = bold, label=""];
21->15 [style = bold, label=""];
7->49 [style = dashed, label="0"];
26->40 [style = bold, label=""];
48->35 [style = bold, label=""];
45->30 [style = bold, label=""];
1->45 [style = dashed, label="0"];
13->1 [style = bold, label=""];
1->23 [style = bold, label=""];
5->46 [style = dashed, label="0"];
35->37 [style = bold, label=""];
30->46 [style = bold, label=""];
29->44 [style = bold, label=""];
40->31 [style = bold, label=""];
21->29 [style = dashed, label="0"];
2->16 [style = bold, label=""];
2->27 [style = dashed, label="0"];
39->45 [style = bold, label=""];
33->27 [style = bold, label=""];
46->41 [style = bold, label=""];
24->32 [style = dashed, label="0"];
16->34 [style = dashed, label="0"];
9->48 [style = dashed, label="0"];
19->13 [style = bold, label=""];
17->2 [style = bold, label=""];
4->50 [style = dashed, label="0"];
12->47 [style = dashed, label="0"];
43->33 [style = bold, label=""];
14->18 [style = bold, label=""];
53->56 [style = bold, label=""];
21->56 [style = dashed, label="0"];
0->35 [style = dashed, label="0"];
22->14 [style = bold, label=""];
24->3 [style = bold, label=""];
22->31 [style = dashed, label="0"];
11->51 [style = dashed, label="0"];
6->17 [style = bold, label=""];
34->29 [style = bold, label=""];
18->24 [style = bold, label=""];
3->28 [style = dashed, label="0"];
23->5 [style = bold, label=""];
47->42 [style = bold, label=""];
25->26 [style = dashed, label="0"];
42->39 [style = bold, label=""];
58->57 [style = bold, label=""];
17->33 [style = dashed, label="0"];
31->38 [style = bold, label=""];
8->41 [style = dashed, label="0"];
16->53 [style = dashed, label="0"];
3->9 [style = bold, label=""];
13->39 [style = dashed, label="0"];
25->20 [style = bold, label=""];
27->34 [style = bold, label=""];
18->36 [style = dashed, label="0"];
14->38 [style = dashed, label="0"];
19->42 [style = dashed, label="0"];
5->8 [style = bold, label=""];
9->0 [style = bold, label=""];
52->53 [style = bold, label=""];
25->54 [style = dashed, label="0"];
7->12 [style = bold, label=""];
36->32 [style = bold, label=""];
38->36 [style = bold, label=""];
15->44 [style = dashed, label="0"];
51->49 [style = bold, label=""];
2->52 [style = dashed, label="0"];
20->22 [style = bold, label=""];
49->47 [style = bold, label=""];
17->57 [style = dashed, label="0"];
57->52 [style = bold, label=""];
0->10 [style = bold, label=""];
15->55 [style = dashed, label="0"];
44->26 [style = bold, label=""];
16->21 [style = bold, label=""];
50->51 [style = bold, label=""];
23->30 [style = dashed, label="0"];
10->4 [style = bold, label=""];
28->48 [style = bold, label=""];
10->37 [style = dashed, label="0"];
55->54 [style = bold, label=""];
12->19 [style = bold, label=""];
4->11 [style = bold, label=""];
32->28 [style = bold, label=""];
11->7 [style = bold, label=""];
37->50 [style = bold, label=""];
56->55 [style = bold, label=""];
}
