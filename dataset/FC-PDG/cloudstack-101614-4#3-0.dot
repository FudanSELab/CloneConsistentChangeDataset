digraph {
5 [style = filled, label = "NetworkOffering offering@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return false@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final NetworkType networkType@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final PhysicalNetwork physicalNetwork@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "networkType == NetworkType.Advanced && isMyTrafficType(offering.getTrafficType()) && (offering.getGuestType() == Network.GuestType.Isolated || offering.getGuestType() == Network.GuestType.L2) && isMyIsolationMethod(physicalNetwork)@@@3@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "networkType == NetworkType.Advanced && isMyTrafficType(offering.getTrafficType()) && (offering.getGuestType() == Network.GuestType.Isolated || offering.getGuestType() == GuestType.L2) && isMyIsolationMethod(physicalNetwork) && !offering.isSystemOnly()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "NetworkOffering offering@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "s_logger.trace(\"We only take care of Guest networks of type \" + GuestType.Isolated + \" or \" + GuestType.L2 + \" in zone of type \" + NetworkType.Advanced)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "final PhysicalNetwork physicalNetwork@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "networkType == NetworkType.Advanced && isMyTrafficType(offering.getTrafficType()) && offering.getGuestType() == Network.GuestType.Isolated && isMyIsolationMethod(physicalNetwork)@@@3@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "canHandle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return true@@@4@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "canHandle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final NetworkType networkType@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final NetworkType networkType@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "s_logger.trace(\"We only take care of Guest networks of type \" + GuestType.Isolated + \" in zone of type \" + NetworkType.Advanced)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "canHandle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10->8 [style = dotted, label="true"];
12->11 [style = dotted, label="false"];
13->16 [style = dotted, label="true"];
0->6 [style = bold, label=""];
2->1 [style = bold, label=""];
11->6 [style = bold, label=""];
12->6 [style = dotted, label="false"];
12->11 [style = bold, label=""];
12->1 [style = dotted, label="true"];
16->15 [style = solid, label="physicalNetwork"];
5->2 [style = solid, label="physicalNetwork"];
15->6 [style = dotted, label="false"];
13->5 [style = dotted, label="true"];
0->11 [style = dashed, label="0"];
2->0 [style = dotted, label="false"];
10->9 [style = dotted, label="true"];
10->5 [style = dotted, label="true"];
12->1 [style = bold, label=""];
7->5 [style = dotted, label="true"];
2->15 [style = dashed, label="0"];
2->12 [style = dashed, label="0"];
2->0 [style = bold, label=""];
15->0 [style = dotted, label="false"];
3->2 [style = solid, label="networkType"];
7->3 [style = dotted, label="true"];
2->1 [style = dotted, label="true"];
7->2 [style = bold, label=""];
15->1 [style = dotted, label="true"];
10->12 [style = bold, label=""];
15->1 [style = bold, label=""];
15->0 [style = bold, label=""];
7->4 [style = dotted, label="true"];
8->12 [style = solid, label="networkType"];
2->6 [style = dotted, label="false"];
13->15 [style = bold, label=""];
13->14 [style = dotted, label="true"];
14->15 [style = solid, label="networkType"];
9->12 [style = solid, label="physicalNetwork"];
}
