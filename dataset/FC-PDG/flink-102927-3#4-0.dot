digraph {
21 [style = filled, label = "check(sequence(10(,inputGate.pollNext().get(),PAGE_SIZE)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertEquals(1,toNotify.getAbortedCheckpointCounter())@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),empty())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "check(sequence(11(,inputGate.pollNext().get(),PAGE_SIZE)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "check(sequence(23(,inputGate.pollNext().get(),PAGE_SIZE)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "check(sequence(2(,inputGate.pollNext().get(),PAGE_SIZE)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "long startTs@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),containsInAnyOrder(0,1))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "check(sequence(5(,inputGate.pollNext().get(),PAGE_SIZE)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "inputGate = createCheckpointedInputGate(3,sequence,toNotify)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "check(sequence(21(,inputGate.pollNext().get(),PAGE_SIZE)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testMultiChannelJumpingOverCheckpoint['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "check(sequence(8(,inputGate.pollNext().get(),PAGE_SIZE)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "check(sequence(4(,inputGate.pollNext().get(),PAGE_SIZE)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),empty())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "inputGate = createCheckpointedInputGate(3,sequence,handler,false)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "check(sequence(8(,inputGate.pollNext().get(),PAGE_SIZE)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "ValidatingCheckpointHandler toNotify = new ValidatingCheckpointHandler()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "inputGate = createCheckpointedInputGate(3,sequence,handler)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "check(sequence(19(,inputGate.pollNext().get(),PAGE_SIZE)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "testIgnoreCancelBarrierIfCheckpointSubsumed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),containsInAnyOrder(2))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "check(sequence(13(,inputGate.pollNext().get(),PAGE_SIZE)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "check(sequence(6(,inputGate.pollNext().get(),PAGE_SIZE)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(4L,inputGate.getLatestCheckpointId())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "check(sequence(24(,inputGate.pollNext().get(),PAGE_SIZE)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "check(sequence(14(,inputGate.pollNext().get(),PAGE_SIZE)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "validateAlignmentTime(startTs,inputGate)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "check(sequence(20(,inputGate.pollNext().get(),PAGE_SIZE)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(1L,inputGate.getLatestCheckpointId())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "check(sequence(1(,inputGate.pollNext().get(),PAGE_SIZE)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "check(sequence(10(,inputGate.pollNext().get(),PAGE_SIZE)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "check(sequence(14(,inputGate.pollNext().get(),PAGE_SIZE)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testMultiChannelJumpingOverCheckpoint['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "check(sequence(7(,inputGate.pollNext().get(),0)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "check(sequence(18(,inputGate.pollNext().get(),PAGE_SIZE)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "startTs = System.nanoTime()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "handler.setNextExpectedCheckpointId(1L)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(3,handler.getAbortedCheckpointCounter())@@@45@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "toNotify.setNextExpectedCheckpointId(5)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "check(sequence(3(,inputGate.pollNext().get(),PAGE_SIZE)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(1,toNotify.getTriggeredCheckpointCounter())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "check(sequence(9(,inputGate.pollNext().get(),PAGE_SIZE)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "check(sequence(12(,inputGate.pollNext().get(),PAGE_SIZE)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "check(sequence(0(,inputGate.pollNext().get(),PAGE_SIZE)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "check(sequence(17(,inputGate.pollNext().get(),PAGE_SIZE)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "check(sequence(16(,inputGate.pollNext().get(),PAGE_SIZE)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "check(sequence(22(,inputGate.pollNext().get(),PAGE_SIZE)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(1,handler.getTriggeredCheckpointCounter())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "check(sequence(4(,inputGate.pollNext().get(),PAGE_SIZE)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "check(sequence(7(,inputGate.pollNext().get(),PAGE_SIZE)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),containsInAnyOrder(1))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),containsInAnyOrder(2))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertEquals(CheckpointFailureReason.CHECKPOINT_DECLINED_SUBSUMED,toNotify.getCheckpointFailureReason())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertEquals(3,toNotify.getLastCanceledCheckpointId())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "BufferOrEvent(( sequence = {createBuffer(2),createBarrier(3,1),createBarrier(3,0),createBuffer(2),createBarrier(5,2),createBuffer(1),createBuffer(0),createCancellationBarrier(3,0),createBuffer(0),createBuffer(1),createBarrier(5,0),createBarrier(5,1),createBuffer(0),createBuffer(1),createBuffer(2)}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),containsInAnyOrder(0,2))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "check(sequence(13(,inputGate.pollNext().get(),PAGE_SIZE)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52->44 [style = bold, label=""];
20->17 [style = solid, label="sequence"];
20->34 [style = solid, label="sequence"];
20->22 [style = solid, label="sequence"];
20->57 [style = bold, label=""];
56->27 [style = bold, label=""];
55->51 [style = bold, label=""];
14->28 [style = bold, label=""];
53->54 [style = bold, label=""];
35->43 [style = bold, label=""];
38->15 [style = bold, label=""];
41->20 [style = bold, label=""];
13->1 [style = bold, label=""];
57->52 [style = solid, label="toNotify"];
1->46 [style = bold, label=""];
3->34 [style = bold, label=""];
40->8 [style = bold, label=""];
20->15 [style = solid, label="sequence"];
58->39 [style = solid, label="startTs"];
49->10 [style = bold, label=""];
20->6 [style = solid, label="sequence"];
20->10 [style = solid, label="sequence"];
48->1 [style = bold, label=""];
20->36 [style = solid, label="sequence"];
2->31 [style = bold, label=""];
20->16 [style = solid, label="sequence"];
6->32 [style = bold, label=""];
9->40 [style = bold, label=""];
20->49 [style = solid, label="sequence"];
4->38 [style = bold, label=""];
36->9 [style = bold, label=""];
23->30 [style = bold, label=""];
24->0 [style = bold, label=""];
20->28 [style = solid, label="sequence"];
26->47 [style = bold, label=""];
20->3 [style = solid, label="sequence"];
39->45 [style = bold, label=""];
20->13 [style = solid, label="sequence"];
35->43 [style = solid, label="handler"];
44->17 [style = bold, label=""];
16->43 [style = dashed, label="0"];
20->39 [style = solid, label="sequence"];
20->40 [style = solid, label="sequence"];
20->19 [style = solid, label="sequence"];
43->12 [style = bold, label=""];
51->25 [style = bold, label=""];
22->11 [style = bold, label=""];
20->18 [style = solid, label="sequence"];
34->29 [style = bold, label=""];
54->40 [style = bold, label=""];
16->52 [style = dashed, label="0"];
30->33 [style = bold, label=""];
20->5 [style = solid, label="sequence"];
17->6 [style = bold, label=""];
21->27 [style = bold, label=""];
20->52 [style = solid, label="sequence"];
31->24 [style = bold, label=""];
52->39 [style = solid, label="inputGate"];
12->17 [style = bold, label=""];
25->18 [style = bold, label=""];
20->26 [style = solid, label="sequence"];
32->19 [style = bold, label=""];
35->16 [style = solid, label="handler"];
15->3 [style = bold, label=""];
20->1 [style = solid, label="sequence"];
33->26 [style = bold, label=""];
20->25 [style = solid, label="sequence"];
27->39 [style = bold, label=""];
20->56 [style = solid, label="sequence"];
58->48 [style = bold, label=""];
10->23 [style = bold, label=""];
20->2 [style = solid, label="sequence"];
1->25 [style = bold, label=""];
20->11 [style = solid, label="sequence"];
10->37 [style = bold, label=""];
46->55 [style = bold, label=""];
20->53 [style = solid, label="sequence"];
7->13 [style = bold, label=""];
20->54 [style = solid, label="sequence"];
8->56 [style = bold, label=""];
35->16 [style = bold, label=""];
20->9 [style = solid, label="sequence"];
20->31 [style = solid, label="sequence"];
26->5 [style = bold, label=""];
45->49 [style = bold, label=""];
20->23 [style = solid, label="sequence"];
42->20 [style = bold, label=""];
50->20 [style = bold, label=""];
20->27 [style = solid, label="sequence"];
23->26 [style = bold, label=""];
20->33 [style = solid, label="sequence"];
18->53 [style = bold, label=""];
18->36 [style = bold, label=""];
5->14 [style = bold, label=""];
37->23 [style = bold, label=""];
35->57 [style = dashed, label="0"];
11->2 [style = bold, label=""];
20->43 [style = solid, label="sequence"];
57->52 [style = bold, label=""];
19->58 [style = bold, label=""];
20->21 [style = solid, label="sequence"];
20->37 [style = solid, label="sequence"];
39->10 [style = bold, label=""];
8->21 [style = bold, label=""];
20->35 [style = bold, label=""];
29->22 [style = bold, label=""];
20->32 [style = solid, label="sequence"];
16->12 [style = bold, label=""];
19->7 [style = bold, label=""];
28->4 [style = bold, label=""];
}
