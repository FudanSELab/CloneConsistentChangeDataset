digraph {
20 [style = filled, label = "testChangeProperty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "Assert.assertTrue(client.getPartition(\"hivedb\",\"testTable\",Lists.newArrayList(\"2020-03-17-09\")) != null)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "gobblinMCEWriter.flush()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "gmce.setTopicPartitionOffsetsRange(ImmutableMap.builder().put(\"testTopic-1\",\"2000-3000\").build())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(genericGmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(45L))))@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(table.currentSnapshot().allManifests().size(),3)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "gmce.setOldFilePrefixes(null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "gobblinMCEWriter.flush()@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "gmce.setOperationType(OperationType.change_property)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(table.currentSnapshot().allManifests().size(),3)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testChangeProperty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"),\"40\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "gobblinMCEWriter.flush()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"),\"30\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "gmce.setNewFiles(Lists.newArrayList(DataFile.newBuilder().setFilePath(hourlyDataFile_2.toString()).setFileFormat(\"avro\").setFileMetrics(DataMetrics.newBuilder().setRecordCount(10L).build()).build()))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertTrue(client.getPartition(\"hivedb\",\"testTable\",Lists.newArrayList(\"2020-03-17-08\")) != null)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Table table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "gmce.setNewFiles(Lists.newArrayList(dailyFile))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "gobblinMCEWriter.flush()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(45L))))@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(30L))))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testHiveWriteAddFileGMCE['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"),\"0-4000\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "GenericRecord genericGmce = GenericData.get().deepCopy(gmce.getSchema(),gmce)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(10L))))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertTrue(client.tableExists(\"hivedb\",\"testTable\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(20L))))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "gmce.setTopicPartitionOffsetsRange(ImmutableMap.builder().put(\"testTopic-1\",\"2000-4000\").build())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DataFile dailyFile = DataFile.newBuilder().setFilePath(dailyDataFile.toString()).setFileFormat(\"avro\").setFileMetrics(DataMetrics.newBuilder().setRecordCount(0L).build()).build()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"),\"40\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"),\"0-3000\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"),\"45\")@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
28->30 [style = bold, label=""];
5->14 [style = bold, label=""];
29->27 [style = bold, label=""];
19->9 [style = bold, label=""];
27->25 [style = bold, label=""];
16->4 [style = bold, label=""];
18->19 [style = solid, label="genericGmce"];
17->21 [style = bold, label=""];
23->24 [style = bold, label=""];
6->11 [style = bold, label=""];
11->9 [style = bold, label=""];
20->8 [style = bold, label=""];
22->31 [style = bold, label=""];
3->18 [style = bold, label=""];
31->26 [style = bold, label=""];
2->17 [style = bold, label=""];
12->16 [style = bold, label=""];
3->6 [style = bold, label=""];
7->13 [style = bold, label=""];
10->12 [style = bold, label=""];
8->1 [style = bold, label=""];
25->28 [style = bold, label=""];
18->19 [style = bold, label=""];
32->22 [style = bold, label=""];
26->23 [style = bold, label=""];
0->5 [style = bold, label=""];
24->29 [style = bold, label=""];
14->10 [style = bold, label=""];
13->2 [style = bold, label=""];
15->8 [style = bold, label=""];
4->3 [style = bold, label=""];
12->16 [style = solid, label="dailyFile"];
1->0 [style = bold, label=""];
9->7 [style = bold, label=""];
}
