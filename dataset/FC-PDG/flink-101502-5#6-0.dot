digraph {
8 [style = filled, label = "IterativeStream<Integer> iter2 = source.iterate()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DataStream<Integer> source = env.fromElements(1,10).map(noOpIntMap)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testDifferingParallelism['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "iter1.closeWith(iter1.map(noOpIntMap).setParallelism(DEFAULT_PARALLELISM / 2))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "testDifferingParallelism['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "iter2.closeWith(iter1.map(noOpIntMap))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "iter1.closeWith(iter1.map(noOpIntMap).setParallelism(parallelism / 2))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testClosingFromOutOfLoop['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DataStream<Integer> source = env.fromElements(1,10).map(noOpIntMap)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "IterativeStream<Integer> iter1 = source.iterate()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->10 [style = bold, label=""];
7->0 [style = bold, label=""];
4->2 [style = bold, label=""];
2->7 [style = bold, label=""];
1->5 [style = dashed, label="0"];
9->2 [style = bold, label=""];
3->7 [style = dashed, label="0"];
0->1 [style = bold, label=""];
3->0 [style = bold, label=""];
2->3 [style = bold, label=""];
0->5 [style = bold, label=""];
6->2 [style = bold, label=""];
0->8 [style = bold, label=""];
}
