digraph {
10 [style = filled, label = "StandardDialScale s2 = (StandardDialScale)TestUtils.serialised(s1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "s1 = new StandardDialScale()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(s1.equals(s2))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(s1 != s2)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "StandardDialScale s2 = (StandardDialScale)s1.clone()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "s1.setMajorTickPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.WHITE))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "s1.setExtent(123.4)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(s1,s2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertTrue(s1.equals(s2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "s1.setExtent(123.4)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(s1.hasListener(l1))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "StandardDialScale s2 = (StandardDialScale)TestUtilities.serialised(s1)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "MyDialLayerChangeListener l1 = new MyDialLayerChangeListener()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "s1.setMajorTickStroke(new BasicStroke(2.0f))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(s1.getClass() == s2.getClass())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertFalse(s2.hasListener(l1))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "s1.addChangeListener(l1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "s2 = (StandardDialScale)s1.clone()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testCloning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertTrue(s1.getClass() == s2.getClass())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "s1 = new StandardDialScale()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(s1 != s2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "s2 = (StandardDialScale)TestUtils.serialised(s1)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "StandardDialScale s1 = new StandardDialScale()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->16 [style = solid, label="s1"];
13->25 [style = bold, label=""];
8->16 [style = dashed, label="0"];
24->19 [style = bold, label=""];
22->24 [style = solid, label="l1"];
15->17 [style = solid, label="s2"];
6->18 [style = bold, label=""];
19->20 [style = bold, label=""];
22->19 [style = solid, label="l1"];
22->20 [style = solid, label="l1"];
11->6 [style = bold, label=""];
14->22 [style = bold, label=""];
9->3 [style = solid, label="s1"];
9->10 [style = solid, label="s1"];
0->11 [style = bold, label=""];
25->14 [style = bold, label=""];
7->4 [style = bold, label=""];
2->9 [style = bold, label=""];
9->10 [style = bold, label=""];
5->18 [style = dashed, label="0"];
12->9 [style = bold, label=""];
15->16 [style = bold, label=""];
1->7 [style = bold, label=""];
18->13 [style = solid, label="s2"];
18->14 [style = solid, label="s2"];
4->0 [style = bold, label=""];
1->11 [style = solid, label="s1"];
8->1 [style = bold, label=""];
1->5 [style = solid, label="s1"];
10->8 [style = solid, label="s2"];
6->13 [style = dashed, label="0"];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
5->11 [style = dashed, label="0"];
15->16 [style = solid, label="s2"];
1->6 [style = solid, label="s1"];
9->15 [style = bold, label=""];
16->21 [style = bold, label=""];
3->8 [style = bold, label=""];
18->13 [style = bold, label=""];
5->6 [style = solid, label="s2"];
9->3 [style = bold, label=""];
11->6 [style = solid, label="s2"];
3->8 [style = solid, label="s2"];
3->15 [style = dashed, label="0"];
3->10 [style = dashed, label="0"];
4->13 [style = solid, label="s1"];
22->24 [style = bold, label=""];
23->9 [style = bold, label=""];
21->17 [style = bold, label=""];
17->4 [style = bold, label=""];
9->8 [style = solid, label="s1"];
0->5 [style = bold, label=""];
}
