digraph {
14 [style = filled, label = "testCoerceParsing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_shape\").field(\"coerce\",\"true\").endObject().endObject().endObject().endObject())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_shape\").field(\"coerce\",\"false\").endObject().endObject().endObject().endObject())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "boolean ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue().value()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "fieldMapper = defaultMapper.mappers().getMapper(\"location\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue().value()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_shape\").field(IGNORE_Z_VALUE.getPreferredName(),\"true\").endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(ignoreZValue,equalTo(false))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertFieldWarnings(\"tree\")@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(coerce,equalTo(false))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_shape\").field(IGNORE_Z_VALUE.getPreferredName(),\"false\").endObject().endObject().endObject().endObject())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(ignoreZValue,equalTo(true))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testIgnoreZValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testCoerceParsing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(coerce,equalTo(true))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->1 [style = solid, label="coerce"];
9->19 [style = bold, label=""];
6->9 [style = solid, label="fieldMapper"];
5->22 [style = dashed, label="0"];
0->19 [style = dashed, label="0"];
3->20 [style = dashed, label="0"];
19->20 [style = bold, label=""];
21->16 [style = bold, label=""];
10->17 [style = dashed, label="0"];
9->0 [style = bold, label=""];
0->3 [style = bold, label=""];
16->22 [style = bold, label=""];
17->4 [style = solid, label="mapping"];
11->6 [style = bold, label=""];
22->15 [style = bold, label=""];
3->13 [style = bold, label=""];
8->21 [style = bold, label=""];
15->6 [style = bold, label=""];
2->8 [style = bold, label=""];
4->2 [style = bold, label=""];
6->9 [style = bold, label=""];
17->4 [style = bold, label=""];
12->10 [style = bold, label=""];
7->21 [style = dashed, label="0"];
11->15 [style = dashed, label="0"];
5->11 [style = solid, label="mapping"];
19->20 [style = solid, label="ignoreZValue"];
0->3 [style = solid, label="coerce"];
2->8 [style = solid, label="fieldMapper"];
5->11 [style = bold, label=""];
10->4 [style = bold, label=""];
1->16 [style = dashed, label="0"];
8->7 [style = bold, label=""];
18->17 [style = bold, label=""];
21->16 [style = solid, label="ignoreZValue"];
7->1 [style = bold, label=""];
14->10 [style = bold, label=""];
10->4 [style = solid, label="mapping"];
1->5 [style = bold, label=""];
22->15 [style = solid, label="mapping"];
}
