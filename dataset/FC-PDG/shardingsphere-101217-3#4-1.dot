digraph {
14 [style = filled, label = "assertThat(actual.getColumnLength(null),equalTo(4))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(actual.getColumnLength(null),equalTo(8))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertNewInstance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertNewInstance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "PostgreSQLTimeBinaryProtocolValue actual = new PostgreSQLTimeBinaryProtocolValue()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "verify(payload).writeInt4(1)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "PostgreSQLInt4BinaryProtocolValue actual = new PostgreSQLInt4BinaryProtocolValue()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "when(payload.readInt4()).thenReturn(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(actual.read(payload,8),is(1L))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "verify(payload).writeInt8(timestamp.getTime())@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "actual.write(payload,timestamp)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(actual.read(payload),is(1L))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "when(payload.readInt8()).thenReturn(1L)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Timestamp timestamp = new Timestamp(System.currentTimeMillis())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(actual.read(payload),is(1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNewInstance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "actual.write(payload,1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(actual.getColumnLength(null),is(8))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
0->9 [style = bold, label=""];
5->12 [style = dashed, label="0"];
1->8 [style = bold, label=""];
2->3 [style = bold, label=""];
2->3 [style = solid, label="timestamp"];
0->16 [style = dashed, label="0"];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
12->13 [style = bold, label=""];
4->9 [style = dashed, label="0"];
5->2 [style = bold, label=""];
8->2 [style = bold, label=""];
3->7 [style = bold, label=""];
0->4 [style = bold, label=""];
1->11 [style = dashed, label="0"];
10->0 [style = bold, label=""];
5->8 [style = dashed, label="0"];
3->15 [style = dashed, label="0"];
16->14 [style = bold, label=""];
4->14 [style = dashed, label="0"];
4->1 [style = bold, label=""];
13->15 [style = bold, label=""];
9->1 [style = bold, label=""];
14->11 [style = bold, label=""];
17->16 [style = bold, label=""];
}
