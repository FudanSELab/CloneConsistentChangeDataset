digraph {
17 [style = filled, label = "List<String> secondLocations = Arrays.asList(\"secondimport\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "initialImported.put(new TestConfigDataLocation(\"a\"),new ConfigData(Arrays.asList(initialPropertySource)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(secondPropertySource)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "secondImported.put(new TestConfigDataLocation(\"b\"),new ConfigData(Arrays.asList(secondPropertySource)))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "verify(this.importer).resolveAndLoad(any(),this.locationResolverContext.capture(),eq(secondLocations))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Iterator<ConfigDataEnvironmentContributor> iterator = withProcessedImports.iterator()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),eq(secondLocations))).willReturn(secondImported)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(context.getParent()).hasToString(\"a\")@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,this.bootstrapRegistry,Arrays.asList(contributor))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "contributors.withProcessedImports(this.importer,this.activationContext)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Map<ConfigDataLocation,ConfigData> initialImported = new LinkedHashMap<>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,Arrays.asList(contributor))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"initialimport\")@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ConfigDataEnvironmentContributors withProcessedImports = contributors.withProcessedImports(this.importer,this.activationContext)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(secondLocations))).willReturn(secondImported)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.INITIAL_IMPORT)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "initialPropertySource.setProperty(\"spring.config.import\",\"secondimport\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "MockPropertySource initialPropertySource = new MockPropertySource()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<String> initialLocations = Arrays.asList(\"initialimport\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "withProcessedImportsResolvesAndLoadsChainedImports['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "withProcessedImportsResolvesAndLoadsChainedImports['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(initialPropertySource)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "MockPropertySource secondPropertySource = new MockPropertySource()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.ROOT)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),eq(initialLocations))).willReturn(initialImported)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(iterator.hasNext()).isFalse()@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ConfigDataLocationResolverContext context = this.locationResolverContext.getValue()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Map<ConfigDataLocation,ConfigData> secondImported = new LinkedHashMap<>()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(initialLocations))).willReturn(initialImported)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "withProcessedImportsProvidesLocationResolverContextWithAccessToParent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "this.importer = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23->20 [style = bold, label=""];
7->1 [style = bold, label=""];
7->4 [style = solid, label="initialPropertySource"];
5->24 [style = solid, label="secondImported"];
28->20 [style = bold, label=""];
20->14 [style = solid, label="importer"];
18->22 [style = solid, label="initialImported"];
26->29 [style = bold, label=""];
27->30 [style = bold, label=""];
3->14 [style = bold, label=""];
18->8 [style = solid, label="initialImported"];
3->26 [style = bold, label=""];
1->18 [style = bold, label=""];
9->20 [style = bold, label=""];
21->10 [style = solid, label="secondPropertySource"];
19->2 [style = bold, label=""];
20->6 [style = bold, label=""];
25->14 [style = bold, label=""];
15->16 [style = bold, label=""];
11->25 [style = solid, label="contributor"];
0->15 [style = bold, label=""];
14->26 [style = dashed, label="0"];
19->24 [style = bold, label=""];
5->2 [style = solid, label="secondImported"];
8->17 [style = bold, label=""];
5->19 [style = bold, label=""];
21->5 [style = bold, label=""];
29->27 [style = bold, label=""];
8->22 [style = dashed, label="0"];
21->19 [style = solid, label="secondPropertySource"];
12->10 [style = bold, label=""];
18->4 [style = bold, label=""];
10->13 [style = bold, label=""];
11->3 [style = bold, label=""];
24->11 [style = bold, label=""];
7->13 [style = solid, label="initialPropertySource"];
14->12 [style = bold, label=""];
22->17 [style = bold, label=""];
4->8 [style = bold, label=""];
2->24 [style = dashed, label="0"];
11->3 [style = solid, label="contributor"];
6->7 [style = bold, label=""];
17->21 [style = bold, label=""];
4->22 [style = bold, label=""];
2->11 [style = bold, label=""];
17->29 [style = solid, label="secondLocations"];
11->25 [style = bold, label=""];
13->0 [style = bold, label=""];
20->26 [style = solid, label="importer"];
3->25 [style = dashed, label="0"];
}
