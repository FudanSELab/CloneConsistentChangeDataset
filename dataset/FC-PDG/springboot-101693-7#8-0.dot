digraph {
24 [style = filled, label = "Map<ConfigDataLocation,ConfigData> initialImported = new LinkedHashMap<>()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "this.importer = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "withProcessedImportsResolvesAndLoads['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "secondImported.put(new TestConfigDataLocation(\"b\"),new ConfigData(Arrays.asList(secondPropertySource)))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "contributors.withProcessedImports(this.importer,this.activationContext)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Iterator<ConfigDataEnvironmentContributor> iterator = withProcessedImports.iterator()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(secondLocations))).willReturn(secondImported)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Map<ConfigDataLocation,ConfigData> secondImported = new LinkedHashMap<>()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(context.getParent()).hasToString(\"a\")@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "initialPropertySource.setProperty(\"spring.config.import\",\"secondimport\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "MockPropertySource propertySource = new MockPropertySource()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,this.bootstrapContext,Arrays.asList(contributor))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(initialLocations))).willReturn(initialImported)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "List<String> secondLocations = Arrays.asList(\"secondimport\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.INITIAL_IMPORT)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(locations))).willReturn(imported)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Map<ConfigDataLocation,ConfigData> imported = new LinkedHashMap<>()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "verify(this.importer).resolveAndLoad(any(),this.locationResolverContext.capture(),any(),eq(secondLocations))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "initialImported.put(new TestConfigDataLocation(\"a\"),new ConfigData(Arrays.asList(initialPropertySource)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"testimport\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(propertySource)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "MockPropertySource initialPropertySource = new MockPropertySource()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "imported.put(new TestConfigDataResource(\"a\"),new ConfigData(Arrays.asList(propertySource)))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "List<String> initialLocations = Arrays.asList(\"initialimport\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "withProcessedImportsResolvesAndLoads['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.ROOT)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "ConfigDataLocationResolverContext context = this.locationResolverContext.getValue()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "List<ConfigDataLocation> locations = Arrays.asList(LOCATION_1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,this.bootstrapContext,Arrays.asList(contributor))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "imported.put(new TestConfigDataLocation(\"a\"),new ConfigData(Arrays.asList(propertySource)))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Map<ConfigDataResource,ConfigData> imported = new LinkedHashMap<>()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"initialimport\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ConfigDataEnvironmentContributors withProcessedImports = contributors.withProcessedImports(this.importer,this.activationContext)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "MockPropertySource secondPropertySource = new MockPropertySource()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "List<String> locations = Arrays.asList(\"testimport\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "withProcessedImportsProvidesLocationResolverContextWithAccessToParent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23->31 [style = bold, label=""];
9->10 [style = solid, label="contributor"];
8->16 [style = bold, label=""];
16->1 [style = solid, label="imported"];
20->23 [style = solid, label="secondLocations"];
4->14 [style = bold, label=""];
12->1 [style = solid, label="imported"];
16->18 [style = bold, label=""];
14->34 [style = dashed, label="0"];
20->29 [style = bold, label=""];
12->16 [style = dashed, label="0"];
35->22 [style = bold, label=""];
8->7 [style = solid, label="propertySource"];
11->4 [style = bold, label=""];
4->15 [style = bold, label=""];
8->18 [style = solid, label="propertySource"];
17->4 [style = bold, label=""];
8->35 [style = dashed, label="0"];
36->32 [style = bold, label=""];
19->10 [style = bold, label=""];
9->10 [style = bold, label=""];
21->25 [style = bold, label=""];
4->27 [style = solid, label="importer"];
19->10 [style = solid, label="contributor"];
32->2 [style = solid, label="contributor"];
12->0 [style = bold, label=""];
32->2 [style = bold, label=""];
10->6 [style = bold, label=""];
14->15 [style = dashed, label="0"];
7->3 [style = bold, label=""];
1->9 [style = bold, label=""];
4->6 [style = solid, label="importer"];
29->26 [style = bold, label=""];
9->19 [style = dashed, label="0"];
24->25 [style = solid, label="initialImported"];
6->5 [style = bold, label=""];
25->20 [style = bold, label=""];
8->0 [style = solid, label="propertySource"];
26->36 [style = solid, label="secondImported"];
18->1 [style = bold, label=""];
24->21 [style = bold, label=""];
6->27 [style = dashed, label="0"];
0->1 [style = bold, label=""];
33->36 [style = bold, label=""];
31->30 [style = bold, label=""];
3->13 [style = bold, label=""];
2->27 [style = bold, label=""];
35->21 [style = solid, label="initialPropertySource"];
5->7 [style = bold, label=""];
0->18 [style = dashed, label="0"];
27->23 [style = bold, label=""];
14->8 [style = bold, label=""];
34->35 [style = bold, label=""];
22->24 [style = bold, label=""];
1->19 [style = bold, label=""];
29->33 [style = solid, label="secondPropertySource"];
26->33 [style = bold, label=""];
15->8 [style = bold, label=""];
8->12 [style = bold, label=""];
4->34 [style = bold, label=""];
28->4 [style = bold, label=""];
13->2 [style = bold, label=""];
}
