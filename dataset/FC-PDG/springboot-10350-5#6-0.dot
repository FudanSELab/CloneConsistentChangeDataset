digraph {
1 [style = filled, label = "this.filter.filter(MockServerWebExchange.from(MockServerHttpRequest.get(\"https://api.example.com\")),new WebFilterChain(){@Override public Mono<Void> filter(ServerWebExchange exchange){exchange.getSession().block(Duration.ofSeconds(30))return Mono.empty()}}).block(Duration.ofSeconds(30))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Principal principal = mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(this.repository.findAll()).hasSize(1)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "this.filter.doFilter(request,new MockHttpServletResponse(),new MockFilterChain())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "org.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository.findAll().get(0).getPrincipal()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "given(principal.getName()).willReturn(\"alice\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(session).isNull()@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "MockHttpServletRequest request = new MockHttpServletRequest()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "filterDoesNotCaptureIdOfUnusedSession['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "this.filter.filter(MockServerWebExchange.from(MockServerHttpRequest.get(\"https://api.example.com\")),null).block(Duration.ofSeconds(30))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "filterDoesNotCaptureIdOfUnusedSession['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(this.repository.findAll()).hasSize(1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(session).isNull()@@@12@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(tracedPrincipal.getName()).isEqualTo(\"alice\")@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "request.setUserPrincipal(principal)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(tracedPrincipal).isNotNull()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "filterCapturesPrincipal['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14->3 [style = bold, label=""];
8->10 [style = bold, label=""];
0->3 [style = dashed, label="0"];
16->8 [style = bold, label=""];
11->14 [style = bold, label=""];
1->3 [style = bold, label=""];
12->16 [style = bold, label=""];
12->8 [style = solid, label="principal"];
7->3 [style = bold, label=""];
2->0 [style = bold, label=""];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
2->14 [style = dashed, label="0"];
9->15 [style = bold, label=""];
1->6 [style = dashed, label="0"];
3->13 [style = bold, label=""];
4->1 [style = bold, label=""];
15->12 [style = bold, label=""];
15->10 [style = solid, label="request"];
6->7 [style = bold, label=""];
10->11 [style = bold, label=""];
}
