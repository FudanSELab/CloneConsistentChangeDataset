digraph {
26 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawVarint64SlowPath())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(inputType.name(),input.isAtEnd())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "byte(( data@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertReadVarint['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "InputStream rawInput = new ByteArrayInputStream(longerData)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertReadLittleEndian64['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "byte(( data@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertReadLittleEndian64['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "long value@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "input = inputType.newDecoder(data,blockSize)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "System.arraycopy(data,0,longerData,0,data.length)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "byte(( data@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(1,rawInput.available())@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "blockSize <= 16@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawLittleEndian64())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "long value@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawVarint64())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "byte(( longerData = new byte((((@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "blockSize *= 2@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(inputType.name(),(int)value,input.readRawVarint32())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "int blockSize = 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "input = inputType.newDecoder(data,blockSize)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "input = inputType.newDecoder(data,blockSize)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "CodedInputStream input = inputType.newDecoder(data,blockSize)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertWithMessage(inputType.name()).that(input.readRawLittleEndian64()).isEqualTo(value)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals((int)value,CodedInputStream.readRawVarint32(rawInput))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertWithMessage(inputType.name()).that(input.isAtEnd()).isTrue()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertTrue(inputType.name(),input.skipField(WireFormat.WIRETYPE_VARINT))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27->13 [style = bold, label=""];
9->10 [style = solid, label="value"];
0->12 [style = dotted, label="true"];
0->19 [style = dotted, label="true"];
0->6 [style = dotted, label="true"];
28->21 [style = solid, label="value"];
18->3 [style = solid, label="data"];
26->22 [style = bold, label=""];
0->31 [style = dotted, label="true"];
24->15 [style = solid, label="rawInput"];
5->28 [style = dashed, label="0"];
0->21 [style = dotted, label="true"];
18->22 [style = solid, label="data"];
10->12 [style = bold, label=""];
20->18 [style = dotted, label="true"];
5->3 [style = solid, label="data"];
0->3 [style = dotted, label="true"];
18->13 [style = solid, label="data"];
0->3 [style = bold, label=""];
1->4 [style = bold, label=""];
0->10 [style = dotted, label="true"];
30->31 [style = solid, label="input"];
18->17 [style = solid, label="data"];
2->3 [style = solid, label="data"];
31->4 [style = bold, label=""];
7->0 [style = bold, label=""];
11->5 [style = dotted, label="true"];
18->26 [style = solid, label="data"];
4->22 [style = solid, label="blockSize"];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
18->31 [style = solid, label="data"];
3->10 [style = bold, label=""];
25->24 [style = bold, label=""];
28->15 [style = solid, label="value"];
0->14 [style = dotted, label="true"];
28->14 [style = solid, label="value"];
20->7 [style = bold, label=""];
0->26 [style = dotted, label="true"];
18->30 [style = solid, label="data"];
7->3 [style = solid, label="blockSize"];
15->29 [style = bold, label=""];
23->31 [style = bold, label=""];
0->16 [style = bold, label=""];
4->3 [style = solid, label="blockSize"];
1->26 [style = dashed, label="0"];
8->2 [style = dotted, label="true"];
7->30 [style = solid, label="blockSize"];
0->4 [style = dotted, label="true"];
16->25 [style = solid, label="longerData"];
3->6 [style = bold, label=""];
19->17 [style = solid, label="input"];
11->9 [style = dotted, label="true"];
0->30 [style = dotted, label="true"];
7->22 [style = solid, label="blockSize"];
6->10 [style = dashed, label="0"];
6->1 [style = bold, label=""];
13->19 [style = bold, label=""];
4->30 [style = solid, label="blockSize"];
3->26 [style = solid, label="input"];
22->13 [style = solid, label="input"];
0->23 [style = dotted, label="true"];
0->1 [style = dotted, label="true"];
24->15 [style = bold, label=""];
19->21 [style = bold, label=""];
0->13 [style = dotted, label="true"];
4->19 [style = solid, label="blockSize"];
3->14 [style = bold, label=""];
30->23 [style = bold, label=""];
5->6 [style = solid, label="value"];
16->25 [style = bold, label=""];
17->30 [style = bold, label=""];
18->25 [style = solid, label="data"];
6->14 [style = dashed, label="0"];
28->27 [style = solid, label="value"];
8->7 [style = bold, label=""];
0->22 [style = dotted, label="true"];
14->26 [style = bold, label=""];
1->12 [style = dashed, label="0"];
16->24 [style = solid, label="longerData"];
12->4 [style = bold, label=""];
22->27 [style = bold, label=""];
8->5 [style = dotted, label="true"];
20->28 [style = dotted, label="true"];
7->19 [style = solid, label="blockSize"];
0->17 [style = dotted, label="true"];
18->19 [style = solid, label="data"];
4->0 [style = solid, label="blockSize"];
0->27 [style = dotted, label="true"];
21->17 [style = bold, label=""];
11->7 [style = bold, label=""];
7->0 [style = solid, label="blockSize"];
}
