digraph {
19 [style = filled, label = "await['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "ts.assertNotComplete()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ts1.await()@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertFalse(ts.await(100,TimeUnit.MILLISECONDS))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(ts.isDisposed())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "await['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final TestSubscriberEx<Integer> ts1 = new TestSubscriberEx<Integer>()@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ts.assertNoErrors()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ts.onSubscribe(new BooleanSubscription())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ts.await()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestSubscriberEx<Integer> ts = new TestSubscriberEx<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "ts.onComplete()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Schedulers.single().scheduleDirect(new Runnable(){@Override public void run(){ts1.onComplete()}},200,TimeUnit.MILLISECONDS)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final TestSubscriberEx<Integer> ts1 = new TestSubscriberEx<>()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "ts.assertNotComplete().assertNoErrors()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "TestSubscriber<Integer> ts = TestSubscriber.create()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final TestSubscriber<Integer> ts1 = TestSubscriber.create()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(ts.await(5,TimeUnit.SECONDS))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "await['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(ts.await(5,TimeUnit.SECONDS))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ts.awaitDone(100,TimeUnit.MILLISECONDS)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ts.onComplete()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertFalse(ts.await(100,TimeUnit.MILLISECONDS))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(ts.await(100,TimeUnit.MILLISECONDS))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Schedulers.single().scheduleDirect(new Runnable(){@Override public void run(){ts1.onComplete()}},200,TimeUnit.MILLISECONDS)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ts.assertNoErrors()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "ts1.await()@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "ts.assertComplete()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "ts1.onSubscribe(new BooleanSubscription())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->16 [style = bold, label=""];
16->13 [style = bold, label=""];
7->23 [style = dashed, label="0"];
23->30 [style = bold, label=""];
8->23 [style = bold, label=""];
11->1 [style = bold, label=""];
9->2 [style = bold, label=""];
19->20 [style = bold, label=""];
12->15 [style = bold, label=""];
1->3 [style = bold, label=""];
28->13 [style = bold, label=""];
10->17 [style = bold, label=""];
20->14 [style = bold, label=""];
16->18 [style = dashed, label="0"];
17->29 [style = dashed, label="0"];
15->5 [style = bold, label=""];
8->7 [style = bold, label=""];
21->28 [style = bold, label=""];
26->22 [style = bold, label=""];
16->26 [style = dashed, label="0"];
5->21 [style = bold, label=""];
6->4 [style = bold, label=""];
17->20 [style = dashed, label="0"];
5->0 [style = bold, label=""];
17->14 [style = bold, label=""];
13->26 [style = bold, label=""];
30->4 [style = bold, label=""];
24->25 [style = bold, label=""];
3->8 [style = bold, label=""];
7->6 [style = bold, label=""];
29->14 [style = bold, label=""];
18->13 [style = bold, label=""];
5->21 [style = dashed, label="0"];
4->12 [style = bold, label=""];
0->18 [style = bold, label=""];
13->9 [style = bold, label=""];
22->24 [style = bold, label=""];
27->29 [style = bold, label=""];
14->11 [style = bold, label=""];
}
