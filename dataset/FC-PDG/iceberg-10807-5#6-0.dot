digraph {
6 [style = filled, label = "PartitionSpec expectedSpec = PartitionSpec.builderFor(expectedSchema).identity(\"part\").withSpecId(1).build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(\"Table should have expected snapshots\",2,Iterables.size(rtasTable.snapshots()))@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(\"Should have expected nullable schema\",expectedSchema.asStruct(),rtasTable.schema().asStruct())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(\"Should have preserved table property\",\"val2\",rtasTable.properties().get(\"prop2\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(\"Should have rows matching the source table\",sql(\"SELECT id, data, CASE WHEN (id %% 2) = 0 THEN 'even' ELSE 'odd' END AS part \" + \"FROM %s ORDER BY id\",sourceName),sql(\"SELECT * FROM %s ORDER BY id\",tableName))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "sql(\"CREATE TABLE %s USING iceberg AS SELECT * FROM %s\",tableName,sourceName)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "PartitionSpec expectedSpec = PartitionSpec.builderFor(expectedSchema).identity(\"part\").withSpecId(0).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(\"Should have rows matching the source table\",sql(\"SELECT id, data, CASE WHEN (id %% 2) = 0 THEN 'even' ELSE 'odd' END AS part \" + \"FROM %s ORDER BY id\",sourceName),sql(\"SELECT * FROM %s ORDER BY id\",tableName))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "sql(\"REPLACE TABLE %s USING iceberg PARTITIONED BY (part) AS \" + \"SELECT id, data, CASE WHEN (id %% 2) = 0 THEN 'even' ELSE 'odd' END AS part \" + \"FROM %s ORDER BY 3, 1\",tableName,sourceName)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "testRTAS['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testRTAS['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "sql(\"CREATE TABLE %s USING iceberg TBLPROPERTIES ('prop1'='val1', 'prop2'='val2')\" + \"AS SELECT * FROM %s\",tableName,sourceName)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "testDataFrameV2CreateOrReplace['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(\"Should have new table property\",\"val3\",rtasTable.properties().get(\"prop3\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Should be partitioned by part\",expectedSpec,rtasTable.spec())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Table rtasTable = validationCatalog.loadTable(tableIdent)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "spark.table(sourceName).select(col(\"id\").multiply(lit(2)).as(\"id\"),col(\"data\")).select(col(\"id\"),col(\"data\"),when(col(\"id\").mod(lit(2)).equalTo(lit(0)),lit(\"even\")).otherwise(\"odd\").as(\"part\")).orderBy(\"part\",\"id\").writeTo(tableName).partitionedBy(col(\"part\")).using(\"iceberg\").createOrReplace()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(\"Should have rows matching the source table\",sql(\"SELECT * FROM %s ORDER BY id\",sourceName),sql(\"SELECT * FROM %s ORDER BY id\",tableName))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Schema expectedSchema = new Schema(Types.NestedField.optional(1,\"id\",Types.LongType.get()),Types.NestedField.optional(2,\"data\",Types.StringType.get()),Types.NestedField.optional(3,\"part\",Types.StringType.get()))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"Should have updated table property\",\"newval1\",rtasTable.properties().get(\"prop1\"))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"Should have rows matching the source table\",sql(\"SELECT 2 * id, data, CASE WHEN ((2 * id) %% 2) = 0 THEN 'even' ELSE 'odd' END AS part \" + \"FROM %s ORDER BY id\",sourceName),sql(\"SELECT * FROM %s ORDER BY id\",tableName))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "sql(\"REPLACE TABLE %s USING iceberg PARTITIONED BY (part) TBLPROPERTIES ('prop1'='newval1', 'prop3'='val3') AS \" + \"SELECT id, data, CASE WHEN (id %% 2) = 0 THEN 'even' ELSE 'odd' END AS part \" + \"FROM %s ORDER BY 3, 1\",tableName,sourceName)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "spark.table(sourceName).select(col(\"id\"),col(\"data\"),when(col(\"id\").mod(lit(2)).equalTo(lit(0)),lit(\"even\")).otherwise(\"odd\").as(\"part\")).orderBy(\"part\",\"id\").writeTo(tableName).partitionedBy(col(\"part\")).using(\"iceberg\").createOrReplace()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->9 [style = bold, label=""];
11->14 [style = bold, label=""];
8->18 [style = bold, label=""];
10->19 [style = bold, label=""];
18->10 [style = solid, label="expectedSpec"];
1->19 [style = dashed, label="0"];
12->15 [style = bold, label=""];
1->3 [style = bold, label=""];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
9->10 [style = bold, label=""];
3->12 [style = bold, label=""];
17->22 [style = bold, label=""];
7->8 [style = bold, label=""];
15->16 [style = bold, label=""];
2->4 [style = bold, label=""];
6->18 [style = dashed, label="0"];
20->21 [style = bold, label=""];
22->8 [style = bold, label=""];
5->17 [style = dashed, label="0"];
5->13 [style = bold, label=""];
7->13 [style = dashed, label="0"];
5->7 [style = bold, label=""];
4->14 [style = dashed, label="0"];
13->8 [style = bold, label=""];
10->1 [style = bold, label=""];
4->5 [style = bold, label=""];
21->17 [style = bold, label=""];
18->0 [style = bold, label=""];
19->3 [style = bold, label=""];
6->10 [style = solid, label="expectedSpec"];
14->5 [style = bold, label=""];
}
