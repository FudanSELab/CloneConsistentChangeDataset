digraph {
12 [style = filled, label = "map.put(\"premium\",\"health999\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "map.put(\"travel\",\"1\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testGroupByWithAlphaNumericDimensionOrder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"alphanumeric-dimension-order\")@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "map.put(\"news\",\"health0000\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(map,false),false,null,false,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"alias\",null,StringComparators.ALPHANUMERIC)),11)).setGranularity(QueryRunnerTestHelper.dayGran).overrideContext(ImmutableMap.of(\"sortByDimsFirst\",true)).build()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testGroupByWithLookupAndLimitAndSortByDimsFirst['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "map.put(\"business\",\"health20\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"lookup-limit\")@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "map.put(\"technology\",\"2\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"alias\",\"health0000\",\"rows\",1L,\"idx\",121L),makeRow(query,\"2011-04-01\",\"alias\",\"health09\",\"rows\",3L,\"idx\",2870L),makeRow(query,\"2011-04-01\",\"alias\",\"health20\",\"rows\",1L,\"idx\",118L),makeRow(query,\"2011-04-01\",\"alias\",\"health55\",\"rows\",1L,\"idx\",120L),makeRow(query,\"2011-04-01\",\"alias\",\"health105\",\"rows\",1L,\"idx\",135L),makeRow(query,\"2011-04-01\",\"alias\",\"health999\",\"rows\",3L,\"idx\",2900L),makeRow(query,\"2011-04-01\",\"alias\",\"travel47\",\"rows\",1L,\"idx\",158L),makeRow(query,\"2011-04-01\",\"alias\",\"travel123\",\"rows\",1L,\"idx\",78L),makeRow(query,\"2011-04-01\",\"alias\",\"travel555\",\"rows\",1L,\"idx\",119L),makeRow(query,\"2011-04-02\",\"alias\",\"health0000\",\"rows\",1L,\"idx\",114L),makeRow(query,\"2011-04-02\",\"alias\",\"health09\",\"rows\",3L,\"idx\",2447L),makeRow(query,\"2011-04-02\",\"alias\",\"health20\",\"rows\",1L,\"idx\",112L),makeRow(query,\"2011-04-02\",\"alias\",\"health55\",\"rows\",1L,\"idx\",113L),makeRow(query,\"2011-04-02\",\"alias\",\"health105\",\"rows\",1L,\"idx\",147L),makeRow(query,\"2011-04-02\",\"alias\",\"health999\",\"rows\",3L,\"idx\",2505L),makeRow(query,\"2011-04-02\",\"alias\",\"travel47\",\"rows\",1L,\"idx\",166L),makeRow(query,\"2011-04-02\",\"alias\",\"travel123\",\"rows\",1L,\"idx\",97L),makeRow(query,\"2011-04-02\",\"alias\",\"travel555\",\"rows\",1L,\"idx\",126L))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "map.put(\"mezzanine\",\"health09\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "map.put(\"automotive\",\"health105\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "map.put(\"entertainment\",\"travel47\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "map.put(\"mezzanine\",\"5\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "map.put(\"health\",\"6\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testGroupByWithAlphaNumericDimensionOrder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Map<String,String> map = new HashMap<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD).setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(map,false),false,null,false,false))).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"alias\",null,StringComparators.ALPHANUMERIC)),null)).setGranularity(QueryRunnerTestHelper.DAY_GRAN).build()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "map.put(\"entertainment\",\"7\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "cannotVectorize()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(map,false),false,null,false,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"alias\",null,StringComparators.ALPHANUMERIC)),null)).setGranularity(QueryRunnerTestHelper.dayGran).build()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "map.put(\"health\",\"health55\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "map.put(\"automotive\",\"9\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "map.put(\"premium\",\"3\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "map.put(\"business\",\"8\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "map.put(\"technology\",\"travel123\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"alias\",\"1\",\"rows\",1L,\"idx\",119L),makeRow(query,\"2011-04-02\",\"alias\",\"1\",\"rows\",1L,\"idx\",126L),makeRow(query,\"2011-04-01\",\"alias\",\"2\",\"rows\",1L,\"idx\",78L),makeRow(query,\"2011-04-02\",\"alias\",\"2\",\"rows\",1L,\"idx\",97L),makeRow(query,\"2011-04-01\",\"alias\",\"3\",\"rows\",3L,\"idx\",2900L),makeRow(query,\"2011-04-02\",\"alias\",\"3\",\"rows\",3L,\"idx\",2505L),makeRow(query,\"2011-04-01\",\"alias\",\"4\",\"rows\",1L,\"idx\",121L),makeRow(query,\"2011-04-02\",\"alias\",\"4\",\"rows\",1L,\"idx\",114L),makeRow(query,\"2011-04-01\",\"alias\",\"5\",\"rows\",3L,\"idx\",2870L),makeRow(query,\"2011-04-02\",\"alias\",\"5\",\"rows\",3L,\"idx\",2447L),makeRow(query,\"2011-04-01\",\"alias\",\"6\",\"rows\",1L,\"idx\",120L))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "map.put(\"travel\",\"travel555\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "map.put(\"news\",\"4\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->18 [style = bold, label=""];
23->20 [style = solid, label="expectedResults"];
16->13 [style = bold, label=""];
9->16 [style = dashed, label="0"];
16->13 [style = solid, label="query"];
8->15 [style = bold, label=""];
19->23 [style = solid, label="query"];
13->5 [style = solid, label="expectedResults"];
22->19 [style = bold, label=""];
17->6 [style = bold, label=""];
3->20 [style = solid, label="results"];
26->29 [style = bold, label=""];
27->28 [style = bold, label=""];
30->27 [style = bold, label=""];
15->30 [style = dashed, label="0"];
18->30 [style = bold, label=""];
23->3 [style = bold, label=""];
1->21 [style = dashed, label="0"];
19->3 [style = solid, label="query"];
21->25 [style = bold, label=""];
0->28 [style = dashed, label="0"];
4->7 [style = bold, label=""];
2->12 [style = bold, label=""];
5->20 [style = dashed, label="0"];
9->3 [style = solid, label="query"];
12->26 [style = dashed, label="0"];
7->9 [style = bold, label=""];
9->19 [style = dashed, label="0"];
3->5 [style = bold, label=""];
11->0 [style = bold, label=""];
28->21 [style = bold, label=""];
3->20 [style = bold, label=""];
15->11 [style = bold, label=""];
10->8 [style = bold, label=""];
12->4 [style = bold, label=""];
13->3 [style = bold, label=""];
0->1 [style = bold, label=""];
19->23 [style = bold, label=""];
6->10 [style = bold, label=""];
3->5 [style = solid, label="results"];
7->16 [style = bold, label=""];
25->26 [style = bold, label=""];
2->25 [style = dashed, label="0"];
9->13 [style = solid, label="query"];
16->3 [style = solid, label="query"];
8->18 [style = dashed, label="0"];
1->2 [style = bold, label=""];
11->27 [style = dashed, label="0"];
29->22 [style = bold, label=""];
4->29 [style = dashed, label="0"];
24->6 [style = bold, label=""];
7->22 [style = dashed, label="0"];
14->6 [style = bold, label=""];
9->13 [style = bold, label=""];
}
