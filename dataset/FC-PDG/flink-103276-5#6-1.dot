digraph {
38 [style = filled, label = "int key2 = getKeyInKeyGroupRange(subKeyGroupRange2,maxParallelism)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testHarness.setProcessingTime(0L)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testHarness1.open()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testHarness.setProcessingTime(0L)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testHarness1.setProcessingTime(10L)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_STATE:HELLO\"),0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testHarness.processElement(new Tuple2<>(1,\"SET_STATE:CIAO\"),0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "OperatorStateHandles snapshot = testHarness.snapshot(0,0)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "testHarness1.setup()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_EVENT_TIME:HELLO\"))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "KeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1,maxParallelism - 1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testHarness.processElement(new Tuple2<>(1,\"SET_PROC_TIME_TIMER:20\"),0)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testHarness.open()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "testHarness2.processWatermark(20L)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testHarness1.processWatermark(10L)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "TestOperator testOperator2 = new TestOperator()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testEnsureProcessingTimeTimerRegisteredOnRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "testHarness2.initializeState(snapshot)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "testHarness1.setProcessingTime(10L)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TestOperator testOperator = new TestOperator()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testHarness1.processWatermark(20L)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testStateAndTimerStateShufflingScalingUp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TestOperator testOperator1 = new TestOperator()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "testHarness1.initializeState(snapshot)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testHarness1.initializeState(snapshot)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "testHarness2.setProcessingTime(20L)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertTrue(extractResult(testHarness).isEmpty())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testHarness1.open()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "testHarness.processWatermark(0L)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_PROC_TIME:CIAO\"))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "KeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0,(maxParallelism / 2) - 1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testHarness1.setup()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestOperator testOperator = new TestOperator()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testHarness2.processWatermark(10L)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final int maxParallelism = 10@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_PROC_TIME_TIMER:20\"),0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_PROC_TIME_TIMER:10\"),0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testHarness1.setProcessingTime(20L)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_STATE:CIAO\"),0)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "testHarness2.setProcessingTime(10L)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestOperator testOperator1 = new TestOperator()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_PROC_TIME:HELLO\"))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "int key1 = getKeyInKeyGroupRange(subKeyGroupRange1,maxParallelism)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_EVENT_TIME_TIMER:10\"),0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_PROC_TIME:CIAO\"))@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHarness1.setProcessingTime(0L)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,1,0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@49@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness2 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator2,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,1)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "OperatorSubtaskState snapshot = testHarness.snapshot(0,0)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testEnsureProcessingTimeTimerRegisteredOnRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_EVENT_TIME_TIMER:20\"),0)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "testHarness2.setup()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testHarness2.open()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_EVENT_TIME:CIAO\"))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testHarness.open()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54->55 [style = bold, label=""];
11->53 [style = dashed, label="0"];
8->10 [style = bold, label=""];
21->10 [style = bold, label=""];
37->28 [style = bold, label=""];
24->54 [style = solid, label="maxParallelism"];
12->5 [style = bold, label=""];
50->22 [style = bold, label=""];
5->20 [style = bold, label=""];
7->35 [style = bold, label=""];
57->41 [style = bold, label=""];
17->56 [style = dashed, label="0"];
44->47 [style = solid, label="testOperator2"];
0->59 [style = dashed, label="0"];
3->59 [style = solid, label="testOperator"];
48->54 [style = bold, label=""];
12->49 [style = dashed, label="0"];
39->64 [style = bold, label=""];
24->38 [style = solid, label="maxParallelism"];
60->63 [style = bold, label=""];
33->44 [style = bold, label=""];
44->47 [style = bold, label=""];
17->27 [style = solid, label="snapshot"];
24->48 [style = solid, label="maxParallelism"];
35->56 [style = solid, label="testHarness1"];
23->62 [style = bold, label=""];
35->57 [style = solid, label="testHarness1"];
22->33 [style = bold, label=""];
64->52 [style = bold, label=""];
26->17 [style = bold, label=""];
7->35 [style = solid, label="testOperator1"];
6->20 [style = dashed, label="0"];
62->30 [style = bold, label=""];
47->52 [style = solid, label="testHarness2"];
27->31 [style = bold, label=""];
31->29 [style = bold, label=""];
20->14 [style = bold, label=""];
55->38 [style = bold, label=""];
16->17 [style = bold, label=""];
29->23 [style = bold, label=""];
5->34 [style = dashed, label="0"];
24->47 [style = solid, label="maxParallelism"];
47->58 [style = bold, label=""];
47->30 [style = solid, label="testHarness2"];
13->2 [style = solid, label="testHarness1"];
6->53 [style = bold, label=""];
25->24 [style = bold, label=""];
5->6 [style = bold, label=""];
18->1 [style = bold, label=""];
63->40 [style = bold, label=""];
7->2 [style = bold, label=""];
42->56 [style = bold, label=""];
56->50 [style = bold, label=""];
20->15 [style = solid, label="snapshot"];
10->0 [style = bold, label=""];
2->33 [style = dashed, label="0"];
10->0 [style = solid, label="testOperator"];
54->38 [style = solid, label="subKeyGroupRange2"];
13->18 [style = bold, label=""];
52->46 [style = bold, label=""];
55->53 [style = solid, label="key1"];
55->49 [style = solid, label="key1"];
13->35 [style = dashed, label="0"];
30->43 [style = bold, label=""];
38->45 [style = solid, label="key2"];
28->26 [style = bold, label=""];
51->6 [style = bold, label=""];
32->57 [style = bold, label=""];
3->12 [style = bold, label=""];
15->19 [style = bold, label=""];
59->5 [style = bold, label=""];
48->55 [style = solid, label="subKeyGroupRange1"];
38->3 [style = bold, label=""];
19->16 [style = bold, label=""];
55->37 [style = solid, label="key1"];
24->55 [style = solid, label="maxParallelism"];
14->13 [style = solid, label="testOperator1"];
41->36 [style = bold, label=""];
11->3 [style = bold, label=""];
3->45 [style = dashed, label="0"];
40->32 [style = bold, label=""];
61->42 [style = bold, label=""];
14->13 [style = bold, label=""];
35->60 [style = bold, label=""];
43->39 [style = bold, label=""];
24->35 [style = solid, label="maxParallelism"];
0->9 [style = bold, label=""];
58->27 [style = bold, label=""];
5->51 [style = bold, label=""];
38->28 [style = solid, label="key2"];
45->49 [style = bold, label=""];
1->15 [style = bold, label=""];
9->4 [style = bold, label=""];
38->34 [style = solid, label="key2"];
49->34 [style = bold, label=""];
6->14 [style = bold, label=""];
17->7 [style = bold, label=""];
13->17 [style = solid, label="testHarness1"];
34->37 [style = bold, label=""];
3->59 [style = bold, label=""];
6->15 [style = solid, label="snapshot"];
36->61 [style = bold, label=""];
24->59 [style = solid, label="maxParallelism"];
4->11 [style = bold, label=""];
17->63 [style = solid, label="snapshot"];
24->48 [style = bold, label=""];
53->45 [style = bold, label=""];
}
