digraph {
26 [style = filled, label = "Assert.assertNull(\"Should contain empty value in new column 2\",projected.get(1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertNull(\"Should contain empty value in new column 4\",projected.get(2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertNull(\"Should contain empty value in new column 6\",projected.get(3))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column 1\",projected.getField(0),100L)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNull(\"Should contain empty value in new column 6\",projected.getField(3))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertNull(\"Should contain empty value in new column 4\",projected.getField(2))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Schema addedFields = new Schema(Types.NestedField.optional(1,\"a\",Types.LongType.get()),Types.NestedField.optional(2,\"b\",Types.StructType.of(Types.NestedField.required(3,\"c\",Types.LongType.get()))),Types.NestedField.optional(4,\"d\",Types.ListType.ofRequired(5,Types.LongType.get())),Types.NestedField.optional(6,\"e\",Types.MapType.ofRequired(7,8,Types.LongType.get(),Types.LongType.get())))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testAddedFieldsWithRequiredChildren['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column a\",projected.getField(\"a\"),100L)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column 1\",projected.get(0),100L)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertNull(\"Should contain empty value in column e\",projected.getField(\"e\"))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Record record = GenericRecord.create(schema.asStruct())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "record.setField(\"a\",100L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testAddedFieldsWithRequiredChildren['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertNull(\"Should contain empty value in column d\",projected.getField(\"d\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertTrue(\"Should contain empty value in new column 6\",projected.isNullAt(3))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertTrue(\"Should contain empty value in new column 4\",projected.isNullAt(2))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertNull(\"Should contain empty value in new column 2\",projected.getField(1))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "RowData projected = writeAndRead(\"add_fields_with_required_children_projection\",schema,addedFields,row)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "RowData row = GenericRowData.of(100L)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertNull(\"Should contain empty value in column b\",projected.getField(\"b\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Record projected = writeAndRead(\"add_fields_with_required_children_projection\",schema,addedFields,record)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Schema schema = new Schema(Types.NestedField.required(1,\"a\",Types.LongType.get()))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(\"Should contain empty value in new column 2\",projected.isNullAt(1))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Schema addedFields = new Schema(Types.NestedField.optional(1,\"a\",Types.LongType.get()),Types.NestedField.optional(2,\"b\",Types.StructType.of(Types.NestedField.required(3,\"c\",Types.LongType.get()))),Types.NestedField.optional(4,\"d\",Types.ListType.ofRequired(5,Types.LongType.get())),Types.NestedField.optional(6,\"e\",Types.MapType.ofRequired(7,8,Types.LongType.get(),Types.LongType.get())))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Row row = Row.of(100L)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "testAddedFieldsWithRequiredChildren['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column 1\",projected.getLong(0),100L)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22->26 [style = bold, label=""];
4->2 [style = solid, label="addedFields"];
6->12 [style = solid, label="schema"];
20->24 [style = solid, label="record"];
21->27 [style = bold, label=""];
0->6 [style = bold, label=""];
7->14 [style = dashed, label="0"];
6->24 [style = solid, label="schema"];
2->3 [style = bold, label=""];
18->19 [style = bold, label=""];
1->21 [style = dashed, label="0"];
4->2 [style = bold, label=""];
16->22 [style = bold, label=""];
7->8 [style = bold, label=""];
12->9 [style = bold, label=""];
25->6 [style = bold, label=""];
10->6 [style = bold, label=""];
6->15 [style = bold, label=""];
26->21 [style = bold, label=""];
1->13 [style = dashed, label="0"];
6->20 [style = bold, label=""];
8->1 [style = bold, label=""];
24->16 [style = bold, label=""];
6->2 [style = solid, label="schema"];
6->5 [style = bold, label=""];
5->2 [style = solid, label="row"];
2->24 [style = solid, label="addedFields"];
2->12 [style = dashed, label="0"];
20->23 [style = bold, label=""];
3->7 [style = bold, label=""];
3->9 [style = dashed, label="0"];
11->13 [style = bold, label=""];
5->4 [style = bold, label=""];
15->12 [style = solid, label="row"];
15->4 [style = bold, label=""];
27->17 [style = bold, label=""];
9->14 [style = bold, label=""];
4->12 [style = bold, label=""];
23->2 [style = bold, label=""];
2->24 [style = bold, label=""];
8->11 [style = dashed, label="0"];
2->24 [style = dashed, label="0"];
5->15 [style = dashed, label="0"];
4->12 [style = solid, label="addedFields"];
14->11 [style = bold, label=""];
7->22 [style = dashed, label="0"];
17->18 [style = bold, label=""];
3->16 [style = dashed, label="0"];
8->26 [style = dashed, label="0"];
}
