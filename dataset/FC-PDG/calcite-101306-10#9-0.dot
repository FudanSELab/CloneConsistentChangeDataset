digraph {
1 [style = filled, label = "testLexOracleAsJava['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testLexJava['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "CalciteAssert.that().with(Lex.ORACLE).with(CalciteConnectionProperty.QUOTING,Quoting.BACK_TICK).with(CalciteConnectionProperty.UNQUOTED_CASING,Casing.UNCHANGED).with(CalciteConnectionProperty.QUOTED_CASING,Casing.UNCHANGED).with(CalciteConnectionProperty.CASE_SENSITIVE,true).doWithConnection(new Function<CalciteConnection,Void>(){public Void apply(CalciteConnection connection){try {DatabaseMetaData metaData = connection.getMetaData()assertThat(metaData.getIdentifierQuoteString(),equalTo(\"`\"))assertThat(metaData.supportsMixedCaseIdentifiers(),equalTo(true))assertThat(metaData.storesMixedCaseIdentifiers(),equalTo(false))assertThat(metaData.storesUpperCaseIdentifiers(),equalTo(false))assertThat(metaData.storesLowerCaseIdentifiers(),equalTo(false))assertThat(metaData.supportsMixedCaseQuotedIdentifiers(),equalTo(true))assertThat(metaData.storesMixedCaseQuotedIdentifiers(),equalTo(false))assertThat(metaData.storesUpperCaseQuotedIdentifiers(),equalTo(false))assertThat(metaData.storesLowerCaseQuotedIdentifiers(),equalTo(false))return null}catch (SQLException e) }})@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testLexOracleAsJava['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "CalciteAssert.that().with(Lex.JAVA).doWithConnection(new Function<CalciteConnection,Void>(){public Void apply(CalciteConnection connection){try {DatabaseMetaData metaData = connection.getMetaData()assertThat(metaData.getIdentifierQuoteString(),equalTo(\"`\"))assertThat(metaData.supportsMixedCaseIdentifiers(),equalTo(true))assertThat(metaData.storesMixedCaseIdentifiers(),equalTo(false))assertThat(metaData.storesUpperCaseIdentifiers(),equalTo(false))assertThat(metaData.storesLowerCaseIdentifiers(),equalTo(false))assertThat(metaData.supportsMixedCaseQuotedIdentifiers(),equalTo(true))assertThat(metaData.storesMixedCaseQuotedIdentifiers(),equalTo(false))assertThat(metaData.storesUpperCaseQuotedIdentifiers(),equalTo(false))assertThat(metaData.storesLowerCaseQuotedIdentifiers(),equalTo(false))return null}catch (SQLException e) }})@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "CalciteAssert.that().with(Lex.ORACLE).with(\"quoting\",\"BACK_TICK\").with(\"unquotedCasing\",\"UNCHANGED\").with(\"quotedCasing\",\"UNCHANGED\").with(\"caseSensitive\",\"TRUE\").doWithConnection(new Function<CalciteConnection,Void>(){public Void apply(CalciteConnection connection){try {DatabaseMetaData metaData = connection.getMetaData()assertThat(metaData.getIdentifierQuoteString(),equalTo(\"`\"))assertThat(metaData.supportsMixedCaseIdentifiers(),equalTo(true))assertThat(metaData.storesMixedCaseIdentifiers(),equalTo(false))assertThat(metaData.storesUpperCaseIdentifiers(),equalTo(false))assertThat(metaData.storesLowerCaseIdentifiers(),equalTo(false))assertThat(metaData.supportsMixedCaseQuotedIdentifiers(),equalTo(true))assertThat(metaData.storesMixedCaseQuotedIdentifiers(),equalTo(false))assertThat(metaData.storesUpperCaseQuotedIdentifiers(),equalTo(false))assertThat(metaData.storesLowerCaseQuotedIdentifiers(),equalTo(false))return null}catch (SQLException e) }})@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->4 [style = dashed, label="0"];
0->3 [style = dashed, label="0"];
1->0 [style = bold, label=""];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
}
