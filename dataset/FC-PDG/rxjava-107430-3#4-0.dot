digraph {
8 [style = filled, label = "observerCheckTerminatedDelayErrorEmptyError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "TestObserver<Integer> to = new TestObserver<Integer>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "to.onSubscribe(Disposable.empty())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "to.assertFailure()@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "observerCheckTerminatedNonDelayErrorErrorResource['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "to.assertFailure()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "QueueDrainHelper.checkTerminated(true,false,to,false,q,d,qd)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "SpscArrayQueue<Integer> q = new SpscArrayQueue<Integer>(32)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ObservableQueueDrain<Integer,Integer> qd = new ObservableQueueDrain<Integer,Integer>(){@Override public boolean cancelled(){return false}@Override public boolean done(){return false}@Override public Throwable error(){return new TestException()}@Override public boolean enter(){return true}@Override public int leave(int m){return 0}@Override public void accept(Observer<? super Integer> a,Integer v){}}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "observerCheckTerminatedDelayErrorEmptyError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(d.isDisposed())@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "QueueDrainHelper.checkTerminated(true,true,to,true,q,null,qd)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "to.onSubscribe(Disposables.empty())@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Disposable d = Disposables.empty()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->2 [style = bold, label=""];
0->7 [style = dashed, label="0"];
0->4 [style = bold, label=""];
5->2 [style = solid, label="q"];
4->5 [style = bold, label=""];
5->11 [style = solid, label="q"];
12->11 [style = solid, label="d"];
1->11 [style = solid, label="to"];
3->1 [style = bold, label=""];
8->1 [style = bold, label=""];
1->2 [style = solid, label="to"];
11->10 [style = bold, label=""];
10->13 [style = bold, label=""];
7->4 [style = bold, label=""];
4->11 [style = solid, label="qd"];
2->6 [style = bold, label=""];
4->2 [style = solid, label="qd"];
5->12 [style = bold, label=""];
12->11 [style = bold, label=""];
1->7 [style = bold, label=""];
9->1 [style = bold, label=""];
1->0 [style = bold, label=""];
}
