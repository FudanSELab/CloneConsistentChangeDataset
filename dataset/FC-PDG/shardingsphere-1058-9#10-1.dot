digraph {
13 [style = filled, label = "assertThat(span.operationName(),is(\"/ShardingSphere/executeSQL/\"))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ADVICE.onThrowing(targetObject,executeMethod,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16b8225,new IOException())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<MockSpan> spans = tracer.finishedSpans()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\",new SQLUnit(\"select 1\",Lists.newArrayList())))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MockAdviceTargetObject targetObject = new MockAdviceTargetObject()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Map<String,Object> extraMap = Collections.singletonMap(\"_root_span_\",null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "List<MockSpan.LogEntry> entries = span.logEntries()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(spans.size(),is(1))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Map<String,Object> tags = span.tags()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(tags.get(\"db.type\"),is(\"sql\"))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ADVICE.afterMethod(targetObject,executeMethod,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16b8233,new MethodInvocationResult())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "JDBCExecutionUnit executionUnit = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(tags.get(\"db.statement\"),is(\"select 1\"))@@@28@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertMethod['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(fields.get(ErrorLogTagKeys.EVENT),is(\"error\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ADVICE.beforeMethod(targetObject,executeMethod,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16b8217,new MethodInvocationResult())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND),is(\"java.io.IOException\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertExceptionHandle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertMethod['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "MockSpan span = spans.get(0)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Map<String,?> fields = entries.get(0).fields()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\",new SQLUnit(\"select 1\",Collections.emptyList())))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertThat(tags.get(\"span.kind\"),is(\"client\"))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(tags.get(\"db.instance\"),is(\"mock.db\"))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(spans.get(0).logEntries().isEmpty())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
0->3 [style = bold, label=""];
17->8 [style = bold, label=""];
2->19 [style = bold, label=""];
1->8 [style = bold, label=""];
8->15 [style = bold, label=""];
5->9 [style = bold, label=""];
11->14 [style = bold, label=""];
2->6 [style = bold, label=""];
3->11 [style = bold, label=""];
21->8 [style = bold, label=""];
12->5 [style = solid, label="executionUnit"];
15->4 [style = solid, label="extraMap"];
16->2 [style = bold, label=""];
24->22 [style = bold, label=""];
9->16 [style = bold, label=""];
15->5 [style = solid, label="extraMap"];
20->5 [style = bold, label=""];
10->18 [style = dashed, label="0"];
8->4 [style = solid, label="targetObject"];
23->24 [style = bold, label=""];
12->10 [style = bold, label=""];
18->4 [style = bold, label=""];
12->4 [style = solid, label="executionUnit"];
19->23 [style = bold, label=""];
6->13 [style = bold, label=""];
8->20 [style = solid, label="targetObject"];
8->5 [style = solid, label="targetObject"];
12->18 [style = bold, label=""];
4->20 [style = bold, label=""];
10->4 [style = bold, label=""];
22->6 [style = bold, label=""];
15->12 [style = bold, label=""];
6->7 [style = bold, label=""];
4->5 [style = bold, label=""];
12->20 [style = solid, label="executionUnit"];
15->20 [style = solid, label="extraMap"];
13->0 [style = bold, label=""];
}
