digraph {
5 [style = filled, label = "CopyableFile file = (CopyableFile)CopySource.deserializeCopyEntity(workUnit)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Extract extractBelow = null@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "state.setProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI,\"file:///\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Extract extract = workunits.get(0).getExtract()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(workunits.size(),TestCopyableDataset.FILE_COUNT)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "state.setProp(DatasetUtils.DATASET_PROFILE_CLASS_KEY,.getCanonicalName())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(workUnit.getProp(ServiceConfigKeys.WORK_UNIT_SIZE),String.valueOf(TestCopyableDataset.FILE_LENGTH))@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "List<WorkUnit> workunits = source.getWorkunits(state)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "workunits = JobLauncherUtils.flattenWorkUnits(workunits)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertNotNull(extractAbove)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testCopySource['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(workUnit.getExtract(),extractBelow)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Integer.parseInt(copyableFile.getOrigin().getPath().getName()) < TestCopyablePartitionableDataset.THRESHOLD@@@18@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testPartitionableDataset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "SourceState state = new SourceState()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "CopyableFile copyableFile = (CopyableFile)CopySource.deserializeCopyEntity(workUnit)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "CopySource source = new CopySource()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(workUnit.getExtract(),extractAbove)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "state.setProp(ConfigurationKeys.SOURCE_FILEBASED_FS_URI,\"file:///\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "extractAbove = workUnit.getExtract()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "extractBelow = workUnit.getExtract()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(copyableFile.getDestinationOwnerAndPermission(),TestCopyableDataset.OWNER_AND_PERMISSION)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(workUnit.getExtract(),extract)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Extract extractAbove = null@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(file.getDestinationOwnerAndPermission(),TestCopyableDataset.OWNER_AND_PERMISSION)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertTrue(copyableFile.getOrigin().getPath().toString().startsWith(TestCopyableDataset.ORIGIN_PREFIX))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertNotNull(extractBelow)@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "extractBelow == null@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertTrue(file.getOrigin().getPath().toString().startsWith(TestCopyableDataset.ORIGIN_PREFIX))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testCopySource['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "state.setProp(ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR,\"/target/dir\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "extractAbove == null@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "state.setProp(DatasetUtils.DATASET_PROFILE_CLASS_KEY,.getName())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
24->26 [style = solid, label="extractBelow"];
29->21 [style = bold, label=""];
12->0 [style = bold, label=""];
5->14 [style = bold, label=""];
22->30 [style = bold, label=""];
32->13 [style = bold, label=""];
28->19 [style = solid, label="extractAbove"];
9->11 [style = bold, label=""];
15->9 [style = bold, label=""];
24->22 [style = solid, label="extractBelow"];
18->27 [style = dotted, label="false"];
19->28 [style = bold, label=""];
18->22 [style = bold, label=""];
22->24 [style = bold, label=""];
0->7 [style = bold, label=""];
9->3 [style = solid, label="state"];
14->29 [style = dashed, label="0"];
27->23 [style = bold, label=""];
3->12 [style = solid, label="workunits"];
0->25 [style = bold, label=""];
4->32 [style = dashed, label="0"];
25->17 [style = bold, label=""];
24->30 [style = bold, label=""];
31->26 [style = bold, label=""];
7->25 [style = dashed, label="0"];
16->10 [style = bold, label=""];
11->2 [style = bold, label=""];
17->26 [style = solid, label="extractBelow"];
24->30 [style = solid, label="extractBelow"];
30->31 [style = bold, label=""];
6->9 [style = bold, label=""];
19->27 [style = bold, label=""];
28->27 [style = bold, label=""];
8->21 [style = dashed, label="0"];
28->31 [style = solid, label="extractAbove"];
25->27 [style = solid, label="extractAbove"];
7->10 [style = solid, label="extract"];
22->24 [style = dotted, label="true"];
3->12 [style = bold, label=""];
21->18 [style = bold, label=""];
18->19 [style = bold, label=""];
25->31 [style = solid, label="extractAbove"];
30->23 [style = bold, label=""];
17->30 [style = solid, label="extractBelow"];
2->1 [style = bold, label=""];
5->23 [style = dashed, label="0"];
18->30 [style = dotted, label="true"];
14->8 [style = bold, label=""];
1->4 [style = bold, label=""];
17->23 [style = bold, label=""];
13->3 [style = bold, label=""];
7->5 [style = bold, label=""];
4->13 [style = bold, label=""];
20->9 [style = bold, label=""];
18->19 [style = dotted, label="false"];
17->22 [style = solid, label="extractBelow"];
23->29 [style = bold, label=""];
18->22 [style = dotted, label="true"];
8->10 [style = bold, label=""];
10->5 [style = bold, label=""];
27->31 [style = bold, label=""];
19->28 [style = dotted, label="true"];
25->19 [style = solid, label="extractAbove"];
1->32 [style = bold, label=""];
28->27 [style = solid, label="extractAbove"];
}
