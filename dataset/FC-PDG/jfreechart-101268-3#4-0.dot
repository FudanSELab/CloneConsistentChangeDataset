digraph {
1 [style = filled, label = "double(( y1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@239430@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "DefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(d1.getClass() == d2.getClass())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "double(( x1Start = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@23941c@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DefaultIntervalXYDataset d2 = CloneUtils.clone(d1)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "testIterateToFindDomainBounds_IntervalXYDataset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "double(((( data1 = new double((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@23944e@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "x1(0( = 111.1@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "dataset.addSeries(\"S1\",data1)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "double(( x1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@239412@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "double(( x1End = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@239426@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(0.8,r.getLowerBound(),EPSILON)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertFalse(d1.equals(d2))@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(d1 != d2)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testCloning2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "DefaultIntervalXYDataset d1 = new DefaultIntervalXYDataset()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "d1.addSeries(\"S1\",data1)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(d1.equals(d2))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testCloning2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(3.2,r.getUpperBound(),EPSILON)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "double(( y1End = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@239444@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "double(( y1Start = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@23943a@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DefaultIntervalXYDataset d2 = (DefaultIntervalXYDataset)d1.clone()@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Range r = DatasetUtils.iterateToFindDomainBounds(dataset,Arrays.asList(\"S1\"),true)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
14->16 [style = bold, label=""];
11->15 [style = solid, label="x1End"];
16->0 [style = bold, label=""];
8->15 [style = bold, label=""];
12->5 [style = bold, label=""];
8->15 [style = solid, label="y1End"];
15->14 [style = bold, label=""];
11->1 [style = bold, label=""];
19->20 [style = bold, label=""];
12->15 [style = solid, label="x1"];
1->15 [style = solid, label="y1"];
16->4 [style = solid, label="d2"];
16->0 [style = solid, label="d2"];
15->19 [style = bold, label=""];
7->8 [style = bold, label=""];
1->7 [style = bold, label=""];
0->22 [style = dashed, label="0"];
2->4 [style = solid, label="d2"];
9->6 [style = bold, label=""];
20->22 [style = bold, label=""];
21->12 [style = bold, label=""];
3->9 [style = bold, label=""];
6->4 [style = bold, label=""];
5->15 [style = solid, label="x1Start"];
7->15 [style = solid, label="y1Start"];
2->0 [style = bold, label=""];
22->18 [style = bold, label=""];
13->12 [style = bold, label=""];
13->21 [style = dashed, label="0"];
13->0 [style = solid, label="d1"];
10->13 [style = bold, label=""];
23->21 [style = bold, label=""];
15->14 [style = solid, label="data1"];
2->16 [style = dashed, label="0"];
21->20 [style = solid, label="dataset"];
15->19 [style = solid, label="data1"];
16->9 [style = solid, label="d2"];
2->0 [style = solid, label="d2"];
13->16 [style = solid, label="d1"];
14->19 [style = dashed, label="0"];
5->11 [style = bold, label=""];
14->2 [style = bold, label=""];
17->13 [style = bold, label=""];
2->9 [style = solid, label="d2"];
}
