digraph {
1 [style = filled, label = "Assert.assertEquals(SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,task2.getIOConfig().getEndPartitions().getPartitionSequenceNumberMap().get(shardId1))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(\"0\",task2.getIOConfig().getStartSequenceNumbers().getPartitionSequenceNumberMap().get(shardId0))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(\"0\",task1.getIOConfig().getStartPartitions().getPartitionSequenceNumberMap().get(shardId0))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(2,task1.getIOConfig().getEndPartitions().getPartitionSequenceNumberMap().size())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,task2.getIOConfig().getEndSequenceNumbers().getPartitionSequenceNumberMap().get(shardId0))@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "supervisor.runInternal()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(2,task2.getIOConfig().getStartSequenceNumbers().getPartitionSequenceNumberMap().size())@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "supervisor.start()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "expect(taskQueue.add(capture(captured))).andReturn(true).times(2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "supervisorRecordSupplier.seek(anyObject(),anyString())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "supervisorRecordSupplier.assign(anyObject())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1H\",new Period(\"PT1H\"),null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "addSomeEvents(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertEquals(KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,task2.getIOConfig().getEndSequenceNumbers().getPartitionSequenceNumberMap().get(shardId1))@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Capture<KafkaIndexTask> captured = Capture.newInstance(CaptureType.ALL)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "expectLastCall().anyTimes()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectLastCall().anyTimes()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Capture<KinesisIndexTask> captured = Capture.newInstance(CaptureType.ALL)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expect(supervisorRecordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,task1.getIOConfig().getEndSequenceNumbers().getPartitionSequenceNumberMap().get(shardId1))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(\"0\",task1.getIOConfig().getStartPartitions().getPartitionSequenceNumberMap().get(shardId1))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(task1.getIOConfig().getMinimumMessageTime().get(),task2.getIOConfig().getMinimumMessageTime().get())@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(2,task1.getIOConfig().getStartSequenceNumbers().getPartitionSequenceNumberMap().size())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "Assert.assertEquals(\"0\",task1.getIOConfig().getStartSequenceNumbers().getPartitionSequenceNumberMap().get(shardId0))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true).times(2)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.absent()).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "verifyAll()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertTrue(\"minimumMessageTime\",task1.getIOConfig().getMinimumMessageTime().get().plusMinutes(61).isAfterNow())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(2,task2.getIOConfig().getStartPartitions().getPartitionSequenceNumberMap().size())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(2,task2.getIOConfig().getEndSequenceNumbers().getPartitionSequenceNumberMap().size())@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "KafkaIndexTask task2 = captured.getValues().get(1)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "supervisor.start()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "supervisorRecordSupplier.seekToLatest(anyObject())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Assert.assertEquals(2,task1.getIOConfig().getEndSequenceNumbers().getPartitionSequenceNumberMap().size())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testReplicas['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "KinesisIndexTask task2 = captured.getValues().get(1)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testLateMessageRejectionPeriod['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(\"0\",task2.getIOConfig().getStartPartitions().getPartitionSequenceNumberMap().get(shardId0))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "replayAll()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.absent()).anyTimes()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,task1.getIOConfig().getEndSequenceNumbers().getPartitionSequenceNumberMap().get(shardId0))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "KafkaIndexTask task1 = captured.getValues().get(0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "KinesisIndexTask task1 = captured.getValues().get(0)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1H\",null,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verifyAll()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(2,task2.getIOConfig().getEndPartitions().getPartitionSequenceNumberMap().size())@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(\"0\",task2.getIOConfig().getStartPartitions().getPartitionSequenceNumberMap().get(shardId1))@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,task1.getIOConfig().getEndPartitions().getPartitionSequenceNumberMap().get(shardId1))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(\"0\",task2.getIOConfig().getStartSequenceNumbers().getPartitionSequenceNumberMap().get(shardId1))@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "Assert.assertTrue(\"minimumMessageTime\",task1.getIOConfig().getMinimumMessageTime().get().plusMinutes(59).isBeforeNow())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(2,task1.getIOConfig().getStartPartitions().getPartitionSequenceNumberMap().size())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "expectLastCall().anyTimes()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(\"0\",task1.getIOConfig().getStartSequenceNumbers().getPartitionSequenceNumberMap().get(shardId1))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testReplicas['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "supervisor.runInternal()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,task1.getIOConfig().getEndPartitions().getPartitionSequenceNumberMap().get(shardId0))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,task2.getIOConfig().getEndPartitions().getPartitionSequenceNumberMap().get(shardId0))@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9->22 [style = bold, label=""];
8->30 [style = bold, label=""];
49->64 [style = bold, label=""];
27->38 [style = dashed, label="0"];
36->40 [style = bold, label=""];
56->52 [style = bold, label=""];
59->7 [style = bold, label=""];
10->31 [style = bold, label=""];
42->46 [style = bold, label=""];
1->43 [style = dashed, label="0"];
61->56 [style = bold, label=""];
19->12 [style = bold, label=""];
35->9 [style = bold, label=""];
18->34 [style = bold, label=""];
54->57 [style = bold, label=""];
26->1 [style = bold, label=""];
16->44 [style = dashed, label="0"];
22->29 [style = bold, label=""];
46->36 [style = bold, label=""];
51->53 [style = bold, label=""];
39->45 [style = bold, label=""];
4->47 [style = dashed, label="0"];
16->59 [style = dashed, label="0"];
45->13 [style = bold, label=""];
57->58 [style = bold, label=""];
16->17 [style = bold, label=""];
30->6 [style = bold, label=""];
15->3 [style = bold, label=""];
9->64 [style = dashed, label="0"];
32->26 [style = bold, label=""];
23->37 [style = dashed, label="0"];
5->25 [style = bold, label=""];
6->15 [style = bold, label=""];
20->33 [style = bold, label=""];
21->39 [style = dashed, label="0"];
0->7 [style = bold, label=""];
17->41 [style = dashed, label="0"];
18->42 [style = dashed, label="0"];
3->10 [style = bold, label=""];
28->2 [style = bold, label=""];
29->20 [style = bold, label=""];
27->4 [style = bold, label=""];
7->5 [style = bold, label=""];
2->0 [style = bold, label=""];
12->38 [style = bold, label=""];
13->37 [style = bold, label=""];
48->51 [style = bold, label=""];
63->55 [style = bold, label=""];
12->54 [style = dashed, label="0"];
32->36 [style = dashed, label="0"];
21->11 [style = bold, label=""];
34->46 [style = dashed, label="0"];
33->24 [style = bold, label=""];
11->13 [style = bold, label=""];
50->62 [style = bold, label=""];
25->19 [style = bold, label=""];
44->41 [style = bold, label=""];
13->23 [style = bold, label=""];
60->63 [style = bold, label=""];
38->47 [style = bold, label=""];
47->44 [style = bold, label=""];
62->48 [style = bold, label=""];
34->32 [style = bold, label=""];
14->9 [style = bold, label=""];
64->61 [style = bold, label=""];
52->50 [style = bold, label=""];
58->59 [style = bold, label=""];
31->28 [style = bold, label=""];
40->43 [style = bold, label=""];
24->8 [style = bold, label=""];
41->39 [style = bold, label=""];
53->60 [style = bold, label=""];
55->54 [style = bold, label=""];
4->58 [style = dashed, label="0"];
12->27 [style = bold, label=""];
17->21 [style = bold, label=""];
23->18 [style = bold, label=""];
26->40 [style = dashed, label="0"];
37->42 [style = bold, label=""];
4->16 [style = bold, label=""];
8->48 [style = dashed, label="0"];
11->45 [style = dashed, label="0"];
}
