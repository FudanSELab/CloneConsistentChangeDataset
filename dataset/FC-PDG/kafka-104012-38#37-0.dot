digraph {
22 [style = filled, label = "final List<TopicPartition> owned = Collections.emptyList()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertEquals(newAssignmentSet,subscriptions.assignedPartitions())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(getRevoked(owned,assigned),rebalanceListener.revoked)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertEquals(updatedSubscriptionSet,subscriptions.subscription())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "subscriptions.subscribe(Pattern.compile(\".*\"),rebalanceListener)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertFalse(coordinator.rejoinNeededOrPending())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "subscriptions.subscribe(singleton(topic1),rebalanceListener)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "client.prepareResponse(joinGroupFollowerResponse(2,\"consumer\",\"leader\",Errors.NONE))@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Set<TopicPartition> newAssignmentSet = new HashSet<>(newAssignment)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.assigned)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "subscriptions.subscribe(new HashSet<>(Arrays.asList(topic1,otherTopic)),rebalanceListener)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){final Map<String,Integer> updatedPartitions = new HashMap<>()for (String topic : updatedSubscription)updatedPartitions.put(topic,1)client.updateMetadata(TestUtils.metadataUpdateWith(1,updatedPartitions))return true}},syncGroupResponse(singletonList(t1p),Errors.NONE))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "final List<String> updatedSubscription = Arrays.asList(topic1,topic2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(getRevoked(assigned,assigned),rebalanceListener.revoked)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "List<TopicPartition> newAssignment = Arrays.asList(t1p,t2p)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testRejoinGroup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "rebalanceListener.revoked = null@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "client.prepareResponse(syncGroupResponse(assigned,Errors.NONE))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertTrue(rebalanceListener.revoked.isEmpty())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertEquals(1,rebalanceListener.assignedCount)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "client.updateMetadata(TestUtils.metadataUpdateWith(1,singletonMap(topic1,1)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Map<String,List<String>> initialSubscription = singletonMap(consumerId,singletonList(topic1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,newAssignment))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.revoked)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "client.prepareResponse(joinGroupFollowerResponse(2,\"consumer\",\"leader\",Errors.NONE))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "joinAsFollowerAndReceiveAssignment(\"consumer\",coordinator,assigned)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertEquals(getAdded(owned,assigned),rebalanceListener.assigned)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "coordinator.poll(time.timer(Long.MAX_VALUE))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "client.prepareResponse(syncGroupResponse(newAssignment,Errors.NONE))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String otherTopic = \"otherTopic\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "final Set<String> updatedSubscriptionSet = new HashSet<>(updatedSubscription)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final List<TopicPartition> assigned = Arrays.asList(t1p)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "coordinator.poll(time.timer(Long.MAX_VALUE))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){JoinGroupRequest join = (JoinGroupRequest)bodyIterator<JoinGroupRequestData.JoinGroupRequestProtocol> protocolIterator = join.data().protocols().iterator()assertTrue(protocolIterator.hasNext())JoinGroupRequestData.JoinGroupRequestProtocol protocolMetadata = protocolIterator.next()ByteBuffer metadata = ByteBuffer.wrap(protocolMetadata.metadata())PartitionAssignor.Subscription subscription = ConsumerProtocol.buildSubscription(metadata,Optional.empty())metadata.rewind()return subscription.topics().containsAll(updatedSubscriptionSet)}},joinGroupLeaderResponse(2,consumerId,updatedSubscriptions,Errors.NONE))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "subscriptions.subscribe(new HashSet<>(Arrays.asList(topic1,otherTopic)),rebalanceListener)@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "client.prepareResponse(joinGroupLeaderResponse(1,consumerId,initialSubscription,Errors.NONE))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "joinAsFollowerAndReceiveAssignment(\"consumer\",coordinator,singletonList(t1p))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,singletonList(t1p)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(getAdded(assigned,assigned),rebalanceListener.assigned)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertEquals(newAssignmentSet,rebalanceListener.assigned)@@@50@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Map<String,List<String>> updatedSubscriptions = singletonMap(consumerId,Arrays.asList(topic1,topic2))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testRejoinGroup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "rebalanceListener.assigned = null@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "coordinator.maybeUpdateSubscriptionMetadata()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "testMetadataRefreshDuringRebalance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertEquals(singleton(topic1),subscriptions.subscription())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(1,rebalanceListener.revokedCount)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final String consumerId = \"leader\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.assigned)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30->33 [style = solid, label="newAssignmentSet"];
56->29 [style = bold, label=""];
55->28 [style = solid, label="initialSubscription"];
11->14 [style = bold, label=""];
40->55 [style = solid, label="consumerId"];
0->19 [style = dashed, label="0"];
6->38 [style = dashed, label="0"];
40->34 [style = solid, label="consumerId"];
25->6 [style = bold, label=""];
40->38 [style = bold, label=""];
38->42 [style = bold, label=""];
12->21 [style = dashed, label="0"];
41->28 [style = bold, label=""];
55->48 [style = bold, label=""];
12->2 [style = bold, label=""];
40->28 [style = solid, label="consumerId"];
5->0 [style = bold, label=""];
17->14 [style = bold, label=""];
48->43 [style = bold, label=""];
50->45 [style = bold, label=""];
50->31 [style = solid, label="subscription"];
22->25 [style = bold, label=""];
28->37 [style = bold, label=""];
40->49 [style = solid, label="consumerId"];
27->12 [style = bold, label=""];
21->0 [style = bold, label=""];
27->19 [style = solid, label="assigned"];
19->20 [style = bold, label=""];
40->50 [style = solid, label="consumerId"];
14->22 [style = bold, label=""];
27->21 [style = solid, label="assigned"];
36->30 [style = solid, label="newAssignment"];
30->34 [style = bold, label=""];
43->41 [style = solid, label="updatedSubscription"];
0->7 [style = bold, label=""];
20->18 [style = bold, label=""];
26->27 [style = bold, label=""];
36->30 [style = bold, label=""];
39->52 [style = bold, label=""];
13->12 [style = bold, label=""];
25->23 [style = solid, label="assigned"];
26->19 [style = solid, label="revoked"];
47->54 [style = bold, label=""];
15->9 [style = bold, label=""];
1->16 [style = bold, label=""];
2->21 [style = bold, label=""];
54->44 [style = bold, label=""];
44->32 [style = bold, label=""];
31->33 [style = bold, label=""];
25->16 [style = solid, label="assigned"];
10->1 [style = bold, label=""];
36->49 [style = solid, label="newAssignment"];
14->6 [style = bold, label=""];
14->40 [style = dashed, label="0"];
8->16 [style = dashed, label="0"];
46->56 [style = bold, label=""];
1->8 [style = bold, label=""];
8->15 [style = bold, label=""];
14->12 [style = solid, label="otherTopic"];
34->49 [style = bold, label=""];
6->23 [style = bold, label=""];
14->3 [style = solid, label="otherTopic"];
42->47 [style = bold, label=""];
22->24 [style = solid, label="owned"];
7->4 [style = bold, label=""];
49->50 [style = bold, label=""];
24->26 [style = bold, label=""];
53->46 [style = bold, label=""];
51->40 [style = bold, label=""];
41->31 [style = solid, label="updatedSubscriptionSet"];
34->50 [style = solid, label="updatedSubscriptions"];
6->10 [style = bold, label=""];
41->50 [style = solid, label="updatedSubscriptionSet"];
9->3 [style = bold, label=""];
43->41 [style = bold, label=""];
37->35 [style = bold, label=""];
7->19 [style = bold, label=""];
10->23 [style = dashed, label="0"];
45->39 [style = bold, label=""];
2->5 [style = bold, label=""];
4->18 [style = dashed, label="0"];
16->15 [style = bold, label=""];
9->24 [style = dashed, label="0"];
36->45 [style = solid, label="newAssignment"];
40->48 [style = solid, label="consumerId"];
33->53 [style = bold, label=""];
30->29 [style = solid, label="newAssignmentSet"];
32->55 [style = bold, label=""];
25->24 [style = solid, label="assigned"];
43->37 [style = solid, label="updatedSubscription"];
15->24 [style = bold, label=""];
52->31 [style = bold, label=""];
3->13 [style = bold, label=""];
23->1 [style = bold, label=""];
35->36 [style = bold, label=""];
22->16 [style = solid, label="owned"];
4->29 [style = dashed, label="0"];
27->18 [style = solid, label="assigned"];
}
