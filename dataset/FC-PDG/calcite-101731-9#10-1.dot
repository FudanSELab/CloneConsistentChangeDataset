digraph {
0 [style = filled, label = "return builder.build()@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "flattenAnd['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Iterable<? extends RexNode> nodes@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Iterable<? extends RexNode> nodes@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final ImmutableList.Builder<RexNode> builder = ImmutableList.builder()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "nodes instanceof Collection && ((Collection)nodes).isEmpty()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "node != null@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "addAnd(builder,set,node)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final Set<String> digests = new HashSet<>()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Set<RexNode> set = new HashSet<>()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "flattenOr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "addOr(builder,digests,node)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "addAnd(builder,digests,node)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "return ImmutableList.of()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "flattenAnd['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "return builder.build()@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11->7 [style = dotted, label="true"];
4->9 [style = bold, label=""];
15->2 [style = bold, label=""];
1->10 [style = dotted, label="true"];
3->1 [style = bold, label=""];
4->6 [style = bold, label=""];
6->9 [style = dashed, label="0"];
1->3 [style = bold, label=""];
1->0 [style = bold, label=""];
2->4 [style = bold, label=""];
4->12 [style = solid, label="builder"];
11->2 [style = bold, label=""];
3->0 [style = bold, label=""];
15->13 [style = dotted, label="true"];
4->3 [style = solid, label="builder"];
1->3 [style = dotted, label="true"];
7->2 [style = solid, label="nodes"];
6->1 [style = bold, label=""];
1->12 [style = dashed, label="0"];
9->10 [style = solid, label="set"];
5->2 [style = bold, label=""];
5->7 [style = dotted, label="true"];
10->0 [style = bold, label=""];
4->10 [style = solid, label="builder"];
12->14 [style = bold, label=""];
7->13 [style = dashed, label="0"];
13->2 [style = solid, label="nodes"];
3->10 [style = dashed, label="0"];
8->4 [style = bold, label=""];
9->1 [style = bold, label=""];
10->1 [style = bold, label=""];
6->12 [style = solid, label="digests"];
1->10 [style = bold, label=""];
2->8 [style = dotted, label="true"];
2->8 [style = bold, label=""];
6->3 [style = solid, label="digests"];
6->12 [style = bold, label=""];
}
