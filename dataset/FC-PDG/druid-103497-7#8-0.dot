digraph {
12 [style = filled, label = "List<ResultRow> results = seq.toList()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(new File(.getClassLoader().getResource(\"sketch_test_data.tsv\").getFile()),readFileFromClasspathAsString(\"sketch_test_data_record_parser.json\"),readFileFromClasspathAsString(\"sketch_test_data_aggregators.json\"),0,Granularities.NONE,1000,groupByQuery)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testSketchDataIngestAndGpByQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(new File(.getClassLoader().getResource(\"empty_sketch_data.tsv\").getFile()),readFileFromClasspathAsString(\"empty_sketch_data_record_parser.json\"),readFileFromClasspathAsString(\"empty_sketch_test_data_aggregators.json\"),0,Granularities.NONE,5,groupByQuery)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(ResultRow.fromLegacyRow(new MapBasedRow(DateTimes.of(\"2014-10-19T00:00:00.000Z\"),ImmutableMap.builder().put(\"sids_sketch_count\",50.0).put(\"sids_sketch_count_with_err\",new SketchEstimateWithErrorBounds(50.0,50.0,50.0,2)).put(\"sketchEstimatePostAgg\",50.0).put(\"sketchEstimatePostAggWithErrorBounds\",new SketchEstimateWithErrorBounds(50.0,50.0,50.0,2)).put(\"sketchUnionPostAggEstimate\",50.0).put(\"sketchSummary\",expectedSummary).put(\"sketchIntersectionPostAggEstimate\",50.0).put(\"sketchAnotBPostAggEstimate\",0.0).put(\"non_existing_col_validation\",0.0).build()),groupByQuery),results.get(0))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final String expectedSummary = \"### HeapCompactOrderedSketch SUMMARY: \" + \" Estimate : 50.0\" + \" Upper Bound, 95% conf : 50.0\" + \" Lower Bound, 95% conf : 50.0\" + \" Theta (double) : 1.0\" + \" Theta (long) : 9223372036854775807\" + \" Theta (long) hex : 7fffffffffffffff\" + \" EstMode? : false\" + \" Empty? : false\" + \" Retained Entries : 50\" + \" Seed Hash : 93cc | 37836\" + \"### END SKETCH SUMMARY\"@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(ResultRow.fromLegacyRow(new MapBasedRow(DateTimes.of(\"2019-07-14T00:00:00.000Z\"),ImmutableMap.builder().put(\"product\",\"product_b\").put(\"sketch_count\",0.0).build()),groupByQuery),results.get(0))@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testSketchDataIngestAndGpByQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(1,results.size())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final String expectedSummary = \"### HeapCompactSketch SUMMARY: \" + \" Estimate : 50.0\" + \" Upper Bound, 95% conf : 50.0\" + \" Lower Bound, 95% conf : 50.0\" + \" Theta (double) : 1.0\" + \" Theta (long) : 9223372036854775807\" + \" Theta (long) hex : 7fffffffffffffff\" + \" EstMode? : false\" + \" Empty? : false\" + \" Retained Entries : 50\" + \" Seed Hash : 93cc | 37836\" + \"### END SKETCH SUMMARY\"@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testEmptySketchAggregateCombine['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final GroupByQuery groupByQuery = readQueryFromClasspath(\"sketch_test_data_group_by_query.json\",helper.getObjectMapper(),vectorize)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final GroupByQuery groupByQuery = readQueryFromClasspath(\"empty_sketch_group_by_query.json\",helper.getObjectMapper(),vectorize)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->0 [style = bold, label=""];
6->8 [style = bold, label=""];
3->1 [style = solid, label="groupByQuery"];
5->8 [style = dashed, label="0"];
4->3 [style = bold, label=""];
3->6 [style = bold, label=""];
6->5 [style = bold, label=""];
7->3 [style = bold, label=""];
11->12 [style = bold, label=""];
3->10 [style = dashed, label="0"];
9->10 [style = bold, label=""];
5->0 [style = bold, label=""];
12->0 [style = bold, label=""];
3->6 [style = solid, label="groupByQuery"];
2->1 [style = bold, label=""];
10->2 [style = solid, label="groupByQuery"];
10->11 [style = solid, label="groupByQuery"];
0->2 [style = bold, label=""];
6->11 [style = dashed, label="0"];
10->11 [style = bold, label=""];
}
