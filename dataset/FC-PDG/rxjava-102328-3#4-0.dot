digraph {
1 [style = filled, label = "Subscriber<String> subscriber = TestHelper.mockSubscriber()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "InOrder inOrder = inOrder(subscriber)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "inOrder.verify(subscriber,times(1 + numFailures)).onNext(\"beginningEveryTime\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "inOrder.verify(subscriber,never()).onError(any())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "InOrder inOrder = inOrder(subscriber)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numRetries))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "origin.retry(3).subscribe(subscriber)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "retrySuccess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "origin.retry().subscribe(new TestSubscriber<>(subscriber))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "inOrder.verify(subscriber,times(1)).onComplete()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "origin.retry().subscribe(new TestSubscriber<String>(subscriber))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "inOrder.verifyNoMoreInteractions()@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "inOrder.verify(subscriber,times(1)).onNext(\"onSuccessOnly\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "retryIndefinitely['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numFailures))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "int numFailures = 1@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Subscriber<String> subscriber = TestHelper.mockSubscriber()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "retryIndefinitely['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "inOrder.verify(subscriber,never()).onError(any())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->13 [style = bold, label=""];
7->11 [style = bold, label=""];
3->1 [style = bold, label=""];
3->11 [style = solid, label="subscriber"];
14->15 [style = solid, label="numFailures"];
1->15 [style = bold, label=""];
6->11 [style = dashed, label="0"];
1->7 [style = bold, label=""];
3->6 [style = solid, label="subscriber"];
14->1 [style = bold, label=""];
3->10 [style = solid, label="subscriber"];
8->17 [style = bold, label=""];
2->0 [style = bold, label=""];
17->0 [style = bold, label=""];
10->8 [style = bold, label=""];
8->2 [style = bold, label=""];
0->4 [style = bold, label=""];
11->10 [style = bold, label=""];
1->18 [style = solid, label="subscriber"];
6->10 [style = bold, label=""];
7->6 [style = bold, label=""];
9->3 [style = bold, label=""];
16->14 [style = bold, label=""];
12->3 [style = bold, label=""];
18->8 [style = bold, label=""];
4->5 [style = bold, label=""];
1->13 [style = solid, label="subscriber"];
1->7 [style = solid, label="numRetries"];
13->18 [style = bold, label=""];
}
