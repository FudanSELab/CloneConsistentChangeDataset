digraph {
16 [style = filled, label = "return result@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "String operator = null != ctx.NOT()? \"NOT LIKE\": \"LIKE\"@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.bitExpr(1))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.bitExpr(0))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "right.getItems().add((ExpressionSegment)visit(each))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final PredicateContext ctx@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "createBinaryOperationExpressionFromRegexp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "ListExpression right = new ListExpression(ctx.simpleExpr(0).start.getStartIndex(),ctx.simpleExpr().get(ctx.simpleExpr().size() - 1).stop.getStopIndex())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "createBinaryOperationExpressionFromLike['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "createBinaryOperationExpressionFromRegexp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String operator = null != ctx.NOT()? \"NOT REGEXP\": \"REGEXP\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "return result@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final PredicateContext ctx@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
14->16 [style = bold, label=""];
0->14 [style = solid, label="left"];
5->9 [style = bold, label=""];
15->14 [style = bold, label=""];
4->17 [style = dashed, label="0"];
0->12 [style = bold, label=""];
3->9 [style = solid, label="right"];
11->14 [style = solid, label="operator"];
14->16 [style = solid, label="result"];
1->9 [style = dashed, label="0"];
6->0 [style = bold, label=""];
15->14 [style = solid, label="text"];
13->11 [style = bold, label=""];
0->9 [style = solid, label="left"];
8->4 [style = dotted, label="true"];
11->15 [style = bold, label=""];
0->1 [style = solid, label="left"];
3->1 [style = solid, label="right"];
10->17 [style = dotted, label="true"];
8->0 [style = bold, label=""];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
7->5 [style = bold, label=""];
7->9 [style = solid, label="operator"];
6->4 [style = dotted, label="true"];
3->7 [style = bold, label=""];
5->1 [style = solid, label="text"];
10->0 [style = bold, label=""];
1->2 [style = bold, label=""];
12->14 [style = solid, label="right"];
1->2 [style = solid, label="result"];
7->1 [style = solid, label="operator"];
5->9 [style = solid, label="text"];
}
