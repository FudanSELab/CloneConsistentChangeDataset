digraph {
8 [style = filled, label = "assertEquals(\"optional_string: \"\n\n\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"\").build()))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "TestAllTypes message = TestAllTypes.newBuilder().setOptionalString(\"testnewlinesinstring\").build()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"optional_string: \"\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"\").build()))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertThat(TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"testnewlinesinstring\").build())).isEqualTo(\"optional_string: \"\ntest\nnewlines\n\nin\nstring\n\"\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(\"optional_string: \"\n\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"\").build()))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "testPrintToUnicodeStringWithNewlines['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"\").build())).isEqualTo(\"optional_string: \"\n\n\"\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(builder.getOptionalString()).isEqualTo(message.getOptionalString())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "TextFormat.merge(TextFormat.printer().escapingNonAscii(false).printToString(message),builder)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TestAllTypes.Builder builder = TestAllTypes.newBuilder()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TestAllTypes.Builder builder = TestAllTypes.newBuilder()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"optional_string: \"abcあefg\"\" + \"optional_bytes: \"\343\201\202\"\" + \"repeated_string: \"んXYZ\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"abcあefg\").setOptionalBytes(bytes(0xe3,0x81,0x82)).addRepeatedString(\"んXYZ\").build()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(message.getOptionalString(),builder.getOptionalString())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testPrintToUnicodeString['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(\"optional_string: \"a\\bc\\\"ef\\\"g\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"a\bc\"ef\"g\").build()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"optional_string: \"\ntest\nnewlines\n\nin\nstring\n\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"testnewlinesinstring\").build()))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "TestAllTypes message = TestAllTypes.newBuilder().setOptionalString(\"a\bc\\\"ef\"g\").build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"test newlinesinstring\").build())).isEqualTo(\"optional_string: \"test newlines\n\nin\nstring\"\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testPrintToUnicodeStringWithNewlines['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"\").build())).isEqualTo(\"optional_string: \"\n\"\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(message.getOptionalString(),builder.getOptionalString())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"optional_string: \"test newlines\n\nin\nstring\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"test newlinesinstring\").build()))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "TextFormat.merge(TextFormat.printer().escapingNonAscii(false).printToString(message),builder)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"\").build())).isEqualTo(\"optional_string: \"\"\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2->23 [style = dashed, label="0"];
4->9 [style = bold, label=""];
16->13 [style = bold, label=""];
4->9 [style = solid, label="builder"];
10->14 [style = bold, label=""];
3->21 [style = dashed, label="0"];
0->19 [style = dashed, label="0"];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
12->11 [style = bold, label=""];
3->6 [style = bold, label=""];
1->0 [style = bold, label=""];
7->4 [style = bold, label=""];
8->14 [style = dashed, label="0"];
17->22 [style = bold, label=""];
8->7 [style = bold, label=""];
14->7 [style = bold, label=""];
6->10 [style = dashed, label="0"];
2->12 [style = dashed, label="0"];
22->18 [style = bold, label=""];
13->12 [style = bold, label=""];
21->22 [style = solid, label="message"];
23->21 [style = bold, label=""];
11->10 [style = bold, label=""];
9->15 [style = bold, label=""];
19->23 [style = bold, label=""];
0->13 [style = dashed, label="0"];
6->8 [style = bold, label=""];
9->5 [style = bold, label=""];
7->9 [style = solid, label="message"];
17->22 [style = solid, label="builder"];
20->19 [style = bold, label=""];
5->15 [style = dashed, label="0"];
21->17 [style = bold, label=""];
3->11 [style = dashed, label="0"];
}
