digraph {
17 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "inOrderStreams.verify(streamOne,times(2)).flush()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(cos.size()).isEqualTo(2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "cos.flush()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(cos.size()).isEqualTo(0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "cos.addOutputStream(streamOne)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "cos.close()@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1079c0,2,3)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testNewCompositeOutputStreamWithTwoStreams['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testAddOneOutputStreamWhenEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@107920)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@26@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertThat(cos.isEmpty()).isTrue()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "cos.flush()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@107944,2,3)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(0)@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "cos.write(9)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testNewCompositeOutputStreamWithTwoStreams['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "cos.write(9)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1079d3)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10795d,0,2)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(4)@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(1)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final OutputStream streamTwo = mock(,\"streamTwo\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->17 [style = bold, label=""];
14->3 [style = bold, label=""];
8->10 [style = bold, label=""];
0->16 [style = bold, label=""];
1->4 [style = bold, label=""];
13->32 [style = bold, label=""];
24->19 [style = bold, label=""];
17->1 [style = bold, label=""];
15->14 [style = bold, label=""];
16->8 [style = bold, label=""];
22->19 [style = bold, label=""];
28->30 [style = bold, label=""];
9->11 [style = solid, label="streamTwo"];
26->29 [style = bold, label=""];
11->21 [style = bold, label=""];
9->15 [style = solid, label="streamTwo"];
34->33 [style = bold, label=""];
19->33 [style = solid, label="streamOne"];
11->12 [style = bold, label=""];
30->34 [style = bold, label=""];
27->6 [style = bold, label=""];
12->21 [style = dashed, label="0"];
3->0 [style = bold, label=""];
20->5 [style = bold, label=""];
19->15 [style = solid, label="streamOne"];
33->0 [style = bold, label=""];
29->2 [style = bold, label=""];
21->20 [style = bold, label=""];
17->20 [style = dashed, label="0"];
19->9 [style = bold, label=""];
18->6 [style = bold, label=""];
0->25 [style = bold, label=""];
9->15 [style = bold, label=""];
19->27 [style = solid, label="streamOne"];
5->13 [style = bold, label=""];
25->26 [style = bold, label=""];
12->18 [style = bold, label=""];
13->23 [style = bold, label=""];
10->2 [style = bold, label=""];
19->28 [style = bold, label=""];
11->27 [style = dashed, label="0"];
7->19 [style = bold, label=""];
4->5 [style = bold, label=""];
12->27 [style = bold, label=""];
2->11 [style = bold, label=""];
32->31 [style = bold, label=""];
19->11 [style = solid, label="streamOne"];
3->25 [style = dashed, label="0"];
}
