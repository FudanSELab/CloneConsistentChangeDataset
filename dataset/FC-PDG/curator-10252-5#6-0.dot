digraph {
22 [style = filled, label = "Assert.assertTrue(lock.readLock().acquire(5,TimeUnit.SECONDS))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "lock.readLock().release()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "f1.get()@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "client.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "InterProcessReadWriteLock lock = new InterProcessReadWriteLock(client,\"/lock\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "ExecutorService t1 = Executors.newSingleThreadExecutor()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testThatDowngradingRespectsThreads['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final CountDownLatch releaseLatch = new CountDownLatch(1)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ExecutorService t2 = Executors.newSingleThreadExecutor()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Future<Object> f1 = t1.submit(new Callable<Object>(){@Override public Object call(){lock.writeLock().acquire()latch.countDown()try {releaseLatch.await()}{lock.writeLock().release()}return null}})@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final InterProcessReadWriteLock lock = new InterProcessReadWriteLock(client,\"/lock\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "{TestCleanState.closeAndTestClean(client)}@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testThatDowngradingRespectsThreads['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "testDowngrading['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "lock.writeLock().acquire()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "lock.writeLock().release()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "f2.get()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Future<Object> f2 = t2.submit(new Callable<Object>(){@Override public Object call(){Assert.assertTrue(latch.await(10,TimeUnit.SECONDS))Assert.assertFalse(lock.readLock().acquire(5,TimeUnit.SECONDS))return null}})@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "f1.get()@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "releaseLatch.countDown()@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->3 [style = bold, label=""];
0->9 [style = bold, label=""];
4->14 [style = bold, label=""];
0->7 [style = solid, label="client"];
0->20 [style = solid, label="client"];
21->0 [style = bold, label=""];
22->16 [style = bold, label=""];
11->4 [style = bold, label=""];
7->20 [style = dashed, label="0"];
9->20 [style = bold, label=""];
19->17 [style = bold, label=""];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
16->19 [style = bold, label=""];
15->5 [style = bold, label=""];
0->17 [style = solid, label="client"];
0->5 [style = solid, label="client"];
20->18 [style = bold, label=""];
8->1 [style = bold, label=""];
3->10 [style = bold, label=""];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
18->22 [style = bold, label=""];
10->4 [style = bold, label=""];
14->15 [style = bold, label=""];
12->3 [style = bold, label=""];
4->5 [style = bold, label=""];
13->0 [style = bold, label=""];
10->11 [style = bold, label=""];
6->12 [style = bold, label=""];
}
