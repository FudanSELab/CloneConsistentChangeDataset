digraph {
14 [style = filled, label = "EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(partition1,1L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "EasyMock.replay(stateManager)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expectLastCall().once()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "task.postCommit(true)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "task.suspend()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "task.initializeIfNeeded()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "EasyMock.expectLastCall().andThrow(new AssertionError(\"Should not have tried to checkpoint\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.verify(stateManager)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "shouldCheckpointForSuspendedTask['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "shouldSkipCheckpointingSuspendedCreatedTask['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "EasyMock.replay(stateManager,recordCollector)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "shouldSkipCheckpointingSuspendedCreatedTask['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "task.postCommit(true)@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "EasyMock.expect(recordCollector.offsets()).andReturn(emptyMap()).anyTimes()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "stateManager.checkpoint()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.replay(stateManager)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "task = createStatefulTask(createConfig(\"100\"),true)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
15->14 [style = bold, label=""];
7->10 [style = bold, label=""];
2->6 [style = bold, label=""];
11->6 [style = bold, label=""];
8->3 [style = bold, label=""];
3->15 [style = bold, label=""];
3->4 [style = bold, label=""];
4->7 [style = bold, label=""];
5->2 [style = bold, label=""];
13->3 [style = bold, label=""];
6->16 [style = bold, label=""];
4->15 [style = dashed, label="0"];
10->2 [style = bold, label=""];
4->1 [style = bold, label=""];
6->9 [style = bold, label=""];
1->7 [style = dashed, label="0"];
16->12 [style = bold, label=""];
2->11 [style = bold, label=""];
14->5 [style = bold, label=""];
}
