digraph {
7 [style = filled, label = "invokeCalculateRangesToFetchWithPreferredEndpoints(calculateStreamAndFetchRangesMoveForwardBetween().right,constructTMDsMoveForwardBetween(),expectedResult.asImmutableView())@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectedResult.put(fullReplica(aAddress,sixToken,sevenToken),fullReplica(dAddress,sixToken,nineToken))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "InetAddressAndPort cOrBAddress = (downNodes.contains(cAddress) || sourceFilterDownNodes.contains(cAddress))? bAddress: cAddress@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "invokeCalculateRangesToFetchWithPreferredEndpoints(calculateStreamAndFetchRangesMoveForward().right,constructTMDsMoveForward(),expectedResult.asImmutableView())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expectedResult.put(fullReplica(aAddress,sixToken,sevenToken),transientReplica(eAddress,sixToken,nineToken))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "expectedResult.put(fullReplica(address01,threeToken,sixToken),transientReplica(address04,threeToken,sixToken))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testMoveForwardCalculateRangesToFetchWithPreferredEndpoints['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "expectedResult.put(fullReplica(address01,threeToken,sixToken),fullReplica(cOrB,threeToken,sixToken))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testMoveForwardBetweenCalculateRangesToFetchWithPreferredEndpoints['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testMoveForwardBetweenCalculateRangesToFetchWithPreferredEndpoints['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "expectedResult.put(fullReplica(aAddress,threeToken,fourToken),fullReplica(cOrBAddress,threeToken,sixToken))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "EndpointsByReplica.Mutable expectedResult = new EndpointsByReplica.Mutable()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "InetAddressAndPort cOrB = (downNodes.contains(address03) || sourceFilterDownNodes.contains(address03))? address02: address03@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "expectedResult.put(fullReplica(address01,sixToken,sevenToken),fullReplica(address04,sixToken,nineToken))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "expectedResult.put(fullReplica(address01,sixToken,sevenToken),transientReplica(address05,sixToken,nineToken))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "InetAddressAndPort cOrB = (downNodes.contains(cAddress) || sourceFilterDownNodes.contains(cAddress))? bAddress: cAddress@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "expectedResult.put(fullReplica(aAddress,threeToken,sixToken),fullReplica(cOrB,threeToken,sixToken))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "expectedResult.put(fullReplica(aAddress,threeToken,fourToken),transientReplica(dAddress,threeToken,sixToken))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expectedResult.put(fullReplica(aAddress,threeToken,sixToken),transientReplica(dAddress,threeToken,sixToken))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->5 [style = bold, label=""];
6->3 [style = bold, label=""];
18->14 [style = solid, label="cOrBAddress"];
17->6 [style = bold, label=""];
2->6 [style = bold, label=""];
6->18 [style = bold, label=""];
3->18 [style = dashed, label="0"];
9->8 [style = bold, label=""];
15->16 [style = bold, label=""];
3->1 [style = solid, label="cOrB"];
0->10 [style = dashed, label="0"];
3->0 [style = bold, label=""];
12->8 [style = solid, label="cOrB"];
0->14 [style = dashed, label="0"];
4->9 [style = dashed, label="0"];
12->10 [style = bold, label=""];
3->12 [style = dashed, label="0"];
5->11 [style = dashed, label="0"];
0->4 [style = bold, label=""];
4->15 [style = dashed, label="0"];
5->7 [style = bold, label=""];
1->8 [style = dashed, label="0"];
14->15 [style = bold, label=""];
4->1 [style = bold, label=""];
10->9 [style = bold, label=""];
13->6 [style = bold, label=""];
8->11 [style = bold, label=""];
18->14 [style = bold, label=""];
11->7 [style = bold, label=""];
6->12 [style = bold, label=""];
}
