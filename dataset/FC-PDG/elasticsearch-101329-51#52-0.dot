digraph {
29 [style = filled, label = "{setState(841)_la = _input.LA(1)if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0))) {_errHandler.recoverInline(this)}{consume()}}@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "int _startState = 70@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "int _la@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "RecognitionException re@@@178@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "RecognitionException re@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "_errHandler.recover(this,re)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "_localctx.exception = re@@@179@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "enterOuterAlt(_localctx,1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return _localctx@@@186@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "_errHandler.reportError(this,re)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "int _startState = 68@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "int _la@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx,_parentState)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int _p@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "enterOuterAlt(_localctx,1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "_localctx.exception = re@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "{unrollRecursionContexts(_parentctx)}@@@183@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ParserRuleContext _parentctx = _ctx@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "return _localctx@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "int _parentState = getState()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "enterRecursionRule(_localctx,70,RULE_primaryExpression,_p)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "NonReservedContext _localctx = new NonReservedContext(_ctx,getState())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "nonReserved['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "enterRecursionRule(_localctx,68,RULE_primaryExpression,_p)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "primaryExpression['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int _alt@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "{setState(668)_errHandler.sync(this)switch (getInterpreter().adaptivePredict(_input,91,_ctx)) {case 1:{_localctx = new CastContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(633)castExpression()}breakcase 2:{_localctx = new ExtractContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(634)extractExpression()}breakcase 3:{_localctx = new CurrentDateTimeFunctionContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(635)builtinDateTimeFunction()}breakcase 4:{_localctx = new ConstantDefaultContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(636)constant()}breakcase 5:{_localctx = new StarContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(640)_la = _input.LA(1)if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)))) != 0) || _la == QUOTED_IDENTIFIER || _la == BACKQUOTED_IDENTIFIER) {{setState(637)qualifiedName()setState(638)match(DOT)}}setState(642)match(ASTERISK)}breakcase 6:{_localctx = new FunctionContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(643)functionExpression()}breakcase 7:{_localctx = new SubqueryExpressionContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(644)match(T__0)setState(645)query()setState(646)match(T__1)}breakcase 8:{_localctx = new DereferenceContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(648)qualifiedName()}breakcase 9:{_localctx = new ParenthesizedExpressionContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(649)match(T__0)setState(650)expression()setState(651)match(T__1)}breakcase 10:{_localctx = new CaseContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(653)match(CASE)setState(655)_la = _input.LA(1)if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DECIMAL_VALUE - 130)) | (1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {{setState(654)((CaseContext)_localctx).operand = booleanExpression(0)}}setState(658)_errHandler.sync(this)_la = _input.LA(1)setState(664)_la = _input.LA(1)if (_la == ELSE) {{setState(662)match(ELSE)setState(663)((CaseContext)_localctx).elseClause = booleanExpression(0)}}setState(666)match(END)}break_ctx.stop = _input.LT(-1)setState(675)_errHandler.sync(this)_alt = getInterpreter().adaptivePredict(_input,92,_ctx)while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {if (_alt == 1) {if (_parseListeners != null) triggerExitRuleEvent()_prevctx = _localctx{{_localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx,_parentState))pushNewRecursionContext(_localctx,_startState,RULE_primaryExpression)setState(670)if (!(precpred(_ctx,10))) throw new FailedPredicateException(this,\"precpred(_ctx, 10)\")setState(671)match(CAST_OP)setState(672)dataType()}}}setState(677)_errHandler.sync(this)_alt = getInterpreter().adaptivePredict(_input,92,_ctx)}}@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "{exitRule()}@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "_errHandler.reportError(this,re)@@@180@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "enterRule(_localctx,116,RULE_nonReserved)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "primaryExpression['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "PrimaryExpressionContext _prevctx = _localctx@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "_errHandler.recover(this,re)@@@181@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->20 [style = dashed, label="0"];
17->5 [style = solid, label="_localctx"];
0->16 [style = bold, label=""];
30->24 [style = bold, label=""];
32->22 [style = bold, label=""];
22->25 [style = bold, label=""];
10->6 [style = dotted, label="true"];
12->23 [style = dashed, label="0"];
17->8 [style = solid, label="_localctx"];
17->18 [style = solid, label="_localctx"];
28->30 [style = bold, label=""];
19->12 [style = bold, label=""];
11->5 [style = solid, label="_alt"];
1->15 [style = bold, label=""];
17->1 [style = solid, label="_localctx"];
18->15 [style = bold, label=""];
20->5 [style = solid, label="_startState"];
4->7 [style = dotted, label="true"];
12->5 [style = solid, label="_parentctx"];
31->21 [style = bold, label=""];
24->29 [style = bold, label=""];
1->18 [style = dashed, label="0"];
19->7 [style = dotted, label="true"];
7->18 [style = solid, label="_p"];
10->6 [style = bold, label=""];
23->24 [style = solid, label="_localctx"];
2->13 [style = bold, label=""];
6->2 [style = bold, label=""];
23->28 [style = bold, label=""];
20->18 [style = bold, label=""];
26->31 [style = dotted, label="true"];
26->31 [style = bold, label=""];
3->17 [style = solid, label="_parentState"];
3->5 [style = solid, label="_parentState"];
15->11 [style = bold, label=""];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
10->13 [style = dotted, label="true"];
10->2 [style = dotted, label="true"];
17->14 [style = bold, label=""];
26->21 [style = dotted, label="true"];
26->32 [style = dotted, label="true"];
7->1 [style = solid, label="_p"];
21->32 [style = bold, label=""];
23->28 [style = solid, label="_localctx"];
4->12 [style = bold, label=""];
23->25 [style = solid, label="_localctx"];
3->17 [style = bold, label=""];
11->8 [style = bold, label=""];
14->9 [style = bold, label=""];
27->23 [style = bold, label=""];
12->3 [style = bold, label=""];
12->0 [style = solid, label="_parentctx"];
15->5 [style = solid, label="_la"];
29->22 [style = bold, label=""];
9->1 [style = bold, label=""];
5->16 [style = solid, label="_localctx"];
9->5 [style = solid, label="_startState"];
17->14 [style = solid, label="_localctx"];
14->20 [style = bold, label=""];
13->0 [style = bold, label=""];
}
