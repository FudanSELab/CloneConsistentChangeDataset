digraph {
16 [style = filled, label = "assertEquals(6,processor.processed.size())@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "testTransformWithNewDriverAndPunctuator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final int(( expectedKeys = {1,10,100,1000}@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "KStream<Integer,Integer> stream = builder.stream(topicName,Consumed.with(intSerde,intSerde))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "int i = 0@@@46@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i < expected.length@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testTransform['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "kstreamDriver.punctuate(3)@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "TransformerSupplier<Number,Number,KeyValue<Integer,Integer>> transformerSupplier = new TransformerSupplier<Number,Number,KeyValue<Integer,Integer>>(){public Transformer<Number,Number,KeyValue<Integer,Integer>> get(){return new Transformer<Number,Number,KeyValue<Integer,Integer>>(){@Override public void init(final ProcessorContext context){context.schedule(1,PunctuationType.WALL_CLOCK_TIME,new Punctuator(){@Override public void punctuate(long timestamp){context.forward(-1,(int)timestamp)}})}@Override public KeyValue<Integer,Integer> transform(Number key,Number value){total += value.intValue()return KeyValue.pair(key.intValue() * 2,total)}@Override public KeyValue<Integer,Integer> punctuate(long timestamp){return null}@Override public void close(){}}}}@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "driver.advanceWallClockTime(1)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(expected(i(,processor.theCapturedProcessor().processed.get(i))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "String(( expected = {\"2:10\",\"20:110\",\"200:1110\",\"2000:11110\",\"-1:2\",\"-1:3\"}@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "MockProcessorSupplier<Integer,Integer> processor = new MockProcessorSupplier<>()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final int(( expectedKeys = {1,10,100,1000}@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(6,processor.processed.size())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "kstreamDriver.punctuate(2)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "driver.advanceWallClockTime(2)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "driver = new TopologyTestDriver(builder.build(),props,0L)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testTransform['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "KStream<Integer,Integer> stream = builder.stream(topicName,Consumed.with(intSerde,intSerde))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i++@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "driver.pipeInput(recordFactory.create(topicName,expectedKey,expectedKey * 10,0L))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "i < expected.length@@@47@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "stream.transform(transformerSupplier).process(processor)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "i++@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "String(( expected = {\"2:10\",\"20:110\",\"200:1110\",\"2000:11110\"}@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(expected(i(,processor.processed.get(i))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final TransformerSupplier<Number,Number,KeyValue<Integer,Integer>> transformerSupplier = new TransformerSupplier<Number,Number,KeyValue<Integer,Integer>>(){public Transformer<Number,Number,KeyValue<Integer,Integer>> get(){return new Transformer<Number,Number,KeyValue<Integer,Integer>>(){@Override public void init(final ProcessorContext context){}@Override public KeyValue<Integer,Integer> transform(final Number key,final Number value){total += value.intValue()return KeyValue.pair(key.intValue() * 2,total)}@Override public void close(){}}}}@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "stream.transform(transformerSupplier).process(processor)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->20 [style = dashed, label="0"];
14->3 [style = bold, label=""];
8->26 [style = solid, label="expected"];
8->11 [style = solid, label="i"];
2->3 [style = solid, label="expected"];
3->22 [style = solid, label="i"];
7->17 [style = bold, label=""];
10->15 [style = bold, label=""];
8->3 [style = solid, label="i"];
15->12 [style = solid, label="processor"];
27->12 [style = bold, label=""];
11->14 [style = bold, label=""];
0->6 [style = bold, label=""];
17->6 [style = bold, label=""];
25->23 [style = bold, label=""];
8->18 [style = solid, label="i"];
3->18 [style = dashed, label="0"];
9->4 [style = bold, label=""];
18->11 [style = bold, label=""];
8->3 [style = bold, label=""];
15->24 [style = dashed, label="0"];
3->11 [style = bold, label=""];
22->29 [style = bold, label=""];
28->7 [style = bold, label=""];
8->14 [style = bold, label=""];
5->15 [style = bold, label=""];
11->3 [style = solid, label="i"];
7->0 [style = bold, label=""];
12->24 [style = bold, label=""];
16->2 [style = bold, label=""];
23->8 [style = bold, label=""];
12->9 [style = bold, label=""];
29->26 [style = dotted, label="true"];
20->25 [style = bold, label=""];
3->29 [style = solid, label="i"];
0->17 [style = dashed, label="0"];
12->21 [style = dashed, label="0"];
26->22 [style = bold, label=""];
7->15 [style = solid, label="builder"];
29->26 [style = bold, label=""];
22->26 [style = solid, label="i"];
4->25 [style = dashed, label="0"];
29->22 [style = dotted, label="true"];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
12->2 [style = bold, label=""];
21->20 [style = bold, label=""];
24->21 [style = bold, label=""];
8->14 [style = solid, label="i"];
3->26 [style = solid, label="i"];
13->7 [style = bold, label=""];
5->10 [style = solid, label="processor"];
11->14 [style = solid, label="i"];
14->3 [style = dotted, label="true"];
14->11 [style = dotted, label="true"];
14->18 [style = bold, label=""];
22->29 [style = solid, label="i"];
15->12 [style = bold, label=""];
2->18 [style = solid, label="expected"];
1->10 [style = bold, label=""];
15->27 [style = bold, label=""];
19->7 [style = bold, label=""];
14->18 [style = dotted, label="true"];
3->29 [style = bold, label=""];
4->16 [style = bold, label=""];
11->18 [style = solid, label="i"];
2->8 [style = bold, label=""];
0->5 [style = bold, label=""];
}
