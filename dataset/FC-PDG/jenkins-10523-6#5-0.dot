digraph {
4 [style = filled, label = "Assert.assertEquals(42,project.getEstimatedDuration())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(\"Expected < 42, but was \" + project.getEstimatedDuration(),project.getEstimatedDuration() < 42)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final SortedMap<Integer,TestBuild> runs = new TreeMap<Integer,TestBuild>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testGetEstimatedDuration['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "runs.put(2,previousBuild)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testGetEstimatedDurationWithOneRun['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testGetEstimatedDurationWithOneRun['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Job project = createMockProject(runs)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestBuild previousBuild = new TestBuild(project,Result.SUCCESS,15,previousPreviousBuild)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TestBuild lastBuild = new TestBuild(project,Result.SUCCESS,42,previousBuild)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertTrue(\"Expected > 15, but was \" + project.getEstimatedDuration(),project.getEstimatedDuration() > 15)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "runs.put(1,lastBuild)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TestBuild previousPreviousBuild = new TestBuild(project,Result.SUCCESS,20,null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "runs.put(3,previousPreviousBuild)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "runs.put(1,lastBuild)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(42,project.getEstimatedDuration())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "TestBuild lastBuild = new TestBuild(project,Result.SUCCESS,42,null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->10 [style = bold, label=""];
8->16 [style = bold, label=""];
12->8 [style = solid, label="lastBuild"];
16->13 [style = bold, label=""];
9->12 [style = solid, label="previousBuild"];
4->16 [style = dashed, label="0"];
9->11 [style = bold, label=""];
10->14 [style = bold, label=""];
9->11 [style = solid, label="previousBuild"];
2->3 [style = bold, label=""];
11->12 [style = bold, label=""];
3->4 [style = bold, label=""];
10->9 [style = solid, label="previousPreviousBuild"];
2->10 [style = dashed, label="0"];
1->5 [style = solid, label="runs"];
6->1 [style = bold, label=""];
5->2 [style = bold, label=""];
5->9 [style = solid, label="project"];
5->2 [style = solid, label="project"];
3->7 [style = bold, label=""];
4->7 [style = dashed, label="0"];
12->8 [style = bold, label=""];
0->1 [style = bold, label=""];
2->3 [style = solid, label="lastBuild"];
14->9 [style = bold, label=""];
5->10 [style = solid, label="project"];
5->12 [style = solid, label="project"];
10->14 [style = solid, label="previousPreviousBuild"];
15->1 [style = bold, label=""];
}
