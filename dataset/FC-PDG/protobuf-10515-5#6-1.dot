digraph {
16 [style = filled, label = "ByteString.ByteIterator iter = stringUnderTest.iterator()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "fail(\"Should have thrown an exception.\")@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testByteIterator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(classUnderTest + \" must capture the right bytes\",stillEqual)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ByteString.ByteIterator iter = testString.iterator()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(CLASSNAME + \" must capture the right bytes\",stillEqual)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "iter.nextByte()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "stillEqual && i < referenceBytes.length@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertFalse(classUnderTest + \" must have exhausted the itertor\",iter.hasNext())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testByteIterator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "stillEqual = (iter.hasNext() && referenceBytes(i( == iter.nextByte())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "++i@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertFalse(CLASSNAME + \" must have exhausted the itertor\",iter.hasNext())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "stillEqual = (iter.hasNext() && BYTES(i( == iter.nextByte())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertFalse(CLASSNAME + \" must have exhausted the iterator\",iter.hasNext())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testByteIterator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "boolean stillEqual = true@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "stillEqual && i < BYTES.length@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
8->16 [style = bold, label=""];
18->17 [style = solid, label="stillEqual"];
4->16 [style = dashed, label="0"];
3->1 [style = bold, label=""];
5->3 [style = solid, label="i"];
10->14 [style = bold, label=""];
0->2 [style = bold, label=""];
3->10 [style = dotted, label="true"];
0->11 [style = bold, label=""];
10->3 [style = bold, label=""];
14->17 [style = bold, label=""];
5->14 [style = solid, label="i"];
1->18 [style = dashed, label="0"];
2->9 [style = bold, label=""];
5->14 [style = bold, label=""];
5->1 [style = solid, label="i"];
9->7 [style = bold, label=""];
11->9 [style = bold, label=""];
0->17 [style = dashed, label="0"];
14->10 [style = dotted, label="true"];
3->0 [style = bold, label=""];
8->17 [style = solid, label="stillEqual"];
2->15 [style = dashed, label="0"];
18->10 [style = bold, label=""];
15->9 [style = bold, label=""];
12->8 [style = bold, label=""];
1->0 [style = solid, label="stillEqual"];
6->8 [style = bold, label=""];
5->18 [style = solid, label="i"];
17->15 [style = bold, label=""];
16->5 [style = bold, label=""];
2->11 [style = dashed, label="0"];
8->3 [style = solid, label="stillEqual"];
14->18 [style = bold, label=""];
18->14 [style = solid, label="stillEqual"];
8->4 [style = bold, label=""];
13->8 [style = bold, label=""];
3->14 [style = dashed, label="0"];
1->3 [style = solid, label="stillEqual"];
1->10 [style = bold, label=""];
4->5 [style = bold, label=""];
3->1 [style = dotted, label="true"];
14->18 [style = dotted, label="true"];
8->0 [style = solid, label="stillEqual"];
8->14 [style = solid, label="stillEqual"];
}
