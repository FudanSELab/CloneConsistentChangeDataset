digraph {
13 [style = filled, label = "expectAuthorizationTokenCheck()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final TaskStatusResponse taskStatusResponse1 = TestHelper.makeJsonMapper().readValue(TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final Response response1 = overlordResource.getTaskPayload(\"mytask\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final Response response2 = overlordResource.getTaskPayload(\"othertask\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"mytask\")).andReturn(new TaskInfo<>(task.getId(),DateTimes.of(\"2018-01-01\"),status,task.getDataSource(),task))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"othertask\")).andReturn(null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(new TaskStatusResponse(\"othertask\",null),taskStatusResponse2)@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(new TaskStatusResponse(\"mytask\",new TaskStatusPlus(\"mytask\",\"noop\",DateTimes.of(\"2018-01-01\"),DateTimes.EPOCH,TaskState.RUNNING,RunnerTaskState.RUNNING,-1L,TaskLocation.unknown(),task.getDataSource(),null)),taskStatusResponse1)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testGetTaskStatus['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final TaskPayloadResponse taskPayloadResponse2 = TestHelper.makeJsonMapper().readValue(TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final Response response2 = overlordResource.getTaskStatus(\"othertask\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final TaskPayloadResponse taskPayloadResponse1 = TestHelper.makeJsonMapper().readValue(TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(new TaskPayloadResponse(\"mytask\",task),taskPayloadResponse1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final TaskStatusResponse taskStatusResponse2 = TestHelper.makeJsonMapper().readValue(TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.replay(taskRunner,taskMaster,taskStorageQueryAdapter,indexerMetadataStorageAdapter,req)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final TaskStatus status = TaskStatus.running(\"mytask\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testGetTaskPayload['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testGetTaskStatus['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "TaskStatusPlus tsp = taskStatusResponse1.getStatus()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final Task task = NoopTask.create(\"mytask\",0)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expect(taskStorageQueryAdapter.getTask(\"othertask\")).andReturn(Optional.absent())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(new TaskPayloadResponse(\"othertask\",null),taskPayloadResponse2)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "EasyMock.expect(taskRunner.getKnownTasks()).andReturn(ImmutableList.of())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final NoopTask task = NoopTask.create(\"mydatasource\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final Response response1 = overlordResource.getTaskStatus(\"mytask\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(tsp.getStatusCode(),tsp.getStatus())@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "EasyMock.expect(taskStorageQueryAdapter.getTask(\"mytask\")).andReturn(Optional.of(task))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->6 [style = bold, label=""];
5->2 [style = bold, label=""];
25->23 [style = bold, label=""];
9->21 [style = solid, label="taskPayloadResponse1"];
0->19 [style = dashed, label="0"];
26->24 [style = bold, label=""];
11->7 [style = solid, label="task"];
7->8 [style = bold, label=""];
19->9 [style = bold, label=""];
23->19 [style = bold, label=""];
8->4 [style = bold, label=""];
6->15 [style = bold, label=""];
1->7 [style = solid, label="status"];
2->26 [style = dashed, label="0"];
13->22 [style = bold, label=""];
14->12 [style = bold, label=""];
11->1 [style = bold, label=""];
2->10 [style = bold, label=""];
9->0 [style = bold, label=""];
9->21 [style = bold, label=""];
22->20 [style = bold, label=""];
6->9 [style = dashed, label="0"];
16->13 [style = bold, label=""];
7->25 [style = dashed, label="0"];
3->13 [style = bold, label=""];
18->26 [style = bold, label=""];
5->18 [style = dashed, label="0"];
11->22 [style = dashed, label="0"];
20->25 [style = bold, label=""];
22->20 [style = solid, label="task"];
12->5 [style = bold, label=""];
13->11 [style = bold, label=""];
10->24 [style = dashed, label="0"];
15->14 [style = bold, label=""];
21->18 [style = bold, label=""];
26->24 [style = solid, label="taskPayloadResponse2"];
17->13 [style = bold, label=""];
4->9 [style = bold, label=""];
6->12 [style = bold, label=""];
6->12 [style = solid, label="taskStatusResponse1"];
1->7 [style = bold, label=""];
2->10 [style = solid, label="taskStatusResponse2"];
22->21 [style = solid, label="task"];
}
