digraph {
2 [style = filled, label = "assertEquals(context(i(.getNode(),results.get(i).node.getId())@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ShardSearchFailure(( shardSearchFailures = action.buildShardFailures()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i++@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ScrollIdForNode(( context = scrollId.getContext()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(0,shardSearchFailures.length)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(1,shardSearchFailures.length)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"IllegalStateException(node (node2( is not available(\",shardSearchFailures(0(.reason())@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().add(new DiscoveryNode(\"node1\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node2\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node3\",buildNewFakeTransportAddress(),Version.CURRENT)).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action = new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId,logger,discoveryNodes,dummyListener(),null,request,null){@Override protected void executeInitialPhase(Transport.Connection connection,InternalScrollSearchRequest internalRequest,SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener){new Thread(null).start()}@Override protected Transport.Connection getConnection(String clusterAlias,DiscoveryNode node){return new SearchAsyncActionTests.MockConnection(node)}@Override protected SearchPhase moveToNextPhase(BiFunction<String,String,DiscoveryNode> clusterNodeLookup){assertEquals(1,movedCounter.incrementAndGet())return new SearchPhase(\"test\"){@Override public void run(){latch.countDown()}}}@Override protected void onFirstPhaseResult(int shardId,SearchAsyncActionTests.TestSearchPhaseResult result){results.setOnce(shardId,result)}}@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testNodeNotAvailable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "request.scroll(new Scroll(TimeValue.timeValueMinutes(1)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().add(new DiscoveryNode(\"node1\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node3\",buildNewFakeTransportAddress(),Version.CURRENT)).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertNotNull(results.get(i))@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertNull(results.get(i))@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "context(i(.getNode().equals(\"node2\")@@@51@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(context(i(.getNode(),results.get(i).node.getId())@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "latch.await()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int i = 0@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "SearchScrollRequest request = new SearchScrollRequest()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ParsedScrollId scrollId = getParsedScrollId(new ScrollIdForNode(null,\"node1\",1),new ScrollIdForNode(null,\"node2\",2),new ScrollIdForNode(null,\"node3\",17),new ScrollIdForNode(null,\"node1\",0),new ScrollIdForNode(null,\"node3\",0))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action = new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId,logger,discoveryNodes,dummyListener(),null,request,null){@Override protected void executeInitialPhase(Transport.Connection connection,InternalScrollSearchRequest internalRequest,SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener){try {assertNotEquals(\"node2 is not available\",\"node2\",connection.getNode().getId())}catch (NullPointerException e) new Thread(null).start()}@Override protected Transport.Connection getConnection(String clusterAlias,DiscoveryNode node){return new SearchAsyncActionTests.MockConnection(node)}@Override protected SearchPhase moveToNextPhase(BiFunction<String,String,DiscoveryNode> clusterNodeLookup){assertEquals(1,movedCounter.incrementAndGet())return new SearchPhase(\"test\"){@Override public void run(){latch.countDown()}}}@Override protected void onFirstPhaseResult(int shardId,SearchAsyncActionTests.TestSearchPhaseResult result){results.setOnce(shardId,result)}}@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testSendRequestsToNodes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(shardSearchFailures(0(.reason(),startsWith(\"java.lang.IllegalStateException: node (node2( is not available\"))@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testNodeNotAvailable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "AtomicInteger movedCounter = new AtomicInteger(0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i < results.length()@@@42@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "action.run()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(context(i(.getScrollId(),results.get(i).getRequestId())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
17->25 [style = bold, label=""];
4->12 [style = solid, label="i"];
16->13 [style = bold, label=""];
6->4 [style = solid, label="i"];
10->15 [style = bold, label=""];
26->29 [style = solid, label="discoveryNodes"];
21->19 [style = bold, label=""];
11->29 [style = solid, label="request"];
3->26 [style = dashed, label="0"];
7->12 [style = bold, label=""];
4->6 [style = bold, label=""];
4->10 [style = dotted, label="true"];
16->25 [style = dashed, label="0"];
12->15 [style = solid, label="i"];
3->20 [style = solid, label="discoveryNodes"];
0->2 [style = bold, label=""];
12->15 [style = bold, label=""];
1->3 [style = bold, label=""];
10->2 [style = dotted, label="false"];
8->6 [style = bold, label=""];
28->1 [style = bold, label=""];
19->17 [style = bold, label=""];
16->23 [style = bold, label=""];
5->14 [style = bold, label=""];
6->7 [style = solid, label="i"];
23->8 [style = bold, label=""];
1->26 [style = bold, label=""];
3->22 [style = bold, label=""];
13->23 [style = dashed, label="0"];
10->7 [style = bold, label=""];
11->20 [style = solid, label="request"];
29->21 [style = bold, label=""];
20->29 [style = dashed, label="0"];
2->12 [style = bold, label=""];
26->22 [style = bold, label=""];
10->15 [style = dotted, label="false"];
1->29 [style = solid, label="scrollId"];
4->6 [style = solid, label="i"];
20->21 [style = bold, label=""];
25->27 [style = bold, label=""];
6->4 [style = bold, label=""];
11->5 [style = bold, label=""];
18->20 [style = bold, label=""];
18->29 [style = bold, label=""];
6->4 [style = dotted, label="true"];
12->4 [style = bold, label=""];
0->4 [style = bold, label=""];
1->20 [style = solid, label="scrollId"];
15->0 [style = bold, label=""];
12->4 [style = solid, label="i"];
10->0 [style = dotted, label="false"];
10->7 [style = dotted, label="true"];
14->18 [style = bold, label=""];
6->15 [style = solid, label="i"];
6->12 [style = dotted, label="true"];
6->0 [style = dotted, label="true"];
24->1 [style = bold, label=""];
6->12 [style = solid, label="i"];
13->8 [style = bold, label=""];
9->1 [style = bold, label=""];
4->12 [style = dotted, label="true"];
8->12 [style = solid, label="i"];
12->7 [style = solid, label="i"];
27->8 [style = bold, label=""];
22->11 [style = bold, label=""];
8->6 [style = solid, label="i"];
8->4 [style = solid, label="i"];
17->16 [style = bold, label=""];
6->15 [style = dotted, label="true"];
6->12 [style = bold, label=""];
}
