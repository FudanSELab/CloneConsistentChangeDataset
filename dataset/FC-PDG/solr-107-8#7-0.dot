digraph {
3 [style = filled, label = "return new Map<String,Collection<Object>>(){@Override public Collection<Object> get(Object key){return getFieldValues((String)key)}@Override public boolean containsKey(Object key){return _fields.containsKey(key)}@Override public Set<String> keySet(){return _fields.keySet()}@Override public int size(){return _fields.size()}@Override public boolean isEmpty(){return _fields.isEmpty()}@Override public void clear(){throw new UnsupportedOperationException()}@Override public boolean containsValue(Object value){throw new UnsupportedOperationException()}@Override public Set<java.util.Map.Entry<String,Collection<Object>>> entrySet(){throw new UnsupportedOperationException()}@Override public void putAll(Map<? extends String,? extends Collection<Object>> t){throw new UnsupportedOperationException()}@Override public Collection<Collection<Object>> values(){throw new UnsupportedOperationException()}@Override public Collection<Object> put(String key,Collection<Object> value){throw new UnsupportedOperationException()}@Override public Collection<Object> remove(Object key){throw new UnsupportedOperationException()}@Override public String toString(){return _fields.toString()}}@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "getFieldValueMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "getFieldValueMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "getFieldValuesMap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "return new Map<String,Object>(){@Override public Object get(Object key){return getFirstValue((String)key)}@Override public boolean containsKey(Object key){return _fields.containsKey(key)}@Override public Set<String> keySet(){return _fields.keySet()}@Override public int size(){return _fields.size()}@Override public boolean isEmpty(){return _fields.isEmpty()}@Override public void clear(){throw new UnsupportedOperationException()}@Override public boolean containsValue(Object value){throw new UnsupportedOperationException()}@Override public Set<java.util.Map.Entry<String,Object>> entrySet(){throw new UnsupportedOperationException()}@Override public void putAll(Map<? extends String,? extends Object> t){throw new UnsupportedOperationException()}@Override public Collection<Object> values(){throw new UnsupportedOperationException()}@Override public Collection<Object> put(String key,Object value){throw new UnsupportedOperationException()}@Override public Collection<Object> remove(Object key){throw new UnsupportedOperationException()}@Override public String toString(){return _fields.toString()}}@@@3@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = dashed, label="0"];
4->3 [style = bold, label=""];
2->1 [style = bold, label=""];
0->1 [style = bold, label=""];
}
