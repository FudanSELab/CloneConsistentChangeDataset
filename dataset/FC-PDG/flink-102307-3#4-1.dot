digraph {
3 [style = filled, label = "createDeserializationSchema['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return scanSourceMock.valueFormat.createRuntimeDecoder(ScanRuntimeProviderContext.INSTANCE,SCHEMA.toPhysicalRowDataType())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "createDeserializationSchema['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "DeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat.createRuntimeDecoder(ScanRuntimeProviderContext.INSTANCE,SCHEMA.toRowDataType())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final AvroRowDataDeserializationSchema expectedDeser = new AvroRowDataDeserializationSchema(ConfluentRegistryAvroDeserializationSchema.forGeneric(AvroSchemaConverter.convertToSchema(ROW_TYPE),REGISTRY_URL),AvroToRowDataConverters.createRowConverter(ROW_TYPE),InternalTypeInfo.of(ROW_TYPE))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(actualSource,instanceOf())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestDynamicTableFactory.DynamicTableSourceMock scanSourceMock = (TestDynamicTableFactory.DynamicTableSourceMock)actualSource@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final DynamicTableSource actualSource = createTableSource(getDefaultOptions())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testDeserializationSchema['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(expectedDeser,actualDeser)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final DynamicTableSource actualSource = createTableSource(SCHEMA,options)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(actualSource,instanceOf())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Map<String,String> options@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final DynamicTableSource actualSource = createTableSource(options)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->6 [style = solid, label="options"];
4->10 [style = bold, label=""];
9->11 [style = bold, label=""];
5->2 [style = solid, label="actualSource"];
5->1 [style = solid, label="actualSource"];
8->6 [style = bold, label=""];
6->2 [style = solid, label="actualSource"];
12->9 [style = bold, label=""];
2->4 [style = bold, label=""];
11->2 [style = solid, label="actualSource"];
11->2 [style = bold, label=""];
9->13 [style = solid, label="expectedDeser"];
6->1 [style = solid, label="actualSource"];
5->1 [style = bold, label=""];
6->1 [style = bold, label=""];
3->5 [style = bold, label=""];
11->4 [style = solid, label="actualSource"];
5->6 [style = dashed, label="0"];
10->13 [style = bold, label=""];
4->7 [style = dashed, label="0"];
10->13 [style = solid, label="actualDeser"];
3->0 [style = dotted, label="true"];
8->0 [style = dotted, label="true"];
1->2 [style = bold, label=""];
2->7 [style = bold, label=""];
4->10 [style = dashed, label="0"];
0->5 [style = solid, label="options"];
}
