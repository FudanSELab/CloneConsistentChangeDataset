digraph {
20 [style = filled, label = "LimitExceededException retryableError = LimitExceededException.builder().build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "FanOutRecordPublisher recordPublisher = new FanOutRecordPublisher(latest(),\"arn\",createDummyStreamShardHandle(),kinesis,configuration,backoff)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int count = 0@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testSubscribeToShardIgnoresReadTimeoutInRetryPolicy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "FanOutRecordPublisherConfiguration configuration = new FanOutRecordPublisherConfiguration(efoProperties,emptyList())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "FanOutRecordPublisher recordPublisher = new FanOutRecordPublisher(latest(),\"arn\",createDummyStreamShardHandle(),kinesis,configuration,backoff)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "recordPublisher.run(new TestConsumer()) == INCOMPLETE@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "thrown.expectMessage(\"Maximum retries exceeded for SubscribeToShard. Failed 3 times.\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "thrown.expect()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "SubscriptionErrorKinesisV2 kinesis = FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(retryableError)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "recordPublisher.run(new TestConsumer()) == RecordPublisherRunResult.INCOMPLETE@@@11@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "efoProperties.setProperty(SUBSCRIBE_TO_SHARD_RETRIES,String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testSubscribeToShardIgnoresReadTimeoutInRetryPolicy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "FullJitterBackoff backoff = mock()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "++count > EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testSubscribeToShardFailsWhenMaxRetriesExceeded['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "verify(backoff,times(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES + 1)).calculateFullJitterBackoff(anyLong(),anyLong(),anyDouble(),anyInt())@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "FullJitterBackoff backoff = mock()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Properties efoProperties = createEfoProperties()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "efoProperties.setProperty(SUBSCRIBE_TO_SHARD_RETRIES,String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Properties efoProperties = createEfoProperties()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
0->6 [style = bold, label=""];
18->3 [style = bold, label=""];
10->16 [style = bold, label=""];
1->18 [style = dashed, label="0"];
1->9 [style = bold, label=""];
2->4 [style = bold, label=""];
7->10 [style = bold, label=""];
20->18 [style = bold, label=""];
7->10 [style = dotted, label="true"];
16->19 [style = bold, label=""];
20->18 [style = solid, label="retryableError"];
2->1 [style = solid, label="efoProperties"];
13->10 [style = dotted, label="true"];
17->14 [style = bold, label=""];
10->11 [style = bold, label=""];
18->7 [style = solid, label="kinesis"];
7->11 [style = bold, label=""];
3->7 [style = bold, label=""];
3->13 [style = bold, label=""];
7->13 [style = dashed, label="0"];
15->2 [style = bold, label=""];
8->3 [style = bold, label=""];
4->1 [style = bold, label=""];
19->16 [style = bold, label=""];
6->2 [style = solid, label="efoProperties"];
10->7 [style = bold, label=""];
13->11 [style = bold, label=""];
16->19 [style = dotted, label="true"];
10->13 [style = bold, label=""];
2->8 [style = solid, label="configuration"];
6->5 [style = bold, label=""];
9->8 [style = solid, label="backoff"];
7->16 [style = dashed, label="0"];
4->20 [style = dashed, label="0"];
9->8 [style = bold, label=""];
13->10 [style = bold, label=""];
1->20 [style = bold, label=""];
1->7 [style = solid, label="configuration"];
3->7 [style = solid, label="backoff"];
14->15 [style = bold, label=""];
12->6 [style = bold, label=""];
4->1 [style = solid, label="retryableError"];
1->8 [style = solid, label="kinesis"];
}
