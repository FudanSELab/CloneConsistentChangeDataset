digraph {
6 [style = filled, label = "LongTerms.Bucket bucket = new LongTerms.Bucket(1,1,internalAggregations,false,0,DocValueFormat.RAW)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "AggregationPath path = AggregationPath.parse(\"the_avg.value\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testResolveToAggValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(e.getMessage(),equalTo(\"path not supported for (the_avg(: (unknown(\"))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "InternalAggregations internalAggregations = InternalAggregations.from(Collections.singletonList(agg))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "InternalAggregations internalAggregations = new InternalAggregations(Collections.singletonList(agg))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<LongTerms.Bucket> buckets = new ArrayList<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(value(0(,equalTo(2.0))@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "InternalAggregation agg = new InternalAvg(\"the_avg\",2,1,DocValueFormat.RAW,Collections.emptyMap())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testResolveToUnknown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "buckets.add(bucket)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "AggregationPath path = AggregationPath.parse(\"the_avg.unknown\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Object(( value = (Object(()resolvePropertyFromPath(path.getPathElementsAsStringList(),buckets,\"the_long_terms\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "IllegalArgumentException e = expectThrows(,null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testResolveToAggValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5->10 [style = bold, label=""];
11->14 [style = bold, label=""];
4->6 [style = bold, label=""];
9->2 [style = bold, label=""];
3->1 [style = solid, label="buckets"];
7->14 [style = dashed, label="0"];
2->3 [style = bold, label=""];
0->11 [style = bold, label=""];
6->0 [style = bold, label=""];
6->0 [style = solid, label="bucket"];
1->7 [style = bold, label=""];
10->6 [style = bold, label=""];
5->4 [style = solid, label="agg"];
12->13 [style = bold, label=""];
1->7 [style = solid, label="value"];
3->5 [style = bold, label=""];
13->3 [style = bold, label=""];
8->2 [style = bold, label=""];
2->13 [style = dashed, label="0"];
0->1 [style = bold, label=""];
1->11 [style = dashed, label="0"];
5->4 [style = bold, label=""];
10->6 [style = solid, label="internalAggregations"];
5->10 [style = solid, label="agg"];
4->6 [style = solid, label="internalAggregations"];
4->10 [style = dashed, label="0"];
}
