digraph {
2 [style = filled, label = "testOverRowsBetweenBoundFollowingAndFollowing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testOverRowsBetweenBoundPrecedingAndCurrent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "CalciteAssert.model(JdbcTest.FOODMART_MODEL).enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.POSTGRESQL).query(\"select \"store_id\", \"account_id\", \"exp_date\",\" + \" \"time_id\", \"category_id\", \"currency_id\", \"amount\",\" + \" last_value(\"time_id\") over (partition by \"account_id\"\" + \" order by \"time_id\" rows between 3 preceding and current row)\" + \" as \"last_version\" from \"expense_fact\"\").explainContains(\"PLAN=JdbcToEnumerableConverter\" + \" JdbcProject(store_id=($0(, account_id=($1(, exp_date=($2(, \" + \"time_id=($3(, category_id=($4(, currency_id=($5(, amount=($6(,\" + \" last_version=(LAST_VALUE($3) OVER (PARTITION BY $1\" + \" ORDER BY $3 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)()\" + \" JdbcTableScan(table=((foodmart, expense_fact(()\").runs().planHasSql(\"SELECT \"store_id\", \"account_id\", \"exp_date\",\" + \" \"time_id\", \"category_id\", \"currency_id\", \"amount\",\" + \" LAST_VALUE(\"time_id\") OVER (PARTITION BY \"account_id\"\" + \" ORDER BY \"time_id\" ROWS BETWEEN 3 PRECEDING\" + \" AND CURRENT ROW) AS \"last_version\"\" + \"FROM \"foodmart\".\"expense_fact\"\")@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testOverRowsBetweenBoundFollowingAndFollowing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "CalciteAssert.model(JdbcTest.FOODMART_MODEL).enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.POSTGRESQL).query(\"select \"store_id\", \"account_id\", \"exp_date\",\" + \" \"time_id\", \"category_id\", \"currency_id\", \"amount\",\" + \" last_value(\"time_id\") over (partition by \"account_id\"\" + \" order by \"time_id\" rows between 1 following and 10 following)\" + \" as \"last_version\" from \"expense_fact\"\").explainContains(\"PLAN=JdbcToEnumerableConverter\" + \" JdbcProject(store_id=($0(, account_id=($1(, exp_date=($2(, \" + \"time_id=($3(, category_id=($4(, currency_id=($5(, amount=($6(,\" + \" last_version=(LAST_VALUE($3) OVER (PARTITION BY $1\" + \" ORDER BY $3 ROWS BETWEEN 1 FOLLOWING AND 10 FOLLOWING)()\" + \" JdbcTableScan(table=((foodmart, expense_fact(()\").runs().planHasSql(\"SELECT \"store_id\", \"account_id\", \"exp_date\",\" + \" \"time_id\", \"category_id\", \"currency_id\", \"amount\",\" + \" LAST_VALUE(\"time_id\") OVER (PARTITION BY \"account_id\"\" + \" ORDER BY \"time_id\" ROWS BETWEEN 1 FOLLOWING\" + \" AND 10 FOLLOWING) AS \"last_version\"\" + \"FROM \"foodmart\".\"expense_fact\"\")@@@3@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2->0 [style = bold, label=""];
0->3 [style = dashed, label="0"];
1->0 [style = bold, label=""];
4->3 [style = bold, label=""];
}
