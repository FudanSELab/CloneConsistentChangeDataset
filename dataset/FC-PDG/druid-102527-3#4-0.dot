digraph {
8 [style = filled, label = "Assert.assertEquals(TaskState.FAILED,future2.get().getStatusCode())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "records = generateSinglePartitionRecords(topic)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(3,task1.getRunner().getRowIngestionMeters().getProcessed())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(4,task2.getRunner().getRowIngestionMeters().getProcessed())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "SegmentDescriptor desc1 = sd(task1,\"2008/P1D\",0)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "final KafkaIndexTask task2 = createTask(task1.getId(),new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L)),consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "SegmentDescriptor desc6 = sd(task1,\"2011/P1D\",0)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "return@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "kafkaProducer.initTransactions()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "task1.getRunner().setEndOffsets(ImmutableMap.of(0,5L),false)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "kafkaProducer.beginTransaction()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "task1.stopGracefully(toolboxFactory.build(task1).getConfig())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(5,task1.getRunner().getRowIngestionMeters().getProcessed())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Thread.sleep(10)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final KafkaIndexTask task2 = createTask(null,new KafkaIndexTaskIOConfig(1,\"sequence1\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,3L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "kafkaProducer.send(record).get()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(1,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "SegmentDescriptor desc3 = sd(task1,\"2009/P1D\",0)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "kafkaProducer.commitTransaction()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "SegmentDescriptor desc7 = sd(task1,\"2012/P1D\",0)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L)),consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "unlockAppenderatorBasePersistDirForTask(task1)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "task1.getRunner().getStatus() != Status.PAUSED@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@55@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "SegmentDescriptor desc1 = sd(task1,\"2010/P1D\",0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "SegmentDescriptor desc2 = sd(task1,\"2008/P1D\",1)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "insertData()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task1.getRunner().getCurrentOffsets())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "SegmentDescriptor desc4 = sd(task1,\"2009/P1D\",1)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "kafkaProducer.initTransactions()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "kafkaProducer.commitTransaction()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testRunConflicting['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getThrownAway())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "SegmentDescriptor desc5 = sd(task1,\"2010/P1D\",0)@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "SegmentDescriptor desc2 = sd(task1,\"2011/P1D\",0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "kafkaProducer.send(record).get()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "testRestoreAfterPersistingSequences['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final KafkaIndexTask task2 = createTask(null,new KafkaIndexTaskIOConfig(1,\"sequence1\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "kafkaProducer.beginTransaction()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(),currentOffsets)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testRunConflicting['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->14 [style = bold, label=""];
28->41 [style = solid, label="desc6"];
2->6 [style = bold, label=""];
18->55 [style = bold, label=""];
55->49 [style = bold, label=""];
60->29 [style = bold, label=""];
20->0 [style = bold, label=""];
63->34 [style = bold, label=""];
61->46 [style = bold, label=""];
19->17 [style = solid, label="task1"];
61->6 [style = solid, label="task1"];
19->5 [style = bold, label=""];
48->52 [style = bold, label=""];
20->14 [style = solid, label="task2"];
61->64 [style = solid, label="task1"];
36->41 [style = solid, label="desc7"];
61->28 [style = solid, label="task1"];
5->0 [style = bold, label=""];
31->60 [style = bold, label=""];
54->41 [style = solid, label="desc2"];
45->42 [style = bold, label=""];
17->15 [style = solid, label="desc1"];
38->26 [style = bold, label=""];
10->57 [style = bold, label=""];
40->31 [style = bold, label=""];
17->16 [style = solid, label="desc1"];
3->54 [style = dashed, label="0"];
41->32 [style = bold, label=""];
28->36 [style = bold, label=""];
61->25 [style = solid, label="task1"];
36->41 [style = bold, label=""];
64->41 [style = solid, label="desc5"];
9->2 [style = bold, label=""];
27->53 [style = bold, label=""];
46->6 [style = bold, label=""];
62->45 [style = bold, label=""];
22->4 [style = solid, label="task1"];
10->29 [style = dashed, label="0"];
5->20 [style = dashed, label="0"];
25->41 [style = solid, label="desc1"];
5->14 [style = solid, label="task2"];
29->27 [style = bold, label=""];
22->20 [style = bold, label=""];
58->51 [style = bold, label=""];
21->22 [style = bold, label=""];
57->18 [style = solid, label="task2"];
56->50 [style = bold, label=""];
52->48 [style = bold, label=""];
61->36 [style = solid, label="task1"];
37->63 [style = bold, label=""];
59->24 [style = solid, label="currentOffsets"];
43->33 [style = bold, label=""];
14->8 [style = bold, label=""];
15->12 [style = bold, label=""];
19->3 [style = solid, label="task1"];
18->7 [style = bold, label=""];
1->19 [style = bold, label=""];
6->47 [style = bold, label=""];
61->54 [style = solid, label="task1"];
10->18 [style = bold, label=""];
54->35 [style = bold, label=""];
16->13 [style = bold, label=""];
44->56 [style = bold, label=""];
61->35 [style = solid, label="task1"];
7->17 [style = bold, label=""];
12->23 [style = dashed, label="0"];
51->62 [style = bold, label=""];
35->41 [style = solid, label="desc3"];
48->52 [style = dotted, label="true"];
22->17 [style = solid, label="task1"];
18->27 [style = dashed, label="0"];
49->44 [style = bold, label=""];
3->15 [style = solid, label="desc2"];
30->41 [style = solid, label="desc4"];
17->25 [style = dashed, label="0"];
22->3 [style = solid, label="task1"];
30->64 [style = bold, label=""];
51->45 [style = bold, label=""];
6->10 [style = bold, label=""];
7->53 [style = dashed, label="0"];
17->3 [style = bold, label=""];
35->30 [style = bold, label=""];
25->54 [style = bold, label=""];
48->59 [style = bold, label=""];
33->61 [style = bold, label=""];
15->23 [style = bold, label=""];
23->16 [style = bold, label=""];
39->48 [style = bold, label=""];
53->25 [style = bold, label=""];
42->43 [style = bold, label=""];
43->57 [style = solid, label="consumerProps"];
61->30 [style = solid, label="task1"];
3->15 [style = bold, label=""];
12->16 [style = bold, label=""];
57->18 [style = bold, label=""];
47->38 [style = bold, label=""];
34->10 [style = bold, label=""];
3->13 [style = solid, label="desc2"];
61->34 [style = solid, label="task1"];
26->39 [style = bold, label=""];
43->61 [style = solid, label="consumerProps"];
0->4 [style = bold, label=""];
50->40 [style = bold, label=""];
24->37 [style = bold, label=""];
8->9 [style = bold, label=""];
59->24 [style = bold, label=""];
51->62 [style = dotted, label="true"];
64->28 [style = bold, label=""];
4->11 [style = bold, label=""];
19->4 [style = solid, label="task1"];
19->22 [style = dashed, label="0"];
}
