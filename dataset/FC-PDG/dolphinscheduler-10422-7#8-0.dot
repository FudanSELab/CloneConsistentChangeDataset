digraph {
3 [style = filled, label = "User loginUser = getLoginUser()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testCreateTenant['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(Status.SUCCESS,result.get(Constants.STATUS))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "logger.info(result.toString())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "logger.info(result.toString())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testCreateTenant['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR,result.get(Constants.STATUS))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Map<String,Object> result = tenantService.updateTenant(getLoginUser(),912222,tenantCode,1,\"desc\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "result = tenantService.createTenant(loginUser,tenantCode,1,\"TenantServiceTest\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Map<String,Object> result = tenantService.createTenant(getLoginUser(),\"%!1111\",1,\"TenantServiceTest\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "logger.info(result.toString())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(Status.SUCCESS,result.get(Constants.STATUS))@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(Status.VERIFY_OS_TENANT_CODE_ERROR,result.get(Constants.STATUS))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "result = tenantService.createTenant(loginUser,\"test\",1,\"TenantServiceTest\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Mockito.when(tenantMapper.queryByTenantCode(tenantCode)).thenReturn(getList())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(Status.TENANT_NOT_EXIST,result.get(Constants.STATUS))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Mockito.when(tenantMapper.queryById(1)).thenReturn(getTenant())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "result = tenantService.updateTenant(getLoginUser(),1,tenantCode,1,\"desc\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(Status.VERIFY_TENANT_CODE_ERROR,result.get(Constants.STATUS))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testUpdateTenant['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16->18 [style = bold, label=""];
0->13 [style = bold, label=""];
5->9 [style = bold, label=""];
11->1 [style = bold, label=""];
1->15 [style = dashed, label="0"];
18->17 [style = bold, label=""];
0->11 [style = bold, label=""];
19->2 [style = bold, label=""];
15->19 [style = bold, label=""];
3->9 [style = solid, label="loginUser"];
3->4 [style = bold, label=""];
11->0 [style = dashed, label="0"];
0->15 [style = bold, label=""];
7->3 [style = bold, label=""];
13->1 [style = bold, label=""];
9->6 [style = bold, label=""];
8->0 [style = bold, label=""];
11->13 [style = dashed, label="0"];
14->0 [style = bold, label=""];
17->14 [style = bold, label=""];
6->10 [style = bold, label=""];
8->17 [style = dashed, label="0"];
4->8 [style = bold, label=""];
3->1 [style = solid, label="loginUser"];
1->2 [style = bold, label=""];
12->3 [style = bold, label=""];
2->5 [style = bold, label=""];
}
