digraph {
6 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "getArray['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "return bytes@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "array.pointTo(baseObject,baseOffset + offset,size)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "return array@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final int size = getElementSize(offset,ordinal)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "offset < 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Platform.copyMemory(baseObject,baseOffset + offset,bytes,Platform.BYTE_ARRAY_OFFSET,size)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "getBinary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final int size = (int)offsetAndSize@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "return null@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertIndexIsValid(ordinal)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final UnsafeArrayData array = new UnsafeArrayData()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final int offset = getElementOffset(ordinal)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "getBinary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return null@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "final byte(( bytes = new byte((((@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return null@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
15->8 [style = solid, label="offset"];
2->20 [style = bold, label=""];
4->17 [style = solid, label="size"];
10->6 [style = dotted, label="true"];
5->14 [style = dashed, label="0"];
3->8 [style = solid, label="bytes"];
20->9 [style = dotted, label="true"];
2->20 [style = solid, label="offset"];
20->9 [style = bold, label=""];
18->16 [style = dotted, label="true"];
2->4 [style = solid, label="offset"];
2->8 [style = solid, label="offset"];
9->4 [style = bold, label=""];
6->13 [style = solid, label="ordinal"];
11->15 [style = solid, label="offsetAndSize"];
4->21 [style = bold, label=""];
6->5 [style = solid, label="ordinal"];
2->9 [style = bold, label=""];
21->19 [style = solid, label="array"];
0->6 [style = dotted, label="true"];
13->11 [style = bold, label=""];
17->19 [style = bold, label=""];
16->4 [style = solid, label="ordinal"];
16->2 [style = solid, label="ordinal"];
8->7 [style = bold, label=""];
11->15 [style = bold, label=""];
20->4 [style = bold, label=""];
4->12 [style = dashed, label="0"];
2->17 [style = solid, label="offset"];
5->2 [style = bold, label=""];
6->16 [style = dashed, label="0"];
6->11 [style = solid, label="ordinal"];
11->12 [style = solid, label="offsetAndSize"];
10->13 [style = bold, label=""];
9->15 [style = dashed, label="0"];
7->19 [style = dashed, label="0"];
2->9 [style = solid, label="offset"];
3->8 [style = bold, label=""];
18->5 [style = bold, label=""];
6->2 [style = solid, label="ordinal"];
9->1 [style = dotted, label="true"];
6->4 [style = solid, label="ordinal"];
16->5 [style = solid, label="ordinal"];
2->11 [style = dashed, label="0"];
8->17 [style = dashed, label="0"];
15->12 [style = bold, label=""];
12->3 [style = bold, label=""];
4->8 [style = solid, label="size"];
9->1 [style = bold, label=""];
13->14 [style = dotted, label="true"];
12->8 [style = solid, label="size"];
13->14 [style = bold, label=""];
14->11 [style = bold, label=""];
21->17 [style = bold, label=""];
3->7 [style = solid, label="bytes"];
0->5 [style = bold, label=""];
}
