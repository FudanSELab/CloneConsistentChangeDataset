digraph {
14 [style = filled, label = "verifyEquality(TimeWindows.of(3).grace(1),TimeWindows.of(3).grace(1))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "equalsAndHashcodeShouldBeValidForPositiveCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "verifyEquality(TimeWindows.of(3),TimeWindows.of(3))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2),TimeWindows.of(3).advanceBy(1))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(1).grace(2).until(4).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(TimeWindows.of(3).until(4),TimeWindows.of(3).until(4))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(1).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertNotEquals(TimeWindows.of(3).until(9),TimeWindows.of(3).until(4))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "verifyEquality(TimeWindows.of(3).advanceBy(1).grace(1).until(4),TimeWindows.of(3).advanceBy(1).grace(1).until(4))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertNotEquals(TimeWindows.of(4).advanceBy(2).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertNotEquals(TimeWindows.of(3).grace(2).hashCode(),TimeWindows.of(3).grace(1).hashCode())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(TimeWindows.of(3),TimeWindows.of(3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertEquals(TimeWindows.of(3).grace(1).hashCode(),TimeWindows.of(3).grace(1).hashCode())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(1).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertNotEquals(TimeWindows.of(4).advanceBy(2).grace(2).until(4).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "equalsAndHashcodeShouldBeValidForPositiveCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertEquals(TimeWindows.of(3).advanceBy(1).grace(1).until(4),TimeWindows.of(3).advanceBy(1).grace(1).until(4))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertEquals(TimeWindows.of(3).grace(1),TimeWindows.of(3).grace(1))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertEquals(TimeWindows.of(3).advanceBy(1).grace(1).until(4).hashCode(),TimeWindows.of(3).advanceBy(1).grace(1).until(4).hashCode())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "verifyEquality(TimeWindows.of(3).advanceBy(1),TimeWindows.of(3).advanceBy(1))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(TimeWindows.of(3).advanceBy(1).hashCode(),TimeWindows.of(3).advanceBy(1).hashCode())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertNotEquals(TimeWindows.of(9),TimeWindows.of(3))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(TimeWindows.of(3).until(4).hashCode(),TimeWindows.of(3).until(4).hashCode())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).hashCode(),TimeWindows.of(3).advanceBy(1).hashCode())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertNotEquals(TimeWindows.of(3).grace(2),TimeWindows.of(3).grace(1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "verifyEquality(TimeWindows.of(3).until(4),TimeWindows.of(3).until(4))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertNotEquals(TimeWindows.of(9).hashCode(),TimeWindows.of(3).hashCode())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(TimeWindows.of(3).hashCode(),TimeWindows.of(3).hashCode())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertNotEquals(TimeWindows.of(3).until(9).hashCode(),TimeWindows.of(3).until(4).hashCode())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(1).until(4).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(TimeWindows.of(3).advanceBy(1),TimeWindows.of(3).advanceBy(1))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(2).until(9),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(2).until(9).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
4->10 [style = bold, label=""];
1->33 [style = dashed, label="0"];
3->17 [style = dashed, label="0"];
26->32 [style = bold, label=""];
25->33 [style = bold, label=""];
11->14 [style = bold, label=""];
9->18 [style = dashed, label="0"];
18->19 [style = bold, label=""];
4->31 [style = dashed, label="0"];
17->30 [style = bold, label=""];
8->14 [style = dashed, label="0"];
15->16 [style = bold, label=""];
10->7 [style = bold, label=""];
13->11 [style = bold, label=""];
0->22 [style = dashed, label="0"];
19->25 [style = bold, label=""];
21->28 [style = bold, label=""];
7->9 [style = bold, label=""];
6->1 [style = bold, label=""];
12->13 [style = bold, label=""];
31->26 [style = bold, label=""];
2->0 [style = bold, label=""];
10->26 [style = dashed, label="0"];
5->6 [style = bold, label=""];
20->23 [style = bold, label=""];
23->21 [style = bold, label=""];
6->25 [style = dashed, label="0"];
30->31 [style = bold, label=""];
33->24 [style = bold, label=""];
3->8 [style = bold, label=""];
4->15 [style = dashed, label="0"];
0->13 [style = dashed, label="0"];
9->5 [style = bold, label=""];
22->17 [style = bold, label=""];
7->32 [style = dashed, label="0"];
14->15 [style = bold, label=""];
8->30 [style = dashed, label="0"];
10->16 [style = dashed, label="0"];
8->4 [style = bold, label=""];
32->18 [style = bold, label=""];
29->22 [style = bold, label=""];
5->19 [style = dashed, label="0"];
27->20 [style = bold, label=""];
24->27 [style = bold, label=""];
3->11 [style = dashed, label="0"];
}
