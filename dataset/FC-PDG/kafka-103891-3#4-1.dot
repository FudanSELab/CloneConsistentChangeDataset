digraph {
8 [style = filled, label = "Node node = cluster.nodes().get(0)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "consumer.assign(singletonList(tp0))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testMissingOffsetNoResetPolicy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "metadata.update(cluster,Collections.emptySet(),time.milliseconds())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testMissingOffsetNoResetPolicy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "consumer.poll(0)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "client.prepareResponseFrom(new FindCoordinatorResponse(Errors.NONE,node),node)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PartitionAssignor assignor = new RoundRobinAssignor()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "client.prepareResponseFrom(offsetResponse(Collections.singletonMap(tp0,-1L),Errors.NONE),coordinator)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(topic,1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "MockClient client = new MockClient(time,metadata)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "KafkaConsumer<String,String> consumer = newConsumer(time,client,metadata,assignor,OffsetResetStrategy.NONE,true)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testResetToCommittedOffset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Time time = new MockTime()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Metadata metadata = createMetadata()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "consumer.poll(Duration.ZERO)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "client.prepareResponseFrom(offsetResponse(Collections.singletonMap(tp0,539L),Errors.NONE),coordinator)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Node coordinator = new Node(Integer.MAX_VALUE - node.id(),node.host(),node.port())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "client.setNode(node)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(539L,consumer.position(tp0))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10->3 [style = solid, label="coordinator"];
3->17 [style = dashed, label="0"];
9->0 [style = bold, label=""];
11->6 [style = bold, label=""];
3->14 [style = bold, label=""];
16->7 [style = bold, label=""];
9->12 [style = solid, label="metadata"];
0->11 [style = bold, label=""];
10->3 [style = bold, label=""];
10->17 [style = bold, label=""];
3->15 [style = bold, label=""];
14->15 [style = dashed, label="0"];
13->1 [style = bold, label=""];
8->1 [style = solid, label="node"];
9->11 [style = solid, label="metadata"];
12->13 [style = bold, label=""];
6->4 [style = bold, label=""];
10->17 [style = solid, label="coordinator"];
4->12 [style = solid, label="assignor"];
17->14 [style = bold, label=""];
7->2 [style = bold, label=""];
2->0 [style = solid, label="cluster"];
11->12 [style = solid, label="client"];
8->9 [style = bold, label=""];
4->12 [style = bold, label=""];
8->6 [style = solid, label="node"];
5->7 [style = bold, label=""];
14->18 [style = bold, label=""];
7->11 [style = solid, label="time"];
7->12 [style = solid, label="time"];
1->10 [style = bold, label=""];
19->7 [style = bold, label=""];
2->8 [style = bold, label=""];
}
