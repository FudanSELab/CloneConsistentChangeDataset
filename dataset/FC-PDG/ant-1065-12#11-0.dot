digraph {
16 [style = filled, label = "assertThat(\"Result did not contain A.class\",files,hasKey(\"A.class\"))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "DirectoryScanner scanner = resultFileSet.getDirectoryScanner(p)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "buildRule.executeTarget(\"testsmallset\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Hashtable<String,String> files = getFiles()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertTrue(\"Result did not contain C.class\",files.containsKey(\"C.class\"))@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testMethodParam['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertTrue(\"Result did not contain A.class\",files.containsKey(\"A.class\"))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "testMethodParam['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(\"Result did not contain E.class\",files,hasKey(\"E.class\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(\"Result did not contain D.class\",files,hasKey(\"D.class\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(\"Classfileset did not pick up expected number of class files\",5,files.size())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertTrue(\"Result did not contain B.class\",files.containsKey(\"B.class\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Hashtable<String,String> files = new Hashtable<>()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(\"Result did not contain D.class\",files.containsKey(\"D.class\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "files.put(scannedFile,scannedFile)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Project p = buildRule.getProject()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(\"Result did not contain C.class\",files.containsKey(\"C.class\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "testSmallSet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(\"Result did not contain B.class\",files,hasKey(\"B.class\"))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "buildRule.executeTarget(\"testmethodparam\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(\"Classfileset did not pick up expected number of \" + \"class files\",2,files.size())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "FileSet resultFileSet = p.getReference(RESULT_FILESET)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(\"Result did not contain C.class\",files,hasKey(\"C.class\"))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertTrue(\"Result did not contain E.class\",files.containsKey(\"E.class\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertEquals(\"Classfileset did not pick up expected number of \" + \"class files\",5,files.size())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->3 [style = bold, label=""];
8->10 [style = bold, label=""];
15->10 [style = bold, label=""];
20->17 [style = bold, label=""];
8->23 [style = bold, label=""];
19->14 [style = solid, label="files"];
11->1 [style = bold, label=""];
2->6 [style = bold, label=""];
10->19 [style = bold, label=""];
19->16 [style = solid, label="files"];
1->0 [style = bold, label=""];
4->2 [style = bold, label=""];
3->12 [style = bold, label=""];
7->8 [style = bold, label=""];
13->16 [style = bold, label=""];
21->2 [style = bold, label=""];
19->18 [style = solid, label="files"];
22->8 [style = bold, label=""];
19->13 [style = bold, label=""];
19->17 [style = solid, label="files"];
24->21 [style = bold, label=""];
0->4 [style = bold, label=""];
1->24 [style = bold, label=""];
9->5 [style = bold, label=""];
19->20 [style = solid, label="files"];
0->24 [style = dashed, label="0"];
5->11 [style = bold, label=""];
10->9 [style = bold, label=""];
8->5 [style = solid, label="p"];
16->20 [style = bold, label=""];
23->9 [style = bold, label=""];
18->14 [style = bold, label=""];
10->23 [style = dashed, label="0"];
17->18 [style = bold, label=""];
}
