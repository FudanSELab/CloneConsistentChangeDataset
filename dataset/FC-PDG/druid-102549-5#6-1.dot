digraph {
12 [style = filled, label = "recordSupplier.close()@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "List<OrderedPartitionableRecord<Integer,Long,KafkaRecordEntity>> polledRecords = recordSupplier.poll(poll_timeout_millis)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "testPollCustomDeserializer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "KafkaRecordSupplier recordSupplier = new KafkaRecordSupplier(kafkaServer.consumerProperties(),OBJECT_MAPPER)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(partitions,recordSupplier.getAssignment())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "properties.put(\"value.deserializer\",.getName())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "recordSupplier.assign(partitions)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertTrue(initialRecords.containsAll(polledRecords))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "List<OrderedPartitionableRecord<Integer,Long,KafkaRecordEntity>> initialRecords = new ArrayList<>(createOrderedPartitionableRecords())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "polledRecords.addAll(recordSupplier.poll(poll_timeout_millis))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "properties.put(\"key.deserializer\",.getName())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(initialRecords.size(),polledRecords.size())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Map<String,Object> properties = kafkaServer.consumerProperties()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "polledRecords.size() != initialRecords.size() && i < pollRetry@@@11@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Set<StreamPartition<Integer>> partitions = ImmutableSet.of(StreamPartition.of(topic,0),StreamPartition.of(topic,1))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i++@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "recordSupplier.close()@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "insertData()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testPoll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(initialRecords.size(),polledRecords.size())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "recordSupplier.seekToEarliest(partitions)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "List<OrderedPartitionableRecord<Integer,Long>> initialRecords = new ArrayList<>(createOrderedPartitionableRecords())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Thread.sleep(200)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "KafkaRecordSupplier recordSupplier = new KafkaRecordSupplier(properties,OBJECT_MAPPER)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i++@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(initialRecords.containsAll(polledRecords))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testPollCustomDeserializer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<OrderedPartitionableRecord<Integer,Long>> polledRecords = recordSupplier.poll(poll_timeout_millis)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int i = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
5->8 [style = bold, label=""];
23->16 [style = bold, label=""];
8->15 [style = bold, label=""];
1->26 [style = solid, label="partitions"];
14->0 [style = dotted, label="true"];
1->3 [style = solid, label="partitions"];
7->12 [style = bold, label=""];
19->14 [style = solid, label="i"];
8->17 [style = dotted, label="true"];
1->27 [style = bold, label=""];
25->18 [style = bold, label=""];
22->21 [style = bold, label=""];
10->13 [style = solid, label="properties"];
8->15 [style = dotted, label="true"];
14->22 [style = dashed, label="0"];
4->18 [style = bold, label=""];
1->19 [style = solid, label="partitions"];
5->11 [style = solid, label="i"];
16->2 [style = bold, label=""];
1->28 [style = solid, label="partitions"];
10->27 [style = dashed, label="0"];
17->23 [style = bold, label=""];
9->6 [style = bold, label=""];
8->0 [style = bold, label=""];
20->18 [style = bold, label=""];
21->5 [style = bold, label=""];
15->17 [style = bold, label=""];
0->14 [style = bold, label=""];
0->14 [style = solid, label="i"];
0->7 [style = solid, label="polledRecords"];
14->5 [style = dotted, label="true"];
27->26 [style = bold, label=""];
19->14 [style = bold, label=""];
13->3 [style = bold, label=""];
18->1 [style = bold, label=""];
3->19 [style = bold, label=""];
14->0 [style = bold, label=""];
1->15 [style = solid, label="partitions"];
3->23 [style = solid, label="polledRecords"];
0->21 [style = dashed, label="0"];
11->8 [style = solid, label="i"];
6->13 [style = bold, label=""];
14->8 [style = dotted, label="true"];
28->24 [style = bold, label=""];
8->11 [style = dotted, label="true"];
11->8 [style = bold, label=""];
14->15 [style = bold, label=""];
10->9 [style = bold, label=""];
1->16 [style = solid, label="partitions"];
26->28 [style = bold, label=""];
2->7 [style = bold, label=""];
1->10 [style = bold, label=""];
19->22 [style = bold, label=""];
19->0 [style = solid, label="i"];
24->3 [style = bold, label=""];
21->7 [style = solid, label="polledRecords"];
0->5 [style = bold, label=""];
14->5 [style = bold, label=""];
17->11 [style = bold, label=""];
5->8 [style = solid, label="i"];
}
