digraph {
9 [style = filled, label = "operator.initializeState(stateContext)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testSnapshotState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "operator.open()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "operator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "operator.initializeState(getStateContext())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<MockSourceSplit> splitsInState = CollectionUtil.iterableToList(operator.getReaderState().get())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "operator.open()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "MockSourceSplit newSplit = new MockSourceSplit((2))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHandleAddSplitsEvent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHandleAddSplitsEvent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "StateInitializationContext stateContext = getStateContext()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "operator.snapshotState(new StateSnapshotContextSynchronousImpl(100L,100L))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "operator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit),new MockSourceSplitSerializer()))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(Arrays.asList(MOCK_SPLIT,newSplit),splitsInState)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
10->13 [style = solid, label="splitsInState"];
5->8 [style = bold, label=""];
8->10 [style = bold, label=""];
12->9 [style = solid, label="stateContext"];
1->5 [style = solid, label="newSplit"];
9->2 [style = bold, label=""];
2->1 [style = bold, label=""];
2->5 [style = solid, label="newSplit"];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
0->12 [style = dashed, label="0"];
12->9 [style = bold, label=""];
2->7 [style = solid, label="newSplit"];
4->0 [style = bold, label=""];
7->5 [style = bold, label=""];
3->2 [style = bold, label=""];
10->13 [style = bold, label=""];
2->1 [style = solid, label="newSplit"];
2->7 [style = bold, label=""];
1->7 [style = dashed, label="0"];
1->13 [style = solid, label="newSplit"];
}
