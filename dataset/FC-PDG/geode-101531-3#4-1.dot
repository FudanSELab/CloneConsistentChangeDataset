digraph {
9 [style = filled, label = "assertThat(list.size()).isEqualTo(2)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(list.size()).isZero()@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(nodeNotInTransaction.previous()).thenReturn(list.head)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "list.appendEntry(nodeNotInTransaction)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "doesNotEvictNodeInTransaction['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "when(nodeInTransaction.isInUseByTransaction()).thenReturn(true)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(nodeNotInTransaction.next()).thenReturn(list.tail)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EvictionNode nodeNotInTransaction = mock(,\"nodeNotInTransaction\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EvictionNode nodeInTransaction = mock(,\"nodeInTransaction\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "LRUListWithSyncSorting list = new LRUListWithSyncSorting(controller)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(list.getEvictableEntry()).isSameAs(nodeNotInTransaction)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "LRUListWithSyncSorting list = new LRUListWithSyncSorting(stats,bucketRegion)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "list.appendEntry(nodeInTransaction)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(nodeInTransaction.previous()).thenReturn(list.head)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "doesNotEvictNodeInTransaction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(stats,bucketRegion,executor)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "doesNotEvictNodeInTransaction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "when(nodeInTransaction.next()).thenReturn(nodeNotInTransaction)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->14 [style = bold, label=""];
9->2 [style = bold, label=""];
11->16 [style = dashed, label="0"];
16->7 [style = bold, label=""];
6->0 [style = bold, label=""];
6->1 [style = solid, label="nodeNotInTransaction"];
2->10 [style = bold, label=""];
1->9 [style = bold, label=""];
14->7 [style = bold, label=""];
6->2 [style = solid, label="nodeNotInTransaction"];
12->13 [style = bold, label=""];
7->5 [style = bold, label=""];
5->6 [style = bold, label=""];
13->3 [style = bold, label=""];
0->1 [style = bold, label=""];
11->14 [style = dashed, label="0"];
10->4 [style = bold, label=""];
4->12 [style = bold, label=""];
6->13 [style = solid, label="nodeNotInTransaction"];
7->0 [style = solid, label="nodeInTransaction"];
8->11 [style = bold, label=""];
11->7 [style = bold, label=""];
17->16 [style = bold, label=""];
}
