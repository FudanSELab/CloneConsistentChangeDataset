digraph {
9 [style = filled, label = "View view = mock()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(view.getOwnerItemGroup()).thenReturn(parent)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testGetRelativeLinkTo_JobContainedInViewWithinItemGroup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "ItemGroup parent = j@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "when(Stapler.getCurrentRequest()).thenReturn(req)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "String contextPath = \"/jenkins\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "String result = Functions.getRelativeLinkTo(i)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Jenkins j = createMockJenkins()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"/jenkins/job/i/\",result)@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TopLevelItemAndItemGroup parent = mock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(parent.getShortUrl()).thenReturn(\"parent/\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testGetRelativeLinkTo_JobContainedInViewWithinItemGroup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testGetRelativeLinkTo_JobNotContainedInView['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "when(parent.getItemGroup()).thenReturn(parent)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(\"job/i/\",result)@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "mockStatic()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "StaplerRequest req = createMockRequest(contextPath)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TopLevelItem i = createMockItem(parent,\"job/i/\",\"parent/job/i/\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "createMockAncestors(req,createAncestor(j,\"../..\"),createAncestor(view,\".\"))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(view.getOwner()).thenReturn(parent)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "createMockAncestors(req,createAncestor(j,\"../../..\"),createAncestor(parent,\"../..\"),createAncestor(view,\".\"))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "String result = Functions.getRelativeLinkTo(i)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "when(view.getItems()).thenReturn(Collections.emptyList())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "TopLevelItem i = createMockItem(parent,\"job/i/\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "createMockAncestors(req,createAncestor(j,\"../../..\"),createAncestor(parent,\"../..\"),createAncestor(view,\".\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->0 [style = bold, label=""];
2->12 [style = solid, label="parent"];
7->4 [style = solid, label="contextPath"];
8->12 [style = solid, label="j"];
1->10 [style = solid, label="i"];
11->12 [style = solid, label="view"];
9->11 [style = bold, label=""];
10->17 [style = solid, label="result"];
23->19 [style = bold, label=""];
20->6 [style = bold, label=""];
21->22 [style = bold, label=""];
10->17 [style = bold, label=""];
12->14 [style = dashed, label="0"];
0->21 [style = dashed, label="0"];
14->21 [style = bold, label=""];
4->9 [style = solid, label="req"];
0->1 [style = solid, label="i"];
1->22 [style = dashed, label="0"];
4->5 [style = bold, label=""];
2->14 [style = solid, label="parent"];
8->23 [style = bold, label=""];
16->15 [style = bold, label=""];
14->12 [style = bold, label=""];
2->16 [style = solid, label="parent"];
11->0 [style = solid, label="view"];
11->16 [style = bold, label=""];
22->20 [style = bold, label=""];
5->9 [style = bold, label=""];
23->11 [style = solid, label="parent"];
3->7 [style = bold, label=""];
1->6 [style = bold, label=""];
4->12 [style = solid, label="req"];
0->1 [style = bold, label=""];
11->14 [style = bold, label=""];
10->6 [style = dashed, label="0"];
2->3 [style = bold, label=""];
6->10 [style = bold, label=""];
8->23 [style = solid, label="j"];
7->5 [style = solid, label="req"];
14->16 [style = dashed, label="0"];
2->1 [style = solid, label="parent"];
8->2 [style = bold, label=""];
15->0 [style = bold, label=""];
19->7 [style = solid, label="contextPath"];
7->4 [style = bold, label=""];
0->6 [style = solid, label="i"];
20->6 [style = solid, label="result"];
7->14 [style = solid, label="req"];
2->23 [style = dashed, label="0"];
6->10 [style = solid, label="result"];
13->8 [style = bold, label=""];
18->8 [style = bold, label=""];
19->7 [style = bold, label=""];
2->0 [style = solid, label="parent"];
2->15 [style = solid, label="parent"];
24->8 [style = bold, label=""];
8->14 [style = solid, label="j"];
8->0 [style = solid, label="j"];
1->6 [style = solid, label="i"];
9->14 [style = solid, label="view"];
21->20 [style = solid, label="i"];
4->0 [style = solid, label="req"];
23->21 [style = solid, label="parent"];
}
