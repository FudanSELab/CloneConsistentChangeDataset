digraph {
7 [style = filled, label = "testSerializeDelimited['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TestUtil.assertAllFieldsSet(TestAllTypes.parseDelimitedFrom(input))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(TestAllTypes.parseDelimitedFrom(input) == null)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ByteArrayInputStream input = new ByteArrayInputStream(output.toByteArray())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestUtil.assertPackedFieldsSet(TestPackedTypes.parseDelimitedFrom(input))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "output.write(34)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(input.read()).isEqualTo(12)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testSerializeDelimited['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "testSerializeDelimited['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(12,input.read())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestUtil.getAllSet().writeDelimitedTo(output)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "output.write(12)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertNull(TestAllTypes.parseDelimitedFrom(input))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertThat(input.read()).isEqualTo(-1)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(TestAllTypes.parseDelimitedFrom(input)).isNull()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "ByteArrayOutputStream output = new ByteArrayOutputStream()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(-1,input.read())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(34,input.read())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TestUtil.getPackedSet().writeDelimitedTo(output)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(input.read()).isEqualTo(34)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->3 [style = bold, label=""];
16->13 [style = bold, label=""];
9->8 [style = solid, label="input"];
10->15 [style = bold, label=""];
19->12 [style = bold, label=""];
0->6 [style = bold, label=""];
7->12 [style = bold, label=""];
3->16 [style = dashed, label="0"];
9->4 [style = solid, label="input"];
2->18 [style = bold, label=""];
9->10 [style = bold, label=""];
8->14 [style = dashed, label="0"];
12->1 [style = bold, label=""];
1->11 [style = bold, label=""];
12->0 [style = solid, label="output"];
9->10 [style = solid, label="input"];
11->0 [style = bold, label=""];
17->12 [style = bold, label=""];
9->18 [style = solid, label="input"];
10->5 [style = bold, label=""];
3->2 [style = bold, label=""];
2->13 [style = dashed, label="0"];
12->1 [style = solid, label="output"];
5->4 [style = bold, label=""];
15->4 [style = bold, label=""];
8->18 [style = dashed, label="0"];
6->9 [style = bold, label=""];
5->15 [style = dashed, label="0"];
13->14 [style = bold, label=""];
4->16 [style = bold, label=""];
2->8 [style = bold, label=""];
}
