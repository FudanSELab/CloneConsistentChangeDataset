digraph {
4 [style = filled, label = "bytes(i( = (byte)(i & 0xFF)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(ByteString.copyFrom(bytes),result)@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "byte(( bytes = new byte((((@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(Arrays.equals(bytes,result)).isTrue()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "output.writeRawBytes(bytes)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "i < bytes.length@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "CodedOutputStream output = CodedOutputStream.newInstance(rawOutput)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(Arrays.equals(bytes,result))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "testReadLargeByteStringFromInputStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testReadLargeByteArrayFromInputStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testReadLargeByteArrayFromInputStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "byte(( data = rawOutput.toByteString().toByteArray()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "CodedInputStream input = CodedInputStream.newInstance(new ByteArrayInputStream(data){@Override public synchronized int available(){return 0}})@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ByteString.Output rawOutput = ByteString.newOutput()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "byte(( result = input.readByteArray()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "output.writeRawVarint32(bytes.length)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ByteString result = input.readBytes()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "output.flush()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
3->11 [style = dotted, label="true"];
4->11 [style = solid, label="i"];
4->17 [style = solid, label="bytes"];
11->4 [style = solid, label="i"];
7->10 [style = bold, label=""];
16->10 [style = bold, label=""];
2->1 [style = bold, label=""];
18->17 [style = solid, label="result"];
18->17 [style = bold, label=""];
10->14 [style = solid, label="bytes"];
5->15 [style = bold, label=""];
3->4 [style = dotted, label="true"];
19->10 [style = bold, label=""];
11->3 [style = solid, label="i"];
5->14 [style = bold, label=""];
0->4 [style = solid, label="i"];
5->18 [style = dashed, label="0"];
12->6 [style = bold, label=""];
3->4 [style = bold, label=""];
14->15 [style = dashed, label="0"];
8->12 [style = solid, label="rawOutput"];
1->9 [style = bold, label=""];
4->14 [style = solid, label="bytes"];
6->2 [style = bold, label=""];
4->2 [style = solid, label="bytes"];
11->3 [style = bold, label=""];
3->8 [style = bold, label=""];
9->13 [style = solid, label="data"];
10->0 [style = bold, label=""];
0->3 [style = solid, label="i"];
5->14 [style = solid, label="result"];
13->5 [style = bold, label=""];
14->17 [style = dashed, label="0"];
4->11 [style = bold, label=""];
10->2 [style = solid, label="bytes"];
10->17 [style = solid, label="bytes"];
8->12 [style = bold, label=""];
13->18 [style = bold, label=""];
9->13 [style = bold, label=""];
}
