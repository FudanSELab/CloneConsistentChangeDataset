digraph {
29 [style = filled, label = "System.clearProperty(indexerPropertyKey)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "System.setProperty(indexerPropertyKey,priorValue)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ZkPathsConfig zkPathsConfig1 = zkPathsConfig.get().get()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Injector injector = Initialization.makeInjectorWithModules(GuiceInjectors.makeStartupInjector(),ImmutableList.of(simpleZkConfigModule))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "System.setProperty(indexerPropertyKey,overrideValue)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "zkPathsConfig.inject(propertyValues,configurator)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testIndexerBaseOverride['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "JsonConfigProvider<ZkPathsConfig> zkPathsConfig = JsonConfigProvider.of(zkServiceConfigString,)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(CLOBBERABLE_PROPERTIES.size(),assertions)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "validateEntries(zkConfig)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "JsonConfigProvider<ZkPathsConfig> zkPathsConfig = JsonConfigProvider.of(ZK_SERVICE_CONFIG_STRING,)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final Injector injector = Initialization.makeInjectorWithModules(GuiceInjectors.makeStartupInjector(),ImmutableList.of(simpleZkConfigModule))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(overrideValue + \"/announcements\",indexerZkConfig.getAnnouncementsPath())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "JsonConfigurator configurator = injector.getBinding().getProvider().get()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "JsonConfigurator configurator = injector.getBinding().getProvider().get()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "priorValue == null@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "propertyValues.clear()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "validateEntries(zkPathsConfig1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "indexerPathsConfig.inject(propertyValues,configurator)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(clobberableProperties.size(),assertions)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(overrideValue,indexerZkConfig.getBase())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "IndexerZkConfig indexerZkConfig = indexerPathsConfig.get().get()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "propertyValues.setProperty(indexerPropertyKey,overrideValue)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final String indexerPropertyKey = indexerPropertyString + \".base\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testSimpleConfig['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "JsonConfigProvider<IndexerZkConfig> indexerZkConfig = JsonConfigProvider.of(INDEXER_PROPERTY_STRING,)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "final Injector injector = Initialization.makeInjectorWithModules(GuiceInjectors.makeStartupInjector(),ImmutableList.of(SIMPLE_ZK_CONFIG_MODULE))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "final String overrideValue = \"/foo/bar/baz\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "IndexerZkConfig zkConfig = indexerZkConfig.get().get()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final String priorValue = System.getProperty(indexerPropertyKey)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testSimpleConfig['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "JsonConfigProvider<IndexerZkConfig> indexerPathsConfig = JsonConfigProvider.of(indexerPropertyString,)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24->17 [style = solid, label="indexerPropertyKey"];
0->3 [style = bold, label=""];
17->25 [style = bold, label=""];
15->10 [style = bold, label=""];
8->10 [style = solid, label="configurator"];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
8->15 [style = bold, label=""];
10->14 [style = bold, label=""];
6->21 [style = bold, label=""];
9->4 [style = bold, label=""];
11->6 [style = bold, label=""];
29->31 [style = bold, label=""];
30->27 [style = bold, label=""];
18->30 [style = bold, label=""];
27->31 [style = bold, label=""];
28->26 [style = solid, label="overrideValue"];
24->26 [style = solid, label="indexerPropertyKey"];
6->0 [style = bold, label=""];
8->6 [style = solid, label="configurator"];
10->22 [style = dashed, label="0"];
11->19 [style = bold, label=""];
26->6 [style = bold, label=""];
2->10 [style = bold, label=""];
30->29 [style = bold, label=""];
24->29 [style = solid, label="indexerPropertyKey"];
17->30 [style = solid, label="priorValue"];
2->15 [style = dashed, label="0"];
23->28 [style = bold, label=""];
3->9 [style = bold, label=""];
17->27 [style = solid, label="priorValue"];
1->12 [style = dashed, label="0"];
30->29 [style = dotted, label="true"];
5->16 [style = dashed, label="0"];
28->20 [style = solid, label="overrideValue"];
28->25 [style = solid, label="overrideValue"];
22->18 [style = bold, label=""];
13->12 [style = bold, label=""];
28->31 [style = solid, label="overrideValue"];
8->2 [style = bold, label=""];
24->25 [style = solid, label="indexerPropertyKey"];
2->21 [style = dashed, label="0"];
21->22 [style = bold, label=""];
25->11 [style = bold, label=""];
12->8 [style = bold, label=""];
19->26 [style = bold, label=""];
11->14 [style = dashed, label="0"];
24->17 [style = bold, label=""];
6->22 [style = solid, label="configurator"];
30->27 [style = dotted, label="false"];
28->24 [style = bold, label=""];
3->4 [style = solid, label="zkPathsConfig1"];
24->27 [style = solid, label="indexerPropertyKey"];
31->20 [style = bold, label=""];
4->5 [style = bold, label=""];
0->9 [style = solid, label="zkConfig"];
14->6 [style = bold, label=""];
4->16 [style = bold, label=""];
10->11 [style = bold, label=""];
}
