digraph {
11 [style = filled, label = "testBooleanObject['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "DataSerializer.writeBoolean(value,out)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testBoolean['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Boolean value = getRandom().nextInt() % 2 == 0@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Boolean value2 = (Boolean)DataSerializer.readObject(in)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "DataOutputStream out = getDataOutput()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "out.flush()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Boolean value2 = DataSerializer.readBoolean(in)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DataSerializer.writeObject(value,out)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "DataInput in = getDataInput()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Boolean value = new Boolean(getRandom().nextInt() % 2 == 0)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(value,value2)@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testBoolean['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7->4 [style = solid, label="value"];
8->9 [style = bold, label=""];
4->12 [style = dashed, label="0"];
6->4 [style = bold, label=""];
2->7 [style = bold, label=""];
3->10 [style = dashed, label="0"];
4->5 [style = bold, label=""];
7->6 [style = bold, label=""];
6->4 [style = solid, label="out"];
9->4 [style = solid, label="value"];
0->3 [style = bold, label=""];
0->3 [style = solid, label="in"];
10->1 [style = solid, label="value2"];
7->12 [style = solid, label="value"];
0->10 [style = solid, label="in"];
9->1 [style = solid, label="value"];
3->1 [style = bold, label=""];
7->1 [style = solid, label="value"];
11->7 [style = bold, label=""];
9->6 [style = bold, label=""];
7->9 [style = dashed, label="0"];
0->10 [style = bold, label=""];
10->1 [style = bold, label=""];
12->5 [style = bold, label=""];
5->0 [style = bold, label=""];
3->1 [style = solid, label="value2"];
6->12 [style = bold, label=""];
6->12 [style = solid, label="out"];
}
