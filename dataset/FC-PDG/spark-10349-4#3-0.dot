digraph {
17 [style = filled, label = "map.pointTo(baseObject,baseOffset + offset,size)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final int size = (int)offsetAndSize@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "return null@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "getMap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "return map@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "offset < 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "getBinary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "getBinary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Platform.copyMemory(baseObject,baseOffset + offset,bytes,Platform.BYTE_ARRAY_OFFSET,size)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "isNullAt(ordinal)@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return bytes@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertIndexIsValid(ordinal)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final int size = getElementSize(offset,ordinal)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "return null@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final UnsafeMapData map = new UnsafeMapData()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final int offset = getElementOffset(ordinal)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final byte(( bytes = new byte((((@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8->7 [style = dotted, label="false"];
12->18 [style = solid, label="ordinal"];
8->3 [style = dotted, label="false"];
7->11 [style = bold, label=""];
2->0 [style = dotted, label="true"];
8->11 [style = dotted, label="false"];
8->6 [style = dotted, label="false"];
20->13 [style = bold, label=""];
0->8 [style = solid, label="ordinal"];
16->14 [style = solid, label="map"];
15->21 [style = bold, label=""];
3->11 [style = solid, label="offsetAndSize"];
8->3 [style = bold, label=""];
18->19 [style = bold, label=""];
12->21 [style = solid, label="ordinal"];
8->4 [style = dotted, label="false"];
18->21 [style = solid, label="offset"];
21->17 [style = solid, label="size"];
7->4 [style = bold, label=""];
16->17 [style = bold, label=""];
0->12 [style = dashed, label="0"];
19->15 [style = dotted, label="true"];
5->1 [style = solid, label="bytes"];
18->19 [style = solid, label="offset"];
8->13 [style = dashed, label="0"];
18->17 [style = solid, label="offset"];
5->1 [style = bold, label=""];
3->7 [style = solid, label="offsetAndSize"];
11->5 [style = bold, label=""];
1->6 [style = bold, label=""];
10->8 [style = bold, label=""];
3->7 [style = bold, label=""];
17->14 [style = bold, label=""];
12->13 [style = solid, label="ordinal"];
11->1 [style = solid, label="size"];
7->1 [style = solid, label="offset"];
8->9 [style = bold, label=""];
5->6 [style = solid, label="bytes"];
0->3 [style = solid, label="ordinal"];
21->16 [style = bold, label=""];
10->0 [style = dotted, label="true"];
4->1 [style = solid, label="size"];
8->5 [style = dotted, label="false"];
20->12 [style = dotted, label="true"];
8->9 [style = dotted, label="true"];
4->11 [style = dashed, label="0"];
19->15 [style = bold, label=""];
8->1 [style = dotted, label="false"];
4->5 [style = bold, label=""];
3->4 [style = solid, label="offsetAndSize"];
13->18 [style = bold, label=""];
2->8 [style = bold, label=""];
19->21 [style = bold, label=""];
}
