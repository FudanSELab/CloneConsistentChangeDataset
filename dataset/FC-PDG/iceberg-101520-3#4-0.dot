digraph {
15 [style = filled, label = "T upper = Conversions.fromByteBuffer(field.type(),upperBounds.get(id))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Literal<T> lit@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return ROWS_MIGHT_MATCH@@@20@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Literal<T> lit@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "eq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "lowerBounds != null && lowerBounds.containsKey(id)@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int cmp = lit.comparator().compare(upper,lit.value())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "upperBounds != null && upperBounds.containsKey(id)@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Integer id = ref.fieldId()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return ROWS_CANNOT_MATCH@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "T lower = Conversions.fromByteBuffer(ref.type(),lowerBounds.get(id))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "T lower = Conversions.fromByteBuffer(struct.field(id).type(),lowerBounds.get(id))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "cmp < 0@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "lt['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "T lower = Conversions.fromByteBuffer(field.type(),lowerBounds.get(id))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Literal<T> lit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "return ROWS_CANNOT_MATCH@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Preconditions.checkNotNull(field,\"Cannot filter by nested column: %s\",schema.findField(id))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int cmp = lit.comparator().compare(lower,lit.value())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "cmp >= 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "lt['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Types.NestedField field = struct.field(id)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "cmp > 0@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2->17 [style = bold, label=""];
17->10 [style = bold, label=""];
4->3 [style = bold, label=""];
7->1 [style = solid, label="id"];
4->14 [style = bold, label=""];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
22->2 [style = bold, label=""];
9->11 [style = bold, label=""];
21->20 [style = dotted, label="true"];
21->15 [style = dotted, label="true"];
20->24 [style = dotted, label="true"];
18->16 [style = dotted, label="true"];
2->9 [style = solid, label="cmp"];
7->21 [style = solid, label="id"];
21->15 [style = bold, label=""];
19->20 [style = bold, label=""];
4->21 [style = bold, label=""];
5->6 [style = dotted, label="true"];
19->20 [style = solid, label="cmp"];
3->22 [style = dashed, label="0"];
10->21 [style = bold, label=""];
2->9 [style = bold, label=""];
9->10 [style = bold, label=""];
7->4 [style = bold, label=""];
5->0 [style = dotted, label="true"];
15->19 [style = bold, label=""];
4->14 [style = dotted, label="true"];
1->8 [style = solid, label="field"];
12->7 [style = bold, label=""];
22->2 [style = solid, label="lower"];
7->4 [style = solid, label="id"];
7->3 [style = solid, label="id"];
17->10 [style = dotted, label="true"];
2->17 [style = solid, label="cmp"];
12->13 [style = dotted, label="true"];
4->3 [style = dotted, label="true"];
15->19 [style = solid, label="upper"];
3->2 [style = bold, label=""];
3->2 [style = solid, label="lower"];
7->8 [style = solid, label="id"];
14->2 [style = solid, label="lower"];
7->14 [style = solid, label="id"];
7->22 [style = solid, label="id"];
21->11 [style = bold, label=""];
24->11 [style = bold, label=""];
12->6 [style = dotted, label="true"];
4->22 [style = dotted, label="true"];
21->19 [style = dotted, label="true"];
9->17 [style = dashed, label="0"];
5->7 [style = bold, label=""];
14->2 [style = bold, label=""];
8->4 [style = bold, label=""];
7->15 [style = solid, label="id"];
4->9 [style = dotted, label="true"];
18->7 [style = bold, label=""];
4->11 [style = bold, label=""];
20->24 [style = bold, label=""];
9->10 [style = dotted, label="true"];
4->17 [style = dotted, label="true"];
3->14 [style = dashed, label="0"];
17->21 [style = bold, label=""];
4->22 [style = bold, label=""];
4->2 [style = dotted, label="true"];
6->23 [style = dashed, label="0"];
20->11 [style = bold, label=""];
10->11 [style = bold, label=""];
18->23 [style = dotted, label="true"];
}
