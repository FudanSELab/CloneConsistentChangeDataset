digraph {
9 [style = filled, label = "MockPropertySource secondPropertySource = new MockPropertySource()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(context.getParent()).hasToString(\"a\")@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "imported.put(new ConfigDataResolutionResult(LOCATION_1,new TestConfigDataResource(\"a\"),false),new ConfigData(Arrays.asList(propertySource)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(initialLocations),anyBoolean())).willReturn(initialImported)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(initialLocations))).willReturn(initialImported)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(locations))).willReturn(imported)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "contributors.withProcessedImports(this.importer,this.activationContext)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "MockPropertySource propertySource = new MockPropertySource()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(propertySource)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "this.importer = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "withProcessedImportsResolvesAndLoads['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "initialPropertySource.setProperty(\"spring.config.import\",\"location2\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,this.bootstrapContext,Arrays.asList(contributor))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "verify(this.importer).resolveAndLoad(any(),this.locationResolverContext.capture(),any(),eq(secondLocations),anyBoolean())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "ConfigDataEnvironmentContributors withProcessedImports = contributors.withProcessedImports(this.importer,this.activationContext)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "secondImported.put(new ConfigDataResolutionResult(LOCATION_2,new TestConfigDataResource(\"b\"),false),new ConfigData(Arrays.asList(secondPropertySource)))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.INITIAL_IMPORT)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.ROOT)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "List<ConfigDataLocation> initialLocations = Arrays.asList(LOCATION_1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "verify(this.importer).resolveAndLoad(any(),this.locationResolverContext.capture(),any(),eq(secondLocations))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "initialImported.put(new ConfigDataResolutionResult(LOCATION_1,new TestConfigDataResource(\"a\"),false),new ConfigData(Arrays.asList(initialPropertySource)))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Iterator<ConfigDataEnvironmentContributor> iterator = withProcessedImports.iterator()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "withProcessedImportsProvidesLocationResolverContextWithAccessToParent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "List<ConfigDataLocation> secondLocations = Arrays.asList(LOCATION_2)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Map<ConfigDataResolutionResult,ConfigData> initialImported = new LinkedHashMap<>()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(iterator.hasNext()).isFalse()@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "withProcessedImportsProvidesLocationResolverContextWithAccessToParent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Map<ConfigDataResolutionResult,ConfigData> imported = new LinkedHashMap<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ConfigDataLocationResolverContext context = this.locationResolverContext.getValue()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "MockPropertySource initialPropertySource = new MockPropertySource()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "List<ConfigDataLocation> locations = Arrays.asList(LOCATION_1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Map<ConfigDataResolutionResult,ConfigData> secondImported = new LinkedHashMap<>()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(secondLocations))).willReturn(secondImported)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(secondLocations),anyBoolean())).willReturn(secondImported)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9->17 [style = solid, label="secondPropertySource"];
11->20 [style = bold, label=""];
23->25 [style = bold, label=""];
0->9 [style = bold, label=""];
15->13 [style = bold, label=""];
0->6 [style = solid, label="secondLocations"];
17->1 [style = bold, label=""];
24->2 [style = bold, label=""];
0->22 [style = solid, label="secondLocations"];
29->30 [style = bold, label=""];
18->30 [style = dashed, label="0"];
13->30 [style = solid, label="importer"];
31->13 [style = bold, label=""];
20->0 [style = bold, label=""];
14->11 [style = solid, label="initialPropertySource"];
8->20 [style = dashed, label="0"];
3->11 [style = bold, label=""];
14->10 [style = bold, label=""];
13->18 [style = solid, label="importer"];
10->3 [style = bold, label=""];
28->26 [style = bold, label=""];
30->34 [style = bold, label=""];
16->21 [style = solid, label="secondImported"];
1->21 [style = dashed, label="0"];
16->17 [style = bold, label=""];
22->5 [style = bold, label=""];
9->16 [style = bold, label=""];
6->22 [style = dashed, label="0"];
14->26 [style = dashed, label="0"];
23->27 [style = solid, label="imported"];
21->2 [style = bold, label=""];
33->29 [style = bold, label=""];
8->0 [style = bold, label=""];
25->27 [style = bold, label=""];
6->5 [style = bold, label=""];
18->22 [style = bold, label=""];
13->12 [style = bold, label=""];
3->8 [style = solid, label="initialImported"];
33->29 [style = solid, label="contributor"];
19->13 [style = bold, label=""];
18->6 [style = bold, label=""];
12->28 [style = dashed, label="0"];
26->23 [style = bold, label=""];
5->4 [style = bold, label=""];
12->14 [style = bold, label=""];
3->20 [style = solid, label="initialImported"];
7->18 [style = bold, label=""];
11->8 [style = bold, label=""];
16->1 [style = solid, label="secondImported"];
34->32 [style = bold, label=""];
26->25 [style = solid, label="propertySource"];
1->2 [style = bold, label=""];
27->33 [style = bold, label=""];
2->7 [style = bold, label=""];
4->24 [style = dashed, label="0"];
32->24 [style = bold, label=""];
2->7 [style = solid, label="contributor"];
17->21 [style = bold, label=""];
26->32 [style = solid, label="propertySource"];
13->28 [style = bold, label=""];
3->25 [style = dashed, label="0"];
}
