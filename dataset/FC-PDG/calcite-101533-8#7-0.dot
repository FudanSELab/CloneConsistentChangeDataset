digraph {
12 [style = filled, label = "String expected4 = \"SELECT LAG(\"employee_id\", 1, 'NA') OVER \" + \"(PARTITION BY \"hire_date\" ORDER BY \"employee_id\") AS \"$0\", \" + \"LAG(\"employee_id\", 1, 'NA') OVER \" + \"(PARTITION BY \"birth_date\" ORDER BY \"employee_id\") AS \"$1\", \" + \"COUNT(*) OVER (PARTITION BY \"hire_date\" ORDER BY \"employee_id\" \" + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \"$2\", \" + \"COUNT(*) OVER (PARTITION BY \"birth_date\" ORDER BY \"employee_id\" \" + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \"$3\"\" + \"FROM \"foodmart\".\"employee\"\"@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "builder.addRuleClass()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final String expected = \"SELECT CAST(CAST(employee_id AS STRING) AS INT64), \" + \"CAST(CAST(employee_id AS STRING) AS INT64), \" + \"CAST(CAST(employee_id AS STRING) AS INT64), \" + \"CAST(CAST(employee_id AS STRING) AS INT64), \" + \"CAST(CAST(employee_id AS STRING) AS FLOAT64), \" + \"CAST(CAST(employee_id AS STRING) AS STRING), \" + \"CAST(CAST(employee_id AS STRING) AS BYTES), \" + \"CAST(CAST(employee_id AS STRING) AS BYTES), \" + \"CAST(CAST(employee_id AS STRING) AS TIMESTAMP), \" + \"CAST(CAST(employee_id AS STRING) AS FLOAT64), \" + \"CAST(CAST(employee_id AS STRING) AS NUMERIC), \" + \"CAST(CAST(employee_id AS STRING) AS DATE), \" + \"CAST(CAST(employee_id AS STRING) AS TIME), \" + \"CAST(CAST(employee_id AS STRING) AS BOOL)\" + \"FROM foodmart.reserve_employee\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "String query8 = \"SELECT \" + \"sum(distinct \"position_id\") over (order by \"hire_date\") FROM \"employee\"\"@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "sql(query2).optimize(rules,hepPlanner).ok(expected2)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "String expected7 = \"SELECT \" + \"COUNT(DISTINCT \"employee_id\") \" + \"OVER (ORDER BY \"hire_date\" RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \"$0\"\" + \"FROM \"foodmart\".\"employee\"\"@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "String expected1 = \"SELECT RANK() OVER (ORDER BY \"hire_date\") AS \"$0\"\" + \"FROM \"foodmart\".\"employee\"\"@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String query1 = \"SELECT rank() over (order by \"hire_date\") FROM \"employee\"\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String query6 = \"SELECT lag(\"employee_id\",1,'NA') over \" + \"(partition by \"hire_date\" order by \"employee_id\"), \"hire_date\"\" + \"FROM \"employee\"\" + \"group by \"hire_date\", \"employee_id\"\"@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String query2 = \"SELECT lead(\"employee_id\",1,'NA') over \" + \"(partition by \"hire_date\" order by \"employee_id\")\" + \"FROM \"employee\"\"@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testConvertWindowToSql['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "RuleSet rules = RuleSets.ofList(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "String expected8 = \"SELECT CASE WHEN (COUNT(DISTINCT \"position_id\") OVER (ORDER BY \"hire_date\" \" + \"RANGE\" + \" BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)) > 0 THEN COALESCE(SUM(DISTINCT \" + \"\"position_id\") OVER (ORDER BY \"hire_date\" RANGE BETWEEN UNBOUNDED \" + \"PRECEDING AND CURRENT ROW), 0) ELSE NULL END\" + \"FROM \"foodmart\".\"employee\"\"@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "sql(query4).optimize(rules,hepPlanner).ok(expected4)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "sql(query6).optimize(rules,hepPlanner).ok(expected6)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "String query = \"select cast(cast(\"employee_id\" as varchar) as bigint), \" + \"cast(cast(\"employee_id\" as varchar) as smallint), \" + \"cast(cast(\"employee_id\" as varchar) as tinyint), \" + \"cast(cast(\"employee_id\" as varchar) as integer), \" + \"cast(cast(\"employee_id\" as varchar) as float), \" + \"cast(cast(\"employee_id\" as varchar) as char), \" + \"cast(cast(\"employee_id\" as varchar) as binary), \" + \"cast(cast(\"employee_id\" as varchar) as varbinary), \" + \"cast(cast(\"employee_id\" as varchar) as timestamp), \" + \"cast(cast(\"employee_id\" as varchar) as double), \" + \"cast(cast(\"employee_id\" as varchar) as decimal), \" + \"cast(cast(\"employee_id\" as varchar) as date), \" + \"cast(cast(\"employee_id\" as varchar) as time), \" + \"cast(cast(\"employee_id\" as varchar) as boolean) \" + \"from \"foodmart\".\"reserve_employee\" \"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "HepProgramBuilder builder = new HepProgramBuilder()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String expected3 = \"SELECT LAG(\"employee_id\", 1, 'NA') OVER \" + \"(PARTITION BY \"hire_date\" ORDER BY \"employee_id\") AS \"$0\"\" + \"FROM \"foodmart\".\"employee\"\"@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "String query3 = \"SELECT lag(\"employee_id\",1,'NA') over \" + \"(partition by \"hire_date\" order by \"employee_id\")\" + \"FROM \"employee\"\"@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "String query0 = \"SELECT row_number() over (order by \"hire_date\") FROM \"employee\"\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String expected2 = \"SELECT LEAD(\"employee_id\", 1, 'NA') OVER \" + \"(PARTITION BY \"hire_date\" \" + \"ORDER BY \"employee_id\") AS \"$0\"\" + \"FROM \"foodmart\".\"employee\"\"@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "String expected6 = \"SELECT LAG(\"employee_id\", 1, 'NA') \" + \"OVER (PARTITION BY \"hire_date\" ORDER BY \"employee_id\"), \"hire_date\"\" + \"FROM \"foodmart\".\"employee\"\" + \"GROUP BY \"hire_date\", \"employee_id\"\"@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testBigQueryCast['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "sql(query5).optimize(rules,hepPlanner).ok(expected5)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "sql(query3).optimize(rules,hepPlanner).ok(expected3)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testConvertWindowToSql['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "sql(query1).optimize(rules,hepPlanner).ok(expected1)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "sql(query7).optimize(rules,hepPlanner).ok(expected7)@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "String expected5 = \"SELECT LAG(\"employee_id\", 1, 'NA') OVER \" + \"(PARTITION BY \"hire_date\" ORDER BY \"employee_id\") AS \"$0\", \" + \"LAG(\"employee_id\", 1, 'NA') OVER \" + \"(PARTITION BY \"birth_date\" ORDER BY \"employee_id\") AS \"$1\", \" + \"MAX(SUM(\"employee_id\")) OVER (PARTITION BY \"hire_date\" ORDER BY \"employee_id\" \" + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \"$2\", \" + \"MAX(SUM(\"employee_id\")) OVER (PARTITION BY \"birth_date\" ORDER BY \"employee_id\" \" + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \"$3\"\" + \"FROM \"foodmart\".\"employee\"\" + \"GROUP BY \"employee_id\", \"hire_date\", \"birth_date\"\"@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "String query5 = \"SELECT lag(\"employee_id\",1,'NA') \" + \"over (partition by \"hire_date\" order by \"employee_id\") as lag1, \" + \"lag(\"employee_id\",1,'NA') \" + \"over (partition by \"birth_date\" order by \"employee_id\") as lag2, \" + \"max(sum(\"employee_id\")) over (partition by \"hire_date\" order by \"employee_id\") as count1, \" + \"max(sum(\"employee_id\")) over (partition by \"birth_date\" order by \"employee_id\") as count2\" + \"FROM \"employee\" group by \"employee_id\", \"hire_date\", \"birth_date\"\"@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "HepPlanner hepPlanner = new HepPlanner(builder.build())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "String expected0 = \"SELECT ROW_NUMBER() OVER (ORDER BY \"hire_date\") AS \"$0\"\" + \"FROM \"foodmart\".\"employee\"\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "sql(query).withBigQuery().ok(expected)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "sql(query0).optimize(rules,hepPlanner).ok(expected0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "String query4 = \"SELECT lag(\"employee_id\",1,'NA') \" + \"over (partition by \"hire_date\" order by \"employee_id\") as lag1, \" + \"lag(\"employee_id\",1,'NA') \" + \"over (partition by \"birth_date\" order by \"employee_id\") as lag2, \" + \"count(*) over (partition by \"hire_date\" order by \"employee_id\") as count1, \" + \"count(*) over (partition by \"birth_date\" order by \"employee_id\") as count2\" + \"FROM \"employee\"\"@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "sql(query8).optimize(rules,hepPlanner).ok(expected8)@@@33@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "String query7 = \"SELECT \" + \"count(distinct \"employee_id\") over (order by \"hire_date\") FROM \"employee\"\"@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0->6 [style = bold, label=""];
3->7 [style = solid, label="expected1"];
7->23 [style = bold, label=""];
35->33 [style = bold, label=""];
16->24 [style = bold, label=""];
8->14 [style = bold, label=""];
22->5 [style = bold, label=""];
14->7 [style = bold, label=""];
22->30 [style = bold, label=""];
29->27 [style = bold, label=""];
11->21 [style = bold, label=""];
26->16 [style = bold, label=""];
12->0 [style = solid, label="expected4"];
24->14 [style = solid, label="expected0"];
28->32 [style = bold, label=""];
9->2 [style = bold, label=""];
21->8 [style = bold, label=""];
6->17 [style = bold, label=""];
2->25 [style = bold, label=""];
24->1 [style = bold, label=""];
10->22 [style = bold, label=""];
1->3 [style = bold, label=""];
18->6 [style = solid, label="expected5"];
22->17 [style = solid, label="expected6"];
5->11 [style = bold, label=""];
32->31 [style = bold, label=""];
3->9 [style = bold, label=""];
18->10 [style = bold, label=""];
25->13 [style = bold, label=""];
12->19 [style = bold, label=""];
31->5 [style = bold, label=""];
15->16 [style = bold, label=""];
2->23 [style = solid, label="expected2"];
13->4 [style = solid, label="expected3"];
33->36 [style = solid, label="expected"];
30->28 [style = bold, label=""];
34->35 [style = bold, label=""];
13->20 [style = bold, label=""];
23->4 [style = bold, label=""];
19->18 [style = bold, label=""];
33->36 [style = bold, label=""];
31->27 [style = solid, label="expected8"];
20->12 [style = bold, label=""];
17->29 [style = bold, label=""];
28->29 [style = solid, label="expected7"];
4->0 [style = bold, label=""];
}
