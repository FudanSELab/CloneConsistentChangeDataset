digraph {
18 [style = filled, label = "Assert.assertTrue(blocked.tryAcquire(1,20,TimeUnit.SECONDS))@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "toPrint.printStackTrace(System.out)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "long originalMaxOutstanding = CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3),dk).build()).isEmpty())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "CommitLogReplayer.MutationInitiator originalInitiator = CommitLogReplayer.mutationInitiator@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "{CommitLogReplayer.mutationInitiator = originalInitiatorCommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = originalMaxOutstanding}@@@47@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "err.get() != null@@@37@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "t.isAlive()@@@38@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "MockInitiator mockInitiator = new MockInitiator()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "mockInitiator.blocker.release(Integer.MAX_VALUE)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertTrue(Util.equal(upd2,Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3),dk).build()).unfilteredIterator()))@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Keyspace keyspace2 = Keyspace.open(KEYSPACE2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "blocker.release(Integer.MAX_VALUE)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = 1@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Keyspace keyspace1 = Keyspace.open(KEYSPACE1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "CommitLogReplayer.mutationInitiator = mockInitiator@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Throwable toPrint = new Throwable()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testRecoverBlocksOnBytesOutstanding['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final AtomicReference<Throwable> err = new AtomicReference<Throwable>()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "CommitLog.instance.resetUnsafe(false)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1),dk).build()).isEmpty())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata,1L,0,\"keymulti\").clustering(\"col2\").add(\"val\",\"1\").build())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertTrue(t.isAlive())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(t.isAlive())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "throw new RuntimeException(err.get())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "toPrint.setStackTrace(Thread.getAllStackTraces().get(t))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "t.join(20 * 1000)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "DecoratedKey dk = Util.dk(\"keymulti\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata,1L,0,\"keymulti\").clustering(\"col1\").add(\"val\",\"1\").build())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Thread.sleep(100)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Thread t = new Thread(){@Override public void run(){try {CommitLog.instance.resetUnsafe(false)}catch (Throwable t) }}@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testOne['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "DecoratedKey dk = Util.dk(\"keymulti\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testRecoverBlocksOnBytesOutstanding['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "Assert.assertTrue(mockInitiator.blocked.tryAcquire(1,20,TimeUnit.SECONDS))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "CommitLog.instance.resetUnsafe(true)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(Util.equal(upd2,Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3),dk).build()).unfilteredIterator()))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "err.get() != null@@@36@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "t.start()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(Util.equal(upd1,Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1),dk).build()).unfilteredIterator()))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(Util.equal(upd1,Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1),dk).build()).unfilteredIterator()))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
28->29 [style = bold, label=""];
16->15 [style = bold, label=""];
10->18 [style = bold, label=""];
17->5 [style = bold, label=""];
0->9 [style = bold, label=""];
39->16 [style = bold, label=""];
23->30 [style = bold, label=""];
33->3 [style = bold, label=""];
25->33 [style = bold, label=""];
0->6 [style = solid, label="upd1"];
11->33 [style = dashed, label="0"];
31->2 [style = solid, label="t"];
20->28 [style = bold, label=""];
43->42 [style = bold, label=""];
1->20 [style = bold, label=""];
27->31 [style = bold, label=""];
36->32 [style = bold, label=""];
23->30 [style = dotted, label="true"];
21->2 [style = dotted, label="true"];
21->17 [style = dotted, label="true"];
12->8 [style = solid, label="originalMaxOutstanding"];
4->2 [style = bold, label=""];
26->19 [style = bold, label=""];
7->8 [style = bold, label=""];
38->39 [style = bold, label=""];
21->4 [style = dotted, label="true"];
34->30 [style = bold, label=""];
10->36 [style = bold, label=""];
15->22 [style = bold, label=""];
19->16 [style = bold, label=""];
26->8 [style = solid, label="originalInitiator"];
3->34 [style = bold, label=""];
12->13 [style = bold, label=""];
21->5 [style = bold, label=""];
3->23 [style = bold, label=""];
30->21 [style = bold, label=""];
39->1 [style = solid, label="upd2"];
22->0 [style = bold, label=""];
5->6 [style = bold, label=""];
23->21 [style = bold, label=""];
11->3 [style = bold, label=""];
13->26 [style = bold, label=""];
31->10 [style = bold, label=""];
25->11 [style = bold, label=""];
18->36 [style = dashed, label="0"];
14->12 [style = bold, label=""];
32->25 [style = bold, label=""];
40->41 [style = bold, label=""];
18->32 [style = bold, label=""];
26->37 [style = bold, label=""];
37->19 [style = bold, label=""];
35->12 [style = bold, label=""];
9->1 [style = bold, label=""];
6->7 [style = bold, label=""];
29->24 [style = bold, label=""];
34->30 [style = dotted, label="true"];
41->43 [style = bold, label=""];
38->9 [style = solid, label="upd1"];
24->27 [style = bold, label=""];
42->38 [style = bold, label=""];
34->21 [style = bold, label=""];
9->7 [style = solid, label="upd2"];
37->19 [style = solid, label="mockInitiator"];
21->4 [style = bold, label=""];
}
