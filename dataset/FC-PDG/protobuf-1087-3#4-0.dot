digraph {
31 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(Integer.valueOf(5),map.remove(4))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertEquals(Integer.valueOf(4),map.remove(3))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,5),map.keySet())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertNull(map.put(i,i + 1))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "int i = 0@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(3,map.size())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i++@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int i = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "i < 6@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(new Integer(1),map.remove(0))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "assertFalse(entrySet.add(entry))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "i < 6@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,3,5),map.keySet())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Set<Map.Entry<Integer,Integer>> entrySet = map.entrySet()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(6,map.size())@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testRemove['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(2,map.getNumArrayEntries())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(new Integer(4),map.remove(3))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "assertTrue(entrySet.add(entry))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "SmallSortedMap<Integer,Integer> map = SmallSortedMap.newInstanceForTest(3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(Integer.valueOf(1),map.remove(0))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertEquals(Integer.valueOf(2),map.remove(1))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(2,map.size())@@@36@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testEntrySetAdd['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(3,map.size())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(new Integer(2),map.remove(1))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(5,map.size())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertNull(map.remove(i + 1))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,3,4,5),map.keySet())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(3,map.getNumOverflowEntries())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(new Integer(i + 1),map.get(i))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(new Integer(5),map.remove(4))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testRemove['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(4,map.size())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(1,map.getNumOverflowEntries())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Map.Entry<Integer,Integer> entry = new SimpleEntry<Integer,Integer>(i,i + 1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(2,map.getNumOverflowEntries())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertNull(map.remove(3))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "i++@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46->25 [style = bold, label=""];
42->47 [style = dotted, label="true"];
23->45 [style = bold, label=""];
15->25 [style = bold, label=""];
30->36 [style = bold, label=""];
16->10 [style = solid, label="i"];
29->37 [style = dashed, label="0"];
30->11 [style = bold, label=""];
8->20 [style = bold, label=""];
23->18 [style = dotted, label="true"];
27->7 [style = bold, label=""];
9->5 [style = bold, label=""];
16->28 [style = solid, label="i"];
1->31 [style = bold, label=""];
23->44 [style = bold, label=""];
44->43 [style = solid, label="i"];
0->17 [style = bold, label=""];
37->21 [style = bold, label=""];
47->42 [style = solid, label="i"];
42->31 [style = bold, label=""];
44->47 [style = solid, label="i"];
18->45 [style = dashed, label="0"];
26->24 [style = bold, label=""];
11->36 [style = dashed, label="0"];
18->28 [style = bold, label=""];
19->37 [style = bold, label=""];
23->40 [style = dotted, label="true"];
35->0 [style = bold, label=""];
43->47 [style = bold, label=""];
42->43 [style = dotted, label="true"];
38->25 [style = bold, label=""];
16->45 [style = solid, label="i"];
33->8 [style = bold, label=""];
11->26 [style = bold, label=""];
10->45 [style = solid, label="i"];
44->42 [style = bold, label=""];
47->43 [style = solid, label="i"];
45->40 [style = solid, label="entry"];
6->34 [style = bold, label=""];
47->42 [style = bold, label=""];
22->19 [style = bold, label=""];
2->35 [style = dashed, label="0"];
19->29 [style = bold, label=""];
31->32 [style = bold, label=""];
25->41 [style = bold, label=""];
23->28 [style = dotted, label="true"];
28->40 [style = dashed, label="0"];
16->23 [style = bold, label=""];
32->30 [style = bold, label=""];
25->16 [style = bold, label=""];
29->21 [style = bold, label=""];
23->39 [style = dotted, label="true"];
12->13 [style = bold, label=""];
6->27 [style = bold, label=""];
2->0 [style = bold, label=""];
17->12 [style = bold, label=""];
23->10 [style = dotted, label="true"];
40->39 [style = bold, label=""];
45->39 [style = solid, label="entry"];
10->23 [style = bold, label=""];
5->4 [style = bold, label=""];
23->45 [style = dotted, label="true"];
41->16 [style = bold, label=""];
13->9 [style = bold, label=""];
23->18 [style = bold, label=""];
45->40 [style = bold, label=""];
10->28 [style = solid, label="i"];
42->43 [style = bold, label=""];
28->10 [style = bold, label=""];
10->23 [style = solid, label="i"];
4->6 [style = bold, label=""];
21->33 [style = bold, label=""];
10->18 [style = solid, label="i"];
3->14 [style = bold, label=""];
34->7 [style = bold, label=""];
16->18 [style = solid, label="i"];
36->26 [style = bold, label=""];
16->23 [style = solid, label="i"];
44->42 [style = solid, label="i"];
24->22 [style = bold, label=""];
7->3 [style = bold, label=""];
20->2 [style = bold, label=""];
39->10 [style = bold, label=""];
23->1 [style = bold, label=""];
20->35 [style = bold, label=""];
27->34 [style = dashed, label="0"];
}
