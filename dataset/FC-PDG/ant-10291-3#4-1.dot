digraph {
1 [style = filled, label = "assertEquals(\"sys:\test\",l(0(.toLowerCase(Locale.US))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "p = new Path(project,\"sys:\test\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"no drives on Unix\",2,l.length)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testConstructorNetWareStyle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "isNetWare@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"no multiple character-length volumes on Windows\",2,l.length)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"/sys\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "p = new Path(project,\"sys:/test\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(\"sys:\test\",l(0(.toLowerCase(Locale.US))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(\"volumes on NetWare\",1,l.length)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testConstructorNetWareStyleUnixFS['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "isUnixStyle@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"/test\",l(1()@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"\sys\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testConstructorNetWareStyle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"\sys\"))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(\"test resolved relative to project's basedir\",l(1(,endsWith(\"\test\"))@@@17@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(\"test resolved relative to project's basedir\",l(1(,endsWith(\"\test\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"/sys\"))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String(( l = p.list()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
14->16 [style = bold, label=""];
4->10 [style = bold, label=""];
2->6 [style = solid, label="l"];
2->13 [style = solid, label="l"];
2->16 [style = solid, label="l"];
12->17 [style = dotted, label="true"];
19->18 [style = bold, label=""];
12->5 [style = bold, label=""];
12->7 [style = dotted, label="false"];
2->9 [style = solid, label="l"];
4->10 [style = dotted, label="true"];
3->18 [style = dashed, label="0"];
12->6 [style = dotted, label="false"];
12->0 [style = dotted, label="false"];
0->16 [style = dashed, label="0"];
4->8 [style = dotted, label="true"];
12->1 [style = dotted, label="true"];
6->0 [style = bold, label=""];
6->14 [style = dashed, label="0"];
18->2 [style = bold, label=""];
2->8 [style = solid, label="l"];
15->3 [style = bold, label=""];
12->1 [style = bold, label=""];
2->4 [style = bold, label=""];
5->17 [style = bold, label=""];
12->7 [style = bold, label=""];
8->13 [style = dashed, label="0"];
7->14 [style = bold, label=""];
2->14 [style = solid, label="l"];
12->16 [style = dotted, label="false"];
4->13 [style = dotted, label="true"];
3->2 [style = bold, label=""];
10->8 [style = bold, label=""];
10->13 [style = bold, label=""];
11->3 [style = bold, label=""];
12->5 [style = dotted, label="true"];
2->0 [style = solid, label="l"];
7->6 [style = bold, label=""];
4->12 [style = dotted, label="false"];
8->9 [style = bold, label=""];
4->12 [style = bold, label=""];
13->9 [style = bold, label=""];
4->9 [style = dotted, label="true"];
12->14 [style = dotted, label="false"];
}
