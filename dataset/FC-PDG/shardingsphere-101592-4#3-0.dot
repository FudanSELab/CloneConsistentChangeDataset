digraph {
20 [style = filled, label = "NotExpression result = new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "null != ctx.booleanPrimary()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String operator = ctx.logicalOperator().getText()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "NotExpression result = new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)),(ExpressionSegment)visit(ctx.expr(1)),ctx.logicalOperator().getText(),text)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "return result@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "return result@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "visitExpr['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "String operator = \"XOR\"@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "null != ctx.XOR()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "visitExpr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "null != ctx.LP_()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "null != ctx.logicalOperator()@@@14@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "visitExpr['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "null != ctx.logicalOperator()@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "return result@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final ExprContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return visit(ctx.booleanPrimary())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "return result@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "return visit(ctx.expr(0))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
9->16 [style = solid, label="text"];
4->14 [style = bold, label=""];
7->10 [style = dotted, label="true"];
26->7 [style = bold, label=""];
4->26 [style = dashed, label="0"];
22->6 [style = solid, label="operator"];
0->10 [style = dotted, label="true"];
7->10 [style = bold, label=""];
21->27 [style = bold, label=""];
26->25 [style = dotted, label="true"];
0->17 [style = bold, label=""];
6->18 [style = bold, label=""];
7->16 [style = dashed, label="0"];
5->1 [style = dotted, label="true"];
11->4 [style = bold, label=""];
26->25 [style = bold, label=""];
12->11 [style = bold, label=""];
9->7 [style = solid, label="text"];
7->10 [style = solid, label="result"];
2->16 [style = solid, label="operator"];
3->6 [style = bold, label=""];
26->19 [style = dotted, label="true"];
12->26 [style = bold, label=""];
2->9 [style = bold, label=""];
26->22 [style = dotted, label="true"];
16->17 [style = bold, label=""];
4->14 [style = dotted, label="true"];
9->7 [style = bold, label=""];
0->6 [style = dotted, label="true"];
7->20 [style = bold, label=""];
10->21 [style = bold, label=""];
26->3 [style = dotted, label="true"];
3->7 [style = solid, label="left"];
2->7 [style = solid, label="operator"];
9->16 [style = bold, label=""];
8->13 [style = solid, label="result"];
4->0 [style = bold, label=""];
12->11 [style = dotted, label="true"];
6->2 [style = bold, label=""];
20->24 [style = solid, label="result"];
22->3 [style = bold, label=""];
23->1 [style = dotted, label="true"];
21->27 [style = solid, label="result"];
19->6 [style = solid, label="right"];
6->18 [style = solid, label="result"];
6->16 [style = solid, label="right"];
14->0 [style = bold, label=""];
12->4 [style = bold, label=""];
10->8 [style = bold, label=""];
5->12 [style = bold, label=""];
15->1 [style = dotted, label="true"];
3->16 [style = solid, label="left"];
10->21 [style = solid, label="text"];
0->8 [style = bold, label=""];
25->19 [style = bold, label=""];
7->27 [style = dotted, label="true"];
6->7 [style = solid, label="right"];
8->17 [style = dashed, label="0"];
26->18 [style = dotted, label="true"];
26->6 [style = dotted, label="true"];
23->12 [style = bold, label=""];
15->12 [style = bold, label=""];
0->3 [style = dotted, label="true"];
0->16 [style = dotted, label="true"];
0->2 [style = dotted, label="true"];
18->7 [style = bold, label=""];
20->24 [style = bold, label=""];
7->21 [style = dotted, label="true"];
25->6 [style = solid, label="left"];
0->9 [style = dotted, label="true"];
19->22 [style = bold, label=""];
27->20 [style = bold, label=""];
3->6 [style = solid, label="text"];
2->22 [style = dashed, label="0"];
8->13 [style = bold, label=""];
0->7 [style = dotted, label="true"];
11->26 [style = bold, label=""];
}
