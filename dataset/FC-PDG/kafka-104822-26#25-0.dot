digraph {
14 [style = filled, label = "putConnectorCallback.onCompletion(EasyMock.anyObject(),EasyMock.isNull())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "member.wakeup()@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "PowerMock.expectLastCall()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "member.poll(EasyMock.anyInt())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Connector connectorMock = PowerMock.createMock()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expectRebalance(1,Collections.emptyList(),Collections.emptyList())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "herder.tick()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "member.poll(EasyMock.anyInt())@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "time.sleep(1000L)@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "testCreateConnectorAlreadyExists['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "PowerMock.verifyAll()@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "PowerMock.expectLastCall()@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
59 [style = filled, label = "PowerMock.expectLastCall()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "PowerMock.replayAll()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "expectRebalance(1,Collections.emptyList(),Collections.emptyList())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "final Capture<Map<String,String>> configCapture = newCapture()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "herder.tick()@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "PowerMock.replayAll()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expectPostRebalanceCatchup(SNAPSHOT)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "PowerMock.expectLastCall()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertStatistics(3,1,100,1000L)@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "herder.putConnectorConfig(CONN1,CONN1_CONFIG,false,putConnectorCallback)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "testCreateConnector['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "PowerMock.expectLastCall()@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "PowerMock.expectLastCall()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "PowerMock.expectLastCall()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Capture<Callback<ConfigInfos>> validateCallback = newCapture()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "PowerMock.expectLastCall()@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "configBackingStore.putConnectorConfig(CONN2,CONN2_CONFIG)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "ConnectorInfo info = new ConnectorInfo(CONN2,CONN2_CONFIG,Collections.emptyList(),ConnectorType.SOURCE)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "member.wakeup()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "time.sleep(1000L)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "member.ensureActive()@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "EasyMock.expect(member.memberId()).andStubReturn(\"leader\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "PowerMock.expectLastCall()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "putConnectorCallback.onCompletion(null,new Herder.Created<>(true,info))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "EasyMock.expect(worker.getPlugins()).andReturn(plugins)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "member.wakeup()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectPostRebalanceCatchup(SNAPSHOT)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.emptyList()))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testCreateConnectorAlreadyExists['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Capture<Map<String,String>> configCapture = newCapture()@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "PowerMock.expectLastCall().andAnswer(new IAnswer<Void>(){@Override public Void answer(){validateCallback.getValue().onCompletion(null,CONN1_CONFIG_INFOS)return null}})@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
57 [style = filled, label = "assertStatistics(3,1,100,1000L)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(null)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "member.poll(EasyMock.anyInt())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "PowerMock.expectLastCall()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "herder.tick()@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(null)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "herder.putConnectorConfig(CONN2,CONN2_CONFIG,false,putConnectorCallback)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "PowerMock.verifyAll()@@@34@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "herder.validateConnectorConfig(EasyMock.eq(CONN1_CONFIG),capture(validateCallback))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->16 [style = bold, label=""];
40->57 [style = bold, label=""];
26->24 [style = bold, label=""];
29->27 [style = bold, label=""];
23->25 [style = bold, label=""];
50->38 [style = bold, label=""];
46->58 [style = bold, label=""];
49->45 [style = bold, label=""];
42->54 [style = bold, label=""];
57->47 [style = bold, label=""];
36->20 [style = bold, label=""];
43->38 [style = solid, label="connectorMock"];
43->46 [style = bold, label=""];
38->49 [style = bold, label=""];
4->5 [style = bold, label=""];
25->26 [style = bold, label=""];
16->0 [style = bold, label=""];
33->34 [style = bold, label=""];
28->19 [style = bold, label=""];
31->22 [style = bold, label=""];
5->43 [style = bold, label=""];
21->8 [style = bold, label=""];
37->52 [style = bold, label=""];
48->44 [style = bold, label=""];
60->40 [style = bold, label=""];
42->54 [style = solid, label="info"];
0->13 [style = bold, label=""];
14->11 [style = bold, label=""];
58->41 [style = bold, label=""];
21->29 [style = bold, label=""];
15->6 [style = bold, label=""];
11->2 [style = bold, label=""];
20->1 [style = bold, label=""];
21->12 [style = bold, label=""];
51->60 [style = bold, label=""];
45->53 [style = bold, label=""];
2->3 [style = bold, label=""];
7->14 [style = bold, label=""];
41->56 [style = bold, label=""];
6->21 [style = bold, label=""];
44->37 [style = bold, label=""];
11->51 [style = dashed, label="0"];
12->10 [style = bold, label=""];
27->36 [style = bold, label=""];
52->51 [style = bold, label=""];
29->27 [style = solid, label="validateCallback"];
10->4 [style = bold, label=""];
32->31 [style = bold, label=""];
30->6 [style = bold, label=""];
55->6 [style = bold, label=""];
22->28 [style = bold, label=""];
3->19 [style = bold, label=""];
5->20 [style = bold, label=""];
1->17 [style = bold, label=""];
54->48 [style = bold, label=""];
35->23 [style = bold, label=""];
59->42 [style = bold, label=""];
13->9 [style = bold, label=""];
17->7 [style = bold, label=""];
53->39 [style = bold, label=""];
19->18 [style = bold, label=""];
18->35 [style = bold, label=""];
39->59 [style = bold, label=""];
9->12 [style = bold, label=""];
3->33 [style = bold, label=""];
34->32 [style = bold, label=""];
56->50 [style = bold, label=""];
}
