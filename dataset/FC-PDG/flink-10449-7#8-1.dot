digraph {
3 [style = filled, label = "tEnv.executeSql(\"CREATE TABLE \" + INPUT_TABLE + \"(\" + \"id BIGINT,\" + \"timestamp6_col TIMESTAMP(6),\" + \"timestamp9_col TIMESTAMP(9),\" + \"time_col TIME,\" + \"real_col FLOAT,\" + \"double_col DOUBLE,\" + \"decimal_col DECIMAL(10, 4)\" + \") WITH (\" + \" 'connector'='jdbc',\" + \" 'url'='\" + DB_URL + \"',\" + \" 'table-name'='\" + INPUT_TABLE + \"'\" + \")\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Iterator<Row> collected = tEnv.executeSql(\"SELECT id,timestamp6_col,decimal_col FROM \" + INPUT_TABLE).collect()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<String> result = CollectionUtil.iteratorToList(collected).stream().map(null).sorted().collect(Collectors.toList())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testJdbcSource['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "tEnv.executeSql(\"CREATE TABLE \" + INPUT_TABLE + \"(\" + \"id BIGINT,\" + \"timestamp6_col TIMESTAMP(6),\" + \"timestamp9_col TIMESTAMP(9),\" + \"time_col TIME,\" + \"real_col FLOAT,\" + \"double_col DOUBLE,\" + \"decimal_col DECIMAL(10, 4)\" + \") WITH (\" + \" 'connector'='jdbc',\" + \" 'url'='\" + DB_URL + \"',\" + \" 'table-name'='\" + INPUT_TABLE + \"',\" + \" 'scan.partition.column'='id',\" + \" 'scan.partition.num'='2',\" + \" 'scan.partition.lower-bound'='0',\" + \" 'scan.partition.upper-bound'='100'\" + \")\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<String> expected = Stream.of(\"+I(1, 2020-01-01T15:35:00.123456, 2020-01-01T15:35:00.123456789, 15:35, 1.175E-37, 1.79769E308, 100.1234(\",\"+I(2, 2020-01-01T15:36:01.123456, 2020-01-01T15:36:01.123456789, 15:36:01, -1.175E-37, -1.79769E308, 101.1234(\").sorted().collect(Collectors.toList())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "List<String> expected = Stream.of(\"1,2020-01-01T15:35:00.123456,100.1234\",\"2,2020-01-01T15:36:01.123456,101.1234\").sorted().collect(Collectors.toList())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<String> expected = Stream.of(\"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\").sorted().collect(Collectors.toList())@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(expected,result)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Iterator<Row> collected = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE).collect()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testProject['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testJdbcSource['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3->8 [style = dashed, label="0"];
4->3 [style = bold, label=""];
1->2 [style = bold, label=""];
10->0 [style = solid, label="expected"];
6->0 [style = bold, label=""];
6->0 [style = solid, label="expected"];
2->0 [style = solid, label="result"];
5->0 [style = bold, label=""];
3->1 [style = bold, label=""];
2->10 [style = bold, label=""];
8->11 [style = bold, label=""];
9->8 [style = bold, label=""];
5->0 [style = solid, label="expected"];
2->6 [style = bold, label=""];
1->11 [style = dashed, label="0"];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
10->0 [style = bold, label=""];
5->10 [style = dashed, label="0"];
2->5 [style = bold, label=""];
}
