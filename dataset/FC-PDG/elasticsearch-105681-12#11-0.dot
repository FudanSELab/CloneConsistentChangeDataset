digraph {
13 [style = filled, label = "testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "transport.handleResponse(requests.get(0).requestId,new TestResponse())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest = new TransportReplicationAction.ConcreteShardRequest<>(request,primaryShard.allocationId().getRelocationId(),primaryTerm)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertTrue(listener.isDone())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "setState(clusterService,state)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final String index = \"test\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(\"primary request was not delegated to relocation target\",requests.get(0).action,equalTo(\"internal:testAction(p(\"))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "executeOnPrimary@@@32@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertPhase(task,\"finished\")@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final List<CapturingTransport.CapturedRequest> requests = transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "isRelocated.set(true)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertThat(requests.size(),equalTo(1))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertFalse(request.isRetrySet.get())@@@52@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertFalse(request.isRetrySet.get())@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "listener.get()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "executeOnPrimary = false@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(executed.get())@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertPhase(task,\"finished\")@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertPhase(task,\"primary_delegation\")@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertTrue(listener.isDone())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertPhase(task,\"finished\")@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "primaryShard.relocating() && randomBoolean()@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "listener.get()@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "listener.actionGet()@@@28@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "String primaryTargetNodeId = primaryShard.relocatingNodeId()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertIndexShardCounter(0)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "new AsyncPrimaryAction(primaryRequest,listener,task)action{@Override protected ReplicationOperation<Request,Request,TransportReplicationAction.PrimaryResult<Request,TestResponse>> createReplicatedOperation(Request request,ActionListener<TransportReplicationAction.PrimaryResult<Request,TestResponse>> actionListener,TransportReplicationAction<Request,Request,TestResponse>.PrimaryShardReference primaryShardReference){return new NoopReplicationOperation(request,actionListener,primaryTerm){@Override public void execute(){assertPhase(task,\"primary\")assertFalse(executed.getAndSet(true))super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13e6424}}}}.run()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(executed.get(),equalTo(true))@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "ClusterState state = state(index,true,ShardRoutingState.RELOCATING)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "AtomicBoolean executed = new AtomicBoolean()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "new AsyncPrimaryAction(primaryRequest,listener,task)new TestAction(Settings.EMPTY,\"internal:testAction2\",transportService,clusterService,shardStateAction,threadPool){@Override protected void shardOperationOnPrimary(Request shardRequest,IndexShard primary,ActionListener<PrimaryResult<Request,TestResponse>> listener){assertPhase(task,\"primary\")assertFalse(executed.getAndSet(true))super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13e6359shardRequestprimarylistener}}.run()@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "Request request = new Request(shardId).timeout(\"1ms\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertFalse(request.isRetrySet.get())@@@34@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertFalse(executed.get())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "ReplicationTask task = maybeTask()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(requests,notNullValue())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "ClusterState state = stateWithActivePrimary(index,true,randomInt(5))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(\"primary term not properly set on primary delegation\",((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(),equalTo(primaryTerm))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(listener.isDone())@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest = new TransportReplicationAction.ConcreteShardRequest<>(request,primaryShard.allocationId().getId(),primaryTerm)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertFalse(request.isRetrySet.get())@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "boolean executeOnPrimary = true@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final ShardId shardId = new ShardId(index,\"_na_\",0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "PlainActionFuture<TestResponse> listener = new PlainActionFuture<>()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "new AsyncPrimaryAction(primaryRequest,listener,task)action{@Override protected ReplicationOperation<Request,Request,TransportReplicationAction.PrimaryResult<Request,TestResponse>> createReplicatedOperation(Request request,ActionListener<TransportReplicationAction.PrimaryResult<Request,TestResponse>> actionListener,TransportReplicationAction<Request,Request,TestResponse>.PrimaryShardReference primaryShardReference){return new NoopReplicationOperation(request,actionListener,primaryTerm){@Override public void execute(){assertPhase(task,\"primary\")assertFalse(executed.getAndSet(true))super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13e628f}}}@Override public void onFailure(Exception e){throw new RuntimeException(e)}}.run()@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->12 [style = dotted, label="true"];
3->51 [style = dotted, label="false"];
31->3 [style = solid, label="executeOnPrimary"];
2->4 [style = bold, label=""];
3->46 [style = dotted, label="false"];
10->30 [style = bold, label=""];
43->32 [style = solid, label="task"];
10->11 [style = bold, label=""];
41->36 [style = bold, label=""];
3->33 [style = dotted, label="false"];
15->26 [style = bold, label=""];
14->8 [style = bold, label=""];
47->3 [style = bold, label=""];
51->46 [style = bold, label=""];
3->50 [style = bold, label=""];
33->29 [style = bold, label=""];
3->35 [style = dotted, label="false"];
9->11 [style = solid, label="primaryTerm"];
5->6 [style = bold, label=""];
4->3 [style = solid, label="executeOnPrimary"];
43->40 [style = solid, label="task"];
10->37 [style = bold, label=""];
31->37 [style = bold, label=""];
38->37 [style = solid, label="request"];
43->6 [style = bold, label=""];
11->20 [style = bold, label=""];
27->25 [style = bold, label=""];
3->28 [style = dotted, label="false"];
49->43 [style = bold, label=""];
43->25 [style = solid, label="task"];
35->28 [style = bold, label=""];
3->36 [style = dotted, label="true"];
30->31 [style = bold, label=""];
16->2 [style = bold, label=""];
28->27 [style = bold, label=""];
3->29 [style = dotted, label="false"];
26->45 [style = bold, label=""];
12->41 [style = bold, label=""];
3->44 [style = dotted, label="true"];
36->40 [style = bold, label=""];
42->33 [style = bold, label=""];
26->45 [style = solid, label="state"];
48->7 [style = bold, label=""];
45->38 [style = bold, label=""];
3->32 [style = dotted, label="false"];
10->31 [style = dotted, label="true"];
46->34 [style = bold, label=""];
38->49 [style = bold, label=""];
29->35 [style = bold, label=""];
20->22 [style = bold, label=""];
7->14 [style = solid, label="index"];
2->37 [style = solid, label="primaryTerm"];
9->0 [style = bold, label=""];
3->42 [style = dotted, label="false"];
6->16 [style = bold, label=""];
12->17 [style = bold, label=""];
15->14 [style = bold, label=""];
3->12 [style = bold, label=""];
22->18 [style = bold, label=""];
4->10 [style = bold, label=""];
7->15 [style = bold, label=""];
37->47 [style = bold, label=""];
3->50 [style = dotted, label="false"];
7->26 [style = solid, label="index"];
25->51 [style = bold, label=""];
5->6 [style = solid, label="state"];
2->27 [style = solid, label="primaryTerm"];
33->29 [style = solid, label="requests"];
13->7 [style = bold, label=""];
8->9 [style = bold, label=""];
3->34 [style = dotted, label="false"];
3->41 [style = dotted, label="true"];
7->15 [style = solid, label="index"];
32->39 [style = bold, label=""];
4->18 [style = solid, label="task"];
11->1 [style = bold, label=""];
50->42 [style = bold, label=""];
10->30 [style = dotted, label="true"];
21->24 [style = bold, label=""];
14->26 [style = dashed, label="0"];
40->44 [style = bold, label=""];
19->21 [style = bold, label=""];
1->3 [style = bold, label=""];
3->40 [style = dotted, label="true"];
3->39 [style = dotted, label="false"];
18->19 [style = bold, label=""];
16->11 [style = solid, label="request"];
23->7 [style = bold, label=""];
4->12 [style = solid, label="task"];
3->25 [style = dotted, label="false"];
3->27 [style = dotted, label="false"];
0->5 [style = bold, label=""];
34->32 [style = bold, label=""];
}
