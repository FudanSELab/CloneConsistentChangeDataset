digraph {
1 [style = filled, label = "List<TreeNodeMock> path = node.getPathFromRoot()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TreeNodeMock node = getNodeInComplexTree(root)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TreeNodeMock node = getNodeInSimpleTree(root)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "getPathFromRootInComplexTree['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TreeNodeTestData.TreeNodeMock node = TreeNodeTestData.getNodeInSimpleTree(root)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "TreeNodeMock root = new TreeNodeMock()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<TreeNodeTestData.TreeNodeMock> path = node.getPathFromRoot()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(node,path.get(2))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "getPathFromRootInSimpleTree['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TreeNodeTestData.TreeNodeMock root = new TreeNodeTestData.TreeNodeMock()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(3,path.size())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(4,path.size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(node,path.get(3))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "getPathFromRootInSimpleTree['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertEquals(root,path.get(0))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
5->12 [style = dashed, label="0"];
0->3 [style = solid, label="root"];
0->12 [style = solid, label="root"];
12->13 [style = solid, label="node"];
0->12 [style = bold, label=""];
2->3 [style = bold, label=""];
9->3 [style = solid, label="root"];
6->0 [style = bold, label=""];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
12->1 [style = bold, label=""];
3->4 [style = bold, label=""];
7->4 [style = solid, label="node"];
0->5 [style = solid, label="root"];
5->1 [style = bold, label=""];
11->0 [style = bold, label=""];
2->14 [style = dashed, label="0"];
8->2 [style = bold, label=""];
9->7 [style = solid, label="root"];
5->4 [style = solid, label="node"];
3->13 [style = bold, label=""];
1->8 [style = dashed, label="0"];
1->14 [style = bold, label=""];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
0->9 [style = dashed, label="0"];
5->7 [style = dashed, label="0"];
4->13 [style = dashed, label="0"];
0->5 [style = bold, label=""];
}
