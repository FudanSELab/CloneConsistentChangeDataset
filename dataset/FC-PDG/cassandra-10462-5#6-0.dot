digraph {
8 [style = filled, label = "ColumnFilter columnFilter = ColumnFilter.allRegularColumnsBuilder(cfs.metadata()).build()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ReadQuery query = new SinglePartitionReadCommand.Group(commands,DataLimits.NONE)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"col=\" + expectedRows(i++(,row.clustering().toString(cfs.metadata()))@@@89@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "ClusteringIndexSliceFilter sliceFilter = new ClusteringIndexSliceFilter(Slices.with(cfs.metadata().comparator,slice),false)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "rowIterator.hasNext()@@@87@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "int i = 0@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "RowUpdateBuilder.deleteRow(cfs.metadata(),FBUtilities.timestampMicros(),ByteBufferUtil.bytes(data(1(),data(2().apply()@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int numPartitions = 0@@@83@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "partitionIterator.hasNext()@@@84@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "iterators.add(UnfilteredPartitionIterators.serializerForIntraNode().deserialize(in,MessagingService.current_version,cfs.metadata(),columnFilter,SerializationHelper.Flag.LOCAL))@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "int nowInSeconds = FBUtilities.nowInSeconds()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testCountWithNoDeletedRow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "UnfilteredPartitionIterators.serializerForIntraNode().serialize(iter,columnFilter,buffer,MessagingService.current_version)@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "commands.add(SinglePartitionReadCommand.create(cfs.metadata(),nowInSeconds,columnFilter,rowFilter,DataLimits.NONE,Util.dk(data(1(),sliceFilter))@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "new RowUpdateBuilder(cfs.metadata(),0,ByteBufferUtil.bytes(data(1()).clustering(data(2().add(data(3(,ByteBufferUtil.bytes(\"blah\")).build().apply()@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(5,numPartitions)@@@93@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "cfs.forceBlockingFlush()@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "cfs.truncateBlocking()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String(((((( groups = new String((((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@301092@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(1,cfs.metric.tombstoneScannedHistogram.cf.getSnapshot().getMax())@@@58@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "List<SinglePartitionReadCommand> commands = new ArrayList<>(group.length)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<UnfilteredPartitionIterator> iterators = new ArrayList<>()@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "RowFilter rowFilter = RowFilter.create()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Row row = rowIterator.next()@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String(( expectedRows = new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@300f2a@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ClusteringIndexSliceFilter sliceFilter = new ClusteringIndexSliceFilter(Slices.with(cfs.metadata().comparator,slice),false)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "UnfilteredPartitionIterators.MergeListener listener = new UnfilteredPartitionIterators.MergeListener(){public UnfilteredRowIterators.MergeListener getRowMergeListener(DecoratedKey partitionKey,List<UnfilteredRowIterator> versions){return null}public void close(){}}@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "data(0(.equals(\"1\")@@@41@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(CF3)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "numPartitions++@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(CF5)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "List<ByteBuffer> buffers = new ArrayList<>(groups.length)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testSinglePartitionGroupMerge['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testSinglePartitionGroupMerge['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "buffers.add(buffer.buffer())@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Slice slice = Slice.make(ClusteringBound.BOTTOM,ClusteringBound.TOP)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(expectedRows.length,i)@@@94@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24->21 [style = bold, label=""];
11->25 [style = bold, label=""];
34->13 [style = bold, label=""];
20->27 [style = bold, label=""];
7->19 [style = dotted, label="true"];
4->34 [style = bold, label=""];
4->23 [style = solid, label="slice"];
31->11 [style = bold, label=""];
27->24 [style = solid, label="nowInSeconds"];
12->19 [style = solid, label="expectedRows"];
7->17 [style = dotted, label="true"];
26->16 [style = bold, label=""];
7->10 [style = bold, label=""];
32->5 [style = bold, label=""];
30->19 [style = solid, label="i"];
18->24 [style = bold, label=""];
2->5 [style = bold, label=""];
1->12 [style = bold, label=""];
5->1 [style = bold, label=""];
17->19 [style = bold, label=""];
15->4 [style = bold, label=""];
9->3 [style = bold, label=""];
30->16 [style = solid, label="i"];
8->3 [style = solid, label="columnFilter"];
10->7 [style = dotted, label="true"];
10->22 [style = dotted, label="true"];
6->26 [style = solid, label="numPartitions"];
6->10 [style = bold, label=""];
14->28 [style = bold, label=""];
27->8 [style = bold, label=""];
10->22 [style = bold, label=""];
31->35 [style = bold, label=""];
23->13 [style = bold, label=""];
23->34 [style = dashed, label="0"];
28->18 [style = dotted, label="false"];
3->31 [style = bold, label=""];
30->6 [style = bold, label=""];
19->16 [style = solid, label="i"];
6->22 [style = solid, label="numPartitions"];
22->7 [style = bold, label=""];
15->24 [style = solid, label="rowFilter"];
34->24 [style = solid, label="sliceFilter"];
28->18 [style = bold, label=""];
12->20 [style = bold, label=""];
4->23 [style = bold, label=""];
36->33 [style = bold, label=""];
10->26 [style = bold, label=""];
7->17 [style = bold, label=""];
25->0 [style = bold, label=""];
0->30 [style = bold, label=""];
22->26 [style = solid, label="numPartitions"];
21->9 [style = bold, label=""];
29->24 [style = bold, label=""];
31->13 [style = bold, label=""];
19->7 [style = bold, label=""];
24->28 [style = bold, label=""];
13->14 [style = bold, label=""];
1->20 [style = bold, label=""];
8->25 [style = solid, label="columnFilter"];
5->33 [style = dashed, label="0"];
4->34 [style = solid, label="slice"];
28->29 [style = dotted, label="true"];
8->24 [style = solid, label="columnFilter"];
8->15 [style = bold, label=""];
28->29 [style = bold, label=""];
14->9 [style = solid, label="commands"];
23->24 [style = solid, label="sliceFilter"];
33->1 [style = bold, label=""];
}
