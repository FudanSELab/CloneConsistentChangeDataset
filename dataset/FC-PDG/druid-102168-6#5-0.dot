digraph {
8 [style = filled, label = "Integer id = repositoryClient.registerSchema(TOPIC,SomeAvroDatum.getClassSchema())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Avro1124SubjectAndIdConverter converter = new Avro1124SubjectAndIdConverter(TOPIC)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "converter.putSubjectAndId(id,byteBuffer)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testParse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "InputRow inputRow = parser2.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ByteArrayOutputStream out = new ByteArrayOutputStream()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "AvroStreamInputRowParser parser = new AvroStreamInputRowParser(PARSE_SPEC,new SchemaRepoBasedAvroBytesDecoder<String,Integer>(new Avro1124SubjectAndIdConverter(TOPIC),repository))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertInputRowCorrect(inputRow,DIMENSIONS_SCHEMALESS,false)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertInputRowCorrect(inputRow,DIMENSIONS,false)@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "AvroStreamInputRowParser parser = new AvroStreamInputRowParser(PARSE_SPEC_SCHEMALESS,new SchemaRepoBasedAvroBytesDecoder<>(new Avro1124SubjectAndIdConverter(TOPIC),repository))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "writer.write(someAvroDatum,EncoderFactory.get().directBinaryEncoder(out,null))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "out.write(byteBuffer.array())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TypedSchemaRepository<Integer,Schema,String> repositoryClient = new TypedSchemaRepository<>(repository,new IntegerConverter(),new AvroSchemaConverter(),new IdentityConverter())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "ByteBuffer byteBuffer = ByteBuffer.allocate(4)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertInputRowCorrect(inputRow,DIMENSIONS_SCHEMALESS)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "DatumWriter<GenericRecord> writer = new SpecificDatumWriter<>(someAvroDatum.getSchema())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "repository = ((SchemaRepoBasedAvroBytesDecoder)((AvroStreamInputRowParser)parser2).getAvroBytesDecoder()).getSchemaRepository()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "AvroStreamInputRowParser parser = new AvroStreamInputRowParser(PARSE_SPEC_SCHEMALESS,new SchemaRepoBasedAvroBytesDecoder<String,Integer>(new Avro1124SubjectAndIdConverter(TOPIC),repository))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "GenericRecord someAvroDatum = buildSomeAvroDatum()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TypedSchemaRepository<Integer,Schema,String> repositoryClient = new TypedSchemaRepository<Integer,Schema,String>(repository,new IntegerConverter(),new AvroSchemaConverter(),new IdentityConverter())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Repository repository = new InMemoryRepository(null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ByteBufferInputRowParser parser2 = jsonMapper.readValue(jsonMapper.writeValueAsString(parser),)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testParseSchemaless['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testParseSchemaless['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11->16 [style = bold, label=""];
11->20 [style = bold, label=""];
8->10 [style = solid, label="id"];
15->2 [style = bold, label=""];
16->8 [style = bold, label=""];
10->14 [style = bold, label=""];
0->20 [style = solid, label="repository"];
3->18 [style = dashed, label="0"];
9->10 [style = solid, label="byteBuffer"];
4->13 [style = bold, label=""];
7->4 [style = solid, label="repository"];
7->21 [style = solid, label="repository"];
5->15 [style = bold, label=""];
3->22 [style = dashed, label="0"];
7->4 [style = bold, label=""];
9->10 [style = bold, label=""];
1->2 [style = solid, label="someAvroDatum"];
4->21 [style = dashed, label="0"];
2->12 [style = bold, label=""];
1->11 [style = bold, label=""];
0->16 [style = solid, label="repository"];
4->13 [style = solid, label="parser"];
17->7 [style = bold, label=""];
20->8 [style = bold, label=""];
7->19 [style = solid, label="repository"];
21->13 [style = solid, label="parser"];
10->5 [style = bold, label=""];
19->13 [style = bold, label=""];
21->13 [style = bold, label=""];
0->1 [style = bold, label=""];
14->2 [style = solid, label="out"];
8->9 [style = bold, label=""];
12->18 [style = bold, label=""];
7->21 [style = bold, label=""];
4->19 [style = dashed, label="0"];
12->3 [style = bold, label=""];
23->7 [style = bold, label=""];
12->3 [style = solid, label="inputRow"];
12->22 [style = solid, label="inputRow"];
6->7 [style = bold, label=""];
7->19 [style = bold, label=""];
12->22 [style = bold, label=""];
19->13 [style = solid, label="parser"];
13->0 [style = bold, label=""];
14->5 [style = bold, label=""];
16->20 [style = dashed, label="0"];
12->18 [style = solid, label="inputRow"];
}
