digraph {
20 [style = filled, label = "final ConfigureStaticNatRulesOnLogicalRouterCommand cmd = mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "when(cmd.getLogicalRouterUuid()).thenReturn(\"aaaaa\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "verify(nvpApi,atLeast(2)).createLogicalRouterNatRule(eq(\"aaaaa\"),argThat(new ArgumentMatcher<NatRule>(){@Override public boolean matches(final Object argument){final NatRule rule = (NatRule)argumentif (rule.getType().equals(\"DestinationNatRule\") && ((DestinationNatRule)rule).getToDestinationIpAddress().equals(\"10.10.10.10\")) {return true}if (rule.getType().equals(\"SourceNatRule\") && ((SourceNatRule)rule).getToSourceIpAddressMin().equals(\"11.11.11.11\")) {return true}return false}}))@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "@SuppressWarnings(\"unchecked\") final List<NatRule> storedRules = Collections.EMPTY_LIST@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final PortForwardingRuleTO rule = new PortForwardingRuleTO(1,\"11.11.11.11\",80,80,\"10.10.10.10\",8080,8080,\"tcp\",false,false)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "when(nvpApi.createLogicalRouterNatRule(eq(\"aaaaa\"),(NatRule)any())).thenReturn(rulepair(0().thenReturn(rulepair(1()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "rulepair(1(.setUuid(UUID.randomUUID())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "when(cmd.getRules()).thenReturn(rules)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final List<StaticNatRuleTO> rules = new ArrayList<StaticNatRuleTO>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "when(nvpApi.findNatRulesByLogicalRouterUuid(\"aaaaa\")).thenReturn(storedRules)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(a.getResult())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(nvpApi.createLogicalRouterNatRule(eq(\"aaaaa\"),(NatRule)any())).thenReturn(rulepair(0().thenReturn(rulepair(1()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final NatRule(( rulepair = resource.generateStaticNatRulePair(\"10.10.10.10\",\"11.11.11.11\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "resource.configure(\"NiciraNvpResource\",parameters)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final ConfigurePortForwardingRulesOnLogicalRouterAnswer a = (ConfigurePortForwardingRulesOnLogicalRouterAnswer)resource.executeRequest(cmd)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final NatRule(( rulepair = resource.generatePortForwardingRulePair(\"10.10.10.10\",new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@7b7e27,\"11.11.11.11\",new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@7b7e2d,\"tcp\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testConfigurePortForwardingRulesOnLogicalRouter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "final ConfigureStaticNatRulesOnLogicalRouterAnswer a = (ConfigureStaticNatRulesOnLogicalRouterAnswer)resource.executeRequest(cmd)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "verify(nvpApi,atLeast(2)).createLogicalRouterNatRule(eq(\"aaaaa\"),argThat(new ArgumentMatcher<NatRule>(){@Override public boolean matches(final NatRule rule){if (rule.getType().equals(\"DestinationNatRule\") && ((DestinationNatRule)rule).getToDestinationIpAddress().equals(\"10.10.10.10\")) {return true}if (rule.getType().equals(\"SourceNatRule\") && ((SourceNatRule)rule).getToSourceIpAddressMin().equals(\"11.11.11.11\")) {return true}return false}}))@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final ConfigurePortForwardingRulesOnLogicalRouterCommand cmd = mock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testConfigureStaticNatRulesOnLogicalRouter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testConfigurePortForwardingRulesOnLogicalRouter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(a.getResult())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final List<PortForwardingRuleTO> rules = new ArrayList<PortForwardingRuleTO>()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "rules.add(rule)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final StaticNatRuleTO rule = new StaticNatRuleTO(1,\"11.11.11.11\",null,null,\"10.10.10.10\",null,null,null,false,false)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "rulepair(0(.setUuid(UUID.randomUUID())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21->16 [style = solid, label="rules"];
23->3 [style = bold, label=""];
26->22 [style = bold, label=""];
1->5 [style = solid, label="cmd"];
15->4 [style = solid, label="rule"];
4->16 [style = bold, label=""];
1->20 [style = dashed, label="0"];
25->24 [style = bold, label=""];
13->11 [style = solid, label="rulepair"];
0->3 [style = bold, label=""];
17->3 [style = bold, label=""];
10->25 [style = bold, label=""];
15->7 [style = bold, label=""];
14->11 [style = bold, label=""];
5->18 [style = dashed, label="0"];
3->20 [style = bold, label=""];
6->2 [style = bold, label=""];
3->1 [style = bold, label=""];
20->19 [style = bold, label=""];
16->12 [style = bold, label=""];
19->21 [style = bold, label=""];
7->21 [style = dashed, label="0"];
18->9 [style = bold, label=""];
10->13 [style = bold, label=""];
13->25 [style = dashed, label="0"];
7->16 [style = solid, label="rules"];
7->4 [style = bold, label=""];
25->22 [style = solid, label="rulepair"];
22->18 [style = bold, label=""];
1->15 [style = bold, label=""];
9->14 [style = bold, label=""];
13->9 [style = bold, label=""];
8->10 [style = solid, label="storedRules"];
21->4 [style = bold, label=""];
12->8 [style = bold, label=""];
24->26 [style = bold, label=""];
19->4 [style = solid, label="rule"];
8->10 [style = bold, label=""];
20->18 [style = solid, label="cmd"];
5->6 [style = bold, label=""];
11->5 [style = bold, label=""];
}
