digraph {
9 [style = filled, label = "containsNullsOnly(id)@@@4@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "eq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "int cmp = lit.comparator().compare(lower,lit.value())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "T lower = Conversions.fromByteBuffer(ref.type(),lowerBounds.get(id))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "return ROWS_CANNOT_MATCH@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return ROWS_CANNOT_MATCH@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "BoundReference<T> ref@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return ROWS_CANNOT_MATCH@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Integer id = ref.fieldId()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Literal<T> lit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "cmp < 0@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "lowerBounds != null && lowerBounds.containsKey(id)@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "int cmp = lit.comparator().compare(upper,lit.value())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "cmp > 0@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "upperBounds != null && upperBounds.containsKey(id)@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "gtEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "containsNullsOnly(id) || containsNaNsOnly(id)@@@4@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Literal<T> lit@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "return ROWS_MIGHT_MATCH@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "gtEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "T upper = Conversions.fromByteBuffer(ref.type(),upperBounds.get(id))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->19 [style = dotted, label="true"];
18->3 [style = bold, label=""];
12->7 [style = dotted, label="true"];
11->3 [style = bold, label=""];
3->10 [style = bold, label=""];
21->3 [style = bold, label=""];
10->1 [style = solid, label="upper"];
9->11 [style = bold, label=""];
14->3 [style = bold, label=""];
11->21 [style = bold, label=""];
21->22 [style = bold, label=""];
20->16 [style = bold, label=""];
8->0 [style = bold, label=""];
3->2 [style = bold, label=""];
3->1 [style = dotted, label="true"];
16->18 [style = bold, label=""];
4->21 [style = solid, label="id"];
4->9 [style = solid, label="id"];
9->3 [style = bold, label=""];
1->8 [style = bold, label=""];
20->16 [style = solid, label="cmp"];
12->4 [style = bold, label=""];
9->11 [style = dotted, label="true"];
3->8 [style = dotted, label="true"];
12->13 [style = dotted, label="true"];
21->22 [style = dotted, label="true"];
16->18 [style = dotted, label="true"];
7->19 [style = dashed, label="0"];
5->7 [style = dotted, label="true"];
9->21 [style = bold, label=""];
22->20 [style = bold, label=""];
14->11 [style = bold, label=""];
22->20 [style = solid, label="lower"];
21->20 [style = dotted, label="true"];
5->4 [style = bold, label=""];
17->4 [style = bold, label=""];
10->1 [style = bold, label=""];
3->10 [style = dotted, label="true"];
5->6 [style = dotted, label="true"];
17->15 [style = dotted, label="true"];
8->2 [style = bold, label=""];
9->14 [style = dashed, label="0"];
16->3 [style = bold, label=""];
4->9 [style = bold, label=""];
1->8 [style = solid, label="cmp"];
4->3 [style = solid, label="id"];
4->14 [style = bold, label=""];
4->14 [style = solid, label="id"];
4->22 [style = solid, label="id"];
0->2 [style = bold, label=""];
14->11 [style = dotted, label="true"];
21->16 [style = dotted, label="true"];
4->10 [style = solid, label="id"];
8->0 [style = dotted, label="true"];
}
