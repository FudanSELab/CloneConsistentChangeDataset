digraph {
17 [style = filled, label = "selectStatementContext.setIndexes(Collections.singletonMap(\"id\",3))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertSetIndexWhenAggregationProjectionsPresent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(selectStatementContext.getOrderByContext().getItems().iterator().next().getIndex(),is(3))@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(selectStatementContext.getOrderByContext().getItems().iterator().next().getIndex(),is(3))@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Map<String,Integer> columnLabelIndexMap = new HashMap<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "selectStatement.setProjections(projectionsSegment)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "selectStatement.setOrderBy(new OrderBySegment(0,0,Collections.singletonList(createOrderByItemSegment(COLUMN_ORDER_BY_WITHOUT_OWNER_ALIAS))))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "columnLabelIndexMap.put(\"n\",2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final SelectStatement selectStatement@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(selectStatementContext.getOrderByContext().getItems().iterator().next().getIndex(),is(2))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "SelectStatementContext selectStatementContext = new SelectStatementContext(selectStatement,new GroupByContext(Collections.emptyList()),createOrderBy(COLUMN_ORDER_BY_WITHOUT_OWNER_ALIAS),projectionsContext,null)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ProjectionsContext projectionsContext = new ProjectionsContext(0,0,false,Collections.singletonList(aggregationProjection))@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "selectStatementContext.setIndexes(Collections.singletonMap(\"id\",3))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "SelectStatementContext selectStatementContext = new SelectStatementContext(selectStatement,new GroupByContext(Collections.emptyList()),createOrderBy(COLUMN_ORDER_BY_WITH_ALIAS),createProjectionsContext(),null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "AggregationProjectionSegment aggregationProjectionSegment = new AggregationProjectionSegment(0,0,AggregationType.MAX,\"\")@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "projectionsSegment.getProjections().add(aggregationProjectionSegment)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "final SelectStatement selectStatement@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME,metaData),Collections.emptyList(),selectStatement,DefaultSchema.LOGIC_NAME)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "ProjectionsSegment projectionsSegment = new ProjectionsSegment(0,0)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertSetIndexWhenAggregationProjectionsPresent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertSetIndexForItemsByColumnOrderByWithAlias['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final ShardingSphereMetaData metaData = mock()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "aggregationProjection.getDerivedAggregationProjections().addAll(Collections.singletonList(aggregationProjection))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "selectStatementContext.setIndexes(columnLabelIndexMap)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "aggregationProjectionSegment.setAlias(new AliasSegment(0,0,new IdentifierValue(\"id\")))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "AggregationProjection aggregationProjection = new AggregationProjection(AggregationType.MAX,\"\",\"id\")@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->7 [style = solid, label="projectionsContext"];
4->2 [style = solid, label="aggregationProjection"];
25->23 [style = bold, label=""];
5->23 [style = dashed, label="0"];
0->8 [style = solid, label="selectStatement"];
21->22 [style = dotted, label="true"];
1->18 [style = dashed, label="0"];
9->10 [style = bold, label=""];
3->4 [style = bold, label=""];
0->22 [style = dashed, label="0"];
19->24 [style = bold, label=""];
14->8 [style = solid, label="metaData"];
8->17 [style = bold, label=""];
7->5 [style = bold, label=""];
4->1 [style = solid, label="aggregationProjection"];
21->20 [style = bold, label=""];
5->6 [style = bold, label=""];
10->13 [style = bold, label=""];
22->20 [style = solid, label="selectStatement"];
9->13 [style = solid, label="aggregationProjectionSegment"];
24->25 [style = bold, label=""];
12->14 [style = bold, label=""];
3->0 [style = dotted, label="true"];
16->15 [style = solid, label="projectionsSegment"];
12->0 [style = dotted, label="true"];
0->7 [style = solid, label="selectStatement"];
14->18 [style = bold, label=""];
4->1 [style = bold, label=""];
1->2 [style = bold, label=""];
13->15 [style = bold, label=""];
2->7 [style = bold, label=""];
19->25 [style = solid, label="columnLabelIndexMap"];
20->19 [style = bold, label=""];
15->8 [style = bold, label=""];
16->9 [style = bold, label=""];
17->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
