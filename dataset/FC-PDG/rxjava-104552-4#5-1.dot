digraph {
5 [style = filled, label = "emitMaterializedNotifications['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Observable<Notification<String>> os = Observable.just(\"a\",\"b\",\"c\").materialize()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "o.subscribe(new Consumer<String>(){@Override public void accept(String s){System.out.println(s)list.add(s)}})@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Flowable<Notification<String>> os = Flowable.just(\"a\",\"b\",\"c\").materialize()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Observable<String> o = Observable.zip(oi,os,new BiFunction<Notification<Integer>,Notification<String>,String>(){@Override public String apply(Notification<Integer> t1,Notification<String> t2){return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2)}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"OnNext_1-OnNext_a\",list.get(0))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Flowable<String> f = Flowable.zip(oi,os,new BiFunction<Notification<Integer>,Notification<String>,String>(){@Override public String apply(Notification<Integer> t1,Notification<String> t2){return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2)}})@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"OnComplete_null-OnComplete_null\",list.get(3))@@@23@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"OnNext_2-OnNext_b\",list.get(1))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"OnNext_3-OnNext_c\",list.get(2))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final ArrayList<String> list = new ArrayList<>()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Observable<Notification<Integer>> oi = Observable.just(1,2,3).materialize()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "emitMaterializedNotifications['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(4,list.size())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ArrayList<String> list = new ArrayList<String>()@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "f.subscribe(new Consumer<String>(){@Override public void accept(String s){System.out.println(s)list.add(s)}})@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Flowable<Notification<Integer>> oi = Flowable.just(1,2,3).materialize()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "emitMaterializedNotifications['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
11->6 [style = bold, label=""];
0->2 [style = bold, label=""];
8->15 [style = dashed, label="0"];
1->3 [style = bold, label=""];
14->15 [style = solid, label="oi"];
14->17 [style = bold, label=""];
2->17 [style = dashed, label="0"];
12->0 [style = bold, label=""];
2->8 [style = solid, label="os"];
0->14 [style = dashed, label="0"];
6->1 [style = bold, label=""];
6->16 [style = dashed, label="0"];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
16->1 [style = bold, label=""];
15->4 [style = bold, label=""];
17->15 [style = bold, label=""];
10->9 [style = bold, label=""];
17->15 [style = solid, label="os"];
0->8 [style = solid, label="oi"];
8->4 [style = bold, label=""];
4->11 [style = dashed, label="0"];
8->11 [style = bold, label=""];
13->14 [style = bold, label=""];
4->16 [style = bold, label=""];
2->8 [style = bold, label=""];
}
