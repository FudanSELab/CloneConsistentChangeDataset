digraph {
7 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(fullQuery,\"2011-04-01\",\"alias\",\"automotive\",\"rows\",2L,\"idx\",269L),makeRow(fullQuery,\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),makeRow(fullQuery,\"2011-04-01\",\"alias\",\"entertainment\",\"rows\",2L,\"idx\",319L),makeRow(fullQuery,\"2011-04-01\",\"alias\",\"health\",\"rows\",2L,\"idx\",216L),makeRow(fullQuery,\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L),makeRow(fullQuery,\"2011-04-01\",\"alias\",\"news\",\"rows\",2L,\"idx\",221L),makeRow(fullQuery,\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L),makeRow(fullQuery,\"2011-04-01\",\"alias\",\"technology\",\"rows\",2L,\"idx\",177L),makeRow(fullQuery,\"2011-04-01\",\"alias\",\"travel\",\"rows\",2L,\"idx\",243L))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setLimit(limit)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testMergeResultsWithNegativeLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setLimit(-1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "QueryRunner<Row> mergeRunner = factory.getToolchest().mergeResults(runner)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "final int limit@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "QueryRunner<ResultRow> mergeRunner = factory.getToolchest().mergeResults(runner)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"automotive\",\"rows\",2L,\"idx\",269L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"entertainment\",\"rows\",2L,\"idx\",319L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health\",\"rows\",2L,\"idx\",216L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news\",\"rows\",2L,\"idx\",221L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"technology\",\"rows\",2L,\"idx\",177L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"travel\",\"rows\",2L,\"idx\",243L))@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "doTestMergeResultsWithValidLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "builder.build()@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,limit),mergeRunner.run(QueryPlus.wrap(fullQuery)),StringUtils.format(\"limit: %d\",limit))@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final GroupByQuery fullQuery = builder.build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "doTestMergeResultsWithValidLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7->6 [style = solid, label="expectedResults"];
4->3 [style = solid, label="limit"];
0->2 [style = bold, label=""];
8->3 [style = bold, label=""];
1->3 [style = bold, label=""];
5->9 [style = dashed, label="0"];
11->12 [style = bold, label=""];
1->4 [style = dotted, label="true"];
0->12 [style = dashed, label="0"];
8->4 [style = dotted, label="true"];
3->0 [style = bold, label=""];
9->6 [style = bold, label=""];
0->7 [style = bold, label=""];
0->6 [style = solid, label="fullQuery"];
7->9 [style = bold, label=""];
0->7 [style = solid, label="fullQuery"];
5->6 [style = bold, label=""];
4->6 [style = solid, label="limit"];
2->6 [style = solid, label="expectedResults"];
3->11 [style = dashed, label="0"];
2->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
