digraph {
36 [style = filled, label = "Record l1 = new Record(AvroSchemaUtil.fromOption(AvroSchemaUtil.fromOption(record.getSchema().getField(\"locations\").schema()).getValueType()))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertNotNull(\"L2 should not be null\",projectedL2)@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertNull(\"L1 should not contain long\",projectedL1.get(\"long\"))@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(\"L1 should contain latitude\",53.992811f,(float)projectedL1.get(\"latitude\"),0.000001)@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "projected = writeAndRead(\"long_only\",writeSchema,writeSchema.select(\"locations.long\"),record)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projectedL1,\"lat\")@@@40@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "testMapOfStructsProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"id\")@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "projected = writeAndRead(\"all_locations\",writeSchema,writeSchema.select(\"locations\"),record)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Map<String,?> locations = toStringMap((Map)projected.get(\"locations\"))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Record projectedL2 = (Record)locations.get(\"L2\")@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "l2.put(\"long\",-1.539054f)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@48@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projectedL2,\"long\")@@@61@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
68 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projectedL1,\"long\")@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertNotNull(\"L2 should not be null\",projectedL2)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNotNull(\"L2 should not be null\",projectedL2)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(\"Should contain L1 and L2\",Sets.newHashSet(\"L1\",\"L2\"),locations.keySet())@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"L2 should contain latitude\",52.995143f,(float)projectedL2.get(\"latitude\"),0.000001)@@@59@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(5,\"locations\",Types.MapType.ofOptional(6,7,Types.StringType.get(),Types.StructType.of(Types.NestedField.required(1,\"lat\",Types.FloatType.get()),Types.NestedField.required(2,\"long\",Types.FloatType.get())))))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "projected = writeAndRead(\"latitude_renamed\",writeSchema,latitiudeRenamed,record)@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertNotNull(\"L1 should not be null\",projectedL1)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "l2.put(\"lat\",52.995143f)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projectedL1,\"long\")@@@56@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "Assert.assertNull(\"L1 should not contain lat\",projectedL1.get(\"lat\"))@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(\"Should contain L1 and L2\",Sets.newHashSet(\"L1\",\"L2\"),locations.keySet())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Record l2 = new Record(l1.getSchema())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertNotNull(\"Should project locations map\",locations)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projectedL2,\"lat\")@@@60@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "projected = writeAndRead(\"lat_only\",writeSchema,writeSchema.select(\"locations.lat\"),record)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertNull(\"L2 should not contain lat\",projectedL2.get(\"lat\"))@@@44@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertNull(\"L1 should not contain long\",projectedL1.get(\"long\"))@@@56@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertNotNull(\"L1 should not be null\",projectedL1)@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Schema latitiudeRenamed = new Schema(Types.NestedField.optional(5,\"locations\",Types.MapType.ofOptional(6,7,Types.StringType.get(),Types.StructType.of(Types.NestedField.required(1,\"latitude\",Types.FloatType.get())))))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projectedL2,\"y\")@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Assert.assertNull(\"L2 should not contain long\",projectedL2.get(\"long\"))@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "record.put(\"locations\",ImmutableMap.of(\"L1\",l1,\"L2\",l2))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertNull(\"L2 should not contain long\",projectedL2.get(\"long\"))@@@61@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertNotNull(\"Should project locations map\",locations)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "projectedL2 = (Record)locations.get(\"L2\")@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "projectedL1 = (Record)locations.get(\"L1\")@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"id\")@@@48@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "Assert.assertNull(\"L1 should not contain lat\",projectedL1.get(\"lat\"))@@@55@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "locations = toStringMap((Map)projected.get(\"locations\"))@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertNotNull(\"L1 should not be null\",projectedL1)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(\"Should contain L1 and L2\",Sets.newHashSet(\"L1\",\"L2\"),locations.keySet())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "l1.put(\"long\",-1.542616f)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projectedL1,\"lat\")@@@55@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
61 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projectedL2,\"lat\")@@@44@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(\"L1 should contain lat\",53.992811f,(float)projectedL1.get(\"lat\"),0.000001)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertNotNull(\"Should project locations map\",locations)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Schema idOnly = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "testMapOfStructsProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertNull(\"Should not project locations map\",projected.get(\"locations\"))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(\"L2 should contain lat\",52.995143f,(float)projectedL2.get(\"lat\"),0.000001)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(\"L1 should contain long\",-1.542616f,(float)projectedL1.get(\"long\"),0.000001)@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@34@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"locations\")@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
74 [style = filled, label = "testMapOfStructsProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "l1.put(\"lat\",53.992811f)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"id\")@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Record projectedL1 = (Record)locations.get(\"L1\")@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Record projected = writeAndRead(\"id_only\",writeSchema,idOnly,record)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "projectedL2 = (Record)locations.get(\"L2\")@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertNull(\"L2 should not contain lat\",projectedL2.get(\"lat\"))@@@60@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(\"L2 should contain long\",-1.539054f,(float)projectedL2.get(\"long\"),0.000001)@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "locations = toStringMap((Map)projected.get(\"locations\"))@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(\"Should project locations map\",record.get(\"locations\"),toStringMap((Map)projected.get(\"locations\")))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "projectedL1 = (Record)locations.get(\"L1\")@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "record.put(\"id\",34L)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"id\")@@@34@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13->61 [style = bold, label=""];
35->29 [style = solid, label="locations"];
12->33 [style = bold, label=""];
59->23 [style = bold, label=""];
39->17 [style = bold, label=""];
56->19 [style = bold, label=""];
25->3 [style = bold, label=""];
24->51 [style = bold, label=""];
74->18 [style = bold, label=""];
60->47 [style = bold, label=""];
67->33 [style = bold, label=""];
33->73 [style = bold, label=""];
57->33 [style = solid, label="record"];
21->40 [style = solid, label="locations"];
7->6 [style = bold, label=""];
70->21 [style = bold, label=""];
48->4 [style = bold, label=""];
71->22 [style = bold, label=""];
69->65 [style = bold, label=""];
2->10 [style = bold, label=""];
20->47 [style = bold, label=""];
42->71 [style = bold, label=""];
14->42 [style = solid, label="projectedL1"];
52->55 [style = bold, label=""];
37->0 [style = bold, label=""];
64->49 [style = bold, label=""];
50->53 [style = bold, label=""];
40->56 [style = bold, label=""];
44->49 [style = bold, label=""];
0->64 [style = solid, label="projectedL1"];
1->30 [style = bold, label=""];
19->7 [style = solid, label="projectedL1"];
28->70 [style = bold, label=""];
23->38 [style = bold, label=""];
53->67 [style = bold, label=""];
11->36 [style = bold, label=""];
55->39 [style = bold, label=""];
19->7 [style = bold, label=""];
51->50 [style = solid, label="idOnly"];
18->57 [style = solid, label="writeSchema"];
30->60 [style = bold, label=""];
18->28 [style = solid, label="writeSchema"];
72->35 [style = bold, label=""];
61->52 [style = bold, label=""];
26->18 [style = bold, label=""];
47->59 [style = bold, label=""];
68->34 [style = bold, label=""];
57->47 [style = solid, label="record"];
18->33 [style = solid, label="writeSchema"];
31->22 [style = bold, label=""];
33->73 [style = solid, label="projected"];
43->15 [style = bold, label=""];
39->72 [style = solid, label="projected"];
51->50 [style = bold, label=""];
36->41 [style = bold, label=""];
16->2 [style = bold, label=""];
27->8 [style = bold, label=""];
9->24 [style = bold, label=""];
18->47 [style = solid, label="writeSchema"];
41->16 [style = bold, label=""];
57->39 [style = solid, label="record"];
62->23 [style = bold, label=""];
36->24 [style = solid, label="l1"];
50->67 [style = solid, label="projected"];
14->71 [style = solid, label="projectedL1"];
15->32 [style = bold, label=""];
45->14 [style = bold, label=""];
39->72 [style = bold, label=""];
47->62 [style = bold, label=""];
23->38 [style = solid, label="locations"];
49->48 [style = solid, label="projectedL2"];
38->45 [style = bold, label=""];
21->40 [style = bold, label=""];
4->69 [style = bold, label=""];
4->27 [style = bold, label=""];
66->64 [style = bold, label=""];
19->68 [style = solid, label="projectedL1"];
54->52 [style = bold, label=""];
18->50 [style = solid, label="writeSchema"];
30->20 [style = bold, label=""];
6->58 [style = bold, label=""];
0->43 [style = bold, label=""];
5->21 [style = bold, label=""];
34->60 [style = solid, label="projectedL2"];
28->5 [style = bold, label=""];
47->62 [style = solid, label="projected"];
49->69 [style = solid, label="projectedL2"];
0->43 [style = solid, label="projectedL1"];
49->48 [style = bold, label=""];
57->50 [style = solid, label="record"];
73->3 [style = bold, label=""];
17->35 [style = bold, label=""];
46->13 [style = bold, label=""];
42->31 [style = bold, label=""];
28->70 [style = solid, label="projected"];
14->42 [style = bold, label=""];
10->9 [style = bold, label=""];
29->37 [style = bold, label=""];
46->13 [style = solid, label="projectedL2"];
53->12 [style = bold, label=""];
0->66 [style = solid, label="projectedL1"];
49->65 [style = solid, label="projectedL2"];
57->11 [style = bold, label=""];
34->1 [style = solid, label="projectedL2"];
22->46 [style = bold, label=""];
46->61 [style = solid, label="projectedL2"];
63->18 [style = bold, label=""];
55->39 [style = solid, label="latitiudeRenamed"];
18->39 [style = solid, label="writeSchema"];
57->28 [style = solid, label="record"];
18->57 [style = bold, label=""];
2->24 [style = solid, label="l2"];
35->29 [style = bold, label=""];
32->44 [style = bold, label=""];
6->68 [style = bold, label=""];
33->25 [style = bold, label=""];
3->28 [style = bold, label=""];
13->54 [style = bold, label=""];
15->66 [style = bold, label=""];
34->1 [style = bold, label=""];
58->34 [style = bold, label=""];
}
