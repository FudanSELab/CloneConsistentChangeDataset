digraph {
40 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(TRIGGER_COUNT),CountEvictor.of(WINDOW_SIZE,EVICT_AFTER),0,null)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final int windowSize = 4@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(windowSlide),CountEvictor.of(windowSize),0,null)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",6),Long.MAX_VALUE))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "testCountEvictorEvictAfter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertEquals(\"Close was not called.\",1,closeCalled.get())@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",streamRecordSerializer)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1998))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3999))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",streamRecordSerializer)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 10999))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",2),Long.MAX_VALUE))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "AtomicInteger closeCalled = new AtomicInteger(0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testCountTriggerWithApply['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",4),Long.MAX_VALUE))@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final int TRIGGER_COUNT = 2@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testHarness.close()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "long initialTime = 0L@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),Long.MAX_VALUE))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final int windowSlide = 2@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "final boolean EVICT_AFTER = true@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1999))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final int WINDOW_SLIDE = 2@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "final int WINDOW_SIZE = 4@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testHarness.open()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) TypeSerializer<StreamRecord<Tuple2<String,Integer>>> streamRecordSerializer = (TypeSerializer<StreamRecord<Tuple2<String,Integer>>>)new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",6),Long.MAX_VALUE))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 20))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testCountTriggerWithApply['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 999))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->36 [style = dashed, label="0"];
17->25 [style = bold, label=""];
6->43 [style = bold, label=""];
29->5 [style = bold, label=""];
9->11 [style = bold, label=""];
3->24 [style = bold, label=""];
7->16 [style = solid, label="initialTime"];
30->20 [style = bold, label=""];
7->15 [style = solid, label="initialTime"];
19->1 [style = solid, label="expectedOutput"];
7->20 [style = solid, label="initialTime"];
12->42 [style = bold, label=""];
5->30 [style = solid, label="initialTime"];
33->11 [style = bold, label=""];
12->2 [style = bold, label=""];
28->18 [style = solid, label="closeCalled"];
28->21 [style = bold, label=""];
20->16 [style = bold, label=""];
21->36 [style = bold, label=""];
39->40 [style = solid, label="EVICT_AFTER"];
14->44 [style = dashed, label="0"];
5->13 [style = solid, label="initialTime"];
5->26 [style = solid, label="initialTime"];
44->1 [style = bold, label=""];
7->0 [style = solid, label="initialTime"];
2->32 [style = bold, label=""];
45->35 [style = bold, label=""];
18->32 [style = dashed, label="0"];
15->13 [style = bold, label=""];
1->41 [style = bold, label=""];
18->29 [style = solid, label="operator"];
27->0 [style = bold, label=""];
38->28 [style = bold, label=""];
41->37 [style = bold, label=""];
42->18 [style = solid, label="streamRecordSerializer"];
2->18 [style = bold, label=""];
11->12 [style = bold, label=""];
5->15 [style = solid, label="initialTime"];
21->18 [style = solid, label="WINDOW_SIZE"];
5->3 [style = solid, label="initialTime"];
19->27 [style = solid, label="expectedOutput"];
8->17 [style = bold, label=""];
7->30 [style = solid, label="initialTime"];
25->27 [style = bold, label=""];
21->9 [style = bold, label=""];
7->41 [style = solid, label="initialTime"];
40->5 [style = bold, label=""];
7->25 [style = solid, label="expectedOutput"];
19->26 [style = bold, label=""];
31->33 [style = bold, label=""];
32->29 [style = solid, label="operator"];
39->12 [style = bold, label=""];
5->7 [style = bold, label=""];
37->45 [style = bold, label=""];
7->23 [style = solid, label="expectedOutput"];
24->8 [style = bold, label=""];
5->16 [style = solid, label="initialTime"];
33->32 [style = solid, label="windowSlide"];
28->32 [style = solid, label="closeCalled"];
13->10 [style = bold, label=""];
18->40 [style = dashed, label="0"];
4->14 [style = bold, label=""];
7->24 [style = solid, label="initialTime"];
28->31 [style = bold, label=""];
18->40 [style = bold, label=""];
22->28 [style = bold, label=""];
36->39 [style = bold, label=""];
5->0 [style = solid, label="initialTime"];
7->4 [style = solid, label="initialTime"];
5->27 [style = solid, label="initialTime"];
34->28 [style = bold, label=""];
19->35 [style = solid, label="expectedOutput"];
21->31 [style = dashed, label="0"];
5->20 [style = solid, label="initialTime"];
1->6 [style = bold, label=""];
7->13 [style = solid, label="initialTime"];
9->18 [style = solid, label="WINDOW_SLIDE"];
14->23 [style = bold, label=""];
5->10 [style = solid, label="initialTime"];
12->2 [style = solid, label="streamRecordSerializer"];
7->19 [style = bold, label=""];
16->15 [style = bold, label=""];
40->5 [style = solid, label="operator"];
42->18 [style = bold, label=""];
18->40 [style = solid, label="stateDesc"];
35->6 [style = bold, label=""];
7->10 [style = solid, label="initialTime"];
21->40 [style = solid, label="WINDOW_SIZE"];
10->3 [style = bold, label=""];
2->32 [style = solid, label="stateDesc"];
14->44 [style = bold, label=""];
9->33 [style = dashed, label="0"];
26->30 [style = bold, label=""];
32->29 [style = bold, label=""];
7->3 [style = solid, label="initialTime"];
18->29 [style = bold, label=""];
2->18 [style = solid, label="stateDesc"];
7->37 [style = solid, label="initialTime"];
0->4 [style = bold, label=""];
23->1 [style = bold, label=""];
31->32 [style = solid, label="windowSize"];
28->40 [style = solid, label="closeCalled"];
36->40 [style = solid, label="TRIGGER_COUNT"];
}
