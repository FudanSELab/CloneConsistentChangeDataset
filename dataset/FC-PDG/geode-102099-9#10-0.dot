digraph {
16 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "ConcurrentMapWithReusableEntries map@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "factory != null@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "createOwner['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "LocalRegion owner = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "map != null@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(owner.getCachePerfStats()).thenReturn(cachePerfStats)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return owner@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestableAbstractRegionMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ConcurrentMapWithReusableEntries map@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "RegionEntryFactory factory@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "when(owner.getEvictionAttributes()).thenReturn(evictionAttributes)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "CachePerfStats cachePerfStats = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestableAbstractRegionMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "when(owner.isInitialized()).thenReturn(true)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "setEntryMap(map)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "when(owner.getScope()).thenReturn(Scope.LOCAL)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "super(null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "setEntryFactory(factory)@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "initialize(owner,new Attributes(),null,false)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "doThrow().when(owner).checkEntryNotFound(any())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->18 [style = bold, label=""];
7->8 [style = bold, label=""];
8->12 [style = bold, label=""];
0->5 [style = solid, label="map"];
2->5 [style = bold, label=""];
14->5 [style = solid, label="map"];
15->4 [style = bold, label=""];
21->24 [style = dotted, label="true"];
2->5 [style = dotted, label="true"];
9->15 [style = bold, label=""];
19->15 [style = bold, label=""];
20->17 [style = dotted, label="true"];
20->8 [style = bold, label=""];
12->3 [style = solid, label="cachePerfStats"];
2->10 [style = bold, label=""];
10->11 [style = bold, label=""];
20->16 [style = dotted, label="true"];
24->22 [style = solid, label="withConcurrencyChecks"];
5->10 [style = bold, label=""];
12->4 [style = solid, label="owner"];
3->1 [style = bold, label=""];
4->2 [style = bold, label=""];
23->15 [style = solid, label="owner"];
16->13 [style = solid, label="withConcurrencyChecks"];
14->11 [style = solid, label="factory"];
14->24 [style = dashed, label="0"];
3->1 [style = solid, label="cachePerfStats"];
18->19 [style = bold, label=""];
12->3 [style = bold, label=""];
23->12 [style = bold, label=""];
7->14 [style = dotted, label="true"];
0->2 [style = solid, label="map"];
6->13 [style = solid, label="withConcurrencyChecks"];
7->0 [style = dotted, label="true"];
17->11 [style = solid, label="factory"];
13->9 [style = bold, label=""];
1->22 [style = bold, label=""];
10->11 [style = dotted, label="true"];
21->23 [style = bold, label=""];
17->10 [style = solid, label="factory"];
14->2 [style = solid, label="map"];
14->10 [style = solid, label="factory"];
20->14 [style = dotted, label="true"];
22->13 [style = bold, label=""];
1->13 [style = bold, label=""];
7->6 [style = dotted, label="true"];
}
