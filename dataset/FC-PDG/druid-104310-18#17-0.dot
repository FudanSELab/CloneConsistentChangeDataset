digraph {
38 [style = filled, label = "Assert.assertTrue(future2.get().isSuccess())@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "workerHolders.put(\"host:1234\",null)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Set<String> actualShutdowns = new ConcurrentHashSet<>()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "druidNodeDiscovery.listener.nodesAdded(ImmutableList.of(druidNode))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "workerHolders.put(\"host:1234\",null)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertTrue(future1.get().isFailure())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "HttpRemoteTaskRunner taskRunner = new HttpRemoteTaskRunner(TestHelper.makeJsonMapper(),new HttpRemoteTaskRunnerConfig(){@Override public int getPendingTasksRunnerNumThreads(){return 3}},EasyMock.createNiceMock(),DSuppliers.of(new AtomicReference<>(DefaultWorkerBehaviorConfig.defaultConfig())),new NoopProvisioningStrategy<>(),druidNodeDiscoveryProvider,EasyMock.createNiceMock(),EasyMock.createNiceMock(),new IndexerZkConfig(new ZkPathsConfig(),null,null,null,null)){@Override protected WorkerHolder createWorkerHolder(ObjectMapper smileMapper,HttpClient httpClient,HttpRemoteTaskRunnerConfig config,ScheduledExecutorService workersSyncExec,WorkerHolder.Listener listener,Worker worker,List<TaskAnnouncement> knownAnnouncements){if (workerHolders.containsKey(worker.getHost())) {return workerHolders.get(worker.getHost()).apply(smileMapper,httpClient,config,workersSyncExec,listener,worker,knownAnnouncements)}{throw new ISE(\"No WorkerHolder for (%s(.\",worker.getHost())}}}@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(taskRunner.run(task2).get().isFailure())@@@51@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForService(WorkerNodeService.DISCOVERY_SERVICE_KEY)).andReturn(druidNodeDiscovery)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "taskRunner.getPendingTasks().size() > 0@@@32@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testWorkerDisapperAndReappearBeforeItsCleanup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(task2.getId()),actualShutdowns)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Future<TaskStatus> future2 = taskRunner.run(task2)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ticks.get() < 1@@@46@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Thread.sleep(100)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.replay(druidNodeDiscoveryProvider)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "workerHolders.put(\"host:1234\",null)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(future2.get().isFailure())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "taskRunner.start()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(taskRunner.run(task1).get().isFailure())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testWorkerDisapperAndReappearAfterItsCleanup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "TestDruidNodeDiscovery druidNodeDiscovery = new TestDruidNodeDiscovery()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "DiscoveryDruidNode druidNode = new DiscoveryDruidNode(new DruidNode(\"service\",\"host\",false,1234,null,true,false),NodeRole.MIDDLE_MANAGER,ImmutableMap.of(WorkerNodeService.DISCOVERY_SERVICE_KEY,new WorkerNodeService(\"ip1\",2,\"0\",WorkerConfig.DEFAULT_CATEGORY)))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(future2.get().getErrorMsg().startsWith(\"The worker that this task was assigned disappeared and did not report cleanup within timeout\"))@@@41@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "druidNodeDiscovery.listener.nodesAdded(ImmutableList.of(druidNode))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testWorkerDisapperAndReappearAfterItsCleanup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Future<TaskStatus> future1 = taskRunner.run(task1)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Thread.sleep(100)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Task task1 = NoopTask.create(\"task-id-1\",0)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ConcurrentMap<String,CustomFunction> workerHolders = new ConcurrentHashMap<>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "workerHolders.put(\"host:1234\",null)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertNotNull(future2.get().getErrorMsg())@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Task task2 = NoopTask.create(\"task-id-2\",0)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertNotNull(future1.get().getErrorMsg())@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "AtomicInteger ticks = new AtomicInteger()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertTrue(future1.get().isSuccess())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "druidNodeDiscovery.listener.nodesAdded(ImmutableList.of(druidNode))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertTrue(future1.get().getErrorMsg().startsWith(\"The worker that this task was assigned disappeared and did not report cleanup within timeout\"))@@@40@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "druidNodeDiscovery.listener.nodesRemoved(ImmutableList.of(druidNode))@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->23 [style = bold, label=""];
5->8 [style = bold, label=""];
39->34 [style = bold, label=""];
12->22 [style = solid, label="druidNodeDiscovery"];
2->7 [style = bold, label=""];
25->2 [style = bold, label=""];
16->25 [style = bold, label=""];
14->21 [style = bold, label=""];
0->1 [style = solid, label="actualShutdowns"];
15->3 [style = solid, label="druidNode"];
24->11 [style = dotted, label="true"];
13->22 [style = bold, label=""];
22->16 [style = bold, label=""];
24->11 [style = bold, label=""];
34->36 [style = bold, label=""];
19->0 [style = bold, label=""];
13->16 [style = solid, label="druidNodeDiscoveryProvider"];
31->12 [style = bold, label=""];
11->24 [style = bold, label=""];
26->27 [style = bold, label=""];
1->14 [style = bold, label=""];
10->29 [style = bold, label=""];
15->27 [style = solid, label="druidNode"];
26->35 [style = dashed, label="0"];
17->9 [style = dotted, label="true"];
10->19 [style = bold, label=""];
12->13 [style = bold, label=""];
3->6 [style = bold, label=""];
6->10 [style = bold, label=""];
35->27 [style = bold, label=""];
23->5 [style = solid, label="task1"];
33->30 [style = bold, label=""];
15->35 [style = bold, label=""];
37->12 [style = bold, label=""];
15->34 [style = solid, label="druidNode"];
9->17 [style = bold, label=""];
15->26 [style = bold, label=""];
27->5 [style = bold, label=""];
30->32 [style = bold, label=""];
24->3 [style = bold, label=""];
17->9 [style = bold, label=""];
13->2 [style = solid, label="druidNodeDiscoveryProvider"];
4->8 [style = solid, label="task2"];
28->18 [style = bold, label=""];
17->36 [style = dashed, label="0"];
18->17 [style = bold, label=""];
0->28 [style = bold, label=""];
36->38 [style = bold, label=""];
8->24 [style = bold, label=""];
4->15 [style = bold, label=""];
23->4 [style = bold, label=""];
20->12 [style = bold, label=""];
29->33 [style = bold, label=""];
32->19 [style = bold, label=""];
15->18 [style = solid, label="druidNode"];
3->39 [style = bold, label=""];
17->1 [style = bold, label=""];
}
