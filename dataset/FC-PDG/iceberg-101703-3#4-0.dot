digraph {
17 [style = filled, label = "V1Assert.assertEquals(\"Table should have a spec with one void field\",v1Expected,table.spec())@@@18@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "replace.commitTransaction()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testReplaceWithNewData['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "PartitionSpec v2Expected = PartitionSpec.builderFor(table.schema()).withSpecId(1).build()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Schema schema = table.schema()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Schema should use new schema, not compatible with previous\",schema.asStruct(),table.schema().asStruct())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "validateSnapshot(null,table.currentSnapshot(),FILE_B,FILE_C,FILE_D)@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "V2Assert.assertEquals(\"Table should have an unpartitioned spec\",v2Expected,table.spec())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Transaction replace = TestTables.beginReplace(tableDir,\"test\",table.schema(),table.spec())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testReplaceWithNewPartitionSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Snapshot start = table.currentSnapshot()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "PartitionSpec newSpec = PartitionSpec.unpartitioned()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "PartitionSpec v1Expected = PartitionSpec.builderFor(table.schema()).alwaysNull(\"data\",\"data_bucket\").withSpecId(1).build()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "table.newAppend().appendFile(FILE_A).commit()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(\"Schema should use new schema, not compatible with previous\",schema.asStruct(),table.schema().asStruct())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(\"Version should be 2\",2L,(long)version())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "table.refresh()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "replace.newAppend().appendFile(FILE_B).appendFile(FILE_C).appendFile(FILE_D).commit()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Transaction replace = TestTables.beginReplace(tableDir,\"test\",table.schema(),newSpec)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testReplaceWithNewPartitionSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertNotNull(\"Table should have a current snapshot\",table.currentSnapshot())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "validateSnapshot(start,table.currentSnapshot(),FILE_A)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"Version should be 1\",1L,(long)version())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "replace.commitTransaction()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->1 [style = solid, label="start"];
23->22 [style = bold, label=""];
11->2 [style = solid, label="schema"];
3->10 [style = bold, label=""];
9->2 [style = dashed, label="0"];
22->8 [style = bold, label=""];
8->5 [style = bold, label=""];
9->4 [style = bold, label=""];
15->18 [style = bold, label=""];
6->11 [style = bold, label=""];
7->6 [style = bold, label=""];
12->1 [style = bold, label=""];
4->8 [style = bold, label=""];
3->20 [style = bold, label=""];
2->9 [style = bold, label=""];
13->12 [style = bold, label=""];
11->2 [style = solid, label="start"];
21->19 [style = bold, label=""];
6->9 [style = solid, label="newSpec"];
19->11 [style = bold, label=""];
15->18 [style = solid, label="v2Expected"];
13->9 [style = solid, label="schema"];
18->16 [style = bold, label=""];
11->13 [style = bold, label=""];
14->6 [style = bold, label=""];
10->15 [style = bold, label=""];
16->17 [style = bold, label=""];
5->3 [style = bold, label=""];
20->0 [style = bold, label=""];
1->2 [style = bold, label=""];
16->17 [style = solid, label="v1Expected"];
10->0 [style = bold, label=""];
2->23 [style = bold, label=""];
}
