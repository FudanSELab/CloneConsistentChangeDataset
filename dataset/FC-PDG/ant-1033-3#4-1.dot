digraph {
3 [style = filled, label = "executeTarget(\"testFilterSet\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "File tmp = new File(getOutputDir(),\"copy.filterset.tmp\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testFilterSet['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "File tmp = new File(getProjectDir(),\"copy.filterset.tmp\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertTrue(tmp.exists())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "File tmp = new File(getProjectDir(),\"copy.filterchain.tmp\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testFilterSet['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testFilterChain['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "File check = new File(getProjectDir(),\"expected/copy.filterset.filtered\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "executeTarget(\"testFilterChain\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(FILE_UTILS.contentEquals(tmp,check))@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
6->3 [style = bold, label=""];
7->4 [style = solid, label="tmp"];
10->4 [style = solid, label="tmp"];
0->4 [style = solid, label="tmp"];
5->4 [style = bold, label=""];
7->1 [style = bold, label=""];
9->10 [style = bold, label=""];
3->7 [style = bold, label=""];
10->1 [style = bold, label=""];
0->7 [style = dashed, label="0"];
3->9 [style = dashed, label="0"];
0->1 [style = bold, label=""];
0->10 [style = dashed, label="0"];
3->0 [style = bold, label=""];
2->3 [style = bold, label=""];
1->4 [style = solid, label="check"];
8->9 [style = bold, label=""];
}
