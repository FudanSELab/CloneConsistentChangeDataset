digraph {
10 [style = filled, label = "c1.addChangeListener(l1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(c1.equals(c2))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "c2 = (DialCap)c1.clone()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "DialCap c2 = (DialCap)TestUtils.serialised(c1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "MyDialLayerChangeListener l1 = new MyDialLayerChangeListener()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertFalse(c2.hasListener(l1))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(c1.getClass() == c2.getClass())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "c1 = new DialCap()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "c1.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.GRAY))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "c1.addChangeListener(l1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertFalse(c2.hasListener(l1))@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "c1.setFillPaint(new GradientPaint(1.0f,2.0f,Color.BLUE,3.0f,4.0f,Color.GREEN))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(c1,c2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "DialCap c2 = (DialCap)c1.clone()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "DialCap c1 = new DialCap()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "DialCap c2 = CloneUtils.clone(c1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertTrue(c1 != c2)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(c1.hasListener(l1))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(c1.equals(c2))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(c1.hasListener(l1))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(c1 != c2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "MyDialLayerChangeListener l1 = new MyDialLayerChangeListener()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(c1.getClass() == c2.getClass())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "c1.setOutlineStroke(new BasicStroke(2.0f))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->10 [style = solid, label="l1"];
12->5 [style = solid, label="c2"];
9->6 [style = solid, label="c1"];
1->8 [style = bold, label=""];
8->15 [style = bold, label=""];
9->18 [style = solid, label="c1"];
16->10 [style = bold, label=""];
2->1 [style = bold, label=""];
0->2 [style = bold, label=""];
22->21 [style = bold, label=""];
20->25 [style = solid, label="l1"];
21->25 [style = bold, label=""];
3->16 [style = bold, label=""];
12->6 [style = solid, label="c2"];
20->22 [style = solid, label="l1"];
11->9 [style = bold, label=""];
12->6 [style = bold, label=""];
26->24 [style = bold, label=""];
15->17 [style = solid, label="c2"];
15->3 [style = solid, label="c2"];
26->24 [style = solid, label="c2"];
4->7 [style = bold, label=""];
9->26 [style = solid, label="c1"];
20->22 [style = bold, label=""];
24->20 [style = bold, label=""];
6->14 [style = bold, label=""];
9->26 [style = bold, label=""];
12->26 [style = dashed, label="0"];
15->17 [style = bold, label=""];
9->18 [style = bold, label=""];
13->3 [style = bold, label=""];
5->0 [style = bold, label=""];
19->9 [style = bold, label=""];
18->6 [style = bold, label=""];
18->5 [style = solid, label="c2"];
6->24 [style = dashed, label="0"];
10->4 [style = bold, label=""];
12->18 [style = dashed, label="0"];
9->24 [style = solid, label="c1"];
18->6 [style = solid, label="c2"];
17->13 [style = bold, label=""];
9->12 [style = bold, label=""];
0->17 [style = solid, label="c1"];
16->4 [style = solid, label="l1"];
23->9 [style = bold, label=""];
20->21 [style = solid, label="l1"];
16->7 [style = solid, label="l1"];
14->5 [style = bold, label=""];
}
