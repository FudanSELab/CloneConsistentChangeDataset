digraph {
12 [style = filled, label = "assertTrue(actual.contains(\"t_order_0\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(actual.contains(\"t_order_3\"))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<String> availableTargetNames = Arrays.asList(\"t_order_0\",\"t_order_1\",\"t_order_2\",\"t_order_3\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames,new RangeShardingValue<>(\"t_order\",\"order_id\",Range.lessThan(12L)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(actual.size(),is(3))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames,new RangeShardingValue<>(\"t_order\",\"order_id\",Range.closed(2L,15L)))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertRangeDoSharding['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertRangeDoShardingWithoutLowerBound['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(actual.contains(\"t_order_1\"))@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\",\"t_order_1\",\"t_order_2\",\"t_order_3\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertTrue(actual.contains(\"t_order_1\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertRangeDoSharding['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\",\"t_order_1\",\"t_order_2\",\"t_order_3\",\"t_order_4\",\"t_order_5\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(actual.size(),is(2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->3 [style = bold, label=""];
8->7 [style = bold, label=""];
3->6 [style = bold, label=""];
12->2 [style = bold, label=""];
3->6 [style = solid, label="availableTargetNames"];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
13->9 [style = bold, label=""];
4->2 [style = bold, label=""];
6->10 [style = dashed, label="0"];
9->10 [style = bold, label=""];
0->11 [style = dashed, label="0"];
3->9 [style = dashed, label="0"];
0->4 [style = bold, label=""];
9->10 [style = solid, label="availableTargetNames"];
3->7 [style = dashed, label="0"];
7->6 [style = bold, label=""];
2->5 [style = bold, label=""];
7->6 [style = solid, label="availableTargetNames"];
10->11 [style = bold, label=""];
}
