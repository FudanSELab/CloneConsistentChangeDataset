digraph {
3 [style = filled, label = "Assert.assertEquals(3,config2.getMaxMergingDictionarySize())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(3,config2.getMaxResults())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final GroupByQueryConfig config2 = config.withOverrides(GroupByQuery.builder().setDataSource(\"test\").setInterval(Intervals.of(\"2000/P1D\")).setGranularity(Granularities.ALL).setContext(ImmutableMap.of(\"groupByStrategy\",\"v1\",\"maxOnDiskStorage\",0,\"maxResults\",2,\"maxMergingDictionarySize\",3,\"applyLimitPushDownToSegment\",false)).build())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final GroupByQueryConfig config2 = config.withOverrides(GroupByQuery.builder().setDataSource(\"test\").setInterval(Intervals.of(\"2000/P1D\")).setGranularity(Granularities.ALL).setContext(ImmutableMap.of(\"groupByStrategy\",\"v1\",\"maxOnDiskStorage\",0,\"maxResults\",2,\"maxMergingDictionarySize\",3)).build())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"v1\",config2.getDefaultStrategy())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(true,config2.isSingleThreaded())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testOverrides['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(\"v2\",config2.getDefaultStrategy())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final GroupByQueryConfig config2 = config.withOverrides(GroupByQuery.builder().setDataSource(\"test\").setInterval(Intervals.of(\"2000/P1D\")).setGranularity(Granularities.ALL).build())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testOverrides['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(6.0,config2.getBufferGrouperMaxLoadFactor(),0.0)@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(5,config2.getMaxMergingDictionarySize())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertFalse(config2.isApplyLimitPushDownToSegment())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testNoOverrides['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(2,config2.getMaxResults())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(2,config2.getMaxIntermediateRows())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final GroupByQueryConfig config = MAPPER.convertValue(CONFIG_MAP,)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(0,config2.getMaxOnDiskStorage())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(4,config2.getMaxOnDiskStorage())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(1,config2.getBufferGrouperInitialBuckets())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->9 [style = bold, label=""];
0->13 [style = bold, label=""];
7->10 [style = bold, label=""];
3->18 [style = dashed, label="0"];
2->3 [style = bold, label=""];
19->10 [style = bold, label=""];
6->0 [style = bold, label=""];
12->0 [style = bold, label=""];
1->7 [style = bold, label=""];
0->15 [style = bold, label=""];
13->1 [style = bold, label=""];
5->16 [style = dashed, label="0"];
5->2 [style = bold, label=""];
17->0 [style = bold, label=""];
2->14 [style = dashed, label="0"];
7->19 [style = dashed, label="0"];
3->8 [style = bold, label=""];
9->13 [style = dashed, label="0"];
10->4 [style = bold, label=""];
16->14 [style = bold, label=""];
14->18 [style = bold, label=""];
18->8 [style = bold, label=""];
9->1 [style = bold, label=""];
1->19 [style = bold, label=""];
8->11 [style = bold, label=""];
4->5 [style = bold, label=""];
4->16 [style = bold, label=""];
9->15 [style = dashed, label="0"];
15->1 [style = bold, label=""];
}
