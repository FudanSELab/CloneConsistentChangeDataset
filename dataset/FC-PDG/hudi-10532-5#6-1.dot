digraph {
15 [style = filled, label = "testKeepLatestFileVersionsMOR['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "String p0 = \"2020/01/01\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertFalse(testTable.baseFileExists(p0,\"000\",file1P0))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(testTable.logFileExists(p0,\"002\",file1P0,4))@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testKeepLatestFileVersionsMOR['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(testTable.baseFileExists(p0,\"001\",file1P0))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testTable.forDeltaCommit(\"000\").withLogFile(p0,file1P0,1).withLogFile(p0,file1P0,2)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(testTable.logFileExists(p0,\"001\",file1P0,3))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "HoodieWriteConfig config = HoodieWriteConfig.newBuilder().withPath(basePath).withMetadataConfig(HoodieMetadataConfig.newBuilder().withAssumeDatePartitioning(true).build()).withCompactionConfig(HoodieCompactionConfig.newBuilder().withCleanerPolicy(HoodieCleaningPolicy.KEEP_LATEST_COMMITS).retainCommits(1).build()).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testTable.addDeltaCommit(\"002\").withBaseFilesInPartition(p0,file1P0).withLogFile(p0,file1P0,4)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(3,getCleanStat(hoodieCleanStats,p0).getSuccessDeleteFiles().size(),\"Must clean three files, one parquet and 2 log files\")@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "HoodieWriteConfig config = HoodieWriteConfig.newBuilder().withPath(basePath).withMetadataConfig(HoodieMetadataConfig.newBuilder().withAssumeDatePartitioning(true).build()).withCompactionConfig(HoodieCompactionConfig.newBuilder().withCleanerPolicy(HoodieCleaningPolicy.KEEP_LATEST_FILE_VERSIONS).retainFileVersions(1).build()).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<HoodieCleanStat> hoodieCleanStats = runCleaner(config)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "HoodieTableMetaClient metaClient = HoodieTestUtils.init(hadoopConf,basePath,HoodieTableType.MERGE_ON_READ)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String file1P0 = testTable.addDeltaCommit(\"000\").getFileIdsWithBaseFilesInPartitions(p0).get(p0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testKeepLatestCommitsMOR['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(testTable.baseFileExists(p0,\"002\",file1P0))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertFalse(testTable.logFilesExist(p0,\"000\",file1P0,1,2))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(3,getCleanStat(hoodieCleanStats,p0).getSuccessDeleteFiles().size(),\"Must clean three files, one base and 2 log files\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testTable.addDeltaCommit(\"001\").withBaseFilesInPartition(p0,file1P0).withLogFile(p0,file1P0,3)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "HoodieTestTable testTable = HoodieTestTable.of(metaClient)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
0->9 [style = bold, label=""];
15->7 [style = bold, label=""];
4->17 [style = solid, label="file1P0"];
8->18 [style = bold, label=""];
4->13 [style = solid, label="file1P0"];
4->8 [style = solid, label="file1P0"];
18->19 [style = bold, label=""];
12->4 [style = solid, label="p0"];
7->20 [style = dashed, label="0"];
12->10 [style = solid, label="p0"];
4->10 [style = solid, label="file1P0"];
11->12 [style = bold, label=""];
5->17 [style = bold, label=""];
4->6 [style = solid, label="file1P0"];
12->19 [style = solid, label="p0"];
1->13 [style = bold, label=""];
12->1 [style = solid, label="p0"];
12->13 [style = solid, label="p0"];
14->1 [style = bold, label=""];
12->6 [style = solid, label="p0"];
4->5 [style = solid, label="file1P0"];
20->2 [style = bold, label=""];
0->14 [style = bold, label=""];
17->0 [style = bold, label=""];
9->14 [style = dashed, label="0"];
10->5 [style = bold, label=""];
12->4 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
2->11 [style = solid, label="metaClient"];
12->5 [style = solid, label="p0"];
7->2 [style = bold, label=""];
12->18 [style = solid, label="p0"];
6->8 [style = bold, label=""];
4->1 [style = solid, label="file1P0"];
12->8 [style = solid, label="p0"];
7->0 [style = solid, label="config"];
12->17 [style = solid, label="p0"];
13->6 [style = bold, label=""];
4->18 [style = solid, label="file1P0"];
9->1 [style = bold, label=""];
20->0 [style = solid, label="config"];
4->19 [style = solid, label="file1P0"];
16->20 [style = bold, label=""];
2->11 [style = bold, label=""];
}
