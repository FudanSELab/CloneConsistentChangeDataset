digraph {
1 [style = filled, label = "Expression.Operation op = unbound.op()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testInPredicateBindingConversionToExpression['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Should change the NOT_IN operation to NOT_EQ\",NOT_EQ,bound.op())@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "UnboundPredicate<Long> unbound = Expressions.in(\"x\",Long.MAX_VALUE - 1,Long.MAX_VALUE)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(\"Should remove aboveMax literal value\",Integer.valueOf(5),bound.asLiteralPredicate().literal().value())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "StructType struct = StructType.of(required(14,\"x\",Types.IntegerType.get()))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Expression expr = unbound.bind(struct)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testNotInPredicateBindingConversionToNotEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(\"Should be a literal predicate\",bound.isLiteralPredicate())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(\"Should change IN to alwaysFalse expression\",Expressions.alwaysFalse(),expr)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "BoundPredicate<Integer> bound = assertAndUnwrap(expr)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(\"Should reference correct field ID\",14,bound.ref().fieldId())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"Should reference correct field ID\",14,bound.ref().fieldId())@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testNotInPredicateBindingConversionToNotEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Should create an IN predicate\",IN,op)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(\"Should remove aboveMax literal value\",Integer.valueOf(5),bound.literal().value())@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"Should create a NOT_IN unbound predicate\",NOT_IN,op)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "UnboundPredicate<Long> unbound = Expressions.notIn(\"x\",5L,Long.MAX_VALUE)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->4 [style = solid, label="struct"];
4->6 [style = bold, label=""];
15->1 [style = bold, label=""];
11->12 [style = bold, label=""];
5->14 [style = dashed, label="0"];
8->0 [style = bold, label=""];
1->10 [style = solid, label="op"];
13->0 [style = bold, label=""];
4->6 [style = solid, label="expr"];
7->9 [style = bold, label=""];
6->11 [style = bold, label=""];
16->0 [style = bold, label=""];
4->17 [style = bold, label=""];
2->15 [style = dashed, label="0"];
3->7 [style = bold, label=""];
1->14 [style = bold, label=""];
4->17 [style = solid, label="expr"];
5->4 [style = bold, label=""];
12->9 [style = bold, label=""];
0->15 [style = bold, label=""];
2->1 [style = bold, label=""];
6->3 [style = bold, label=""];
1->9 [style = solid, label="op"];
1->5 [style = solid, label="op"];
1->14 [style = solid, label="op"];
0->2 [style = bold, label=""];
14->4 [style = bold, label=""];
9->10 [style = bold, label=""];
1->5 [style = bold, label=""];
}
