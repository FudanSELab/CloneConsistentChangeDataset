digraph {
12 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_1,1,TASK_0_0,TASK_0_1)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "shouldNotMoveAnyTasksWhenNewTasksAdded['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "taskAssignor.assign()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(clients.get(p1).activeTasks(),hasItems(task00,task01))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(clients.get(p2).activeTasks(),hasItems(task01))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "firstAssignor.assign()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(clients.get(UUID_2).activeTasks(),hasItems(TASK_0_2,TASK_0_3))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "final StickyTaskAssignor firstAssignor = createTaskAssignor(task00,task01,task02)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(clients.get(UUID_1).activeTasks(),hasItems(TASK_0_0,TASK_0_1))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_2,1,TASK_0_2,TASK_0_3)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "createClientWithPreviousActiveTasks(p2,1,task02,task03)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertThat(allActiveTasks(),equalTo(Arrays.asList(task00,task01,task02)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(clients.get(p1).activeTasks(),hasItems(task00))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "clients.clear()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(clients.get(p1).activeTasks(),hasItems(task01))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(allActiveTasks(),equalTo(Arrays.asList(task00,task01,task02)))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "shouldNotMoveAnyTasksWhenNewTasksAdded['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "createClientWithPreviousActiveTasks(p1,1,task01)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "createClientWithPreviousActiveTasks(p2,1,task01)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final StickyTaskAssignor secondAssignor = createTaskAssignor(task00,task01,task02)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "secondAssignor.assign()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final StickyTaskAssignor taskAssignor = createTaskAssignor(TASK_0_3,TASK_0_1,TASK_0_4,TASK_0_2,TASK_0_0,TASK_0_5)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "createClientWithPreviousActiveTasks(p2,1,task02)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "shouldNotMigrateActiveTaskToOtherProcess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "createClientWithPreviousActiveTasks(p1,1,task00,task01)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "final StickyTaskAssignor<Integer> taskAssignor = createTaskAssignor(task03,task01,task04,task02,task00,task05)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertThat(clients.get(p2).activeTasks(),hasItems(task02,task03))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "createClientWithPreviousActiveTasks(p1,1,task00)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(clients.get(p2).activeTasks(),hasItems(task02))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
13->25 [style = bold, label=""];
27->13 [style = bold, label=""];
23->16 [style = bold, label=""];
18->24 [style = bold, label=""];
28->18 [style = bold, label=""];
24->19 [style = bold, label=""];
9->11 [style = bold, label=""];
4->17 [style = dashed, label="0"];
3->7 [style = dashed, label="0"];
2->1 [style = bold, label=""];
6->11 [style = dashed, label="0"];
14->22 [style = bold, label=""];
22->21 [style = bold, label=""];
5->9 [style = dashed, label="0"];
6->0 [style = bold, label=""];
5->25 [style = dashed, label="0"];
12->9 [style = bold, label=""];
7->8 [style = bold, label=""];
0->20 [style = dashed, label="0"];
3->4 [style = bold, label=""];
0->7 [style = bold, label=""];
1->13 [style = dashed, label="0"];
1->12 [style = dashed, label="0"];
15->17 [style = bold, label=""];
17->28 [style = bold, label=""];
11->0 [style = bold, label=""];
19->14 [style = bold, label=""];
5->6 [style = bold, label=""];
10->12 [style = bold, label=""];
6->26 [style = dashed, label="0"];
25->26 [style = bold, label=""];
4->8 [style = dashed, label="0"];
3->15 [style = dashed, label="0"];
20->15 [style = bold, label=""];
26->20 [style = bold, label=""];
21->23 [style = bold, label=""];
}
