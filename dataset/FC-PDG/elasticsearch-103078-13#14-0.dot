digraph {
5 [style = filled, label = "String type@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "IndexableField pointField = fields(0(@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "IndexableField pointField = fields(0(@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject(\"field\").field(getFromField(),getFrom(type)).field(getToField(),getTo(type)).endObject().endObject()),XContentType.JSON))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ParsedDocument doc = mapper.parse(source(null))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertEquals(Strings.toString(mapping),mapper2.mappingSource().toString())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "IndexableField pointField = fields(1(@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(1,fields.length)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "String type@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(Strings.toString(mapping),mapper.mappingSource().toString())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "IndexableField dvField = fields(0(@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "type.equals(\"date_range\") == false@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "type.equals(\"date_range\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(e.getCause().getMessage(),anyOf(containsString(\"passed as String\"),containsString(\"failed to parse date\"),containsString(\"is not an IP string literal\")))@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(2,pointField.fieldType().pointIndexDimensionCount())@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",type).field(\"doc_values\",false)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "ThrowingRunnable runnable = null@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "DocumentMapper mapper2 = parser.parse(\"type\",new CompressedXContent(Strings.toString(mapping)))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(1,fields.length)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(2,fields.length)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "doTestNoDocValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(2,pointField.fieldType().pointIndexDimensionCount())@@@14@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",type)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(DocValuesType.BINARY,dvField.fieldType().docValuesType())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "mapping = mapping.field(\"format\",DATE_FORMAT)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",type).field(\"coerce\",false).endObject().endObject().endObject().endObject()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(2,pointField.fieldType().pointIndexDimensionCount())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "doTestNoDocValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "doTestCoerce['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(rangeFieldMapping(type,null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "MapperParsingException e = expectThrows(,runnable)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "mapping = mapping.endObject().endObject().endObject().endObject()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(Strings.toString(mapping)))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->6 [style = bold, label=""];
25->23 [style = bold, label=""];
29->23 [style = solid, label="type"];
11->3 [style = bold, label=""];
24->26 [style = solid, label="mapping"];
4->27 [style = dashed, label="0"];
24->34 [style = bold, label=""];
14->16 [style = bold, label=""];
9->4 [style = bold, label=""];
30->21 [style = bold, label=""];
9->27 [style = bold, label=""];
20->31 [style = bold, label=""];
33->30 [style = solid, label="runnable"];
16->18 [style = bold, label=""];
7->9 [style = bold, label=""];
25->29 [style = dotted, label="true"];
28->32 [style = bold, label=""];
1->8 [style = bold, label=""];
2->5 [style = dotted, label="true"];
32->26 [style = dotted, label="true"];
6->1 [style = dotted, label="true"];
26->33 [style = bold, label=""];
32->30 [style = dotted, label="true"];
24->34 [style = solid, label="mapping"];
8->11 [style = solid, label="mapping"];
22->20 [style = bold, label=""];
3->7 [style = bold, label=""];
6->8 [style = bold, label=""];
27->22 [style = bold, label=""];
9->22 [style = solid, label="fields"];
8->3 [style = solid, label="mapping"];
32->33 [style = dotted, label="true"];
8->11 [style = bold, label=""];
12->10 [style = bold, label=""];
15->5 [style = dotted, label="true"];
33->30 [style = bold, label=""];
23->6 [style = bold, label=""];
32->24 [style = dotted, label="true"];
9->12 [style = solid, label="fields"];
0->23 [style = dashed, label="0"];
32->21 [style = dotted, label="true"];
18->19 [style = bold, label=""];
17->13 [style = bold, label=""];
32->34 [style = dotted, label="true"];
9->31 [style = solid, label="fields"];
4->12 [style = bold, label=""];
2->0 [style = bold, label=""];
14->18 [style = solid, label="fields"];
5->17 [style = solid, label="type"];
13->14 [style = bold, label=""];
31->28 [style = bold, label=""];
6->1 [style = bold, label=""];
34->26 [style = bold, label=""];
12->22 [style = dashed, label="0"];
5->29 [style = dashed, label="0"];
32->24 [style = bold, label=""];
15->17 [style = bold, label=""];
}
