digraph {
4 [style = filled, label = "List<List<String>> inputData = Arrays.asList(Arrays.asList(\"giants\",\"dodgers\"),Arrays.asList(\"yankees\",\"red sox\"))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "JavaPairDStream<String,Integer> pairStream = stream.mapToPair(null)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(expected,result)@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "List<List<Tuple2<String,Integer>>> result = JavaTestUtils.runStreams(ssc,2,2)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "JavaPairDStream<String,Integer> filtered = pairStream.filter(null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "JavaTestUtils.attachTestOutputStream(filtered)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "testPairFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testPairFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "JavaTestUtils.attachTestOutputStream(filtered)@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testPairFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(expected,result)@@@20@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "JavaTestUtils.attachTestOutputStream(filtered)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "List<List<Tuple2<String,Integer>>> result = JavaTestUtils.runStreams(ssc,2,2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "List<List<Tuple2<String,Integer>>> expected = Arrays.asList(Arrays.asList(new Tuple2<>(\"giants\",6)),Arrays.asList(new Tuple2<>(\"yankees\",7)))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc,inputData,1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "JavaPairDStream<String,Integer> pairStream = stream.mapToPair(null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(expected,result)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "JavaPairDStream<String,Integer> pairStream = stream.mapToPair(new PairFunction<String,String,Integer>(){@Override public Tuple2<String,Integer> call(String in){return new Tuple2<>(in,in.length())}})@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "List<List<Tuple2<String,Integer>>> result = JavaTestUtils.runStreams(ssc,2,2)@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "JavaPairDStream<String,Integer> filtered = pairStream.filter(new Function<Tuple2<String,Integer>,Boolean>(){@Override public Boolean call(Tuple2<String,Integer> in){return in._1().contains(\"a\")}})@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "JavaPairDStream<String,Integer> filtered = pairStream.filter(null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
13->10 [style = bold, label=""];
6->3 [style = bold, label=""];
7->11 [style = solid, label="expected"];
7->5 [style = solid, label="expected"];
2->6 [style = bold, label=""];
1->5 [style = solid, label="result"];
9->4 [style = bold, label=""];
18->17 [style = bold, label=""];
2->18 [style = bold, label=""];
14->13 [style = solid, label="filtered"];
7->20 [style = solid, label="expected"];
17->19 [style = bold, label=""];
3->0 [style = solid, label="filtered"];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
2->12 [style = bold, label=""];
15->20 [style = solid, label="result"];
6->18 [style = dashed, label="0"];
6->12 [style = dashed, label="0"];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
15->20 [style = bold, label=""];
17->19 [style = solid, label="filtered"];
12->14 [style = bold, label=""];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
19->15 [style = bold, label=""];
16->4 [style = bold, label=""];
10->11 [style = solid, label="result"];
4->2 [style = solid, label="inputData"];
10->11 [style = bold, label=""];
}
