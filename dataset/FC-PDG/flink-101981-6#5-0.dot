digraph {
30 [style = filled, label = "long splitLength@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "LogicalType(( fieldTypes = new LogicalType((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c234cd@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "i++@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "long seekToRow@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "reader.seekToRow(seekToRow)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(v.doubleValue(),row.getDouble(7),0)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "ClassNotFoundException e@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(v.floatValue(),row.getFloat(6),0)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertTrue(row.isNullAt(0))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertEquals(v % 2 == 0,row.getBoolean(1))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertTrue(row.isNullAt(3))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "v == null@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "BulkFormat.Reader<RowData> reader = format.restoreReader(EMPTY_CONF,new FileSourceSplit(\"id\",path,splitStart,splitLength,new String((((,new CheckpointedPosition(CheckpointedPosition.NO_OFFSET,seekToRow)))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "BulkFormat.Reader<RowData> reader = format.restoreReader(EMPTY_CONF,path,splitStart,splitLength,new CheckpointedPosition(CheckpointedPosition.NO_OFFSET,seekToRow))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertTrue(row.isNullAt(5))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "ParquetColumnarRowSplitReader reader = createReader(testPath,splitStart,splitLength)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertTrue(row.isNullAt(12))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertEquals(BigDecimal.valueOf(v),row.getDecimal(11,20,0).toBigDecimal())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "!reader.reachedEnd()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertTrue(row.isNullAt(1))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "assertEquals(toDateTime(v),row.getTimestamp(8,9).toLocalDateTime())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(v.intValue(),row.getInt(4))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "AtomicInteger cnt = new AtomicInteger(0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testReadingSplit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertEquals(BigDecimal.valueOf(v),row.getDecimal(13,15,0).toBigDecimal())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "Integer v = values.get(i)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "long splitStart@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "ColumnarRowData row = reader.nextRecord()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Path testPath@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "assertEquals(v.byteValue(),row.getByte(2))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "List<Integer> expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "assertTrue(row.isNullAt(13))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "long splitLength@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertTrue(row.isNullAt(8))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "reader.close()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "readSplitAndCheck['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "int i = start@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "assertTrue(row.isNullAt(10))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testReadingSplit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "assertTrue(row.isNullAt(11))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertTrue(row.isNullAt(9))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "InstantiationUtil.clone(format)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "int start@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "List<Integer> expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "List<Integer> values@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertTrue(row.isNullAt(6))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(BigDecimal.valueOf(v),row.getDecimal(12,5,0).toBigDecimal())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertEquals(v.longValue(),row.getLong(5))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "long seekToRow@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "return i - start@@@46@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "long splitLength@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "long splitStart@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertEquals(\"\" + v,row.getString(0).toString())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(v.shortValue(),row.getShort(3))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertTrue(row.isNullAt(7))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertTrue(row.isNullAt(4))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "long splitStart@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertEquals(BigDecimal.valueOf(v),row.getDecimal(9,5,0).toBigDecimal())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "throw new IOException(e)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ParquetColumnarRowInputFormat format = new ParquetColumnarRowInputFormat(new Configuration(),RowType.of(fieldTypes,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c2350a),500,false,true)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return cnt.get()@@@56@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertEquals(BigDecimal.valueOf(v),row.getDecimal(14,20,0).toBigDecimal())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(BigDecimal.valueOf(v),row.getDecimal(10,15,0).toBigDecimal())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertTrue(row.isNullAt(2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertTrue(row.isNullAt(14))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "forEachRemaining(reader,null)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Path path@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "long seekToRow@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0->12 [style = dotted, label="true"];
24->60 [style = bold, label=""];
11->20 [style = dashed, label="0"];
5->20 [style = bold, label=""];
9->4 [style = solid, label="fieldTypes"];
65->51 [style = solid, label="v"];
31->61 [style = bold, label=""];
21->58 [style = bold, label=""];
36->28 [style = bold, label=""];
25->29 [style = bold, label=""];
45->31 [style = bold, label=""];
61->59 [style = bold, label=""];
0->6 [style = dotted, label="true"];
36->48 [style = dotted, label="true"];
48->28 [style = solid, label="testPath"];
36->38 [style = dotted, label="true"];
29->45 [style = bold, label=""];
63->22 [style = bold, label=""];
57->63 [style = bold, label=""];
35->50 [style = bold, label=""];
19->9 [style = bold, label=""];
21->33 [style = dotted, label="false"];
65->23 [style = solid, label="v"];
34->64 [style = bold, label=""];
21->64 [style = dotted, label="true"];
21->37 [style = dotted, label="true"];
65->24 [style = solid, label="v"];
26->56 [style = solid, label="i"];
54->65 [style = solid, label="i"];
26->66 [style = bold, label=""];
0->7 [style = dotted, label="true"];
21->55 [style = dotted, label="false"];
21->44 [style = dotted, label="false"];
21->58 [style = dotted, label="true"];
65->44 [style = solid, label="v"];
21->42 [style = dotted, label="true"];
21->44 [style = bold, label=""];
2->20 [style = bold, label=""];
66->39 [style = dotted, label="true"];
65->55 [style = solid, label="v"];
0->10 [style = dotted, label="true"];
51->23 [style = bold, label=""];
19->17 [style = dotted, label="true"];
21->29 [style = dotted, label="true"];
54->66 [style = bold, label=""];
21->32 [style = dotted, label="true"];
20->3 [style = bold, label=""];
21->24 [style = dotted, label="false"];
27->56 [style = bold, label=""];
21->35 [style = dotted, label="false"];
0->8 [style = dotted, label="true"];
12->11 [style = solid, label="path"];
21->40 [style = dotted, label="false"];
21->31 [style = dotted, label="true"];
49->28 [style = solid, label="splitStart"];
21->52 [style = dotted, label="false"];
30->28 [style = solid, label="splitLength"];
5->11 [style = bold, label=""];
53->54 [style = solid, label="start"];
32->42 [style = bold, label=""];
64->41 [style = bold, label=""];
44->57 [style = bold, label=""];
36->53 [style = dotted, label="true"];
52->26 [style = bold, label=""];
21->60 [style = dotted, label="false"];
6->11 [style = solid, label="seekToRow"];
8->11 [style = solid, label="splitStart"];
54->56 [style = solid, label="i"];
62->51 [style = bold, label=""];
3->1 [style = bold, label=""];
67->54 [style = bold, label=""];
16->20 [style = solid, label="splitStart"];
21->46 [style = dotted, label="true"];
14->56 [style = dashed, label="0"];
66->39 [style = bold, label=""];
19->18 [style = dotted, label="true"];
21->57 [style = dotted, label="false"];
58->37 [style = bold, label=""];
19->12 [style = dotted, label="true"];
19->15 [style = dotted, label="true"];
65->52 [style = solid, label="v"];
65->21 [style = bold, label=""];
12->53 [style = dashed, label="0"];
36->49 [style = dotted, label="true"];
13->2 [style = dotted, label="true"];
21->25 [style = dotted, label="true"];
21->61 [style = dotted, label="true"];
59->47 [style = bold, label=""];
40->33 [style = bold, label=""];
26->65 [style = solid, label="i"];
21->41 [style = dotted, label="true"];
18->20 [style = solid, label="seekToRow"];
53->56 [style = solid, label="start"];
11->3 [style = bold, label=""];
65->62 [style = solid, label="v"];
60->52 [style = bold, label=""];
21->23 [style = dotted, label="false"];
21->63 [style = dotted, label="false"];
22->35 [style = bold, label=""];
46->32 [style = bold, label=""];
21->22 [style = dotted, label="false"];
21->45 [style = dotted, label="true"];
4->5 [style = bold, label=""];
2->11 [style = bold, label=""];
36->30 [style = dotted, label="true"];
65->57 [style = solid, label="v"];
13->2 [style = bold, label=""];
43->67 [style = solid, label="seekToRow"];
21->47 [style = dotted, label="true"];
21->51 [style = dotted, label="false"];
4->5 [style = solid, label="format"];
21->50 [style = dotted, label="false"];
42->26 [style = bold, label=""];
0->9 [style = bold, label=""];
11->1 [style = solid, label="reader"];
33->62 [style = bold, label=""];
28->67 [style = bold, label=""];
9->4 [style = bold, label=""];
66->26 [style = dotted, label="true"];
55->24 [style = bold, label=""];
47->46 [style = bold, label=""];
21->34 [style = dotted, label="true"];
39->65 [style = bold, label=""];
10->11 [style = solid, label="splitLength"];
20->1 [style = solid, label="reader"];
12->20 [style = solid, label="path"];
21->59 [style = dotted, label="true"];
65->21 [style = solid, label="v"];
66->27 [style = bold, label=""];
66->21 [style = dotted, label="true"];
36->43 [style = dotted, label="true"];
65->60 [style = solid, label="v"];
37->34 [style = bold, label=""];
50->40 [style = bold, label=""];
19->16 [style = dotted, label="true"];
21->62 [style = dotted, label="false"];
1->14 [style = bold, label=""];
41->25 [style = bold, label=""];
66->65 [style = dotted, label="true"];
17->20 [style = solid, label="splitLength"];
54->26 [style = solid, label="i"];
23->55 [style = bold, label=""];
}
