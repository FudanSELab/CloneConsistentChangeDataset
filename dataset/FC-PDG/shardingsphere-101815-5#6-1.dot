digraph {
6 [style = filled, label = "refreshIfIndexIsNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final DropTableStatement dropTableStatement@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "schemaRefresher.refresh(metaData,Collections.emptyList(),createIndexStatement,new ConfigurationProperties(new Properties()))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "ShardingSphereSchema schema = ShardingSphereSchemaBuildUtil.buildSchema()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "refreshIfIndexIsNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final CreateIndexStatement createIndexStatement@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "refresh['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "createIndexStatement.setTable(new SimpleTableSegment(new TableNameSegment(1,3,new IdentifierValue(\"t_order\"))))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "schemaRefresher.refresh(schema,Collections.emptyList(),createIndexStatement,mock())@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "SchemaRefresher<CreateIndexStatement> schemaRefresher = new CreateIndexStatementSchemaRefresher()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertFalse(schema.get(\"t_order\").getIndexes().containsKey(\"t_order_index\"))@@@7@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "schemaRefresher.refresh(schema,Collections.emptyList(),dropTableStatement,mock())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertFalse(schema.containsTable(\"t_order\"))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "SchemaRefresher<DropTableStatement> schemaRefresher = new DropTableStatementSchemaRefresher()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"\",mock(),mock(),ShardingSphereSchemaBuildUtil.buildSchema())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertFalse(schema.get(\"t_order\").getIndexes().containsKey(\"t_order_index\"))@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "dropTableStatement.getTables().add(new SimpleTableSegment(new TableNameSegment(1,3,new IdentifierValue(\"t_order\"))))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
4->3 [style = solid, label="createIndexStatement"];
15->13 [style = bold, label=""];
7->1 [style = bold, label=""];
16->12 [style = dotted, label="true"];
10->8 [style = solid, label="metaData"];
12->14 [style = solid, label="dropTableStatement"];
1->15 [style = bold, label=""];
1->14 [style = solid, label="schema"];
4->12 [style = dashed, label="0"];
2->15 [style = dashed, label="0"];
6->1 [style = bold, label=""];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
0->10 [style = bold, label=""];
10->8 [style = bold, label=""];
6->4 [style = dotted, label="true"];
16->1 [style = bold, label=""];
5->11 [style = dashed, label="0"];
0->13 [style = dashed, label="0"];
7->4 [style = dotted, label="true"];
8->9 [style = bold, label=""];
4->8 [style = solid, label="createIndexStatement"];
1->2 [style = bold, label=""];
3->14 [style = dashed, label="0"];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
1->3 [style = solid, label="schema"];
}
