digraph {
23 [style = filled, label = "return result@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final ExprContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "NotExpression result = new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)),(ExpressionSegment)visit(ctx.expr(1)),ctx.logicalOperator().getText(),text)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "null != ctx.LP_()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "null != ctx.XOR()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "return result@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "null != ctx.logicalOperator()@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "return visit(ctx.expr(0))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "null != ctx.logicalOperator()@@@14@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "visitExpr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "visitExpr['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "String operator = ctx.logicalOperator().getText()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "return result@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return visit(ctx.booleanPrimary())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "visitExpr['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "String operator = \"XOR\"@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "NotExpression result = new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "null != ctx.booleanPrimary()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "return result@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->15 [style = solid, label="right"];
10->18 [style = bold, label=""];
12->3 [style = dotted, label="true"];
0->15 [style = solid, label="left"];
24->5 [style = solid, label="left"];
21->23 [style = solid, label="result"];
18->24 [style = bold, label=""];
11->25 [style = solid, label="text"];
7->14 [style = dotted, label="true"];
24->19 [style = bold, label=""];
9->11 [style = bold, label=""];
1->9 [style = solid, label="text"];
0->5 [style = solid, label="text"];
27->0 [style = bold, label=""];
11->25 [style = bold, label=""];
1->15 [style = bold, label=""];
9->11 [style = dotted, label="true"];
11->6 [style = bold, label=""];
22->9 [style = bold, label=""];
18->24 [style = dotted, label="true"];
18->19 [style = dotted, label="true"];
2->18 [style = bold, label=""];
14->9 [style = solid, label="operator"];
7->0 [style = bold, label=""];
5->9 [style = solid, label="right"];
7->9 [style = dotted, label="true"];
5->14 [style = bold, label=""];
7->0 [style = dotted, label="true"];
2->10 [style = bold, label=""];
15->16 [style = bold, label=""];
14->27 [style = dashed, label="0"];
7->15 [style = dotted, label="true"];
26->3 [style = dotted, label="true"];
17->3 [style = dotted, label="true"];
0->9 [style = solid, label="left"];
14->1 [style = bold, label=""];
9->25 [style = dotted, label="true"];
8->7 [style = bold, label=""];
1->9 [style = bold, label=""];
7->5 [style = dotted, label="true"];
20->21 [style = bold, label=""];
5->22 [style = solid, label="result"];
6->4 [style = bold, label=""];
26->2 [style = bold, label=""];
12->2 [style = bold, label=""];
25->20 [style = bold, label=""];
9->11 [style = solid, label="result"];
6->16 [style = dashed, label="0"];
7->11 [style = dotted, label="true"];
10->8 [style = bold, label=""];
17->2 [style = bold, label=""];
25->20 [style = solid, label="result"];
9->15 [style = dashed, label="0"];
13->7 [style = bold, label=""];
14->15 [style = solid, label="operator"];
19->5 [style = solid, label="right"];
19->27 [style = bold, label=""];
7->6 [style = bold, label=""];
9->20 [style = dotted, label="true"];
7->16 [style = bold, label=""];
18->9 [style = bold, label=""];
9->21 [style = bold, label=""];
18->0 [style = dotted, label="true"];
6->4 [style = solid, label="result"];
8->18 [style = dashed, label="0"];
18->5 [style = dotted, label="true"];
8->13 [style = dotted, label="true"];
27->5 [style = solid, label="operator"];
1->15 [style = solid, label="text"];
7->1 [style = dotted, label="true"];
5->22 [style = bold, label=""];
18->27 [style = dotted, label="true"];
0->5 [style = bold, label=""];
8->13 [style = bold, label=""];
2->8 [style = bold, label=""];
2->10 [style = dotted, label="true"];
21->23 [style = bold, label=""];
18->22 [style = dotted, label="true"];
}
