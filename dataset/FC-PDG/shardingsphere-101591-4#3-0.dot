digraph {
25 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)),(ExpressionSegment)visit(ctx.expr(1)),ctx.logicalOperator().getText(),text)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "null != ctx.XOR()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return visit(ctx.expr(0))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "return visit(ctx.booleanPrimary())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "visitExpr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "null != ctx.booleanPrimary()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "null != ctx.LP_()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "return result@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "NotExpression result = new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "return result@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "null != ctx.logicalOperator()@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "visitExpr['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "null != ctx.logicalOperator()@@@14@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "String operator = \"XOR\"@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String operator = ctx.logicalOperator().getText()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "return result@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "visitExpr['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final ExprContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "NotExpression result = new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "return result@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
16->15 [style = bold, label=""];
5->8 [style = bold, label=""];
6->12 [style = solid, label="operator"];
9->16 [style = solid, label="text"];
7->16 [style = solid, label="right"];
2->25 [style = solid, label="text"];
18->7 [style = dotted, label="true"];
1->8 [style = bold, label=""];
8->15 [style = bold, label=""];
19->12 [style = bold, label=""];
21->27 [style = bold, label=""];
12->16 [style = dashed, label="0"];
25->26 [style = solid, label="result"];
12->21 [style = bold, label=""];
8->2 [style = dotted, label="true"];
5->1 [style = dotted, label="true"];
8->3 [style = bold, label=""];
12->2 [style = dotted, label="true"];
18->19 [style = dotted, label="true"];
8->16 [style = dotted, label="true"];
18->12 [style = bold, label=""];
8->7 [style = dotted, label="true"];
18->20 [style = dotted, label="true"];
18->23 [style = dotted, label="true"];
23->7 [style = solid, label="right"];
5->18 [style = dashed, label="0"];
20->7 [style = solid, label="left"];
2->4 [style = bold, label=""];
4->10 [style = solid, label="result"];
8->3 [style = dotted, label="true"];
9->16 [style = bold, label=""];
9->12 [style = solid, label="text"];
6->22 [style = dashed, label="0"];
26->21 [style = bold, label=""];
12->26 [style = dotted, label="true"];
22->3 [style = bold, label=""];
24->11 [style = dotted, label="true"];
5->1 [style = bold, label=""];
18->20 [style = bold, label=""];
12->2 [style = bold, label=""];
12->2 [style = solid, label="result"];
21->27 [style = solid, label="result"];
23->22 [style = bold, label=""];
8->6 [style = dotted, label="true"];
8->12 [style = dotted, label="true"];
20->23 [style = bold, label=""];
3->7 [style = bold, label=""];
22->7 [style = solid, label="operator"];
13->0 [style = dotted, label="true"];
7->19 [style = solid, label="result"];
4->15 [style = dashed, label="0"];
3->16 [style = solid, label="left"];
18->3 [style = dotted, label="true"];
7->6 [style = bold, label=""];
25->26 [style = bold, label=""];
3->12 [style = solid, label="left"];
13->5 [style = bold, label=""];
14->11 [style = dotted, label="true"];
0->18 [style = bold, label=""];
17->13 [style = bold, label=""];
9->12 [style = bold, label=""];
8->9 [style = dotted, label="true"];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
6->9 [style = bold, label=""];
2->25 [style = bold, label=""];
7->19 [style = bold, label=""];
3->7 [style = solid, label="text"];
12->25 [style = dotted, label="true"];
6->16 [style = solid, label="operator"];
7->12 [style = solid, label="right"];
0->5 [style = bold, label=""];
13->18 [style = bold, label=""];
13->0 [style = bold, label=""];
24->13 [style = bold, label=""];
17->11 [style = dotted, label="true"];
18->22 [style = dotted, label="true"];
}
