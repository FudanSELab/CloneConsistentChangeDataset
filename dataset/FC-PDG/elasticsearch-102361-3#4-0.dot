digraph {
16 [style = filled, label = "assertFalse(joinHelper.isJoinPending())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "joinHelper.sendJoinRequest(node1,0L,optionalJoin1)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(capturedRequests2a.length,equalTo(1))@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "CapturedRequest(( capturedRequests1a = capturingTransport.getCapturedRequestsAndClear()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "transportService.start()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "capturingTransport.handleRemoteError(capturedRequest2a.requestId,new CoordinationStateRejectedException(\"dummy\"))@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertFalse(joinHelper.isJoinPending())@@@56@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Optional<Join> optionalJoin1 = randomBoolean()? Optional.empty(): Optional.of(new Join(localNode,node1,randomNonNegativeLong(),randomNonNegativeLong(),randomNonNegativeLong()))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "CapturedRequest(( capturedRequests1a = capturingTransport.getCapturedRequestsAndClear()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "CapturedRequest(( capturedRequests2 = capturingTransport.getCapturedRequestsAndClear()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "joinHelper.sendJoinRequest(node2,randomNonNegativeLong(),optionalJoin2)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "joinHelper.sendJoinRequest(node1,0L,optionalJoin1)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertThat(capturedRequests2.length,equalTo(0))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(Settings.builder().put(NODE_NAME_SETTING.getKey(),\"node0\").build(),random())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "joinHelper.sendJoinRequest(node1,0L,optionalJoin1)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "CapturedRequest capturedRequest1 = capturedRequests1(0(@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testJoinDeduplication['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Optional<Join> optionalJoin2 = randomBoolean()? Optional.empty(): Optional.of(new Join(localNode,node2,randomNonNegativeLong(),randomNonNegativeLong(),randomNonNegativeLong()))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(joinHelper.isJoinPending())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "CapturedRequest capturedRequest1a = capturedRequests1a(0(@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "JoinHelper joinHelper = new JoinHelper(Settings.EMPTY,null,null,transportService,null,null,null,null,Collections.emptyList(),null,null)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,deterministicTaskQueue.getThreadPool(),TransportService.NOOP_TRANSPORT_INTERCEPTOR,null,null,Collections.emptySet())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "CapturedRequest capturedRequest2a = capturedRequests2a(0(@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertThat(capturedRequests1.length,equalTo(0))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertThat(capturedRequests1a.length,equalTo(1))@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "CapturedRequest(( capturedRequests1 = capturingTransport.getCapturedRequestsAndClear()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "joinHelper.sendJoinRequest(node1,randomNonNegativeLong(),optionalJoin1)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(node2,capturedRequest2.node)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "capturingTransport.handleResponse(capturedRequest1.requestId,TransportResponse.Empty.INSTANCE)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Optional<Join> optionalJoin2a = optionalJoin2.isPresent() && randomBoolean()? Optional.empty(): Optional.of(new Join(localNode,node2,randomNonNegativeLong(),randomNonNegativeLong(),randomNonNegativeLong()))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "DiscoveryNode localNode = new DiscoveryNode(\"node0\",buildNewFakeTransportAddress(),Version.CURRENT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "joinHelper.sendJoinRequest(node2,0L,optionalJoin2a)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(node1,capturedRequest1a.node)@@@37@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testJoinFailureOnUnhealthyNodes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "capturingTransport.handleRemoteError(capturedRequest1.requestId,new CoordinationStateRejectedException(\"dummy\"))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "CapturedRequest capturedRequest2 = capturedRequests2(0(@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertFalse(joinHelper.isJoinPending())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "CapturingTransport capturingTransport = new CapturingTransport()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertFalse(joinHelper.isJoinPending())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(joinHelper.isJoinPending())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DiscoveryNode node2 = new DiscoveryNode(\"node2\",buildNewFakeTransportAddress(),Version.CURRENT)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "joinHelper.sendJoinRequest(node2,0L,optionalJoin2)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testJoinDeduplication['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "joinHelper.sendJoinRequest(node1,0L,optionalJoin1)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "AtomicReference<StatusInfo> nodeHealthServiceStatus = new AtomicReference<>(new StatusInfo(UNHEALTHY,\"unhealthy-info\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "capturingTransport.handleRemoteError(capturedRequest2.requestId,new CoordinationStateRejectedException(\"dummy\"))@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "nodeHealthServiceStatus.getAndSet(new StatusInfo(HEALTHY,\"healthy-info\"))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(node1,capturedRequest1a.node)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(node1,capturedRequest1.node)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "DiscoveryNode node1 = new DiscoveryNode(\"node1\",buildNewFakeTransportAddress(),Version.CURRENT)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(node2,capturedRequest2a.node)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "CapturedRequest(( capturedRequests2a = capturingTransport.getCapturedRequestsAndClear()@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "capturingTransport.handleRemoteError(capturedRequest1a.requestId,new CoordinationStateRejectedException(\"dummy\"))@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "JoinHelper joinHelper = new JoinHelper(null,null,transportService,null,null,null,null,Collections.emptyList(),null,null)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "randomBoolean()@@@35@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "transportService.start()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(capturedRequests1.length,equalTo(1))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "CapturedRequest(( capturedRequests2 = capturingTransport.getCapturedRequestsAndClear()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37->38 [style = solid, label="transportService"];
19->28 [style = bold, label=""];
54->16 [style = bold, label=""];
21->36 [style = solid, label="capturedRequests1a"];
22->31 [style = bold, label=""];
11->15 [style = solid, label="optionalJoin1"];
10->18 [style = bold, label=""];
53->31 [style = bold, label=""];
28->41 [style = solid, label="localNode"];
24->15 [style = solid, label="node1"];
3->30 [style = solid, label="node2"];
4->9 [style = bold, label=""];
28->34 [style = solid, label="localNode"];
1->36 [style = bold, label=""];
40->39 [style = bold, label=""];
16->35 [style = bold, label=""];
34->56 [style = bold, label=""];
11->50 [style = solid, label="optionalJoin1"];
3->6 [style = solid, label="node2"];
11->22 [style = solid, label="optionalJoin1"];
44->43 [style = bold, label=""];
47->43 [style = bold, label=""];
17->27 [style = bold, label=""];
26->13 [style = bold, label=""];
20->16 [style = bold, label=""];
24->36 [style = solid, label="node1"];
24->11 [style = solid, label="node1"];
25->29 [style = dotted, label="true"];
33->11 [style = bold, label=""];
49->53 [style = bold, label=""];
16->54 [style = dashed, label="0"];
15->21 [style = bold, label=""];
11->17 [style = bold, label=""];
34->30 [style = solid, label="optionalJoin2"];
25->7 [style = dotted, label="false"];
27->8 [style = bold, label=""];
35->5 [style = bold, label=""];
37->38 [style = bold, label=""];
43->19 [style = bold, label=""];
48->57 [style = bold, label=""];
41->6 [style = solid, label="optionalJoin2a"];
24->9 [style = solid, label="node1"];
5->22 [style = bold, label=""];
37->45 [style = bold, label=""];
2->24 [style = bold, label=""];
3->41 [style = solid, label="node2"];
11->17 [style = solid, label="optionalJoin1"];
12->41 [style = bold, label=""];
36->12 [style = bold, label=""];
42->26 [style = bold, label=""];
34->30 [style = bold, label=""];
28->11 [style = solid, label="localNode"];
31->25 [style = bold, label=""];
3->33 [style = bold, label=""];
24->17 [style = solid, label="node1"];
46->34 [style = solid, label="optionalJoin2"];
57->46 [style = bold, label=""];
28->46 [style = solid, label="localNode"];
37->45 [style = solid, label="transportService"];
51->34 [style = bold, label=""];
9->0 [style = bold, label=""];
46->51 [style = bold, label=""];
11->50 [style = bold, label=""];
30->20 [style = bold, label=""];
39->10 [style = bold, label=""];
8->48 [style = dashed, label="0"];
24->3 [style = bold, label=""];
23->14 [style = bold, label=""];
17->50 [style = dashed, label="0"];
24->12 [style = solid, label="node1"];
7->15 [style = bold, label=""];
21->1 [style = bold, label=""];
40->10 [style = solid, label="capturedRequests2a"];
24->49 [style = solid, label="node1"];
55->49 [style = bold, label=""];
18->23 [style = bold, label=""];
38->45 [style = dashed, label="0"];
27->4 [style = solid, label="capturedRequests1"];
3->18 [style = solid, label="node2"];
32->43 [style = bold, label=""];
3->34 [style = solid, label="node2"];
25->29 [style = bold, label=""];
11->49 [style = solid, label="optionalJoin1"];
16->55 [style = bold, label=""];
27->48 [style = bold, label=""];
31->1 [style = bold, label=""];
8->4 [style = bold, label=""];
41->6 [style = bold, label=""];
14->42 [style = bold, label=""];
25->7 [style = bold, label=""];
53->1 [style = solid, label="capturedRequests1a"];
38->2 [style = bold, label=""];
37->52 [style = bold, label=""];
52->38 [style = bold, label=""];
56->54 [style = bold, label=""];
20->35 [style = solid, label="capturedRequests2"];
45->2 [style = bold, label=""];
3->46 [style = solid, label="node2"];
28->37 [style = bold, label=""];
29->15 [style = bold, label=""];
3->5 [style = solid, label="node2"];
24->22 [style = solid, label="node1"];
50->27 [style = bold, label=""];
0->34 [style = bold, label=""];
24->50 [style = solid, label="node1"];
6->40 [style = bold, label=""];
}
