digraph {
6 [style = filled, label = "verify(listener,times(1)).onBlockFetchSuccess(\"b0\",blocks.get(\"b0\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "blocks.put(\"b0\",new NioManagedBuffer(ByteBuffer.wrap(new byte(((()))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "blocks.put(\"b1\",null)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testFailure['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "verify(listener,times(2)).onBlockFetchFailure(eq(\"b2\"),any())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "blocks.put(\"b2\",new NioManagedBuffer(ByteBuffer.wrap(new byte(((()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "verify(listener,times(1)).onBlockFetchSuccess(\"b2\",blocks.get(\"b2\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testFailureAndSuccess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "verify(listener,times(1)).onBlockFetchFailure(eq(\"b1\"),(Throwable)any())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "LinkedHashMap<String,ManagedBuffer> blocks = Maps.newLinkedHashMap()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(listener,times(2)).onBlockFetchFailure(eq(\"b2\"),(Throwable)any())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testFailure['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "blocks.put(\"b2\",null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "verify(listener,times(1)).onBlockFetchFailure(eq(\"b2\"),(Throwable)any())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "BlockFetchingListener listener = fetchBlocks(blocks)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "verify(listener,times(1)).onBlockFetchFailure(eq(\"b1\"),any())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2->5 [style = bold, label=""];
5->14 [style = dashed, label="0"];
9->11 [style = bold, label=""];
3->1 [style = bold, label=""];
7->3 [style = bold, label=""];
4->7 [style = bold, label=""];
6->2 [style = bold, label=""];
8->0 [style = bold, label=""];
1->6 [style = bold, label=""];
5->11 [style = dashed, label="0"];
0->4 [style = bold, label=""];
0->1 [style = solid, label="blocks"];
2->9 [style = dashed, label="0"];
14->12 [style = bold, label=""];
2->14 [style = bold, label=""];
10->0 [style = bold, label=""];
3->15 [style = dashed, label="0"];
7->15 [style = bold, label=""];
6->9 [style = bold, label=""];
13->0 [style = bold, label=""];
15->1 [style = bold, label=""];
}
