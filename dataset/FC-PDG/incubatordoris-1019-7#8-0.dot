digraph {
24 [style = filled, label = "Assert.assertTrue(desc.isNegative())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "desc.analyze(\"testDb\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "sql = \"APPEND DATA INFILE ('abc.txt') INTO TABLE testTable PARTITIONS (p1, p2) (k2, k3)\" + \" SET (`k1` = replace_value('', NULL))\"@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt', 'bcd.txt') NEGATIVE INTO TABLE testTable\",desc.toString())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "params.clear()@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt') INTO TABLE testTable PARTITIONS (p1, p2)\",desc.toString())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(\"(col1, col2(\",desc.getFileFieldNames().toString())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(\"(abc.txt(\",desc.getFilePaths().toString())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "predicate = new BinaryPredicate(Operator.EQ,new SlotRef(null,\"k1\"),new FunctionCallExpr(\"bitmap_dict\",params))@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"col1\",\"col2\"),new Separator(\",\"),\"csv\",null,false,null,null,whereExpr,LoadTask.MergeType.MERGE,whereExpr,null)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
67 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\",\"bcd.txt\"),Lists.newArrayList(\"col1\",\"col2\"),new Separator(\"\x01\"),null,true,null)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "Expr whereExpr = new BinaryPredicate(BinaryPredicate.Operator.EQ,new IntLiteral(1),new IntLiteral(1))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "predicate = new BinaryPredicate(Operator.EQ,new SlotRef(null,\"k1\"),new FunctionCallExpr(\"replace_value\",params))@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(sql,desc.toSql())@@@66@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Expr whereExpr = new BinaryPredicate(BinaryPredicate.Operator.EQ,new IntLiteral(1),new IntLiteral(1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt') NEGATIVE INTO TABLE testTable (col1, col2)\",desc.toString())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "desc.analyze(\"testDb\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "predicate = new BinaryPredicate(Operator.EQ,new SlotRef(null,\"k1\"),new FunctionCallExpr(\"replace_value\",params))@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Assert.assertNull(desc.getColumnSeparator())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "desc.analyze(\"testDb\")@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt', 'bcd.txt') NEGATIVE INTO TABLE testTable\" + \" COLUMNS TERMINATED BY '' (col1, col2)\",desc.toString())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "desc = new DataDescription(\"testTable\",new PartitionNames(false,Lists.newArrayList(\"p1\",\"p2\")),Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"k2\",\"k3\"),null,null,false,Lists.newArrayList((Expr)predicate))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "desc = new DataDescription(\"testTable\",new PartitionNames(false,Lists.newArrayList(\"p1\",\"p2\")),Lists.newArrayList(\"abc.txt\"),null,null,null,false,null)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\",\"bcd.txt\"),null,null,null,true,null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "params.add(new SlotRef(null,\"k2\"))@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "desc.analyze(\"testDb\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(\"MERGE DATA INFILE ('abc.txt') INTO TABLE testTable COLUMNS TERMINATED BY ',' (col1, col2) WHERE 1 = 1 DELETE ON 1 = 1\",desc.toString())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\",\"bcd.txt\"),Lists.newArrayList(\"col1\",\"col2\"),new ColumnSeparator(\"\x01\"),null,true,null)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "desc.analyze(\"testDb\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "params.add(new SlotRef(null,\"k2\"))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "DataDescription desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\"),null,null,null,false,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "params.add(new StringLiteral(\"day\"))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "desc = new DataDescription(\"testTable\",new PartitionNames(false,Lists.newArrayList(\"p1\",\"p2\")),Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"k2\",\"k3\"),null,null,false,Lists.newArrayList((Expr)predicate))@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "desc = new DataDescription(\"testTable\",new PartitionNames(false,Lists.newArrayList(\"p1\",\"p2\")),Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"k2\",\"k3\"),null,null,false,Lists.newArrayList((Expr)predicate))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"col1\",\"col2\"),null,null,true,null)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "BinaryPredicate predicate = new BinaryPredicate(Operator.EQ,new SlotRef(null,\"k1\"),new FunctionCallExpr(\"alignment_timestamp\",params))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\",\"bcd.txt\"),Lists.newArrayList(\"col1\",\"col2\"),new ColumnSeparator(\"\"),null,true,null)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
72 [style = filled, label = "testNegMerge['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testNormal['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(\"1 = 1\",desc.getWhereExpr().toSql())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "desc.analyze(\"testDb\")@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "desc.analyze(\"testDb\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "desc = new DataDescription(\"testTable\",new PartitionNames(false,Lists.newArrayList(\"p1\",\"p2\")),\"testHiveTable\",false,Lists.newArrayList(predicate),null,LoadTask.MergeType.APPEND,null)@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt', 'bcd.txt') NEGATIVE INTO TABLE testTable\" + \" COLUMNS TERMINATED BY '\x01' (col1, col2)\",desc.toString())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "desc.analyze(\"testDb\")@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "DataDescription desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"col1\",\"col2\"),new ColumnSeparator(\",\"),\"csv\",null,true,null,null,whereExpr,LoadTask.MergeType.MERGE,whereExpr,null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "sql = \"APPEND DATA INFILE ('abc.txt') INTO TABLE testTable PARTITIONS (p1, p2) (k2, k3)\" + \" SET (`k1` = replace_value('-', '10'))\"@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "desc.analyze(\"testDb\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "params.add(new StringLiteral(\"10\"))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "desc.analyze(\"testDb\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\"),null,null,null,true,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "desc.analyze(\"testDb\")@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "String sql = \"APPEND DATA INFILE ('abc.txt') INTO TABLE testTable PARTITIONS (p1, p2) (k2, k3)\" + \" SET (`k1` = alignment_timestamp('day', `k2`))\"@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(sql,desc.toString())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals(\"1 = 1\",desc.getDeleteCondition().toSql())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "params.add(new StringLiteral(\"-\"))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(\",\",desc.getColumnSeparator())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt') NEGATIVE INTO TABLE testTable\",desc.toString())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "params.add(new StringLiteral(\"\"))@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(\"testTable\",desc.getTableName())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "params.add(new NullLiteral())@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "testNormal['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "desc.analyze(\"testDb\")@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt') INTO TABLE testTable\",desc.toString())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "params.clear()@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "params.clear()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(sql,desc.toString())@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"col1\",\"col2\"),new ColumnSeparator(\",\"),\"csv\",null,false,null,null,whereExpr,LoadTask.MergeType.MERGE,whereExpr,null)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(sql,desc.toString())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "sql = \"APPEND DATA FROM TABLE testHiveTable INTO TABLE testTable PARTITIONS (p1, p2) SET (`k1` = bitmap_dict(`k2`))\"@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\",\"bcd.txt\"),Lists.newArrayList(\"col1\",\"col2\"),new Separator(\"\"),null,true,null)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "desc.analyze(\"testDb\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "List<Expr> params = Lists.newArrayList()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
70->69 [style = solid, label="whereExpr"];
24->60 [style = bold, label=""];
70->69 [style = bold, label=""];
36->29 [style = bold, label=""];
47->10 [style = bold, label=""];
7->52 [style = bold, label=""];
25->44 [style = bold, label=""];
49->8 [style = bold, label=""];
40->67 [style = dashed, label="0"];
17->53 [style = bold, label=""];
26->12 [style = bold, label=""];
27->68 [style = bold, label=""];
39->56 [style = solid, label="sql"];
27->45 [style = bold, label=""];
51->55 [style = solid, label="sql"];
53->52 [style = solid, label="params"];
65->20 [style = bold, label=""];
34->48 [style = solid, label="predicate"];
58->22 [style = bold, label=""];
45->69 [style = dashed, label="0"];
68->11 [style = bold, label=""];
38->66 [style = dashed, label="0"];
19->18 [style = bold, label=""];
9->51 [style = bold, label=""];
63->5 [style = bold, label=""];
67->64 [style = bold, label=""];
34->48 [style = bold, label=""];
27->68 [style = solid, label="whereExpr"];
50->67 [style = bold, label=""];
53->5 [style = solid, label="params"];
45->11 [style = bold, label=""];
12->41 [style = bold, label=""];
2->39 [style = bold, label=""];
22->38 [style = bold, label=""];
52->42 [style = bold, label=""];
26->12 [style = solid, label="sql"];
0->23 [style = bold, label=""];
64->25 [style = bold, label=""];
53->18 [style = solid, label="params"];
28->24 [style = bold, label=""];
1->32 [style = bold, label=""];
14->61 [style = bold, label=""];
44->37 [style = bold, label=""];
62->26 [style = bold, label=""];
3->58 [style = bold, label=""];
56->14 [style = bold, label=""];
29->57 [style = bold, label=""];
61->63 [style = bold, label=""];
5->46 [style = solid, label="predicate"];
23->31 [style = bold, label=""];
35->3 [style = bold, label=""];
18->59 [style = bold, label=""];
32->19 [style = bold, label=""];
54->0 [style = bold, label=""];
22->66 [style = bold, label=""];
66->43 [style = bold, label=""];
20->54 [style = bold, label=""];
27->45 [style = solid, label="whereExpr"];
53->13 [style = bold, label=""];
4->34 [style = bold, label=""];
60->27 [style = bold, label=""];
38->43 [style = bold, label=""];
15->49 [style = bold, label=""];
43->50 [style = bold, label=""];
41->7 [style = bold, label=""];
57->28 [style = bold, label=""];
16->47 [style = bold, label=""];
72->70 [style = bold, label=""];
33->6 [style = bold, label=""];
37->17 [style = bold, label=""];
40->64 [style = bold, label=""];
48->9 [style = bold, label=""];
42->33 [style = bold, label=""];
53->34 [style = solid, label="params"];
31->15 [style = bold, label=""];
6->30 [style = solid, label="sql"];
11->35 [style = bold, label=""];
10->36 [style = bold, label=""];
52->42 [style = solid, label="predicate"];
21->20 [style = bold, label=""];
69->71 [style = bold, label=""];
18->59 [style = solid, label="predicate"];
51->55 [style = bold, label=""];
55->1 [style = bold, label=""];
50->40 [style = bold, label=""];
39->56 [style = bold, label=""];
59->2 [style = bold, label=""];
45->68 [style = dashed, label="0"];
46->62 [style = bold, label=""];
5->46 [style = bold, label=""];
13->4 [style = bold, label=""];
6->30 [style = bold, label=""];
}
