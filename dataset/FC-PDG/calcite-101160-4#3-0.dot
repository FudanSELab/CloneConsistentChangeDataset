digraph {
0 [style = filled, label = "checkExp(\"substring('a' FROM 1)\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "checkExpType(\"substring('a', '1')\",\"VARCHAR(1) NOT NULL\")@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "checkExp(\"trim(both 'mustache' FROM 'beard')\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testSubstring['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "checkCharset(\"substring(_UTF16'10' FROM 1 FOR 2)\",Charset.forName(\"UTF-16LE\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TODO@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "checkExpType(\"trim('beard ')\",\"VARCHAR(7) NOT NULL\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "checkCollation(\"trim('mustache' FROM 'beard')\",\"CHAR(5)\",expectedCoercibility)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "checkExp(\"trim(leading 'mustache' FROM 'beard')\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "checkExpType(\"substring('1000' FROM 2)\",\"VARCHAR(4) NOT NULL\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "checkExpType(\"substring(12345, '1')\",\"VARCHAR NOT NULL\")@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "checkExpType(\"substring('a', 1, '3')\",\"VARCHAR(1) NOT NULL\")@@@18@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "checkExp(\"trim(trailing 'mustache' FROM 'beard')\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "checkExpType(\"trim('mustache' FROM cast(null as varchar(4)))\",\"VARCHAR(4)\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testTrim['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "checkExp(\"substring('a', 1)\")@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "checkExpType(\"substring('10' FROM 1 FOR 2)\",\"VARCHAR(2) NOT NULL\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "checkExpType(\"substring(x'10456b' FROM 1 FOR 2)\",\"VARBINARY(3) NOT NULL\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "checkExpType(\"substring('1000' FROM '1' FOR 'w')\",\"VARCHAR(4) NOT NULL\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "checkExpType(\"substring(cast(' 100 ' as CHAR(99)) FROM '1' FOR 'w')\",\"VARCHAR(99) NOT NULL\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "checkExp(\"substring('a' FROM 1 FOR 3)\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "checkExp(\"substring('a', 1, 3)\")@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "checkExp(\"substring('a' FROM 'reg' FOR '\')\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "checkExp(\"trim('mustache' FROM 'beard')\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testSubstring['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "checkCharset(\"substring('10' FROM 1 FOR 2)\",Charset.forName(\"latin1\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final SqlCollation.Coercibility expectedCoercibility = null@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "checkExpType(\"trim('mustache' FROM 'beard')\",\"VARCHAR(5) NOT NULL\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "checkExp(\"substring(x'ff' FROM 1 FOR 2)\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->6 [style = bold, label=""];
3->10 [style = bold, label=""];
27->25 [style = bold, label=""];
10->28 [style = dashed, label="0"];
21->22 [style = bold, label=""];
8->4 [style = bold, label=""];
13->0 [style = bold, label=""];
0->27 [style = dashed, label="0"];
25->20 [style = bold, label=""];
9->3 [style = bold, label=""];
8->25 [style = dashed, label="0"];
28->19 [style = bold, label=""];
14->12 [style = bold, label=""];
11->1 [style = bold, label=""];
0->8 [style = bold, label=""];
18->28 [style = bold, label=""];
12->16 [style = bold, label=""];
6->9 [style = bold, label=""];
19->23 [style = dotted, label="true"];
20->21 [style = bold, label=""];
10->7 [style = bold, label=""];
5->11 [style = bold, label=""];
15->14 [style = bold, label=""];
19->26 [style = bold, label=""];
22->18 [style = bold, label=""];
1->15 [style = bold, label=""];
3->18 [style = dashed, label="0"];
7->5 [style = bold, label=""];
6->21 [style = dashed, label="0"];
26->23 [style = bold, label=""];
2->0 [style = bold, label=""];
16->17 [style = bold, label=""];
24->27 [style = bold, label=""];
4->20 [style = dashed, label="0"];
26->23 [style = solid, label="expectedCoercibility"];
19->26 [style = dotted, label="true"];
9->22 [style = dashed, label="0"];
}
