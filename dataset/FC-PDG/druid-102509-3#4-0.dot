digraph {
23 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final KafkaPartitions startPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,0L,1,0L))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Thread.sleep(10)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(checkpoint.getPartitionOffsetMap().equals(currentOffsets))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "final KafkaPartitions checkpoint = new KafkaPartitions(topic,ImmutableMap.of(0,1L,1,0L))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "kafkaProducer.send(record).get()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@47@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new KafkaPartitions(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "task.getRunner().getStatus() != KafkaIndexTask.Status.PAUSED@@@21@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final KafkaPartitions endPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,2L,1,0L))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@38@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Map<String,String> consumerProps = kafkaServer.consumerProperties()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final KafkaPartitions endPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,2L))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "maxRowsPerSegment = 1@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Map<String,String> consumerProps = kafkaServer.consumerProperties()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "kafkaProducer.send(record).get()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new KafkaPartitions(topic,checkpoint.getPartitionOffsetMap())))))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final KafkaPartitions checkpoint2 = new KafkaPartitions(topic,ImmutableMap.of(0,4L,1,2L))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getProcessed())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->46 [style = solid, label="consumerProps"];
5->9 [style = solid, label="task"];
5->9 [style = bold, label=""];
43->46 [style = solid, label="endPartitions"];
5->11 [style = solid, label="task"];
32->12 [style = bold, label=""];
18->55 [style = bold, label=""];
25->29 [style = solid, label="currentOffsets"];
31->43 [style = dashed, label="0"];
16->7 [style = bold, label=""];
34->18 [style = bold, label=""];
24->34 [style = bold, label=""];
35->19 [style = dotted, label="true"];
42->48 [style = bold, label=""];
18->46 [style = solid, label="startPartitions"];
9->35 [style = bold, label=""];
30->29 [style = bold, label=""];
7->5 [style = solid, label="baseSequenceName"];
5->13 [style = solid, label="task"];
18->55 [style = dashed, label="0"];
56->47 [style = bold, label=""];
3->27 [style = bold, label=""];
52->24 [style = bold, label=""];
37->20 [style = solid, label="desc6"];
46->33 [style = solid, label="task"];
34->29 [style = solid, label="startPartitions"];
18->29 [style = solid, label="startPartitions"];
46->9 [style = solid, label="task"];
21->1 [style = bold, label=""];
5->33 [style = solid, label="task"];
47->51 [style = bold, label=""];
29->14 [style = bold, label=""];
5->17 [style = solid, label="task"];
13->38 [style = solid, label="desc3"];
11->33 [style = bold, label=""];
2->5 [style = solid, label="consumerProps"];
13->22 [style = bold, label=""];
5->22 [style = solid, label="task"];
7->46 [style = solid, label="baseSequenceName"];
2->24 [style = bold, label=""];
5->37 [style = solid, label="task"];
8->11 [style = bold, label=""];
33->13 [style = solid, label="desc2"];
18->31 [style = bold, label=""];
15->38 [style = bold, label=""];
12->28 [style = bold, label=""];
28->30 [style = bold, label=""];
32->49 [style = bold, label=""];
44->50 [style = bold, label=""];
48->44 [style = bold, label=""];
16->4 [style = dotted, label="true"];
17->37 [style = bold, label=""];
33->13 [style = bold, label=""];
43->46 [style = bold, label=""];
46->50 [style = solid, label="task"];
11->23 [style = solid, label="desc1"];
14->42 [style = dashed, label="0"];
22->17 [style = bold, label=""];
45->52 [style = bold, label=""];
13->3 [style = solid, label="desc3"];
25->49 [style = solid, label="currentOffsets"];
21->54 [style = dashed, label="0"];
39->36 [style = solid, label="desc7"];
46->9 [style = bold, label=""];
31->0 [style = bold, label=""];
11->3 [style = solid, label="desc1"];
23->15 [style = bold, label=""];
49->28 [style = bold, label=""];
0->5 [style = solid, label="endPartitions"];
26->8 [style = bold, label=""];
5->39 [style = solid, label="task"];
7->54 [style = bold, label=""];
4->7 [style = bold, label=""];
17->10 [style = solid, label="desc5"];
35->25 [style = bold, label=""];
50->47 [style = solid, label="desc1"];
29->42 [style = bold, label=""];
19->35 [style = bold, label=""];
34->5 [style = solid, label="startPartitions"];
55->43 [style = bold, label=""];
41->16 [style = bold, label=""];
1->2 [style = bold, label=""];
50->33 [style = bold, label=""];
8->44 [style = dashed, label="0"];
16->4 [style = bold, label=""];
39->3 [style = solid, label="desc7"];
37->39 [style = bold, label=""];
20->36 [style = bold, label=""];
7->40 [style = bold, label=""];
26->48 [style = dashed, label="0"];
0->5 [style = bold, label=""];
33->51 [style = solid, label="desc2"];
54->45 [style = bold, label=""];
22->10 [style = solid, label="desc4"];
50->13 [style = solid, label="desc1"];
10->20 [style = bold, label=""];
38->10 [style = bold, label=""];
35->19 [style = bold, label=""];
25->32 [style = bold, label=""];
39->3 [style = bold, label=""];
25->32 [style = solid, label="currentOffsets"];
17->3 [style = solid, label="desc5"];
25->12 [style = solid, label="currentOffsets"];
22->3 [style = solid, label="desc4"];
14->26 [style = bold, label=""];
40->1 [style = bold, label=""];
13->56 [style = bold, label=""];
6->16 [style = bold, label=""];
21->40 [style = dashed, label="0"];
53->16 [style = bold, label=""];
7->21 [style = bold, label=""];
37->3 [style = solid, label="desc6"];
27->23 [style = bold, label=""];
33->15 [style = solid, label="desc2"];
33->3 [style = solid, label="desc2"];
}
