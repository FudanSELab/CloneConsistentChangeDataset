digraph {
3 [style = filled, label = "int i = 1@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "v++@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "subscriptions.seek(tp,0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "List<ConsumerRecord<byte((,byte((>> records = fetchRecords(builder.build(),Errors.NONE.code(),100L,100 * i).get(tp)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "i++@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricName(\"fetch-throttle-time-avg\",metricGroup,\"\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "client.respond(produceResponse(tp,offset,Errors.NONE.code(),100 * i))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "accumulator.append(tp,0L,\"key\".getBytes(),\"value\".getBytes(),null,MAX_BLOCK_TIMEOUT)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "int v = 0@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "client.respond(produceResponse(tp,offset,Errors.NONE,100 * i))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricName(\"produce-throttle-time-max\",METRIC_GROUP,\"\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricName(\"produce-throttle-time-avg\",METRIC_GROUP,\"\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "builder.appendWithOffset((long)i * 3 + v,Record.NO_TIMESTAMP,\"key\".getBytes(),String.format(\"value-%d\",v).getBytes())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(300,maxMetric.value(),EPSILON)@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "i++@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(200,avgMetric.value(),EPSILON)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "sender.run(time.milliseconds())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "sender.run(time.milliseconds())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "subscriptions.assignFromUser(singleton(tp))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "v < 3@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "i < 4@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final long offset = 0@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int i = 1@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricName(\"fetch-throttle-time-max\",metricGroup,\"\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(300,maxMetric.value(),EPS)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(3,records.size())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
13->10 [style = bold, label=""];
28->29 [style = bold, label=""];
13->15 [style = solid, label="offset"];
3->2 [style = solid, label="i"];
29->20 [style = solid, label="v"];
16->0 [style = bold, label=""];
3->11 [style = dotted, label="true"];
31->23 [style = bold, label=""];
1->8 [style = bold, label=""];
7->17 [style = bold, label=""];
10->5 [style = solid, label="i"];
29->25 [style = solid, label="v"];
3->1 [style = bold, label=""];
20->25 [style = dotted, label="true"];
5->3 [style = solid, label="i"];
7->31 [style = dashed, label="0"];
3->27 [style = solid, label="i"];
11->15 [style = dashed, label="0"];
27->28 [style = bold, label=""];
11->6 [style = bold, label=""];
3->27 [style = dashed, label="0"];
22->31 [style = bold, label=""];
0->11 [style = bold, label=""];
10->3 [style = bold, label=""];
2->27 [style = solid, label="i"];
15->6 [style = bold, label=""];
5->11 [style = solid, label="i"];
27->2 [style = dotted, label="true"];
27->21 [style = dotted, label="true"];
3->16 [style = bold, label=""];
3->6 [style = dotted, label="true"];
26->19 [style = bold, label=""];
17->22 [style = bold, label=""];
2->18 [style = solid, label="i"];
4->22 [style = dashed, label="0"];
9->23 [style = dashed, label="0"];
0->15 [style = bold, label=""];
4->7 [style = bold, label=""];
25->20 [style = solid, label="v"];
10->11 [style = solid, label="i"];
3->18 [style = solid, label="i"];
3->27 [style = bold, label=""];
21->2 [style = bold, label=""];
7->9 [style = bold, label=""];
20->18 [style = bold, label=""];
12->13 [style = bold, label=""];
24->26 [style = bold, label=""];
6->5 [style = bold, label=""];
29->20 [style = bold, label=""];
25->20 [style = bold, label=""];
2->0 [style = bold, label=""];
30->21 [style = bold, label=""];
3->5 [style = dotted, label="true"];
27->28 [style = dotted, label="true"];
27->30 [style = dotted, label="true"];
3->2 [style = bold, label=""];
10->15 [style = solid, label="i"];
27->29 [style = dotted, label="true"];
5->15 [style = solid, label="i"];
27->20 [style = dotted, label="true"];
2->16 [style = dashed, label="0"];
3->15 [style = dotted, label="true"];
27->7 [style = bold, label=""];
3->0 [style = dotted, label="true"];
18->25 [style = bold, label=""];
20->18 [style = dotted, label="true"];
2->27 [style = bold, label=""];
8->17 [style = dashed, label="0"];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
20->30 [style = bold, label=""];
25->18 [style = solid, label="v"];
29->18 [style = solid, label="v"];
19->3 [style = bold, label=""];
3->16 [style = dotted, label="true"];
10->3 [style = solid, label="i"];
3->2 [style = dotted, label="true"];
13->11 [style = solid, label="offset"];
}
