digraph {
9 [style = filled, label = "String collectionName@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "String collectionName@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "List<String> allCollections = new ArrayList<>()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "String(( collectionNames = collectionName.split(\",\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "boolean checkAlias@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "getSlices['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "boolean checkAlias@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ClusterState clusterState = zkStateReader.getClusterState()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<String> collections = checkAlias? zkStateReader.getAliases().resolveAliases(col): Collections.singletonList(collectionName)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ZkStateReader zkStateReader@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "boolean checkAlias@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "getSlices['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "throw new IOException(\"Slices not found for \" + collectionName)@@@20@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<Slice> slices = allCollections.stream().map(null).filter(null).flatMap(null).collect(Collectors.toList())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "entry.getKey().equalsIgnoreCase(collectionName)@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<String> allCollections = new ArrayList()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "getSlices['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Map<String,DocCollection> collectionsMap = clusterState.getCollectionsMap()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return entry.getValue().getActiveSlicesArr()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "!slices.isEmpty()@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ZkStateReader zkStateReader@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "allCollections.addAll(collections)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return slices.toArray(new Slice(((()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->21 [style = dotted, label="true"];
16->19 [style = dotted, label="true"];
4->18 [style = dashed, label="0"];
16->0 [style = bold, label=""];
0->13 [style = bold, label=""];
15->12 [style = solid, label="collectionName"];
15->7 [style = solid, label="collectionName"];
19->7 [style = solid, label="checkAlias"];
5->10 [style = dotted, label="true"];
16->17 [style = dotted, label="true"];
10->7 [style = solid, label="checkAlias"];
21->14 [style = solid, label="collectionName"];
11->12 [style = bold, label=""];
12->6 [style = bold, label=""];
1->7 [style = bold, label=""];
5->15 [style = dotted, label="true"];
7->3 [style = bold, label=""];
2->12 [style = bold, label=""];
7->3 [style = solid, label="collections"];
2->11 [style = dotted, label="true"];
6->14 [style = bold, label=""];
15->7 [style = solid, label="checkAlias"];
22->20 [style = dotted, label="true"];
22->0 [style = bold, label=""];
8->2 [style = bold, label=""];
3->7 [style = bold, label=""];
9->7 [style = solid, label="collectionName"];
15->14 [style = solid, label="collectionName"];
5->0 [style = bold, label=""];
18->1 [style = bold, label=""];
12->6 [style = dotted, label="true"];
3->8 [style = bold, label=""];
9->12 [style = solid, label="collectionName"];
12->14 [style = bold, label=""];
5->9 [style = dotted, label="true"];
4->1 [style = bold, label=""];
9->14 [style = solid, label="collectionName"];
21->12 [style = solid, label="collectionName"];
22->15 [style = dotted, label="true"];
2->11 [style = bold, label=""];
21->7 [style = solid, label="collectionName"];
13->18 [style = bold, label=""];
16->15 [style = dotted, label="true"];
13->4 [style = bold, label=""];
6->12 [style = bold, label=""];
}
