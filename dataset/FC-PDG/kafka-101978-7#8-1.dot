digraph {
49 [style = filled, label = "final AtomicBoolean closedDirtyTask01 = new AtomicBoolean(false)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final Task task01 = new StateMachineTask(taskId01,taskId01Partitions,true){@Override public Map<TopicPartition,Long> prepareCloseClean(){throw new TaskMigratedException(\"migrated\",new RuntimeException(\"cause\"))}}@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final AtomicBoolean closedDirtyTask02 = new AtomicBoolean(false)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertThat(task02.state(),is(Task.State.RUNNING))@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01),mkEntry(taskId02,task02))))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(task00.state(),is(Task.State.RESTORING))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions),mkEntry(taskId02,taskId02Partitions),mkEntry(taskId03,taskId03Partitions))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectLastCall()@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "taskManager.tryToCompleteRestoration()@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(prepareClosedDirtyTask02.get(),is(true))@@@89@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(closedDirtyTask01.get(),is(true))@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask03 = new AtomicBoolean(false)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask01 = new AtomicBoolean(false)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "taskManager.handleAssignment(assignment,emptyMap())@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "expect(changeLogReader.completedChangelogs()).andReturn(emptySet())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertThat(task00.state(),is(Task.State.CREATED))@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertThat(task00.state(),is(Task.State.CLOSED))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(task00.state(),is(Task.State.CLOSED))@@@93@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(closedDirtyTask02.get(),is(true))@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "replay(activeTaskCreator,standbyTaskCreator,changeLogReader)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "expectLastCall()@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "shouldCloseActiveTasksAndPropagateExceptionsOnCleanShutdown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
64 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever all\"))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(exception.getCause().getMessage(),is(\"oops\"))@@@98@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 0\"))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "activeTaskCreator.closeThreadProducerIfNeeded()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "final Task task00 = new StateMachineTask(taskId00,taskId00Partitions,true){@Override public Collection<TopicPartition> changelogPartitions(){return singletonList(changelog)}}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(task01.state(),is(Task.State.RUNNING))@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01),mkEntry(taskId02,task02),mkEntry(taskId03,task03))))@@@84@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "shouldCloseActiveTasksAndPropagateExceptionsOnCleanShutdown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 2\"))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 1\"))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.anEmptyMap())@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(closedDirtyTask03.get(),is(true))@@@92@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "expectLastCall()@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask02 = new AtomicBoolean(false)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(task02.state(),is(Task.State.CREATED))@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId01))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId02))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final Task task03 = new StateMachineTask(taskId03,taskId03Partitions,true){@Override public Map<TopicPartition,OffsetAndMetadata> committableOffsetsAndMetadata(){throw new RuntimeException(\"oops\")}@Override public void prepareCloseDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b82541prepareClosedDirtyTask03.set(true)}@Override public void closeDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b8254bclosedDirtyTask03.set(true)}}@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(task03.state(),is(Task.State.CLOSED))@@@96@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId00))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final RuntimeException exception = assertThrows(,null)@@@86@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@100@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "expectLastCall()@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "taskManager.shutdown(false)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions),mkEntry(taskId02,taskId02Partitions))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(asList(task00,task01,task02)).anyTimes()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "shouldCloseActiveTasksAndIgnoreExceptionsOnUncleanShutdown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(prepareClosedDirtyTask01.get(),is(true))@@@87@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(task01.state(),is(Task.State.CLOSED))@@@94@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "resetToStrict(changeLogReader)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final TopicPartition changelog = new TopicPartition(\"changelog\",0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "verify(activeTaskCreator,changeLogReader)@@@54@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "changeLogReader.remove(eq(singletonList(changelog)))@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(task01.state(),is(Task.State.CREATED))@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final AtomicBoolean closedDirtyTask03 = new AtomicBoolean(false)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertThat(task01.state(),is(Task.State.CLOSED))@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(task03.state(),is(Task.State.RUNNING))@@@83@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(task03.state(),is(Task.State.CREATED))@@@78@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId03))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "verify(activeTaskCreator,changeLogReader)@@@101@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "expectLastCall()@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final Task task02 = new StateMachineTask(taskId02,taskId02Partitions,true){@Override public Map<TopicPartition,Long> prepareCloseClean(){throw new RuntimeException(\"oops\")}}@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(task02.state(),is(Task.State.CLOSED))@@@95@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertThat(prepareClosedDirtyTask03.get(),is(true))@@@91@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "expectLastCall()@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.anEmptyMap())@@@99@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertThat(task02.state(),is(Task.State.CLOSED))@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(asList(task00,task01,task02,task03)).anyTimes()@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertThat(exception.getMessage(),is(\"Unexpected exception while closing task\"))@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68->35 [style = bold, label=""];
71->25 [style = bold, label=""];
19->6 [style = dashed, label="0"];
56->30 [style = bold, label=""];
67->31 [style = bold, label=""];
21->15 [style = bold, label=""];
24->32 [style = bold, label=""];
42->9 [style = bold, label=""];
48->35 [style = bold, label=""];
3->65 [style = bold, label=""];
7->52 [style = bold, label=""];
28->6 [style = solid, label="task01"];
25->63 [style = bold, label=""];
0->65 [style = dashed, label="0"];
53->36 [style = bold, label=""];
65->18 [style = bold, label=""];
50->5 [style = bold, label=""];
52->67 [style = bold, label=""];
45->22 [style = bold, label=""];
15->20 [style = bold, label=""];
37->48 [style = bold, label=""];
43->53 [style = bold, label=""];
72->73 [style = bold, label=""];
39->66 [style = dashed, label="0"];
26->28 [style = bold, label=""];
62->56 [style = bold, label=""];
63->43 [style = bold, label=""];
8->34 [style = bold, label=""];
23->25 [style = bold, label=""];
22->33 [style = bold, label=""];
47->6 [style = bold, label=""];
41->6 [style = solid, label="task02"];
59->60 [style = bold, label=""];
36->44 [style = bold, label=""];
4->21 [style = bold, label=""];
54->17 [style = bold, label=""];
44->49 [style = bold, label=""];
16->19 [style = bold, label=""];
31->66 [style = bold, label=""];
12->1 [style = bold, label=""];
25->2 [style = bold, label=""];
3->0 [style = bold, label=""];
35->57 [style = bold, label=""];
58->25 [style = bold, label=""];
48->64 [style = dashed, label="0"];
38->46 [style = bold, label=""];
73->64 [style = bold, label=""];
14->8 [style = bold, label=""];
14->72 [style = dashed, label="0"];
2->43 [style = bold, label=""];
11->26 [style = bold, label=""];
25->43 [style = solid, label="changelog"];
30->24 [style = bold, label=""];
54->7 [style = bold, label=""];
41->27 [style = bold, label=""];
61->69 [style = bold, label=""];
33->12 [style = bold, label=""];
55->10 [style = bold, label=""];
43->51 [style = solid, label="task00"];
28->41 [style = bold, label=""];
64->37 [style = bold, label=""];
25->7 [style = solid, label="changelog"];
60->61 [style = bold, label=""];
10->13 [style = bold, label=""];
41->40 [style = bold, label=""];
29->42 [style = bold, label=""];
5->4 [style = bold, label=""];
18->72 [style = bold, label=""];
0->18 [style = bold, label=""];
31->39 [style = bold, label=""];
1->29 [style = bold, label=""];
19->51 [style = bold, label=""];
49->11 [style = bold, label=""];
56->59 [style = bold, label=""];
27->51 [style = solid, label="task03"];
2->63 [style = dashed, label="0"];
32->45 [style = bold, label=""];
37->68 [style = bold, label=""];
40->54 [style = bold, label=""];
57->50 [style = bold, label=""];
17->31 [style = bold, label=""];
43->6 [style = solid, label="task00"];
70->62 [style = bold, label=""];
39->3 [style = bold, label=""];
51->56 [style = bold, label=""];
63->35 [style = solid, label="assignment"];
28->51 [style = solid, label="task01"];
52->17 [style = bold, label=""];
20->47 [style = bold, label=""];
17->67 [style = dashed, label="0"];
43->28 [style = bold, label=""];
9->55 [style = bold, label=""];
16->70 [style = bold, label=""];
2->50 [style = solid, label="assignment"];
21->20 [style = bold, label=""];
34->37 [style = bold, label=""];
6->16 [style = bold, label=""];
41->51 [style = solid, label="task02"];
13->38 [style = bold, label=""];
66->3 [style = bold, label=""];
27->40 [style = bold, label=""];
18->14 [style = bold, label=""];
}
