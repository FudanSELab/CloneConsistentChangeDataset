digraph {
5 [style = filled, label = "bb.flip()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "bb2.flip()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertFalse(ioBuffer.hasRemaining())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ByteBuffer bb = ByteBuffer.allocate(5)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals('2',ioBuffer.get())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(ioBuffer.hasRemaining())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals('1',ioBuffer.get())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals('0',ioBuffer.get())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "ioBuffer.get()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(0,ioBuffer.position())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(ioBuffer.hasRemaining())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "bb2.put(\"345\".getBytes())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(0,ioBuffer.position())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "IoBuffer ioBuffer = new IoBuffer(bb1,bb2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testGetOneBuffer3Bytes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "fail()@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "IoBuffer ioBuffer = new IoBuffer(bb)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertTrue(ioBuffer.hasRemaining())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "bb.put(\"012\".getBytes())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "IoBuffer ioBuffer = IoBuffer.wrap(bb)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "fail()@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(3,ioBuffer.limit())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testGetOneBuffer3Bytes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertTrue(ioBuffer.hasRemaining())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "ByteBuffer bb2 = ByteBuffer.allocate(5)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testGetTwoBuffer3Bytes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "bb1.flip()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals('4',ioBuffer.get())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(ioBuffer.hasRemaining())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals('5',ioBuffer.get())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(6,ioBuffer.limit())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertTrue(ioBuffer.hasRemaining())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "bb1.put(\"012\".getBytes())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertTrue(ioBuffer.hasRemaining())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "ByteBuffer bb1 = ByteBuffer.allocate(5)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals('3',ioBuffer.get())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(ioBuffer.hasRemaining())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
8->10 [style = bold, label=""];
3->1 [style = bold, label=""];
28->30 [style = bold, label=""];
7->12 [style = bold, label=""];
31->9 [style = bold, label=""];
11->16 [style = dashed, label="0"];
8->19 [style = bold, label=""];
19->29 [style = bold, label=""];
25->36 [style = bold, label=""];
27->28 [style = bold, label=""];
0->2 [style = bold, label=""];
18->33 [style = bold, label=""];
35->32 [style = bold, label=""];
14->11 [style = solid, label="bb"];
30->34 [style = bold, label=""];
9->8 [style = bold, label=""];
24->22 [style = bold, label=""];
23->0 [style = bold, label=""];
1->7 [style = bold, label=""];
14->33 [style = dashed, label="0"];
36->20 [style = bold, label=""];
33->26 [style = bold, label=""];
4->0 [style = bold, label=""];
21->12 [style = bold, label=""];
5->16 [style = bold, label=""];
14->16 [style = solid, label="bb"];
6->5 [style = bold, label=""];
26->27 [style = bold, label=""];
5->27 [style = dashed, label="0"];
12->4 [style = bold, label=""];
11->3 [style = bold, label=""];
17->14 [style = bold, label=""];
15->9 [style = bold, label=""];
15->31 [style = bold, label=""];
6->26 [style = dashed, label="0"];
2->15 [style = bold, label=""];
32->25 [style = bold, label=""];
28->21 [style = solid, label="bb2"];
5->11 [style = bold, label=""];
12->23 [style = bold, label=""];
29->24 [style = bold, label=""];
22->35 [style = bold, label=""];
1->23 [style = dashed, label="0"];
13->14 [style = bold, label=""];
14->6 [style = bold, label=""];
34->21 [style = bold, label=""];
33->21 [style = solid, label="bb1"];
}
