digraph {
3 [style = filled, label = "Schema newestSchema = MRCompactorAvroKeyDedupJobRunner.getNewestSchemaFromSource(job,this.fs)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "this.state.getPropAsBoolean(MRCompactorAvroKeyDedupJobRunner.COMPACTION_JOB_AVRO_SINGLE_INPUT_SCHEMA,true)@@@5@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "AvroJob.setMapOutputValueSchema(job,newestSchema)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "AvroJob.setInputKeySchema(job,newestSchema)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Job job@@@2@@@['1', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AvroJob.setMapOutputKeySchema(job,this.shouldDeduplicate? getKeySchema(job,newestSchema): newestSchema)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "newestSchema != null@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "this.useSingleInputSchema@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Job job@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "configureSchema['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "configureSchema['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Schema newestSchema = getNewestSchemaFromSource(job,this.fs)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "AvroJob.setOutputKeySchema(job,newestSchema)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "configureSchema['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "AvroJob.setInputKeySchema(job,newestSchema)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "AvroJob.setOutputKeySchema(job,newestSchema)@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8->11 [style = solid, label="job"];
12->0 [style = bold, label=""];
3->0 [style = solid, label="newestSchema"];
0->4 [style = bold, label=""];
3->4 [style = solid, label="newestSchema"];
8->7 [style = solid, label="job"];
2->8 [style = dotted, label="true"];
8->0 [style = solid, label="job"];
15->12 [style = bold, label=""];
9->3 [style = bold, label=""];
6->1 [style = dotted, label="true"];
14->12 [style = bold, label=""];
13->8 [style = dotted, label="true"];
3->11 [style = dashed, label="0"];
11->15 [style = bold, label=""];
11->4 [style = solid, label="newestSchema"];
5->7 [style = dotted, label="true"];
11->0 [style = solid, label="newestSchema"];
11->12 [style = solid, label="newestSchema"];
4->1 [style = bold, label=""];
9->10 [style = dotted, label="true"];
3->6 [style = bold, label=""];
2->3 [style = bold, label=""];
6->0 [style = dotted, label="true"];
6->5 [style = dotted, label="true"];
3->1 [style = solid, label="newestSchema"];
6->4 [style = dotted, label="true"];
5->0 [style = bold, label=""];
13->11 [style = bold, label=""];
10->7 [style = solid, label="job"];
10->3 [style = solid, label="job"];
15->14 [style = bold, label=""];
8->14 [style = solid, label="job"];
7->0 [style = bold, label=""];
8->3 [style = solid, label="job"];
6->5 [style = bold, label=""];
8->4 [style = solid, label="job"];
10->1 [style = solid, label="job"];
6->15 [style = dashed, label="0"];
8->10 [style = dashed, label="0"];
3->7 [style = solid, label="newestSchema"];
8->12 [style = solid, label="job"];
8->1 [style = solid, label="job"];
11->14 [style = solid, label="newestSchema"];
15->14 [style = dotted, label="true"];
10->0 [style = solid, label="job"];
3->6 [style = solid, label="newestSchema"];
5->7 [style = bold, label=""];
10->4 [style = solid, label="job"];
}
