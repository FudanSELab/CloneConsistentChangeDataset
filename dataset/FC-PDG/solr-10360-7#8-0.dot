digraph {
4 [style = filled, label = "String function = expression.getFunctionName()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "constructEvaluator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "classSupplier != null@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "StreamExpression expression@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "isEvaluator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "StreamExpression expression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return (org.apache.solr.client.solrj.io.eval.StreamEvaluator)createInstance(clazz,new Class((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@f61ff4,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@f61ff9)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "constructEvaluator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return false@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "return true@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Class<? extends Expressible> clazz = classSupplier.get()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = ".isAssignableFrom(clazz) && .isAssignableFrom(clazz)@@@7@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "StreamExpression expression@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "return createInstance(clazz.asSubclass(),new Class<?>((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@f6203d,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@f62042)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = ".isAssignableFrom(clazz)@@@7@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\",expression,expression.getFunctionName()))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13->16 [style = dotted, label="true"];
1->8 [style = bold, label=""];
8->10 [style = dashed, label="0"];
15->14 [style = bold, label=""];
0->6 [style = bold, label=""];
6->1 [style = solid, label="clazz"];
1->15 [style = bold, label=""];
11->4 [style = bold, label=""];
11->12 [style = dotted, label="true"];
12->7 [style = solid, label="expression"];
1->9 [style = dashed, label="0"];
2->0 [style = solid, label="classSupplier"];
4->2 [style = bold, label=""];
9->10 [style = bold, label=""];
5->3 [style = dotted, label="true"];
9->7 [style = bold, label=""];
0->6 [style = dotted, label="true"];
1->7 [style = bold, label=""];
10->7 [style = bold, label=""];
8->7 [style = bold, label=""];
3->7 [style = solid, label="expression"];
0->7 [style = bold, label=""];
6->1 [style = bold, label=""];
6->8 [style = solid, label="clazz"];
0->14 [style = bold, label=""];
2->0 [style = bold, label=""];
3->12 [style = dashed, label="0"];
4->2 [style = solid, label="function"];
1->15 [style = dotted, label="true"];
6->9 [style = solid, label="clazz"];
5->4 [style = bold, label=""];
1->8 [style = dotted, label="true"];
1->14 [style = bold, label=""];
3->8 [style = solid, label="expression"];
12->10 [style = solid, label="expression"];
6->9 [style = bold, label=""];
9->10 [style = dotted, label="true"];
0->9 [style = dotted, label="true"];
3->16 [style = dashed, label="0"];
0->1 [style = dotted, label="true"];
13->4 [style = bold, label=""];
}
