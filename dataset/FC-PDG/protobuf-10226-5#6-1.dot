digraph {
14 [style = filled, label = "assertFalse(outer.hasOneofNum())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(4,outer.getInner().getNested().getNumWithDefault())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(3,outer.getOneofInner().getNested().getNum())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "LazyNestedInnerMessageLite nested = LazyNestedInnerMessageLite.newBuilder().setNum(3).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(0,outer.getOneofInner().getNum())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(0,outer.getInner().getNested().getNum())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(outer.getNumWithDefault()).isEqualTo(421)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "LazyMessageLite outer = LazyMessageLite.newBuilder().setNum(1).setInner(inner).setOneofNum(123).setOneofInner(inner).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(1,outer.getNum())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertEquals(0,outer.getNum())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testGetDefaultValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(outer.getInner().getNested().getNumWithDefault()).isEqualTo(4)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "LazyInnerMessageLite inner = LazyInnerMessageLite.newBuilder().setNum(2).setNested(nested).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(outer.hasOneofInner())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "testSetValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(42,outer.getInner().getNumWithDefault())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(outer.getOneofInner().getNum()).isEqualTo(2)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertThat(outer.getInner().getNumWithDefault()).isEqualTo(42)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(outer.hasOneofInner()).isTrue()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "assertEquals(42,outer.getOneofInner().getNumWithDefault())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(0,outer.getOneofNum())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(outer.hasOneofNum()).isFalse()@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "assertEquals(4,outer.getOneofInner().getNested().getNumWithDefault())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testSetValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertEquals(4,outer.getOneofInner().getNested().getNumWithDefault())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertEquals(2,outer.getInner().getNum())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertThat(outer.getInner().getNum()).isEqualTo(2)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(outer.getInner().getNumWithDefault()).isEqualTo(42)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertEquals(0,outer.getInner().getNum())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(42,outer.getOneofInner().getNumWithDefault())@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "LazyMessageLite outer = LazyMessageLite.getDefaultInstance()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(outer.getInner().getNested().getNum()).isEqualTo(3)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "assertEquals(421,outer.getNumWithDefault())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(outer.getNum()).isEqualTo(1)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertThat(outer.getOneofInner().getNested().getNum()).isEqualTo(3)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(2,outer.getOneofInner().getNum())@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(outer.getInner().getNum()).isEqualTo(2)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertEquals(0,outer.getOneofInner().getNested().getNum())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(outer.getOneofInner().getNumWithDefault()).isEqualTo(42)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertThat(outer.getOneofInner().getNested().getNumWithDefault()).isEqualTo(4)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(3,outer.getInner().getNested().getNum())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14->3 [style = bold, label=""];
22->26 [style = bold, label=""];
35->31 [style = bold, label=""];
7->32 [style = bold, label=""];
12->33 [style = dashed, label="0"];
10->21 [style = dashed, label="0"];
14->37 [style = dashed, label="0"];
6->20 [style = dashed, label="0"];
3->7 [style = dashed, label="0"];
0->12 [style = bold, label=""];
9->4 [style = bold, label=""];
11->6 [style = bold, label=""];
30->27 [style = bold, label=""];
12->17 [style = dashed, label="0"];
11->37 [style = bold, label=""];
5->15 [style = bold, label=""];
29->25 [style = bold, label=""];
28->9 [style = bold, label=""];
17->30 [style = bold, label=""];
15->29 [style = dashed, label="0"];
19->17 [style = bold, label=""];
2->9 [style = bold, label=""];
16->23 [style = bold, label=""];
6->40 [style = dashed, label="0"];
5->18 [style = dashed, label="0"];
15->36 [style = dashed, label="0"];
21->18 [style = bold, label=""];
37->7 [style = bold, label=""];
32->33 [style = bold, label=""];
14->26 [style = dashed, label="0"];
20->22 [style = bold, label=""];
7->14 [style = bold, label=""];
26->16 [style = bold, label=""];
18->29 [style = bold, label=""];
25->20 [style = bold, label=""];
40->11 [style = bold, label=""];
10->5 [style = bold, label=""];
15->11 [style = bold, label=""];
12->8 [style = bold, label=""];
1->21 [style = bold, label=""];
23->19 [style = bold, label=""];
11->25 [style = dashed, label="0"];
3->13 [style = bold, label=""];
33->38 [style = bold, label=""];
27->24 [style = bold, label=""];
4->1 [style = bold, label=""];
36->5 [style = bold, label=""];
31->39 [style = bold, label=""];
34->35 [style = bold, label=""];
8->30 [style = dashed, label="0"];
5->40 [style = bold, label=""];
6->7 [style = bold, label=""];
1->10 [style = bold, label=""];
39->36 [style = bold, label=""];
7->22 [style = dashed, label="0"];
3->16 [style = dashed, label="0"];
13->0 [style = bold, label=""];
}
