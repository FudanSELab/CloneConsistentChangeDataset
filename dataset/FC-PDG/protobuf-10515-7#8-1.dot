digraph {
2 [style = filled, label = "fail(\"Should have thrown an exception.\")@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(classUnderTest + \" must capture the right bytes\",stillEqual)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertWithMessage(\"%s must have exhausted the iterator\",CLASSNAME).that(iter.hasNext()).isFalse()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "stillEqual && i < referenceBytes.length@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertWithMessage(\"%s must capture the right bytes\",CLASSNAME).that(stillEqual).isTrue()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testByteIterator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "stillEqual && i < BYTES.length@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "stillEqual = (iter.hasNext() && referenceBytes(i( == iter.nextByte())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertWithMessage(\"Should have thrown an exception.\").fail()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertFalse(classUnderTest + \" must have exhausted the iterator\",iter.hasNext())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "iter.nextByte()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "stillEqual = (iter.hasNext() && BYTES(i( == iter.nextByte())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testByteIterator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "++i@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ByteString.ByteIterator iter = testString.iterator()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(CLASSNAME + \" must capture the right bytes\",stillEqual)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "boolean stillEqual = true@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testByteIterator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int i = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ByteString.ByteIterator iter = stringUnderTest.iterator()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertFalse(CLASSNAME + \" must have exhausted the iterator\",iter.hasNext())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9->0 [style = solid, label="i"];
17->5 [style = bold, label=""];
3->17 [style = dashed, label="0"];
7->18 [style = dashed, label="0"];
6->18 [style = bold, label=""];
19->20 [style = dotted, label="true"];
19->20 [style = bold, label=""];
11->6 [style = bold, label=""];
1->19 [style = dashed, label="0"];
4->19 [style = bold, label=""];
10->12 [style = dashed, label="0"];
10->3 [style = bold, label=""];
20->19 [style = solid, label="stillEqual"];
8->6 [style = bold, label=""];
15->6 [style = bold, label=""];
0->1 [style = solid, label="stillEqual"];
1->0 [style = bold, label=""];
16->17 [style = bold, label=""];
6->16 [style = solid, label="stillEqual"];
1->4 [style = dotted, label="true"];
9->1 [style = solid, label="i"];
0->20 [style = dashed, label="0"];
6->10 [style = solid, label="stillEqual"];
20->4 [style = bold, label=""];
19->16 [style = bold, label=""];
7->9 [style = bold, label=""];
5->2 [style = bold, label=""];
3->5 [style = bold, label=""];
20->16 [style = solid, label="stillEqual"];
9->19 [style = solid, label="i"];
0->4 [style = bold, label=""];
19->4 [style = dotted, label="true"];
6->19 [style = solid, label="stillEqual"];
2->13 [style = dashed, label="0"];
5->13 [style = bold, label=""];
12->14 [style = bold, label=""];
18->9 [style = bold, label=""];
1->12 [style = bold, label=""];
9->19 [style = bold, label=""];
4->1 [style = bold, label=""];
9->20 [style = solid, label="i"];
1->0 [style = dotted, label="true"];
10->16 [style = dashed, label="0"];
0->10 [style = solid, label="stillEqual"];
3->14 [style = dashed, label="0"];
9->1 [style = bold, label=""];
6->7 [style = bold, label=""];
1->10 [style = bold, label=""];
6->1 [style = solid, label="stillEqual"];
14->5 [style = bold, label=""];
}
