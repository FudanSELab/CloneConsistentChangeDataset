digraph {
34 [style = filled, label = "ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\",Collections.emptyMap(),segments)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "LoadQueuePeonTester fromPeon = new LoadQueuePeonTester()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "int maxSegments@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "serverHolderList.add(new ServerHolder(druidServer,fromPeon))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.replay(druidServer)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "j++@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "List<DataSegment> segments = IntStream.range(0,maxSegments).mapToObj(null).collect(Collectors.toList())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "EasyMock.expect(druidServer.getMaxSize()).andReturn(100000000L).anyTimes()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "String serverName = \"DruidServer_Name_\" + i@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "LoadQueuePeonTester fromPeon = new LoadQueuePeonTester()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "j++@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Map<String,DataSegment> segments = new HashMap<>()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "setupDummyCluster['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Map<String,DataSegment> segments = new HashMap<>()@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "EasyMock.replay(druidServer)@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "int serverCount@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ImmutableDruidServer druidServer = EasyMock.createMock()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "j++@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "segments.put(segment.getIdentifier(),segment)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int j = 0@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "i < serverCount@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes()@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "setupDummyCluster['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "DataSegment segment = getSegment(j)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "segments.put(segment.getIdentifier(),segment)@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "serverHolderList.add(serverHolder)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "int maxSegments@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "ServerHolder serverHolder = new ServerHolder(new ImmutableDruidServer(new DruidServerMetadata(serverName,\"localhost\",null,10000000L,ServerType.HISTORICAL,\"hot\",1),3000L,ImmutableMap.of(\"DUMMY\",dataSource),segments.size()),fromPeon)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "DataSegment segment = getSegment(j)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "j < maxSegments@@@10@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int j = 0@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "return serverHolderList@@@34@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "int j = 0@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "serverHolderList.add(new ServerHolder(new ImmutableDruidServer(new DruidServerMetadata(\"DruidServer_Name_\" + i,\"localhost\",null,10000000L,ServerType.HISTORICAL,\"hot\",1),3000L,ImmutableMap.of(\"DUMMY\",EasyMock.createMock()),ImmutableMap.copyOf(segments)),fromPeon))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.expect(druidServer.getSegment(segment.getIdentifier())).andReturn(segment).anyTimes()@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "j < maxSegments@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes()@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "LoadQueuePeonTester fromPeon = new LoadQueuePeonTester()@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "int serverCount@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "setupDummyCluster['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "EasyMock.expect(druidServer.getSegments()).andReturn(segments.values()).anyTimes()@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "List<ServerHolder> serverHolderList = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->28 [style = bold, label=""];
7->27 [style = solid, label="j"];
31->15 [style = dotted, label="true"];
4->18 [style = solid, label="maxSegments"];
12->18 [style = solid, label="j"];
10->24 [style = bold, label=""];
21->8 [style = solid, label="i"];
6->36 [style = solid, label="i"];
10->39 [style = bold, label=""];
24->39 [style = dashed, label="0"];
31->28 [style = dotted, label="true"];
13->19 [style = solid, label="fromPeon"];
30->13 [style = bold, label=""];
30->39 [style = dotted, label="true"];
6->8 [style = solid, label="i"];
19->23 [style = bold, label=""];
45->27 [style = dotted, label="true"];
3->7 [style = bold, label=""];
43->42 [style = bold, label=""];
12->2 [style = solid, label="j"];
18->11 [style = dotted, label="true"];
7->31 [style = dotted, label="true"];
40->13 [style = bold, label=""];
2->18 [style = solid, label="j"];
22->14 [style = bold, label=""];
45->27 [style = bold, label=""];
7->31 [style = solid, label="j"];
13->26 [style = solid, label="druidServer"];
44->18 [style = solid, label="maxSegments"];
30->34 [style = dotted, label="true"];
46->44 [style = dotted, label="true"];
16->23 [style = solid, label="serverHolderList"];
14->47 [style = bold, label=""];
9->26 [style = bold, label=""];
47->20 [style = bold, label=""];
17->2 [style = bold, label=""];
28->31 [style = solid, label="j"];
28->45 [style = bold, label=""];
0->1 [style = dotted, label="true"];
10->33 [style = solid, label="fromPeon"];
21->6 [style = solid, label="i"];
30->10 [style = dotted, label="true"];
30->8 [style = dotted, label="true"];
41->7 [style = solid, label="j"];
21->36 [style = solid, label="i"];
31->27 [style = dotted, label="true"];
24->8 [style = solid, label="segments"];
11->17 [style = bold, label=""];
33->37 [style = bold, label=""];
26->19 [style = bold, label=""];
28->27 [style = bold, label=""];
46->16 [style = bold, label=""];
18->17 [style = dotted, label="true"];
30->18 [style = dotted, label="true"];
32->4 [style = dotted, label="true"];
12->18 [style = bold, label=""];
5->22 [style = bold, label=""];
5->26 [style = solid, label="druidServer"];
18->8 [style = bold, label=""];
42->26 [style = bold, label=""];
32->38 [style = dotted, label="true"];
1->30 [style = solid, label="serverCount"];
12->11 [style = solid, label="j"];
13->5 [style = bold, label=""];
29->35 [style = dashed, label="0"];
15->29 [style = bold, label=""];
3->20 [style = dashed, label="0"];
20->3 [style = bold, label=""];
4->30 [style = solid, label="serverCount"];
10->8 [style = solid, label="fromPeon"];
16->19 [style = solid, label="serverHolderList"];
35->31 [style = bold, label=""];
41->28 [style = solid, label="j"];
7->43 [style = bold, label=""];
44->45 [style = solid, label="maxSegments"];
30->33 [style = dotted, label="true"];
11->17 [style = solid, label="segment"];
38->7 [style = solid, label="maxSegments"];
21->30 [style = bold, label=""];
34->36 [style = bold, label=""];
45->29 [style = dotted, label="true"];
27->15 [style = bold, label=""];
8->6 [style = bold, label=""];
30->24 [style = dotted, label="true"];
7->27 [style = dotted, label="true"];
5->19 [style = solid, label="druidServer"];
2->33 [style = dashed, label="0"];
4->31 [style = solid, label="maxSegments"];
2->11 [style = solid, label="j"];
31->7 [style = solid, label="j"];
9->43 [style = dashed, label="0"];
39->34 [style = solid, label="segments"];
45->15 [style = dotted, label="true"];
34->33 [style = solid, label="dataSource"];
7->28 [style = dotted, label="true"];
7->31 [style = bold, label=""];
7->28 [style = solid, label="j"];
36->33 [style = solid, label="serverName"];
30->6 [style = dotted, label="true"];
28->45 [style = solid, label="j"];
7->45 [style = bold, label=""];
14->25 [style = bold, label=""];
36->33 [style = bold, label=""];
32->16 [style = bold, label=""];
24->12 [style = bold, label=""];
18->2 [style = dotted, label="true"];
31->45 [style = dashed, label="0"];
28->27 [style = solid, label="segment"];
15->27 [style = dashed, label="0"];
18->11 [style = bold, label=""];
6->30 [style = bold, label=""];
30->36 [style = dotted, label="true"];
31->28 [style = solid, label="j"];
7->35 [style = dotted, label="true"];
28->31 [style = bold, label=""];
28->27 [style = solid, label="j"];
41->31 [style = solid, label="j"];
39->34 [style = bold, label=""];
31->9 [style = bold, label=""];
25->20 [style = bold, label=""];
33->37 [style = solid, label="serverHolder"];
29->28 [style = bold, label=""];
45->9 [style = bold, label=""];
30->37 [style = dotted, label="true"];
30->10 [style = bold, label=""];
45->28 [style = dotted, label="true"];
27->35 [style = bold, label=""];
7->45 [style = solid, label="j"];
16->21 [style = bold, label=""];
25->47 [style = dashed, label="0"];
2->18 [style = bold, label=""];
46->4 [style = dotted, label="true"];
21->30 [style = solid, label="i"];
37->6 [style = bold, label=""];
41->7 [style = bold, label=""];
20->41 [style = bold, label=""];
31->29 [style = dotted, label="true"];
30->40 [style = bold, label=""];
27->15 [style = solid, label="segment"];
40->26 [style = solid, label="fromPeon"];
0->4 [style = dotted, label="true"];
30->12 [style = dotted, label="true"];
6->30 [style = solid, label="i"];
13->42 [style = solid, label="druidServer"];
31->27 [style = bold, label=""];
31->7 [style = bold, label=""];
0->16 [style = bold, label=""];
}
