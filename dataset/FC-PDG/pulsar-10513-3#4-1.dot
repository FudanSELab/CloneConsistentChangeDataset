digraph {
15 [style = filled, label = "this.pulsarConnectorConfig.setMaxSplitEntryQueueSize(10)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "return pulsarRecordCursor@@@83@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Topics topics = mock()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "doReturn(tenants).when(pulsarAdmin).tenants()@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final TopicName topicName@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "doReturn(schemas).when(pulsarAdmin).schemas()@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "this.pulsarMetadata = new PulsarMetadata(pulsarConnectorId,this.pulsarConnectorConfig,dispatchingRowDecoderFactory)@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "this.pulsarSplitManager = Mockito.spy(new PulsarSplitManager(pulsarConnectorId,this.pulsarConnectorConfig))@@@77@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(namespaces.getNamespaces(anyString())).thenAnswer(new Answer<List<String>>(){@Override public List<String> answer(InvocationOnMock invocation){Object(( args = invocation.getArguments()String tenant = (String)args(0(List<String> ns = getNamespace(tenant)if (ns.isEmpty()) {throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()))}return ns}})@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "mockKeyValueSchemaPulsarRecordCursor['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "when(schemas.getSchemaInfo(anyString())).thenAnswer(new Answer<SchemaInfo>(){@Override public SchemaInfo answer(InvocationOnMock invocationOnMock){Object(( args = invocationOnMock.getArguments()String topic = (String)args(0(if (topicsToSchemas.get(topic) != null) {return topicsToSchemas.get(topic)}{throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()))}}})@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Namespaces namespaces = mock()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "when(PulsarConnectorCache.instance.getManagedLedgerFactory()).thenReturn(managedLedgerFactory)@@@192@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "doReturn(pulsarAdmin).when(this.pulsarConnectorConfig).getPulsarAdmin()@@@75@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final Long entriesNum@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "final KeyValueSchema schema@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "when(managedLedgerFactory.openReadOnlyCursor(any(),any(),any())).then(new Answer<ReadOnlyCursor>(){@Override public ReadOnlyCursor answer(InvocationOnMock invocationOnMock){Object(( args = invocationOnMock.getArguments()String topic = (String)args(0(PositionImpl positionImpl = (PositionImpl)args(1(int position = positionImpl.getEntryId() == -1? 0: (int)positionImpl.getEntryId()positions.put(topic,position)ReadOnlyCursorImpl readOnlyCursor = mock()doReturn(entriesNum).when(readOnlyCursor).getNumberOfEntries()doAnswer(new Answer<Void>(){@Override public Void answer(InvocationOnMock invocation){Object(( args = invocation.getArguments()Integer skipEntries = (Integer)args(0(positions.put(topic,positions.get(topic) + skipEntries)return null}}).when(readOnlyCursor).skipEntries(anyInt())when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>(){@Override public PositionImpl answer(InvocationOnMock invocationOnMock){return PositionImpl.get(0,positions.get(topic))}})doAnswer(new Answer(){@Override public Object answer(InvocationOnMock invocationOnMock){Object(( args = invocationOnMock.getArguments()Integer readEntries = (Integer)args(0(AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback)args(1(Object ctx = args(2(new Thread(new Runnable(){@Override public void run(){List<Entry> entries = new LinkedList<>()for (int i = 0 i < readEntries i++){MessageMetadata messageMetadata = new MessageMetadata().setProducerName(\"test-producer\").setSequenceId(positions.get(topic)).setPublishTime(System.currentTimeMillis())if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {messageMetadata.setPartitionKey(new String(schema.getKeySchema().encode(message.getKey()),Charset.forName(\"UTF-8\"))).setPartitionKeyB64Encoded(false)}ByteBuf dataPayload = io.netty.buffer.Unpooled.copiedBuffer(schema.encode(message))ByteBuf byteBuf = serializeMetadataAndPayload(Commands.ChecksumType.Crc32c,messageMetadata,dataPayload)entries.add(EntryImpl.create(0,positions.get(topic),byteBuf))positions.put(topic,positions.get(topic) + 1)}callback.readEntriesComplete(entries,ctx)}}).start()return null}}).when(readOnlyCursor).asyncReadEntries(anyInt(),any(),any(),any())when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>(){@Override public Boolean answer(InvocationOnMock invocationOnMock){return positions.get(topic) < entriesNum}})when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>(){@Override public Long answer(InvocationOnMock invocationOnMock){Object(( args = invocationOnMock.getArguments()com.google.common.collect.Range<PositionImpl> range = (com.google.common.collect.Range<PositionImpl>)args(0(return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId()}})when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build())return readOnlyCursor}})@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "PulsarConnectorCache.instance = mock()@@@191@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "this.pulsarConnectorConfig.setMaxSplitMessageQueueSize(100)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "this.pulsarRecordCursors.put(split.getKey(),pulsarRecordCursor)@@@195@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Tenants tenants = mock()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "pulsarAdmin = mock()@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "this.pulsarConnectorConfig.setMaxEntryReadBatchSize(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "PulsarSqlSchemaInfoProvider pulsarSqlSchemaInfoProvider = mock()@@@80@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "pulsarRecordCursor.setPulsarSqlSchemaInfoProvider(pulsarSqlSchemaInfoProvider)@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "List<PulsarColumnHandle> ColumnHandles@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "this.pulsarConnectorConfig = spy(new PulsarConnectorConfig())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "doReturn(topics).when(pulsarAdmin).topics()@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PulsarSplit split = new PulsarSplit(0,pulsarConnectorId.toString(),topicName.getNamespace(),topicName.getLocalName(),topicName.getLocalName(),entriesNum,new String(schema.getSchemaInfo().getSchema()),schema.getSchemaInfo().getType(),0,entriesNum,0,0,TupleDomain.all(),objectMapper.writeValueAsString(schema.getSchemaInfo().getProperties()),null)@@@78@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(topics.getPartitionedTopicMetadata(anyString())).thenAnswer(new Answer<PartitionedTopicMetadata>(){@Override public PartitionedTopicMetadata answer(InvocationOnMock invocationOnMock){Object(( args = invocationOnMock.getArguments()String topic = (String)args(0(int partitions = partitionedTopicsToPartitions.get(topic) == null? 0: partitionedTopicsToPartitions.get(topic)return new PartitionedTopicMetadata(partitions)}})@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "ManagedLedgerFactory managedLedgerFactory = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "doReturn(namespaces).when(pulsarAdmin).namespaces()@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "KeyValue message@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "when(topics.getPartitionedTopicList(anyString())).thenAnswer(new Answer<List<String>>(){@Override public List<String> answer(InvocationOnMock invocationOnMock){Object(( args = invocationOnMock.getArguments()String ns = (String)args(0(List<String> topics = getPartitionedTopics(ns)if (topics.isEmpty()) {throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()))}return topics}})@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "setup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(ColumnHandles,split,pulsarConnectorConfig,managedLedgerFactory,new ManagedLedgerConfig(),new PulsarConnectorMetricsTracker(new NullStatsProvider()),dispatchingRowDecoderFactory))@@@79@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "when(pulsarSqlSchemaInfoProvider.getSchemaByVersion(any())).thenReturn(completedFuture(schema.getSchemaInfo()))@@@81@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "schemas = mock()@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "ObjectMapper objectMapper = new ObjectMapper()@@@77@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "when(topics.getList(anyString())).thenAnswer(new Answer<List<String>>(){@Override public List<String> answer(InvocationOnMock invocationOnMock){Object(( args = invocationOnMock.getArguments()String ns = (String)args(0(List<String> topics = getTopics(ns)if (topics.isEmpty()) {throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()))}return topics}})@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "setup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(topicsToColumnHandles.get(split.getKey()),split.getValue(),pulsarConnectorConfig,managedLedgerFactory,new ManagedLedgerConfig(),new PulsarConnectorMetricsTracker(new NullStatsProvider()),dispatchingRowDecoderFactory))@@@194@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "doReturn(new LinkedList<>(topicNames.stream().map(null).collect(Collectors.toSet()))).when(tenants).getTenants()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34->32 [style = dotted, label="true"];
24->12 [style = bold, label=""];
7->0 [style = solid, label="args"];
0->26 [style = bold, label=""];
9->28 [style = solid, label="split"];
28->39 [style = bold, label=""];
26->21 [style = solid, label="schemas"];
30->42 [style = bold, label=""];
33->35 [style = solid, label="entriesNum"];
1->3 [style = bold, label=""];
3->11 [style = bold, label=""];
10->14 [style = solid, label="pulsarConnectorConfig"];
19->10 [style = bold, label=""];
7->0 [style = bold, label=""];
9->24 [style = solid, label="managedLedgerFactory"];
16->23 [style = bold, label=""];
26->4 [style = bold, label=""];
10->6 [style = bold, label=""];
27->7 [style = solid, label="args"];
6->15 [style = bold, label=""];
34->38 [style = dotted, label="true"];
37->9 [style = bold, label=""];
25->23 [style = solid, label="namespaces"];
28->42 [style = solid, label="pulsarRecordCursor"];
5->16 [style = bold, label=""];
9->28 [style = bold, label=""];
10->12 [style = solid, label="pulsarConnectorConfig"];
28->2 [style = bold, label=""];
25->20 [style = bold, label=""];
20->8 [style = bold, label=""];
8->27 [style = solid, label="topics"];
0->4 [style = solid, label="args"];
20->27 [style = solid, label="args"];
35->37 [style = bold, label=""];
39->31 [style = bold, label=""];
3->16 [style = solid, label="tenants"];
22->12 [style = bold, label=""];
34->41 [style = dotted, label="true"];
34->36 [style = bold, label=""];
27->7 [style = bold, label=""];
4->28 [style = solid, label="args"];
31->30 [style = bold, label=""];
12->22 [style = solid, label="pulsarRecordCursor"];
18->9 [style = bold, label=""];
36->28 [style = solid, label="managedLedgerFactory"];
34->33 [style = dotted, label="true"];
29->10 [style = bold, label=""];
23->17 [style = bold, label=""];
14->18 [style = bold, label=""];
7->17 [style = solid, label="topics"];
38->28 [style = solid, label="ColumnHandles"];
39->30 [style = solid, label="pulsarSqlSchemaInfoProvider"];
9->12 [style = solid, label="managedLedgerFactory"];
2->24 [style = bold, label=""];
36->35 [style = bold, label=""];
8->27 [style = bold, label=""];
10->18 [style = solid, label="pulsarConnectorConfig"];
4->5 [style = bold, label=""];
17->21 [style = bold, label=""];
13->14 [style = bold, label=""];
12->22 [style = bold, label=""];
33->9 [style = solid, label="entriesNum"];
34->40 [style = dotted, label="true"];
11->25 [style = bold, label=""];
21->13 [style = bold, label=""];
15->1 [style = bold, label=""];
}
