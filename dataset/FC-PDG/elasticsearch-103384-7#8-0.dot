digraph {
4 [style = filled, label = "spanQB instanceof SpanGapQueryBuilder@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "SpanOrQueryBuilder queryBuilder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(query,either(instanceOf()).or(instanceOf()).or(instanceOf()))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "SpanNearQuery spanNearQuery = (SpanNearQuery)query@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "query instanceof SpanNearQuery@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "doAssertLuceneQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "doAssertLuceneQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(spanQuery,equalTo(spanQB.toQuery(context)))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "spanNearQuery.getClauses()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Query query@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(spanNearQuery.getClauses().length,equalTo(queryBuilder.clauses().size()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "query instanceof SpanTermQuery@@@16@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Query query@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "SpanNearQueryBuilder queryBuilder@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "SearchExecutionContext context@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(spanQuery,equalTo(spanQueryBuilderIterator.next().toQuery(context)))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(query,equalTo(queryBuilder.clauses().get(0).toQuery(context)))@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "SearchExecutionContext context@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "SpanQueryBuilder spanQB = spanQueryBuilderIterator.next()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "SpanQuery spanQuery@@@10@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "SpanOrQuery spanOrQuery = (SpanOrQuery)query@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(queryBuilder.clauses().size(),equalTo(1))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(spanNearQuery.isInOrder(),equalTo(queryBuilder.inOrder()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SearchExecutionContext context@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(query,either(instanceOf()).or(instanceOf()).or(instanceOf()).or(instanceOf()))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertThat(query,instanceOf())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "spanNearQuery.getClauses()@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(spanOrQuery.getClauses().length,equalTo(queryBuilder.clauses().size()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "doAssertLuceneQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(spanNearQuery.getSlop(),equalTo(queryBuilder.slop()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "query instanceof SpanTermQuery || query instanceof SpanBoostQuery@@@16@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Query query@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
11->7 [style = dotted, label="true"];
22->21 [style = dotted, label="true"];
10->18 [style = bold, label=""];
4->3 [style = bold, label=""];
11->20 [style = bold, label=""];
11->32 [style = dashed, label="0"];
22->23 [style = dotted, label="true"];
25->33 [style = bold, label=""];
7->10 [style = bold, label=""];
23->24 [style = solid, label="query"];
16->8 [style = solid, label="context"];
11->10 [style = dotted, label="true"];
3->33 [style = dashed, label="0"];
20->8 [style = dotted, label="true"];
23->11 [style = solid, label="query"];
17->9 [style = bold, label=""];
0->12 [style = bold, label=""];
26->25 [style = bold, label=""];
4->15 [style = bold, label=""];
12->11 [style = bold, label=""];
14->12 [style = solid, label="query"];
11->17 [style = dotted, label="true"];
27->33 [style = solid, label="context"];
18->17 [style = bold, label=""];
5->6 [style = dotted, label="true"];
11->9 [style = dotted, label="true"];
29->28 [style = solid, label="query"];
20->6 [style = bold, label=""];
14->8 [style = solid, label="query"];
11->13 [style = dotted, label="true"];
11->18 [style = dotted, label="true"];
11->4 [style = dotted, label="true"];
15->3 [style = bold, label=""];
14->5 [style = solid, label="query"];
29->32 [style = solid, label="query"];
3->4 [style = bold, label=""];
32->26 [style = bold, label=""];
5->20 [style = dashed, label="0"];
28->32 [style = bold, label=""];
23->8 [style = solid, label="query"];
16->15 [style = solid, label="context"];
31->30 [style = dotted, label="true"];
14->7 [style = solid, label="query"];
11->5 [style = bold, label=""];
11->20 [style = dotted, label="false"];
1->8 [style = solid, label="context"];
11->2 [style = dotted, label="true"];
14->11 [style = solid, label="query"];
3->4 [style = solid, label="spanQB"];
5->6 [style = bold, label=""];
16->30 [style = dashed, label="0"];
24->11 [style = bold, label=""];
1->15 [style = solid, label="context"];
22->16 [style = dotted, label="true"];
12->24 [style = dashed, label="0"];
6->8 [style = bold, label=""];
31->27 [style = dotted, label="true"];
9->3 [style = bold, label=""];
23->7 [style = solid, label="query"];
0->14 [style = dotted, label="true"];
11->5 [style = dotted, label="false"];
11->19 [style = dotted, label="true"];
0->16 [style = dotted, label="true"];
31->28 [style = bold, label=""];
22->24 [style = bold, label=""];
5->8 [style = dotted, label="true"];
31->29 [style = dotted, label="true"];
11->15 [style = dotted, label="true"];
11->3 [style = dotted, label="true"];
11->7 [style = bold, label=""];
20->6 [style = dotted, label="true"];
23->20 [style = solid, label="query"];
0->1 [style = dotted, label="true"];
}
