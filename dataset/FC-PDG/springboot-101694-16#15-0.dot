digraph {
25 [style = filled, label = "withProcessedImportsResolvesAndLoadsChainedImports['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(initialLocations),anyBoolean())).willReturn(initialImported)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.ROOT)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "withProcessedImportsProvidesLocationResolverContextWithAccessToParent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<ConfigDataLocation> secondLocations = Arrays.asList(LOCATION_2)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Map<ConfigDataResolutionResult,ConfigData> initialImported = new LinkedHashMap<>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "verify(this.importer).resolveAndLoad(any(),this.locationResolverContext.capture(),any(),eq(secondLocations),anyBoolean())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(context.getParent()).hasToString(\"a\")@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "withProcessedImportsProvidesLocationResolverContextWithAccessToParent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "ConfigDataLocationResolverContext context = this.locationResolverContext.getValue()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "initialImported.put(new ConfigDataResolutionResult(LOCATION_1,new TestConfigDataResource(\"a\"),false),new ConfigData(Arrays.asList(initialPropertySource)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(secondPropertySource)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<ConfigDataLocation> initialLocations = Arrays.asList(LOCATION_1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "verify(this.importer).resolveAndLoad(any(),this.locationResolverContext.capture(),any(),eq(secondLocations))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "this.importer = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(initialLocations))).willReturn(initialImported)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(initialPropertySource)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.INITIAL_IMPORT)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Iterator<ConfigDataEnvironmentContributor> iterator = withProcessedImports.iterator()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "contributors.withProcessedImports(this.importer,this.activationContext)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Map<ConfigDataResolutionResult,ConfigData> secondImported = new LinkedHashMap<>()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(secondLocations))).willReturn(secondImported)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "initialPropertySource.setProperty(\"spring.config.import\",\"location2\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(secondLocations),anyBoolean())).willReturn(secondImported)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,this.bootstrapContext,Arrays.asList(contributor))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "MockPropertySource initialPropertySource = new MockPropertySource()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(iterator.hasNext()).isFalse()@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "secondImported.put(new ConfigDataResolutionResult(LOCATION_2,new TestConfigDataResource(\"b\"),false),new ConfigData(Arrays.asList(secondPropertySource)))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "MockPropertySource secondPropertySource = new MockPropertySource()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ConfigDataEnvironmentContributors withProcessedImports = contributors.withProcessedImports(this.importer,this.activationContext)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
2->17 [style = bold, label=""];
1->5 [style = solid, label="importer"];
18->13 [style = solid, label="initialImported"];
0->9 [style = bold, label=""];
16->18 [style = bold, label=""];
4->24 [style = bold, label=""];
25->1 [style = bold, label=""];
9->11 [style = bold, label=""];
2->19 [style = solid, label="secondImported"];
12->30 [style = solid, label="initialPropertySource"];
27->30 [style = bold, label=""];
22->9 [style = bold, label=""];
30->23 [style = bold, label=""];
5->24 [style = dashed, label="0"];
14->10 [style = bold, label=""];
10->27 [style = solid, label="secondPropertySource"];
3->15 [style = bold, label=""];
12->16 [style = bold, label=""];
1->24 [style = solid, label="importer"];
20->1 [style = bold, label=""];
14->0 [style = solid, label="secondLocations"];
14->22 [style = solid, label="secondLocations"];
0->22 [style = dashed, label="0"];
17->19 [style = bold, label=""];
3->19 [style = dashed, label="0"];
29->28 [style = bold, label=""];
23->29 [style = bold, label=""];
8->1 [style = bold, label=""];
24->26 [style = bold, label=""];
26->27 [style = bold, label=""];
1->6 [style = bold, label=""];
13->21 [style = dashed, label="0"];
5->0 [style = bold, label=""];
15->4 [style = bold, label=""];
17->3 [style = bold, label=""];
7->21 [style = bold, label=""];
10->2 [style = bold, label=""];
12->7 [style = solid, label="initialPropertySource"];
19->15 [style = bold, label=""];
18->7 [style = bold, label=""];
11->30 [style = dashed, label="0"];
15->4 [style = solid, label="contributor"];
18->21 [style = solid, label="initialImported"];
5->22 [style = bold, label=""];
13->14 [style = bold, label=""];
4->5 [style = bold, label=""];
10->17 [style = solid, label="secondPropertySource"];
2->3 [style = solid, label="secondImported"];
21->14 [style = bold, label=""];
6->12 [style = bold, label=""];
}
