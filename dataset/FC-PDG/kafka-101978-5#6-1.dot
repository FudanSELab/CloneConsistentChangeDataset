digraph {
8 [style = filled, label = "assertThat(task02.state(),is(Task.State.CREATED))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expectLastCall()@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.anEmptyMap())@@@101@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId00))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "resetToStrict(changeLogReader)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId03))@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "replay(activeTaskCreator,standbyTaskCreator,changeLogReader)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(task02.state(),is(Task.State.CLOSED))@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "shouldCloseActiveTasksAndIgnoreExceptionsOnUncleanShutdown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "final AtomicBoolean closedDirtyTask03 = new AtomicBoolean(false)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "assertThat(task00.state(),is(Task.State.CLOSED))@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final Task task02 = new StateMachineTask(taskId02,taskId02Partitions,true){@Override public Map<TopicPartition,Long> prepareCloseClean(){throw new RuntimeException(\"oops\")}}@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectLastCall()@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(task03.state(),is(Task.State.CREATED))@@@80@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Task task01 = new StateMachineTask(taskId01,taskId01Partitions,true){@Override public Map<TopicPartition,Long> prepareCloseClean(){throw new TaskMigratedException(\"migrated\",new RuntimeException(\"cause\"))}}@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(prepareClosedDirtyTask01.get(),is(true))@@@89@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertThat(closedDirtyTask03.get(),is(true))@@@94@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(task01.state(),is(Task.State.CLOSED))@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertThat(task01.state(),is(Task.State.CLOSED))@@@96@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "taskManager.shutdown(false)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "taskManager.tryToCompleteRestoration()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final AtomicBoolean closedDirtyTask02 = new AtomicBoolean(false)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "shouldCloseActiveTasksAndPropagateExceptionsOnCleanShutdown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "expectLastCall()@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(asList(task00,task01,task02)).anyTimes()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask03 = new AtomicBoolean(false)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expectLastCall()@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertThat(task00.state(),is(Task.State.RESTORING))@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 2\"))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(task03.state(),is(Task.State.RUNNING))@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever all\"))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask01 = new AtomicBoolean(false)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "changeLogReader.remove(eq(singletonList(changelog)))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 0\"))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.anEmptyMap())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "expectLastCall()@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01),mkEntry(taskId02,task02))))@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(exception.getCause().getMessage(),is(\"oops\"))@@@100@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expectLastCall()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(closedDirtyTask02.get(),is(true))@@@92@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 1\"))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions),mkEntry(taskId02,taskId02Partitions),mkEntry(taskId03,taskId03Partitions))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId01))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01),mkEntry(taskId02,task02),mkEntry(taskId03,task03))))@@@86@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expect(changeLogReader.completedChangelogs()).andReturn(emptySet())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "verify(activeTaskCreator,changeLogReader)@@@103@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertThat(task01.state(),is(Task.State.RUNNING))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "verify(activeTaskCreator,changeLogReader)@@@56@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertThat(closedDirtyTask01.get(),is(true))@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertThat(task00.state(),is(Task.State.CREATED))@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(prepareClosedDirtyTask02.get(),is(true))@@@91@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(prepareClosedDirtyTask03.get(),is(true))@@@93@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "taskManager.handleAssignment(assignment,emptyMap())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@102@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions),mkEntry(taskId02,taskId02Partitions))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId02))@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "final Task task03 = new StateMachineTask(taskId03,taskId03Partitions,true){@Override public Map<TopicPartition,OffsetAndMetadata> committableOffsetsAndMetadata(){throw new RuntimeException(\"oops\")}@Override public void prepareCloseDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b81d3dprepareClosedDirtyTask03.set(true)}@Override public void closeDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b81d47closedDirtyTask03.set(true)}}@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "changeLogReader.transitToRestoreActive()@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "activeTaskCreator.closeThreadProducerIfNeeded()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertThat(task02.state(),is(Task.State.RUNNING))@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final AtomicBoolean closedDirtyTask01 = new AtomicBoolean(false)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertThat(exception.getMessage(),is(\"Unexpected exception while closing task\"))@@@99@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "expectLastCall()@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask02 = new AtomicBoolean(false)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final Task task00 = new StateMachineTask(taskId00,taskId00Partitions,true){@Override public Collection<TopicPartition> changelogPartitions(){return singletonList(changelog)}}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "assertThat(task02.state(),is(Task.State.CLOSED))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(asList(task00,task01,task02,task03)).anyTimes()@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final RuntimeException exception = assertThrows(,null)@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final TopicPartition changelog = new TopicPartition(\"changelog\",0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertThat(task00.state(),is(Task.State.CLOSED))@@@95@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "shouldCloseActiveTasksAndPropagateExceptionsOnCleanShutdown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(task03.state(),is(Task.State.CLOSED))@@@98@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(task01.state(),is(Task.State.CREATED))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->13 [style = bold, label=""];
40->25 [style = solid, label="task03"];
2->6 [style = bold, label=""];
36->34 [style = solid, label="assignment"];
5->15 [style = bold, label=""];
19->11 [style = bold, label=""];
67->69 [style = bold, label=""];
21->58 [style = solid, label="changelog"];
35->23 [style = bold, label=""];
63->66 [style = bold, label=""];
36->0 [style = bold, label=""];
21->36 [style = bold, label=""];
20->16 [style = bold, label=""];
52->14 [style = bold, label=""];
65->16 [style = bold, label=""];
53->34 [style = bold, label=""];
70->32 [style = bold, label=""];
3->39 [style = bold, label=""];
22->71 [style = bold, label=""];
11->46 [style = dashed, label="0"];
13->22 [style = bold, label=""];
10->57 [style = bold, label=""];
64->1 [style = bold, label=""];
24->74 [style = dashed, label="0"];
11->25 [style = bold, label=""];
0->25 [style = solid, label="task00"];
0->46 [style = solid, label="task00"];
28->37 [style = bold, label=""];
36->62 [style = dashed, label="0"];
32->68 [style = bold, label=""];
60->21 [style = bold, label=""];
30->27 [style = bold, label=""];
19->73 [style = bold, label=""];
58->2 [style = bold, label=""];
44->50 [style = bold, label=""];
9->17 [style = bold, label=""];
24->38 [style = bold, label=""];
34->8 [style = bold, label=""];
62->0 [style = bold, label=""];
21->0 [style = solid, label="changelog"];
0->7 [style = bold, label=""];
71->55 [style = bold, label=""];
15->46 [style = solid, label="task02"];
31->69 [style = dashed, label="0"];
18->4 [style = bold, label=""];
39->35 [style = bold, label=""];
38->65 [style = bold, label=""];
49->41 [style = bold, label=""];
15->25 [style = solid, label="task02"];
74->38 [style = bold, label=""];
46->19 [style = bold, label=""];
72->21 [style = bold, label=""];
61->63 [style = bold, label=""];
52->54 [style = bold, label=""];
1->74 [style = bold, label=""];
38->20 [style = bold, label=""];
6->64 [style = dashed, label="0"];
51->9 [style = bold, label=""];
42->47 [style = bold, label=""];
69->22 [style = bold, label=""];
21->62 [style = bold, label=""];
2->64 [style = bold, label=""];
8->59 [style = bold, label=""];
73->70 [style = bold, label=""];
48->46 [style = bold, label=""];
6->1 [style = bold, label=""];
30->75 [style = dashed, label="0"];
17->12 [style = bold, label=""];
7->28 [style = bold, label=""];
43->5 [style = bold, label=""];
12->56 [style = bold, label=""];
16->30 [style = bold, label=""];
32->44 [style = bold, label=""];
29->10 [style = bold, label=""];
15->40 [style = bold, label=""];
47->45 [style = bold, label=""];
5->46 [style = solid, label="task01"];
75->67 [style = bold, label=""];
0->5 [style = bold, label=""];
42->26 [style = bold, label=""];
26->58 [style = bold, label=""];
4->43 [style = bold, label=""];
56->49 [style = bold, label=""];
16->75 [style = bold, label=""];
41->29 [style = bold, label=""];
59->52 [style = bold, label=""];
25->32 [style = bold, label=""];
22->31 [style = bold, label=""];
54->48 [style = bold, label=""];
5->25 [style = solid, label="task01"];
14->54 [style = bold, label=""];
62->55 [style = solid, label="assignment"];
15->42 [style = bold, label=""];
1->24 [style = bold, label=""];
31->55 [style = bold, label=""];
50->51 [style = bold, label=""];
55->53 [style = bold, label=""];
37->18 [style = bold, label=""];
68->61 [style = bold, label=""];
45->26 [style = bold, label=""];
20->65 [style = dashed, label="0"];
57->3 [style = bold, label=""];
33->21 [style = bold, label=""];
40->42 [style = bold, label=""];
}
