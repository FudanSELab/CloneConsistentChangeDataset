digraph {
18 [style = filled, label = "when(someProperties.getProperty(anotherKey)).thenReturn(String.valueOf(anotherValue))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "verify(someProperties,times(1)).getProperty(someKey)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testGetIntPropertyMultipleTimesWithShortExpireTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "defineComponent(,)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "defineComponent(,)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "verify(someProperties,times(1)).getProperty(anotherKey)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Integer someDefaultValue = -1@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String someKey = \"someKey\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String anotherKey = \"anotherKey\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "when(someProperties.getProperty(someKey)).thenReturn(String.valueOf(someValue))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Integer anotherValue = 3@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "verify(someProperties,times(2)).getProperty(someKey)@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Integer someValue = 2@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "MockInjector.setInstance(,new MockConfigUtilWithSmallCache())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "TimeUnit.MILLISECONDS.sleep(50)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "someProperties = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verify(someProperties,times(2)).getProperty(someKey)@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11->17 [style = solid, label="someKey"];
12->17 [style = solid, label="someDefaultValue"];
10->21 [style = dashed, label="0"];
16->19 [style = solid, label="someProperties"];
16->8 [style = bold, label=""];
0->17 [style = solid, label="someValue"];
0->6 [style = bold, label=""];
9->2 [style = bold, label=""];
12->21 [style = bold, label=""];
8->18 [style = bold, label=""];
2->1 [style = bold, label=""];
8->19 [style = bold, label=""];
25->23 [style = bold, label=""];
0->12 [style = bold, label=""];
12->2 [style = solid, label="someDefaultValue"];
0->24 [style = solid, label="someValue"];
0->2 [style = solid, label="someValue"];
11->24 [style = solid, label="someKey"];
18->19 [style = bold, label=""];
3->11 [style = bold, label=""];
5->15 [style = bold, label=""];
12->26 [style = bold, label=""];
1->7 [style = bold, label=""];
11->23 [style = solid, label="someKey"];
0->23 [style = solid, label="someValue"];
4->18 [style = solid, label="anotherValue"];
26->16 [style = bold, label=""];
6->4 [style = bold, label=""];
15->17 [style = bold, label=""];
7->5 [style = bold, label=""];
11->0 [style = bold, label=""];
12->10 [style = bold, label=""];
23->24 [style = bold, label=""];
4->5 [style = solid, label="anotherValue"];
19->14 [style = bold, label=""];
12->5 [style = solid, label="someDefaultValue"];
10->16 [style = bold, label=""];
12->24 [style = solid, label="someDefaultValue"];
10->26 [style = dashed, label="0"];
4->7 [style = solid, label="anotherValue"];
6->15 [style = solid, label="anotherKey"];
11->2 [style = solid, label="someKey"];
0->9 [style = solid, label="someValue"];
24->17 [style = bold, label=""];
21->16 [style = bold, label=""];
4->12 [style = bold, label=""];
11->9 [style = solid, label="someKey"];
12->9 [style = solid, label="someDefaultValue"];
14->9 [style = bold, label=""];
17->13 [style = bold, label=""];
11->1 [style = solid, label="someKey"];
0->8 [style = solid, label="someValue"];
6->5 [style = solid, label="anotherKey"];
1->25 [style = bold, label=""];
12->7 [style = solid, label="someDefaultValue"];
22->11 [style = bold, label=""];
6->7 [style = solid, label="anotherKey"];
12->23 [style = solid, label="someDefaultValue"];
20->11 [style = bold, label=""];
11->13 [style = solid, label="someKey"];
}
