digraph {
10 [style = filled, label = "expect(task2.state()).andReturn(Task.State.RUNNING).anyTimes()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Set<TaskId> corruptedTasks = singleton(taskId1)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics,CLIENT_ID,StreamsConfig.METRICS_LATEST,mockTime)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Task task1 = mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final ConsumerGroupMetadata consumerGroupMetadata = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "consumer.unsubscribe()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expect(task1.state()).andStubReturn(Task.State.RUNNING)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final AtomicBoolean exceptionHandlerInvoked = new AtomicBoolean(false)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertThat(exceptionHandlerInvoked.get(),is(true))@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "EasyMock.replay(task1,task2,taskManager,consumer)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expect(task1.state()).andReturn(Task.State.RUNNING).anyTimes()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(taskManager)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final StreamThread thread = new StreamThread(mockTime,config,null,consumer,consumer,null,null,taskManager,streamsMetrics,internalTopologyBuilder,CLIENT_ID,new LogContext(\"\"),new AtomicInteger(),new AtomicLong(Long.MAX_VALUE),null,HANDLER,null){@Override void runOnce(){setState(State.PENDING_SHUTDOWN)throw new TaskCorruptedException(corruptedTasks)}}.updateThreadMetadata(getSharedAdminClientId(CLIENT_ID))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "expect(task2.id()).andStubReturn(taskId2)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "thread.setStreamsUncaughtExceptionHandler(null)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final TaskId taskId1 = new TaskId(0,0)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expect(task2.id()).andReturn(taskId2).anyTimes()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "consumer.subscribe((Collection<String>)anyObject(),anyObject())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Consumer<byte((,byte((> consumer = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expect(task1.id()).andReturn(taskId1).anyTimes()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "shouldCatchHandleCorruptionOnTaskCorruptedExceptionPath['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "final Task task2 = mock()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.replay(consumerGroupMetadata)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "expect(task2.state()).andStubReturn(Task.State.RUNNING)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "thread.run()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "taskManager.handleCorruption(corruptedTasks)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "shouldCatchHandleCorruptionOnTaskCorruptedExceptionPath['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final TaskId taskId2 = new TaskId(0,2)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "shouldCatchTimeoutExceptionFromHandleCorruptionAndInvokeExceptionHandler['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "expect(task1.id()).andStubReturn(taskId1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final TaskManager taskManager = EasyMock.createNiceMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expectLastCall().andThrow(new TimeoutException())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36->6 [style = bold, label=""];
15->10 [style = bold, label=""];
16->38 [style = dashed, label="0"];
6->26 [style = bold, label=""];
14->30 [style = bold, label=""];
8->32 [style = bold, label=""];
37->11 [style = bold, label=""];
22->19 [style = bold, label=""];
6->8 [style = solid, label="taskManager"];
25->13 [style = bold, label=""];
26->5 [style = bold, label=""];
10->34 [style = dashed, label="0"];
0->35 [style = solid, label="consumerGroupMetadata"];
4->15 [style = bold, label=""];
28->7 [style = bold, label=""];
0->11 [style = bold, label=""];
2->14 [style = solid, label="corruptedTasks"];
9->17 [style = bold, label=""];
15->29 [style = dashed, label="0"];
21->25 [style = bold, label=""];
29->34 [style = bold, label=""];
17->22 [style = bold, label=""];
7->8 [style = bold, label=""];
12->1 [style = bold, label=""];
2->4 [style = bold, label=""];
4->33 [style = dashed, label="0"];
27->6 [style = bold, label=""];
38->14 [style = bold, label=""];
33->29 [style = bold, label=""];
20->21 [style = bold, label=""];
19->2 [style = solid, label="taskId1"];
6->5 [style = bold, label=""];
5->12 [style = solid, label="consumer"];
3->20 [style = bold, label=""];
21->9 [style = bold, label=""];
30->12 [style = bold, label=""];
23->38 [style = solid, label="taskId2"];
10->16 [style = bold, label=""];
5->0 [style = bold, label=""];
24->31 [style = bold, label=""];
11->3 [style = bold, label=""];
18->6 [style = bold, label=""];
35->37 [style = bold, label=""];
1->24 [style = bold, label=""];
22->12 [style = solid, label="task2"];
19->23 [style = bold, label=""];
14->12 [style = bold, label=""];
0->25 [style = solid, label="consumerGroupMetadata"];
0->35 [style = bold, label=""];
2->33 [style = bold, label=""];
16->14 [style = bold, label=""];
13->9 [style = bold, label=""];
23->2 [style = bold, label=""];
34->38 [style = bold, label=""];
31->28 [style = bold, label=""];
6->12 [style = solid, label="taskManager"];
17->12 [style = solid, label="task1"];
24->7 [style = bold, label=""];
0->9 [style = solid, label="consumerGroupMetadata"];
19->29 [style = solid, label="taskId1"];
}
