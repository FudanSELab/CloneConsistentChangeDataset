digraph {
16 [style = filled, label = "when(operatorStateStore.getUnionListState(Matchers.any())).thenReturn(listState)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "shards.add(new StreamShardHandle(\"fakeStream2\",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "listState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(state.getKey()),state.getValue()))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Mockito.verify(mockedFetcher).registerNewSubscribedShardState(new KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(restoredShard.getKey()),restoredShard.getKey(),restoredShard.getValue()))@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "consumer.open(new Configuration())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "OperatorStateStore operatorStateStore = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "PowerMockito.doNothing().when()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "consumer.run(Mockito.mock())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PowerMockito.mockStatic()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\"fakeStream\",new Properties(),10,2)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "PowerMockito.whenNew().withAnyArguments().thenReturn(mockedFetcher)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "KinesisDataFetcher mockedFetcher = mockKinesisDataFetcher()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "when(initializationContext.isRestored()).thenReturn(true)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "StateInitializationContext initializationContext = mock()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "HashMap<StreamShardHandle,SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<StreamShardHandle> shards = new ArrayList<>()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestingListState<Tuple2<StreamShardMetadata,SequenceNumber>> listState = new TestingListState<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "KinesisDataFetcher mockedFetcher = Mockito.mock()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "shards.addAll(fakeRestoredState.keySet())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "fakeRestoredState.put(new StreamShardHandle(\"fakeStream2\",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))),SentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "consumer.initializeState(initializationContext)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
17->10 [style = bold, label=""];
0->9 [style = bold, label=""];
25->1 [style = bold, label=""];
5->23 [style = bold, label=""];
7->18 [style = solid, label="mockedFetcher"];
15->25 [style = bold, label=""];
8->19 [style = bold, label=""];
2->16 [style = solid, label="listState"];
12->11 [style = bold, label=""];
20->3 [style = bold, label=""];
7->4 [style = bold, label=""];
23->0 [style = bold, label=""];
22->4 [style = bold, label=""];
4->0 [style = solid, label="shards"];
14->8 [style = solid, label="initializationContext"];
10->16 [style = bold, label=""];
3->2 [style = bold, label=""];
5->0 [style = bold, label=""];
10->12 [style = solid, label="operatorStateStore"];
14->12 [style = bold, label=""];
6->8 [style = bold, label=""];
18->9 [style = bold, label=""];
11->22 [style = bold, label=""];
16->14 [style = bold, label=""];
0->18 [style = bold, label=""];
13->6 [style = bold, label=""];
19->15 [style = bold, label=""];
4->5 [style = bold, label=""];
24->3 [style = bold, label=""];
7->22 [style = dashed, label="0"];
11->7 [style = bold, label=""];
21->3 [style = bold, label=""];
9->13 [style = bold, label=""];
15->1 [style = bold, label=""];
}
