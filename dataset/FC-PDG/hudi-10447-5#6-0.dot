digraph {
12 [style = filled, label = "final List<MergeOnReadInputSplit> inputSplits = buildFileIndex()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "return mergeOnReadInputFormat(rowType,requiredRowType,tableAvroSchema,rowDataType,result.getInputSplits(),false)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final RowType rowType = (RowType)rowDataType.getLogicalType()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "return InputFormats.EMPTY_INPUT_FORMAT@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final IncrementalInputSplits.Result result = incrementalInputSplits.inputSplits(metaClient,hadoopConf)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final RowType requiredRowType = (RowType)getProducedDataType().notNull().getLogicalType()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "IncrementalInputSplits incrementalInputSplits = IncrementalInputSplits.builder().conf(conf).path(FilePathUtils.toFlinkPath(path)).maxCompactionMemoryInBytes(maxCompactionMemoryInBytes).requiredPartitions(getRequiredPartitionPaths()).build()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "FlinkOptions.QUERY_TYPE_SNAPSHOT.equals(queryType)@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "String errMsg = String.format(\"Invalid query type : '%s', options ('%s'( are supported now\",queryType,FlinkOptions.QUERY_TYPE_SNAPSHOT)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "return InputFormats.EMPTY_INPUT_FORMAT@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "String errMsg = String.format(\"Invalid query type : '%s', options ('%s', '%s', '%s'( are supported now\",queryType,FlinkOptions.QUERY_TYPE_SNAPSHOT,FlinkOptions.QUERY_TYPE_READ_OPTIMIZED,FlinkOptions.QUERY_TYPE_INCREMENTAL)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "tableType@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "return new CollectionInputFormat<>(Collections.emptyList(),null)@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "throw new HoodieException(\"Unexpected table type: \" + this.conf.getString(FlinkOptions.TABLE_TYPE))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "result.isEmpty()@@@23@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "queryType@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final DataType rowDataType = AvroSchemaConverter.convertToDataType(tableAvroSchema)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final Schema tableAvroSchema = getTableAvroSchema()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "getBatchInputFormat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final HoodieTableType tableType = HoodieTableType.valueOf(this.conf.getString(FlinkOptions.TABLE_TYPE))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "throw new HoodieException(errMsg)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Schema tableAvroSchema = this.metaClient == null? inferSchemaFromDdl(): getTableAvroSchema()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "getBatchInputFormat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "LOG.warn(\"No input splits generate for MERGE_ON_READ input format, returns empty collection instead\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return baseFileOnlyInputFormat()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "getStreamInputFormat['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "throw new HoodieException(errMsg)@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return baseFileOnlyInputFormat()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final String queryType = this.conf.getString(FlinkOptions.QUERY_TYPE)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final HoodieTableType tableType = HoodieTableType.valueOf(this.conf.getString(FlinkOptions.TABLE_TYPE))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "inputSplits.size() == 0@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return EMPTY_INPUT_FORMAT@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "boolean emitDelete = tableType == HoodieTableType.MERGE_ON_READ@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "return mergeOnReadInputFormat(rowType,requiredRowType,tableAvroSchema,rowDataType,inputSplits,false)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "LOG.warn(\"No input splits generate for incremental read, returns empty collection instead\")@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "return mergeOnReadInputFormat(rowType,requiredRowType,tableAvroSchema,rowDataType,Collections.emptyList(),emitDelete)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->10 [style = bold, label=""];
22->15 [style = bold, label=""];
21->8 [style = dotted, label="true"];
21->8 [style = bold, label=""];
1->20 [style = bold, label=""];
29->34 [style = bold, label=""];
26->11 [style = bold, label=""];
14->26 [style = dashed, label="0"];
22->14 [style = dotted, label="true"];
32->33 [style = solid, label="errMsg"];
21->2 [style = bold, label=""];
3->18 [style = bold, label=""];
5->21 [style = solid, label="queryType"];
28->0 [style = bold, label=""];
0->11 [style = solid, label="rowDataType"];
34->30 [style = solid, label="tableType"];
19->9 [style = bold, label=""];
23->35 [style = solid, label="rowType"];
21->16 [style = bold, label=""];
23->17 [style = bold, label=""];
17->11 [style = solid, label="requiredRowType"];
21->29 [style = dashed, label="0"];
14->11 [style = bold, label=""];
12->22 [style = bold, label=""];
5->29 [style = bold, label=""];
17->5 [style = bold, label=""];
3->7 [style = dotted, label="true"];
21->20 [style = dotted, label="true"];
30->35 [style = solid, label="emitDelete"];
24->0 [style = bold, label=""];
5->29 [style = solid, label="queryType"];
16->6 [style = bold, label=""];
28->35 [style = solid, label="tableAvroSchema"];
24->0 [style = solid, label="tableAvroSchema"];
19->25 [style = bold, label=""];
0->20 [style = solid, label="rowDataType"];
5->21 [style = bold, label=""];
6->4 [style = bold, label=""];
24->11 [style = solid, label="tableAvroSchema"];
20->8 [style = bold, label=""];
0->23 [style = bold, label=""];
3->7 [style = bold, label=""];
29->32 [style = bold, label=""];
3->18 [style = dotted, label="true"];
31->28 [style = bold, label=""];
21->16 [style = dotted, label="true"];
1->19 [style = bold, label=""];
17->35 [style = solid, label="requiredRowType"];
22->11 [style = bold, label=""];
21->6 [style = dotted, label="true"];
3->30 [style = dashed, label="0"];
13->24 [style = bold, label=""];
15->14 [style = bold, label=""];
29->34 [style = dotted, label="true"];
5->8 [style = solid, label="queryType"];
2->3 [style = bold, label=""];
23->20 [style = solid, label="rowType"];
5->32 [style = solid, label="queryType"];
35->32 [style = bold, label=""];
21->2 [style = dotted, label="true"];
9->20 [style = bold, label=""];
21->10 [style = dotted, label="true"];
3->12 [style = bold, label=""];
1->19 [style = dotted, label="true"];
32->33 [style = bold, label=""];
12->4 [style = solid, label="inputSplits"];
24->28 [style = dashed, label="0"];
12->11 [style = solid, label="inputSplits"];
25->20 [style = bold, label=""];
30->35 [style = bold, label=""];
22->26 [style = dotted, label="true"];
1->9 [style = dotted, label="true"];
23->11 [style = solid, label="rowType"];
21->3 [style = dotted, label="true"];
7->18 [style = bold, label=""];
0->35 [style = solid, label="rowDataType"];
27->24 [style = bold, label=""];
4->1 [style = bold, label=""];
22->15 [style = dotted, label="true"];
18->16 [style = bold, label=""];
3->11 [style = dotted, label="true"];
1->25 [style = dotted, label="true"];
21->1 [style = dotted, label="true"];
21->6 [style = bold, label=""];
21->4 [style = dotted, label="true"];
24->20 [style = solid, label="tableAvroSchema"];
34->30 [style = bold, label=""];
15->26 [style = bold, label=""];
28->0 [style = solid, label="tableAvroSchema"];
3->12 [style = dotted, label="true"];
3->22 [style = dotted, label="true"];
2->34 [style = dashed, label="0"];
29->30 [style = dotted, label="true"];
17->20 [style = solid, label="requiredRowType"];
2->3 [style = solid, label="tableType"];
8->10 [style = solid, label="errMsg"];
29->35 [style = dotted, label="true"];
11->7 [style = bold, label=""];
}
