digraph {
1 [style = filled, label = "testProcessingTimeAndEventTimeDontInterfere['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "KeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1,maxParallelism - 1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_PROC_TIME:CIAO\"))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testHarness1.processWatermark(10L)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness2 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator2,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,1)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testHarness2.setProcessingTime(10L)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testHarness1.setProcessingTime(10L)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testHarness.processWatermark(0L)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testHarness2.setProcessingTime(20L)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "testHarness1.setup()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_STATE:HELLO\"),0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertTrue(extractResult(testHarness).isEmpty())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testHarness1.setProcessingTime(20L)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testHarness.processWatermark(0L)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestOperator testOperator = new TestOperator()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testHarness.setProcessingTime(0L)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_EVENT_TIME:CIAO\"))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "final int maxParallelism = 10@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_PROC_TIME_TIMER:10\"),0)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "OperatorSubtaskState initState2 = AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,1,2,1)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "testStateAndTimerStateShufflingScalingUp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "testHarness2.open()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_STATE:HELLO\"),0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.open()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testProcessingTimeAndEventTimeDontInterfere['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "testHarness1.initializeState(initState1)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "KeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0,(maxParallelism / 2) - 1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "int key2 = getKeyInKeyGroupRange(subKeyGroupRange2,maxParallelism)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "TestOperator testOperator1 = new TestOperator()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TestOperator testOperator = new TestOperator()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_EVENT_TIME_TIMER:20\"),0)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testHarness2.processWatermark(20L)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(extractResult(testHarness),contains(\"ON_PROC_TIME:HELLO\"))@@@14@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_PROC_TIME:HELLO\"))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "testHarness1.open()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@51@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_EVENT_TIME_TIMER:10\"),0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testHarness1.processWatermark(20L)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "OperatorSubtaskState initState1 = AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,1,2,0)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_STATE:CIAO\"),0)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testHarness.open()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "TestOperator testOperator2 = new TestOperator()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(extractResult(testHarness),contains(\"ON_PROC_TIME:HELLO\"))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_EVENT_TIME:HELLO\"))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "int key1 = getKeyInKeyGroupRange(subKeyGroupRange1,maxParallelism)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testHarness2.initializeState(initState2)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "testHarness.setProcessingTime(0L)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(extractResult(testHarness),contains(\"ON_EVENT_TIME:HELLO\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "OperatorSubtaskState snapshot = testHarness.snapshot(0,0)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_PROC_TIME_TIMER:20\"),0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "testHarness2.setup()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,1,0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_PROC_TIME_TIMER:10\"),0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testHarness2.processWatermark(10L)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35->48 [style = bold, label=""];
39->19 [style = bold, label=""];
49->59 [style = bold, label=""];
57->40 [style = solid, label="key2"];
25->22 [style = bold, label=""];
33->52 [style = solid, label="testOperator2"];
29->56 [style = bold, label=""];
12->7 [style = bold, label=""];
46->42 [style = solid, label="maxParallelism"];
21->28 [style = bold, label=""];
47->49 [style = bold, label=""];
26->60 [style = bold, label=""];
42->44 [style = bold, label=""];
0->55 [style = solid, label="testOperator"];
6->11 [style = bold, label=""];
34->17 [style = bold, label=""];
48->36 [style = solid, label="initState1"];
57->43 [style = solid, label="key2"];
56->26 [style = bold, label=""];
45->35 [style = bold, label=""];
13->14 [style = bold, label=""];
24->27 [style = bold, label=""];
49->27 [style = solid, label="testHarness1"];
46->32 [style = solid, label="maxParallelism"];
46->42 [style = bold, label=""];
1->4 [style = bold, label=""];
46->52 [style = solid, label="maxParallelism"];
54->46 [style = bold, label=""];
51->21 [style = bold, label=""];
46->57 [style = solid, label="maxParallelism"];
11->12 [style = bold, label=""];
57->0 [style = bold, label=""];
6->17 [style = dashed, label="0"];
5->34 [style = dashed, label="0"];
35->31 [style = solid, label="snapshot"];
31->18 [style = solid, label="initState2"];
52->28 [style = solid, label="testHarness2"];
47->49 [style = solid, label="testOperator1"];
46->31 [style = solid, label="maxParallelism"];
44->57 [style = solid, label="subKeyGroupRange2"];
5->6 [style = bold, label=""];
31->33 [style = bold, label=""];
44->32 [style = bold, label=""];
17->15 [style = bold, label=""];
16->39 [style = bold, label=""];
10->2 [style = bold, label=""];
32->15 [style = solid, label="key1"];
46->48 [style = solid, label="maxParallelism"];
46->44 [style = solid, label="maxParallelism"];
18->37 [style = bold, label=""];
4->10 [style = bold, label=""];
28->29 [style = bold, label=""];
10->55 [style = dashed, label="0"];
33->52 [style = bold, label=""];
35->48 [style = solid, label="snapshot"];
38->24 [style = bold, label=""];
22->16 [style = bold, label=""];
11->15 [style = dashed, label="0"];
32->57 [style = bold, label=""];
32->50 [style = solid, label="key1"];
23->41 [style = bold, label=""];
52->60 [style = solid, label="testHarness2"];
61->34 [style = bold, label=""];
15->43 [style = bold, label=""];
20->51 [style = bold, label=""];
32->34 [style = solid, label="key1"];
55->6 [style = bold, label=""];
14->2 [style = bold, label=""];
49->16 [style = solid, label="testHarness1"];
0->5 [style = bold, label=""];
6->12 [style = bold, label=""];
43->50 [style = bold, label=""];
9->0 [style = bold, label=""];
10->12 [style = solid, label="testHarness"];
52->53 [style = bold, label=""];
10->3 [style = solid, label="testHarness"];
46->49 [style = solid, label="maxParallelism"];
53->18 [style = bold, label=""];
37->20 [style = bold, label=""];
42->32 [style = solid, label="subKeyGroupRange1"];
58->31 [style = bold, label=""];
7->3 [style = bold, label=""];
4->10 [style = solid, label="testOperator"];
12->61 [style = bold, label=""];
19->58 [style = bold, label=""];
48->47 [style = bold, label=""];
0->55 [style = bold, label=""];
50->40 [style = bold, label=""];
8->9 [style = bold, label=""];
60->30 [style = bold, label=""];
59->36 [style = bold, label=""];
46->55 [style = solid, label="maxParallelism"];
27->23 [style = bold, label=""];
40->45 [style = bold, label=""];
41->25 [style = bold, label=""];
36->38 [style = bold, label=""];
57->17 [style = solid, label="key2"];
7->50 [style = dashed, label="0"];
2->8 [style = bold, label=""];
}
