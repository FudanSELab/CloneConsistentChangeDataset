digraph {
5 [style = filled, label = "raw.writeBytes(data)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testMultpileUsages['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "CompressionType type@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "int i = 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "i++@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "uncompressed.release()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "CompressionType type@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(uncompressed.readableBytes(),data.length)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "i < 5@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "uncompressed.release()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ByteBuf compressed = codec.encode(raw)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "String compressedText@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "CompressionType type@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "raw.release()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "String sourceText@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "ByteBuf uncompressed = codec.decode(compressedComplexByteBuf,data.length)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testDecompressReadonlyByteBuf['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ByteBuf compressedComplexByteBuf = compressed.asReadOnly()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "compressed.release()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(raw.refCnt(),0)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "ByteBuf uncompressed = codec.decode(compressed,data.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "int compressedSize = compressed.readableBytes()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "byte(( data = text.getBytes()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String compressedText@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(uncompressed,raw)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(compressed.readableBytes(),compressedSize)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(compressed.refCnt(),0)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testDecompressReadonlyByteBuf['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "byte(( data = sourceText.getBytes()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(compressed.refCnt(),0)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(raw.readableBytes(),data.length)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->2 [style = solid, label="compressedComplexByteBuf"];
14->3 [style = bold, label=""];
27->31 [style = solid, label="i"];
32->18 [style = solid, label="uncompressed"];
8->10 [style = bold, label=""];
31->25 [style = dotted, label="true"];
15->2 [style = bold, label=""];
10->28 [style = bold, label=""];
4->17 [style = bold, label=""];
5->20 [style = bold, label=""];
3->20 [style = solid, label="raw"];
28->31 [style = bold, label=""];
17->11 [style = solid, label="compressedSize"];
31->5 [style = dotted, label="true"];
27->31 [style = bold, label=""];
26->9 [style = bold, label=""];
3->18 [style = solid, label="raw"];
23->3 [style = bold, label=""];
30->9 [style = solid, label="type"];
17->32 [style = bold, label=""];
31->11 [style = dotted, label="true"];
14->5 [style = solid, label="data"];
31->20 [style = dotted, label="true"];
31->18 [style = dotted, label="true"];
6->19 [style = dotted, label="true"];
23->5 [style = solid, label="data"];
12->7 [style = bold, label=""];
11->18 [style = bold, label=""];
31->8 [style = dotted, label="true"];
31->10 [style = dotted, label="true"];
20->4 [style = bold, label=""];
31->32 [style = dotted, label="true"];
9->23 [style = bold, label=""];
17->25 [style = solid, label="compressedSize"];
3->5 [style = bold, label=""];
14->23 [style = dashed, label="0"];
19->30 [style = dashed, label="0"];
31->28 [style = dotted, label="true"];
26->30 [style = dotted, label="true"];
1->16 [style = bold, label=""];
25->11 [style = bold, label=""];
24->22 [style = dotted, label="true"];
27->28 [style = solid, label="i"];
28->31 [style = solid, label="i"];
19->9 [style = solid, label="type"];
31->17 [style = dotted, label="true"];
32->25 [style = bold, label=""];
17->15 [style = bold, label=""];
9->14 [style = bold, label=""];
21->9 [style = solid, label="type"];
18->13 [style = bold, label=""];
26->29 [style = dotted, label="true"];
2->13 [style = solid, label="uncompressed"];
31->13 [style = dotted, label="true"];
14->27 [style = bold, label=""];
3->13 [style = solid, label="raw"];
6->0 [style = dotted, label="true"];
31->3 [style = dotted, label="true"];
13->8 [style = bold, label=""];
6->9 [style = bold, label=""];
31->3 [style = bold, label=""];
10->1 [style = bold, label=""];
24->21 [style = dotted, label="true"];
31->4 [style = dotted, label="true"];
16->12 [style = bold, label=""];
20->32 [style = solid, label="compressed"];
2->11 [style = bold, label=""];
24->9 [style = bold, label=""];
19->22 [style = dashed, label="0"];
}
