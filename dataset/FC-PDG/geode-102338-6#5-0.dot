digraph {
4 [style = filled, label = "assertThat(type).isEqualTo(\"DataSerializer: with Id:\" + someUserClass4Id)@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "getDataTypeShouldReturnUserDataSeriazliable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Instantiator mockInstantiator = PowerMockito.mock()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "PowerMockito.mockStatic()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "when(InternalInstantiator.getClassId(mockInstantiator.getClass())).thenReturn(someClassId)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "String type = DataType.getDataType(bytes)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "out.writeByte(DSCODE.USER_DATA_SERIALIZABLE.toByte())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "int someUserClass4Id = 1@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(type).isEqualTo(\"org.apache.geode.Instantiator:org.apache.geode.internal.cache.execute.data.CustId\")@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DataOutputStream out = new DataOutputStream(baos)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "String type = DataType.getDataType(bytes)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int someClassId = 1@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "out.writeByte(someClassId)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "doReturn().when(mockInstantiator).getInstantiatedClass()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "when(InternalInstantiator.getInstantiator(someClassId)).thenReturn(mockInstantiator)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "byte(( bytes = baos.toByteArray()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ByteArrayOutputStream baos = new ByteArrayOutputStream()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "out.writeByte(DSCODE.USER_CLASS_4.toByte())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "getDataTypeShouldReturnUserDataSeriazliable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "DataOutputStream out = new DataOutputStream(baos)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "out.writeInt(someUserClass4Id)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "byte(( bytes = baos.toByteArray()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "mockInstantiator.getInstantiatedClass()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "getDataTypeShouldReturnUserClass4['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
17->4 [style = solid, label="someUserClass4Id"];
1->8 [style = bold, label=""];
12->5 [style = bold, label=""];
18->16 [style = solid, label="baos"];
14->22 [style = dashed, label="0"];
7->3 [style = solid, label="mockInstantiator"];
15->6 [style = bold, label=""];
6->14 [style = solid, label="someClassId"];
9->10 [style = bold, label=""];
5->14 [style = bold, label=""];
3->4 [style = bold, label=""];
10->6 [style = bold, label=""];
17->22 [style = solid, label="someUserClass4Id"];
14->1 [style = bold, label=""];
7->9 [style = bold, label=""];
6->4 [style = bold, label=""];
11->0 [style = bold, label=""];
22->20 [style = bold, label=""];
21->22 [style = bold, label=""];
16->21 [style = bold, label=""];
6->11 [style = bold, label=""];
4->12 [style = solid, label="baos"];
20->19 [style = solid, label="bytes"];
4->12 [style = bold, label=""];
5->21 [style = dashed, label="0"];
23->17 [style = bold, label=""];
13->4 [style = dashed, label="0"];
19->4 [style = bold, label=""];
6->0 [style = solid, label="someClassId"];
2->7 [style = bold, label=""];
20->19 [style = bold, label=""];
1->8 [style = solid, label="bytes"];
17->18 [style = bold, label=""];
8->13 [style = bold, label=""];
18->16 [style = bold, label=""];
}
