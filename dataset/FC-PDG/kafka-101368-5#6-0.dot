digraph {
6 [style = filled, label = "verifyEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(1)).until(4),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(1)).until(4))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "verifyEquality(TimeWindows.of(ofMillis(3)).until(4),TimeWindows.of(ofMillis(3)).until(4))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "equalsAndHashcodeShouldBeValidForPositiveCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "verifyEquality(TimeWindows.of(3).advanceBy(1),TimeWindows.of(3).advanceBy(1))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "verifyEquality(TimeWindows.of(3).grace(1),TimeWindows.of(3).grace(1))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "verifyInEquality(SessionWindows.with(1).grace(9),SessionWindows.with(1).grace(6))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "verifyEquality(TimeWindows.of(3).advanceBy(1).grace(1).until(4),TimeWindows.of(3).advanceBy(1).grace(1).until(4))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "verifyInEquality(SessionWindows.with(9),SessionWindows.with(1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "verifyInEquality(SessionWindows.with(1).until(9),SessionWindows.with(1).until(7))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "verifyEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "verifyEquality(TimeWindows.of(ofMillis(3)),TimeWindows.of(ofMillis(3)))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "verifyEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(1)),TimeWindows.of(ofMillis(3)).grace(ofMillis(1)))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "equalsAndHashcodeShouldBeValidForPositiveCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "verifyInEquality(SessionWindows.with(1).grace(0).until(7),SessionWindows.with(1).grace(6).until(7))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "verifyEquality(TimeWindows.of(3).until(4),TimeWindows.of(3).until(4))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "verifyEquality(TimeWindows.of(3),TimeWindows.of(3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "verifyInEquality(SessionWindows.with(2).grace(6).until(7),SessionWindows.with(1).grace(6).until(7))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "verifyInEquality(SessionWindows.with(1).grace(6).until(70),SessionWindows.with(1).grace(6).until(7))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
3->6 [style = dashed, label="0"];
9->11 [style = bold, label=""];
11->6 [style = bold, label=""];
5->9 [style = dashed, label="0"];
0->11 [style = dashed, label="0"];
2->4 [style = bold, label=""];
2->8 [style = dashed, label="0"];
8->7 [style = bold, label=""];
7->9 [style = bold, label=""];
12->13 [style = bold, label=""];
13->17 [style = bold, label=""];
10->8 [style = bold, label=""];
5->0 [style = bold, label=""];
4->7 [style = dashed, label="0"];
16->14 [style = bold, label=""];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
4->5 [style = bold, label=""];
17->18 [style = bold, label=""];
18->16 [style = bold, label=""];
}
