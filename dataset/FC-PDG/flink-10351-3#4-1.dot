digraph {
19 [style = filled, label = "byte(( bytes = INSTANCE.serialize(state)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Set<PulsarPartitionSplit> splits = Collections.singleton(new PulsarPartitionSplit(new TopicPartition(randomAlphabetic(10),10,createFullRange()),StartCursor.defaultStartCursor(),StopCursor.defaultStopCursor()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "PulsarPartitionSplit split = new PulsarPartitionSplit(new TopicPartition(randomAlphabetic(10),10,createFullRange()),StopCursor.defaultStopCursor())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "serializeAndDeserializePulsarSourceEnumState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(state.isInitialized(),state1.isInitialized())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Set<TopicPartition> partitions = Sets.newHashSet(new TopicPartition(randomAlphabetic(10),2,new TopicRange(1,30)),new TopicPartition(randomAlphabetic(10),1,createFullRange()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(state.getReaderAssignedSplits(),state1.getReaderAssignedSplits())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Map<Integer,Set<String>> mapping = ImmutableMap.of(1,Sets.newHashSet(randomAlphabetic(10),randomAlphabetic(10)),2,Sets.newHashSet(randomAlphabetic(10),randomAlphabetic(10)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(split,split1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Map<Integer,Set<PulsarPartitionSplit>> shared = Collections.singletonMap(5,splits)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "serializeAndDeserializePulsarPartitionSplit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "PulsarSourceEnumState state = new PulsarSourceEnumState(partitions,splits,shared,mapping,true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertNotSame(split,split1)@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "PulsarPartitionSplit split = new PulsarPartitionSplit(new TopicPartition(randomAlphabetic(10),10,createFullRange()),StartCursor.defaultStartCursor(),StopCursor.defaultStopCursor())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertEquals(state.getAppendedPartitions(),state1.getAppendedPartitions())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(state.getPendingPartitionSplits(),state1.getPendingPartitionSplits())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "serializeAndDeserializePulsarPartitionSplit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "byte(( bytes = INSTANCE.serialize(split)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "PulsarPartitionSplit split1 = INSTANCE.deserialize(INSTANCE.getVersion(),bytes)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "PulsarSourceEnumState state1 = INSTANCE.deserialize(INSTANCE.getVersion(),bytes)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertNotSame(state,state1)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12->9 [style = solid, label="partitions"];
4->3 [style = bold, label=""];
11->20 [style = bold, label=""];
5->12 [style = dashed, label="0"];
3->1 [style = bold, label=""];
20->9 [style = bold, label=""];
6->4 [style = solid, label="split"];
9->16 [style = solid, label="state"];
5->4 [style = solid, label="split"];
3->1 [style = solid, label="split1"];
14->9 [style = solid, label="splits"];
5->2 [style = solid, label="split"];
6->4 [style = bold, label=""];
19->13 [style = solid, label="bytes"];
15->17 [style = bold, label=""];
9->19 [style = solid, label="state"];
14->11 [style = solid, label="splits"];
6->2 [style = solid, label="split"];
19->13 [style = bold, label=""];
18->10 [style = bold, label=""];
10->16 [style = bold, label=""];
5->6 [style = dashed, label="0"];
2->9 [style = dashed, label="0"];
17->18 [style = bold, label=""];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
6->1 [style = solid, label="split"];
12->14 [style = bold, label=""];
9->19 [style = bold, label=""];
11->9 [style = solid, label="shared"];
5->1 [style = solid, label="split"];
1->2 [style = bold, label=""];
13->15 [style = bold, label=""];
13->16 [style = solid, label="state1"];
14->11 [style = bold, label=""];
4->3 [style = solid, label="bytes"];
8->12 [style = bold, label=""];
0->5 [style = bold, label=""];
3->11 [style = dashed, label="0"];
20->9 [style = solid, label="mapping"];
3->2 [style = solid, label="split1"];
}
