digraph {
17 [style = filled, label = "byte(( bytes = baos.toByteArray()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "out.writeByte(DSCODE.USER_DATA_SERIALIZABLE_2.toByte())@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "String type = DataType.getDataType(bytes)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "out.writeByte(DSCODE.USER_CLASS_2.toByte())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "String type = DataType.getDataType(bytes)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "short someClassId = 1@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(type).isEqualTo(\"org.apache.geode.Instantiator:org.apache.geode.internal.cache.execute.data.CustId\")@@@16@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(type).isEqualTo(\"DataSerializer: with Id:\" + someUserClass2Id)@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "doReturn().when(mockInstantiator).getInstantiatedClass()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "DataOutputStream out = new DataOutputStream(baos)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "short someUserClass2Id = 1@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "out.writeShort(someClassId)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PowerMockito.mockStatic()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "int someClassId = 1@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "out.writeShort(someClassId)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "getDataTypeShouldReturnUserDataSeriazliable2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(InternalInstantiator.getClassId(mockInstantiator.getClass())).thenReturn(someClassId)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "ByteArrayOutputStream baos = new ByteArrayOutputStream()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "mockInstantiator.getInstantiatedClass()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "ByteArrayOutputStream baos = new ByteArrayOutputStream()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "DataOutputStream out = new DataOutputStream(baos)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "DataOutputStream out = new DataOutputStream(baos)@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "out.writeShort(someUserClass2Id)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "String type = DataType.getDataType(bytes)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "out.writeByte(DSCODE.USER_DATA_SERIALIZABLE_2.toByte())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "getDataTypeShouldReturnUserClass2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Instantiator mockInstantiator = PowerMockito.mock()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(InternalInstantiator.getInstantiator(someClassId)).thenReturn(mockInstantiator)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "byte(( bytes = baos.toByteArray()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "byte(( bytes = baos.toByteArray()@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "getDataTypeShouldReturnUserDataSeriazliable2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12->7 [style = solid, label="someClassId"];
25->28 [style = bold, label=""];
20->17 [style = bold, label=""];
6->5 [style = solid, label="mockInstantiator"];
1->8 [style = bold, label=""];
0->13 [style = bold, label=""];
23->27 [style = bold, label=""];
17->22 [style = solid, label="bytes"];
15->21 [style = bold, label=""];
9->4 [style = bold, label=""];
23->14 [style = solid, label="someUserClass2Id"];
18->19 [style = bold, label=""];
29->25 [style = bold, label=""];
3->6 [style = bold, label=""];
6->0 [style = bold, label=""];
5->14 [style = bold, label=""];
17->22 [style = bold, label=""];
12->9 [style = bold, label=""];
2->10 [style = bold, label=""];
24->23 [style = bold, label=""];
30->29 [style = bold, label=""];
14->1 [style = bold, label=""];
8->7 [style = bold, label=""];
28->14 [style = bold, label=""];
26->30 [style = bold, label=""];
19->20 [style = solid, label="someClassId"];
25->28 [style = solid, label="bytes"];
13->12 [style = bold, label=""];
27->26 [style = bold, label=""];
12->4 [style = solid, label="someClassId"];
7->2 [style = bold, label=""];
11->14 [style = dashed, label="0"];
15->21 [style = solid, label="baos"];
27->26 [style = solid, label="baos"];
21->16 [style = bold, label=""];
2->10 [style = solid, label="bytes"];
8->30 [style = dashed, label="0"];
14->1 [style = solid, label="baos"];
7->29 [style = dashed, label="0"];
19->15 [style = bold, label=""];
22->14 [style = bold, label=""];
16->20 [style = bold, label=""];
23->29 [style = solid, label="someUserClass2Id"];
4->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
