digraph {
5 [style = filled, label = "randomizedStressTestBytes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int byteArrSize = 8@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int size = 65536@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "rand.nextBytes(bytes)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "randomizedStressTestBytes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "int byteArrSize = rand.nextInt(100) * 8@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytesBlock(mb))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Random rand = new Random()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "int i = 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Set<Integer> hashcodes = new HashSet<>()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "byte(( strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "int size = 64000@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Set<Long> hashcodes = new HashSet<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "System.arraycopy(strBytes,0,paddedBytes,0,strBytes.length)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "i++@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "byte(( bytes = new byte((((@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytesBlock(mb),HiveHasher.hashUnsafeBytesBlock(mb))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "randomizedStressTestPaddedStrings['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "byte(( paddedBytes = new byte((((@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "i < size@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(bytes)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6->1 [style = solid, label="i"];
2->20 [style = dotted, label="true"];
0->17 [style = solid, label="bytes"];
12->1 [style = solid, label="size"];
0->4 [style = solid, label="bytes"];
24->18 [style = solid, label="paddedBytes"];
19->18 [style = bold, label=""];
8->6 [style = dashed, label="0"];
1->8 [style = bold, label=""];
7->17 [style = bold, label=""];
24->19 [style = solid, label="paddedBytes"];
1->17 [style = dotted, label="true"];
4->6 [style = bold, label=""];
2->6 [style = solid, label="i"];
2->6 [style = bold, label=""];
2->1 [style = bold, label=""];
8->4 [style = solid, label="byteArrSize"];
2->24 [style = dotted, label="true"];
16->6 [style = bold, label=""];
1->15 [style = bold, label=""];
0->7 [style = solid, label="bytes"];
23->26 [style = bold, label=""];
22->21 [style = bold, label=""];
17->16 [style = solid, label="mb"];
26->1 [style = solid, label="i"];
1->4 [style = dotted, label="true"];
9->10 [style = bold, label=""];
26->2 [style = solid, label="i"];
12->9 [style = bold, label=""];
2->18 [style = dotted, label="true"];
0->20 [style = dashed, label="0"];
3->4 [style = bold, label=""];
13->16 [style = bold, label=""];
12->21 [style = dashed, label="0"];
7->3 [style = bold, label=""];
9->23 [style = dashed, label="0"];
1->11 [style = bold, label=""];
0->7 [style = bold, label=""];
1->3 [style = dotted, label="true"];
8->3 [style = solid, label="byteArrSize"];
8->0 [style = bold, label=""];
6->20 [style = bold, label=""];
1->7 [style = dotted, label="true"];
6->1 [style = bold, label=""];
1->13 [style = dotted, label="true"];
26->2 [style = bold, label=""];
2->25 [style = dotted, label="true"];
24->25 [style = solid, label="paddedBytes"];
18->1 [style = bold, label=""];
5->12 [style = bold, label=""];
7->24 [style = dashed, label="0"];
2->6 [style = dotted, label="true"];
2->1 [style = dotted, label="true"];
24->25 [style = bold, label=""];
14->12 [style = bold, label=""];
12->11 [style = solid, label="size"];
2->1 [style = solid, label="i"];
12->15 [style = solid, label="size"];
25->19 [style = bold, label=""];
1->2 [style = solid, label="i"];
1->8 [style = dotted, label="true"];
0->3 [style = solid, label="bytes"];
1->6 [style = dotted, label="true"];
6->19 [style = solid, label="byteArrSize"];
10->2 [style = bold, label=""];
17->13 [style = bold, label=""];
1->2 [style = bold, label=""];
17->13 [style = solid, label="mb"];
1->0 [style = dotted, label="true"];
1->16 [style = dotted, label="true"];
4->19 [style = dashed, label="0"];
4->13 [style = dashed, label="0"];
20->24 [style = bold, label=""];
6->18 [style = solid, label="byteArrSize"];
21->11 [style = solid, label="size"];
2->11 [style = bold, label=""];
21->2 [style = solid, label="size"];
2->19 [style = dotted, label="true"];
20->25 [style = solid, label="strBytes"];
21->23 [style = bold, label=""];
}
