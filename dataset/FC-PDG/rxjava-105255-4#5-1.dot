digraph {
15 [style = filled, label = "Observable<Integer> fast = is.observeOn(Schedulers.computation()).doOnComplete(new Action(){@Override public void run(){System.out.println(\"^^^^^^^^^^^^^ completed FAST\")}})@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "backpressureFastSlow['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(Flowable.bufferSize() * 4,ts.values().size())@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ConnectableObservable<Integer> is = Observable.range(1,Flowable.bufferSize() * 2).publish()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<>()@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "to.assertNoErrors()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "is.connect()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<Integer>()@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "backpressureFastSlow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TestObserver<Integer> to = new TestObserver<Integer>()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Flowable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer,Integer>(){@Override public Integer apply(Integer i){if (c == 0) {try {Thread.sleep(500)}catch (InterruptedException e) }c++return i}}).doOnComplete(new Action(){@Override public void run(){System.out.println(\"^^^^^^^^^^^^^ completed SLOW\")}})@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Flowable.merge(fast,slow).subscribe(ts)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Observable.merge(fast,slow).subscribe(to)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "to.awaitDone(5,TimeUnit.SECONDS)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "backpressureFastSlow['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "ConnectableFlowable<Integer> is = Flowable.range(1,Flowable.bufferSize() * 2).publish()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(Flowable.bufferSize() * 4,to.values().size())@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Flowable<Integer> fast = is.observeOn(Schedulers.computation()).doOnComplete(new Action(){@Override public void run(){System.out.println(\"^^^^^^^^^^^^^ completed FAST\")}})@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Observable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer,Integer>(){@Override public Integer apply(Integer i){if (c == 0) {try {Thread.sleep(500)}catch (InterruptedException e) }c++return i}}).doOnComplete(new Action(){@Override public void run(){System.out.println(\"^^^^^^^^^^^^^ completed SLOW\")}})@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "ts.assertNoErrors()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
16->13 [style = bold, label=""];
8->16 [style = dashed, label="0"];
1->8 [style = bold, label=""];
7->17 [style = dashed, label="0"];
6->20 [style = dashed, label="0"];
2->1 [style = bold, label=""];
12->16 [style = bold, label=""];
19->17 [style = bold, label=""];
15->19 [style = bold, label=""];
10->6 [style = bold, label=""];
2->12 [style = bold, label=""];
4->0 [style = bold, label=""];
3->19 [style = dashed, label="0"];
20->2 [style = bold, label=""];
6->2 [style = bold, label=""];
0->14 [style = dashed, label="0"];
3->10 [style = bold, label=""];
1->12 [style = dashed, label="0"];
11->0 [style = bold, label=""];
3->7 [style = bold, label=""];
7->6 [style = bold, label=""];
9->13 [style = dashed, label="0"];
8->9 [style = bold, label=""];
10->6 [style = solid, label="ts"];
7->10 [style = dashed, label="0"];
14->15 [style = bold, label=""];
7->6 [style = solid, label="ts"];
5->15 [style = dashed, label="0"];
18->14 [style = bold, label=""];
17->20 [style = solid, label="to"];
0->5 [style = bold, label=""];
17->20 [style = bold, label=""];
}
