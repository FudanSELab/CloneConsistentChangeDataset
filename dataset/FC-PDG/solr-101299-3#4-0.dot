digraph {
16 [style = filled, label = "assertEquals((value - 5f) / (10f - 5f),n.normalize(value),0.0001)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "params.put(\"min\",\"5.0f\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final NormalizerException expectedException = new NormalizerException(\"MinMax Normalizer delta must not be zero \" + \"| min = 10.0,max = 10.0,delta = 0.0\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testNormalizer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testMinMaxNormalizerMinEqualToMax['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEquals((value - 5f) / (10f - 5f),n.normalize(value),0.0001)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals((value - 5f) / (10f - 5f),n.normalize(value),0.0001)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final Normalizer n = implTestMinMax(params,5.0f,10.0f)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "value = -1@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals((value - 5f) / (10f - 5f),n.normalize(value),0.0001)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(expectedException.toString(),ex.toString())@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "implTestMinMax(params,10.0f,10.0f)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "NormalizerException ex = SolrTestCaseJ4.expectThrows(,null)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "value = 5@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "params.put(\"max\",\"10.0f\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "fail(\"testMinMaxNormalizerMinEqualToMax failed to throw exception: \" + expectedException)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "final Map<String,Object> params = new HashMap<String,Object>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "value = 100@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "params.put(\"min\",\"10.0f\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "float value = 8@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "value = 150@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testMinMaxNormalizerMinEqualToMax['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals((value - 5f) / (10f - 5f),n.normalize(value),0.0001)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->3 [style = bold, label=""];
10->20 [style = bold, label=""];
19->18 [style = bold, label=""];
3->1 [style = bold, label=""];
15->14 [style = bold, label=""];
4->1 [style = solid, label="expectedException"];
2->6 [style = bold, label=""];
21->15 [style = bold, label=""];
12->17 [style = bold, label=""];
14->10 [style = bold, label=""];
0->21 [style = bold, label=""];
15->14 [style = solid, label="value"];
17->19 [style = solid, label="value"];
7->8 [style = bold, label=""];
17->19 [style = bold, label=""];
4->7 [style = bold, label=""];
9->6 [style = bold, label=""];
20->22 [style = bold, label=""];
6->5 [style = bold, label=""];
11->0 [style = bold, label=""];
5->0 [style = bold, label=""];
5->11 [style = dashed, label="0"];
0->4 [style = bold, label=""];
10->20 [style = solid, label="value"];
22->12 [style = bold, label=""];
22->12 [style = solid, label="value"];
6->11 [style = bold, label=""];
6->3 [style = solid, label="params"];
18->16 [style = solid, label="value"];
13->6 [style = bold, label=""];
6->21 [style = solid, label="params"];
18->16 [style = bold, label=""];
}
