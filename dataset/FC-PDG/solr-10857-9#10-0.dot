digraph {
19 [style = filled, label = "testExceptionStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(COLLECTION,tuples.get(1).get(\"_COLLECTION_\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assert(tuples.get(2).get(\"_COLLECTION_\").equals(COLLECTION))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assert(tuples.get(3).get(\"_COLLECTION_\").equals(COLLECTION))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "sParamsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_s,a_i,a_f,score\",\"sort\",\"a_s asc\",\"qt\",\"/export\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "t = getTuple(estream)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "CloudSolrStream stream = new CloudSolrStream(zkHost,COLLECTION,sParamsA)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testTrace['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "stream.setTrace(true)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(COLLECTION,tuples.get(0).get(\"_COLLECTION_\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(COLLECTION,tuples.get(2).get(\"_COLLECTION_\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assert(t.EOF)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "new UpdateRequest().add(id,\"0\",\"a_s\",\"hello0\",\"a_i\",\"0\",\"a_f\",\"1\").add(id,\"2\",\"a_s\",\"hello0\",\"a_i\",\"2\",\"a_f\",\"2\").add(id,\"3\",\"a_s\",\"hello3\",\"a_i\",\"3\",\"a_f\",\"3\").add(id,\"4\",\"a_s\",\"hello4\",\"a_i\",\"4\",\"a_f\",\"4\").add(id,\"1\",\"a_s\",\"hello0\",\"a_i\",\"1\",\"a_f\",\"5\").add(id,\"5\",\"a_s\",\"hello3\",\"a_i\",\"10\",\"a_f\",\"6\").add(id,\"6\",\"a_s\",\"hello4\",\"a_i\",\"11\",\"a_f\",\"7\").add(id,\"7\",\"a_s\",\"hello3\",\"a_i\",\"12\",\"a_f\",\"8\").add(id,\"8\",\"a_s\",\"hello3\",\"a_i\",\"13\",\"a_f\",\"9\").add(id,\"9\",\"a_s\",\"hello0\",\"a_i\",\"14\",\"a_f\",\"10\").commit(cluster.getSolrClient(),COLLECTION)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assert(t.getException().contains(\"undefined field:\"))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testTrace['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "SolrParams sParamsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,a_f\",\"sort\",\"a_s asc,a_f asc\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "stream = new CloudSolrStream(zkHost,COLLECTION,sParamsA)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assert(t.getException().contains(\"sort param field can't be found: blah\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "ExceptionStream estream = new ExceptionStream(stream)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assert(t.EXCEPTION)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assert(t.EOF)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assert(t.EXCEPTION)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<Tuple> tuples = getTuples(stream)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "estream = new ExceptionStream(stream)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "SolrParams sParamsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_s,a_i,a_f,blah\",\"sort\",\"blah asc\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assert(tuples.get(0).get(\"_COLLECTION_\").equals(COLLECTION))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assert(tuples.get(1).get(\"_COLLECTION_\").equals(COLLECTION))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertEquals(COLLECTION,tuples.get(3).get(\"_COLLECTION_\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Tuple t = getTuple(estream)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->23 [style = bold, label=""];
17->5 [style = bold, label=""];
0->9 [style = bold, label=""];
23->20 [style = bold, label=""];
25->28 [style = bold, label=""];
8->10 [style = dashed, label="0"];
4->17 [style = bold, label=""];
1->14 [style = dashed, label="0"];
27->15 [style = solid, label="estream"];
16->26 [style = bold, label=""];
7->11 [style = dashed, label="0"];
11->12 [style = bold, label=""];
5->27 [style = solid, label="stream"];
4->2 [style = bold, label=""];
0->27 [style = dashed, label="0"];
21->25 [style = bold, label=""];
2->17 [style = dashed, label="0"];
28->22 [style = solid, label="estream"];
1->7 [style = bold, label=""];
3->4 [style = bold, label=""];
27->15 [style = bold, label=""];
21->25 [style = solid, label="sParamsA"];
6->12 [style = dashed, label="0"];
25->28 [style = solid, label="stream"];
12->10 [style = bold, label=""];
22->18 [style = bold, label=""];
5->0 [style = bold, label=""];
24->21 [style = bold, label=""];
9->15 [style = dashed, label="0"];
17->5 [style = solid, label="sParamsA"];
6->8 [style = bold, label=""];
7->6 [style = bold, label=""];
9->14 [style = bold, label=""];
19->4 [style = bold, label=""];
5->27 [style = bold, label=""];
2->5 [style = solid, label="sParamsA"];
9->1 [style = bold, label=""];
20->24 [style = bold, label=""];
14->11 [style = bold, label=""];
28->22 [style = bold, label=""];
5->9 [style = solid, label="stream"];
2->5 [style = bold, label=""];
13->4 [style = bold, label=""];
18->16 [style = bold, label=""];
}
