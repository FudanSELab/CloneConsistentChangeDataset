digraph {
1 [style = filled, label = "subscriberCount['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ParallelFlowableTest.checkSubscriberCount(Flowable.range(1,5).parallel().collect(new Supplier<List<Integer>>(){@Override public List<Integer> get(){return new ArrayList<>()}},new BiConsumer<List<Integer>,Integer>(){@Override public void accept(List<Integer> a,Integer b){a.add(b)}}))@@@3@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Flowable.range(1,5).parallel().collect(new Supplier<List<Integer>>(){@Override public List<Integer> get(){throw new TestException()}},new BiConsumer<List<Integer>,Integer>(){@Override public void accept(List<Integer> a,Integer b){a.add(b)}}).sequential().test().assertFailure()@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "initialCrash['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "subscriberCount['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2->0 [style = bold, label=""];
0->4 [style = dashed, label="0"];
1->0 [style = bold, label=""];
3->4 [style = bold, label=""];
}
