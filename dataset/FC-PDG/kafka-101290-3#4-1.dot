digraph {
3 [style = filled, label = "assertEquals(subject.get(\"3\"),\"c\")@@@11@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final Set<String> keys = new HashSet<>()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"),\"c\".getBytes(\"UTF-8\")))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final KeyValueIterator<String,String> iterator = subject.all()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final List<KeyValue<byte((,byte((>> entries = new ArrayList<>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "subject.init(context,subject)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "shouldHandleDeletesOnRestoreAll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final List<KeyValue<byte((,byte((>> entries = getKeyValueEntries()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEquals(subject.get(\"1\"),\"a\")@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "keys.add(iterator.next().key)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "shouldRestoreAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"),(byte(()null))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "context.restore(subject.name(),entries)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "subject.init(context,subject)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"),\"a\".getBytes(\"UTF-8\")))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "shouldRestoreAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "iterator.hasNext()@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(keys,equalTo(Utils.mkSet(\"2\",\"3\")))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "context.restore(subject.name(),entries)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"),\"b\".getBytes(\"UTF-8\")))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(subject.get(\"1\"),\"a\")@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(subject.get(\"2\"),\"b\")@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
1->4 [style = bold, label=""];
17->5 [style = bold, label=""];
19->18 [style = bold, label=""];
5->12 [style = dashed, label="0"];
21->20 [style = dotted, label="true"];
0->6 [style = bold, label=""];
21->15 [style = bold, label=""];
4->19 [style = bold, label=""];
18->15 [style = solid, label="keys"];
13->11 [style = bold, label=""];
12->11 [style = solid, label="entries"];
4->7 [style = bold, label=""];
20->21 [style = bold, label=""];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
12->13 [style = bold, label=""];
21->20 [style = bold, label=""];
5->0 [style = bold, label=""];
16->1 [style = bold, label=""];
7->19 [style = dashed, label="0"];
11->10 [style = bold, label=""];
14->12 [style = bold, label=""];
6->8 [style = bold, label=""];
9->3 [style = bold, label=""];
5->4 [style = solid, label="entries"];
18->21 [style = bold, label=""];
10->1 [style = bold, label=""];
2->5 [style = bold, label=""];
}
