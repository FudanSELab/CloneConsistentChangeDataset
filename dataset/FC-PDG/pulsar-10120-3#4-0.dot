digraph {
5 [style = filled, label = "assertEquals(map.computeIfAbsent(2,provider).intValue(),2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testComputeIfAbsent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(map.computeIfAbsent(2,provider).intValue(),2)@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "LongFunction<Integer> provider = null@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(map.get(1).intValue(),1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testComputeIfAbsent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "testComputeIfAbsent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(map.get(1).intValue(),1)@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(map.computeIfAbsent(1,provider).intValue(),1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "LongFunction<Integer> provider = new LongFunction<Integer>(){public Integer apply(long key){return counter.getAndIncrement()}}@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertEquals(map.get(0).intValue(),0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(map.computeIfAbsent(0,provider).intValue(),0)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertEquals(map.computeIfAbsent(1,provider).intValue(),1)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "Function<Integer,Integer> provider = null@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "AtomicInteger counter = new AtomicInteger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(map.get(2).intValue(),2)@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(map.computeIfAbsent(0,provider).intValue(),0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(map.computeIfAbsent(1,provider).intValue(),1)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(map.computeIfAbsent(1,provider).intValue(),1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(map.computeIfAbsent(1,provider).intValue(),1)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(map.get(1).intValue(),1)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(map.get(1).intValue(),1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(map.get(0).intValue(),0)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "ConcurrentLongHashMap<Integer> map = new ConcurrentLongHashMap<>(16,1)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(map.get(2).intValue(),2)@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(map.get(1).intValue(),1)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "ConcurrentOpenHashMap<Integer,Integer> map = new ConcurrentOpenHashMap<>(16,1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
4->10 [style = bold, label=""];
15->10 [style = bold, label=""];
6->22 [style = bold, label=""];
16->17 [style = bold, label=""];
25->6 [style = bold, label=""];
7->8 [style = bold, label=""];
22->23 [style = bold, label=""];
10->6 [style = bold, label=""];
13->16 [style = bold, label=""];
19->8 [style = bold, label=""];
3->9 [style = bold, label=""];
12->13 [style = bold, label=""];
21->26 [style = bold, label=""];
5->2 [style = bold, label=""];
11->0 [style = bold, label=""];
8->5 [style = bold, label=""];
23->21 [style = bold, label=""];
24->25 [style = bold, label=""];
7->12 [style = dashed, label="0"];
14->8 [style = bold, label=""];
6->7 [style = bold, label=""];
9->1 [style = bold, label=""];
20->19 [style = bold, label=""];
18->14 [style = bold, label=""];
2->11 [style = bold, label=""];
10->25 [style = dashed, label="0"];
17->18 [style = bold, label=""];
26->20 [style = bold, label=""];
7->22 [style = dashed, label="0"];
6->12 [style = bold, label=""];
}
