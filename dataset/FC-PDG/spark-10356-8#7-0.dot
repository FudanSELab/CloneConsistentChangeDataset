digraph {
12 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "isNullAt(ordinal)@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return bytes@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "map.pointTo(baseObject,baseOffset + offset,size)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "getMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "getMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final UnsafeMapData map = new UnsafeMapData()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return null@@@4@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return map@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "getBinary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return UnsafeReaders.readMap(baseObject,baseOffset + offset,size)@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Platform.copyMemory(baseObject,baseOffset + offset,bytes,Platform.BYTE_ARRAY_OFFSET,size)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final byte(( bytes = new byte((((@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->1 [style = dotted, label="false"];
0->6 [style = dotted, label="true"];
13->15 [style = bold, label=""];
8->9 [style = bold, label=""];
9->11 [style = bold, label=""];
10->2 [style = bold, label=""];
2->7 [style = bold, label=""];
3->1 [style = solid, label="offsetAndSize"];
3->4 [style = solid, label="offsetAndSize"];
2->14 [style = dotted, label="false"];
1->8 [style = bold, label=""];
14->13 [style = bold, label=""];
2->8 [style = dotted, label="false"];
1->9 [style = solid, label="size"];
14->15 [style = solid, label="bytes"];
1->14 [style = bold, label=""];
14->13 [style = solid, label="bytes"];
4->1 [style = bold, label=""];
2->3 [style = bold, label=""];
6->2 [style = solid, label="ordinal"];
4->5 [style = solid, label="offset"];
16->2 [style = bold, label=""];
16->12 [style = dotted, label="true"];
6->12 [style = dashed, label="0"];
8->11 [style = solid, label="map"];
4->9 [style = solid, label="offset"];
1->13 [style = solid, label="size"];
12->2 [style = solid, label="ordinal"];
2->4 [style = dotted, label="false"];
2->15 [style = dotted, label="false"];
12->3 [style = solid, label="ordinal"];
6->3 [style = solid, label="ordinal"];
2->5 [style = dotted, label="false"];
10->6 [style = dotted, label="true"];
2->13 [style = dotted, label="false"];
2->11 [style = dotted, label="false"];
0->2 [style = bold, label=""];
1->5 [style = solid, label="size"];
2->3 [style = dotted, label="false"];
2->9 [style = dotted, label="false"];
4->13 [style = solid, label="offset"];
3->4 [style = bold, label=""];
2->7 [style = dotted, label="true"];
1->5 [style = bold, label=""];
}
