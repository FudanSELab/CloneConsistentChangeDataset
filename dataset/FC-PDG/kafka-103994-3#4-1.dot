digraph {
25 [style = filled, label = "assertEquals(OffsetResetStrategy.EARLIEST,state.resetStrategy(tp0))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(state.awaitingValidation(tp0))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "int divergentOffsetEpoch = 7@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(Optional.of(new OffsetAndMetadata(divergentOffset,Optional.of(divergentOffsetEpoch),\"\")),truncation.divergentOffsetOpt)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testTruncationDetectionWithoutResetPolicy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(initialPosition,truncation.fetchPosition)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "state = new SubscriptionState(new LogContext(),OffsetResetStrategy.EARLIEST)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testTruncationDetectionWithoutResetPolicy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Optional<LogTruncation> truncationOpt = state.maybeCompleteValidation(tp0,initialPosition,new EpochEndOffset(EpochEndOffset.UNDEFINED_EPOCH,EpochEndOffset.UNDEFINED_EPOCH_OFFSET))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Node broker1 = new Node(1,\"localhost\",9092)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "LogTruncation truncation = truncationOpt.get()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(state.isOffsetResetNeeded(tp0))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int initialOffsetEpoch = 5@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "long divergentOffset = 5L@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "SubscriptionState.FetchPosition initialPosition = new SubscriptionState.FetchPosition(initialOffset,Optional.of(initialOffsetEpoch),new Metadata.LeaderAndEpoch(Optional.of(broker1),Optional.of(currentEpoch)))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Optional<LogTruncation> truncationOpt = state.maybeCompleteValidation(tp0,initialPosition,new EpochEndOffset(divergentOffsetEpoch,divergentOffset))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "long initialOffset = 10L@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int currentEpoch = 10@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(truncationOpt.isPresent())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(Optional.empty(),truncationOpt)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "state.assignFromUser(Collections.singleton(tp0))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "state = new SubscriptionState(new LogContext(),OffsetResetStrategy.NONE)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(state.awaitingValidation(tp0))@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertFalse(state.awaitingValidation(tp0))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testTruncationDetectionUnknownDivergentOffsetWithResetPolicy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "state.seekUnvalidated(tp0,initialPosition)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Optional<LogTruncation> truncationOpt = state.maybeCompleteValidation(tp0,initialPosition,new OffsetForLeaderPartitionResult().setLeaderEpoch(divergentOffsetEpoch).setEndOffset(divergentOffset))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16->3 [style = bold, label=""];
16->11 [style = solid, label="broker1"];
7->23 [style = dashed, label="0"];
2->11 [style = solid, label="initialOffsetEpoch"];
3->1 [style = bold, label=""];
11->10 [style = solid, label="initialPosition"];
15->7 [style = solid, label="divergentOffsetEpoch"];
0->19 [style = bold, label=""];
2->6 [style = bold, label=""];
15->12 [style = solid, label="divergentOffsetEpoch"];
23->21 [style = solid, label="truncationOpt"];
11->23 [style = solid, label="initialPosition"];
6->19 [style = solid, label="divergentOffset"];
20->1 [style = bold, label=""];
11->4 [style = solid, label="initialPosition"];
11->19 [style = solid, label="initialPosition"];
1->13 [style = bold, label=""];
13->11 [style = solid, label="currentEpoch"];
6->15 [style = bold, label=""];
0->7 [style = bold, label=""];
7->9 [style = bold, label=""];
4->25 [style = dashed, label="0"];
26->16 [style = bold, label=""];
0->23 [style = bold, label=""];
15->11 [style = bold, label=""];
8->11 [style = solid, label="initialOffset"];
8->2 [style = bold, label=""];
12->4 [style = bold, label=""];
19->9 [style = bold, label=""];
23->21 [style = bold, label=""];
11->10 [style = bold, label=""];
21->22 [style = bold, label=""];
24->25 [style = bold, label=""];
7->19 [style = dashed, label="0"];
9->21 [style = dashed, label="0"];
14->12 [style = bold, label=""];
10->0 [style = bold, label=""];
3->20 [style = dashed, label="0"];
6->12 [style = solid, label="divergentOffset"];
9->14 [style = bold, label=""];
11->7 [style = solid, label="initialPosition"];
22->24 [style = bold, label=""];
13->8 [style = bold, label=""];
16->20 [style = bold, label=""];
4->5 [style = bold, label=""];
2->11 [style = bold, label=""];
17->16 [style = bold, label=""];
6->7 [style = solid, label="divergentOffset"];
18->16 [style = bold, label=""];
}
