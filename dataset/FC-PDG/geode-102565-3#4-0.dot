digraph {
22 [style = filled, label = "final ByteBufferSharingImpl inputSharingImpl = (ByteBufferSharingImpl)inputSharing@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ByteBuffer data = nioSslEngine.readAtLeast(mockChannel,amountToRead,wrappedBuffer)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final int preexistingBytes = initialUnwrappedBufferSize - 7@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "SocketChannel mockChannel = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "readAtLeastUsingSmallAppBufferAtWriteLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@22@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "verify(mockChannel,times(1)).read(isA())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "nioSslEngine.peerAppData = unwrappedBuffer@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * testSSLEngine.getNumberOfUnwraps() + preexistingBytes)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "readAtLeastUsingSmallAppBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final int individualRead = 150@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final int individualRead = 60@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(inputSharing.getBuffer().capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@33@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11->9 [style = solid, label="individualRead"];
18->3 [style = bold, label=""];
15->14 [style = solid, label="preexistingBytes"];
9->19 [style = bold, label=""];
5->14 [style = bold, label=""];
3->10 [style = bold, label=""];
12->7 [style = bold, label=""];
35->30 [style = solid, label="initialUnwrappedBufferSize"];
3->36 [style = dashed, label="0"];
10->21 [style = bold, label=""];
13->7 [style = bold, label=""];
28->16 [style = bold, label=""];
12->13 [style = solid, label="initialUnwrappedBufferSize"];
24->18 [style = bold, label=""];
35->30 [style = bold, label=""];
15->7 [style = solid, label="preexistingBytes"];
23->24 [style = bold, label=""];
8->18 [style = solid, label="wrappedBuffer"];
17->18 [style = bold, label=""];
1->12 [style = bold, label=""];
33->32 [style = solid, label="individualRead"];
30->32 [style = solid, label="preexistingBytes"];
25->26 [style = bold, label=""];
9->31 [style = bold, label=""];
14->6 [style = solid, label="initialFreeSpace"];
11->25 [style = solid, label="individualRead"];
12->26 [style = solid, label="initialUnwrappedBufferSize"];
11->33 [style = dashed, label="0"];
26->27 [style = solid, label="initialFreeSpace"];
16->33 [style = bold, label=""];
36->5 [style = bold, label=""];
1->18 [style = solid, label="mockChannel"];
11->15 [style = bold, label=""];
7->22 [style = bold, label=""];
5->32 [style = bold, label=""];
6->20 [style = bold, label=""];
26->27 [style = bold, label=""];
2->18 [style = solid, label="testSSLEngine"];
15->27 [style = solid, label="preexistingBytes"];
2->17 [style = bold, label=""];
15->6 [style = solid, label="preexistingBytes"];
12->13 [style = bold, label=""];
19->17 [style = solid, label="testSSLEngine"];
20->25 [style = bold, label=""];
8->1 [style = bold, label=""];
11->5 [style = solid, label="individualRead"];
16->3 [style = solid, label="amountToRead"];
30->4 [style = solid, label="preexistingBytes"];
33->35 [style = bold, label=""];
15->5 [style = solid, label="preexistingBytes"];
16->18 [style = solid, label="amountToRead"];
2->29 [style = bold, label=""];
11->24 [style = solid, label="individualRead"];
7->4 [style = bold, label=""];
12->3 [style = solid, label="mockChannel"];
5->32 [style = dashed, label="0"];
4->9 [style = bold, label=""];
34->16 [style = bold, label=""];
35->7 [style = solid, label="initialUnwrappedBufferSize"];
31->2 [style = bold, label=""];
15->25 [style = solid, label="preexistingBytes"];
33->31 [style = solid, label="individualRead"];
2->29 [style = dashed, label="0"];
14->6 [style = bold, label=""];
13->4 [style = solid, label="unwrappedBuffer"];
3->36 [style = bold, label=""];
15->26 [style = solid, label="preexistingBytes"];
7->9 [style = solid, label="unwrappedBuffer"];
30->1 [style = bold, label=""];
19->2 [style = bold, label=""];
22->23 [style = bold, label=""];
12->14 [style = solid, label="initialUnwrappedBufferSize"];
29->18 [style = bold, label=""];
18->10 [style = solid, label="testSSLEngine"];
16->11 [style = bold, label=""];
15->8 [style = bold, label=""];
21->6 [style = bold, label=""];
10->5 [style = bold, label=""];
1->3 [style = solid, label="wrappedBuffer"];
13->23 [style = solid, label="unwrappedBuffer"];
0->16 [style = bold, label=""];
}
