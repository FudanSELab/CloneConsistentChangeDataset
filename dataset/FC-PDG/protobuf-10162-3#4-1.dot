digraph {
5 [style = filled, label = "assertEquals(444,message.getInt32ToMessageField().get(333).getValue())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "builder.clearField(f(\"int32_to_message_field\"))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertHasMapValues(message,\"int32_to_int32_field\",mapForValues(1,2,3,4))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "builder.addRepeatedField(f(\"int32_to_message_field\"),newMapEntry(builder,\"int32_to_message_field\",555,MessageValue.newBuilder().setValue(666).build()))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\"))@@@34@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "builder.getMutableInt32ToMessageField().put(11,MessageValue.newBuilder().setValue(22).build())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(0,message.getInt32ToInt32Field().size())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "TestMap.Builder builder = TestMap.newBuilder().putInt32ToInt32Field(1,2).putInt32ToInt32Field(3,4).putInt32ToMessageField(11,MessageValue.newBuilder().setValue(22).build()).putInt32ToMessageField(33,MessageValue.newBuilder().setValue(44).build())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "assertHasMapValues(message,\"int32_to_message_field\",mapForValues(11,MessageValue.newBuilder().setValue(22).build(),33,MessageValue.newBuilder().setValue(44).build()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Message mapEntry = (Message)builder.getRepeatedField(f(\"int32_to_int32_field\"),i)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "builder.setRepeatedField(f(\"int32_to_int32_field\"),i,mapEntryBuilder.build())@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertEquals(55,message.getInt32ToInt32Field().get(55).intValue())@@@43@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "message = builder.build()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int i = 0@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertHasMapValues(message,\"int32_to_int32_field\",mapForValues(1,2,3,4))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "message = builder.build()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "message = builder.build()@@@44@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(55,message.getInt32ToInt32Field().get(55).intValue())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "setFieldValue(mapEntryBuilder,\"value\",oldKey)@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "message = builder.build()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(55,message.getInt32ToInt32Field().get(55).intValue())@@@47@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i++@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "builder.addRepeatedField(f(\"int32_to_message_field\"),newMapEntry(builder,\"int32_to_message_field\",555,MessageValue.newBuilder().setValue(555).build()))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "int oldValue = ((Integer)getFieldValue(mapEntry,\"value\")).intValue()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "builder.getMutableInt32ToInt32Field().put(3,4)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testReflectionApi['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(11,message.getInt32ToInt32Field().get(22).intValue())@@@45@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "builder.clearField(f(\"int32_to_int32_field\"))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertEquals(22,message.getInt32ToInt32Field().get(11).intValue())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testReflectionApi['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertEquals(666,message.getInt32ToMessageField().get(555).getValue())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(555,message.getInt32ToMessageField().get(555).getValue())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(0,message.getInt32ToMessageField().size())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "message = builder.build()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "TestMap message = builder.build()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "setMapValues(builder,\"int32_to_message_field\",mapForValues(111,MessageValue.newBuilder().setValue(222).build(),333,MessageValue.newBuilder().setValue(444).build()))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "builder.addRepeatedField(f(\"int32_to_int32_field\"),newMapEntry(builder,\"int32_to_int32_field\",55,66))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "setMapValues(builder,\"int32_to_int32_field\",mapForValues(11,22,33,44))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TestMap.Builder builder = TestMap.newBuilder()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "setFieldValue(mapEntryBuilder,\"key\",oldValue)@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "builder.getMutableInt32ToMessageField().put(33,MessageValue.newBuilder().setValue(44).build())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testReflectionApi['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertEquals(66,message.getInt32ToInt32Field().get(55).intValue())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TestMap message = builder.build()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "int oldKey = ((Integer)getFieldValue(mapEntry,\"key\")).intValue()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertHasMapValues(message,\"int32_to_message_field\",mapForValues(11,MessageValue.newBuilder().setValue(22).build(),33,MessageValue.newBuilder().setValue(44).build()))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertEquals(33,message.getInt32ToInt32Field().get(44).intValue())@@@46@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Message.Builder mapEntryBuilder = mapEntry.toBuilder()@@@39@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(44,message.getInt32ToInt32Field().get(33).intValue())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(222,message.getInt32ToMessageField().get(111).getValue())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "builder.getMutableInt32ToInt32Field().put(1,2)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "builder.clearField(f(\"int32_to_int32_field\"))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "builder.addRepeatedField(f(\"int32_to_int32_field\"),newMapEntry(builder,\"int32_to_int32_field\",55,55))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->35 [style = bold, label=""];
14->25 [style = bold, label=""];
25->34 [style = bold, label=""];
37->11 [style = bold, label=""];
38->44 [style = bold, label=""];
10->19 [style = bold, label=""];
32->0 [style = dotted, label="true"];
34->15 [style = bold, label=""];
14->25 [style = solid, label="i"];
25->14 [style = bold, label=""];
25->29 [style = dotted, label="true"];
25->6 [style = bold, label=""];
44->29 [style = solid, label="mapEntryBuilder"];
12->2 [style = bold, label=""];
32->25 [style = dotted, label="true"];
19->23 [style = solid, label="builder"];
0->25 [style = bold, label=""];
30->13 [style = solid, label="i"];
4->8 [style = bold, label=""];
50->2 [style = solid, label="builder"];
32->13 [style = dotted, label="true"];
46->48 [style = solid, label="message"];
25->44 [style = dotted, label="true"];
32->15 [style = dotted, label="true"];
0->25 [style = solid, label="i"];
15->38 [style = bold, label=""];
33->16 [style = bold, label=""];
48->49 [style = bold, label=""];
13->32 [style = bold, label=""];
23->30 [style = bold, label=""];
19->1 [style = solid, label="builder"];
27->12 [style = bold, label=""];
5->33 [style = bold, label=""];
47->48 [style = bold, label=""];
13->32 [style = solid, label="i"];
0->34 [style = solid, label="i"];
19->20 [style = bold, label=""];
14->15 [style = solid, label="mapEntryBuilder"];
40->0 [style = bold, label=""];
38->29 [style = solid, label="oldValue"];
50->12 [style = solid, label="builder"];
14->34 [style = solid, label="mapEntryBuilder"];
13->40 [style = bold, label=""];
16->17 [style = bold, label=""];
17->42 [style = bold, label=""];
52->19 [style = bold, label=""];
25->38 [style = dotted, label="true"];
39->26 [style = bold, label=""];
35->5 [style = bold, label=""];
0->15 [style = solid, label="oldKey"];
25->15 [style = dotted, label="true"];
19->16 [style = solid, label="builder"];
43->27 [style = bold, label=""];
36->37 [style = bold, label=""];
9->1 [style = bold, label=""];
6->7 [style = bold, label=""];
21->4 [style = bold, label=""];
15->3 [style = solid, label="oldKey"];
30->40 [style = solid, label="i"];
18->23 [style = bold, label=""];
32->34 [style = dotted, label="true"];
30->38 [style = solid, label="i"];
44->29 [style = bold, label=""];
11->39 [style = solid, label="message"];
30->32 [style = bold, label=""];
22->28 [style = bold, label=""];
50->17 [style = solid, label="builder"];
14->41 [style = solid, label="i"];
19->43 [style = solid, label="builder"];
14->34 [style = solid, label="i"];
13->38 [style = solid, label="i"];
32->14 [style = dotted, label="true"];
26->21 [style = bold, label=""];
0->41 [style = solid, label="i"];
11->31 [style = bold, label=""];
7->22 [style = bold, label=""];
3->41 [style = bold, label=""];
32->40 [style = bold, label=""];
32->38 [style = dotted, label="true"];
44->3 [style = solid, label="mapEntryBuilder"];
19->50 [style = dashed, label="0"];
31->39 [style = bold, label=""];
13->40 [style = solid, label="i"];
49->11 [style = bold, label=""];
50->16 [style = solid, label="builder"];
46->47 [style = solid, label="message"];
41->14 [style = bold, label=""];
42->18 [style = bold, label=""];
25->34 [style = solid, label="oldValue"];
25->34 [style = dotted, label="true"];
50->46 [style = bold, label=""];
1->43 [style = bold, label=""];
29->3 [style = bold, label=""];
14->34 [style = bold, label=""];
25->14 [style = dotted, label="true"];
25->41 [style = dotted, label="true"];
32->40 [style = dotted, label="true"];
46->47 [style = bold, label=""];
50->21 [style = solid, label="builder"];
19->30 [style = solid, label="builder"];
32->29 [style = bold, label=""];
24->36 [style = bold, label=""];
0->14 [style = solid, label="i"];
50->4 [style = solid, label="builder"];
11->31 [style = solid, label="message"];
30->32 [style = solid, label="i"];
45->50 [style = bold, label=""];
41->51 [style = bold, label=""];
19->33 [style = solid, label="builder"];
8->9 [style = bold, label=""];
25->3 [style = dotted, label="true"];
32->13 [style = bold, label=""];
20->24 [style = bold, label=""];
38->13 [style = bold, label=""];
}
