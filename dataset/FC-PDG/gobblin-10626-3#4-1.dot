digraph {
4 [style = filled, label = "KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "WorkUnitState mockWorkUnitState = getMockWorkUnitState()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "WorkUnitState mockWorkUnitState = getMockWorkUnitState(0L,10L)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,.getName())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,KafkaDeserializerExtractor.Deserializers.STRING.name())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),KafkaDeserializerExtractor.Deserializers.STRING.getSchemaRegistryClass())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testBuiltInStringDeserializer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testCustomDeserializer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testBuiltInStringDeserializer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "mockWorkUnitState.setProp(KafkaSchemaRegistry.KAFKA_SCHEMA_REGISTRY_CLASS,.getName())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(kafkaDecoderExtractor.getKafkaDeserializer().getClass(),)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->3 [style = bold, label=""];
3->8 [style = dashed, label="0"];
6->3 [style = bold, label=""];
5->1 [style = bold, label=""];
2->0 [style = bold, label=""];
9->12 [style = bold, label=""];
1->2 [style = solid, label="mockWorkUnitState"];
4->2 [style = bold, label=""];
1->8 [style = bold, label=""];
2->9 [style = bold, label=""];
6->4 [style = solid, label="mockWorkUnitState"];
0->12 [style = dashed, label="0"];
10->1 [style = bold, label=""];
8->11 [style = bold, label=""];
2->9 [style = dashed, label="0"];
3->4 [style = bold, label=""];
1->6 [style = dashed, label="0"];
11->2 [style = bold, label=""];
7->6 [style = bold, label=""];
1->4 [style = solid, label="mockWorkUnitState"];
}
