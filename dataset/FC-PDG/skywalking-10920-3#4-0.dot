digraph {
5 [style = filled, label = "Assert.assertNotNull(rootObject.get(\"data\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(itemNames.length,response.getActiveChecks().size())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(itemNames.length,activeChecks.size())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "int inx@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Assert.assertTrue(checks.getLastlogsize() >= 0)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "encoder.encode(channelHandlerContext,response,null)@@@19@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "!found@@@15@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertTrue(curCheck.get(\"mtime\").getAsInt() >= 0)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "JsonElement bodyRoot = new Gson().fromJson(body,)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "found = true@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertTrue(curCheck.get(\"lastlogsize\").getAsInt() >= 0)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertZabbixActiveChecksResponseWithEncoded(respBody,itemNames)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertNotNull(body)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "String respBody = decoder.decodeToPayload(channelHandlerContext,(ByteBuf)responses.get(inx + 1))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "String itemNames@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "String itemKey = curCheck.get(\"key\").getAsString()@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "throw new AssertionError(\"Could not found \" + itemName + \" in Active Checks response\")@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "String body@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Objects.equals(checks.getKey(),itemName)@@@8@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "String itemNames@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Objects.equals(itemKey,itemName)@@@15@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertZabbixAgentDataResponse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "throw new AssertionError(\"Could not found \" + itemName + \" in Active Checks response\")@@@23@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertTrue(StringUtil.isNotEmpty(rootObject.get(\"info\").getAsString()))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertZabbixActiveChecksResponse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ZabbixResponse response = (ZabbixResponse)responses.get(inx)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "Assert.assertTrue(checks.getDelay() > 0)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "assertZabbixActiveChecksResponse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "JsonObject curCheck = perCheck.getAsJsonObject()@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "JsonObject rootObject = bodyRoot.getAsJsonObject()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(checks.getMtime() >= 0)@@@11@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(curCheck.get(\"delay\").getAsInt() > 0)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "JsonArray activeChecks = rootObject.getAsJsonArray(\"data\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "String body@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(\"success\",rootObject.get(\"response\").getAsString())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertNotNull(rootObject.get(\"info\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "!found@@@22@@@['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "boolean found = false@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26->21 [style = solid, label="itemNames"];
4->9 [style = bold, label=""];
5->10 [style = bold, label=""];
16->36 [style = bold, label=""];
32->23 [style = bold, label=""];
31->22 [style = bold, label=""];
1->6 [style = solid, label="body"];
22->23 [style = dotted, label="true"];
36->34 [style = bold, label=""];
28->30 [style = bold, label=""];
13->3 [style = dotted, label="true"];
10->34 [style = dashed, label="0"];
6->18 [style = bold, label=""];
17->1 [style = dotted, label="true"];
28->25 [style = dotted, label="true"];
11->26 [style = dashed, label="0"];
30->27 [style = bold, label=""];
4->19 [style = bold, label=""];
1->15 [style = solid, label="body"];
17->11 [style = dotted, label="true"];
8->14 [style = bold, label=""];
27->31 [style = bold, label=""];
22->32 [style = bold, label=""];
15->6 [style = bold, label=""];
20->31 [style = bold, label=""];
37->15 [style = bold, label=""];
13->7 [style = dotted, label="true"];
22->24 [style = dotted, label="true"];
12->9 [style = bold, label=""];
24->22 [style = bold, label=""];
5->36 [style = dashed, label="0"];
29->21 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
20->33 [style = bold, label=""];
30->8 [style = solid, label="response"];
2->13 [style = bold, label=""];
24->20 [style = bold, label=""];
37->35 [style = dotted, label="true"];
20->8 [style = bold, label=""];
20->33 [style = dotted, label="true"];
22->20 [style = bold, label=""];
35->15 [style = solid, label="body"];
19->9 [style = bold, label=""];
25->29 [style = solid, label="inx"];
10->12 [style = bold, label=""];
13->7 [style = bold, label=""];
13->0 [style = dotted, label="true"];
13->8 [style = dotted, label="true"];
28->26 [style = dotted, label="true"];
7->9 [style = dashed, label="0"];
29->21 [style = solid, label="respBody"];
25->30 [style = solid, label="inx"];
0->8 [style = bold, label=""];
9->14 [style = bold, label=""];
17->15 [style = bold, label=""];
16->5 [style = bold, label=""];
33->31 [style = bold, label=""];
14->2 [style = bold, label=""];
8->4 [style = bold, label=""];
22->9 [style = dotted, label="true"];
22->32 [style = dotted, label="true"];
23->9 [style = bold, label=""];
33->8 [style = bold, label=""];
13->14 [style = bold, label=""];
2->13 [style = solid, label="itemKey"];
35->6 [style = solid, label="body"];
9->24 [style = bold, label=""];
8->29 [style = bold, label=""];
11->35 [style = dashed, label="0"];
4->19 [style = dotted, label="true"];
13->4 [style = bold, label=""];
18->16 [style = bold, label=""];
}
