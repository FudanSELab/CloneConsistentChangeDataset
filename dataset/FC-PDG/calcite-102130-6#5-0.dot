digraph {
31 [style = filled, label = "return implementor.result(physType,builder.toBlock())@@@74@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final EnumerableRel child = (EnumerableRel)getInput()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final List<Expression> results = Expressions.list()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "EnumerableRelImplementor implementor@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "results.add(Expressions.condition(keyPhysType.fieldReference(key_,groupCount + j),Expressions.constant(null),Expressions.box(ref)))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final PhysType keyPhysType = inputPhysType.project(groupSet.asList(),getGroupType() != Group.SIMPLE,JavaRowFormat.LIST)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "j++@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final Expression keySelector_ = builder.append(\"keySelector\",inputPhysType.generateSelector(parameter,groupSet.asList(),keyPhysType.getFormat()))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "key_ = Expressions.parameter(keyType,\"key\")@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final BlockBuilder resultBlock = new BlockBuilder()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final PhysType accPhysType = PhysTypeImpl.of(typeFactory,typeFactory.createSyntheticType(aggStateTypes))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final ParameterExpression lambdaFactory = Expressions.parameter(,builder.newName(\"lambdaFactory\"))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "list.add(inputPhysType.generateSelector(parameter,groupSet.asList(),set.asList(),keyPhysType.getFormat()))@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final PhysType inputPhysType = result.physType@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final Expression keySelectors_ = builder.append(\"keySelectors\",Expressions.call(BuiltInMethod.ARRAYS_AS_LIST.method,list))@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final List<AggImpState> aggs = new ArrayList<>(aggCalls.size())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "groupSets@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final int groupCount = getGroupCount()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "throw Util.needToImplement(\"EnumerableSortedAggregate\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "implement['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "builder.add(Expressions.return_(null,Expressions.call(BuiltInMethod.SINGLETON_ENUMERABLE.method,Expressions.call(childExp,BuiltInMethod.AGGREGATE.method,Expressions.call(Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_INITIALIZER.method),BuiltInMethod.FUNCTION0_APPLY.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_ADDER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_SINGLE_GROUP_RESULT_SELECTOR.method,resultSelector)))))@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "getGroupType() != Group.SIMPLE@@@53@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "createAccumulatorAdders(inParameter,aggs,accPhysType,acc_,inputPhysType,builder,implementor,typeFactory)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final BlockBuilder initBlock = new BlockBuilder()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "final Expression resultSelector_ = builder.append(\"resultSelector\",Expressions.lambda(,resultBlock.toBlock(),key_,acc_))@@@48@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Result result = implementor.visitChild(this,0,child,pref)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final List<Expression> list = new ArrayList<>()@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "final Expression resultSelector = builder.append(\"resultSelector\",Expressions.lambda(,resultBlock.toBlock(),requireNonNull(key_,\"key_\"),acc_))@@@59@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "final Expression resultSelector = builder.append(\"resultSelector\",Expressions.lambda(,resultBlock.toBlock(),key_,acc_))@@@59@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "aggs.add(new AggImpState(call.i,call.e,false))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final BlockBuilder builder = new BlockBuilder()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "j < groupCount@@@37@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "builder.add(Expressions.return_(null,Expressions.call(BuiltInMethod.GROUP_BY_MULTIPLE.method,Expressions.list(childExp,keySelectors_,Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_INITIALIZER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_ADDER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_RESULT_SELECTOR.method,resultSelector)).appendIfNotNull(keyPhysType.comparer()))))@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "key_ = null@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "implement['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "declareParentAccumulator(initExpressions,initBlock,accPhysType)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "implementLambdaFactory(builder,inputPhysType,aggs,accumulatorInitializer,hasOrderedCall(aggs),lambdaFactory)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EnumerableRelImplementor implementor@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "final Expression resultSelector_ = builder.append(\"resultSelector\",Expressions.lambda(,resultBlock.toBlock(),requireNonNull(key_,\"key_\"),acc_))@@@71@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "results.add(agg.implementor.implementResult(agg.context,new AggResultContextImpl(resultBlock,agg.call,agg.state,key_,keyPhysType)))@@@43@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "final Expression resultSelector = builder.append(\"resultSelector\",Expressions.lambda(,resultBlock.toBlock(),acc_))@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "results.add(agg.implementor.implementResult(requireNonNull(agg.context,\"agg.context\"),new AggResultContextImpl(resultBlock,agg.call,requireNonNull(agg.state,\"agg.state\"),key_,keyPhysType)))@@@50@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "aggCalls.isEmpty() && groupSet.equals(ImmutableBitSet.range(child.getRowType().getFieldCount()))@@@66@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "!Aggregate.isSimple(this)@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "builder.add(Expressions.return_(null,Expressions.call(inputPhysType.convertTo(childExp,physType.getFormat()),BuiltInMethod.DISTINCT.method,Expressions.list().appendIfNotNull(physType.comparer()))))@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "implement['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "final List<Type> aggStateTypes = createAggStateTypes(initExpressions,initBlock,aggs,typeFactory)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final ParameterExpression inParameter = Expressions.parameter(inputPhysType.getJavaRowType(),\"in\")@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ParameterExpression parameter = Expressions.parameter(inputPhysType.getJavaRowType(),\"a0\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "builder.add(Expressions.return_(null,Expressions.call(childExp,BuiltInMethod.GROUP_BY2.method,Expressions.list(keySelector_,Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_INITIALIZER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_ADDER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_RESULT_SELECTOR.method,resultSelector_)).appendIfNotNull(keyPhysType.comparer()))))@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "implementLambdaFactory(builder,inputPhysType,aggs,accumulatorInitializer,false,lambdaFactory)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "resultBlock.add(physType.record(results))@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "int j = 0@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "groupCount == 0@@@31@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "final List<Expression> initExpressions = new ArrayList<>()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "final Expression comparator = keyPhysType.generateComparator(getTraitSet().getCollation())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "getGroupType() == Group.SIMPLE@@@41@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "builder.add(Expressions.return_(null,Expressions.call(childExp,BuiltInMethod.SORTED_GROUP_BY.method,Expressions.list(keySelector_,Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_INITIALIZER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_ADDER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_RESULT_SELECTOR.method,resultSelector_),comparator))))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "final ParameterExpression acc_ = Expressions.parameter(accPhysType.getJavaRowType(),\"acc\")@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ImmutableBitSet set@@@55@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "final JavaTypeFactory typeFactory = implementor.getTypeFactory()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "groupCount == 0@@@62@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final Expression accumulatorInitializer = builder.append(\"accumulatorInitializer\",Expressions.lambda(,initBlock.toBlock()))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final Type keyType = keyPhysType.getJavaRowType()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Prefer pref@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
55 [style = filled, label = "final ParameterExpression key_@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "results.add(ref)@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "ImmutableBitSet set@@@55@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
69 [style = filled, label = "Prefer pref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "final Expression ref = keyPhysType.fieldReference(key_,j)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "return implementor.result(physType,builder.toBlock())@@@50@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final PhysType physType = PhysTypeImpl.of(typeFactory,getRowType(),pref.preferCustom())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Expression childExp = builder.append(\"child\",result.block)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
54->43 [style = solid, label="typeFactory"];
46->34 [style = bold, label=""];
14->70 [style = solid, label="result"];
4->25 [style = bold, label=""];
14->35 [style = bold, label=""];
25->10 [style = solid, label="lambdaFactory"];
22->37 [style = bold, label=""];
47->48 [style = solid, label="groupCount"];
16->15 [style = dotted, label="false"];
21->60 [style = solid, label="keyPhysType"];
7->31 [style = bold, label=""];
41->40 [style = solid, label="j"];
45->31 [style = bold, label=""];
47->34 [style = solid, label="groupCount"];
9->62 [style = dotted, label="true"];
18->45 [style = bold, label=""];
48->39 [style = bold, label=""];
2->43 [style = solid, label="aggs"];
32->40 [style = solid, label="key_"];
32->60 [style = solid, label="key_"];
30->72 [style = solid, label="inputPhysType"];
23->29 [style = bold, label=""];
12->4 [style = solid, label="inParameter"];
54->4 [style = solid, label="typeFactory"];
49->39 [style = solid, label="acc_"];
52->26 [style = dotted, label="false"];
30->11 [style = bold, label=""];
40->50 [style = solid, label="ref"];
53->64 [style = solid, label="key_"];
71->58 [style = bold, label=""];
7->65 [style = dashed, label="0"];
40->16 [style = bold, label=""];
34->50 [style = dotted, label="true"];
48->39 [style = dotted, label="true"];
67->68 [style = bold, label=""];
56->62 [style = dashed, label="0"];
11->32 [style = solid, label="parameter"];
15->41 [style = bold, label=""];
47->52 [style = solid, label="groupCount"];
49->4 [style = bold, label=""];
48->18 [style = bold, label=""];
28->42 [style = bold, label=""];
53->60 [style = bold, label=""];
53->38 [style = bold, label=""];
26->32 [style = solid, label="keyType"];
52->34 [style = dotted, label="false"];
9->24 [style = bold, label=""];
59->54 [style = bold, label=""];
20->36 [style = solid, label="accumulatorInitializer"];
60->23 [style = bold, label=""];
25->72 [style = bold, label=""];
9->28 [style = dotted, label="true"];
49->4 [style = solid, label="acc_"];
36->6 [style = bold, label=""];
24->28 [style = bold, label=""];
40->50 [style = bold, label=""];
18->58 [style = dotted, label="false"];
26->32 [style = bold, label=""];
53->58 [style = solid, label="key_"];
10->31 [style = bold, label=""];
35->65 [style = solid, label="childExp"];
59->61 [style = dotted, label="true"];
20->72 [style = solid, label="accumulatorInitializer"];
18->64 [style = dotted, label="false"];
66->67 [style = bold, label=""];
25->36 [style = bold, label=""];
57->14 [style = solid, label="pref"];
52->46 [style = dotted, label="false"];
30->36 [style = solid, label="inputPhysType"];
46->15 [style = solid, label="j"];
9->48 [style = bold, label=""];
53->62 [style = solid, label="key_"];
51->3 [style = solid, label="initExpressions"];
55->26 [style = bold, label=""];
40->15 [style = solid, label="ref"];
9->42 [style = dotted, label="true"];
66->69 [style = dotted, label="true"];
35->45 [style = solid, label="childExp"];
53->56 [style = solid, label="key_"];
11->28 [style = solid, label="parameter"];
29->71 [style = bold, label=""];
49->64 [style = solid, label="acc_"];
18->45 [style = dotted, label="true"];
2->4 [style = solid, label="aggs"];
9->24 [style = dotted, label="true"];
37->14 [style = solid, label="child"];
5->4 [style = solid, label="accPhysType"];
1->4 [style = solid, label="implementor"];
11->49 [style = solid, label="parameter"];
42->56 [style = bold, label=""];
47->2 [style = bold, label=""];
32->56 [style = solid, label="key_"];
32->64 [style = solid, label="key_"];
29->64 [style = bold, label=""];
8->23 [style = solid, label="results"];
6->38 [style = solid, label="resultBlock"];
62->17 [style = bold, label=""];
47->15 [style = solid, label="groupCount"];
54->19 [style = solid, label="typeFactory"];
38->60 [style = dashed, label="0"];
34->38 [style = bold, label=""];
8->55 [style = bold, label=""];
50->41 [style = bold, label=""];
51->33 [style = bold, label=""];
18->7 [style = dotted, label="false"];
58->64 [style = dashed, label="0"];
5->3 [style = solid, label="accPhysType"];
41->15 [style = solid, label="j"];
46->40 [style = solid, label="j"];
52->26 [style = bold, label=""];
6->60 [style = solid, label="resultBlock"];
21->47 [style = bold, label=""];
25->65 [style = solid, label="lambdaFactory"];
32->46 [style = bold, label=""];
34->40 [style = bold, label=""];
67->54 [style = bold, label=""];
22->72 [style = solid, label="builder"];
49->62 [style = solid, label="acc_"];
48->18 [style = dotted, label="false"];
11->21 [style = bold, label=""];
13->54 [style = bold, label=""];
46->34 [style = solid, label="j"];
35->7 [style = solid, label="childExp"];
13->1 [style = dotted, label="true"];
54->22 [style = bold, label=""];
52->53 [style = dotted, label="true"];
11->12 [style = solid, label="parameter"];
16->50 [style = bold, label=""];
48->10 [style = dotted, label="true"];
11->25 [style = solid, label="parameter"];
12->49 [style = bold, label=""];
9->44 [style = dotted, label="true"];
36->72 [style = dashed, label="0"];
32->38 [style = solid, label="key_"];
2->0 [style = bold, label=""];
58->7 [style = bold, label=""];
43->5 [style = bold, label=""];
58->65 [style = solid, label="resultSelector_"];
33->43 [style = bold, label=""];
2->36 [style = solid, label="aggs"];
14->31 [style = solid, label="result"];
2->72 [style = solid, label="aggs"];
42->62 [style = bold, label=""];
55->52 [style = bold, label=""];
41->34 [style = bold, label=""];
58->65 [style = bold, label=""];
22->4 [style = solid, label="builder"];
34->40 [style = dotted, label="true"];
52->32 [style = dotted, label="false"];
16->15 [style = bold, label=""];
49->56 [style = solid, label="acc_"];
22->36 [style = solid, label="builder"];
35->10 [style = solid, label="childExp"];
41->34 [style = solid, label="j"];
9->63 [style = dotted, label="true"];
52->53 [style = bold, label=""];
65->70 [style = bold, label=""];
16->50 [style = dotted, label="true"];
32->15 [style = solid, label="key_"];
69->14 [style = solid, label="pref"];
29->58 [style = bold, label=""];
54->5 [style = solid, label="typeFactory"];
24->42 [style = solid, label="list"];
53->60 [style = solid, label="key_"];
17->31 [style = bold, label=""];
46->41 [style = solid, label="j"];
71->65 [style = solid, label="comparator"];
35->19 [style = bold, label=""];
9->17 [style = dotted, label="true"];
18->29 [style = dotted, label="false"];
38->23 [style = bold, label=""];
72->6 [style = bold, label=""];
49->58 [style = solid, label="acc_"];
33->3 [style = solid, label="initBlock"];
30->4 [style = solid, label="inputPhysType"];
33->43 [style = solid, label="initBlock"];
9->48 [style = dotted, label="false"];
56->17 [style = bold, label=""];
21->38 [style = solid, label="keyPhysType"];
9->27 [style = dotted, label="true"];
32->62 [style = solid, label="key_"];
25->36 [style = solid, label="lambdaFactory"];
57->4 [style = solid, label="implementor"];
64->7 [style = bold, label=""];
53->38 [style = solid, label="key_"];
61->14 [style = solid, label="pref"];
43->5 [style = solid, label="aggStateTypes"];
19->70 [style = solid, label="physType"];
37->14 [style = bold, label=""];
3->20 [style = bold, label=""];
18->29 [style = bold, label=""];
34->60 [style = bold, label=""];
9->56 [style = dotted, label="true"];
51->43 [style = solid, label="initExpressions"];
13->57 [style = dotted, label="true"];
66->57 [style = dotted, label="true"];
67->68 [style = dotted, label="true"];
19->30 [style = solid, label="physType"];
34->41 [style = dotted, label="true"];
0->51 [style = bold, label=""];
6->8 [style = bold, label=""];
20->12 [style = bold, label=""];
39->10 [style = bold, label=""];
59->57 [style = dotted, label="true"];
29->65 [style = solid, label="keySelector_"];
39->10 [style = solid, label="resultSelector"];
19->31 [style = solid, label="physType"];
34->16 [style = dotted, label="true"];
11->29 [style = solid, label="parameter"];
23->9 [style = bold, label=""];
68->54 [style = bold, label=""];
25->72 [style = solid, label="lambdaFactory"];
32->58 [style = solid, label="key_"];
19->30 [style = bold, label=""];
}
