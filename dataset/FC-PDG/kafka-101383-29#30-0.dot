digraph {
2 [style = filled, label = "final KeyValueTimestamp(( expected = {new KeyValueTimestamp<>(2,10,0),new KeyValueTimestamp<>(20,110,0),new KeyValueTimestamp<>(200,1110,0),new KeyValueTimestamp<>(2000,11110,0),new KeyValueTimestamp<>(-1,2,2),new KeyValueTimestamp<>(-1,3,3)}@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "driver.advanceWallClockTime(Duration.ofMillis(2))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testTransformWithNewDriverAndPunctuator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final int(( expectedKeys = {1,10,100,1000}@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testTransform['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final TestInputTopic<Integer,Integer> inputTopic = driver.createInputTopic(TOPIC_NAME,new IntegerSerializer(),new IntegerSerializer())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final KStream<Integer,Integer> stream = builder.stream(TOPIC_NAME,Consumed.with(Serdes.Integer(),Serdes.Integer()))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "driver.advanceWallClockTime(Duration.ofMillis(1))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i < expected.length@@@36@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(expected(i(,processor.theCapturedProcessor().processed().get(i))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "stream.transform(transformerSupplier).process(processor)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(expected.length,processor.theCapturedProcessor().processed().size())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testTransform['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final TransformerSupplier<Number,Number,KeyValue<Integer,Integer>> transformerSupplier = null@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int i = 0@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "inputTopic.pipeInput(expectedKey,expectedKey * 10,expectedKey / 2L)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "inputTopic.pipeInput(expectedKey,expectedKey * 10,0L)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(6,processor.theCapturedProcessor().processed().size())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final MockProcessorSupplier<Integer,Integer> processor = new MockProcessorSupplier<>()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i++@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->3 [style = bold, label=""];
7->8 [style = bold, label=""];
2->4 [style = bold, label=""];
2->13 [style = solid, label="expected"];
15->13 [style = dotted, label="true"];
18->2 [style = bold, label=""];
20->6 [style = bold, label=""];
11->15 [style = solid, label="i"];
12->2 [style = bold, label=""];
10->13 [style = solid, label="i"];
15->11 [style = dotted, label="true"];
14->9 [style = bold, label=""];
2->10 [style = bold, label=""];
11->15 [style = bold, label=""];
1->14 [style = bold, label=""];
0->1 [style = bold, label=""];
10->15 [style = solid, label="i"];
8->3 [style = bold, label=""];
1->9 [style = solid, label="processor"];
11->13 [style = solid, label="i"];
5->0 [style = bold, label=""];
13->11 [style = bold, label=""];
8->19 [style = dashed, label="0"];
17->6 [style = bold, label=""];
3->12 [style = bold, label=""];
10->11 [style = solid, label="i"];
16->6 [style = bold, label=""];
15->13 [style = bold, label=""];
6->5 [style = bold, label=""];
12->18 [style = bold, label=""];
4->10 [style = bold, label=""];
10->15 [style = bold, label=""];
7->19 [style = bold, label=""];
9->7 [style = bold, label=""];
}
