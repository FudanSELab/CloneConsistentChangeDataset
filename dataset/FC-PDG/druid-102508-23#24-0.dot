digraph {
43 [style = filled, label = "i++@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "i < records.size()@@@38@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@52@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2008/P1D\",0,ImmutableList.of(\"a\")),sdd(\"2009/P1D\",0,ImmutableList.of(\"b\")),sdd(\"2010/P1D\",0,ImmutableList.of(\"c\")),sdd(\"2011/P1D\",0,ImmutableList.of(\"d\",\"e\"),ImmutableList.of(\"d\",\"h\")),sdd(\"2011/P1D\",1,ImmutableList.of(\"h\"),ImmutableList.of(\"e\")),sdd(\"2012/P1D\",0,ImmutableList.of(\"g\")),sdd(\"2013/P1D\",0,ImmutableList.of(\"f\"))),publishedDescriptors())@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
65 [style = filled, label = "i < numToAdd@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@47@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "kafkaProducer.beginTransaction()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,currentOffsets,ImmutableSet.of())))))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "SegmentDescriptor desc4 = sd(\"2011/P1D\",0)@@@57@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "SegmentDescriptor desc6 = sd(\"2012/P1D\",0)@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(2)))@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "kafkaProducer.commitTransaction()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "SegmentDescriptor desc5 = sd(\"2011/P1D\",1)@@@58@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@54@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2009/P1D\",0)@@@55@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "maxTotalRows = 3L@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "int numToAdd = records.size() - 2@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))))@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "SegmentDescriptor desc7 = sd(\"2013/P1D\",0)@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "int i = 0@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@27@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions))))@@@49@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "int i = numToAdd@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "kafkaProducer.beginTransaction()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(5)))@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L,1,0L))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(6)))@@@71@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@53@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "insertData()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2009/P1D\",0)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
63 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@51@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@25@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "i++@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Thread.sleep(10)@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,0L))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "kafkaProducer.commitTransaction()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,3L,1,0L))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Thread.sleep(10)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "kafkaProducer.initTransactions()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@31@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,4L,1,2L))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "kafkaProducer.initTransactions()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Thread.sleep(10)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2010/P1D\",0)@@@56@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(checkpoint2.getPartitionSequenceNumberMap(),nextOffsets)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "SegmentDescriptor desc7 = sd(\"2013/P1D\",0)@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "SegmentDescriptor desc4 = sd(\"2011/P1D\",0)@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29->15 [style = bold, label=""];
29->36 [style = solid, label="desc6"];
52->64 [style = bold, label=""];
65->64 [style = dotted, label="true"];
43->55 [style = bold, label=""];
2->76 [style = dashed, label="0"];
1->0 [style = solid, label="consumerProps"];
33->38 [style = solid, label="currentOffsets"];
16->17 [style = dotted, label="true"];
1->20 [style = bold, label=""];
35->26 [style = dotted, label="true"];
44->82 [style = bold, label=""];
62->65 [style = solid, label="i"];
25->6 [style = bold, label=""];
42->29 [style = bold, label=""];
9->37 [style = bold, label=""];
28->14 [style = bold, label=""];
26->22 [style = bold, label=""];
56->54 [style = bold, label=""];
66->47 [style = bold, label=""];
76->73 [style = bold, label=""];
73->80 [style = bold, label=""];
55->57 [style = bold, label=""];
8->32 [style = solid, label="startPartitions"];
19->9 [style = bold, label=""];
51->69 [style = bold, label=""];
65->52 [style = dotted, label="true"];
0->24 [style = bold, label=""];
62->65 [style = bold, label=""];
65->68 [style = bold, label=""];
36->18 [style = bold, label=""];
26->35 [style = bold, label=""];
26->36 [style = solid, label="desc1"];
30->0 [style = solid, label="baseSequenceName"];
4->36 [style = solid, label="desc4"];
45->42 [style = bold, label=""];
7->72 [style = solid, label="desc1"];
13->72 [style = solid, label="desc2"];
55->43 [style = dotted, label="true"];
53->38 [style = bold, label=""];
32->11 [style = bold, label=""];
17->16 [style = bold, label=""];
6->32 [style = bold, label=""];
11->16 [style = bold, label=""];
5->10 [style = bold, label=""];
22->33 [style = bold, label=""];
48->49 [style = bold, label=""];
47->72 [style = solid, label="desc7"];
4->38 [style = bold, label=""];
5->72 [style = solid, label="desc3"];
50->70 [style = bold, label=""];
38->36 [style = solid, label="desc5"];
5->61 [style = solid, label="desc3"];
82->48 [style = bold, label=""];
16->17 [style = bold, label=""];
21->25 [style = bold, label=""];
64->65 [style = solid, label="i"];
1->20 [style = solid, label="currentOffsets"];
29->71 [style = bold, label=""];
54->58 [style = bold, label=""];
69->62 [style = bold, label=""];
46->60 [style = bold, label=""];
68->1 [style = bold, label=""];
35->40 [style = bold, label=""];
41->30 [style = bold, label=""];
10->72 [style = solid, label="desc4"];
71->36 [style = bold, label=""];
3->7 [style = bold, label=""];
36->78 [style = bold, label=""];
13->5 [style = bold, label=""];
74->77 [style = bold, label=""];
38->46 [style = bold, label=""];
27->72 [style = solid, label="desc5"];
47->61 [style = solid, label="desc7"];
26->40 [style = dashed, label="0"];
33->78 [style = solid, label="currentOffsets"];
55->57 [style = dotted, label="true"];
13->61 [style = solid, label="desc2"];
28->36 [style = solid, label="startPartitions"];
15->36 [style = bold, label=""];
46->60 [style = dotted, label="true"];
46->56 [style = bold, label=""];
33->36 [style = solid, label="desc3"];
18->34 [style = bold, label=""];
22->36 [style = solid, label="desc2"];
0->24 [style = solid, label="task"];
58->55 [style = solid, label="i"];
33->4 [style = bold, label=""];
15->36 [style = solid, label="desc7"];
66->72 [style = solid, label="desc6"];
62->64 [style = solid, label="i"];
70->45 [style = solid, label="nextOffsets"];
7->61 [style = solid, label="desc1"];
23->0 [style = bold, label=""];
25->77 [style = dashed, label="0"];
80->51 [style = bold, label=""];
27->61 [style = solid, label="desc5"];
70->42 [style = solid, label="nextOffsets"];
8->23 [style = solid, label="startPartitions"];
40->39 [style = bold, label=""];
58->43 [style = solid, label="i"];
72->63 [style = bold, label=""];
65->52 [style = bold, label=""];
16->1 [style = bold, label=""];
64->65 [style = bold, label=""];
81->75 [style = bold, label=""];
80->58 [style = solid, label="numToAdd"];
14->31 [style = bold, label=""];
78->18 [style = bold, label=""];
80->65 [style = solid, label="numToAdd"];
20->53 [style = dashed, label="0"];
57->43 [style = bold, label=""];
55->50 [style = bold, label=""];
63->61 [style = bold, label=""];
37->8 [style = bold, label=""];
33->53 [style = solid, label="currentOffsets"];
35->26 [style = bold, label=""];
70->45 [style = bold, label=""];
75->67 [style = bold, label=""];
21->74 [style = dashed, label="0"];
6->32 [style = solid, label="endPartitions"];
7->13 [style = bold, label=""];
49->81 [style = bold, label=""];
32->11 [style = solid, label="task"];
2->19 [style = bold, label=""];
31->23 [style = bold, label=""];
24->35 [style = bold, label=""];
23->0 [style = solid, label="endPartitions"];
10->27 [style = bold, label=""];
31->71 [style = dashed, label="0"];
38->29 [style = bold, label=""];
61->79 [style = bold, label=""];
20->28 [style = bold, label=""];
77->23 [style = bold, label=""];
35->33 [style = bold, label=""];
12->30 [style = bold, label=""];
47->72 [style = bold, label=""];
66->61 [style = solid, label="desc6"];
58->55 [style = bold, label=""];
9->32 [style = solid, label="consumerProps"];
60->46 [style = bold, label=""];
33->53 [style = bold, label=""];
30->32 [style = solid, label="baseSequenceName"];
10->61 [style = solid, label="desc4"];
34->3 [style = bold, label=""];
30->76 [style = bold, label=""];
1->28 [style = solid, label="currentOffsets"];
8->21 [style = bold, label=""];
59->30 [style = bold, label=""];
27->66 [style = bold, label=""];
30->2 [style = bold, label=""];
79->44 [style = bold, label=""];
43->55 [style = solid, label="i"];
28->74 [style = bold, label=""];
28->0 [style = solid, label="startPartitions"];
}
