digraph {
18 [style = filled, label = "context.pollUntilResponse()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(oldestSnapshotId.epoch,partitionResponse.snapshotId().epoch())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "context.deliverRequest(context.fetchRequest(epoch,syncNodeId,context.log.endOffset().offset,epoch,0))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "context.assertSentFetchResponse(Errors.NONE,epoch,OptionalInt.of(localId))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "context.pollUntilResponse()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testFetchRequestAtLogStartOffsetWithInvalidEpoch['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "FetchResponseData.FetchablePartitionResponse partitionResponse = context.assertSentFetchResponse()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(epoch,partitionResponse.currentLeader().leaderEpoch())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int syncNodeId = otherNodeId + 1@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "context.client.poll()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testFetchRequestAtLogStartOffsetWithValidEpoch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "context.assertSentFetchResponse(Errors.NONE,epoch,OptionalInt.of(localId))@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "snapshot.freeze()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "RaftClientTestContext context = new RaftClientTestContext.Builder(localId,voters).appendToLog(oldestSnapshotId.epoch,Arrays.asList(\"a\",\"b\",\"c\")).appendToLog(oldestSnapshotId.epoch,Arrays.asList(\"d\",\"e\",\"f\")).appendToLog(oldestSnapshotId.epoch + 2,Arrays.asList(\"g\",\"h\",\"i\")).withAppendLingerMs(1).build()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "context.deliverRequest(context.fetchRequest(epoch,otherNodeId,oldestSnapshotId.offset,oldestSnapshotId.epoch + 1,0))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "RaftClientTestContext context = new RaftClientTestContext.Builder(localId,voters).appendToLog(oldestSnapshotId.offset,oldestSnapshotId.epoch,Arrays.asList(\"a\",\"b\",\"c\")).appendToLog(oldestSnapshotId.offset + 3,oldestSnapshotId.epoch + 2,Arrays.asList(\"a\",\"b\",\"c\")).withAppendLingerMs(1).build()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(Errors.NONE,Errors.forCode(partitionResponse.errorCode()))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "int otherNodeId = localId + 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "OffsetAndEpoch oldestSnapshotId = new OffsetAndEpoch(3,2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(oldestSnapshotId.offset,partitionResponse.snapshotId().endOffset())@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "context.becomeLeader()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testFetchRequestAtLogStartOffsetWithValidEpoch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "context.deliverRequest(context.fetchRequest(epoch,otherNodeId,oldestSnapshotId.offset,oldestSnapshotId.epoch,0))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Set<Integer> voters = Utils.mkSet(localId,otherNodeId,syncNodeId)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int localId = 0@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(localId,partitionResponse.currentLeader().leaderId())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(oldestSnapshotId.epoch + 2 + 1,epoch)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(context.log.endOffset().offset,context.client.highWatermark().getAsLong())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int epoch = context.currentEpoch()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->20 [style = dashed, label="0"];
11->28 [style = bold, label=""];
22->25 [style = bold, label=""];
0->9 [style = bold, label=""];
1->25 [style = solid, label="epoch"];
4->14 [style = bold, label=""];
7->1 [style = bold, label=""];
12->5 [style = solid, label="otherNodeId"];
1->2 [style = solid, label="epoch"];
12->9 [style = solid, label="otherNodeId"];
1->28 [style = solid, label="epoch"];
0->9 [style = solid, label="syncNodeId"];
1->23 [style = solid, label="epoch"];
16->7 [style = bold, label=""];
2->27 [style = dashed, label="0"];
14->10 [style = bold, label=""];
12->0 [style = solid, label="otherNodeId"];
13->4 [style = solid, label="localId"];
3->16 [style = bold, label=""];
13->2 [style = solid, label="localId"];
5->17 [style = bold, label=""];
12->0 [style = bold, label=""];
15->18 [style = bold, label=""];
6->15 [style = bold, label=""];
1->15 [style = solid, label="epoch"];
25->24 [style = bold, label=""];
11->5 [style = bold, label=""];
3->20 [style = bold, label=""];
1->6 [style = bold, label=""];
13->12 [style = bold, label=""];
27->26 [style = bold, label=""];
0->15 [style = solid, label="syncNodeId"];
1->6 [style = solid, label="epoch"];
18->4 [style = bold, label=""];
17->2 [style = bold, label=""];
19->13 [style = bold, label=""];
23->22 [style = bold, label=""];
5->28 [style = dashed, label="0"];
26->23 [style = bold, label=""];
13->12 [style = solid, label="localId"];
13->22 [style = solid, label="localId"];
9->3 [style = bold, label=""];
28->17 [style = bold, label=""];
12->28 [style = solid, label="otherNodeId"];
1->4 [style = solid, label="epoch"];
17->27 [style = bold, label=""];
20->7 [style = bold, label=""];
13->9 [style = solid, label="localId"];
1->5 [style = solid, label="epoch"];
8->13 [style = bold, label=""];
21->13 [style = bold, label=""];
10->11 [style = bold, label=""];
}
