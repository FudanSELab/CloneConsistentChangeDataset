digraph {
10 [style = filled, label = "DataOutputStream out = getDataOutput()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(value,value2)@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testCharacter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Character value = (char)('A' + getRandom().nextInt('Z' - 'A'))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testInteger['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "char c = (char)('A' + getRandom().nextInt('Z' - 'A'))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Character value = new Character(c)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Integer value = new Integer(getRandom().nextInt())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Integer value2 = DataSerializer.readInteger(in)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "out.flush()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "DataSerializer.writeInteger(value,out)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "DataOutputStream out = getDataOutput()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "DataInput in = getDataInput()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testCharacter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "out.flush()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(value,value2)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(value,value2)@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = solid, label="in"];
10->4 [style = solid, label="out"];
3->7 [style = solid, label="c"];
12->16 [style = solid, label="value"];
2->6 [style = bold, label=""];
2->6 [style = solid, label="value2"];
4->15 [style = bold, label=""];
1->3 [style = bold, label=""];
7->0 [style = solid, label="value"];
0->4 [style = dashed, label="0"];
7->4 [style = bold, label=""];
9->10 [style = bold, label=""];
5->2 [style = solid, label="value2"];
11->9 [style = bold, label=""];
4->0 [style = bold, label=""];
14->4 [style = solid, label="out"];
5->16 [style = bold, label=""];
2->5 [style = dashed, label="0"];
5->2 [style = bold, label=""];
13->12 [style = bold, label=""];
4->0 [style = solid, label="out"];
12->4 [style = solid, label="value"];
8->5 [style = bold, label=""];
5->16 [style = solid, label="value2"];
3->7 [style = bold, label=""];
3->9 [style = dashed, label="0"];
3->12 [style = dashed, label="0"];
0->8 [style = bold, label=""];
12->14 [style = bold, label=""];
10->4 [style = bold, label=""];
7->6 [style = solid, label="value"];
9->2 [style = solid, label="value"];
15->8 [style = bold, label=""];
9->4 [style = solid, label="value"];
14->4 [style = bold, label=""];
8->5 [style = solid, label="in"];
}
