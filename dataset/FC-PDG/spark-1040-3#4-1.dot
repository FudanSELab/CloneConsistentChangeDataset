digraph {
14 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytesBlock(mb),HiveHasher.hashUnsafeBytesBlock(mb))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Set<Long> hashcodes = new HashSet<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "byte(( strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "randomizedStressTestPaddedStrings['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytes(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),HiveHasher.hashUnsafeBytes(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytes(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(paddedBytes)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytesBlock(mb))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "randomizedStressTestPaddedStrings['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "System.arraycopy(strBytes,0,paddedBytes,0,strBytes.length)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int size = 64000@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "i < size@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Set<Integer> hashcodes = new HashSet<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "i++@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int byteArrSize = 8@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "byte(( paddedBytes = new byte((((@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int i = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "randomizedStressTestPaddedStrings['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
2->17 [style = bold, label=""];
5->17 [style = dotted, label="true"];
5->22 [style = dotted, label="true"];
5->14 [style = dotted, label="true"];
18->3 [style = bold, label=""];
0->9 [style = bold, label=""];
7->11 [style = bold, label=""];
0->21 [style = solid, label="byteArrSize"];
10->21 [style = dashed, label="0"];
3->5 [style = solid, label="i"];
5->10 [style = dotted, label="true"];
5->1 [style = dotted, label="true"];
1->5 [style = solid, label="i"];
16->7 [style = bold, label=""];
8->22 [style = solid, label="paddedBytes"];
3->1 [style = solid, label="i"];
5->0 [style = dotted, label="true"];
5->12 [style = dotted, label="true"];
0->22 [style = solid, label="byteArrSize"];
9->8 [style = bold, label=""];
2->10 [style = bold, label=""];
12->1 [style = bold, label=""];
5->15 [style = dotted, label="true"];
7->19 [style = solid, label="size"];
7->4 [style = solid, label="size"];
5->19 [style = bold, label=""];
8->17 [style = solid, label="paddedBytes"];
3->5 [style = bold, label=""];
17->15 [style = solid, label="mb"];
12->14 [style = dashed, label="0"];
5->0 [style = bold, label=""];
8->2 [style = bold, label=""];
11->3 [style = bold, label=""];
17->14 [style = bold, label=""];
10->12 [style = bold, label=""];
2->21 [style = bold, label=""];
21->22 [style = bold, label=""];
8->12 [style = solid, label="paddedBytes"];
5->13 [style = bold, label=""];
7->13 [style = solid, label="size"];
5->4 [style = bold, label=""];
11->18 [style = dashed, label="0"];
8->10 [style = solid, label="paddedBytes"];
8->2 [style = solid, label="paddedBytes"];
7->5 [style = solid, label="size"];
12->22 [style = dashed, label="0"];
7->18 [style = bold, label=""];
8->21 [style = solid, label="paddedBytes"];
5->9 [style = dotted, label="true"];
4->19 [style = dashed, label="0"];
9->2 [style = solid, label="strBytes"];
0->10 [style = solid, label="byteArrSize"];
14->15 [style = bold, label=""];
5->21 [style = dotted, label="true"];
22->1 [style = bold, label=""];
20->7 [style = bold, label=""];
6->7 [style = bold, label=""];
5->8 [style = dotted, label="true"];
17->14 [style = solid, label="mb"];
0->12 [style = solid, label="byteArrSize"];
5->2 [style = dotted, label="true"];
15->1 [style = bold, label=""];
}
