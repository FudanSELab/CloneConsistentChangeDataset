digraph {
10 [style = filled, label = "awaitTimeout.untilAsserted(null)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "CheckResult result = storage.check()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "awaitTimeout.untilAsserted(null)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(result.error()).isInstanceOf()@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "await().timeout(300,TimeUnit.MILLISECONDS).untilAsserted(null)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "notHealthyThenHealthyThenNotHealthy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "notHealthyThenHealthyThenNotHealthy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "server2Health.setHealthy(false)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "context = new AnnotationConfigApplicationContext()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "wrongScheme['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "CheckResult result = storage.check()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "initWithHosts(\"https://localhost:\" + server1.httpPort())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "server1Health.setHealthy(false)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "await().timeout(300,TimeUnit.MILLISECONDS).untilAsserted(null)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertThat(result.ok()).isFalse()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "context.close()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "server2Health.setHealthy(false)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->0 [style = bold, label=""];
0->3 [style = bold, label=""];
3->9 [style = bold, label=""];
9->5 [style = bold, label=""];
5->10 [style = bold, label=""];
1->4 [style = bold, label=""];
7->5 [style = bold, label=""];
16->0 [style = bold, label=""];
13->15 [style = bold, label=""];
6->10 [style = dashed, label="0"];
4->2 [style = bold, label=""];
14->13 [style = bold, label=""];
5->6 [style = bold, label=""];
3->12 [style = bold, label=""];
3->7 [style = bold, label=""];
15->16 [style = bold, label=""];
7->9 [style = dashed, label="0"];
2->8 [style = bold, label=""];
11->4 [style = bold, label=""];
}
