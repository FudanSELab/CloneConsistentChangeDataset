digraph {
43 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions))))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2008/P1D\",0,ImmutableList.of(\"a\")),sdd(\"2009/P1D\",0,ImmutableList.of(\"b\"))),publishedDescriptors())@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "kafkaProducer.beginTransaction()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,currentOffsets,ImmutableSet.of())))))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@25@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(2)))@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "SegmentDescriptor desc7 = sd(\"2013/P1D\",0)@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "kafkaProducer.beginTransaction()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "Thread.sleep(10)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "kafkaProducer.commitTransaction()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "int i = 0@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "insertData()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@27@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
82 [style = filled, label = "SegmentDescriptor desc4 = sd(\"2011/P1D\",0)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "i++@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@47@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Thread.sleep(10)@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2009/P1D\",0)@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "SegmentDescriptor desc5 = sd(\"2011/P1D\",1)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "i++@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "i < records.size()@@@38@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testTimeBasedIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "i < numToAdd@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(5)))@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,1L,1,0L))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@31@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,0L))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2009/P1D\",0)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
61 [style = filled, label = "kafkaProducer.commitTransaction()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(checkpoint2.getPartitionSequenceNumberMap(),nextOffsets)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "kafkaProducer.initTransactions()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,3L,1,0L))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Thread.sleep(10)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions))))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "maxTotalRows = 3L@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))))@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "int i = numToAdd@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "SegmentDescriptor desc6 = sd(\"2012/P1D\",0)@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "kafkaProducer.initTransactions()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "int numToAdd = records.size() - 2@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2010/P1D\",0)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(6)))@@@71@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82->41 [style = solid, label="desc4"];
39->80 [style = bold, label=""];
74->69 [style = bold, label=""];
49->59 [style = bold, label=""];
4->25 [style = bold, label=""];
22->26 [style = solid, label="task"];
78->61 [style = bold, label=""];
46->5 [style = bold, label=""];
17->9 [style = bold, label=""];
78->40 [style = dotted, label="true"];
21->75 [style = bold, label=""];
66->41 [style = solid, label="desc7"];
39->54 [style = bold, label=""];
81->39 [style = solid, label="i"];
12->57 [style = solid, label="startPartitions"];
15->60 [style = dashed, label="0"];
13->18 [style = solid, label="currentOffsets"];
21->73 [style = solid, label="currentOffsets"];
7->14 [style = bold, label=""];
21->75 [style = solid, label="currentOffsets"];
72->65 [style = solid, label="i"];
15->11 [style = bold, label=""];
11->74 [style = dashed, label="0"];
72->78 [style = solid, label="i"];
0->24 [style = bold, label=""];
41->67 [style = bold, label=""];
31->30 [style = bold, label=""];
47->51 [style = bold, label=""];
52->41 [style = solid, label="desc2"];
73->71 [style = bold, label=""];
39->81 [style = dotted, label="true"];
82->55 [style = solid, label="desc4"];
10->14 [style = solid, label="startPartitions"];
59->81 [style = solid, label="i"];
1->58 [style = dashed, label="0"];
28->5 [style = bold, label=""];
70->82 [style = bold, label=""];
21->19 [style = bold, label=""];
68->41 [style = solid, label="desc1"];
23->31 [style = dashed, label="0"];
14->22 [style = bold, label=""];
18->12 [style = bold, label=""];
38->53 [style = bold, label=""];
7->48 [style = dashed, label="0"];
54->81 [style = bold, label=""];
20->31 [style = bold, label=""];
59->39 [style = bold, label=""];
78->40 [style = bold, label=""];
66->41 [style = bold, label=""];
5->17 [style = bold, label=""];
60->74 [style = bold, label=""];
65->78 [style = bold, label=""];
3->10 [style = bold, label=""];
12->29 [style = bold, label=""];
82->45 [style = bold, label=""];
20->23 [style = bold, label=""];
8->6 [style = solid, label="consumerProps"];
2->21 [style = bold, label=""];
56->50 [style = bold, label=""];
44->68 [style = bold, label=""];
23->21 [style = solid, label="desc1"];
58->42 [style = bold, label=""];
58->72 [style = solid, label="numToAdd"];
27->64 [style = bold, label=""];
34->38 [style = bold, label=""];
50->72 [style = bold, label=""];
13->22 [style = solid, label="consumerProps"];
9->1 [style = bold, label=""];
40->65 [style = bold, label=""];
33->58 [style = bold, label=""];
2->21 [style = solid, label="desc2"];
69->22 [style = solid, label="endPartitions"];
12->60 [style = bold, label=""];
26->20 [style = bold, label=""];
13->18 [style = bold, label=""];
24->13 [style = bold, label=""];
59->39 [style = solid, label="i"];
22->26 [style = bold, label=""];
13->12 [style = solid, label="currentOffsets"];
23->20 [style = bold, label=""];
77->44 [style = bold, label=""];
70->55 [style = solid, label="desc3"];
68->52 [style = bold, label=""];
1->8 [style = bold, label=""];
81->39 [style = bold, label=""];
58->39 [style = solid, label="numToAdd"];
51->4 [style = bold, label=""];
20->77 [style = dashed, label="0"];
16->24 [style = bold, label=""];
8->3 [style = bold, label=""];
18->75 [style = dashed, label="0"];
69->22 [style = bold, label=""];
24->16 [style = dotted, label="true"];
37->66 [style = bold, label=""];
78->65 [style = dotted, label="true"];
26->71 [style = dashed, label="0"];
52->70 [style = bold, label=""];
20->23 [style = dotted, label="true"];
45->41 [style = solid, label="desc5"];
62->34 [style = bold, label=""];
76->43 [style = bold, label=""];
6->0 [style = solid, label="task"];
21->27 [style = solid, label="currentOffsets"];
23->2 [style = bold, label=""];
4->48 [style = bold, label=""];
5->6 [style = solid, label="baseSequenceName"];
39->54 [style = dotted, label="true"];
61->35 [style = bold, label=""];
32->5 [style = bold, label=""];
11->6 [style = solid, label="endPartitions"];
43->62 [style = bold, label=""];
65->78 [style = solid, label="i"];
10->15 [style = bold, label=""];
80->13 [style = bold, label=""];
48->57 [style = bold, label=""];
70->41 [style = solid, label="desc3"];
63->64 [style = bold, label=""];
11->6 [style = bold, label=""];
37->55 [style = solid, label="desc6"];
64->63 [style = bold, label=""];
57->73 [style = bold, label=""];
6->0 [style = bold, label=""];
17->33 [style = bold, label=""];
45->55 [style = solid, label="desc5"];
12->22 [style = solid, label="startPartitions"];
72->78 [style = bold, label=""];
20->21 [style = bold, label=""];
36->76 [style = bold, label=""];
24->16 [style = bold, label=""];
27->4 [style = bold, label=""];
67->55 [style = bold, label=""];
5->22 [style = solid, label="baseSequenceName"];
64->56 [style = bold, label=""];
71->77 [style = bold, label=""];
79->36 [style = bold, label=""];
19->27 [style = bold, label=""];
10->6 [style = solid, label="startPartitions"];
35->47 [style = bold, label=""];
29->7 [style = bold, label=""];
35->51 [style = solid, label="nextOffsets"];
42->49 [style = bold, label=""];
45->37 [style = bold, label=""];
35->47 [style = solid, label="nextOffsets"];
64->63 [style = dotted, label="true"];
37->41 [style = solid, label="desc6"];
55->79 [style = bold, label=""];
75->27 [style = bold, label=""];
66->55 [style = solid, label="desc7"];
68->55 [style = solid, label="desc1"];
52->55 [style = solid, label="desc2"];
}
