digraph {
10 [style = filled, label = "!client.ready(node,time.milliseconds())@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "buffer = response.serialize(ApiKeys.FETCH,request.correlationId())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertEquals(250,(Double)avgMetric.metricValue(),EPSILON)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "selector.clear()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeMax))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "selector.delayedReceive(new DelayedReceive(node.idString(),new NetworkReceive(node.idString(),buffer)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "client.poll(1,time.milliseconds())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "ByteBuffer buffer = ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE).serialize(ApiKeys.API_VERSIONS,0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "FetchRequest.Builder builder = FetchRequest.Builder.forConsumer(100,100,new LinkedHashMap<>())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "FetchResponse response = fullFetchResponse(tp0,nextRecords,Errors.NONE,i,throttleTimeMs)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "i <= 3@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "int throttleTimeMs = 100 * i@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "client.close()@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "selector.clear()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i++@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(\"test\",1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ByteBuffer buffer = ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE).serialize(ApiKeys.API_VERSIONS,0)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "client.close()@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int i = 1@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "client.poll(1,time.milliseconds())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "builder.rackId(\"\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "client.send(request,time.milliseconds())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "client.poll(1,time.milliseconds())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(this.senderMetricsRegistry.produceThrottleTimeAvg)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,ClientDnsLookup.DEFAULT,time,true,new ApiVersions(),throttleTimeSensor,new LogContext())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "MockSelector selector = new MockSelector(time)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(400,(Double)maxMetric.metricValue(),EPS)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "buildFetcher()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "selector.delayedReceive(new DelayedReceive(node.idString(),new NetworkReceive(node.idString(),buffer)))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "buffer = response.serialize(ApiKeys.PRODUCE,ApiKeys.PRODUCE.latestVersion(),request.correlationId())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeAvg))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(250,(Double)avgMetric.metricValue(),EPS)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "selector.clear()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(\"test\",1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Node node = cluster.nodes().get(0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "ByteBuffer buffer = ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE).serialize(ApiKeys.API_VERSIONS,ApiKeys.API_VERSIONS.latestVersion(),0)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "client.send(request,time.milliseconds())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "client.poll(1,time.milliseconds())@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Sensor throttleTimeSensor = Fetcher.throttleTimeSensor(metrics,metricsRegistry)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(400,(Double)maxMetric.metricValue(),EPSILON)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "MockSelector selector = new MockSelector(time)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21->50 [style = dashed, label="0"];
6->3 [style = bold, label=""];
20->11 [style = dotted, label="true"];
30->44 [style = dashed, label="0"];
20->0 [style = bold, label=""];
25->22 [style = solid, label="selector"];
10->17 [style = bold, label=""];
29->45 [style = bold, label=""];
19->24 [style = bold, label=""];
41->48 [style = bold, label=""];
26->12 [style = bold, label=""];
0->14 [style = bold, label=""];
16->11 [style = solid, label="i"];
20->16 [style = bold, label=""];
20->41 [style = solid, label="i"];
20->31 [style = dotted, label="true"];
37->38 [style = bold, label=""];
39->49 [style = bold, label=""];
2->15 [style = bold, label=""];
32->25 [style = bold, label=""];
20->18 [style = dotted, label="true"];
14->11 [style = solid, label="throttleTimeMs"];
43->0 [style = bold, label=""];
48->2 [style = solid, label="buffer"];
16->47 [style = dotted, label="true"];
8->11 [style = bold, label=""];
16->41 [style = dotted, label="true"];
20->34 [style = dotted, label="true"];
20->15 [style = dotted, label="true"];
34->31 [style = solid, label="buffer"];
17->20 [style = bold, label=""];
36->6 [style = bold, label=""];
14->16 [style = bold, label=""];
13->42 [style = dashed, label="0"];
22->33 [style = bold, label=""];
16->43 [style = dotted, label="true"];
28->5 [style = bold, label=""];
7->1 [style = bold, label=""];
22->46 [style = bold, label=""];
23->30 [style = bold, label=""];
48->2 [style = bold, label=""];
35->44 [style = bold, label=""];
20->24 [style = dotted, label="true"];
16->20 [style = solid, label="i"];
16->29 [style = bold, label=""];
17->11 [style = solid, label="i"];
30->26 [style = bold, label=""];
23->35 [style = dashed, label="0"];
46->36 [style = bold, label=""];
34->31 [style = bold, label=""];
20->14 [style = bold, label=""];
0->21 [style = bold, label=""];
16->4 [style = dotted, label="true"];
22->7 [style = bold, label=""];
29->45 [style = dashed, label="0"];
17->20 [style = solid, label="i"];
5->27 [style = solid, label="node"];
16->14 [style = dotted, label="true"];
4->34 [style = dashed, label="0"];
33->1 [style = solid, label="buffer"];
24->8 [style = bold, label=""];
16->20 [style = bold, label=""];
5->22 [style = bold, label=""];
16->11 [style = dotted, label="true"];
21->23 [style = bold, label=""];
26->39 [style = dashed, label="0"];
16->8 [style = dotted, label="true"];
36->6 [style = solid, label="buffer"];
13->42 [style = bold, label=""];
16->48 [style = dotted, label="true"];
11->4 [style = bold, label=""];
20->14 [style = solid, label="i"];
20->14 [style = dotted, label="true"];
17->14 [style = solid, label="i"];
16->23 [style = bold, label=""];
4->31 [style = solid, label="buffer"];
14->41 [style = solid, label="i"];
20->29 [style = solid, label="i"];
45->8 [style = solid, label="builder"];
4->41 [style = bold, label=""];
14->16 [style = solid, label="i"];
6->10 [style = dotted, label="true"];
4->31 [style = bold, label=""];
13->46 [style = solid, label="selector"];
1->6 [style = bold, label=""];
29->19 [style = bold, label=""];
20->16 [style = solid, label="i"];
20->4 [style = dotted, label="true"];
6->10 [style = bold, label=""];
15->43 [style = bold, label=""];
14->29 [style = bold, label=""];
3->17 [style = bold, label=""];
42->46 [style = solid, label="throttleTimeSensor"];
20->19 [style = dotted, label="true"];
50->35 [style = bold, label=""];
6->27 [style = dotted, label="true"];
4->48 [style = dashed, label="0"];
16->29 [style = dotted, label="true"];
7->1 [style = solid, label="buffer"];
10->40 [style = dotted, label="true"];
23->50 [style = bold, label=""];
16->15 [style = dotted, label="true"];
40->10 [style = bold, label=""];
16->2 [style = dotted, label="true"];
47->8 [style = bold, label=""];
8->11 [style = solid, label="request"];
25->13 [style = bold, label=""];
10->27 [style = bold, label=""];
20->8 [style = dotted, label="true"];
5->2 [style = solid, label="node"];
22->46 [style = dashed, label="0"];
31->18 [style = bold, label=""];
33->1 [style = bold, label=""];
18->2 [style = bold, label=""];
15->16 [style = bold, label=""];
44->39 [style = bold, label=""];
27->6 [style = bold, label=""];
16->45 [style = dotted, label="true"];
16->14 [style = solid, label="i"];
17->16 [style = solid, label="i"];
11->34 [style = bold, label=""];
22->43 [style = solid, label="node"];
29->19 [style = solid, label="builder"];
16->0 [style = dotted, label="true"];
13->22 [style = solid, label="throttleTimeSensor"];
14->29 [style = solid, label="i"];
20->29 [style = dotted, label="true"];
22->40 [style = solid, label="node"];
9->25 [style = bold, label=""];
19->24 [style = solid, label="request"];
45->47 [style = bold, label=""];
11->41 [style = dashed, label="0"];
20->2 [style = dotted, label="true"];
27->40 [style = bold, label=""];
10->27 [style = dotted, label="true"];
7->33 [style = dashed, label="0"];
42->5 [style = bold, label=""];
29->41 [style = solid, label="throttleTimeMs"];
38->13 [style = bold, label=""];
7->36 [style = dashed, label="0"];
20->16 [style = dotted, label="true"];
13->28 [style = bold, label=""];
}
