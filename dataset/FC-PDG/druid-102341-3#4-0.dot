digraph {
27 [style = filled, label = "i++@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expect(kinesis.getRecords(generateGetRecordsReq(shard0Iterator,recordsPerFetch))).andReturn(getRecordsResult0).anyTimes()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
54 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,1,0,2,false,100,5000,5000,60000,5)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "replayAll()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int i = 0@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "EasyMock.expect(getShardIteratorResult0.getShardIterator()).andReturn(SHARD0_ITERATOR).anyTimes()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "expect(kinesis.getShardIterator(anyObject(),eq(shardId0),anyString(),anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "testSeek['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(stream,shardId0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "StreamPartition<String> shard0Partition = StreamPartition.of(stream,SHARD_ID0)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "expect(getShardIteratorResult1.getShardIterator()).andReturn(shard1Iterator).anyTimes()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(allRecords.subList(4,12)))@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "recordSupplier.assign(partitions)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "StreamPartition<String> shard1Partition = StreamPartition.of(stream,shardId1)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(9,polledRecords.size())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expect(getRecordsResult1.getNextShardIterator()).andReturn(null).anyTimes()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "expect(getRecordsResult0.getRecords()).andReturn(shard0Records.subList(1,shard0Records.size())).once()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "testSeek['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "recordSupplier.start()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "StreamPartition<String> shard0Partition = StreamPartition.of(stream,shardId0)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "recordsPerFetch = 100@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard0Partition,shard1Partition)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expect(getRecordsResult0.getNextShardIterator()).andReturn(null).anyTimes()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(stream,shardId1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "List<OrderedPartitionableRecord<String,String>> polledRecords = cleanRecords(recordSupplier.poll(poll_timeout_millis))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "List<OrderedPartitionableRecord<String,String>> polledRecords = cleanRecords(recordSupplier.poll(POLL_TIMEOUT_MILLIS))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "StreamPartition<String> shard1Partition = StreamPartition.of(stream,SHARD_ID1)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(ALL_RECORDS.subList(1,2)))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "expect(getRecordsResult1.getRecords()).andReturn(shard1Records.subList(2,shard1Records.size())).once()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "expect(getShardIteratorResult0.getShardIterator()).andReturn(shard0Iterator).anyTimes()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD1_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult1).anyTimes()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "recordSupplier.seekToEarliest(Collections.singleton(shard0))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expect(kinesis.getRecords(generateGetRecordsReq(shard1Iterator,recordsPerFetch))).andReturn(getRecordsResult1).anyTimes()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "recordSupplier.assign(partitions)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "recordSupplier.seek(shard1Partition,shard1Records.get(2).getSequenceNumber())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD0_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult0).anyTimes()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "EasyMock.expect(getShardIteratorResult1.getShardIterator()).andReturn(SHARD1_ITERATOR).anyTimes()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "recordSupplier.seek(shard0Partition,SHARD0_RECORDS.get(1).getSequenceNumber())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "recordSupplier.seek(shard1Partition,SHARD1_RECORDS.get(2).getSequenceNumber())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "EasyMock.expect(getRecordsResult0.getRecords()).andReturn(SHARD0_RECORDS.subList(1,SHARD0_RECORDS.size())).once()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(allRecords.subList(1,2)))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID0),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "recordSupplier.seek(shard0Partition,shard0Records.get(1).getSequenceNumber())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "EasyMock.expect(getRecordsResult0.getNextShardIterator()).andReturn(null).anyTimes()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(ALL_RECORDS.subList(4,12)))@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "EasyMock.expect(getRecordsResult1.getRecords()).andReturn(SHARD1_RECORDS.subList(2,SHARD1_RECORDS.size())).once()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Thread.sleep(100)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "EasyMock.expect(getRecordsResult1.getNextShardIterator()).andReturn(null).anyTimes()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID1),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "testSeekUnassigned['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "verifyAll()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expect(kinesis.getShardIterator(anyObject(),eq(shardId1),anyString(),anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 9@@@24@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3->40 [style = dashed, label="0"];
20->11 [style = dotted, label="true"];
43->42 [style = bold, label=""];
20->27 [style = dotted, label="true"];
2->27 [style = solid, label="i"];
10->17 [style = bold, label=""];
37->34 [style = solid, label="shard1Partition"];
0->38 [style = dashed, label="0"];
33->26 [style = solid, label="shard0Partition"];
23->22 [style = bold, label=""];
26->16 [style = solid, label="partitions"];
17->46 [style = dashed, label="0"];
40->47 [style = bold, label=""];
26->15 [style = bold, label=""];
9->14 [style = bold, label=""];
4->8 [style = bold, label=""];
44->18 [style = bold, label=""];
45->10 [style = bold, label=""];
25->21 [style = bold, label=""];
46->38 [style = bold, label=""];
2->20 [style = bold, label=""];
37->26 [style = bold, label=""];
16->29 [style = bold, label=""];
23->35 [style = dashed, label="0"];
16->34 [style = bold, label=""];
29->23 [style = bold, label=""];
12->30 [style = dashed, label="0"];
53->49 [style = solid, label="shard1"];
24->26 [style = solid, label="shard1Partition"];
13->32 [style = dashed, label="0"];
6->4 [style = bold, label=""];
20->41 [style = bold, label=""];
18->1 [style = bold, label=""];
52->48 [style = bold, label=""];
29->51 [style = dashed, label="0"];
34->35 [style = bold, label=""];
20->19 [style = bold, label=""];
27->20 [style = bold, label=""];
49->54 [style = bold, label=""];
1->26 [style = solid, label="shard0Partition"];
14->31 [style = dashed, label="0"];
1->33 [style = dashed, label="0"];
22->2 [style = bold, label=""];
25->39 [style = bold, label=""];
29->34 [style = dashed, label="0"];
47->31 [style = bold, label=""];
10->15 [style = solid, label="recordsPerFetch"];
18->33 [style = bold, label=""];
5->18 [style = bold, label=""];
8->36 [style = dashed, label="0"];
19->41 [style = dashed, label="0"];
21->39 [style = dashed, label="0"];
2->20 [style = solid, label="i"];
21->12 [style = bold, label=""];
3->9 [style = bold, label=""];
24->26 [style = bold, label=""];
24->37 [style = dashed, label="0"];
17->0 [style = bold, label=""];
31->44 [style = bold, label=""];
32->40 [style = bold, label=""];
33->37 [style = bold, label=""];
24->29 [style = solid, label="shard1Partition"];
37->26 [style = solid, label="shard1Partition"];
38->43 [style = bold, label=""];
8->13 [style = bold, label=""];
33->35 [style = solid, label="shard0Partition"];
20->11 [style = bold, label=""];
14->5 [style = bold, label=""];
5->44 [style = dashed, label="0"];
48->51 [style = solid, label="shard0"];
28->10 [style = bold, label=""];
41->7 [style = bold, label=""];
0->6 [style = bold, label=""];
6->43 [style = dashed, label="0"];
35->22 [style = bold, label=""];
10->46 [style = bold, label=""];
36->32 [style = bold, label=""];
48->53 [style = bold, label=""];
42->36 [style = bold, label=""];
15->16 [style = bold, label=""];
27->20 [style = solid, label="i"];
54->50 [style = bold, label=""];
39->30 [style = bold, label=""];
9->47 [style = dashed, label="0"];
53->49 [style = bold, label=""];
13->3 [style = bold, label=""];
1->24 [style = bold, label=""];
50->51 [style = bold, label=""];
1->23 [style = solid, label="shard0Partition"];
4->42 [style = dashed, label="0"];
7->25 [style = bold, label=""];
19->7 [style = bold, label=""];
11->27 [style = bold, label=""];
49->50 [style = solid, label="partitions"];
}
