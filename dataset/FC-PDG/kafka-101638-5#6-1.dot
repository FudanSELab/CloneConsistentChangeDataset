digraph {
0 [style = filled, label = "final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(forwarded.get(0).keyValue(),is(new KeyValue<>(\"lhs1\",null)))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "processor.process(\"lhs1\",new SubscriptionResponseWrapper<>(hash,\"rhsValue\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final SubscriptionResolverJoinProcessorSupplier<String,String,String,String> processorSupplier = new SubscriptionResolverJoinProcessorSupplier<>(valueGetterSupplier,STRING_SERIALIZER,\"value-hash-dummy-topic\",JOINER,leftJoin)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "shouldForwardWhenHashMatches['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final TestKTableValueGetterSupplier<String,String> valueGetterSupplier = new TestKTableValueGetterSupplier<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "shouldEmitTombstoneForInnerJoinWhenRightIsNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(forwarded.get(0).keyValue(),is(new KeyValue<>(\"lhs1\",\"(lhsValue,rhsValue)\")))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(forwarded.size(),is(1))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "context.setRecordMetadata(\"topic\",0,0,new RecordHeaders(),0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Processor<String,SubscriptionResponseWrapper<String>> processor = processorSupplier.get()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final boolean leftJoin = false@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "processor.init(context)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final long(( hash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\",\"lhsValue\"))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final MockProcessorContext context = new MockProcessorContext()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "shouldForwardWhenHashMatches['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "processor.process(\"lhs1\",new SubscriptionResponseWrapper<>(hash,null))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "valueGetterSupplier.put(\"lhs1\",\"lhsValue\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final SubscriptionResolverJoinProcessorSupplier<String,String,String,String> processorSupplier = new SubscriptionResolverJoinProcessorSupplier<>(valueGetterSupplier,STRING_SERIALIZER,null,JOINER,leftJoin)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10->18 [style = bold, label=""];
17->5 [style = bold, label=""];
16->0 [style = bold, label=""];
9->13 [style = solid, label="context"];
15->7 [style = bold, label=""];
3->18 [style = dashed, label="0"];
11->6 [style = bold, label=""];
8->15 [style = dashed, label="0"];
12->15 [style = bold, label=""];
12->15 [style = solid, label="leftJoin"];
5->15 [style = solid, label="valueGetterSupplier"];
10->3 [style = bold, label=""];
5->8 [style = solid, label="valueGetterSupplier"];
13->11 [style = bold, label=""];
1->16 [style = solid, label="hash"];
8->7 [style = bold, label=""];
7->9 [style = bold, label=""];
6->1 [style = bold, label=""];
0->10 [style = bold, label=""];
2->0 [style = bold, label=""];
5->12 [style = bold, label=""];
1->16 [style = bold, label=""];
12->8 [style = bold, label=""];
2->16 [style = dashed, label="0"];
9->13 [style = bold, label=""];
1->2 [style = bold, label=""];
12->8 [style = solid, label="leftJoin"];
4->5 [style = bold, label=""];
1->2 [style = solid, label="hash"];
14->5 [style = bold, label=""];
}
