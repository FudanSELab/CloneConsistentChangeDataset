digraph {
22 [style = filled, label = "InvokerInvocationException e@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"oneParamDemo\",new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1619ba0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ForStatement statement = new ForStatement(\"i\",ClassHelper.DYNAMIC_TYPE,new VariableExpression(\"coll\"),loopStatement)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "fail(\"Should not have thrown an exception\")@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "System.out.println(\"################ Done\")@@@26@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "System.out.println(\"################ Now about to invoke a method without looping\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "classNode.addConstructor(new ConstructorNode(ACC_PUBLIC,null))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ClassNode classNode = new ClassNode(\"Foo\",ACC_PUBLIC,ClassHelper.OBJECT_TYPE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "classNode.addMethod(new MethodNode(\"iterateDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,ClassNode.EMPTY_ARRAY,statement))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "System.out.println(\"################ Now about to invoke a method with looping\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Class fooClass = loadClass(classNode)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(\"Loaded a new class\",fooClass != null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "e.getCause().printStackTrace()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Object(( array = {new Integer(1234),\"abc\",\"def\"}@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testLoop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "classNode.addMethod(new MethodNode(\"oneParamDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,ClassNode.EMPTY_ARRAY,statement))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testLoop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "fail(\"Should not have thrown an exception\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Object value = new Integer(10000)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"iterateDemo\",new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1619b0b)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ForStatement statement = new ForStatement(new Parameter(ClassHelper.OBJECT_TYPE,\"i\"),new VariableExpression(\"coll\"),loopStatement)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Parameter(( parameters = {new Parameter(ClassHelper.OBJECT_TYPE,\"coll\")}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "System.out.println(\"################ Done\")@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testNonLoop['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(\"Managed to create bean\",bean != null)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Object bean = fooClass.newInstance()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
4->3 [style = bold, label=""];
22->25 [style = bold, label=""];
22->29 [style = dotted, label="true"];
15->20 [style = dashed, label="0"];
10->21 [style = dashed, label="0"];
1->8 [style = bold, label=""];
27->7 [style = solid, label="fooClass"];
20->16 [style = solid, label="statement"];
23->27 [style = bold, label=""];
17->20 [style = solid, label="loopStatement"];
21->6 [style = bold, label=""];
7->13 [style = solid, label="fooClass"];
24->21 [style = solid, label="value"];
1->7 [style = solid, label="classNode"];
2->6 [style = bold, label=""];
13->14 [style = solid, label="bean"];
11->6 [style = bold, label=""];
26->1 [style = bold, label=""];
22->25 [style = dotted, label="true"];
12->9 [style = dashed, label="0"];
16->7 [style = bold, label=""];
15->16 [style = solid, label="statement"];
5->16 [style = solid, label="parameters"];
10->3 [style = bold, label=""];
0->10 [style = solid, label="array"];
22->11 [style = dotted, label="true"];
11->4 [style = dotted, label="true"];
25->29 [style = bold, label=""];
5->28 [style = bold, label=""];
15->16 [style = bold, label=""];
5->17 [style = bold, label=""];
12->0 [style = bold, label=""];
11->2 [style = bold, label=""];
14->10 [style = solid, label="bean"];
17->28 [style = dashed, label="0"];
6->4 [style = bold, label=""];
19->1 [style = bold, label=""];
5->23 [style = solid, label="parameters"];
0->10 [style = bold, label=""];
11->2 [style = dotted, label="true"];
14->9 [style = solid, label="bean"];
20->16 [style = bold, label=""];
8->5 [style = bold, label=""];
18->1 [style = bold, label=""];
24->21 [style = bold, label=""];
13->21 [style = solid, label="bean"];
28->23 [style = solid, label="statement"];
28->23 [style = bold, label=""];
11->6 [style = dotted, label="true"];
27->7 [style = bold, label=""];
17->15 [style = bold, label=""];
0->24 [style = dashed, label="0"];
1->27 [style = solid, label="classNode"];
14->9 [style = bold, label=""];
9->12 [style = bold, label=""];
13->14 [style = bold, label=""];
17->15 [style = solid, label="loopStatement"];
9->24 [style = bold, label=""];
29->11 [style = bold, label=""];
17->20 [style = bold, label=""];
}
