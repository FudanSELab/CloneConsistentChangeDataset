digraph {
0 [style = filled, label = "assertTrue(\"Expecting nested element value printed\",log.indexOf(\"Fileset basedir = \" + baseDir.getAbsolutePath()) != -1)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertTrue(\"Expecting nested element value printed\",log.contains(\"Fileset basedir = \" + baseDir.getAbsolutePath()))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertTrue(\"Expecting attribute value to be printed\",log.indexOf(\"Attribute attr1 = test\") != -1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String log = buildRule.getLog()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "buildRule.executeTarget(\"nestedbyclassname\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(\"Expecting nested element value to be printed\",log.indexOf(\"Fileset basedir = \" + baseDir.getAbsolutePath()) != -1)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "FileSet fileset = (FileSet)p.getReference(\"testfileset\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testSimple['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testNestedByClassName['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(\"Expecting attribute value printed\",log.contains(\"Attribute attr1 = test\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testSimple['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "File baseDir = fileset.getDir(p)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "buildRule.executeTarget(\"simple\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Project p = buildRule.getProject()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(\"Expecting attribute value printed\",log.indexOf(\"Attribute attr1 = test\") != -1)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->3 [style = bold, label=""];
3->13 [style = bold, label=""];
2->1 [style = solid, label="p"];
5->7 [style = bold, label=""];
3->10 [style = bold, label=""];
3->6 [style = bold, label=""];
0->8 [style = dashed, label="0"];
4->1 [style = bold, label=""];
7->11 [style = dashed, label="0"];
6->0 [style = bold, label=""];
0->14 [style = dashed, label="0"];
6->13 [style = dashed, label="0"];
10->8 [style = bold, label=""];
9->7 [style = bold, label=""];
2->4 [style = bold, label=""];
7->2 [style = bold, label=""];
13->14 [style = bold, label=""];
11->2 [style = bold, label=""];
6->10 [style = dashed, label="0"];
12->11 [style = bold, label=""];
}
