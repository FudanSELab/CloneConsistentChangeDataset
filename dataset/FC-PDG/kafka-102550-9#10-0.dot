digraph {
1 [style = filled, label = "builder.stream(\"stream-topic\").join(filteredKTable,MockValueJoiner.TOSTRING_JOINER)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(topology.stateStores().size(),equalTo(2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "shouldAllowJoinUnmaterializedFilteredKTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty(),is(true))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(topology.stateStores().size(),equalTo(1))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "shouldAllowJoinUnmaterializedFilteredKTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"),equalTo(Collections.singleton(\"store\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"),equalTo(Collections.singleton(topology.stateStores().get(0).name())))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final KTable<Bytes,String> filteredKTable = builder.table(\"table-topic\").filter(MockPredicate.allGoodPredicate(),Materialized.as(\"store\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final KTable<Bytes,String> filteredKTable = builder.table(\"table-topic\").filter(MockPredicate.allGoodPredicate())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "shouldAllowJoinMaterializedFilteredKTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"),equalTo(Collections.singleton(\"store\")))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "builder.build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final KTable<Bytes,String> filteredKTable = builder.table(\"table-topic\").filter(MockPredicate.allGoodPredicate())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->3 [style = bold, label=""];
4->6 [style = bold, label=""];
6->9 [style = dashed, label="0"];
9->1 [style = solid, label="filteredKTable"];
7->0 [style = bold, label=""];
6->14 [style = dashed, label="0"];
6->1 [style = solid, label="filteredKTable"];
14->1 [style = bold, label=""];
6->1 [style = bold, label=""];
10->13 [style = bold, label=""];
3->7 [style = bold, label=""];
11->10 [style = bold, label=""];
0->13 [style = dashed, label="0"];
12->14 [style = bold, label=""];
8->9 [style = bold, label=""];
7->10 [style = dashed, label="0"];
1->2 [style = bold, label=""];
14->1 [style = solid, label="filteredKTable"];
5->11 [style = bold, label=""];
9->1 [style = bold, label=""];
3->11 [style = dashed, label="0"];
2->5 [style = bold, label=""];
}
