digraph {
0 [style = filled, label = "Configuration config = new Configuration()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "config.setInteger(JobManagerOptions.PORT,mockJmAddress.getPort())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "config.setString(JobManagerOptions.ADDRESS,mockJmAddress.getHostName())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "InetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress,12345)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNotNull(dumper.getOptimizerPlanAsJSON(op))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Plan plan = (Plan)PackagedProgramUtils.getPipelineFromProgram(prg,-1)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "testGetExecutionPlan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "OptimizedPlan op = (OptimizedPlan)ClusterClient.getOptimizedPlan(optimizer,prg,-1)@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "InetAddress mockAddress = InetAddress.getLocalHost()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String htmlEscaped = dumper2.getOptimizerPlanAsJSON(op)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testGetExecutionPlan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "PackagedProgram prg = new PackagedProgram(,\"/dev/random\",\"/tmp\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "dumper2.setEncodeForHTML(true)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "OptimizedPlan op = optimizer.compile(plan)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Optimizer optimizer = new Optimizer(new DataStatistics(),new DefaultCostEstimator(),config)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String htmlEscaped = dumper2.getOptimizerPlanAsJSON(op)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertNotNull(op)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testGetExecutionPlan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(-1,htmlEscaped.indexOf('\'))@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(-1,htmlEscaped.indexOf('\'))@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "OptimizedPlan op = (OptimizedPlan)ClusterClient.getOptimizedPlan(optimizer,prg,1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->3 [style = solid, label="op"];
17->13 [style = solid, label="op"];
12->5 [style = bold, label=""];
7->12 [style = bold, label=""];
15->21 [style = bold, label=""];
2->3 [style = bold, label=""];
22->15 [style = solid, label="prg"];
6->2 [style = solid, label="op"];
15->6 [style = bold, label=""];
16->17 [style = bold, label=""];
6->9 [style = solid, label="op"];
15->16 [style = bold, label=""];
15->21 [style = solid, label="op"];
10->7 [style = bold, label=""];
22->7 [style = bold, label=""];
11->18 [style = bold, label=""];
17->11 [style = solid, label="op"];
21->2 [style = bold, label=""];
20->22 [style = bold, label=""];
6->2 [style = bold, label=""];
15->3 [style = solid, label="op"];
3->9 [style = bold, label=""];
12->5 [style = solid, label="mockAddress"];
7->6 [style = solid, label="prg"];
7->16 [style = solid, label="prg"];
5->0 [style = bold, label=""];
6->15 [style = dashed, label="0"];
16->17 [style = solid, label="plan"];
0->15 [style = solid, label="config"];
0->1 [style = bold, label=""];
17->3 [style = bold, label=""];
4->8 [style = bold, label=""];
7->15 [style = bold, label=""];
1->14 [style = bold, label=""];
14->15 [style = bold, label=""];
7->15 [style = solid, label="optimizer"];
6->8 [style = solid, label="op"];
15->4 [style = solid, label="op"];
8->11 [style = bold, label=""];
15->6 [style = solid, label="optimizer"];
19->7 [style = bold, label=""];
9->13 [style = bold, label=""];
13->4 [style = bold, label=""];
}
