digraph {
49 [style = filled, label = "BooleanQuery.Builder bq = new BooleanQuery.Builder()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,28),equalTo(20))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "PercolatorFieldMapper fieldMapper = (PercolatorFieldMapper)documentMapper.mappers().getMapper(fieldName)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "fields.sort(Comparator.comparing(null))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertThat(fields.size(),equalTo(1))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(documentMapper.mappers(),null,null,null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "document = parseContext.doc()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "List<IndexableField> fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.rangeField.name())))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "fieldMapper.processQuery(query,parseContext)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(1).binaryValue().bytes,28),equalTo(20))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "PercolatorFieldMapper.PercolatorFieldType fieldType = (PercolatorFieldMapper.PercolatorFieldType)fieldMapper.fieldType()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "bq.add(rangeQuery2,Occur.MUST)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,12),equalTo(10))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(1).binaryValue().bytes,12),equalTo(15))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Query rangeQuery1 = mapperService.fieldType(\"number_field1\").rangeQuery(10,20,true,true,null,null,null,context)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(documentMapper.mappers(),null,null,null,null)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertThat(fields.size(),equalTo(1))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "PercolatorFieldMapper fieldMapper = (PercolatorFieldMapper)documentMapper.mappers().getMapper(fieldName)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "fields.sort(Comparator.comparing(null))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ParseContext.Document document = parseContext.doc()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,12),equalTo(10))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "bq.add(rangeQuery1,Occur.MUST)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.rangeField.name())))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(fields.size(),equalTo(2))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "bq.add(rangeQuery1,Occur.MUST)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(fields.get(0).numericValue(),equalTo(1L))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(LongPoint.decodeDimension(fields.get(1).binaryValue().bytes,8),equalTo(15L))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.minimumShouldMatchField.name())))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "fieldMapper.processQuery(bq.build(),parseContext)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "bq.add(rangeQuery2,Occur.MUST)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_FAILED))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.minimumShouldMatchField.name())))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testExtractTermsAndRanges_failed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testExtractTermsAndRanges_failed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "addQueryFieldMappings()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DocumentMapper documentMapper = mapperService.documentMapper()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "fieldMapper.processQuery(bq.build(),parseContext)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "bq = new BooleanQuery.Builder()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testExtractRanges['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(LongPoint.decodeDimension(fields.get(1).binaryValue().bytes,24),equalTo(20L))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "SearchExecutionContext context = createSearchContext(indexService).getSearchExecutionContext()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Query rangeQuery2 = mapperService.fieldType(\"number_field1\").rangeQuery(15,20,true,true,null,null,null,context)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "rangeQuery2 = mapperService.fieldType(\"number_field2\").rangeQuery(15,20,true,true,null,null,null,context)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertThat(fields.size(),equalTo(2))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "DocumentMapper documentMapper = mapperService.documentMapper()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,28),equalTo(20))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "parseContext = new ParseContext.InternalParseContext(documentMapper.mappers(),null,null,null,null)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "ParseContext.Document document = parseContext.doc()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "addQueryFieldMappings()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(documentMapper.mappers(),null,null,null,null)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "assertThat(fields.get(0).numericValue(),equalTo(2L))@@@44@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29->40 [style = solid, label="parseContext"];
30->38 [style = bold, label=""];
32->22 [style = bold, label=""];
43->26 [style = solid, label="parseContext"];
34->25 [style = bold, label=""];
4->43 [style = bold, label=""];
12->1 [style = solid, label="parseContext"];
18->23 [style = bold, label=""];
0->6 [style = bold, label=""];
1->26 [style = dashed, label="0"];
2->3 [style = bold, label=""];
25->32 [style = solid, label="context"];
22->29 [style = bold, label=""];
6->49 [style = bold, label=""];
39->36 [style = solid, label="rangeQuery1"];
25->39 [style = solid, label="context"];
8->12 [style = dashed, label="0"];
43->26 [style = bold, label=""];
9->10 [style = bold, label=""];
8->1 [style = solid, label="parseContext"];
25->6 [style = bold, label=""];
48->17 [style = bold, label=""];
12->1 [style = bold, label=""];
26->24 [style = bold, label=""];
3->4 [style = bold, label=""];
6->1 [style = solid, label="query"];
51->32 [style = bold, label=""];
21->18 [style = bold, label=""];
4->7 [style = bold, label=""];
15->35 [style = bold, label=""];
8->43 [style = dashed, label="0"];
8->1 [style = bold, label=""];
39->51 [style = solid, label="rangeQuery1"];
52->47 [style = bold, label=""];
11->0 [style = bold, label=""];
49->39 [style = bold, label=""];
40->16 [style = bold, label=""];
31->51 [style = bold, label=""];
23->37 [style = bold, label=""];
10->8 [style = bold, label=""];
5->0 [style = bold, label=""];
35->50 [style = bold, label=""];
50->42 [style = bold, label=""];
19->41 [style = bold, label=""];
10->12 [style = bold, label=""];
48->17 [style = solid, label="rangeQuery2"];
16->21 [style = bold, label=""];
25->48 [style = solid, label="context"];
36->48 [style = bold, label=""];
14->31 [style = bold, label=""];
28->44 [style = bold, label=""];
17->3 [style = bold, label=""];
33->30 [style = bold, label=""];
29->40 [style = bold, label=""];
38->46 [style = bold, label=""];
1->2 [style = bold, label=""];
37->19 [style = bold, label=""];
42->28 [style = bold, label=""];
6->9 [style = bold, label=""];
44->27 [style = bold, label=""];
13->33 [style = bold, label=""];
45->52 [style = bold, label=""];
39->36 [style = bold, label=""];
27->20 [style = bold, label=""];
47->14 [style = bold, label=""];
41->13 [style = bold, label=""];
20->45 [style = bold, label=""];
4->35 [style = dashed, label="0"];
32->22 [style = solid, label="rangeQuery2"];
24->15 [style = bold, label=""];
}
