digraph {
0 [style = filled, label = "v == null@@@7@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "getCacheKey['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final Hasher hasher = Hashing.sha256().newHasher()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "sortedValues = sortedValuesList@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "final Collection<String> sortedValues@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "hasher.putInt(0)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return new CacheKeyBuilder(DimFilterUtils.IN_CACHE_ID).appendString(dimension).appendByte(DimFilterUtils.STRING_SEPARATOR).appendByteArray(extractionFn == null? new byte((((: extractionFn.getCacheKey()).appendByte(DimFilterUtils.STRING_SEPARATOR).appendByteArray(hasher.hash().asBytes()).build()@@@21@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "values instanceof SortedSet && isNaturalOrder(((SortedSet<String>)values).comparator())@@@4@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "computeCacheKey['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final Hasher hasher = Hashing.sha256().newHasher()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "v == null@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "sortedValues.sort(Comparator.nullsFirst(Ordering.natural()))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final List<String> sortedValues = new ArrayList<>(values)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "hasher.putString(v,StandardCharsets.UTF_8)@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "sortedValuesList.sort(Comparators.naturalNullsFirst())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "hasher.putString(v,StandardCharsets.UTF_8)@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "sortedValues = values@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "computeCacheKey['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "hasher.putInt(0)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "return new CacheKeyBuilder(DimFilterUtils.BLOOM_DIM_FILTER_CACHE_ID).appendString(dimension).appendByte(DimFilterUtils.STRING_SEPARATOR).appendByteArray(extractionFn == null? new byte((((: extractionFn.getCacheKey()).appendByte(DimFilterUtils.STRING_SEPARATOR).appendByteArray(hash.asBytes()).build()@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final List<String> sortedValuesList = new ArrayList<>(values)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13->10 [style = bold, label=""];
8->16 [style = bold, label=""];
12->11 [style = dotted, label="false"];
12->17 [style = dotted, label="false"];
2->6 [style = bold, label=""];
6->13 [style = dotted, label="true"];
0->2 [style = bold, label=""];
18->15 [style = bold, label=""];
12->11 [style = bold, label=""];
14->10 [style = bold, label=""];
9->17 [style = bold, label=""];
15->6 [style = bold, label=""];
12->18 [style = dotted, label="true"];
1->0 [style = bold, label=""];
11->9 [style = bold, label=""];
3->4 [style = bold, label=""];
6->14 [style = dotted, label="false"];
7->3 [style = bold, label=""];
6->14 [style = bold, label=""];
11->17 [style = solid, label="sortedValuesList"];
2->0 [style = bold, label=""];
12->9 [style = dotted, label="false"];
5->6 [style = bold, label=""];
5->0 [style = bold, label=""];
6->13 [style = bold, label=""];
12->18 [style = bold, label=""];
17->15 [style = bold, label=""];
0->5 [style = dotted, label="false"];
4->1 [style = bold, label=""];
0->2 [style = dotted, label="true"];
13->6 [style = bold, label=""];
20->19 [style = bold, label=""];
16->12 [style = bold, label=""];
14->6 [style = bold, label=""];
3->16 [style = dashed, label="0"];
0->5 [style = bold, label=""];
}
