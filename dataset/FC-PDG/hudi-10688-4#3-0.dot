digraph {
1 [style = filled, label = "Assertions.assertEquals(keyGenerator.getPartitionPath(row),\"timestamp=4357686/ts_ms=20200321\")@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assertions.assertEquals(key.getPartitionPath(),\"timestamp=4357686/ts_ms=20200321\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "GenericRecord record = getRecord()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testComplexRecordKeysWithComplexPartitionPath['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assertions.assertEquals(key.getRecordKey(),\"_row_key:key1,pii_col:pi\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assertions.assertEquals(keyGenerator.getRecordKey(row),\"_row_key:key1,pii_col:pi\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ComplexKeyGenerator keyGenerator = new ComplexKeyGenerator(getProps())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testHappyFlow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getComplexRecordKeyAndPartitionPathProps())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testComplexRecordKeysWithComplexPartitionPath['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assertions.assertEquals(keyGenerator.getPartitionPath(row),\"timestamp=4357686/ts_ms=2020-03-21\")@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assertions.assertEquals(key.getPartitionPath(),\"timestamp=4357686/ts_ms=2020-03-21\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Row row = KeyGeneratorTestUtilities.getRow(record)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "BuiltinKeyGenerator keyGenerator = (BuiltinKeyGenerator)HoodieSparkKeyGeneratorFactory.createKeyGenerator(props)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "TypedProperties props@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "HoodieKey key = keyGenerator.getKey(record)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
14->3 [style = bold, label=""];
5->14 [style = dashed, label="0"];
7->1 [style = bold, label=""];
11->10 [style = solid, label="props"];
2->6 [style = bold, label=""];
1->15 [style = dashed, label="0"];
9->11 [style = dotted, label="true"];
9->10 [style = bold, label=""];
12->6 [style = bold, label=""];
3->7 [style = solid, label="row"];
10->6 [style = bold, label=""];
2->10 [style = dashed, label="0"];
4->0 [style = bold, label=""];
6->4 [style = bold, label=""];
2->12 [style = dashed, label="0"];
0->14 [style = bold, label=""];
13->12 [style = bold, label=""];
8->2 [style = bold, label=""];
3->7 [style = bold, label=""];
6->4 [style = solid, label="record"];
7->15 [style = bold, label=""];
3->1 [style = solid, label="row"];
3->15 [style = solid, label="row"];
6->3 [style = solid, label="record"];
0->5 [style = bold, label=""];
}
