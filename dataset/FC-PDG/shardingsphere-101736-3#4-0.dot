digraph {
2 [style = filled, label = "insertStatement.setTable(new SimpleTableSegment(0,0,new IdentifierValue(\"tbl\")))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(actual.get().getGeneratedValues().size(),is(3))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(generatedValuesIterator.next(),is((Comparable)1))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(actual.isPresent())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement,schemaMetaData).createGenerateKeyContext(Collections.singletonList(\"id\"),Collections.singletonList(expressionSegments),Collections.singletonList(1))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertCreateGenerateKeyContextWhenFind['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "List<List<ExpressionSegment>> valueExpressions = insertStatement.getValues().stream().map(null).collect(Collectors.toList())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "insertStatement.getValues().add(new InsertValuesSegment(0,0,Collections.singletonList(new LiteralExpressionSegment(1,2,100))))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<ExpressionSegment> expressionSegments = Collections.singletonList(new LiteralExpressionSegment(0,0,1))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(generatedValuesIterator.next(),is((Comparable)\"value\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement,schema).createGenerateKeyContext(Collections.singletonList(\"id\"),Collections.singletonList(expressionSegments),Collections.singletonList(1))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "insertStatement.getValues().add(new InsertValuesSegment(0,0,Collections.singletonList(new CommonExpressionSegment(1,2,\"ignored value\"))))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(actual.get().getGeneratedValues().size(),is(1))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final InsertStatement insertStatement@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Iterator<Comparable<?>> generatedValuesIterator = actual.get().getGeneratedValues().iterator()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "insertStatement.getValues().add(new InsertValuesSegment(0,0,Collections.singletonList(new LiteralExpressionSegment(1,2,\"value\"))))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final InsertStatement insertStatement@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Optional<GeneratedKeyContext> actual = new GeneratedKeyContextEngine(insertStatement,schemaMetaData).createGenerateKeyContext(Collections.singletonList(\"id\"),valueExpressions,Collections.singletonList(1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "insertStatement.getValues().add(new InsertValuesSegment(0,0,expressionSegments))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(new GeneratedKeyContextEngine(insertStatement,schemaMetaData).createGenerateKeyContext(Collections.emptyList(),Collections.emptyList(),Collections.singletonList(1)).isPresent())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(generatedValuesIterator.next(),is((Comparable)100))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "insertStatement.getValues().add(new InsertValuesSegment(0,0,Collections.singletonList(new ParameterMarkerExpressionSegment(1,2,0))))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertTrue(actual.isPresent())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "insertStatement.setInsertColumns(new InsertColumnsSegment(0,0,Collections.singletonList(new ColumnSegment(0,0,new IdentifierValue(\"id\")))))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4->18 [style = dashed, label="0"];
4->3 [style = bold, label=""];
20->13 [style = bold, label=""];
13->24 [style = bold, label=""];
22->19 [style = bold, label=""];
4->6 [style = solid, label="expressionSegments"];
19->20 [style = bold, label=""];
11->21 [style = bold, label=""];
6->9 [style = dashed, label="0"];
3->6 [style = bold, label=""];
5->25 [style = dashed, label="0"];
9->8 [style = bold, label=""];
10->5 [style = dotted, label="true"];
7->5 [style = dotted, label="true"];
1->20 [style = dashed, label="0"];
3->9 [style = bold, label=""];
8->1 [style = bold, label=""];
12->22 [style = solid, label="valueExpressions"];
2->0 [style = bold, label=""];
0->4 [style = bold, label=""];
4->9 [style = solid, label="expressionSegments"];
7->2 [style = bold, label=""];
24->11 [style = bold, label=""];
6->8 [style = bold, label=""];
16->14 [style = bold, label=""];
0->18 [style = bold, label=""];
10->2 [style = bold, label=""];
14->15 [style = bold, label=""];
15->12 [style = bold, label=""];
23->2 [style = bold, label=""];
21->17 [style = bold, label=""];
4->3 [style = solid, label="expressionSegments"];
23->25 [style = dotted, label="true"];
12->22 [style = bold, label=""];
3->16 [style = dashed, label="0"];
18->16 [style = bold, label=""];
}
