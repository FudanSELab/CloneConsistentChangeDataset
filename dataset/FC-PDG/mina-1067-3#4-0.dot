digraph {
7 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"a string\",results(0()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertNotNull(results)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder(LineDelimiter.UNIX)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(1,results.length)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@9@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Context context = decoder.createDecoderState()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(9,context.getBuffer().position())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testThatUnixLineTerminatedStringReturnsEmptyResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(\"a string\",results)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder(LineDelimiter.WINDOWS)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testThatWindowsLineTerminatedStringReturnsNonEmptyResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(0,results.length)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testThatWindowsLineTerminatedStringReturnsNonEmptyResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
14->16 [style = bold, label=""];
1->4 [style = bold, label=""];
15->13 [style = bold, label=""];
7->2 [style = solid, label="results"];
4->16 [style = dashed, label="0"];
4->6 [style = bold, label=""];
9->2 [style = bold, label=""];
16->6 [style = bold, label=""];
0->15 [style = dashed, label="0"];
0->11 [style = dashed, label="0"];
12->2 [style = solid, label="results"];
6->12 [style = solid, label="context"];
3->13 [style = dashed, label="0"];
9->11 [style = solid, label="results"];
6->9 [style = solid, label="context"];
12->2 [style = bold, label=""];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
7->9 [style = dashed, label="0"];
7->2 [style = bold, label=""];
2->15 [style = bold, label=""];
10->4 [style = bold, label=""];
7->12 [style = dashed, label="0"];
6->7 [style = solid, label="context"];
11->8 [style = bold, label=""];
9->2 [style = solid, label="results"];
6->9 [style = bold, label=""];
6->7 [style = bold, label=""];
2->11 [style = bold, label=""];
7->3 [style = solid, label="results"];
6->12 [style = bold, label=""];
}
