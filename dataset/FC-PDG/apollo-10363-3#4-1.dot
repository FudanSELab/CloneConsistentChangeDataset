digraph {
0 [style = filled, label = "mockConfig(FX_APOLLO_NAMESPACE,fxApolloConfig)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(someEvent,bean.getChangeEvent2())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testApolloConfigChangeListener['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertEquals(someEvent,bean.getSomeChangeEvent())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(5,applicationListeners.size())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Config fxApolloConfig = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ConfigChangeEvent someEvent = mock()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(someEvent,bean.getChangeEvent1())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(someEvent,bean.getChangeEvent2())@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "listener.onChange(anotherEvent)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Config applicationConfig = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(4,applicationListeners.size())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(someEvent,bean.getChangeEvent3())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testApolloConfigChangeListenerWithInheritance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(anotherEvent,bean.getChangeEvent3())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "doAnswer(new Answer(){@Override public Object answer(InvocationOnMock invocation){fxApolloListeners.add(invocation.getArgumentAt(0,))return }}).when(fxApolloConfig).addChangeListener(any())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "TestApolloChildConfigChangeListener bean = getBean(,)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(1,fxApolloListeners.size())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testApolloConfigChangeListener['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(someEvent,bean.getSomeChangeEvent())@@@41@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final List<ConfigChangeListener> applicationListeners = Lists.newArrayList()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "doAnswer(new Answer<Object>(){@Override public Object answer(InvocationOnMock invocation){fxApolloListeners.add(invocation.getArgumentAt(0,))return }}).when(fxApolloConfig).addChangeListener(any())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "TestApolloConfigChangeListenerBean1 bean = getBean(,)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "mockConfig(ConfigConsts.NAMESPACE_APPLICATION,applicationConfig)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "listener.onChange(someEvent)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "doAnswer(new Answer<Object>(){@Override public Object answer(InvocationOnMock invocation){applicationListeners.add(invocation.getArgumentAt(0,))return }}).when(applicationConfig).addChangeListener(any())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "ConfigChangeEvent anotherEvent = mock()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final List<ConfigChangeListener> fxApolloListeners = Lists.newArrayList()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(someEvent,bean.getChangeEvent1())@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "doAnswer(new Answer(){@Override public Object answer(InvocationOnMock invocation){applicationListeners.add(invocation.getArgumentAt(0,))return }}).when(applicationConfig).addChangeListener(any())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->10 [style = bold, label=""];
11->1 [style = bold, label=""];
10->0 [style = solid, label="fxApolloConfig"];
4->13 [style = bold, label=""];
1->29 [style = dashed, label="0"];
18->19 [style = bold, label=""];
12->20 [style = bold, label=""];
11->29 [style = bold, label=""];
13->26 [style = solid, label="someEvent"];
8->6 [style = bold, label=""];
13->28 [style = solid, label="someEvent"];
20->3 [style = bold, label=""];
13->6 [style = solid, label="someEvent"];
16->5 [style = solid, label="applicationConfig"];
11->2 [style = solid, label="anotherEvent"];
4->22 [style = dashed, label="0"];
17->27 [style = dashed, label="0"];
25->16 [style = bold, label=""];
13->11 [style = bold, label=""];
27->15 [style = bold, label=""];
13->9 [style = solid, label="someEvent"];
1->17 [style = bold, label=""];
13->8 [style = solid, label="someEvent"];
13->3 [style = solid, label="someEvent"];
14->26 [style = bold, label=""];
24->16 [style = bold, label=""];
29->27 [style = bold, label=""];
26->12 [style = bold, label=""];
23->22 [style = bold, label=""];
10->5 [style = bold, label=""];
13->20 [style = solid, label="someEvent"];
3->2 [style = bold, label=""];
5->0 [style = bold, label=""];
19->23 [style = bold, label=""];
14->12 [style = bold, label=""];
7->16 [style = bold, label=""];
17->15 [style = bold, label=""];
9->14 [style = bold, label=""];
0->18 [style = bold, label=""];
11->12 [style = solid, label="anotherEvent"];
6->9 [style = bold, label=""];
21->23 [style = dashed, label="0"];
2->28 [style = bold, label=""];
13->14 [style = solid, label="someEvent"];
15->8 [style = bold, label=""];
22->13 [style = bold, label=""];
21->4 [style = bold, label=""];
19->21 [style = bold, label=""];
}
