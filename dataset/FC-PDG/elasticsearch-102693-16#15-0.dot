digraph {
11 [style = filled, label = "assertEquals(mapping,mapper.mappingSource().toString())@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testNoDocValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "IndexableField pointField = fields(0(@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ParsedDocument doc = mapper.parse(source(null))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testStore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"ip\").field(\"store\",true).endObject().endObject().endObject().endObject())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ParsedDocument doc = mapper.parse(source(null))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(storedField.fieldType().stored())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEquals(1,fields.length)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testStore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(3,fields.length)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "IndexableField dvField = fields(1(@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(DocValuesType.SORTED_SET,dvField.fieldType().docValuesType())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "IndexableField pointField = fields(0(@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "IndexableField storedField = fields(2(@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"::1\").endObject()),XContentType.JSON))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(new BytesRef(InetAddressPoint.encode(InetAddress.getByName(\"::1\"))),storedField.binaryValue())@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertEquals(3,fields.length)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(1,pointField.fieldType().pointIndexDimensionCount())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(1,pointField.fieldType().pointIndexDimensionCount())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11->3 [style = bold, label=""];
22->19 [style = bold, label=""];
8->4 [style = bold, label=""];
5->2 [style = solid, label="fields"];
13->1 [style = solid, label="mapping"];
17->18 [style = bold, label=""];
20->5 [style = bold, label=""];
9->2 [style = bold, label=""];
13->11 [style = solid, label="mapping"];
5->9 [style = bold, label=""];
0->13 [style = bold, label=""];
23->5 [style = solid, label="fields"];
3->5 [style = bold, label=""];
1->11 [style = bold, label=""];
2->4 [style = solid, label="fields"];
19->21 [style = bold, label=""];
10->7 [style = bold, label=""];
5->24 [style = bold, label=""];
23->20 [style = bold, label=""];
15->16 [style = bold, label=""];
9->20 [style = dashed, label="0"];
6->12 [style = bold, label=""];
13->1 [style = bold, label=""];
2->6 [style = bold, label=""];
4->10 [style = bold, label=""];
14->2 [style = bold, label=""];
7->15 [style = bold, label=""];
18->14 [style = bold, label=""];
21->23 [style = bold, label=""];
12->8 [style = bold, label=""];
5->4 [style = solid, label="fields"];
2->12 [style = solid, label="fields"];
2->7 [style = solid, label="fields"];
5->12 [style = solid, label="fields"];
}
