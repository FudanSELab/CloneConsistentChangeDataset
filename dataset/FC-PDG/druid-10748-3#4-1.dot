digraph {
0 [style = filled, label = "Assert.assertNotEquals(new DruidNode(serviceName,host,port,null,true,false),new DruidNode(serviceName,host,-1,null,true,false))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "testHashCode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertNotEquals(new DruidNode(serviceName,host,false,port,null,true,false),new DruidNode(serviceName,host,false,-1,null,true,false))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testEquals['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testEquals['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNotEquals(new DruidNode(serviceName,host,false,port,null,true,false),new DruidNode(\"otherServiceName\",host,false,port,null,true,false))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertNotEquals(new DruidNode(serviceName,host,port,null,true,false),new DruidNode(serviceName,\"other.host\",port,null,true,false))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(new DruidNode(serviceName,host,port,null,true,false).hashCode(),new DruidNode(serviceName,host,port,null,true,false).hashCode())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final int port = 9898@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertNotEquals(new DruidNode(serviceName,host,port,null,true,false).hashCode(),new DruidNode(\"otherServiceName\",host,port,null,true,false).hashCode())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertNotEquals(new DruidNode(serviceName,host,port,null,true,false).hashCode(),new DruidNode(serviceName,\"other.host\",port,null,true,false).hashCode())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final String host = \"some.host\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final String serviceName = \"serviceName\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(new DruidNode(serviceName,host,false,port,null,true,false),new DruidNode(serviceName,host,false,port,null,true,false))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(new DruidNode(serviceName,host,port,null,true,false),new DruidNode(serviceName,host,port,null,true,false))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertNotEquals(new DruidNode(serviceName,host,false,port,null,true,false),new DruidNode(serviceName,\"other.host\",false,port,null,true,false))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertNotEquals(new DruidNode(serviceName,host,port,null,true,false).hashCode(),new DruidNode(serviceName,host,-1,null,true,false).hashCode())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertNotEquals(new DruidNode(serviceName,host,port,null,true,false),new DruidNode(\"otherServiceName\",host,port,null,true,false))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16->13 [style = bold, label=""];
4->2 [style = solid, label="port"];
7->11 [style = solid, label="serviceName"];
15->14 [style = bold, label=""];
1->14 [style = dashed, label="0"];
3->5 [style = solid, label="host"];
2->1 [style = bold, label=""];
3->0 [style = solid, label="host"];
0->2 [style = bold, label=""];
4->9 [style = solid, label="port"];
4->8 [style = solid, label="port"];
1->9 [style = dashed, label="0"];
11->12 [style = bold, label=""];
0->11 [style = dashed, label="0"];
7->5 [style = solid, label="serviceName"];
12->9 [style = bold, label=""];
3->4 [style = bold, label=""];
10->7 [style = bold, label=""];
7->1 [style = solid, label="serviceName"];
3->2 [style = solid, label="host"];
7->3 [style = bold, label=""];
3->8 [style = solid, label="host"];
3->9 [style = solid, label="host"];
4->11 [style = solid, label="port"];
2->15 [style = dashed, label="0"];
17->7 [style = bold, label=""];
7->0 [style = solid, label="serviceName"];
5->16 [style = dashed, label="0"];
2->12 [style = dashed, label="0"];
5->0 [style = bold, label=""];
0->13 [style = dashed, label="0"];
4->5 [style = solid, label="port"];
7->8 [style = solid, label="serviceName"];
5->8 [style = dashed, label="0"];
7->12 [style = solid, label="serviceName"];
4->8 [style = bold, label=""];
4->0 [style = solid, label="port"];
13->15 [style = bold, label=""];
3->1 [style = solid, label="host"];
6->7 [style = bold, label=""];
3->12 [style = solid, label="host"];
4->12 [style = solid, label="port"];
8->11 [style = bold, label=""];
4->1 [style = solid, label="port"];
4->5 [style = bold, label=""];
7->2 [style = solid, label="serviceName"];
4->16 [style = bold, label=""];
7->9 [style = solid, label="serviceName"];
3->11 [style = solid, label="host"];
}
