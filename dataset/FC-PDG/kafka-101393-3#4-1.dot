digraph {
11 [style = filled, label = "final KTable<Windowed<String>,String> customers = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER).windowedBy(TimeWindows.of(ofMillis(500L))).aggregate(MockInitializer.STRING_INIT,Materialized.with(Serdes.String(),Serdes.String()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testInputTopic.pipeInput(\"k2\",\"A\",500L)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "timeWindowAggregateManyWindowsTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertOutputKeyValueTimestamp(testOutputTopic,\"k1\",\"0+B\",250)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final TestOutputTopic<Windowed<String>,String> testOutputTopic = driver.createOutputTopic(OUTPUT,new TimeWindowedDeserializer<>(new StringDeserializer()),new StringDeserializer())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final KTable<Windowed<String>,String> customers = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER).windowedBy(TimeWindows.of(ofMillis(500L)).advanceBy(ofMillis(200L))).aggregate(MockInitializer.STRING_INIT,Materialized.with(Serdes.String(),Serdes.String()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertOutputKeyValueTimestamp(testOutputTopic,\"k1\",\"0+A\",0)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertOutputKeyValueTimestamp(testOutputTopic,\"k2\",\"0+A+B\",250)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testInputTopic.pipeInput(\"k2\",\"B\",250)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testInputTopic.pipeInput(\"k1\",\"A\",500L)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testInputTopic.pipeInput(\"k1\",\"A\",500L)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testInputTopic.pipeInput(\"k1\",\"A\",0)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertOutputKeyValueTimestamp(testOutputTopic,\"k1\",\"0+A+B\",250)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "timeWindowAggregateManyWindowsTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "testInputTopic.pipeInput(\"k1\",\"B\",250)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "timeWindowAggregateOverlappingWindowsTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testInputTopic.pipeInput(\"k2\",\"A\",0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertOutputKeyValueTimestamp(testOutputTopic,\"k1\",\"0+B+A\",500)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testInputTopic.pipeInput(\"k2\",\"A\",500L)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertOutputKeyValueTimestamp(testOutputTopic,\"k2\",\"0+B+A\",500)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertOutputKeyValueTimestamp(testOutputTopic,\"k2\",\"0+A\",500)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertOutputKeyValueTimestamp(testOutputTopic,\"k2\",\"0+B\",250)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final TestInputTopic<String,String> testInputTopic = driver.createInputTopic(TOPIC,new StringSerializer(),new StringSerializer())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertOutputKeyValueTimestamp(testOutputTopic,\"k1\",\"0+A\",500)@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final TestOutputTopic<Windowed<String>,String> testOutputTopic = driver.createOutputTopic(OUTPUT,new TimeWindowedDeserializer<>(new StringDeserializer(),WINDOW_SIZE),new StringDeserializer())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testInputTopic.pipeInput(\"k2\",\"A\",499)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "customers.toStream().to(OUTPUT)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertOutputKeyValueTimestamp(testOutputTopic,\"k2\",\"0+A\",0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertOutputKeyValueTimestamp(testOutputTopic,\"k1\",\"0+A\",500)@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6->27 [style = solid, label="testOutputTopic"];
6->1 [style = solid, label="testOutputTopic"];
17->10 [style = bold, label=""];
8->16 [style = bold, label=""];
15->23 [style = bold, label=""];
28->18 [style = bold, label=""];
23->27 [style = bold, label=""];
0->6 [style = bold, label=""];
9->4 [style = bold, label=""];
11->22 [style = dashed, label="0"];
6->21 [style = solid, label="testOutputTopic"];
10->3 [style = bold, label=""];
6->3 [style = solid, label="testOutputTopic"];
6->23 [style = solid, label="testOutputTopic"];
14->1 [style = solid, label="testOutputTopic"];
6->14 [style = dashed, label="0"];
6->8 [style = solid, label="testOutputTopic"];
6->19 [style = solid, label="testOutputTopic"];
13->11 [style = bold, label=""];
22->5 [style = bold, label=""];
6->18 [style = solid, label="testOutputTopic"];
26->22 [style = bold, label=""];
6->10 [style = solid, label="testOutputTopic"];
14->7 [style = bold, label=""];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
25->24 [style = bold, label=""];
11->5 [style = bold, label=""];
6->15 [style = solid, label="testOutputTopic"];
0->14 [style = bold, label=""];
12->10 [style = bold, label=""];
6->28 [style = solid, label="testOutputTopic"];
6->20 [style = solid, label="testOutputTopic"];
5->0 [style = bold, label=""];
6->16 [style = solid, label="testOutputTopic"];
3->8 [style = bold, label=""];
9->25 [style = dashed, label="0"];
24->17 [style = bold, label=""];
4->12 [style = bold, label=""];
7->25 [style = bold, label=""];
27->19 [style = bold, label=""];
19->28 [style = bold, label=""];
18->21 [style = bold, label=""];
14->3 [style = solid, label="testOutputTopic"];
6->7 [style = bold, label=""];
16->20 [style = bold, label=""];
20->15 [style = bold, label=""];
14->8 [style = solid, label="testOutputTopic"];
2->11 [style = bold, label=""];
3->16 [style = dashed, label="0"];
14->10 [style = solid, label="testOutputTopic"];
}
