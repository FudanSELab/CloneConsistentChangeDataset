digraph {
3 [style = filled, label = "builder = TestMessageSet.newBuilder()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TextFormat.merge(messageSetText,extensionRegistry,builder)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "ExtensionRegistry extensionRegistry = ExtensionRegistry.newInstance()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "parserWithOverwriteForbidden.merge(messageSetTextWithRepeatedExtension,extensionRegistry,builder)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestMessageSet.Builder builder = TestMessageSet.newBuilder()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(messageSet.hasExtension(TestMessageSetExtension1.messageSetExtension))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "extensionRegistry.add(TestMessageSetExtension1.messageSetExtension)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "extensionRegistry.add(TestMessageSetExtension2.messageSetExtension)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "messageSet = builder.build()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI()).isEqualTo(456)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertTrue(messageSet.hasExtension(TestMessageSetExtension2.messageSetExtension))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "TextFormat.merge(MESSAGE_SET_TEXT,extensionRegistry,builder)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEquals(123,messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"foo\",messageSet.getExtension(TestMessageSetExtension2.messageSetExtension).getStr())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(456,messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertThat(messageSet.getExtension(TestMessageSetExtension2.messageSetExtension).getStr()).isEqualTo(\"foo\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "TextFormat.merge(messageSetTextWithRepeatedExtension,extensionRegistry,builder)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "TestMessageSet messageSet = builder.build()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testMergeMessageSet['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testMergeMessageSet['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testMergeMessageSetWithOverwriteForbidden['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "TextFormat.merge(MESSAGE_SET_TEXT_WITH_REPEATED_EXTENSION,extensionRegistry,builder)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(messageSet.hasExtension(TestMessageSetExtension2.messageSetExtension)).isTrue()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(messageSet.hasExtension(TestMessageSetExtension1.messageSetExtension)).isTrue()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "parserWithOverwriteForbidden.merge(messageSetText,extensionRegistry,builder)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI()).isEqualTo(123)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "fail(\"expected parse exception\")@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6->17 [style = bold, label=""];
16->3 [style = bold, label=""];
6->23 [style = solid, label="builder"];
19->18 [style = bold, label=""];
7->11 [style = bold, label=""];
9->16 [style = dashed, label="0"];
22->19 [style = bold, label=""];
6->17 [style = solid, label="builder"];
7->10 [style = bold, label=""];
2->6 [style = bold, label=""];
12->21 [style = bold, label=""];
6->23 [style = bold, label=""];
10->19 [style = dashed, label="0"];
26->25 [style = bold, label=""];
0->2 [style = bold, label=""];
3->15 [style = solid, label="builder"];
11->22 [style = dashed, label="0"];
3->26 [style = bold, label=""];
3->15 [style = bold, label=""];
5->13 [style = solid, label="extensionRegistry"];
1->21 [style = dashed, label="0"];
5->14 [style = solid, label="extensionRegistry"];
12->1 [style = bold, label=""];
5->23 [style = solid, label="extensionRegistry"];
13->15 [style = dashed, label="0"];
5->26 [style = solid, label="extensionRegistry"];
24->5 [style = bold, label=""];
6->14 [style = solid, label="builder"];
14->7 [style = bold, label=""];
20->5 [style = bold, label=""];
6->14 [style = bold, label=""];
17->7 [style = bold, label=""];
12->26 [style = dashed, label="0"];
5->15 [style = solid, label="extensionRegistry"];
7->22 [style = bold, label=""];
14->23 [style = dashed, label="0"];
13->12 [style = bold, label=""];
5->17 [style = solid, label="extensionRegistry"];
10->8 [style = bold, label=""];
5->0 [style = bold, label=""];
11->10 [style = bold, label=""];
3->26 [style = solid, label="builder"];
8->9 [style = bold, label=""];
3->13 [style = bold, label=""];
9->3 [style = bold, label=""];
14->17 [style = dashed, label="0"];
8->18 [style = dashed, label="0"];
3->13 [style = solid, label="builder"];
15->12 [style = bold, label=""];
23->7 [style = bold, label=""];
10->9 [style = bold, label=""];
4->5 [style = bold, label=""];
18->16 [style = bold, label=""];
}
