digraph {
15 [style = filled, label = "return new TernaryExpression(new BooleanExpression(condition),originalExpression,nullX())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "return new TernaryExpression(new BooleanExpression(condition),originalExpression,ConstantExpression.NULL)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Expression logVariable@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "condition = new MethodCallExpression(logVariable,\"isEnabledFor\",args)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "condition.setImplicitThis(false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "condition.setImplicitThis(false)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "wrapLoggingMethodCall['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Expression originalExpression@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Expression originalExpression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "String methodName@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "args.addExpression(logLevelExpression)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ArgumentListExpression args = new ArgumentListExpression()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "AttributeExpression logLevelExpression = new AttributeExpression(new ClassExpression(classNode(PRIORITY_NAME)),new ConstantExpression(methodName.toUpperCase(Locale.ENGLISH)))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Expression logVariable@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "wrapLoggingMethodCall['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Expression originalExpression@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "wrapLoggingMethodCall['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "condition = new MethodCallExpression(logVariable,\"is\" + methodName.substring(0,1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",ArgumentListExpression.EMPTY_ARGUMENTS)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "MethodCallExpression condition = new MethodCallExpression(logVariable,\"is\" + methodName.substring(0,1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",ArgumentListExpression.EMPTY_ARGUMENTS)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "!\"trace\".equals(methodName)@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final MethodCallExpression condition@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return new TernaryExpression(new BooleanExpression(condition),originalExpression,ConstantExpression.NULL)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Expression logVariable@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
21->12 [style = dotted, label="true"];
1->4 [style = bold, label=""];
9->12 [style = dotted, label="true"];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
1->10 [style = dotted, label="true"];
16->12 [style = dotted, label="true"];
21->19 [style = bold, label=""];
0->3 [style = solid, label="condition"];
5->3 [style = solid, label="originalExpression"];
16->13 [style = dotted, label="true"];
21->18 [style = dotted, label="true"];
2->0 [style = solid, label="args"];
0->15 [style = solid, label="condition"];
16->7 [style = bold, label=""];
12->19 [style = solid, label="logVariable"];
6->0 [style = solid, label="logVariable"];
4->15 [style = solid, label="condition"];
0->11 [style = bold, label=""];
21->17 [style = dotted, label="true"];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
9->6 [style = dotted, label="true"];
11->15 [style = bold, label=""];
14->4 [style = solid, label="logVariable"];
8->2 [style = bold, label=""];
13->15 [style = solid, label="originalExpression"];
11->3 [style = bold, label=""];
22->20 [style = bold, label=""];
1->4 [style = dotted, label="false"];
7->19 [style = dashed, label="0"];
10->0 [style = bold, label=""];
17->20 [style = solid, label="originalExpression"];
14->0 [style = solid, label="logVariable"];
16->14 [style = dotted, label="true"];
1->8 [style = dotted, label="true"];
19->20 [style = solid, label="condition"];
3->15 [style = dashed, label="0"];
1->0 [style = dotted, label="true"];
4->3 [style = solid, label="condition"];
1->2 [style = dotted, label="true"];
4->11 [style = bold, label=""];
6->4 [style = solid, label="logVariable"];
19->22 [style = bold, label=""];
8->10 [style = solid, label="logLevelExpression"];
9->5 [style = dotted, label="true"];
}
