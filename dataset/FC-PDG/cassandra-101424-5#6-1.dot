digraph {
10 [style = filled, label = "awr.expired()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "awr.response(createDummyMessage(4))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "awr.expired()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "idealCLLatencyTracked['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "awr.onResponse(createDummyMessage(0))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "long startingCount = ks.metric.idealCLWriteLatency.latency.getCount()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "idealCLLatencyTracked['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "awr.onResponse(createDummyMessage(4))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "awr.response(createDummyMessage(1))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "failedIdealCLIncrementsStat['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "awr.response(createDummyMessage(2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(1,ks.metric.writeFailedIdealCL.getCount())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "awr.response(createDummyMessage(5))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "AbstractWriteResponseHandler awr = createWriteResponseHandler(ConsistencyLevel.LOCAL_QUORUM,ConsistencyLevel.EACH_QUORUM,System.nanoTime() - TimeUnit.DAYS.toNanos(1))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "awr.onResponse(createDummyMessage(5))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "ks.metric.idealCLWriteLatency.totalLatency.dec(ks.metric.idealCLWriteLatency.totalLatency.getCount())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "awr.expired()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(startingCount + 1,ks.metric.idealCLWriteLatency.latency.getCount())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(0,ks.metric.writeFailedIdealCL.getCount())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(TimeUnit.DAYS.toMicros(1) < ks.metric.idealCLWriteLatency.totalLatency.getCount())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "awr.onResponse(createDummyMessage(1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(0,ks.metric.idealCLWriteLatency.totalLatency.getCount())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "awr.response(createDummyMessage(0))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "AbstractWriteResponseHandler awr = createWriteResponseHandler(ConsistencyLevel.LOCAL_QUORUM,ConsistencyLevel.EACH_QUORUM)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->23 [style = dashed, label="0"];
6->21 [style = dashed, label="0"];
15->10 [style = bold, label=""];
11->15 [style = dashed, label="0"];
2->3 [style = bold, label=""];
0->11 [style = bold, label=""];
7->0 [style = bold, label=""];
23->3 [style = bold, label=""];
0->22 [style = dashed, label="0"];
6->2 [style = bold, label=""];
12->13 [style = bold, label=""];
7->22 [style = bold, label=""];
22->18 [style = bold, label=""];
1->6 [style = bold, label=""];
18->10 [style = bold, label=""];
3->7 [style = bold, label=""];
11->10 [style = bold, label=""];
0->13 [style = dashed, label="0"];
6->5 [style = solid, label="startingCount"];
4->20 [style = bold, label=""];
8->9 [style = bold, label=""];
10->4 [style = bold, label=""];
9->5 [style = bold, label=""];
7->12 [style = dashed, label="0"];
4->8 [style = bold, label=""];
13->15 [style = bold, label=""];
20->19 [style = bold, label=""];
5->19 [style = dashed, label="0"];
16->12 [style = bold, label=""];
17->21 [style = bold, label=""];
14->6 [style = bold, label=""];
3->16 [style = dashed, label="0"];
21->23 [style = bold, label=""];
2->16 [style = bold, label=""];
}
