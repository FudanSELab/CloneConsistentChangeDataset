digraph {
10 [style = filled, label = "Assert.assertEquals(originalSchema.getTransformSpec(),deserialized.getTransformSpec())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testSerdeWithUpdatedDataSchemaAddedField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(originalSchema.getParser().getParseSpec(),deserialized.getParser().getParseSpec())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "DataSchema originalSchema = new DataSchema(\"test\",parser,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a2f660,new ArbitraryGranularitySpec(Granularities.DAY,ImmutableList.of(Intervals.of(\"2014/2015\"))),null,jsonMapper)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(\"time\",\"col1\",\"col2\",\"metric1\",\"metric2\"),schema.getDimensionsSpec().getDimensionExclusions())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Map<String,Object> parser = jsonMapper.convertValue(new StringInputRowParser(new JSONParseSpec(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\",\"dimA\")),null,null),null,null),null),JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String serialized = jsonMapper.writeValueAsString(originalSchema)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testDefaultExclusions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "DataSchema schema = new DataSchema(\"test\",parser,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a2f608,new ArbitraryGranularitySpec(Granularities.DAY,ImmutableList.of(Intervals.of(\"2014/2015\"))),null,jsonMapper)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(originalSchema.getDataSource(),deserialized.getDataSource())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertArrayEquals(originalSchema.getAggregators(),deserialized.getAggregators())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(originalSchema.getGranularitySpec(),deserialized.getGranularitySpec())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized,)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(null,deserialized.getExtra())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(originalSchema.getParserMap(),deserialized.getParserMap())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testDefaultExclusions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(\"time\",\"col1\",\"col2\",\"metric1\",\"metric2\"),schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
4->3 [style = bold, label=""];
3->1 [style = bold, label=""];
11->14 [style = bold, label=""];
3->1 [style = solid, label="parser"];
3->13 [style = solid, label="parser"];
1->13 [style = dashed, label="0"];
7->9 [style = bold, label=""];
2->5 [style = dashed, label="0"];
10->16 [style = bold, label=""];
7->9 [style = solid, label="serialized"];
13->7 [style = bold, label=""];
9->15 [style = bold, label=""];
6->10 [style = bold, label=""];
3->13 [style = bold, label=""];
1->2 [style = bold, label=""];
12->3 [style = bold, label=""];
8->11 [style = bold, label=""];
15->8 [style = bold, label=""];
14->6 [style = bold, label=""];
13->7 [style = solid, label="originalSchema"];
}
