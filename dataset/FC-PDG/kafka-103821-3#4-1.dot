digraph {
18 [style = filled, label = "testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "env.kafkaClient().prepareResponse(expectDeleteTopicsRequestWithTopics(\"topic2\"),prepareDeleteTopicsResponse(1000,deletableTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting next CreateTopics request\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "env.kafkaClient().setNodeApiVersions(NodeApiVersions.create())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "MockTime time = new MockTime()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(0,e.throttleTimeMs())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting next DeleteTopics request\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "long defaultApiTimeout = 60000@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "env.kafkaClient().prepareResponse(expectCreateTopicsRequestWithTopics(\"topic1\",\"topic2\",\"topic3\"),prepareCreateTopicsResponse(1000,creatableTopicResult(\"topic1\",Errors.NONE),creatableTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED),creatableTopicResult(\"topic3\",Errors.TOPIC_ALREADY_EXISTS)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertNull(result.values().get(\"topic1\").get())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "env.kafkaClient().prepareResponse(expectCreateTopicsRequestWithTopics(\"topic2\"),prepareCreateTopicsResponse(1000,creatableTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED)))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestUtils.assertFutureThrows(result.values().get(\"topic3\"),)@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting CreateTopics requests\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting DeleteTopics requests\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "TestUtils.assertFutureThrows(result.values().get(\"topic3\"),)@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "testCreateTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "CreateTopicsResult result = env.adminClient().createTopics(asList(new NewTopic(\"topic1\",1,(short)1),new NewTopic(\"topic2\",1,(short)1),new NewTopic(\"topic3\",1,(short)1)),new CreateTopicsOptions().retryOnQuotaViolation(true))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TestUtils.assertFutureThrows(result.values().get(\"topic2\"),)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "env.kafkaClient().prepareResponse(expectDeleteTopicsRequestWithTopics(\"topic1\",\"topic2\",\"topic3\"),prepareDeleteTopicsResponse(1000,deletableTopicResult(\"topic1\",Errors.NONE),deletableTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED),deletableTopicResult(\"topic3\",Errors.TOPIC_ALREADY_EXISTS)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testCreateTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "DeleteTopicsResult result = env.adminClient().deleteTopics(asList(\"topic1\",\"topic2\",\"topic3\"),new DeleteTopicsOptions().retryOnQuotaViolation(true))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "time.sleep(defaultApiTimeout + 1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
10->22 [style = bold, label=""];
14->3 [style = bold, label=""];
16->15 [style = bold, label=""];
18->3 [style = bold, label=""];
0->9 [style = bold, label=""];
20->17 [style = bold, label=""];
7->1 [style = bold, label=""];
12->20 [style = dashed, label="0"];
17->1 [style = bold, label=""];
22->19 [style = bold, label=""];
7->17 [style = dashed, label="0"];
11->4 [style = bold, label=""];
8->3 [style = bold, label=""];
2->10 [style = bold, label=""];
0->22 [style = dashed, label="0"];
13->16 [style = bold, label=""];
12->7 [style = bold, label=""];
9->6 [style = bold, label=""];
9->19 [style = dashed, label="0"];
11->13 [style = dashed, label="0"];
21->20 [style = bold, label=""];
3->2 [style = bold, label=""];
5->13 [style = bold, label=""];
10->0 [style = bold, label=""];
5->11 [style = bold, label=""];
3->1 [style = solid, label="defaultApiTimeout"];
6->12 [style = bold, label=""];
19->21 [style = bold, label=""];
}
