digraph {
10 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(wrappedData.position()).isEqualTo(netBytes.length)@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThatThrownBy(null).isInstanceOf().hasMessageContaining(\"Error decrypting data\")@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "wrappedData.flip()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(unwrappedBuffer.remaining()).isEqualTo(0)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertThat(wrappedData.position()).isEqualTo(netBytes.length)@@@17@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "unwrapWithBufferUnderflow['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "unwrapWithBufferUnderflow['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ByteBuffer unwrappedBuffer = sharedBuffer.getBuffer()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "unwrapWithDecryptionError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "wrappedData.put(netBytes)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(CLOSED,FINISHED,0,0))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "unwrappedBuffer.flip()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "byte(( netBytes = new byte((((@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Arrays.fill(netBytes,(byte)0x1F)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "byte(( netBytes = new byte((((@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity())@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(inputSharing.getBuffer().capacity())@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(unwrappedBuffer.remaining()).isEqualTo(0)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
1->4 [style = bold, label=""];
15->13 [style = bold, label=""];
16->11 [style = bold, label=""];
5->20 [style = bold, label=""];
11->8 [style = solid, label="netBytes"];
0->2 [style = bold, label=""];
8->3 [style = bold, label=""];
12->15 [style = bold, label=""];
14->17 [style = bold, label=""];
16->8 [style = solid, label="netBytes"];
12->0 [style = bold, label=""];
3->9 [style = bold, label=""];
9->10 [style = solid, label="testEngine"];
10->12 [style = bold, label=""];
17->12 [style = solid, label="wrappedData"];
7->6 [style = bold, label=""];
20->12 [style = bold, label=""];
12->18 [style = bold, label=""];
9->5 [style = bold, label=""];
11->8 [style = bold, label=""];
10->20 [style = dashed, label="0"];
19->4 [style = bold, label=""];
2->7 [style = bold, label=""];
16->11 [style = solid, label="netBytes"];
11->3 [style = solid, label="netBytes"];
4->11 [style = bold, label=""];
17->16 [style = bold, label=""];
13->2 [style = bold, label=""];
5->12 [style = solid, label="testEngine"];
}
