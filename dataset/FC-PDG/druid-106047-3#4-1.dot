digraph {
3 [style = filled, label = "List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.RIGHT))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(originalFilter,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",\"countryIsoCode\",\"countryNumber\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"),ImmutableList.of())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(null,new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",null),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\",null))),ImmutableList.of())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(originalFilter,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",\"countryIsoCode\",FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"k\",FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\"),ImmutableList.of())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Filter originalFilter = new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",null),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\",null)))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(null,new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",null),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\",null))),ImmutableSet.of())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.INNER))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),joinableClauses,joinFilterPreAnalysis)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(joinableClauses,originalFilter)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Filter originalFilter = new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",null),new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\",null)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(null,new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",null),new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\",null))),ImmutableList.of())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(expectedFilterSplit,actualFilterSplit)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
3->1 [style = solid, label="joinableClauses"];
8->5 [style = solid, label="originalFilter"];
11->14 [style = bold, label=""];
8->15 [style = dashed, label="0"];
5->1 [style = solid, label="joinFilterPreAnalysis"];
14->5 [style = solid, label="joinableClauses"];
2->4 [style = bold, label=""];
15->12 [style = solid, label="originalFilter"];
1->13 [style = bold, label=""];
4->7 [style = bold, label=""];
15->5 [style = bold, label=""];
5->2 [style = solid, label="joinFilterPreAnalysis"];
6->10 [style = dashed, label="0"];
2->4 [style = solid, label="actualFilterSplit"];
6->2 [style = bold, label=""];
5->1 [style = bold, label=""];
1->6 [style = bold, label=""];
3->5 [style = solid, label="joinableClauses"];
6->13 [style = dashed, label="0"];
8->5 [style = bold, label=""];
14->1 [style = solid, label="joinableClauses"];
10->4 [style = solid, label="expectedFilterSplit"];
3->8 [style = bold, label=""];
8->7 [style = solid, label="originalFilter"];
6->4 [style = solid, label="expectedFilterSplit"];
7->12 [style = dashed, label="0"];
4->12 [style = bold, label=""];
9->3 [style = bold, label=""];
10->2 [style = bold, label=""];
14->15 [style = bold, label=""];
15->5 [style = solid, label="originalFilter"];
3->14 [style = dashed, label="0"];
1->10 [style = bold, label=""];
13->4 [style = solid, label="expectedFilterSplit"];
13->2 [style = bold, label=""];
}
