digraph {
0 [style = filled, label = "assertEquals(1,s1.getSlideNumber())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(1,ppt2.getSlides().size())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "HSLFSlide s1 = ppt.createSlide()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ppt = new HSLFSlideShow(new HSLFSlideShowImpl(new ByteArrayInputStream(out.toByteArray())))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(4,s2._getSheetRefId())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "HSLFSlide s2 = ppt.createSlide()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(2,ppt.getSlides().size())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(ppt.getSlides().isEmpty())@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "HSLFSlide s1 = ppt1.createSlide()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testAddSlides1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertTrue(ppt1.getSlides().isEmpty())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "ByteArrayOutputStream out = new ByteArrayOutputStream()@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(1,ppt.getSlides().size())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(256,s1._getSheetNumber())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testAddSlides1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(1,ppt1.getSlides().size())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "ppt.write(out)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "out.close()@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(2,ppt.getSlides().size())@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(1,ppt.getSlides().size())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "HSLFSlideShow ppt = new HSLFSlideShow(new HSLFSlideShowImpl(.getResourceAsStream(\"/org/apache/poi/hslf/data/empty.ppt\")))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(3,s1._getSheetRefId())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(2,s2.getSlideNumber())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testAddSlides2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(257,s2._getSheetNumber())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
14->16 [style = bold, label=""];
5->10 [style = bold, label=""];
18->3 [style = bold, label=""];
16->13 [style = bold, label=""];
8->6 [style = bold, label=""];
0->21 [style = bold, label=""];
7->8 [style = bold, label=""];
24->22 [style = bold, label=""];
0->15 [style = bold, label=""];
1->9 [style = bold, label=""];
6->20 [style = bold, label=""];
19->5 [style = bold, label=""];
6->4 [style = bold, label=""];
11->5 [style = bold, label=""];
12->2 [style = bold, label=""];
23->24 [style = bold, label=""];
2->0 [style = bold, label=""];
22->18 [style = bold, label=""];
13->12 [style = bold, label=""];
3->7 [style = bold, label=""];
17->14 [style = bold, label=""];
4->20 [style = dashed, label="0"];
1->16 [style = dashed, label="0"];
9->13 [style = dashed, label="0"];
7->15 [style = dashed, label="0"];
3->7 [style = solid, label="out"];
9->12 [style = bold, label=""];
10->1 [style = bold, label=""];
10->14 [style = dashed, label="0"];
21->23 [style = bold, label=""];
}
