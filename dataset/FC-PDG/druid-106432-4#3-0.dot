digraph {
5 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"one-multi-value-dim-different-order\")@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "testMultipleDimensionsOneOfWhichIsMultiValue1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"automotive\",\"alias\",\"a\",\"rows\",2L,\"idx\",282L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"business\",\"alias\",\"b\",\"rows\",2L,\"idx\",230L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"entertainment\",\"alias\",\"e\",\"rows\",2L,\"idx\",324L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"health\",\"alias\",\"h\",\"rows\",2L,\"idx\",233L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"mezzanine\",\"alias\",\"m\",\"rows\",6L,\"idx\",5317L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"news\",\"alias\",\"n\",\"rows\",2L,\"idx\",235L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"premium\",\"alias\",\"p\",\"rows\",6L,\"idx\",5405L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"automotive\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",282L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"business\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",230L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"entertainment\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",324L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"health\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",233L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"mezzanine\",\"alias\",\"preferred\",\"rows\",6L,\"idx\",5317L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"news\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",235L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"premium\",\"alias\",\"preferred\",\"rows\",6L,\"idx\",5405L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"technology\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",175L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"travel\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",245L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"technology\",\"alias\",\"t\",\"rows\",2L,\"idx\",175L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"travel\",\"alias\",\"t\",\"rows\",2L,\"idx\",245L))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testMultipleDimensionsOneOfWhichIsMultiValueDifferentOrder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"automotive\",\"alias\",\"a\",\"rows\",2L,\"idx\",282L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"automotive\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",282L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"business\",\"alias\",\"b\",\"rows\",2L,\"idx\",230L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"business\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",230L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"entertainment\",\"alias\",\"e\",\"rows\",2L,\"idx\",324L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"entertainment\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",324L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"health\",\"alias\",\"h\",\"rows\",2L,\"idx\",233L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"health\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",233L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"mezzanine\",\"alias\",\"m\",\"rows\",6L,\"idx\",5317L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"mezzanine\",\"alias\",\"preferred\",\"rows\",6L,\"idx\",5317L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"news\",\"alias\",\"n\",\"rows\",2L,\"idx\",235L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"news\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",235L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"premium\",\"alias\",\"p\",\"rows\",6L,\"idx\",5405L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"premium\",\"alias\",\"preferred\",\"rows\",6L,\"idx\",5405L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"technology\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",175L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"technology\",\"alias\",\"t\",\"rows\",2L,\"idx\",175L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"travel\",\"alias\",\"preferred\",\"rows\",2L,\"idx\",245L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"quality\",\"travel\",\"alias\",\"t\",\"rows\",2L,\"idx\",245L))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"placementish\",\"alias\"),new DefaultDimensionSpec(\"quality\",\"quality\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(QueryRunnerTestHelper.allGran).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"\")@@@6@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"quality\",\"quality\"),new DefaultDimensionSpec(\"placementish\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(QueryRunnerTestHelper.allGran).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->9 [style = bold, label=""];
3->2 [style = bold, label=""];
2->4 [style = solid, label="results"];
1->3 [style = bold, label=""];
8->2 [style = bold, label=""];
1->2 [style = solid, label="query"];
9->8 [style = bold, label=""];
3->4 [style = solid, label="expectedResults"];
9->2 [style = solid, label="query"];
2->4 [style = bold, label=""];
8->4 [style = solid, label="expectedResults"];
6->1 [style = bold, label=""];
3->5 [style = solid, label="expectedResults"];
4->5 [style = dashed, label="0"];
2->5 [style = solid, label="results"];
0->1 [style = bold, label=""];
1->9 [style = dashed, label="0"];
2->5 [style = bold, label=""];
}
