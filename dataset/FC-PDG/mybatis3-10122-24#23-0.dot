digraph {
58 [style = filled, label = "assertThat(config.getTypeAliasRegistry().getTypeAliases().get(\"blog\")).isEqualTo()@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(config.getMapperRegistry().getMappers().size()).isEqualTo(4)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(config.getDefaultFetchSize()).isEqualTo(100)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods()).isEqualTo(new HashSet<>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\")))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "XMLConfigBuilder builder = new XMLConfigBuilder(inputStream)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "shouldSuccessfullyLoadMinimalXMLConfigFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertThat(config.isUseGeneratedKeys()).isFalse()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "assertThat(config.getDefaultScriptingLanuageInstance()).isInstanceOf()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertThat(config.isUseColumnLabel()).isFalse()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String resource = \"org/apache/ibatis/builder/CustomizedSettingsMapperConfig.xml\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods()).isEqualTo(new HashSet<>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\",\"xxx\")))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertThat(config.getTypeAliasRegistry().getTypeAliases().get(\"blogauthor\")).isEqualTo()@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "Configuration config = builder.parse()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "XMLConfigBuilder builder = new XMLConfigBuilder(inputStream,null,props)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(config.getAutoMappingBehavior()).isEqualTo(AutoMappingBehavior.PARTIAL)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase()).isFalse()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.SIMPLE)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(config.getLogImpl().getName()).isEqualTo(.getName())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Environment environment = config.getEnvironment()@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertNotNull(config)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "String resource = \"org/apache/ibatis/builder/MinimalMapperConfig.xml\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertThat(config.isCallSettersOnNulls()).isTrue()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.BATCH)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.SESSION)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(config.getDefaultScriptingLanuageInstance()).isInstanceOf()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertThat(objectFactory.getProperties().size()).isEqualTo(1)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(config.getReflectorFactory()).isInstanceOf()@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled()).isTrue()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Properties props = new Properties()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertNull(config.getDefaultStatementTimeout())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(config.getObjectWrapperFactory()).isInstanceOf()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(config.isAggressiveLazyLoading()).isTrue()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior()).isEqualTo(AutoMappingUnknownColumnBehavior.WARNING)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled()).isFalse()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled()).isTrue()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(config.isUseGeneratedKeys()).isTrue()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(config.getProxyFactory()).isInstanceOf()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "shouldSuccessfullyLoadXMLConfigFile['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "assertThat(config.getJdbcTypeForNull()).isEqualTo(JdbcType.NULL)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "shouldSuccessfullyLoadXMLConfigFile['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertThat(plugin.getProperties().getProperty(\"pluginProperty\")).isEqualTo(\"100\")@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "assertThat(config.getJdbcTypeForNull()).isEqualTo(JdbcType.OTHER)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(objectFactory.getProperties().getProperty(\"objectFactoryProperty\")).isEqualTo(\"100\")@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertTrue(config.getTypeAliasRegistry().getTypeAliases().get(\"blog\").equals())@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertThat(config.isCacheEnabled()).isFalse()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(,JdbcType.VARCHAR)).isInstanceOf()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertThat(config.getLogPrefix()).isEqualTo(\"mybatis_\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase()).isTrue()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(environment.getTransactionFactory()).isInstanceOf()@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled()).isTrue()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "assertThat(config.isUseColumnLabel()).isTrue()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(environment.getDataSource()).isInstanceOf()@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled()).isFalse()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertThat(environment.getId()).isEqualTo(\"development\")@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "assertThat(config.isCacheEnabled()).isTrue()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "props.put(\"prop2\",\"cccc\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(plugin.getProperties().size()).isEqualTo(1)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertNull(config.getLogImpl())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(config.getTypeAliasRegistry().getTypeAliases().get(\"cart\").equals())@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertTrue(config.getTypeAliasRegistry().getTypeAliases().get(\"blogauthor\").equals())@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
69 [style = filled, label = "assertThat(config.isCallSettersOnNulls()).isFalse()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.STATEMENT)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(config.isLazyLoadingEnabled()).isTrue()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "assertThat(config.getProxyFactory()).isInstanceOf()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "assertNull(config.getLogPrefix())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertThat(config.getTypeAliasRegistry().getTypeAliases().get(\"cart\")).isEqualTo()@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertThat(config.getDefaultStatementTimeout()).isEqualTo(10)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ExamplePlugin plugin = (ExamplePlugin)config.getInterceptors().get(0)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@58@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "assertNull(config.getDefaultFetchSize())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "assertNull(config.getConfigurationFactory())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled()).isFalse()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "ExampleObjectFactory objectFactory = (ExampleObjectFactory)config.getObjectFactory()@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(config.getDatabaseId()).isEqualTo(\"derby\")@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(config.getConfigurationFactory().getName()).isEqualTo(.getName())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(config.getVfsImpl().getName()).isEqualTo(.getName())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertThat(config.isAggressiveLazyLoading()).isFalse()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior()).isEqualTo(AutoMappingUnknownColumnBehavior.NONE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(config.getAutoMappingBehavior()).isEqualTo(AutoMappingBehavior.NONE)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "assertThat(config.isLazyLoadingEnabled()).isFalse()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27->87 [style = dashed, label="0"];
33->67 [style = dashed, label="0"];
31->9 [style = bold, label=""];
12->70 [style = dashed, label="0"];
5->45 [style = bold, label=""];
59->58 [style = bold, label=""];
86->60 [style = bold, label=""];
68->73 [style = bold, label=""];
82->65 [style = bold, label=""];
19->1 [style = bold, label=""];
73->80 [style = bold, label=""];
46->66 [style = bold, label=""];
76->87 [style = bold, label=""];
51->63 [style = dashed, label="0"];
23->12 [style = bold, label=""];
27->51 [style = bold, label=""];
45->17 [style = bold, label=""];
32->11 [style = bold, label=""];
7->82 [style = dashed, label="0"];
41->13 [style = bold, label=""];
4->16 [style = bold, label=""];
70->83 [style = bold, label=""];
12->28 [style = bold, label=""];
85->77 [style = bold, label=""];
47->48 [style = bold, label=""];
38->65 [style = dashed, label="0"];
16->6 [style = bold, label=""];
25->55 [style = bold, label=""];
60->81 [style = bold, label=""];
22->41 [style = bold, label=""];
65->76 [style = bold, label=""];
0->73 [style = dashed, label="0"];
11->37 [style = bold, label=""];
75->64 [style = bold, label=""];
36->85 [style = dashed, label="0"];
8->22 [style = bold, label=""];
29->26 [style = bold, label=""];
87->63 [style = bold, label=""];
20->18 [style = bold, label=""];
0->34 [style = bold, label=""];
52->5 [style = bold, label=""];
13->57 [style = dashed, label="0"];
26->46 [style = dashed, label="0"];
56->14 [style = bold, label=""];
38->35 [style = bold, label=""];
28->83 [style = dashed, label="0"];
6->39 [style = bold, label=""];
32->62 [style = dashed, label="0"];
14->72 [style = dashed, label="0"];
14->21 [style = bold, label=""];
71->78 [style = bold, label=""];
30->15 [style = bold, label=""];
75->64 [style = solid, label="config"];
74->75 [style = bold, label=""];
13->10 [style = bold, label=""];
44->54 [style = bold, label=""];
66->70 [style = bold, label=""];
1->8 [style = bold, label=""];
79->72 [style = bold, label=""];
34->40 [style = bold, label=""];
8->81 [style = dashed, label="0"];
2->3 [style = bold, label=""];
41->58 [style = dashed, label="0"];
43->20 [style = bold, label=""];
40->19 [style = bold, label=""];
58->57 [style = bold, label=""];
78->85 [style = bold, label=""];
23->66 [style = dashed, label="0"];
8->59 [style = bold, label=""];
77->68 [style = bold, label=""];
22->59 [style = dashed, label="0"];
46->29 [style = bold, label=""];
42->14 [style = bold, label=""];
48->68 [style = dashed, label="0"];
62->84 [style = bold, label=""];
53->46 [style = bold, label=""];
21->53 [style = solid, label="props"];
40->69 [style = dashed, label="0"];
50->78 [style = dashed, label="0"];
63->67 [style = bold, label=""];
15->43 [style = bold, label=""];
84->71 [style = bold, label=""];
21->49 [style = bold, label=""];
33->32 [style = bold, label=""];
37->71 [style = dashed, label="0"];
18->52 [style = bold, label=""];
35->27 [style = bold, label=""];
36->47 [style = bold, label=""];
72->74 [style = bold, label=""];
39->44 [style = bold, label=""];
24->2 [style = bold, label=""];
3->31 [style = bold, label=""];
28->7 [style = bold, label=""];
54->30 [style = bold, label=""];
35->76 [style = dashed, label="0"];
64->46 [style = bold, label=""];
48->0 [style = bold, label=""];
67->62 [style = bold, label=""];
83->82 [style = bold, label=""];
49->53 [style = bold, label=""];
7->38 [style = bold, label=""];
17->24 [style = bold, label=""];
50->36 [style = bold, label=""];
9->25 [style = bold, label=""];
26->23 [style = bold, label=""];
10->4 [style = bold, label=""];
81->61 [style = bold, label=""];
80->69 [style = bold, label=""];
57->10 [style = bold, label=""];
69->86 [style = bold, label=""];
34->80 [style = dashed, label="0"];
37->50 [style = bold, label=""];
51->33 [style = bold, label=""];
}
