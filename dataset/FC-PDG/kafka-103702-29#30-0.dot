digraph {
19 [style = filled, label = "int appends = batchSize / msgSize@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "RecordBatch batch = batches.get(0)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "LogEntry entry = iter.next()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(partitionBatches.peekFirst().isWritable())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testFull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Iterator<LogEntry> iter = batch.records().deepEntries().iterator()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "ProducerBatch batch = batches.get(0)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "Iterator<ProducerBatch> partitionBatchesIterator = partitionBatches.iterator()@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "RecordBatch batch = batches.get(0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertFalse(partitionBatchesIterator.next().isWritable())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "i < appends@@@28@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "int i = 0@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),entry.record().key())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "LogEntry entry = iter.next()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(1024,10 * 1024,CompressionType.NONE,lingerMs,100L,metrics,time)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "List<RecordBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "i < appends@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Deque<RecordBatch> partitionBatches = accum.batches().get(tp1)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "Iterator<LogEntry> iter = batch.records().deepEntries().iterator()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(batchSize,10L * batchSize,CompressionType.NONE,10L,100L,metrics,time)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "List<ProducerBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(1,partitionBatches.size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertEquals(\"No partitions should be ready\",0,accum.ready(cluster,time.milliseconds()).readyNodes.size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Iterator<RecordBatch> partitionBatchesIterator = partitionBatches.iterator()@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "long now = time.milliseconds()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int batchSize = 1024@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "long lingerMs = 10L@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(1,batches.size())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "accum.append(tp1,0L,key,value,null,maxBlockTimeMs)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),entry.record().key())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Deque<ProducerBatch> partitionBatches = accum.batches().get(tp1)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertEquals(\"No partitions should be ready.\",0,accum.ready(cluster,now).readyNodes.size())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(1,batches.size())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Deque<RecordBatch> partitionBatches = accum.batches().get(tp1)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "testLinger['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(2,partitionBatches.size())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<RecordBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "time.sleep(10)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "i++@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Deque<ProducerBatch> partitionBatches = accum.batches().get(tp1)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),entry.record().value())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "accum.append(tp1,0L,key,value,null,maxBlockTimeMs)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i++@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),entry.record().value())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testFull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertTrue(partitionBatchesIterator.next().isWritable())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->36 [style = dashed, label="0"];
14->24 [style = bold, label=""];
21->12 [style = dotted, label="true"];
2->26 [style = bold, label=""];
19->29 [style = solid, label="appends"];
15->21 [style = bold, label=""];
21->8 [style = dotted, label="true"];
2->32 [style = dashed, label="0"];
26->9 [style = bold, label=""];
45->48 [style = bold, label=""];
29->20 [style = dotted, label="true"];
30->29 [style = bold, label=""];
28->21 [style = bold, label=""];
42->44 [style = bold, label=""];
38->49 [style = bold, label=""];
21->23 [style = dotted, label="true"];
23->12 [style = bold, label=""];
19->15 [style = bold, label=""];
24->27 [style = bold, label=""];
15->21 [style = solid, label="i"];
11->16 [style = bold, label=""];
22->25 [style = bold, label=""];
8->28 [style = bold, label=""];
22->46 [style = bold, label=""];
25->34 [style = dashed, label="0"];
24->33 [style = dashed, label="0"];
18->11 [style = bold, label=""];
48->50 [style = bold, label=""];
31->4 [style = bold, label=""];
1->19 [style = solid, label="batchSize"];
0->29 [style = bold, label=""];
21->22 [style = dotted, label="true"];
20->3 [style = bold, label=""];
33->27 [style = bold, label=""];
32->26 [style = bold, label=""];
21->28 [style = dotted, label="true"];
1->17 [style = bold, label=""];
39->22 [style = bold, label=""];
29->20 [style = bold, label=""];
21->22 [style = bold, label=""];
30->0 [style = solid, label="i"];
1->17 [style = solid, label="batchSize"];
37->47 [style = bold, label=""];
46->43 [style = bold, label=""];
29->0 [style = dotted, label="true"];
27->18 [style = bold, label=""];
29->6 [style = dotted, label="true"];
48->50 [style = solid, label="lingerMs"];
47->40 [style = bold, label=""];
3->6 [style = bold, label=""];
19->21 [style = solid, label="appends"];
27->35 [style = bold, label=""];
5->32 [style = bold, label=""];
21->25 [style = dotted, label="true"];
36->13 [style = bold, label=""];
12->8 [style = bold, label=""];
16->5 [style = bold, label=""];
34->23 [style = bold, label=""];
4->1 [style = bold, label=""];
15->28 [style = solid, label="i"];
29->3 [style = dotted, label="true"];
1->50 [style = dashed, label="0"];
21->14 [style = bold, label=""];
30->29 [style = solid, label="i"];
49->42 [style = bold, label=""];
25->23 [style = bold, label=""];
26->36 [style = bold, label=""];
21->34 [style = dotted, label="true"];
6->0 [style = bold, label=""];
13->30 [style = bold, label=""];
43->37 [style = bold, label=""];
44->39 [style = bold, label=""];
17->19 [style = bold, label=""];
18->35 [style = dashed, label="0"];
14->33 [style = bold, label=""];
0->29 [style = solid, label="i"];
5->2 [style = bold, label=""];
28->21 [style = solid, label="i"];
50->38 [style = bold, label=""];
22->34 [style = bold, label=""];
40->41 [style = bold, label=""];
10->4 [style = bold, label=""];
29->7 [style = bold, label=""];
9->13 [style = bold, label=""];
35->11 [style = bold, label=""];
}
