digraph {
5 [style = filled, label = "mergeALotOfSourcesOneByOneSynchronouslyTakeHalf['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<Flowable<Integer>> sourceList = new ArrayList<Flowable<Integer>>(n)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals((Integer)j,it.next())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "mergeALotOfSourcesOneByOneSynchronouslyTakeHalf['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertEquals(j,n / 2)@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "sourceList.add(Flowable.just(i))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Iterator<Integer> it = Observable.merge(Observable.fromIterable(sourceList),1).take(n / 2).blockingIterable().iterator()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int i = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "it.hasNext()@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "sourceList.add(Observable.just(i))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "List<Flowable<Integer>> sourceList = new ArrayList<>(n)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "List<Observable<Integer>> sourceList = new ArrayList<Observable<Integer>>(n)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "i++@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int j = 0@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Iterator<Integer> it = Flowable.merge(Flowable.fromIterable(sourceList),1).take(n / 2).blockingIterable().iterator()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i < n@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "mergeALotOfSourcesOneByOneSynchronouslyTakeHalf['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "j++@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int n = 10000@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->0 [style = solid, label="n"];
4->10 [style = bold, label=""];
11->14 [style = solid, label="n"];
6->3 [style = bold, label=""];
17->10 [style = bold, label=""];
11->17 [style = solid, label="n"];
1->8 [style = bold, label=""];
8->16 [style = solid, label="i"];
16->8 [style = bold, label=""];
7->0 [style = solid, label="j"];
11->14 [style = bold, label=""];
7->12 [style = bold, label=""];
2->8 [style = dotted, label="true"];
2->6 [style = bold, label=""];
10->8 [style = solid, label="i"];
2->1 [style = bold, label=""];
4->17 [style = dashed, label="0"];
11->4 [style = bold, label=""];
18->11 [style = bold, label=""];
10->2 [style = solid, label="i"];
14->10 [style = bold, label=""];
10->1 [style = solid, label="i"];
3->12 [style = bold, label=""];
9->7 [style = bold, label=""];
12->9 [style = bold, label=""];
15->3 [style = bold, label=""];
12->0 [style = bold, label=""];
13->11 [style = bold, label=""];
11->4 [style = solid, label="n"];
10->16 [style = solid, label="i"];
8->2 [style = bold, label=""];
6->15 [style = dashed, label="0"];
11->2 [style = solid, label="n"];
7->9 [style = solid, label="j"];
3->7 [style = solid, label="j"];
2->1 [style = dotted, label="true"];
8->1 [style = solid, label="i"];
1->16 [style = dashed, label="0"];
2->15 [style = bold, label=""];
11->17 [style = bold, label=""];
10->2 [style = bold, label=""];
5->11 [style = bold, label=""];
4->14 [style = dashed, label="0"];
12->7 [style = dotted, label="true"];
3->9 [style = solid, label="j"];
8->2 [style = solid, label="i"];
2->16 [style = dotted, label="true"];
3->0 [style = solid, label="j"];
12->9 [style = dotted, label="true"];
2->16 [style = bold, label=""];
}
