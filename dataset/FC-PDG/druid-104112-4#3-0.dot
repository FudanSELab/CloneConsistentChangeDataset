digraph {
14 [style = filled, label = "Assert.assertEquals(overrideValue + \"/announcements\",indexerZkConfig.getAnnouncementsPath())@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "IndexerZkConfig indexerZkConfig = indexerPathsConfig.get().get()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "priorValue == null@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "System.setProperty(indexerPropertyKey,priorValue)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testIndexerBaseOverride['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "validateEntries(zkPathsConfig1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(clobberableProperties.size(),assertions)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "IndexerZkConfig zkConfig = indexerZkConfig.get().get()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testIndexerBaseOverride['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "validateEntries(zkConfig)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "propertyValues.clear()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final Injector injector = Initialization.makeInjectorWithModules(GuiceInjectors.makeStartupInjector(),ImmutableList.of(SIMPLE_ZK_CONFIG_MODULE))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "ZkPathsConfig zkPathsConfig1 = zkPathsConfig.get().get()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "System.setProperty(indexerPropertyKey,overrideValue)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testSimpleConfig['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final Injector injector = Initialization.makeInjectorWithModules(GuiceInjectors.makeStartupInjector(),ImmutableList.of(simpleZkConfigModule))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "indexerPathsConfig.inject(propertyValues,configurator)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "JsonConfigurator configurator = injector.getBinding().getProvider().get()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "JsonConfigProvider<IndexerZkConfig> indexerPathsConfig = JsonConfigProvider.of(indexerPropertyString,)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "final String indexerPropertyKey = INDEXER_PROPERTY_STRING + \".base\"@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "final String overrideValue = \"/foo/bar/baz\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "JsonConfigProvider<ZkPathsConfig> zkPathsConfig = JsonConfigProvider.of(zkServiceConfigString,)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "propertyValues.setProperty(indexerPropertyKey,overrideValue)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "JsonConfigProvider<IndexerZkConfig> indexerPathsConfig = JsonConfigProvider.of(INDEXER_PROPERTY_STRING,)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "JsonConfigProvider<IndexerZkConfig> indexerZkConfig = JsonConfigProvider.of(indexerPropertyString,)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "System.clearProperty(indexerPropertyKey)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(overrideValue,indexerZkConfig.getBase())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final String priorValue = System.getProperty(indexerPropertyKey)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "zkPathsConfig.inject(propertyValues,configurator)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "indexerZkConfig.inject(propertyValues,configurator)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final String indexerPropertyKey = indexerPropertyString + \".base\"@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18->6 [style = solid, label="indexerPropertyKey"];
3->4 [style = solid, label="indexerPropertyKey"];
29->15 [style = bold, label=""];
30->24 [style = bold, label=""];
12->6 [style = solid, label="overrideValue"];
25->28 [style = bold, label=""];
15->20 [style = dashed, label="0"];
18->2 [style = solid, label="indexerPropertyKey"];
3->0 [style = solid, label="indexerPropertyKey"];
19->12 [style = bold, label=""];
11->14 [style = bold, label=""];
4->6 [style = bold, label=""];
7->12 [style = bold, label=""];
3->2 [style = solid, label="indexerPropertyKey"];
12->13 [style = solid, label="overrideValue"];
3->18 [style = dashed, label="0"];
23->26 [style = bold, label=""];
22->29 [style = bold, label=""];
0->11 [style = bold, label=""];
21->9 [style = solid, label="configurator"];
9->17 [style = bold, label=""];
9->30 [style = bold, label=""];
1->0 [style = bold, label=""];
9->10 [style = bold, label=""];
10->22 [style = dashed, label="0"];
3->4 [style = bold, label=""];
6->15 [style = bold, label=""];
1->2 [style = dotted, label="false"];
26->21 [style = bold, label=""];
21->29 [style = solid, label="configurator"];
4->2 [style = solid, label="priorValue"];
3->6 [style = solid, label="indexerPropertyKey"];
6->20 [style = bold, label=""];
5->1 [style = bold, label=""];
9->16 [style = solid, label="configurator"];
20->8 [style = bold, label=""];
30->27 [style = solid, label="zkConfig"];
12->14 [style = solid, label="overrideValue"];
18->4 [style = bold, label=""];
10->16 [style = bold, label=""];
21->22 [style = bold, label=""];
15->9 [style = bold, label=""];
18->0 [style = solid, label="indexerPropertyKey"];
12->11 [style = solid, label="overrideValue"];
12->18 [style = bold, label=""];
18->13 [style = solid, label="indexerPropertyKey"];
3->13 [style = solid, label="indexerPropertyKey"];
10->17 [style = dashed, label="0"];
16->5 [style = bold, label=""];
16->29 [style = dashed, label="0"];
18->4 [style = solid, label="indexerPropertyKey"];
1->2 [style = bold, label=""];
12->3 [style = bold, label=""];
13->9 [style = bold, label=""];
1->0 [style = dotted, label="true"];
5->15 [style = dashed, label="0"];
4->1 [style = solid, label="priorValue"];
24->27 [style = bold, label=""];
15->8 [style = bold, label=""];
2->11 [style = bold, label=""];
27->25 [style = bold, label=""];
17->16 [style = bold, label=""];
8->13 [style = bold, label=""];
24->25 [style = solid, label="zkPathsConfig1"];
}
