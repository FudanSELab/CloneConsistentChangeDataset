digraph {
22 [style = filled, label = "testFacetCanBeRepresentedByMapWriter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final MapWriter categoriesFacet = new MapWriter(){@Override public void writeMap(EntryWriter ew){ew.put(\"type\",\"terms\")ew.put(\"field\",\"cat\")ew.put(\"limit\",3)}}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final NamedList<Object> rawResponse = response.getResponse()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "final SolrDocumentList returnedDocs = response.getResults()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "QueryResponse response = request.process(cluster.getSolrClient(),COLLECTION_NAME)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(0,response.getStatus())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertExpectedDocumentsFoundAndReturned(response,NUM_TECHPRODUCTS_DOCS,10)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "QueryResponse response = request.process(cluster.getSolrClient(),COLLECTION_NAME)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final NamedList<Object> rawResponse = response.getResponse()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final JsonQueryRequest request = new JsonQueryRequest().setQuery(\"*:*\").withFacet(\"top_cats\",categoriesFacetMap)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final NestableJsonFacet topLevelFacetData = response.getJsonFacetingResponse()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(0,response.getStatus())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "final TermsFacetMap categoriesFacetMap = new TermsFacetMap(\"cat\").setLimit(3)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(NUM_TECHPRODUCTS_DOCS,topLevelFacetData.getCount())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "final JsonQueryRequest request = new JsonQueryRequest().setQuery(\"*:*\").withFacet(\"top_cats\",categoriesFacet)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testSingleTermsFacet['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testSingleTermsFacet['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(NUM_TECHPRODUCTS_DOCS,returnedDocs.getNumFound())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertHasFacetWithBucketValues(topLevelFacetData,\"top_cats\",new FacetBucket(\"electronics\",NUM_ELECTRONICS),new FacetBucket(\"currency\",NUM_CURRENCY),new FacetBucket(\"memory\",NUM_MEMORY))@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertEquals(10,returnedDocs.size())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertHasFacetWithBucketValues(rawResponse,\"top_cats\",new FacetBucket(\"electronics\",NUM_ELECTRONICS),new FacetBucket(\"currency\",NUM_CURRENCY),new FacetBucket(\"memory\",NUM_MEMORY))@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertHasFacetWithBucketValues(rawResponse,\"top_cats\",new FacetBucket(\"electronics\",NUM_ELECTRONICS),new FacetBucket(\"currency\",NUM_CURRENCY),new FacetBucket(\"memory\",NUM_MEMORY))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "final SolrDocumentList returnedDocs = response.getResults()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(NUM_TECHPRODUCTS_DOCS,returnedDocs.getNumFound())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertEquals(10,returnedDocs.size())@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
12->11 [style = bold, label=""];
5->24 [style = dashed, label="0"];
18->19 [style = bold, label=""];
14->10 [style = bold, label=""];
7->0 [style = bold, label=""];
16->17 [style = bold, label=""];
5->3 [style = solid, label="categoriesFacetMap"];
15->16 [style = bold, label=""];
2->8 [style = solid, label="rawResponse"];
7->14 [style = bold, label=""];
6->2 [style = bold, label=""];
7->14 [style = solid, label="response"];
20->23 [style = solid, label="rawResponse"];
0->14 [style = dashed, label="0"];
1->12 [style = dashed, label="0"];
1->6 [style = bold, label=""];
21->20 [style = bold, label=""];
20->23 [style = bold, label=""];
3->7 [style = bold, label=""];
0->4 [style = bold, label=""];
10->12 [style = bold, label=""];
13->5 [style = bold, label=""];
9->5 [style = bold, label=""];
10->11 [style = solid, label="topLevelFacetData"];
4->1 [style = bold, label=""];
22->24 [style = bold, label=""];
4->10 [style = dashed, label="0"];
17->18 [style = bold, label=""];
24->15 [style = solid, label="categoriesFacet"];
2->8 [style = bold, label=""];
24->15 [style = bold, label=""];
19->21 [style = bold, label=""];
}
