digraph {
17 [style = filled, label = "testPlus['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"2\",\"5L\")),KM2.minus(KM1))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of()),KM2.minus(KM2))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(endMetadata(ImmutableMap.of(\"2\",\"5L\")),END1.minus(END2))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of()),START2.minus(START2))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testMinus['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of()),START1.minus(START2))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of(\"2\",\"5L\")),START2.minus(START1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of()),KM0.minus(KM2))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of(\"1\",\"3L\")),START1.minus(START3))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(endMetadata(ImmutableMap.of(\"1\",\"4L\")),END2.minus(END1))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM1.plus(KM2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"1\",\"3L\")),KM1.minus(KM3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM0.plus(KM2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"3L\",\"2\",\"5L\")),KM1.plus(KM3))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"3L\",\"2\",\"5L\")),KM2.plus(KM1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM2.plus(KM2))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of(),ImmutableSet.of()),START4.minus(START2))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of(\"1\",\"4L\"),ImmutableSet.of(\"1\")),START5.minus(START4))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of()),START0.minus(START2))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testMinus['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of()),KM1.minus(KM2))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->5 [style = bold, label=""];
2->20 [style = dashed, label="0"];
15->7 [style = bold, label=""];
7->12 [style = bold, label=""];
1->15 [style = dashed, label="0"];
0->19 [style = dashed, label="0"];
3->18 [style = dashed, label="0"];
2->3 [style = bold, label=""];
10->6 [style = bold, label=""];
17->19 [style = bold, label=""];
4->0 [style = bold, label=""];
19->16 [style = bold, label=""];
20->18 [style = bold, label=""];
2->12 [style = dashed, label="0"];
5->2 [style = bold, label=""];
21->20 [style = bold, label=""];
11->10 [style = bold, label=""];
1->16 [style = dashed, label="0"];
0->1 [style = bold, label=""];
16->21 [style = bold, label=""];
0->13 [style = dashed, label="0"];
12->14 [style = bold, label=""];
5->21 [style = dashed, label="0"];
14->8 [style = bold, label=""];
13->15 [style = bold, label=""];
5->7 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
8->11 [style = bold, label=""];
9->13 [style = bold, label=""];
}
