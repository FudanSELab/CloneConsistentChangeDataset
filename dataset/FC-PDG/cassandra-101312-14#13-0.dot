digraph {
22 [style = filled, label = "ArrayList<Token> endpointTokens = new ArrayList<Token>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(newToken,tmd.getToken(hosts.get(2)))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.moving(newToken))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<InetAddress> hosts = new ArrayList<InetAddress>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(endpointTokens.get(2)))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(newToken))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(newToken)))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(2)))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(2))))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testStateJumpToNormal['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(keyTokens.get(2))))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.moving(newToken))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(tmd.getMovingEndpoints().isEmpty())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "IPartitioner partitioner = new RandomPartitioner()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(endpointTokens.get(2),tmd.getToken(hosts.get(2)))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testStateJumpToNormal['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "TokenMetadata tmd = ss.getTokenMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testStateJumpToNormal['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(endpointTokens.get(2))))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(2))))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(newToken,tmd.getToken(hosts.get(2)))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(4)))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertTrue(tmd.getLeavingEndpoints().isEmpty())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(newToken)))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(newToken))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertTrue(tmd.getMovingEndpoints().isEmpty())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "newToken = positionToken(8)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<UUID> hostIds = new ArrayList<UUID>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(4))))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertTrue(tmd.isMoving(hosts.get(2)))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "tmd.clearUnsafe()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ArrayList<Token> keyTokens = new ArrayList<Token>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "StorageService ss = StorageService.instance@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(newToken)))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(4))))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(Collections.singleton(keyTokens.get(2)),Gossiper.computeExpireTime()))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(tmd.getLeavingEndpoints().isEmpty())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Token newToken = positionToken(7)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,6)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(newToken)))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
10->22 [style = bold, label=""];
24->20 [style = solid, label="newToken"];
2->42 [style = dashed, label="0"];
31->37 [style = bold, label=""];
21->7 [style = solid, label="newToken"];
1->4 [style = bold, label=""];
4->1 [style = dashed, label="0"];
21->8 [style = solid, label="newToken"];
19->6 [style = dashed, label="0"];
30->13 [style = bold, label=""];
24->15 [style = solid, label="newToken"];
17->1 [style = bold, label=""];
36->41 [style = bold, label=""];
6->34 [style = bold, label=""];
15->28 [style = dashed, label="0"];
11->14 [style = bold, label=""];
16->10 [style = bold, label=""];
15->21 [style = bold, label=""];
8->33 [style = dashed, label="0"];
16->0 [style = solid, label="partitioner"];
14->0 [style = solid, label="hostIds"];
19->20 [style = bold, label=""];
18->11 [style = bold, label=""];
23->15 [style = bold, label=""];
13->0 [style = solid, label="ss"];
21->29 [style = solid, label="newToken"];
4->29 [style = bold, label=""];
41->6 [style = bold, label=""];
6->19 [style = bold, label=""];
38->31 [style = bold, label=""];
21->2 [style = solid, label="newToken"];
25->6 [style = bold, label=""];
42->40 [style = bold, label=""];
9->16 [style = bold, label=""];
26->13 [style = bold, label=""];
5->25 [style = bold, label=""];
24->5 [style = bold, label=""];
18->0 [style = solid, label="keyTokens"];
23->28 [style = bold, label=""];
3->9 [style = bold, label=""];
25->27 [style = bold, label=""];
12->13 [style = bold, label=""];
15->38 [style = dashed, label="0"];
1->33 [style = bold, label=""];
22->18 [style = bold, label=""];
28->21 [style = bold, label=""];
20->23 [style = bold, label=""];
13->3 [style = bold, label=""];
14->0 [style = bold, label=""];
24->5 [style = solid, label="newToken"];
6->27 [style = dashed, label="0"];
20->34 [style = dashed, label="0"];
7->2 [style = bold, label=""];
17->40 [style = dashed, label="0"];
23->39 [style = dashed, label="0"];
0->24 [style = bold, label=""];
32->1 [style = bold, label=""];
34->39 [style = bold, label=""];
24->28 [style = solid, label="newToken"];
24->19 [style = solid, label="newToken"];
40->32 [style = bold, label=""];
39->38 [style = bold, label=""];
0->35 [style = bold, label=""];
11->0 [style = solid, label="hosts"];
21->7 [style = bold, label=""];
4->8 [style = bold, label=""];
21->17 [style = solid, label="newToken"];
7->37 [style = dashed, label="0"];
27->19 [style = bold, label=""];
16->10 [style = solid, label="partitioner"];
35->36 [style = bold, label=""];
22->0 [style = solid, label="endpointTokens"];
8->29 [style = dashed, label="0"];
37->42 [style = bold, label=""];
}
