digraph {
9 [style = filled, label = "TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).dimension(new ExtractionDimensionSpec(QueryRunnerTestHelper.marketDimension,QueryRunnerTestHelper.marketDimension,new RegexDimExtractionFn(\"..(.)\",false,null))).metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(\"p\",StringComparators.LEXICOGRAPHIC))).threshold(4).intervals(QueryRunnerTestHelper.firstToThird).aggregators(commonAggregators).postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant)).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testInvertedTopNLexicographicDimExtractionWithPreviousStop2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertExpectedResults(expectedResults,query)@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<Result<TopNResultValue>> expectedResults = Collections.singletonList(new Result<TopNResultValue>(DateTimes.of(\"2011-04-01T00:00:00.000Z\"),new TopNResultValue(Arrays.asList(ImmutableMap.of(QueryRunnerTestHelper.marketDimension,\"t\",\"rows\",4L,\"index\",5351.814783D,\"addRowsIndexConstant\",5356.814783D,\"uniques\",QueryRunnerTestHelper.UNIQUES_2),ImmutableMap.of(QueryRunnerTestHelper.marketDimension,\"o\",\"rows\",18L,\"index\",2231.876812D,\"addRowsIndexConstant\",2250.876812D,\"uniques\",QueryRunnerTestHelper.UNIQUES_9),ImmutableMap.of(QueryRunnerTestHelper.marketDimension,\"f\",\"rows\",4L,\"index\",4875.669692D,\"addRowsIndexConstant\",4880.669692D,\"uniques\",QueryRunnerTestHelper.UNIQUES_2)))))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).dimension(new ExtractionDimensionSpec(QueryRunnerTestHelper.marketDimension,QueryRunnerTestHelper.marketDimension,new RegexDimExtractionFn(\"..(.)\",false,null))).metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(null,StringComparators.LEXICOGRAPHIC))).threshold(4).intervals(QueryRunnerTestHelper.firstToThird).aggregators(commonAggregators).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "List<Result<TopNResultValue>> expectedResults = Collections.singletonList(new Result<TopNResultValue>(DateTimes.of(\"2011-04-01T00:00:00.000Z\"),new TopNResultValue(Arrays.asList(ImmutableMap.of(QueryRunnerTestHelper.marketDimension,\"o\",\"rows\",18L,\"index\",2231.876812D,\"addRowsIndexConstant\",2250.876812D,\"uniques\",QueryRunnerTestHelper.UNIQUES_9),ImmutableMap.of(QueryRunnerTestHelper.marketDimension,\"f\",\"rows\",4L,\"index\",4875.669692D,\"addRowsIndexConstant\",4880.669692D,\"uniques\",QueryRunnerTestHelper.UNIQUES_2)))))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testInvertedTopNLexicographicDimExtraction2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).dimension(new ExtractionDimensionSpec(QueryRunnerTestHelper.marketDimension,QueryRunnerTestHelper.marketDimension,new RegexDimExtractionFn(\"..(.)\",false,null))).metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(null,StringComparators.LEXICOGRAPHIC))).threshold(4).intervals(QueryRunnerTestHelper.firstToThird).aggregators(commonAggregators).postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant)).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "testInvertedTopNLexicographicDimExtraction2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "List<Result<TopNResultValue>> expectedResults = Collections.singletonList(new Result<>(DateTimes.of(\"2011-04-01T00:00:00.000Z\"),new TopNResultValue(Arrays.asList(ImmutableMap.of(QueryRunnerTestHelper.marketDimension,\"t\",\"rows\",4L,\"index\",5351.814783D,\"addRowsIndexConstant\",5356.814783D,\"uniques\",QueryRunnerTestHelper.UNIQUES_2),ImmutableMap.of(QueryRunnerTestHelper.marketDimension,\"o\",\"rows\",18L,\"index\",2231.876812D,\"addRowsIndexConstant\",2250.876812D,\"uniques\",QueryRunnerTestHelper.UNIQUES_9),ImmutableMap.of(QueryRunnerTestHelper.marketDimension,\"f\",\"rows\",4L,\"index\",4875.669692D,\"addRowsIndexConstant\",4880.669692D,\"uniques\",QueryRunnerTestHelper.UNIQUES_2)))))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
6->4 [style = bold, label=""];
4->1 [style = bold, label=""];
2->0 [style = bold, label=""];
7->1 [style = bold, label=""];
0->9 [style = dashed, label="0"];
5->6 [style = bold, label=""];
0->1 [style = solid, label="query"];
3->1 [style = bold, label=""];
9->7 [style = bold, label=""];
6->1 [style = solid, label="query"];
7->1 [style = solid, label="expectedResults"];
3->1 [style = solid, label="expectedResults"];
4->1 [style = solid, label="expectedResults"];
3->4 [style = dashed, label="0"];
3->7 [style = dashed, label="0"];
9->1 [style = solid, label="query"];
0->6 [style = dashed, label="0"];
8->9 [style = bold, label=""];
}
