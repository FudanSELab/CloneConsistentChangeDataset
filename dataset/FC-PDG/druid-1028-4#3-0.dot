digraph {
20 [style = filled, label = "Assert.assertEquals(\"hello\",druidLeaderClient.go(request).getContent())@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "testServerFailureAndRedirect['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "druidLeaderClient.start()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.PEON)).andReturn(druidNodeDiscovery).anyTimes()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,\"nodetype\",\"/simple/leader\",EasyMock.createNiceMock())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.replay(serverDiscoverySelector,druidNodeDiscovery,druidNodeDiscoveryProvider)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(new DiscoveryDruidNode(new DruidNode(\"test\",\"dummyhost\",64231,null,true,false),\"test\",ImmutableMap.of())))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "EasyMock.replay(druidNodeDiscovery,druidNodeDiscoveryProvider)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testNoLeaderFound['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "expectedException.expect()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testServerFailureAndRedirect['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.replay(serverDiscoverySelector,druidNodeDiscovery,druidNodeDiscoveryProvider)@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(new DruidNode(\"test\",\"dummyhost\",64231,null,true,false),NodeType.PEON,ImmutableMap.of())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "druidLeaderClient.start()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(\"hello\",druidLeaderClient.go(request).getContent())@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/direct\")@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Request request = druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/redirect\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(\"nodetype\")).andReturn(druidNodeDiscovery)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeType.PEON,\"/simple/leader\",serverDiscoverySelector)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "expectedException.expectMessage(\"No known server\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->3 [style = bold, label=""];
28->29 [style = bold, label=""];
7->2 [style = solid, label="druidNodeDiscoveryProvider"];
23->25 [style = bold, label=""];
17->15 [style = solid, label="dummyNode"];
11->2 [style = solid, label="druidNodeDiscovery"];
23->27 [style = solid, label="druidNodeDiscovery"];
11->27 [style = solid, label="druidNodeDiscoveryProvider"];
11->7 [style = solid, label="druidNodeDiscoveryProvider"];
15->14 [style = bold, label=""];
7->12 [style = solid, label="druidNodeDiscoveryProvider"];
3->2 [style = solid, label="druidNodeDiscoveryProvider"];
3->21 [style = dashed, label="0"];
3->26 [style = dashed, label="0"];
9->16 [style = solid, label="serverDiscoverySelector"];
1->18 [style = bold, label=""];
22->28 [style = bold, label=""];
1->18 [style = dashed, label="0"];
5->25 [style = dashed, label="0"];
1->0 [style = bold, label=""];
3->12 [style = bold, label=""];
2->7 [style = dashed, label="0"];
9->8 [style = bold, label=""];
2->10 [style = bold, label=""];
7->3 [style = bold, label=""];
0->10 [style = dashed, label="0"];
21->2 [style = bold, label=""];
9->12 [style = solid, label="serverDiscoverySelector"];
23->26 [style = solid, label="druidNodeDiscovery"];
7->22 [style = bold, label=""];
11->5 [style = bold, label=""];
12->2 [style = bold, label=""];
18->20 [style = bold, label=""];
26->27 [style = bold, label=""];
5->17 [style = dashed, label="0"];
5->6 [style = bold, label=""];
19->9 [style = bold, label=""];
6->15 [style = dashed, label="0"];
25->11 [style = bold, label=""];
11->12 [style = solid, label="druidNodeDiscovery"];
2->16 [style = dashed, label="0"];
3->16 [style = solid, label="druidNodeDiscoveryProvider"];
27->7 [style = bold, label=""];
12->27 [style = dashed, label="0"];
17->15 [style = bold, label=""];
10->4 [style = bold, label=""];
9->2 [style = solid, label="serverDiscoverySelector"];
11->17 [style = bold, label=""];
3->21 [style = bold, label=""];
29->10 [style = bold, label=""];
4->1 [style = bold, label=""];
13->9 [style = bold, label=""];
16->4 [style = bold, label=""];
6->7 [style = bold, label=""];
8->11 [style = bold, label=""];
11->26 [style = bold, label=""];
24->23 [style = bold, label=""];
2->16 [style = bold, label=""];
}
