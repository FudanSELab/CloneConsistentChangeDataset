digraph {
2 [style = filled, label = "i < 1@@@24@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "InboundChannelBuffer.Page(( pages = channelBuffer.sliceAndRetainPagesTo(PAGE_SIZE * 2)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertEquals(4,queue.size())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(queue.poll().get())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "channelBuffer.close()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "pages(1(.close()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "channelBuffer.release(2 * PAGE_SIZE)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testReleaseClosesPages['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(PAGE_SIZE * 2,channelBuffer.getCapacity())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "pages(0(.close()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int i = 0@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testCloseRetainedPages['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertFalse(queue.poll().get())@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ConcurrentLinkedQueue<AtomicBoolean> queue = new ConcurrentLinkedQueue<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertFalse(closedRef.get())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertFalse(closedRef.get())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Page(( pages = channelBuffer.sliceAndRetainPagesTo(PAGE_SIZE * 2)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertFalse(queue.poll().get())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(closedRef.get())@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testCloseRetainedPages['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertTrue(closedRef.get())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "channelBuffer.ensureCapacity(PAGE_SIZE * 4)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Supplier<Page> supplier = null@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertTrue(queue.poll().get())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Supplier<InboundChannelBuffer.Page> supplier = null@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "++i@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertFalse(closedRef.get())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(PAGE_SIZE * 4,channelBuffer.getCapacity())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "InboundChannelBuffer channelBuffer = new InboundChannelBuffer(supplier)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
8->10 [style = bold, label=""];
7->17 [style = bold, label=""];
17->1 [style = bold, label=""];
16->2 [style = solid, label="i"];
27->0 [style = bold, label=""];
19->12 [style = bold, label=""];
5->23 [style = bold, label=""];
2->6 [style = bold, label=""];
25->9 [style = bold, label=""];
8->20 [style = dashed, label="0"];
9->20 [style = bold, label=""];
3->12 [style = bold, label=""];
16->2 [style = bold, label=""];
9->8 [style = bold, label=""];
14->26 [style = dashed, label="0"];
2->13 [style = bold, label=""];
20->10 [style = bold, label=""];
26->21 [style = bold, label=""];
23->28 [style = bold, label=""];
20->10 [style = solid, label="supplier"];
5->19 [style = bold, label=""];
3->19 [style = dashed, label="0"];
24->26 [style = bold, label=""];
11->0 [style = bold, label=""];
21->22 [style = bold, label=""];
15->9 [style = bold, label=""];
13->7 [style = bold, label=""];
7->2 [style = bold, label=""];
2->6 [style = dotted, label="true"];
12->14 [style = bold, label=""];
18->9 [style = bold, label=""];
11->27 [style = bold, label=""];
28->24 [style = bold, label=""];
6->7 [style = bold, label=""];
8->10 [style = solid, label="supplier"];
4->16 [style = bold, label=""];
0->5 [style = bold, label=""];
14->4 [style = bold, label=""];
10->11 [style = bold, label=""];
2->13 [style = dotted, label="false"];
}
