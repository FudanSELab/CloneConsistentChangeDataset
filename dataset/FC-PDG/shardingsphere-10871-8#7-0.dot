digraph {
6 [style = filled, label = "assertThat(actual.size(),is(1))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertExecuteBindPacketWithUpdateSQL['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertExecuteClosePortal['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "verify(connectionContext).closePortal(portalName)@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(connectionContext,bindPacket,backendConnection)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "when(packet.getType()).thenReturn(PostgreSQLComClosePacket.Type.PORTAL)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponseHeader(mock()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "when(packet.getName()).thenReturn(portalName)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(actual.size(),is(1))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PostgreSQLComCloseExecutor closeExecutor = new PostgreSQLComCloseExecutor(packet,backendConnection)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(actual.size(),is(1))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "String portalName = \"C_1\"@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "setMockFieldIntoExecutor(executor)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Collection<DatabasePacket<?>> actual = executor.execute()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.UPDATE))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Collection<DatabasePacket<?>> actual = closeExecutor.execute()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "PostgreSQLComCloseExecutor closeExecutor = new PostgreSQLComCloseExecutor(connectionContext,packet,backendConnection)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertExecuteClosePortal['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11->3 [style = bold, label=""];
5->19 [style = bold, label=""];
4->14 [style = dashed, label="0"];
14->18 [style = bold, label=""];
7->9 [style = bold, label=""];
7->9 [style = solid, label="portalName"];
19->15 [style = bold, label=""];
7->8 [style = solid, label="portalName"];
0->3 [style = bold, label=""];
5->19 [style = dashed, label="0"];
16->13 [style = bold, label=""];
3->7 [style = bold, label=""];
3->13 [style = dashed, label="0"];
4->2 [style = bold, label=""];
2->1 [style = bold, label=""];
5->12 [style = dashed, label="0"];
6->12 [style = bold, label=""];
18->17 [style = bold, label=""];
14->18 [style = solid, label="executor"];
13->14 [style = bold, label=""];
12->8 [style = bold, label=""];
3->4 [style = bold, label=""];
10->5 [style = bold, label=""];
17->5 [style = bold, label=""];
5->6 [style = bold, label=""];
9->10 [style = bold, label=""];
1->5 [style = bold, label=""];
}
