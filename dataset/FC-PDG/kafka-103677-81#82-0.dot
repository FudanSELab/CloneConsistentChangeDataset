digraph {
2 [style = filled, label = "client.send(request,time.milliseconds())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "!client.ready(node,time.milliseconds())@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "FetchRequest.Builder builder = FetchRequest.Builder.forConsumer(100,100,new LinkedHashMap<>())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "MockSelector selector = new MockSelector(time)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "client.send(request,time.milliseconds())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "i++@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "selector.clear()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "builder.rackId(\"\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeMax))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "selector.delayedReceive(new DelayedReceive(node.idString(),new NetworkReceive(node.idString(),buffer)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "client.poll(1,time.milliseconds())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(250,(Double)avgMetric.metricValue(),EPS)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "buffer = response.serialize(ApiKeys.FETCH,ApiKeys.FETCH.latestVersion(),request.correlationId())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertEquals(400,(Double)maxMetric.metricValue(),EPSILON)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "client.poll(1,time.milliseconds())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(\"test\",1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "ByteBuffer buffer = ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE).serialize(ApiKeys.API_VERSIONS,ApiKeys.API_VERSIONS.latestVersion(),0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "FetchResponse<MemoryRecords> response = fullFetchResponse(tp0,nextRecords,Errors.NONE,i,throttleTimeMs)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "buildFetcher()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Node node = cluster.nodes().get(0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "int throttleTimeMs = 100 * i@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int i = 1@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "selector.delayedReceive(new DelayedReceive(node.idString(),new NetworkReceive(node.idString(),buffer)))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "client.poll(1,time.milliseconds())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Sensor throttleTimeSensor = Fetcher.throttleTimeSensor(metrics,metricsRegistry)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "client.close()@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(this.senderMetricsRegistry.produceThrottleTimeAvg)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertEquals(250,(Double)avgMetric.metricValue(),EPSILON)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "client.poll(1,time.milliseconds())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "selector.clear()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(400,(Double)maxMetric.metricValue(),EPS)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(\"test\",1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeAvg))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,ClientDnsLookup.DEFAULT,time,true,new ApiVersions(),throttleTimeSensor,new LogContext())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "MockSelector selector = new MockSelector(time)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "selector.clear()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ByteBuffer buffer = ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE).serialize(ApiKeys.API_VERSIONS,ApiKeys.API_VERSIONS.latestVersion(),0)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "client.close()@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i <= 3@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38->6 [style = solid, label="buffer"];
20->23 [style = bold, label=""];
38->6 [style = bold, label=""];
13->37 [style = dotted, label="true"];
23->10 [style = bold, label=""];
5->45 [style = solid, label="node"];
13->25 [style = bold, label=""];
35->42 [style = bold, label=""];
7->6 [style = bold, label=""];
25->21 [style = dotted, label="true"];
25->13 [style = solid, label="i"];
25->26 [style = dotted, label="true"];
6->19 [style = bold, label=""];
14->43 [style = dashed, label="0"];
4->24 [style = bold, label=""];
19->29 [style = bold, label=""];
25->13 [style = dotted, label="true"];
21->26 [style = bold, label=""];
36->46 [style = bold, label=""];
25->0 [style = dotted, label="true"];
25->13 [style = bold, label=""];
13->0 [style = dotted, label="true"];
4->42 [style = dashed, label="0"];
16->5 [style = bold, label=""];
5->33 [style = bold, label=""];
41->34 [style = bold, label=""];
9->28 [style = bold, label=""];
12->5 [style = solid, label="selector"];
24->48 [style = dashed, label="0"];
25->23 [style = solid, label="i"];
20->23 [style = solid, label="i"];
14->43 [style = bold, label=""];
12->14 [style = bold, label=""];
13->3 [style = solid, label="i"];
9->20 [style = bold, label=""];
25->20 [style = dotted, label="true"];
1->7 [style = dotted, label="true"];
1->29 [style = bold, label=""];
13->31 [style = bold, label=""];
48->44 [style = bold, label=""];
11->6 [style = bold, label=""];
21->26 [style = solid, label="buffer"];
25->10 [style = dotted, label="true"];
3->40 [style = dashed, label="0"];
43->16 [style = bold, label=""];
25->27 [style = dotted, label="true"];
10->2 [style = solid, label="request"];
20->3 [style = solid, label="throttleTimeMs"];
28->47 [style = dashed, label="0"];
7->39 [style = bold, label=""];
13->3 [style = dotted, label="true"];
30->38 [style = dashed, label="0"];
25->9 [style = bold, label=""];
13->27 [style = dotted, label="true"];
13->15 [style = dotted, label="true"];
41->0 [style = solid, label="builder"];
29->13 [style = solid, label="i"];
27->45 [style = bold, label=""];
23->10 [style = solid, label="builder"];
25->3 [style = dotted, label="true"];
5->39 [style = solid, label="node"];
13->41 [style = dotted, label="true"];
21->40 [style = bold, label=""];
14->5 [style = solid, label="throttleTimeSensor"];
26->8 [style = bold, label=""];
16->7 [style = solid, label="node"];
29->25 [style = solid, label="i"];
6->7 [style = dotted, label="true"];
21->37 [style = dashed, label="0"];
13->23 [style = bold, label=""];
3->21 [style = bold, label=""];
31->47 [style = bold, label=""];
24->17 [style = bold, label=""];
25->40 [style = solid, label="i"];
6->1 [style = dotted, label="true"];
43->33 [style = solid, label="throttleTimeSensor"];
0->3 [style = bold, label=""];
13->9 [style = dotted, label="true"];
23->40 [style = solid, label="throttleTimeMs"];
47->35 [style = bold, label=""];
29->25 [style = bold, label=""];
13->23 [style = dotted, label="true"];
31->4 [style = bold, label=""];
23->41 [style = dashed, label="0"];
20->13 [style = bold, label=""];
37->15 [style = solid, label="buffer"];
30->11 [style = solid, label="buffer"];
46->14 [style = bold, label=""];
25->20 [style = solid, label="i"];
18->16 [style = bold, label=""];
29->3 [style = solid, label="i"];
33->38 [style = bold, label=""];
14->33 [style = solid, label="selector"];
2->0 [style = bold, label=""];
23->41 [style = bold, label=""];
37->15 [style = bold, label=""];
1->7 [style = bold, label=""];
22->12 [style = bold, label=""];
5->33 [style = dashed, label="0"];
6->1 [style = bold, label=""];
13->40 [style = dotted, label="true"];
31->35 [style = dashed, label="0"];
28->31 [style = bold, label=""];
20->40 [style = solid, label="i"];
13->21 [style = dotted, label="true"];
32->12 [style = bold, label=""];
10->2 [style = bold, label=""];
13->25 [style = solid, label="i"];
13->45 [style = dotted, label="true"];
14->18 [style = bold, label=""];
27->13 [style = bold, label=""];
25->8 [style = dotted, label="true"];
25->20 [style = bold, label=""];
45->9 [style = bold, label=""];
30->11 [style = bold, label=""];
25->15 [style = dotted, label="true"];
20->13 [style = solid, label="i"];
39->1 [style = bold, label=""];
34->0 [style = bold, label=""];
42->48 [style = bold, label=""];
15->27 [style = bold, label=""];
13->20 [style = solid, label="i"];
5->30 [style = bold, label=""];
13->20 [style = dotted, label="true"];
40->37 [style = bold, label=""];
13->34 [style = dotted, label="true"];
1->39 [style = dotted, label="true"];
0->3 [style = solid, label="request"];
16->15 [style = solid, label="node"];
29->20 [style = solid, label="i"];
25->2 [style = dotted, label="true"];
25->23 [style = dotted, label="true"];
8->15 [style = bold, label=""];
}
