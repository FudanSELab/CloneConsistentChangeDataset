digraph {
11 [style = filled, label = "BlockStatement statement = new BlockStatement()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "fail(\"Should not have thrown an exception\")@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "e.getCause().printStackTrace()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Parameter(( parameters = {new Parameter(\"Object((\",\"coll\")}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "System.out.println(\"################ Now about to invoke a method with many parameters\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll1\")))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll2\")))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Class fooClass = loadClass(classNode)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Object(( array = {new Integer(1234),\"abc\",\"def\"}@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testManyParam['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"iterateDemo\",new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@161a90b)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "ForStatement statement = new ForStatement(\"i\",Type.DYNAMIC_TYPE,new VariableExpression(\"coll\"),loopStatement)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "classNode.addMethod(new MethodNode(\"manyParamDemo\",ACC_PUBLIC,Type.VOID_TYPE,parameters,statement))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"manyParamDemo\",array)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ClassNode classNode = new ClassNode(Type.makeType(\"Foo\"),ACC_PUBLIC,Type.OBJECT_TYPE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertTrue(\"Managed to create bean\",bean != null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "InvokerInvocationException e@@@24@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Object(( array = {new Integer(1000 * 1000),\"foo-\",\"bar~\"}@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "classNode.addConstructor(new ConstructorNode(ACC_PUBLIC,null))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Object bean = fooClass.newInstance()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testLoop['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "classNode.addMethod(new MethodNode(\"manyParamDemo\",ACC_PUBLIC,\"void\",parameters,statement))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "System.out.println(\"################ Done\")@@@29@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "InvokerInvocationException e@@@24@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "classNode.addMethod(new MethodNode(\"iterateDemo\",ACC_PUBLIC,\"void\",parameters,statement))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ClassNode classNode = new ClassNode(\"Foo\",ACC_PUBLIC,\"java.lang.Object\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertTrue(\"Loaded a new class\",fooClass != null)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "System.out.println(\"################ Now about to invoke a method with looping\")@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll3\")))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testManyParam['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6->21 [style = dashed, label="0"];
13->17 [style = dotted, label="true"];
19->18 [style = bold, label=""];
21->14 [style = solid, label="classNode"];
13->3 [style = dotted, label="true"];
0->6 [style = bold, label=""];
6->31 [style = solid, label="classNode"];
21->15 [style = bold, label=""];
27->28 [style = bold, label=""];
28->31 [style = bold, label=""];
5->28 [style = solid, label="parameters"];
31->29 [style = bold, label=""];
30->4 [style = dotted, label="true"];
20->14 [style = bold, label=""];
5->20 [style = solid, label="parameters"];
24->27 [style = solid, label="loopStatement"];
12->26 [style = bold, label=""];
25->6 [style = bold, label=""];
2->10 [style = bold, label=""];
5->22 [style = solid, label="parameters"];
11->22 [style = solid, label="statement"];
27->28 [style = solid, label="statement"];
8->1 [style = dashed, label="0"];
15->5 [style = bold, label=""];
6->15 [style = bold, label=""];
6->14 [style = solid, label="classNode"];
7->27 [style = dashed, label="0"];
13->4 [style = dotted, label="true"];
26->16 [style = bold, label=""];
18->20 [style = bold, label=""];
10->26 [style = dashed, label="0"];
18->22 [style = bold, label=""];
14->9 [style = solid, label="bean"];
10->16 [style = bold, label=""];
8->2 [style = bold, label=""];
13->3 [style = bold, label=""];
23->21 [style = bold, label=""];
30->3 [style = bold, label=""];
12->26 [style = solid, label="array"];
12->8 [style = bold, label=""];
5->24 [style = bold, label=""];
30->3 [style = dotted, label="true"];
11->24 [style = dashed, label="0"];
29->14 [style = bold, label=""];
20->22 [style = dashed, label="0"];
1->12 [style = bold, label=""];
3->17 [style = bold, label=""];
14->9 [style = bold, label=""];
5->11 [style = bold, label=""];
1->10 [style = solid, label="bean"];
14->26 [style = solid, label="bean"];
30->17 [style = dotted, label="true"];
9->1 [style = bold, label=""];
22->14 [style = bold, label=""];
2->10 [style = solid, label="array"];
7->19 [style = bold, label=""];
24->27 [style = bold, label=""];
17->4 [style = bold, label=""];
11->7 [style = bold, label=""];
4->16 [style = bold, label=""];
11->20 [style = solid, label="statement"];
31->29 [style = solid, label="fooClass"];
14->9 [style = solid, label="fooClass"];
1->12 [style = solid, label="bean"];
}
