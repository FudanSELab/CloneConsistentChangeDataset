digraph {
5 [style = filled, label = "assertFalse(open.hasSubscribers())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TestSubscriber<Flowable<Integer>> ts = new TestSubscriber<>()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "source.onComplete()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "source.window(open,new Function<Integer,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Integer t){return close}}).doOnNext(new Consumer<Flowable<Integer>>(){@Override public void accept(Flowable<Integer> w){w.subscribe(Functions.emptyConsumer(),Functions.emptyConsumer())}}).subscribe(ts)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(open.hasSubscribers())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ts.assertNoErrors()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final PublishSubject<Integer> close = PublishSubject.create()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "source.onNext(1)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "to.assertValueCount(1)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "PublishSubject<Integer> open = PublishSubject.create()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(open.hasObservers())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertFalse(close.hasSubscribers())@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "noUnsubscribeAndNoLeak['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TestSubscriber<Flowable<Integer>> ts = new TestSubscriber<Flowable<Integer>>()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "noUnsubscribeAndNoLeak['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "PublishSubject<Integer> source = PublishSubject.create()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "PublishProcessor<Integer> source = PublishProcessor.create()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "source.window(open,new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer t){return close}}).doOnNext(new Consumer<Observable<Integer>>(){@Override public void accept(Observable<Integer> w){w.subscribe(Functions.emptyConsumer(),Functions.emptyConsumer())}}).subscribe(to)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "TestObserver<Observable<Integer>> to = new TestObserver<Observable<Integer>>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "close.onNext(1)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "to.assertComplete()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertTrue(close.hasObservers())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertFalse(close.hasObservers())@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "PublishProcessor<Integer> open = PublishProcessor.create()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertFalse(close.hasObservers())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ts.assertComplete()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final PublishProcessor<Integer> close = PublishProcessor.create()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "open.onNext(1)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertFalse(open.hasObservers())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertFalse(close.hasSubscribers())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "noUnsubscribeAndNoLeak['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertFalse(ts.isCancelled())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(close.hasSubscribers())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "to.assertNoErrors()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ts.assertValueCount(1)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->18 [style = bold, label=""];
1->4 [style = bold, label=""];
28->6 [style = bold, label=""];
4->17 [style = bold, label=""];
30->33 [style = bold, label=""];
9->2 [style = bold, label=""];
16->10 [style = bold, label=""];
6->22 [style = bold, label=""];
21->34 [style = solid, label="to"];
5->23 [style = dashed, label="0"];
27->28 [style = bold, label=""];
18->11 [style = bold, label=""];
3->14 [style = bold, label=""];
21->34 [style = bold, label=""];
4->26 [style = bold, label=""];
11->12 [style = bold, label=""];
25->29 [style = bold, label=""];
11->19 [style = bold, label=""];
10->29 [style = dashed, label="0"];
7->8 [style = bold, label=""];
12->21 [style = dashed, label="0"];
1->22 [style = dashed, label="0"];
19->3 [style = solid, label="ts"];
14->7 [style = bold, label=""];
20->10 [style = bold, label=""];
22->4 [style = bold, label=""];
33->23 [style = bold, label=""];
13->28 [style = dashed, label="0"];
6->1 [style = bold, label=""];
26->31 [style = bold, label=""];
3->34 [style = dashed, label="0"];
12->19 [style = dashed, label="0"];
5->0 [style = bold, label=""];
24->21 [style = bold, label=""];
12->3 [style = solid, label="ts"];
15->9 [style = bold, label=""];
29->32 [style = bold, label=""];
11->24 [style = dashed, label="0"];
31->30 [style = bold, label=""];
17->15 [style = bold, label=""];
15->31 [style = dashed, label="0"];
7->27 [style = bold, label=""];
8->27 [style = dashed, label="0"];
17->26 [style = dashed, label="0"];
2->33 [style = dashed, label="0"];
12->3 [style = bold, label=""];
34->14 [style = bold, label=""];
13->6 [style = bold, label=""];
32->24 [style = bold, label=""];
19->3 [style = bold, label=""];
9->30 [style = dashed, label="0"];
8->13 [style = bold, label=""];
2->5 [style = bold, label=""];
18->32 [style = dashed, label="0"];
}
