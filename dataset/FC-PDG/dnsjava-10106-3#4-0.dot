digraph {
0 [style = filled, label = "results = lookup.run()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(1,results.length)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "wireUpMockResolver(mockResolver,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testRun_firstSearchPathAppendedHitsCNAME['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(Name.fromConstantString(\"target.example.com.\"),results(0(.getName())@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Record(( results = lookup.run()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(singletonList(Name.fromConstantString(\"hostX.first.example.com.\")),asList(lookup.getAliases()))@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "wireUpMockResolver(mockResolver,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(Record.newRecord(Name.fromConstantString(\"hostX.first.example.com.\"),Type.A,DClass.IN,0L),queries.get(0).getQuestion())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "verify(mockResolver,times(1)).send(messageCaptor.capture())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(1,results.length)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "lookup.setSearchPath(\"first.example.com\",\"second.example.com\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Lookup lookup = makeLookupWithResolver(mockResolver,\"host\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Lookup lookup = makeLookupWithResolver(mockResolver,\"hostX\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testRun_reuseLookup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(Record.newRecord(Name.fromConstantString(\"host.first.example.com.\"),Type.A,DClass.IN,0L),queries.get(0).getQuestion())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testRun_firstSearchPathAppendedHitsCNAME['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "verify(mockResolver,times(2)).send(messageCaptor.capture())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<Message> queries = messageCaptor.getAllValues()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(Record.newRecord(Name.fromConstantString(\"target.example.com.\"),Type.A,DClass.IN,0L),queries.get(1).getQuestion())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->17 [style = bold, label=""];
4->7 [style = bold, label=""];
15->1 [style = bold, label=""];
6->20 [style = dashed, label="0"];
8->4 [style = bold, label=""];
3->2 [style = bold, label=""];
12->2 [style = bold, label=""];
5->1 [style = bold, label=""];
9->17 [style = dashed, label="0"];
19->0 [style = bold, label=""];
1->6 [style = bold, label=""];
0->11 [style = bold, label=""];
20->19 [style = bold, label=""];
6->10 [style = bold, label=""];
2->9 [style = bold, label=""];
2->14 [style = dashed, label="0"];
11->13 [style = bold, label=""];
17->8 [style = bold, label=""];
7->5 [style = bold, label=""];
7->15 [style = bold, label=""];
9->8 [style = bold, label=""];
1->20 [style = bold, label=""];
18->14 [style = bold, label=""];
5->15 [style = dashed, label="0"];
10->0 [style = bold, label=""];
0->16 [style = bold, label=""];
}
