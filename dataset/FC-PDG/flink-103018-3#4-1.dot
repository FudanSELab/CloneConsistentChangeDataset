digraph {
7 [style = filled, label = "graphGenerator.setRuntimeExecutionMode(RuntimeExecutionMode.BATCH)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "SingleOutputStreamOperator<Integer> process = env.fromElements(1,2).keyBy(null).process(DUMMY_PROCESS_FUNCTION)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DataStreamSink<Integer> sink = process.addSink(new DiscardingSink<>())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testDisablingSortingInputsWithoutBatchStateBackendTwoInputTransformation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(processNode.getManagedMemorySlotScopeUseCases(),equalTo(Collections.singleton(ManagedMemoryUseCase.STATE_BACKEND)))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "SingleOutputStreamOperator<Integer> process = elements1.connect(elements2).keyBy(null,null).process(DUMMY_KEYED_CO_PROCESS_FUNCTION)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "configuration.set(ExecutionOptions.SORT_INPUTS,false)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testCustomManagedMemoryWeights['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "StreamGraphGenerator graphGenerator = new StreamGraphGenerator(Collections.singletonList(sink.getTransformation()),env.getConfig(),env.getCheckpointConfig(),configuration)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "StreamNode processNode = graph.getStreamNode(process.getId())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(processNode.getManagedMemoryOperatorScopeUseCaseWeights(),equalTo(expectedOperatorWeights))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DataStreamSink<Integer> sink = process.addSink(new DiscardingSink<>())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "DataStreamSource<Integer> elements2 = env.fromElements(1,2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final Configuration configuration = new Configuration()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expectedException.expectMessage(\"Batch state backend requires the sorted inputs to be enabled!\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Configuration configuration = new Configuration()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(processNode.getManagedMemoryOperatorScopeUseCaseWeights(),equalTo(expectedOperatorWeights))@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "StreamGraph graph = getStreamGraphInBatchMode(sink,configuration)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "graphGenerator.generate()@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "StreamGraphGenerator graphGenerator = new StreamGraphGenerator(Collections.singletonList(sink.getTransformation()),env.getConfig(),env.getCheckpointConfig(),configuration)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "DataStreamSource<Integer> elements1 = env.fromElements(1,2)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "graphGenerator.setRuntimeExecutionMode(RuntimeExecutionMode.BATCH)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expectedException.expect()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(processNode.getManagedMemorySlotScopeUseCases(),equalTo(Collections.singleton(ManagedMemoryUseCase.STATE_BACKEND)))@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testCustomManagedMemoryWeights['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Map<ManagedMemoryUseCase,Integer> expectedOperatorWeights = new HashMap<>()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25->0 [style = bold, label=""];
22->25 [style = bold, label=""];
0->16 [style = bold, label=""];
1->8 [style = bold, label=""];
5->9 [style = bold, label=""];
0->19 [style = bold, label=""];
0->23 [style = dashed, label="0"];
11->6 [style = bold, label=""];
0->2 [style = bold, label=""];
10->16 [style = solid, label="sink"];
23->4 [style = bold, label=""];
10->3 [style = bold, label=""];
7->4 [style = bold, label=""];
16->17 [style = bold, label=""];
20->11 [style = bold, label=""];
12->1 [style = bold, label=""];
3->16 [style = solid, label="configuration"];
13->11 [style = bold, label=""];
11->18 [style = bold, label=""];
3->0 [style = bold, label=""];
26->21 [style = bold, label=""];
3->19 [style = dashed, label="0"];
24->26 [style = bold, label=""];
3->2 [style = solid, label="configuration"];
18->22 [style = bold, label=""];
19->4 [style = solid, label="configuration"];
15->11 [style = bold, label=""];
9->1 [style = solid, label="expectedOperatorWeights"];
17->14 [style = bold, label=""];
19->23 [style = bold, label=""];
6->10 [style = bold, label=""];
5->24 [style = bold, label=""];
9->12 [style = bold, label=""];
14->9 [style = solid, label="expectedOperatorWeights"];
2->7 [style = bold, label=""];
4->5 [style = bold, label=""];
14->5 [style = bold, label=""];
}
