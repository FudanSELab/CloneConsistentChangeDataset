digraph {
0 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\"scope\",\"test\",taskId.toString(),\"scope\",\"metered\")))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "metrics.addReporter(reporter)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final JmxReporter reporter = new JmxReporter(\"kafka.streams\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\"scope\",threadId,context.taskId().toString(),\"scope\",\"mocked-store\")))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\"scope\",threadId,context.taskId().toString(),\"scope\",\"all\")))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\"scope\",\"test\",taskId.toString(),\"scope\",\"all\")))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "replay(innerStoreMock)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\"scope\",\"test\",context.taskId().toString(),\"scope\",\"all\")))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "testMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final String threadId = Thread.currentThread().getName()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "store.init(context,store)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "init()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\"scope\",\"test\",context.taskId().toString(),\"scope\",\"mocked-store\")))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->13 [style = dashed, label="0"];
0->3 [style = bold, label=""];
1->4 [style = bold, label=""];
0->9 [style = bold, label=""];
0->13 [style = bold, label=""];
2->0 [style = solid, label="reporter"];
9->10 [style = solid, label="threadId"];
4->2 [style = bold, label=""];
9->10 [style = bold, label=""];
10->7 [style = bold, label=""];
11->2 [style = bold, label=""];
11->2 [style = solid, label="reporter"];
8->1 [style = bold, label=""];
6->1 [style = bold, label=""];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
5->10 [style = dashed, label="0"];
12->14 [style = bold, label=""];
3->0 [style = dashed, label="0"];
9->7 [style = solid, label="threadId"];
14->11 [style = bold, label=""];
}
