digraph {
2 [style = filled, label = "Map<Integer,String> expected = new LinkedHashMap<Integer,String>()@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "toMapWithFactory['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "toMapWithFactory['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Map<Integer,String> expected = new LinkedHashMap<>()@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Function<String,Integer> lengthFunc = new Function<String,Integer>(){@Override public Integer apply(String t1){return t1.length()}}@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "verify(singleObserver,times(1)).onSuccess(expected)@@@34@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Supplier<Map<Integer,String>> mapFactory = new Supplier<Map<Integer,String>>(){@Override public Map<Integer,String> get(){return new LinkedHashMap<Integer,String>(){@Override protected boolean removeEldestEntry(Map.Entry<Integer,String> eldest){return size() > 3}}}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "toMapWithFactory['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Observable<String> source = Observable.just(\"a\",\"bb\",\"ccc\",\"dddd\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expected.put(2,\"bb\")@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Flowable<String> source = Flowable.just(\"a\",\"bb\",\"ccc\",\"dddd\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(singleObserver,never()).onError(any())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expected.put(3,\"ccc\")@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "mapped.subscribe(singleObserver)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Single<Map<Integer,String>> mapped = source.toMap(lengthFunc,new Function<String,String>(){@Override public String apply(String v){return v}},mapFactory)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expected.put(4,\"dddd\")@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
15->7 [style = bold, label=""];
7->1 [style = solid, label="mapFactory"];
9->1 [style = solid, label="lengthFunc"];
11->6 [style = bold, label=""];
8->15 [style = dashed, label="0"];
2->0 [style = solid, label="expected"];
2->10 [style = bold, label=""];
12->0 [style = solid, label="expected"];
8->7 [style = bold, label=""];
7->9 [style = bold, label=""];
2->12 [style = dashed, label="0"];
3->5 [style = bold, label=""];
12->10 [style = bold, label=""];
5->0 [style = bold, label=""];
1->12 [style = bold, label=""];
4->8 [style = bold, label=""];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
13->8 [style = bold, label=""];
9->1 [style = bold, label=""];
10->11 [style = bold, label=""];
}
