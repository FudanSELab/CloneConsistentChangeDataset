digraph {
63 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(0)))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(2)))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertEquals(hosts.get(2),tmd.getBootstrapTokens().get(keyTokens.get(3)))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(Collections.singleton(keyTokens.get(1)),Gossiper.computeExpireTime()))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(2)))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertEquals(hosts.get(2),tmd.getBootstrapTokens().get(keyTokens.get(4)))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)))@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(1))))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertEquals(hosts.get(3),tmd.getBootstrapTokens().get(keyTokens.get(1)))@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(1))))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@45@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ArrayList<Token> keyTokens = new ArrayList<Token>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertEquals(keyTokens.get(3),tmd.getToken(hosts.get(2)))@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "List<UUID> hostIds = new ArrayList<UUID>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "IPartitioner partitioner = new RandomPartitioner()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(3)))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().size() == 1)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(3),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(1))))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,7)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ArrayList<Token> endpointTokens = new ArrayList<Token>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
56 [style = filled, label = "testStateJumpToLeaving['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(2)))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertTrue(tmd.getEndpoint(endpointTokens.get(2)) == null)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
59 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(keyTokens.get(0))))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)))@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "testStateJumpToBootstrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(0))))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(3))))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertEquals(hosts.get(3),tmd.getBootstrapTokens().get(keyTokens.get(1)))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "assertEquals(keyTokens.get(2),tmd.getToken(hosts.get(3)))@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<InetAddress> hosts = new ArrayList<InetAddress>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(3)))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertTrue(tmd.getEndpoint(keyTokens.get(1)).equals(hosts.get(2)))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "tmd.clearUnsafe()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(3))))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null)@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
61 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,6)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(endpointTokens.get(2))))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(2))))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertNull(tmd.getBootstrapTokens().get(keyTokens.get(4)))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "testStateJumpToBootstrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(3),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(2))))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(4))))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertEquals(hosts.get(2),tmd.getBootstrapTokens().get(keyTokens.get(4)))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@29@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(1))))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)))@@@41@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(3))))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "TokenMetadata tmd = ss.getTokenMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(3))))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "StorageService ss = StorageService.instance@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(keyTokens.get(1))))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->24 [style = bold, label=""];
27->32 [style = bold, label=""];
65->67 [style = bold, label=""];
41->19 [style = bold, label=""];
39->9 [style = bold, label=""];
46->15 [style = bold, label=""];
55->62 [style = bold, label=""];
11->64 [style = bold, label=""];
21->48 [style = bold, label=""];
31->21 [style = bold, label=""];
29->36 [style = solid, label="hostIds"];
57->58 [style = bold, label=""];
34->59 [style = dashed, label="0"];
25->29 [style = bold, label=""];
51->32 [style = bold, label=""];
18->45 [style = bold, label=""];
13->1 [style = bold, label=""];
36->0 [style = bold, label=""];
23->33 [style = bold, label=""];
16->49 [style = bold, label=""];
37->38 [style = bold, label=""];
62->65 [style = bold, label=""];
45->38 [style = bold, label=""];
48->10 [style = bold, label=""];
67->57 [style = bold, label=""];
32->4 [style = bold, label=""];
2->25 [style = bold, label=""];
2->61 [style = solid, label="keyTokens"];
22->13 [style = bold, label=""];
42->15 [style = bold, label=""];
29->36 [style = bold, label=""];
29->61 [style = solid, label="hostIds"];
35->31 [style = bold, label=""];
16->40 [style = bold, label=""];
40->49 [style = dashed, label="0"];
50->19 [style = bold, label=""];
26->17 [style = bold, label=""];
33->28 [style = bold, label=""];
19->39 [style = bold, label=""];
1->61 [style = solid, label="endpointTokens"];
54->66 [style = bold, label=""];
26->44 [style = dashed, label="0"];
44->17 [style = bold, label=""];
0->34 [style = bold, label=""];
20->8 [style = bold, label=""];
7->52 [style = dashed, label="0"];
25->61 [style = solid, label="hosts"];
59->63 [style = bold, label=""];
53->68 [style = bold, label=""];
19->61 [style = solid, label="ss"];
5->11 [style = bold, label=""];
52->51 [style = bold, label=""];
22->13 [style = solid, label="partitioner"];
11->30 [style = bold, label=""];
9->22 [style = bold, label=""];
18->37 [style = bold, label=""];
29->61 [style = bold, label=""];
63->11 [style = bold, label=""];
15->14 [style = bold, label=""];
64->55 [style = bold, label=""];
43->20 [style = bold, label=""];
6->48 [style = dashed, label="0"];
0->60 [style = dashed, label="0"];
68->30 [style = bold, label=""];
28->26 [style = bold, label=""];
22->36 [style = solid, label="partitioner"];
1->36 [style = solid, label="endpointTokens"];
58->53 [style = bold, label=""];
30->35 [style = bold, label=""];
6->10 [style = bold, label=""];
66->21 [style = bold, label=""];
30->54 [style = bold, label=""];
42->46 [style = dashed, label="0"];
27->51 [style = dashed, label="0"];
4->12 [style = bold, label=""];
1->2 [style = bold, label=""];
19->36 [style = solid, label="ss"];
8->47 [style = dashed, label="0"];
61->60 [style = bold, label=""];
21->6 [style = bold, label=""];
22->61 [style = solid, label="partitioner"];
34->5 [style = bold, label=""];
10->3 [style = bold, label=""];
47->46 [style = bold, label=""];
60->59 [style = bold, label=""];
20->47 [style = bold, label=""];
2->36 [style = solid, label="keyTokens"];
24->16 [style = bold, label=""];
37->45 [style = dashed, label="0"];
40->7 [style = bold, label=""];
30->54 [style = dashed, label="0"];
8->42 [style = bold, label=""];
49->52 [style = bold, label=""];
36->61 [style = dashed, label="0"];
56->19 [style = bold, label=""];
28->44 [style = bold, label=""];
7->27 [style = bold, label=""];
25->36 [style = solid, label="hosts"];
3->43 [style = bold, label=""];
12->23 [style = bold, label=""];
17->18 [style = bold, label=""];
}
