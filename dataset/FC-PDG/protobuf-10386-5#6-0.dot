digraph {
15 [style = filled, label = "assertWithMessage(inputType.name()).that(input.readTag()).isEqualTo(tag)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testReadStringInvalidUtf8['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertWithMessage(inputType.name()).that(text.charAt(0)).isEqualTo(0xfffd)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "ByteString.Output rawOutput = ByteString.newOutput()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "InvalidProtocolBufferException exception@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(tag,input.readTag())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "input.readStringRequireUtf8()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "CodedOutputStream output = CodedOutputStream.newInstance(rawOutput)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(inputType.name(),\"Protocol message had invalid UTF-8.\",exception.getMessage())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "output.writeRawVarint32(tag)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "byte(( rawInput = rawOutput.toByteString().toByteArray()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(inputType.name(),tag,input.readTag())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "output.flush()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(inputType.name(),0xfffd,text.charAt(0))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "CodedInputStream input = inputType.newDecoder(rawInput)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testReadStringRequireUtf8InvalidUtf8['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "output.writeRawVarint32(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "fail(inputType.name() + \": Expected invalid UTF-8 exception.\")@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "output.writeRawBytes(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@37561c)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String text = input.readString()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testReadStringInvalidUtf8['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "int tag = WireFormat.makeTag(1,WireFormat.WIRETYPE_LENGTH_DELIMITED)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->8 [style = bold, label=""];
17->1 [style = bold, label=""];
7->15 [style = solid, label="tag"];
19->12 [style = bold, label=""];
3->21 [style = dashed, label="0"];
7->10 [style = bold, label=""];
12->21 [style = bold, label=""];
12->15 [style = bold, label=""];
18->19 [style = dotted, label="true"];
3->11 [style = bold, label=""];
18->19 [style = bold, label=""];
11->9 [style = bold, label=""];
6->12 [style = solid, label="rawInput"];
14->1 [style = bold, label=""];
8->7 [style = bold, label=""];
2->0 [style = bold, label=""];
13->12 [style = bold, label=""];
21->20 [style = bold, label=""];
20->16 [style = bold, label=""];
5->6 [style = bold, label=""];
15->11 [style = bold, label=""];
7->21 [style = solid, label="tag"];
7->3 [style = solid, label="tag"];
11->13 [style = bold, label=""];
9->13 [style = dashed, label="0"];
3->15 [style = dashed, label="0"];
10->2 [style = bold, label=""];
4->1 [style = bold, label=""];
12->3 [style = bold, label=""];
9->12 [style = bold, label=""];
7->10 [style = solid, label="tag"];
16->12 [style = bold, label=""];
1->8 [style = solid, label="rawOutput"];
0->5 [style = bold, label=""];
6->12 [style = bold, label=""];
}
