digraph {
0 [style = filled, label = "Flowable.just(1,2).repeat(5).concatMap(new Function<Integer,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Integer x){System.out.println(\"testRepeatRetarget  \" + x)concatBase.add(x)return Flowable.empty().delay(200,TimeUnit.MILLISECONDS)}}).subscribe(ts)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "repeatRetarget['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(Arrays.asList(1,2,1,2,1,2,1,2,1,2),concatBase)@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "to.awaitDone(5,TimeUnit.SECONDS)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "to.assertNoErrors()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "to.assertNoValues()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final List<Integer> concatBase = new ArrayList<Integer>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "repeatRetarget['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ts.assertNoErrors()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TestObserver<Integer> to = new TestObserver<Integer>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final List<Integer> concatBase = new ArrayList<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Observable.just(1,2).repeat(5).concatMap(new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer x){System.out.println(\"testRepeatRetarget  \" + x)concatBase.add(x)return Observable.empty().delay(200,TimeUnit.MILLISECONDS)}}).subscribe(to)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<Integer>()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "ts.assertNoValues()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "repeatRetarget['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1->5 [style = bold, label=""];
10->3 [style = solid, label="concatBase"];
16->14 [style = solid, label="to"];
8->0 [style = solid, label="ts"];
12->11 [style = bold, label=""];
7->11 [style = dashed, label="0"];
4->2 [style = bold, label=""];
1->10 [style = dashed, label="0"];
9->10 [style = bold, label=""];
7->3 [style = bold, label=""];
13->1 [style = bold, label=""];
8->0 [style = bold, label=""];
5->16 [style = dashed, label="0"];
0->14 [style = dashed, label="0"];
6->1 [style = bold, label=""];
2->12 [style = dashed, label="0"];
10->8 [style = bold, label=""];
5->0 [style = bold, label=""];
11->3 [style = bold, label=""];
0->4 [style = bold, label=""];
1->16 [style = bold, label=""];
5->0 [style = solid, label="ts"];
4->15 [style = dashed, label="0"];
5->8 [style = dashed, label="0"];
1->3 [style = solid, label="concatBase"];
16->14 [style = bold, label=""];
14->15 [style = bold, label=""];
15->12 [style = bold, label=""];
2->7 [style = bold, label=""];
}
