digraph {
2 [style = filled, label = "testOverDisallowPartial['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testLastValueOver['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testOverDisallowPartial['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "CalciteAssert.model(JdbcTest.FOODMART_MODEL).enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.POSTGRESQL).query(\"select \"store_id\", \"account_id\", \"exp_date\",\" + \" \"time_id\", \"category_id\", \"currency_id\", \"amount\",\" + \" last_value(\"time_id\") over (partition by \"account_id\"\" + \" order by \"time_id\") as \"last_version\"\" + \" from \"expense_fact\"\").explainContains(\"PLAN=JdbcToEnumerableConverter\" + \" JdbcProject(store_id=($0(, account_id=($1(, exp_date=($2(,\" + \" time_id=($3(, category_id=($4(, currency_id=($5(, amount=($6(,\" + \" last_version=(LAST_VALUE($3) OVER (PARTITION BY $1 ORDER BY $3\" + \" RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)()\" + \" JdbcTableScan(table=((foodmart, expense_fact(()\").runs().planHasSql(\"SELECT \"store_id\", \"account_id\", \"exp_date\",\" + \" \"time_id\", \"category_id\", \"currency_id\", \"amount\",\" + \" LAST_VALUE(\"time_id\") OVER (PARTITION BY \"account_id\"\" + \" ORDER BY \"time_id\" RANGE BETWEEN UNBOUNDED PRECEDING AND\" + \" CURRENT ROW) AS \"last_version\"\" + \"FROM \"foodmart\".\"expense_fact\"\")@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "CalciteAssert.model(JdbcTest.FOODMART_MODEL).enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.POSTGRESQL).query(\"select \"store_id\", \"account_id\", \"exp_date\",\" + \" \"time_id\", \"category_id\", \"currency_id\", \"amount\",\" + \" last_value(\"time_id\") over (partition by \"account_id\"\" + \" order by \"time_id\" rows 3 preceding disallow partial)\" + \" as \"last_version\" from \"expense_fact\"\").explainContains(\"PLAN=JdbcToEnumerableConverter\" + \" JdbcProject(store_id=($0(, account_id=($1(, exp_date=($2(,\" + \" time_id=($3(, category_id=($4(, currency_id=($5(,\" + \" amount=($6(, last_version=(CASE(>=(COUNT() OVER\" + \" (PARTITION BY $1 ORDER BY $3 ROWS BETWEEN 3 PRECEDING AND\" + \" CURRENT ROW), 2), LAST_VALUE($3) OVER (PARTITION BY $1\" + \" ORDER BY $3 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW),\" + \" null)() JdbcTableScan(table=((foodmart,\" + \" expense_fact(()\").runs().planHasSql(\"SELECT \"store_id\", \"account_id\", \"exp_date\",\" + \" \"time_id\", \"category_id\", \"currency_id\", \"amount\",\" + \" CASE WHEN (COUNT(*) OVER (PARTITION BY \"account_id\"\" + \" ORDER BY \"time_id\" ROWS BETWEEN 3 PRECEDING\" + \" AND CURRENT ROW)) >= 2 THEN LAST_VALUE(\"time_id\")\" + \" OVER (PARTITION BY \"account_id\" ORDER BY \"time_id\"\" + \" ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)\" + \" ELSE NULL END AS \"last_version\"\" + \"FROM \"foodmart\".\"expense_fact\"\")@@@3@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->4 [style = dashed, label="0"];
3->4 [style = bold, label=""];
0->1 [style = bold, label=""];
2->1 [style = bold, label=""];
}
