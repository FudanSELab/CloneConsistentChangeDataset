digraph {
1 [style = filled, label = "Expression boundExpr = Binder.bind(STRUCT,expr)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Expression expr = and(equal(\"x\",7),lessThan(\"y\",100))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testAnd['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "BoundPredicate<?> right = TestHelpers.assertAndUnwrap(or.right())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "And and = TestHelpers.assertAndUnwrap(boundExpr,)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Should bind x correctly\",0,left.term().ref().fieldId())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "BoundPredicate<?> right = TestHelpers.assertAndUnwrap(and.right())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"Should bind y correctly\",1,right.term().ref().fieldId())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Expression expr = or(greaterThan(\"z\",-100),lessThan(\"y\",100))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(\"Should bind y correctly\",1,right.ref().fieldId())@@@10@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testOr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Or or = TestHelpers.assertAndUnwrap(boundExpr,)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "TestHelpers.assertAllReferencesBound(\"Or\",boundExpr)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "BoundPredicate<?> left = TestHelpers.assertAndUnwrap(and.left())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(\"Should bind x correctly\",0,left.ref().fieldId())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "testAnd['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "BoundPredicate<?> left = TestHelpers.assertAndUnwrap(or.left())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TestHelpers.assertAllReferencesBound(\"And\",boundExpr)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(\"Should bind z correctly\",2,left.ref().fieldId())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->16 [style = bold, label=""];
1->15 [style = solid, label="boundExpr"];
1->4 [style = bold, label=""];
15->13 [style = bold, label=""];
2->6 [style = bold, label=""];
1->15 [style = bold, label=""];
0->2 [style = bold, label=""];
7->11 [style = dashed, label="0"];
1->13 [style = solid, label="boundExpr"];
16->17 [style = bold, label=""];
5->18 [style = dashed, label="0"];
2->10 [style = bold, label=""];
8->7 [style = bold, label=""];
4->0 [style = bold, label=""];
6->10 [style = dashed, label="0"];
17->7 [style = bold, label=""];
5->1 [style = bold, label=""];
3->5 [style = bold, label=""];
6->16 [style = dashed, label="0"];
18->1 [style = solid, label="expr"];
2->14 [style = dashed, label="0"];
10->8 [style = bold, label=""];
18->1 [style = bold, label=""];
4->15 [style = dashed, label="0"];
0->13 [style = dashed, label="0"];
6->8 [style = bold, label=""];
12->18 [style = bold, label=""];
9->5 [style = bold, label=""];
8->17 [style = dashed, label="0"];
1->4 [style = solid, label="boundExpr"];
1->0 [style = solid, label="boundExpr"];
8->11 [style = bold, label=""];
13->14 [style = bold, label=""];
5->1 [style = solid, label="expr"];
}
