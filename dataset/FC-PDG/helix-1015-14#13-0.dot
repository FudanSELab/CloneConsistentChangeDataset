digraph {
40 [style = filled, label = "_admin.enablePartition(false,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(3000))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "_admin.enablePartition(true,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testSleepTransition['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "_participants(0(.syncStop()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "_admin.enablePartition(true,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "HelixClusterVerifier strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setResources(Sets.newHashSet(RESOURCES)).setZkClient(_gZkClient).setDeactivatedNodeAwareness(true).build()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Thread.sleep(1000)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testDisablePartitionAndStopInstance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(10000))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "_participants(0(.syncStop()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Thread.sleep(1000)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(FULL_AUTO_RESOURCES)).setDeactivatedNodeAwareness(true).build()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Thread.sleep(1000)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "_admin.enablePartition(false,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(3000))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "HelixClusterVerifier bestPossibleVerifier = new BestPossibleExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(10000))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "_participants(0( = new MockParticipantManager(ZK_ADDR,_clusterName,id)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "_participants(0(.syncStart()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Thread.sleep(1000)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "HelixClusterVerifier strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setDeactivatedNodeAwareness(true).build()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "String id = _participants(0(.getInstanceName()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "HelixClusterVerifier bestPossibleVerifier = new BestPossibleExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).build()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Thread.sleep(1000)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "_participants(0(.setTransition(new SleepTransition(99999999))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(3000))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(10000))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(resource)).setDeactivatedNodeAwareness(true).build()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "_participants(0( = new MockParticipantManager(ZK_ADDR,_clusterName,_participants(0(.getInstanceName())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Thread.sleep(1000)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "System.out.println(\"Verify resource: \" + resource)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "HelixClusterVerifier strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setDeactivatedNodeAwareness(true).setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME).build()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertFalse(strictMatchVerifier.verify(3000))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "_participants(0(.syncStop()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Thread.sleep(1000)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testSleepTransition['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
8->33 [style = bold, label=""];
0->9 [style = bold, label=""];
17->26 [style = bold, label=""];
5->14 [style = dashed, label="0"];
31->25 [style = bold, label=""];
29->39 [style = bold, label=""];
2->1 [style = bold, label=""];
22->28 [style = solid, label="id"];
9->4 [style = bold, label=""];
26->36 [style = bold, label=""];
36->31 [style = bold, label=""];
38->16 [style = bold, label=""];
25->32 [style = bold, label=""];
22->28 [style = bold, label=""];
40->34 [style = bold, label=""];
20->38 [style = bold, label=""];
18->2 [style = bold, label=""];
16->19 [style = bold, label=""];
1->32 [style = dashed, label="0"];
12->0 [style = bold, label=""];
3->0 [style = bold, label=""];
8->1 [style = bold, label=""];
39->21 [style = bold, label=""];
35->23 [style = bold, label=""];
21->20 [style = bold, label=""];
10->5 [style = bold, label=""];
5->6 [style = bold, label=""];
3->12 [style = dashed, label="0"];
34->37 [style = bold, label=""];
30->5 [style = bold, label=""];
7->2 [style = bold, label=""];
6->40 [style = bold, label=""];
33->22 [style = bold, label=""];
15->24 [style = bold, label=""];
32->15 [style = bold, label=""];
28->17 [style = bold, label=""];
38->21 [style = bold, label=""];
37->35 [style = bold, label=""];
27->29 [style = bold, label=""];
4->11 [style = bold, label=""];
13->14 [style = bold, label=""];
24->27 [style = bold, label=""];
14->6 [style = bold, label=""];
23->18 [style = bold, label=""];
11->7 [style = bold, label=""];
7->22 [style = dashed, label="0"];
2->8 [style = bold, label=""];
6->12 [style = bold, label=""];
}
