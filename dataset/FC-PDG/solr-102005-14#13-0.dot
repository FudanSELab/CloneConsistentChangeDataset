digraph {
14 [style = filled, label = "lastDistDoc = doc@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "LeafReaderContext readerContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "return result@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "getValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h),Math.sqrt(1 - h)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "double diffX = latCenterRad - latRad@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "double lat@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "double h = hsinX * hsinX + (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "getValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final double latCenterRad_cos = this.latCenterRad_cos@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return new DoubleDocValues(this){@Override public double doubleVal(int doc){double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANSdouble lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANSdouble diffX = latCenterRad - latRaddouble diffY = lonCenterRad - lonRaddouble hsinX = Math.sin(diffX * 0.5)double hsinY = Math.sin(diffY * 0.5)double h = hsinX * hsinX + (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY)return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h),Math.sqrt(1 - h)))}@Override public String toString(int doc){return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')'}}@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "lastDist = result@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "LeafReaderContext readerContext@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "double hsinY = Math.sin(diffY * 0.5)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "double diffY = lonCenterRad - lonRad@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Map context@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final FunctionValues lonVals = lonSource.getValues(context,readerContext)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final FunctionValues latVals = latSource.getValues(context,readerContext)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "dist['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "double lon@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "double hsinX = Math.sin(diffX * 0.5)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->2 [style = dotted, label="true"];
22->19 [style = bold, label=""];
13->15 [style = bold, label=""];
2->1 [style = solid, label="context"];
11->21 [style = bold, label=""];
9->8 [style = solid, label="context"];
6->4 [style = bold, label=""];
13->15 [style = solid, label="hsinY"];
9->1 [style = solid, label="context"];
21->16 [style = bold, label=""];
12->18 [style = solid, label="lon"];
4->5 [style = bold, label=""];
1->8 [style = bold, label=""];
15->23 [style = bold, label=""];
7->6 [style = bold, label=""];
15->23 [style = solid, label="h"];
17->19 [style = solid, label="lat"];
4->5 [style = solid, label="latCenterRad_cos"];
14->20 [style = bold, label=""];
19->11 [style = solid, label="latRad"];
16->13 [style = bold, label=""];
3->1 [style = bold, label=""];
23->24 [style = solid, label="result"];
3->0 [style = dotted, label="true"];
10->1 [style = bold, label=""];
19->15 [style = solid, label="latRad"];
2->1 [style = solid, label="readerContext"];
11->16 [style = solid, label="diffX"];
3->2 [style = dotted, label="true"];
18->21 [style = solid, label="lonRad"];
7->5 [style = solid, label="latCenterRad"];
23->14 [style = bold, label=""];
18->11 [style = bold, label=""];
20->24 [style = bold, label=""];
8->7 [style = bold, label=""];
6->5 [style = solid, label="lonCenterRad"];
21->13 [style = solid, label="diffY"];
22->12 [style = dotted, label="true"];
23->20 [style = solid, label="result"];
0->8 [style = solid, label="readerContext"];
19->18 [style = bold, label=""];
22->17 [style = dotted, label="true"];
10->9 [style = dotted, label="true"];
2->8 [style = solid, label="context"];
2->8 [style = solid, label="readerContext"];
16->15 [style = solid, label="hsinX"];
0->1 [style = solid, label="readerContext"];
}
