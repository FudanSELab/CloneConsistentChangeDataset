digraph {
11 [style = filled, label = "{SparkScanBuilder builder = new SparkScanBuilder(spark,TABLES.load(options.get(\"path\")),options)pushFilters(builder,LessThan.apply(\"ts\",\"2017-12-22T00:00:00+00:00\"))Batch scan = builder.build().toBatch()InputPartition(( tasks = scan.planInputPartitions()Assert.assertEquals(\"Should create 4 tasks for 2017-12-21: 15, 17, 21, 22\",4,tasks.length)assertEqualsSafe(SCHEMA.asStruct(),expected(8,9,7,6,5),read(table.location(),\"ts < cast('2017-12-22 00:00:00+00:00' as timestamp)\"))}@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Unfiltered table should created 9 read tasks\",9,unfiltered.planInputPartitions().length)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testUnpartitionedTimestampFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "{SparkScanBuilder builder = new SparkScanBuilder(spark,TABLES.load(options.get(\"path\")),options)pushFilters(builder,And.apply(GreaterThan.apply(\"ts\",\"2017-12-22T06:00:00+00:00\"),LessThan.apply(\"ts\",\"2017-12-22T08:00:00+00:00\")))Batch scan = builder.build().toBatch()InputPartition(( tasks = scan.planInputPartitions()Assert.assertEquals(\"Should create 2 tasks for 2017-12-22: 6, 7\",2,tasks.length)assertEqualsSafe(SCHEMA.asStruct(),expected(2,1),read(table.location(),\"ts > cast('2017-12-22 06:00:00+00:00' as timestamp) and \" + \"ts < cast('2017-12-22 08:00:00+00:00' as timestamp)\"))}@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "InputPartition(( tasks = scan.planInputPartitions()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testHourPartitionedTimestampFilters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Batch scan = builder.build().toBatch()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "SparkScanBuilder builder = new SparkScanBuilder(spark,TABLES.load(options.get(\"path\")),options)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testUnpartitionedTimestampFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Batch unfiltered = new SparkScanBuilder(spark,TABLES.load(options.get(\"path\")),options).build().toBatch()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "pushFilters(builder,LessThan.apply(\"ts\",\"2017-12-22T00:00:00+00:00\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Table table = buildPartitionedTable(\"partitioned_by_hour\",PARTITION_BY_HOUR,\"ts_hour\",\"ts\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "CaseInsensitiveStringMap options = new CaseInsensitiveStringMap(ImmutableMap.of(\"path\",table.location()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEqualsSafe(SCHEMA.asStruct(),expected(5,6,7,8,9),read(unpartitioned.toString(),vectorized,\"ts < cast('2017-12-22 00:00:00+00:00' as timestamp)\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEqualsSafe(SCHEMA.asStruct(),expected(5,6,7,8,9),read(unpartitioned.toString(),\"ts < cast('2017-12-22 00:00:00+00:00' as timestamp)\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"Should only create one task for a small file\",1,tasks.length)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "CaseInsensitiveStringMap options = new CaseInsensitiveStringMap(ImmutableMap.of(\"path\",unpartitioned.toString()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
5->8 [style = bold, label=""];
9->2 [style = bold, label=""];
2->3 [style = bold, label=""];
12->15 [style = solid, label="options"];
12->11 [style = solid, label="options"];
1->7 [style = bold, label=""];
11->15 [style = bold, label=""];
3->0 [style = bold, label=""];
2->3 [style = solid, label="options"];
6->2 [style = bold, label=""];
12->13 [style = bold, label=""];
3->0 [style = solid, label="builder"];
11->15 [style = solid, label="builder"];
7->5 [style = bold, label=""];
0->1 [style = bold, label=""];
14->12 [style = bold, label=""];
5->4 [style = bold, label=""];
4->8 [style = dashed, label="0"];
16->14 [style = bold, label=""];
10->11 [style = bold, label=""];
}
