digraph {
2 [style = filled, label = "final String expected = \"((ab, a, ab(, (a, ab(, (ab, b(, (ab, a, ab, b(, (a, ab, b((\"@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final Matcher.PartitionState<String> partitionState = matcher.createPartitionState(0,0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final Pattern p = Pattern.builder().symbol(\"a\").plus().symbol(\"b\").seq().build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final ImmutableList.Builder<Matcher.PartialMatch<String>> builder = ImmutableList.builder()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(matcher.match(rows),isMatchList(expected))@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testResultWithLabels['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(p.toString(),is(\"A B\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(builder.build().toString(),is(\"(((A, a), (B, ab)(, ((A, a), (B, b)((\"))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "memoryFactory.add(row)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testPlus['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "builder.addAll(matcher.matchOneWithSymbols(memoryFactory.create(),partitionState))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final Pattern p = Pattern.builder().symbol(\"A\").symbol(\"B\").seq().build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final String(( rows = {\"\",\"a\",\"ab\",\"a\",\"b\"}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testPlus['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final Matcher<String> matcher = Matcher.builder(p.toAutomaton()).add(\"a\",null).add(\"b\",null).build()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(p.toString(),is(\"(a)+ b\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Matcher<String> matcher = Matcher.builder(p.toAutomaton()).add(\"A\",null).add(\"B\",null).build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "MemoryFactory<String> memoryFactory = new MemoryFactory<>(0,0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
14->16 [style = bold, label=""];
15->10 [style = bold, label=""];
7->1 [style = bold, label=""];
16->8 [style = bold, label=""];
2->4 [style = solid, label="expected"];
12->17 [style = bold, label=""];
8->3 [style = bold, label=""];
6->9 [style = dashed, label="0"];
3->6 [style = bold, label=""];
2->4 [style = bold, label=""];
11->15 [style = bold, label=""];
6->2 [style = bold, label=""];
3->9 [style = bold, label=""];
13->12 [style = bold, label=""];
15->11 [style = bold, label=""];
1->16 [style = dashed, label="0"];
0->1 [style = bold, label=""];
3->4 [style = solid, label="rows"];
5->8 [style = dashed, label="0"];
13->15 [style = solid, label="partitionState"];
9->13 [style = bold, label=""];
17->11 [style = bold, label=""];
}
