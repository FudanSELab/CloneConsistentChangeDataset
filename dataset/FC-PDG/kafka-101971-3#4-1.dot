digraph {
28 [style = filled, label = "assertThat(task00.state(),is(Task.State.RESTORING))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01))))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(task00.state(),is(Task.State.CREATED))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "consumer.resume(eq(emptySet()))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "expectLastCall()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "shouldNotCompleteRestorationIfTasksCannotInitialize['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "expectLastCall()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00))))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expect(consumer.assignment()).andReturn(emptySet())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "verify(activeTaskCreator)@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final Task task00 = new StateMachineTask(taskId00,taskId00Partitions,true){@Override public void completeRestoration(){throw new TimeoutException(\"timeout!\")}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expect(changeLogReader.completedChangelogs()).andReturn(emptySet())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "changeLogReader.transitToRestoreActive()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(task01.state(),is(Task.State.CREATED))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(taskManager.tryToCompleteRestoration(),is(false))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(task00.state(),is(Task.State.CREATED))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "taskManager.handleAssignment(assignment,emptyMap())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(task01.state(),is(Task.State.CREATED))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expectLastCall()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(singletonList(task00)).anyTimes()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "shouldNotCompleteRestorationIfTaskCannotCompleteRestoration['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "shouldNotCompleteRestorationIfTasksCannotInitialize['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "consumer.commitSync(Collections.emptyMap())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "replay(consumer,activeTaskCreator,standbyTaskCreator,changeLogReader)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(asList(task00,task01)).anyTimes()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Task task01 = new StateMachineTask(taskId01,taskId01Partitions,true){@Override public void initializeIfNeeded(){throw new TimeoutException(\"timed out\")}}@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "verify(activeTaskCreator)@@@25@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
0->16 [style = bold, label=""];
8->23 [style = bold, label=""];
27->0 [style = bold, label=""];
6->18 [style = bold, label=""];
0->17 [style = solid, label="task00"];
19->20 [style = bold, label=""];
26->29 [style = bold, label=""];
18->15 [style = bold, label=""];
14->10 [style = bold, label=""];
4->27 [style = dashed, label="0"];
10->3 [style = bold, label=""];
28->26 [style = bold, label=""];
27->7 [style = solid, label="assignment"];
0->26 [style = solid, label="task00"];
1->30 [style = bold, label=""];
5->28 [style = bold, label=""];
13->11 [style = bold, label=""];
4->0 [style = bold, label=""];
20->5 [style = bold, label=""];
9->6 [style = bold, label=""];
22->4 [style = bold, label=""];
8->17 [style = solid, label="task01"];
19->5 [style = bold, label=""];
24->16 [style = bold, label=""];
25->27 [style = bold, label=""];
5->2 [style = bold, label=""];
23->24 [style = bold, label=""];
12->4 [style = bold, label=""];
3->7 [style = bold, label=""];
21->26 [style = dashed, label="0"];
2->21 [style = bold, label=""];
14->30 [style = dashed, label="0"];
2->28 [style = dashed, label="0"];
0->8 [style = bold, label=""];
30->10 [style = bold, label=""];
1->14 [style = bold, label=""];
17->13 [style = bold, label=""];
7->19 [style = bold, label=""];
21->17 [style = bold, label=""];
16->9 [style = bold, label=""];
4->7 [style = solid, label="assignment"];
15->1 [style = bold, label=""];
29->13 [style = bold, label=""];
}
