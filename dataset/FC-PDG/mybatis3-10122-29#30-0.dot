digraph {
82 [style = filled, label = "assertThat(config.getLogPrefix()).isEqualTo(\"mybatis_\")@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(config.getProxyFactory()).isInstanceOf()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "assertThat(config.getDatabaseId()).isEqualTo(\"derby\")@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertThat(config.getTypeAliasRegistry().getTypeAliases().get(\"blog\")).isEqualTo()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "assertThat(environment.getDataSource()).isInstanceOf()@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "XMLConfigBuilder builder = new XMLConfigBuilder(inputStream,null,props)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "assertThat(environment.getTransactionFactory()).isInstanceOf()@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled()).isTrue()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertThat(objectFactory.getProperties().size()).isEqualTo(1)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "assertThat(config.isCacheEnabled()).isFalse()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertThat(config.getDefaultResultSetType()).isEqualTo(ResultSetType.SCROLL_INSENSITIVE)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertNull(config.getLogPrefix())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertThat(config.getVfsImpl().getName()).isEqualTo(.getName())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.BATCH)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNull(config.getDefaultFetchSize())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(config.getDefaultScriptingLanuageInstance()).isInstanceOf()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "props.put(\"prop2\",\"cccc\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "assertThat(config.getJdbcTypeForNull()).isEqualTo(JdbcType.NULL)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior()).isEqualTo(AutoMappingUnknownColumnBehavior.WARNING)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertNull(config.getDefaultResultSetType())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "ExamplePlugin plugin = (ExamplePlugin)config.getInterceptors().get(0)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "assertThat(config.getDefaultStatementTimeout()).isEqualTo(10)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertThat(config.getAutoMappingBehavior()).isEqualTo(AutoMappingBehavior.NONE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertNull(config.getConfigurationFactory())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(config.isCacheEnabled()).isTrue()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(config.getMapperRegistry().getMappers().size()).isEqualTo(4)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "assertThat(config.getTypeAliasRegistry().getTypeAliases().get(\"cart\")).isEqualTo()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(config.isShrinkWhitespacesInSql()).isFalse()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Configuration config = builder.parse()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertThat(config.getDefaultFetchSize()).isEqualTo(100)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "assertThat(config.getObjectWrapperFactory()).isInstanceOf()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(,JdbcType.VARCHAR)).isInstanceOf()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "shouldSuccessfullyLoadXMLConfigFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "shouldSuccessfullyLoadMinimalXMLConfigFile['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
79 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "assertThat(config.isAggressiveLazyLoading()).isTrue()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled()).isTrue()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertThat(config.isShrinkWhitespacesInSql()).isTrue()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(config.getLogImpl().getName()).isEqualTo(.getName())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertNull(config.getDefaultStatementTimeout())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase()).isTrue()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled()).isFalse()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods()).isEqualTo(new HashSet<>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\",\"xxx\")))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertThat(config.getReflectorFactory()).isInstanceOf()@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.SESSION)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertThat(plugin.getProperties().getProperty(\"pluginProperty\")).isEqualTo(\"100\")@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(config.isUseGeneratedKeys()).isFalse()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled()).isTrue()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "assertThat(config.isUseGeneratedKeys()).isTrue()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(config.isAggressiveLazyLoading()).isFalse()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(config.isUseColumnLabel()).isTrue()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Properties props = new Properties()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.STATEMENT)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.SIMPLE)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods()).isEqualTo(new HashSet<>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\")))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Environment environment = config.getEnvironment()@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled()).isFalse()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertThat(config.isUseColumnLabel()).isFalse()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "XMLConfigBuilder builder = new XMLConfigBuilder(inputStream)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(config.isLazyLoadingEnabled()).isFalse()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(config.isCallSettersOnNulls()).isTrue()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase()).isFalse()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertThat(config.getConfigurationFactory().getName()).isEqualTo(.getName())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(config.isCallSettersOnNulls()).isFalse()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "String resource = \"org/apache/ibatis/builder/MinimalMapperConfig.xml\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled()).isFalse()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "assertThat(environment.getId()).isEqualTo(\"development\")@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertThat(config.getDefaultSqlProviderType()).isNull()@@@34@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertNull(config.getLogImpl())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertThat(config.getDefaultScriptingLanuageInstance()).isInstanceOf()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior()).isEqualTo(AutoMappingUnknownColumnBehavior.NONE)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "shouldSuccessfullyLoadMinimalXMLConfigFile['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertNotNull(config)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertThat(config.getTypeAliasRegistry().getTypeAliases().get(\"blogauthor\")).isEqualTo()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Configuration config = builder.parse()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertThat(plugin.getProperties().size()).isEqualTo(1)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "assertThat(config.getProxyFactory()).isInstanceOf()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertThat(config.isLazyLoadingEnabled()).isTrue()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "ExampleObjectFactory objectFactory = (ExampleObjectFactory)config.getObjectFactory()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@60@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(config.getJdbcTypeForNull()).isEqualTo(JdbcType.OTHER)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertThat(objectFactory.getProperties().getProperty(\"objectFactoryProperty\")).isEqualTo(\"100\")@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "String resource = \"org/apache/ibatis/builder/CustomizedSettingsMapperConfig.xml\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74->9 [style = bold, label=""];
11->22 [style = bold, label=""];
2->76 [style = dashed, label="0"];
53->55 [style = bold, label=""];
9->75 [style = dashed, label="0"];
28->85 [style = dashed, label="0"];
86->59 [style = bold, label=""];
51->54 [style = bold, label=""];
0->8 [style = bold, label=""];
59->52 [style = bold, label=""];
19->23 [style = bold, label=""];
75->86 [style = bold, label=""];
58->47 [style = bold, label=""];
48->77 [style = bold, label=""];
68->73 [style = bold, label=""];
15->26 [style = bold, label=""];
17->13 [style = bold, label=""];
65->57 [style = bold, label=""];
71->69 [style = bold, label=""];
16->7 [style = bold, label=""];
27->19 [style = bold, label=""];
60->81 [style = bold, label=""];
81->71 [style = bold, label=""];
13->20 [style = bold, label=""];
15->46 [style = dashed, label="0"];
67->87 [style = bold, label=""];
14->41 [style = dashed, label="0"];
62->65 [style = bold, label=""];
50->43 [style = bold, label=""];
37->48 [style = bold, label=""];
41->75 [style = bold, label=""];
43->74 [style = solid, label="props"];
20->32 [style = bold, label=""];
11->33 [style = dashed, label="0"];
61->60 [style = bold, label=""];
24->11 [style = bold, label=""];
22->17 [style = bold, label=""];
25->42 [style = dashed, label="0"];
87->85 [style = bold, label=""];
4->1 [style = bold, label=""];
88->79 [style = bold, label=""];
24->82 [style = dashed, label="0"];
49->39 [style = bold, label=""];
3->48 [style = dashed, label="0"];
23->18 [style = bold, label=""];
10->70 [style = dashed, label="0"];
79->83 [style = bold, label=""];
82->33 [style = bold, label=""];
7->2 [style = bold, label=""];
29->54 [style = dashed, label="0"];
44->40 [style = bold, label=""];
21->59 [style = dashed, label="0"];
0->49 [style = dashed, label="0"];
10->6 [style = bold, label=""];
38->62 [style = bold, label=""];
1->28 [style = bold, label=""];
34->45 [style = bold, label=""];
21->30 [style = bold, label=""];
42->82 [style = bold, label=""];
14->9 [style = bold, label=""];
89->35 [style = bold, label=""];
69->89 [style = bold, label=""];
46->51 [style = bold, label=""];
29->25 [style = bold, label=""];
30->52 [style = dashed, label="0"];
45->68 [style = bold, label=""];
5->21 [style = bold, label=""];
54->42 [style = bold, label=""];
6->3 [style = bold, label=""];
36->44 [style = bold, label=""];
76->49 [style = bold, label=""];
70->37 [style = bold, label=""];
66->74 [style = bold, label=""];
2->0 [style = bold, label=""];
17->55 [style = dashed, label="0"];
3->16 [style = bold, label=""];
52->70 [style = bold, label=""];
8->39 [style = dashed, label="0"];
78->76 [style = bold, label=""];
18->14 [style = bold, label=""];
9->5 [style = bold, label=""];
26->29 [style = bold, label=""];
31->19 [style = bold, label=""];
9->41 [style = bold, label=""];
47->61 [style = bold, label=""];
43->66 [style = bold, label=""];
1->87 [style = dashed, label="0"];
57->58 [style = bold, label=""];
12->84 [style = dashed, label="0"];
22->53 [style = dashed, label="0"];
56->50 [style = bold, label=""];
20->44 [style = dashed, label="0"];
35->72 [style = bold, label=""];
28->12 [style = bold, label=""];
8->4 [style = bold, label=""];
80->38 [style = bold, label=""];
77->78 [style = bold, label=""];
12->15 [style = bold, label=""];
25->24 [style = bold, label=""];
64->80 [style = bold, label=""];
33->53 [style = bold, label=""];
6->37 [style = dashed, label="0"];
63->34 [style = bold, label=""];
30->10 [style = bold, label=""];
18->14 [style = solid, label="config"];
55->36 [style = bold, label=""];
40->63 [style = bold, label=""];
84->46 [style = bold, label=""];
73->64 [style = bold, label=""];
7->78 [style = dashed, label="0"];
72->88 [style = bold, label=""];
85->84 [style = bold, label=""];
16->77 [style = dashed, label="0"];
19->50 [style = dashed, label="0"];
39->67 [style = bold, label=""];
}
