digraph {
13 [style = filled, label = "int(( results = getRandomAvailableTCPPorts(5)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "previousPorts.addAll(ports)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(previousPorts).doesNotContainAnyElementsOf(ports)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "getRandomAvailableTCPPortRange_returnsUniqueRanges['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "++i@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(previousPorts).doesNotContainAnyElementsOf(ports)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Collection<Integer> previousPorts = new HashSet<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "int(( results = getRandomAvailableTCPPorts(5,useMembershipPortRange)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assumeFalse(\"Windows has ports scattered throughout the range that makes this test difficult to pass \" + \"consistently\",SystemUtils.isWindows())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "initializeUniquePortRange_willReturnUniquePortsForUniqueRanges['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "i < 3@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "initializeUniquePortRange_willReturnUniquePortsForUniqueRanges['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int(( results = getRandomAvailableTCPPortRange(5,useMembershipPortRange)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "boolean useMembershipPortRange@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Collection<Integer> ports = toSet(results)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "previousPorts.addAll(ports)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "boolean useMembershipPortRange@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assumeFalse(\"Windows has ports scattered throughout the range that makes this test difficult to pass consistently\",SystemUtils.isWindows())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "initializeUniquePortRange(i)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->3 [style = dotted, label="true"];
2->10 [style = dotted, label="true"];
0->11 [style = solid, label="ports"];
16->15 [style = bold, label=""];
19->18 [style = bold, label=""];
2->0 [style = dotted, label="true"];
9->2 [style = bold, label=""];
2->1 [style = bold, label=""];
2->3 [style = bold, label=""];
16->17 [style = dotted, label="true"];
0->2 [style = bold, label=""];
19->18 [style = solid, label="ports"];
6->14 [style = dashed, label="0"];
11->9 [style = bold, label=""];
3->4 [style = bold, label=""];
1->19 [style = dotted, label="true"];
19->0 [style = solid, label="ports"];
1->9 [style = bold, label=""];
4->0 [style = bold, label=""];
4->0 [style = solid, label="results"];
7->5 [style = dotted, label="true"];
2->11 [style = dotted, label="true"];
1->18 [style = dotted, label="true"];
8->1 [style = bold, label=""];
0->10 [style = bold, label=""];
2->9 [style = dotted, label="true"];
5->17 [style = dashed, label="0"];
3->9 [style = dashed, label="0"];
9->19 [style = solid, label="results"];
8->1 [style = solid, label="i"];
1->9 [style = dotted, label="true"];
1->2 [style = solid, label="i"];
6->8 [style = bold, label=""];
7->6 [style = bold, label=""];
17->9 [style = solid, label="useMembershipPortRange"];
12->14 [style = bold, label=""];
2->4 [style = dotted, label="true"];
3->13 [style = bold, label=""];
9->19 [style = bold, label=""];
13->0 [style = bold, label=""];
1->2 [style = bold, label=""];
14->8 [style = bold, label=""];
1->0 [style = dotted, label="true"];
0->10 [style = solid, label="ports"];
1->3 [style = solid, label="i"];
1->2 [style = dotted, label="true"];
4->13 [style = dashed, label="0"];
15->8 [style = bold, label=""];
18->0 [style = bold, label=""];
2->13 [style = dotted, label="true"];
13->0 [style = solid, label="results"];
10->11 [style = bold, label=""];
5->4 [style = solid, label="useMembershipPortRange"];
}
