digraph {
9 [style = filled, label = "JoinFilterPreAnalysisGroup preAnalysisGroupLookupStringKey = new JoinFilterPreAnalysisGroup(new JoinFilterRewriteConfig(false,false,false,0),true)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "JoinFilterPreAnalysisGroup preAnalysisGroupIndexedLongKey = new JoinFilterPreAnalysisGroup(new JoinFilterRewriteConfig(false,false,false,0),true)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "return Optional.empty()@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "JoinFilterPreAnalysis preAnalysisIndexedStringKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(new JoinFilterPreAnalysisKey(new JoinFilterRewriteConfig(false,false,false,0),joinableClausesLookupLongKey,VirtualColumns.EMPTY,null))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "JoinFilterPreAnalysis preAnalysisIndexedLongKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(new JoinFilterPreAnalysisKey(new JoinFilterRewriteConfig(false,false,false,0),joinableClausesIndexedTableLongKey,VirtualColumns.EMPTY,null))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "setup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "hashJoinIndexedTableLongKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),joinableClausesIndexedTableLongKey,preAnalysisIndexedLongKey)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "JoinFilterPreAnalysisGroup preAnalysisGroupIndexedStringKey = new JoinFilterPreAnalysisGroup(new JoinFilterRewriteConfig(false,false,false,0),true)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "hashJoinIndexedTableStringKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),joinableClausesIndexedTableStringKey,preAnalysisIndexedStringKey)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "JoinFilterPreAnalysis preAnalysisLookupStringKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(new JoinFilterPreAnalysisKey(new JoinFilterRewriteConfig(false,false,false,0),joinableClausesLookupStringKey,VirtualColumns.EMPTY,null))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "hashJoinLookupStringKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),joinableClausesLookupStringKey,preAnalysisLookupStringKey)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "hashJoinLookupStringKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),joinableClausesLookupStringKey,preAnalysisGroupLookupStringKey)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "List<JoinableClause> joinableClausesLookupLongKey = ImmutableList.of(new JoinableClause(prefix,LookupJoinable.wrap(JoinTestHelper.createCountryIsoCodeToNameLookup()),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"countryIsoCode == \"%sk\"\",prefix),prefix,ExprMacroTable.nil())))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<JoinableClause> joinableClausesIndexedTableLongKey = ImmutableList.of(new JoinableClause(prefix,new IndexedTableJoinable(JoinTestHelper.createCountriesIndexedTable()),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"countryNumber == \"%scountryNumber\"\",prefix),prefix,ExprMacroTable.nil())))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "JoinFilterPreAnalysis preAnalysisLookupLongKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(new JoinFilterPreAnalysisKey(new JoinFilterRewriteConfig(false,false,false,0),joinableClausesLookupLongKey,VirtualColumns.EMPTY,null))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final Map<String,String> countryNumberToNameMap = JoinTestHelper.createCountryNumberToNameLookup().getMap()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<JoinableClause> joinableClausesIndexedTableLonggKey = ImmutableList.of(new JoinableClause(prefix,new IndexedTableJoinable(JoinTestHelper.createCountriesIndexedTable()),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"countryNumber == \"%scountryNumber\"\",prefix),prefix,ExprMacroTable.nil())))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "JoinFilterPreAnalysisGroup preAnalysisGroupLookupLongKey = new JoinFilterPreAnalysisGroup(new JoinFilterRewriteConfig(false,false,false,0),true)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "hashJoinIndexedTableLongKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),joinableClausesIndexedTableLonggKey,preAnalysisGroupIndexedLongKey)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "LookupSegmentTest.LOOKUP_NAME.equals(lookupName)@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "hashJoinLookupLongKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),joinableClausesLookupLongKey,preAnalysisGroupLookupLongKey)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "final String lookupName@@@6@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "hashJoinLookupLongKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),joinableClausesLookupLongKey,preAnalysisLookupLongKey)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "List<JoinableClause> joinableClausesIndexedTableStringKey = ImmutableList.of(new JoinableClause(prefix,new IndexedTableJoinable(JoinTestHelper.createCountriesIndexedTable()),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"countryIsoCode == \"%scountryIsoCode\"\",prefix),prefix,ExprMacroTable.nil())))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final String prefix = \"c.\"@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "setup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "hashJoinIndexedTableStringKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),joinableClausesIndexedTableStringKey,preAnalysisGroupIndexedStringKey)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "final ExprMacroTable exprMacroTable = new ExprMacroTable(ImmutableList.of(new LookupExprMacro(new LookupExtractorFactoryContainerProvider(){@Override public Set<String> getAllLookupNames(){return ImmutableSet.of(LOOKUP_COUNTRY_CODE_TO_NAME,LOOKUP_COUNTRY_NUMBER_TO_NAME)}@Override public Optional<LookupExtractorFactoryContainer> get(String lookupName){if (LOOKUP_COUNTRY_CODE_TO_NAME.equals(lookupName)) {return Optional.of(new LookupExtractorFactoryContainer(\"0\",new MapLookupExtractorFactory(countryCodeToNameMap,false)))}if (LOOKUP_COUNTRY_NUMBER_TO_NAME.equals(lookupName)) {return Optional.of(new LookupExtractorFactoryContainer(\"0\",new MapLookupExtractorFactory(countryNumberToNameMap,false)))}{return Optional.empty()}}})))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "index = JoinTestHelper.createFactIndexBuilder(tmpDir,rows).buildMMappedIndex(columnConfig)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "tmpDir = FileUtils.createTempDir()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "get['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final Map<String,String> countryCodeToNameMap = JoinTestHelper.createCountryIsoCodeToNameLookup().getMap()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ColumnConfig columnConfig = null@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "List<JoinableClause> joinableClausesLookupStringKey = ImmutableList.of(new JoinableClause(prefix,LookupJoinable.wrap(JoinTestHelper.createCountryIsoCodeToNameLookup()),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"countryIsoCode == \"%sk\"\",prefix),prefix,ExprMacroTable.nil())))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "return Optional.of(new LookupExtractorFactoryContainer(\"v0\",LookupSegmentTest.LOOKUP_EXTRACTOR_FACTORY))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "lookupVirtualColumns = VirtualColumns.create(ImmutableList.of(new ExpressionVirtualColumn(LOOKUP_COUNTRY_CODE_TO_NAME,\"lookup(countryIsoCode, '\" + LOOKUP_COUNTRY_CODE_TO_NAME + \"')\",ValueType.STRING,exprMacroTable),new ExpressionVirtualColumn(LOOKUP_COUNTRY_NUMBER_TO_NAME,\"lookup(countryNumber, '\" + LOOKUP_COUNTRY_NUMBER_TO_NAME + \"')\",ValueType.STRING,exprMacroTable)))@@@39@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "baseSegment = new QueryableIndexSegment(index,SegmentId.dummy(\"join\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->26 [style = solid, label="preAnalysisIndexedStringKey"];
6->3 [style = bold, label=""];
14->24 [style = bold, label=""];
23->29 [style = solid, label="joinableClausesIndexedTableLongKey"];
19->25 [style = solid, label="joinableClausesLookupStringKey"];
29->30 [style = bold, label=""];
17->24 [style = dashed, label="0"];
25->28 [style = solid, label="preAnalysisLookupStringKey"];
10->28 [style = dashed, label="0"];
14->17 [style = bold, label=""];
19->28 [style = solid, label="joinableClausesLookupStringKey"];
9->10 [style = bold, label=""];
3->16 [style = bold, label=""];
7->8 [style = bold, label=""];
30->18 [style = bold, label=""];
0->10 [style = solid, label="baseSegment"];
0->4 [style = solid, label="baseSegment"];
28->14 [style = bold, label=""];
8->0 [style = bold, label=""];
23->29 [style = bold, label=""];
20->7 [style = solid, label="columnConfig"];
19->10 [style = solid, label="joinableClausesLookupStringKey"];
14->27 [style = solid, label="joinableClausesLookupLongKey"];
15->11 [style = bold, label=""];
19->9 [style = bold, label=""];
0->26 [style = solid, label="baseSegment"];
32->33 [style = solid, label="lookupName"];
24->27 [style = bold, label=""];
18->3 [style = solid, label="countryCodeToNameMap"];
23->30 [style = solid, label="joinableClausesIndexedTableLongKey"];
21->13 [style = bold, label=""];
17->15 [style = solid, label="preAnalysisGroupLookupLongKey"];
0->15 [style = solid, label="baseSegment"];
8->19 [style = solid, label="prefix"];
25->28 [style = bold, label=""];
10->14 [style = bold, label=""];
0->19 [style = bold, label=""];
24->27 [style = solid, label="preAnalysisLookupLongKey"];
11->12 [style = bold, label=""];
4->2 [style = bold, label=""];
4->26 [style = dashed, label="0"];
19->25 [style = bold, label=""];
8->23 [style = solid, label="prefix"];
5->1 [style = bold, label=""];
27->11 [style = bold, label=""];
33->36 [style = bold, label=""];
17->15 [style = bold, label=""];
0->1 [style = solid, label="baseSegment"];
20->7 [style = bold, label=""];
8->11 [style = solid, label="prefix"];
2->23 [style = dashed, label="0"];
22->26 [style = bold, label=""];
1->30 [style = dashed, label="0"];
31->13 [style = bold, label=""];
5->29 [style = dashed, label="0"];
7->0 [style = solid, label="index"];
8->2 [style = solid, label="prefix"];
0->30 [style = solid, label="baseSegment"];
18->6 [style = bold, label=""];
9->10 [style = solid, label="preAnalysisGroupLookupStringKey"];
14->22 [style = solid, label="joinableClausesLookupLongKey"];
9->25 [style = dashed, label="0"];
12->22 [style = dashed, label="0"];
33->36 [style = dotted, label="false"];
11->22 [style = bold, label=""];
33->32 [style = bold, label=""];
12->4 [style = solid, label="preAnalysisGroupIndexedStringKey"];
14->24 [style = solid, label="joinableClausesLookupLongKey"];
0->28 [style = solid, label="baseSegment"];
2->5 [style = bold, label=""];
33->34 [style = dotted, label="true"];
35->33 [style = bold, label=""];
14->15 [style = solid, label="joinableClausesLookupLongKey"];
1->18 [style = bold, label=""];
11->26 [style = solid, label="joinableClausesIndexedTableStringKey"];
2->1 [style = solid, label="joinableClausesIndexedTableLonggKey"];
11->4 [style = solid, label="joinableClausesIndexedTableStringKey"];
5->1 [style = solid, label="preAnalysisGroupIndexedLongKey"];
12->4 [style = bold, label=""];
29->30 [style = solid, label="preAnalysisIndexedLongKey"];
26->23 [style = bold, label=""];
8->14 [style = solid, label="prefix"];
6->3 [style = solid, label="countryNumberToNameMap"];
15->27 [style = dashed, label="0"];
0->27 [style = solid, label="baseSegment"];
33->34 [style = bold, label=""];
3->16 [style = solid, label="exprMacroTable"];
13->20 [style = bold, label=""];
35->32 [style = dotted, label="true"];
}
