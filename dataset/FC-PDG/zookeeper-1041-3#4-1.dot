digraph {
13 [style = filled, label = "testMultiWithContainer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "AsyncCallback.Create2Callback cb = new AsyncCallback.Create2Callback(){@Override public void processResult(int rc,String path,Object ctx,String name,Stat stat){Assert.assertEquals(ctx,\"context\")latch.countDown()}}@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "containerManager.checkContainers()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "zk.create(\"/foo/bar\",new byte((((,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Op createContainer = Op.create(\"/foo\",new byte((((,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.CONTAINER)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertNull(\"Container should have been deleted\",zk.exists(\"/foo\",false))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "zk.create(\"/foo\",new byte((((,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.CONTAINER,cb,\"context\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(),serverFactory.getZooKeeperServer().firstProcessor,1,100)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(latch.await(5,TimeUnit.SECONDS))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "createContainer = Op.create(\"/foo\",new byte((((,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.CONTAINER)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Op createChild = Op.create(\"/foo/bar\",new byte((((,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "DataTree dataTree = serverFactory.getZooKeeperServer().getZKDatabase().getDataTree()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testMultiWithContainer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(dataTree.getContainers().size(),1)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(),serverFactory.getZooKeeperServer().firstProcessor,1,100)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "zk.delete(\"/foo/bar\",-1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertNull(\"Container should have been deleted\",zk.exists(\"/foo\",false))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(),serverFactory.getZooKeeperServer().firstProcessor,1,100)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "containerManager.checkContainers()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(dataTree.getContainers().size(),1)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertNull(\"Container should have been deleted\",zk.exists(\"/foo\",false))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Thread.sleep(1000)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Thread.sleep(1000)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "zk.delete(\"/foo/bar\",-1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "zk.multi(Arrays.asList(createContainer,createChild))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertNull(\"Container should have been deleted\",zk.exists(\"/foo\",false))@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testSimpleDeletionAsync['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertNull(\"Container should have been deleted\",zk.exists(\"/foo\",false))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9->7 [style = solid, label="createChild"];
14->3 [style = bold, label=""];
8->10 [style = bold, label=""];
23->25 [style = bold, label=""];
0->9 [style = bold, label=""];
6->12 [style = solid, label="createContainer"];
10->15 [style = bold, label=""];
21->6 [style = bold, label=""];
8->19 [style = bold, label=""];
10->19 [style = dashed, label="0"];
16->6 [style = bold, label=""];
20->0 [style = bold, label=""];
12->11 [style = bold, label=""];
14->22 [style = bold, label=""];
4->12 [style = solid, label="deleteChild"];
5->18 [style = bold, label=""];
3->22 [style = dashed, label="0"];
0->7 [style = solid, label="createContainer"];
9->7 [style = bold, label=""];
5->17 [style = bold, label=""];
2->4 [style = bold, label=""];
16->21 [style = dashed, label="0"];
6->2 [style = bold, label=""];
7->14 [style = bold, label=""];
22->8 [style = bold, label=""];
11->5 [style = bold, label=""];
1->16 [style = bold, label=""];
1->21 [style = bold, label=""];
3->8 [style = bold, label=""];
25->26 [style = bold, label=""];
4->12 [style = bold, label=""];
28->24 [style = bold, label=""];
2->12 [style = solid, label="createChild"];
26->28 [style = bold, label=""];
19->15 [style = bold, label=""];
26->28 [style = solid, label="cb"];
17->18 [style = dashed, label="0"];
24->27 [style = bold, label=""];
27->2 [style = bold, label=""];
13->0 [style = bold, label=""];
15->1 [style = bold, label=""];
}
