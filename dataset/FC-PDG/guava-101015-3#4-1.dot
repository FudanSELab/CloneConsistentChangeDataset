digraph {
39 [style = filled, label = "AbstractGraphTest.validateGraph(graph)@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(graph.nodes()).isEmpty()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(graph.edges()).isEmpty()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(graph.nodes()).hasSize(NUM_NODES)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int numNodesToRemove = gen.nextInt(NUM_NODES)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int numEdgesToRemove = gen.nextInt(NUM_EDGES)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "graph.nodes().size() < NUM_NODES@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(graph.nodes()).hasSize(NUM_NODES)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "edgeList@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "++i@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "AbstractGraphTest.validateGraph(graph)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(graph.nodes()).hasSize(NUM_NODES)@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ArrayList<EndpointPair<Integer>> edgeList = new ArrayList<EndpointPair<Integer>>(graph.edges())@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(graph.edges()).hasSize(NUM_EDGES)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "++i@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "++i@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertThat(graph.addNode(node)).isTrue()@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(graph.removeNode(nodeList.get(i))).isTrue()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "nodeList@@@51@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "int i = 0@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(graph.putEdge(edge.nodeU(),edge.nodeV())).isTrue()@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "MutableGraph<Integer> graph = graphBuilder.allowsSelfLoops(true).build()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "ArrayList<EndpointPair<Integer>> edgeList = new ArrayList<>(graph.edges())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertThat(graph.edges()).hasSize(NUM_EDGES - numEdgesToRemove)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertThat(graph.edges()).hasSize(NUM_EDGES)@@@59@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EndpointPair<Integer> edge@@@55@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Collections.shuffle(nodeList,gen)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = 0@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "i < NUM_NODES@@@43@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testGraphMutation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Integer node@@@51@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Collections.shuffle(edgeList,gen)@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Collections.shuffle(edgeList,gen)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "graph.putEdge(getRandomElement(nodeList,gen),getRandomElement(nodeList,gen))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ArrayList<Integer> nodeList = new ArrayList<Integer>(graph.nodes())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "AbstractGraphTest.validateGraph(graph)@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "AbstractGraphTest.validateGraph(graph)@@@60@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "EndpointPair<Integer> edge@@@55@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
62 [style = filled, label = "testGraphMutation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "++trial@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertThat(graph.nodes()).hasSize(NUM_NODES - numNodesToRemove)@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "GraphBuilder<? super Integer> graphBuilder@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "edgeList@@@55@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "i < numEdgesToRemove@@@25@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(graph.removeNode(nodeList.get(i))).isTrue()@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "graph.addNode(gen.nextInt(NODE_POOL_SIZE))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "trial < NUM_TRIALS@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Collections.shuffle(nodeList,gen)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "int trial = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "int i = numNodesToRemove@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(graph.edges()).isEmpty()@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertThat(graph.removeEdge(edge.nodeU(),edge.nodeV())).isTrue()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "testGraphMutation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "nodeList@@@51@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "AbstractGraphTest.validateGraph(graph)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Random gen = new Random(42)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "i < numNodesToRemove@@@36@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "ArrayList<Integer> nodeList = new ArrayList<>(graph.nodes())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertThat(graph.nodes()).isEmpty()@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "nodeList@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "AbstractGraphTest.validateGraph(graph)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "graph.edges().size() < NUM_EDGES@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EndpointPair<Integer> edge = edgeList.get(i)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->24 [style = dotted, label="true"];
13->49 [style = dotted, label="true"];
32->4 [style = solid, label="graph"];
13->28 [style = dotted, label="true"];
11->47 [style = solid, label="numNodesToRemove"];
4->25 [style = bold, label=""];
59->41 [style = solid, label="nodeList"];
13->27 [style = dotted, label="true"];
13->51 [style = dotted, label="true"];
18->24 [style = solid, label="gen"];
13->20 [style = dotted, label="true"];
28->50 [style = bold, label=""];
13->60 [style = dotted, label="true"];
34->15 [style = bold, label=""];
13->5 [style = dotted, label="true"];
58->18 [style = bold, label=""];
5->38 [style = bold, label=""];
54->19 [style = bold, label=""];
28->25 [style = solid, label="edgeList"];
52->28 [style = bold, label=""];
0->14 [style = bold, label=""];
36->24 [style = bold, label=""];
22->0 [style = bold, label=""];
32->43 [style = solid, label="graph"];
11->19 [style = solid, label="numNodesToRemove"];
13->21 [style = dotted, label="true"];
38->8 [style = dotted, label="true"];
32->15 [style = solid, label="graph"];
51->39 [style = bold, label=""];
13->50 [style = dotted, label="true"];
13->37 [style = dotted, label="true"];
13->15 [style = dotted, label="true"];
39->47 [style = bold, label=""];
62->18 [style = bold, label=""];
19->35 [style = dotted, label="true"];
57->24 [style = solid, label="edgeList"];
28->24 [style = solid, label="edgeList"];
13->4 [style = dotted, label="true"];
25->21 [style = bold, label=""];
13->44 [style = dotted, label="true"];
13->39 [style = dotted, label="true"];
13->9 [style = dotted, label="true"];
28->57 [style = dashed, label="0"];
18->25 [style = solid, label="gen"];
13->17 [style = dotted, label="true"];
13->59 [style = dotted, label="true"];
13->32 [style = bold, label=""];
20->14 [style = solid, label="nodeList"];
35->54 [style = bold, label=""];
13->3 [style = dotted, label="true"];
12->19 [style = solid, label="i"];
37->7 [style = dotted, label="true"];
13->25 [style = dotted, label="true"];
19->54 [style = dotted, label="true"];
13->36 [style = dotted, label="true"];
2->34 [style = bold, label=""];
7->37 [style = bold, label=""];
13->19 [style = dotted, label="true"];
9->48 [style = bold, label=""];
11->12 [style = bold, label=""];
20->52 [style = bold, label=""];
32->0 [style = solid, label="graph"];
8->38 [style = bold, label=""];
26->13 [style = bold, label=""];
13->23 [style = dotted, label="true"];
38->2 [style = bold, label=""];
13->32 [style = dotted, label="true"];
13->55 [style = dotted, label="true"];
13->46 [style = dotted, label="true"];
13->22 [style = dotted, label="true"];
13->0 [style = dotted, label="true"];
18->16 [style = solid, label="gen"];
47->44 [style = bold, label=""];
5->29 [style = solid, label="i"];
52->41 [style = dotted, label="true"];
48->13 [style = bold, label=""];
20->16 [style = solid, label="nodeList"];
58->40 [style = dotted, label="true"];
24->3 [style = bold, label=""];
13->52 [style = dotted, label="true"];
13->34 [style = dotted, label="true"];
44->45 [style = dotted, label="true"];
14->36 [style = bold, label=""];
10->18 [style = bold, label=""];
13->16 [style = dotted, label="true"];
59->14 [style = solid, label="nodeList"];
59->16 [style = solid, label="nodeList"];
32->46 [style = bold, label=""];
30->43 [style = bold, label=""];
20->59 [style = dashed, label="0"];
18->26 [style = bold, label=""];
52->41 [style = bold, label=""];
44->33 [style = bold, label=""];
32->39 [style = solid, label="graph"];
31->49 [style = bold, label=""];
13->38 [style = dotted, label="true"];
45->44 [style = bold, label=""];
18->41 [style = solid, label="gen"];
37->7 [style = bold, label=""];
13->2 [style = dotted, label="true"];
42->4 [style = bold, label=""];
21->5 [style = bold, label=""];
18->14 [style = solid, label="gen"];
13->30 [style = dotted, label="true"];
46->30 [style = bold, label=""];
21->34 [style = solid, label="numEdgesToRemove"];
13->33 [style = dotted, label="true"];
50->42 [style = bold, label=""];
57->25 [style = solid, label="edgeList"];
19->35 [style = bold, label=""];
53->8 [style = bold, label=""];
13->11 [style = dotted, label="true"];
32->9 [style = solid, label="graph"];
19->51 [style = bold, label=""];
13->14 [style = dotted, label="true"];
10->40 [style = dotted, label="true"];
33->22 [style = bold, label=""];
11->51 [style = solid, label="numNodesToRemove"];
29->53 [style = bold, label=""];
44->6 [style = bold, label=""];
16->11 [style = bold, label=""];
13->12 [style = dotted, label="true"];
57->50 [style = bold, label=""];
3->31 [style = bold, label=""];
47->44 [style = solid, label="i"];
26->13 [style = solid, label="trial"];
38->29 [style = bold, label=""];
5->38 [style = solid, label="i"];
37->20 [style = bold, label=""];
59->52 [style = bold, label=""];
13->42 [style = dotted, label="true"];
43->37 [style = bold, label=""];
15->16 [style = bold, label=""];
21->38 [style = solid, label="numEdgesToRemove"];
13->43 [style = dotted, label="true"];
41->52 [style = bold, label=""];
62->40 [style = dotted, label="true"];
13->1 [style = dotted, label="true"];
13->31 [style = dotted, label="true"];
13->57 [style = dotted, label="true"];
38->53 [style = dotted, label="true"];
37->59 [style = bold, label=""];
13->56 [style = dotted, label="true"];
13->48 [style = dotted, label="true"];
38->29 [style = dotted, label="true"];
52->57 [style = bold, label=""];
12->19 [style = bold, label=""];
13->47 [style = dotted, label="true"];
6->45 [style = bold, label=""];
49->9 [style = bold, label=""];
20->41 [style = solid, label="nodeList"];
44->6 [style = dotted, label="true"];
13->61 [style = dotted, label="true"];
}
