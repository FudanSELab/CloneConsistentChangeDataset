digraph {
11 [style = filled, label = "Assert.assertEquals(outputRecords.size(),1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "converter.processStream(stream,new WorkUnitState()).getRecordStream().subscribe(null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(ackable.acked,1)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "MyConverter converter = new MyConverter()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testSingleOutputIterable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testEmptyOutputIterable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testEmptyOutputIterable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "RecordStreamWithMetadata<Integer,String> stream = new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(0)),GlobalMetadata.builder().schema(\"schema\").build()).mapRecords(null)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(outputRecords.size(),0)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<StreamEntity<Integer>> outputRecords = Lists.newArrayList()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "BasicAckableForTesting ackable = new BasicAckableForTesting()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "RecordStreamWithMetadata<Integer,String> stream = new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(1)),\"schema\").mapRecords(null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(ackable.acked,0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "outputRecords.get(0).ack()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(ackable.acked,1)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "RecordStreamWithMetadata<Integer,String> stream = new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(0)),\"schema\").mapRecords(null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->3 [style = bold, label=""];
4->12 [style = bold, label=""];
5->7 [style = bold, label=""];
6->1 [style = bold, label=""];
4->8 [style = bold, label=""];
1->4 [style = bold, label=""];
0->8 [style = dashed, label="0"];
12->3 [style = bold, label=""];
10->15 [style = bold, label=""];
0->12 [style = dashed, label="0"];
3->2 [style = bold, label=""];
9->1 [style = bold, label=""];
15->14 [style = bold, label=""];
5->11 [style = dashed, label="0"];
11->10 [style = bold, label=""];
2->11 [style = bold, label=""];
13->1 [style = bold, label=""];
4->0 [style = bold, label=""];
2->5 [style = bold, label=""];
8->3 [style = bold, label=""];
}
