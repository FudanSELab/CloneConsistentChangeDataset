digraph {
3 [style = filled, label = "Hashtable<String,String> files = new Hashtable<>()@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "buildRule.executeTarget(\"testsmallset\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "FileUtilities.rollbackTimestamps(new File(buildRule.getProject().getProperty(\"tempsrc.dir\")),5)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testSmallSet['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "buildRule.executeTarget(\"testinnerinner\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "FileSet resultFileSet = p.getReference(RESULT_FILESET)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Hashtable<String,String> files = getFiles()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "FileUtilities.rollbackTimestamps(new File(buildRule.getProject().getProperty(\"classes.dir\")),5)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"Classfileset did not pick up expected number of class files\",2,files.size())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "buildRule.executeTarget(\"compile\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(\"Result did not contain C.class\",files,hasKey(\"C.class\"))@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"Classfileset did not pick up expected number of \" + \"class files\",2,files.size())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"Depend did not leave correct number of files\",0,getResultFiles().size())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "buildRule.executeTarget(\"src3setup\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(\"Result did not contain C.class\",files.containsKey(\"C.class\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "files.put(scannedFile,scannedFile)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testInnerInner['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(\"Result did not contain B.class\",files.containsKey(\"B.class\"))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "DirectoryScanner scanner = resultFileSet.getDirectoryScanner(p)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testSmallSet['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(\"Result did not contain B.class\",files,hasKey(\"B.class\"))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Project p = buildRule.getProject()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->3 [style = bold, label=""];
6->21 [style = dashed, label="0"];
4->2 [style = bold, label=""];
7->4 [style = bold, label=""];
19->17 [style = bold, label=""];
12->13 [style = solid, label="files"];
15->16 [style = bold, label=""];
6->5 [style = bold, label=""];
12->10 [style = bold, label=""];
1->6 [style = bold, label=""];
12->11 [style = solid, label="files"];
21->20 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
1->16 [style = dashed, label="0"];
16->21 [style = bold, label=""];
11->13 [style = bold, label=""];
9->1 [style = bold, label=""];
20->19 [style = bold, label=""];
1->0 [style = solid, label="p"];
14->6 [style = bold, label=""];
17->18 [style = bold, label=""];
2->8 [style = bold, label=""];
10->11 [style = bold, label=""];
6->12 [style = bold, label=""];
}
