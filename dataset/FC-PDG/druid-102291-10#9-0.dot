digraph {
46 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(1,1000L,2,1000L),ImmutableSet.of()))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(npe.getCause() == null)@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "KafkaDataSourceMetadata kafkaDataSourceMetadata = new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,1000L,1,1000L,2,1000L),ImmutableSet.of()))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EasyMock.replay(indexerMetadataStorageCoordinator)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(captureDataSource.getValue(),DATASOURCE)@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "replayAll()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Capture<String> captureDataSource = EasyMock.newCapture()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "testResetDataSourceMetadata['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "replay(indexerMetadataStorageCoordinator)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER),ImmutableSet.of()))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "supervisor.runInternal()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "supervisor.resetInternal(resetMetadata)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "verifyAll()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(DATASOURCE,captureDataSource.getValue())@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(captureDataSourceMetadata.getValue(),expectedMetadata)@@@31@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(kafkaDataSourceMetadata)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(kinesisDataSourceMetadata)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "KafkaDataSourceMetadata expectedMetadata = new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,1000L),ImmutableSet.of()))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(capture(captureDataSource),capture(captureDataSourceMetadata))).andReturn(true)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testResetDataSourceMetadata['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testResetDataSourceMetadata['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "verifyAll()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "expect(supervisorRecordSupplier.getPartitionIds(anyObject())).andReturn(Collections.emptySet()).anyTimes()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(EasyMock.capture(captureDataSource),EasyMock.capture(captureDataSourceMetadata))).andReturn(true)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "Assert.assertNull(npe.getCause())@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "supervisor.start()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER),ImmutableSet.of()))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(kafkaDataSourceMetadata)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(expectedMetadata,captureDataSourceMetadata.getValue())@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "EasyMock.reset(indexerMetadataStorageCoordinator)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(EasyMock.capture(captureDataSource),EasyMock.capture(captureDataSourceMetadata))).andReturn(true)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "EasyMock.replay(indexerMetadataStorageCoordinator)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "NullPointerException npe@@@26@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "supervisor = getTestableSupervisor(1,1,true,\"PT1H\",null,null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER),ImmutableSet.of()))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19->14 [style = solid, label="expectedMetadata"];
16->27 [style = dashed, label="0"];
17->50 [style = dashed, label="0"];
25->48 [style = dashed, label="0"];
39->6 [style = bold, label=""];
15->9 [style = dotted, label="true"];
20->27 [style = bold, label=""];
24->27 [style = solid, label="kafkaDataSourceMetadata"];
21->30 [style = dashed, label="0"];
13->46 [style = dashed, label="0"];
20->16 [style = bold, label=""];
22->0 [style = bold, label=""];
5->35 [style = dashed, label="0"];
26->35 [style = bold, label=""];
40->22 [style = bold, label=""];
41->45 [style = bold, label=""];
23->12 [style = bold, label=""];
37->33 [style = bold, label=""];
12->22 [style = bold, label=""];
0->3 [style = bold, label=""];
24->41 [style = dashed, label="0"];
19->29 [style = solid, label="expectedMetadata"];
15->34 [style = bold, label=""];
15->34 [style = dotted, label="true"];
8->18 [style = bold, label=""];
19->20 [style = bold, label=""];
18->11 [style = bold, label=""];
4->19 [style = bold, label=""];
48->50 [style = bold, label=""];
5->39 [style = dashed, label="0"];
10->21 [style = bold, label=""];
21->25 [style = bold, label=""];
46->39 [style = bold, label=""];
20->38 [style = bold, label=""];
13->26 [style = dashed, label="0"];
34->0 [style = bold, label=""];
9->34 [style = dashed, label="0"];
45->22 [style = solid, label="resetMetadata"];
7->24 [style = bold, label=""];
5->6 [style = bold, label=""];
15->9 [style = bold, label=""];
13->5 [style = bold, label=""];
38->47 [style = bold, label=""];
49->14 [style = solid, label="expectedMetadata"];
4->22 [style = solid, label="resetMetadata"];
14->29 [style = dashed, label="0"];
32->31 [style = bold, label=""];
28->29 [style = bold, label=""];
44->42 [style = bold, label=""];
12->33 [style = dashed, label="0"];
3->28 [style = dashed, label="0"];
10->43 [style = bold, label=""];
47->40 [style = bold, label=""];
30->32 [style = bold, label=""];
16->23 [style = bold, label=""];
2->10 [style = bold, label=""];
25->17 [style = bold, label=""];
1->7 [style = bold, label=""];
23->37 [style = dashed, label="0"];
4->45 [style = dashed, label="0"];
31->26 [style = bold, label=""];
27->37 [style = bold, label=""];
41->38 [style = solid, label="kinesisDataSourceMetadata"];
17->13 [style = bold, label=""];
7->41 [style = bold, label=""];
10->30 [style = bold, label=""];
49->20 [style = bold, label=""];
33->22 [style = bold, label=""];
36->10 [style = bold, label=""];
21->43 [style = dashed, label="0"];
16->38 [style = dashed, label="0"];
25->32 [style = dashed, label="0"];
9->0 [style = bold, label=""];
35->6 [style = bold, label=""];
11->1 [style = bold, label=""];
50->46 [style = bold, label=""];
45->49 [style = bold, label=""];
3->14 [style = bold, label=""];
43->48 [style = bold, label=""];
17->31 [style = dashed, label="0"];
19->49 [style = dashed, label="0"];
24->4 [style = bold, label=""];
23->47 [style = dashed, label="0"];
12->40 [style = dashed, label="0"];
42->10 [style = bold, label=""];
6->8 [style = bold, label=""];
24->16 [style = solid, label="kafkaDataSourceMetadata"];
0->28 [style = bold, label=""];
}
