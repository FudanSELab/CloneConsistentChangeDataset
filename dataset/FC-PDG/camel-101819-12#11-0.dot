digraph {
22 [style = filled, label = "git.commit().setMessage(\"Test test Commit\").call()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"Test test Commit\",ex1.getOut().getBody().getShortMessage())@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "commitConsumerTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "count == 0@@@29@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Status status = git.status().call()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(count,1)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "logs = git.log().call()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "git.close()@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Exchange ex2 = mockResultCommit.getExchanges().get(1)@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"Test test Commit\",ex1.getOut().getBody().getShortMessage())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "status = git.status().call()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "validateGitLogs(git,\"Test test Commit\",commitMessage)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(commitMessage,ex2.getOut().getBody().getShortMessage())@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Iterable<RevCommit> logs = git.log().call()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "fileToAdd1.createNewFile()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(rev.getShortMessage(),commitMessage)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertEquals(rev.getShortMessage(),commitMessageBranch)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(gitDir.exists(),true)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(commitMessage,ex2.getOut().getBody().getShortMessage())@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "git.add().addFilepattern(filenameToAdd).call()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "mockResultCommit.assertIsSatisfied()@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "git.close()@@@38@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "mockResultCommit.expectedMessageCount(2)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertEquals(rev.getShortMessage(),commitMessage)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(status.getAdded().contains(filenameToAdd))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "commitBranchTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Iterable<RevCommit> logs = git.log().call()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "File fileToAdd = new File(gitLocalRepo,filenameToAdd)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "git.add().addFilepattern(filenameBranchToAdd).call()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "git.commit().setMessage(commitMessage).call()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "template.send(\"direct:commit-branch\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,commitMessageBranch)}})@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "count++@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "count = 0@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "int count = 0@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "count++@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "count == 1@@@32@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "commitConsumerTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "git.close()@@@31@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(status.getAdded().contains(filenameBranchToAdd))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(count,2)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(count,2)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "fileToAdd.createNewFile()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Exchange ex1 = mockResultCommit.getExchanges().get(0)@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "File gitDir = new File(gitLocalRepo,\".git\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "File fileToAdd1 = new File(gitLocalRepo,filenameBranchToAdd)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Exchange ex2 = mockResultCommit.getExchanges().get(1)@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "Git git = getGitTestRepository()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->17 [style = bold, label=""];
8->16 [style = bold, label=""];
16->18 [style = bold, label=""];
22->15 [style = bold, label=""];
1->8 [style = bold, label=""];
40->48 [style = bold, label=""];
27->12 [style = bold, label=""];
29->30 [style = bold, label=""];
0->6 [style = bold, label=""];
26->5 [style = bold, label=""];
15->25 [style = bold, label=""];
42->25 [style = bold, label=""];
25->20 [style = solid, label="count"];
37->45 [style = solid, label="count"];
28->31 [style = bold, label=""];
4->13 [style = bold, label=""];
18->26 [style = bold, label=""];
30->27 [style = bold, label=""];
42->20 [style = bold, label=""];
46->10 [style = bold, label=""];
43->36 [style = bold, label=""];
35->39 [style = bold, label=""];
32->14 [style = bold, label=""];
19->10 [style = bold, label=""];
14->19 [style = bold, label=""];
37->44 [style = solid, label="count"];
40->48 [style = dotted, label="true"];
47->37 [style = bold, label=""];
48->44 [style = bold, label=""];
38->41 [style = bold, label=""];
23->0 [style = bold, label=""];
3->4 [style = bold, label=""];
13->1 [style = bold, label=""];
33->29 [style = bold, label=""];
5->21 [style = bold, label=""];
25->20 [style = bold, label=""];
10->28 [style = solid, label="git"];
15->28 [style = bold, label=""];
11->3 [style = bold, label=""];
20->24 [style = solid, label="count"];
7->2 [style = bold, label=""];
39->40 [style = bold, label=""];
31->33 [style = bold, label=""];
44->47 [style = dotted, label="true"];
9->14 [style = bold, label=""];
18->25 [style = bold, label=""];
39->40 [style = solid, label="count"];
25->42 [style = bold, label=""];
21->7 [style = bold, label=""];
20->43 [style = bold, label=""];
41->46 [style = bold, label=""];
37->45 [style = bold, label=""];
12->23 [style = bold, label=""];
44->37 [style = bold, label=""];
18->42 [style = solid, label="count"];
25->28 [style = dashed, label="0"];
36->35 [style = bold, label=""];
2->22 [style = bold, label=""];
20->24 [style = bold, label=""];
42->20 [style = solid, label="count"];
44->47 [style = bold, label=""];
37->40 [style = solid, label="count"];
24->27 [style = bold, label=""];
45->34 [style = bold, label=""];
37->40 [style = bold, label=""];
40->44 [style = bold, label=""];
39->37 [style = solid, label="count"];
39->44 [style = solid, label="count"];
10->11 [style = bold, label=""];
}
