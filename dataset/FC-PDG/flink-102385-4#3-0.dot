digraph {
4 [style = filled, label = "testNodePortService['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectedIps = externalAddresses.stream().map(null).collect(Collectors.toList())@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(resultEndpoint.get().getAddress(),isIn(expectedIps))@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "final Optional<Endpoint> resultEndpoint = localClient.getRestEndpoint(CLUSTER_ID)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertThat(resultEndpoint.get().getPort(),is(REST_PORT))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final Optional<Endpoint> resultEndpoint = flinkKubeClient.getRestEndpoint(CLUSTER_ID)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "mockExpectedServiceFromServerSide(buildExternalServiceWithNodePort())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "mockExpectedNodesFromServerSide(addresses)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "addresses.addAll(externalAddresses)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "final List<String> externalAddresses = Arrays.asList(\"ExternalIP:7.7.7.7\",\"ExternalIP:8.8.8.8\",\"ExternalIP:9.9.9.9\")@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(resultEndpoint.get().getPort(),is(NODE_PORT))@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "addressType@@@15@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "final List<String> expectedIps@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final List<String> addresses = new ArrayList<>()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertThat(resultEndpoint.get().getAddress(),is(hostName))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(resultEndpoint.isPresent(),is(true))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(resultEndpoint.isPresent(),is(true))@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "expectedIps = internalAddresses.stream().map(null).collect(Collectors.toList())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testNodePortService['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "final Optional<Endpoint> resultEndpoint = flinkKubeClient.getRestEndpoint(CLUSTER_ID)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final List<String> internalAddresses = Arrays.asList(\"InternalIP:10.0.0.1\",\"InternalIP:10.0.0.2\",\"InternalIP:10.0.0.3\")@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "KubernetesConfigOptions.NodePortAddressType addressType@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "addresses.addAll(internalAddresses)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "final String hostName = \"test-host-name\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "throw new IllegalArgumentException(String.format(\"Unexpected address type %s.\",addressType))@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "flinkConfig.set(KubernetesConfigOptions.REST_SERVICE_EXPOSED_NODE_PORT_ADDRESS_TYPE,addressType)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "testServiceLoadBalancerWithNoIP['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "mockExpectedServiceFromServerSide(buildExternalServiceWithNodePort())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "mockExpectedServiceFromServerSide(buildExternalServiceWithLoadBalancer(hostName,\"\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->16 [style = bold, label=""];
12->7 [style = bold, label=""];
8->11 [style = dotted, label="true"];
20->10 [style = bold, label=""];
2->25 [style = dashed, label="0"];
11->16 [style = solid, label="addressType"];
20->18 [style = dotted, label="true"];
20->18 [style = bold, label=""];
10->13 [style = solid, label="expectedIps"];
25->26 [style = bold, label=""];
19->13 [style = solid, label="expectedIps"];
27->0 [style = bold, label=""];
18->13 [style = bold, label=""];
14->5 [style = solid, label="internalAddresses"];
15->17 [style = solid, label="externalAddresses"];
7->21 [style = bold, label=""];
2->25 [style = bold, label=""];
15->6 [style = bold, label=""];
19->13 [style = bold, label=""];
4->1 [style = bold, label=""];
20->19 [style = bold, label=""];
6->23 [style = solid, label="addresses"];
5->17 [style = bold, label=""];
28->27 [style = bold, label=""];
20->10 [style = dotted, label="true"];
1->3 [style = bold, label=""];
21->20 [style = bold, label=""];
10->13 [style = bold, label=""];
23->12 [style = bold, label=""];
28->27 [style = solid, label="hostName"];
3->0 [style = bold, label=""];
16->14 [style = bold, label=""];
6->5 [style = bold, label=""];
17->22 [style = bold, label=""];
11->20 [style = solid, label="addressType"];
13->9 [style = bold, label=""];
22->23 [style = bold, label=""];
0->2 [style = bold, label=""];
11->18 [style = solid, label="addressType"];
24->28 [style = bold, label=""];
28->25 [style = solid, label="hostName"];
20->19 [style = dotted, label="true"];
14->15 [style = bold, label=""];
21->13 [style = solid, label="expectedIps"];
}
