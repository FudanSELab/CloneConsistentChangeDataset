digraph {
2 [style = filled, label = "assertContains(\"hello world\",contents)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertContains(\"found WhiteSpace\",contents)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(contents,containsString(\"World here\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "buildRule.executeTarget(\"hasregex\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertContains(\"moon Sun Sun\",contents)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "buildRule.executeTarget(\"replaceregex\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(contents,not(containsString(\"this is the moon\")))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "buildRule.executeTarget(\"containsregex\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertNotContains(\"this is the moon\",contents)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testContainsRegex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertContains(\"dog Cat dog\",contents)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(contents,containsString(\"hello world\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertContains(\"Found digits (1234(\",contents)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testReplaceRegex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertContains(\"World here\",contents)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assumeTrue(\"Regex not present\",getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertContains(\"world world world world\",contents)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testContainsRegex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertNotContains(\"This is a line with digits\",contents)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
6->3 [style = bold, label=""];
16->19 [style = solid, label="contents"];
16->13 [style = bold, label=""];
5->12 [style = dashed, label="0"];
4->16 [style = dashed, label="0"];
9->0 [style = bold, label=""];
4->11 [style = solid, label="contents"];
0->6 [style = bold, label=""];
16->20 [style = solid, label="contents"];
7->17 [style = dashed, label="0"];
19->20 [style = bold, label=""];
4->7 [style = solid, label="contents"];
16->12 [style = solid, label="contents"];
7->11 [style = dashed, label="0"];
20->14 [style = bold, label=""];
4->2 [style = bold, label=""];
1->0 [style = bold, label=""];
15->16 [style = bold, label=""];
3->4 [style = bold, label=""];
6->15 [style = bold, label=""];
2->10 [style = dashed, label="0"];
13->17 [style = bold, label=""];
7->5 [style = bold, label=""];
17->12 [style = bold, label=""];
4->10 [style = solid, label="contents"];
16->17 [style = solid, label="contents"];
2->13 [style = dashed, label="0"];
16->14 [style = solid, label="contents"];
4->5 [style = solid, label="contents"];
5->8 [style = dashed, label="0"];
3->15 [style = dashed, label="0"];
11->8 [style = bold, label=""];
4->8 [style = solid, label="contents"];
2->7 [style = bold, label=""];
16->13 [style = solid, label="contents"];
12->19 [style = bold, label=""];
4->2 [style = solid, label="contents"];
18->0 [style = bold, label=""];
10->11 [style = bold, label=""];
}
