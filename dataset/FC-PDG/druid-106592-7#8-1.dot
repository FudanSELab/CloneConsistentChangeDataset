digraph {
9 [style = filled, label = "final CacheStrategy<ResultRow,Object,GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(null).getCacheStrategy(query2)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertFalse(Arrays.equals(strategy1.computeResultLevelCacheKey(query1),strategy2.computeResultLevelCacheKey(query2)))@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final GroupByQuery query1 = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).setPostAggregatorSpecs(ImmutableList.of(new ExpressionPostAggregator(\"post\",\"alias + 'x'\",null,TestExprMacroTable.INSTANCE))).setGranularity(QueryRunnerTestHelper.DAY_GRAN).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"post\",OrderByColumnSpec.Direction.DESCENDING)),Integer.MAX_VALUE)).setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.UNIQUE_METRIC,8)).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testResultLevelCacheKeyWithPostAggregate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final CacheStrategy<ResultRow,Object,GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(null,QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()).getCacheStrategy(query1)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final GroupByQuery query1 = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).setPostAggregatorSpecs(ImmutableList.of(new ExpressionPostAggregator(\"post\",\"alias + 'x'\",null,TestExprMacroTable.INSTANCE))).setGranularity(QueryRunnerTestHelper.DAY_GRAN).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final CacheStrategy<ResultRow,Object,GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(null).getCacheStrategy(query1)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testResultLevelCacheKeyWithPostAggregate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final GroupByQuery query2 = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).setPostAggregatorSpecs(ImmutableList.of(new ExpressionPostAggregator(\"post\",\"alias - 'x'\",null,TestExprMacroTable.INSTANCE))).setGranularity(QueryRunnerTestHelper.DAY_GRAN).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final CacheStrategy<ResultRow,Object,GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(null,QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()).getCacheStrategy(query2)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1),strategy2.computeCacheKey(query2)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testResultLevelCacheKeyWithHavingSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final GroupByQuery query2 = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).setPostAggregatorSpecs(ImmutableList.of(new ExpressionPostAggregator(\"post\",\"alias + 'x'\",null,TestExprMacroTable.INSTANCE))).setGranularity(QueryRunnerTestHelper.DAY_GRAN).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"post\",OrderByColumnSpec.Direction.DESCENDING)),Integer.MAX_VALUE)).setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.UNIQUE_METRIC,10)).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->0 [style = solid, label="query1"];
4->1 [style = solid, label="query1"];
2->6 [style = solid, label="query2"];
12->5 [style = solid, label="query2"];
4->6 [style = solid, label="query1"];
5->9 [style = dashed, label="0"];
2->9 [style = solid, label="query2"];
4->2 [style = bold, label=""];
7->4 [style = bold, label=""];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
9->6 [style = bold, label=""];
10->6 [style = solid, label="query1"];
6->1 [style = bold, label=""];
2->12 [style = dashed, label="0"];
2->0 [style = bold, label=""];
2->5 [style = solid, label="query2"];
5->6 [style = bold, label=""];
10->12 [style = bold, label=""];
11->10 [style = bold, label=""];
12->6 [style = solid, label="query2"];
8->9 [style = bold, label=""];
10->1 [style = solid, label="query1"];
0->8 [style = dashed, label="0"];
2->1 [style = solid, label="query2"];
4->8 [style = solid, label="query1"];
4->10 [style = dashed, label="0"];
12->1 [style = solid, label="query2"];
2->8 [style = bold, label=""];
4->0 [style = solid, label="query1"];
0->5 [style = bold, label=""];
}
