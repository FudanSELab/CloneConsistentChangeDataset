digraph {
6 [style = filled, label = "assertThat(doc.rootDoc().get(\"type.inner.inner_field\"),equalTo(\"inner_value\"))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testTypeLevel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testNoLevelWithFieldTypeAsObject['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ParsedDocument doc = defaultMapper.parse(SourceToParse.source(\"test\",\"type\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject(\"type\").field(\"type_field\",\"type_value\").endObject().field(\"test1\",\"value1\").field(\"test2\",\"value2\").startObject(\"inner\").field(\"inner_field\",\"inner_value\").endObject().endObject()),XContentType.JSON))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(doc.rootDoc().get(\"type.test1\"),equalTo(\"value1\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(doc.rootDoc().get(\"type.type_field\"),equalTo(\"type_value\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ParsedDocument doc = defaultMapper.parse(SourceToParse.source(\"test\",\"type\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject(\"type\").field(\"test1\",\"value1\").field(\"test2\",\"value2\").startObject(\"inner\").field(\"inner_field\",\"inner_value\").endObject().endObject().endObject()),XContentType.JSON))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\",\"type\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject(\"type\").field(\"test1\",\"value1\").field(\"test2\",\"value2\").startObject(\"inner\").field(\"inner_field\",\"inner_value\").endObject().endObject().endObject()),XContentType.JSON))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(doc.rootDoc().get(\"test1\"),equalTo(\"value1\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testTypeLevel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "String defaultMapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").endObject().endObject())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\",new CompressedXContent(defaultMapping))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(doc.rootDoc().get(\"type.test2\"),equalTo(\"value2\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(doc.rootDoc().get(\"test2\"),equalTo(\"value2\"))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5->13 [style = dashed, label="0"];
4->12 [style = bold, label=""];
8->1 [style = bold, label=""];
12->13 [style = bold, label=""];
5->2 [style = bold, label=""];
1->4 [style = bold, label=""];
7->5 [style = bold, label=""];
13->9 [style = bold, label=""];
9->11 [style = bold, label=""];
0->12 [style = dashed, label="0"];
3->1 [style = bold, label=""];
10->1 [style = bold, label=""];
0->7 [style = dashed, label="0"];
2->9 [style = dashed, label="0"];
1->4 [style = solid, label="defaultMapping"];
2->6 [style = bold, label=""];
4->7 [style = bold, label=""];
4->0 [style = bold, label=""];
0->5 [style = bold, label=""];
6->11 [style = dashed, label="0"];
}
