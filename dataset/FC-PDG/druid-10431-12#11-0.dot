digraph {
15 [style = filled, label = "testBroadcastToMultipleDataSources['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(6L,stats.getGlobalStat(LoadRule.ASSIGNED_COUNT))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(5L,stats.getGlobalStat(LoadRule.ASSIGNED_COUNT))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(ImmutableList.of(\"large_source\",\"large_source2\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertFalse(stats.hasPerTierStats())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testBroadcastToAllServers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(holdersOfLargeSegments.stream().allMatch(null))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testBroadcastToAllServers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertTrue(druidCluster.getAllServers().stream().allMatch(null))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertTrue(holdersOfLargeSegments2.stream().allMatch(null))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertTrue(druidCluster.getAllServers().stream().allMatch(null))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(5L,stats.getGlobalStat(LoadRule.ASSIGNED_COUNT))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "CoordinatorStats stats = rule.run(null,makeCoordinartorRuntimeParams(druidCluster,smallSegment,largeSegments.get(0),largeSegments.get(1),largeSegments.get(2),largeSegments2.get(0),largeSegments2.get(1)),smallSegment)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
4->3 [style = bold, label=""];
15->13 [style = bold, label=""];
9->2 [style = bold, label=""];
0->2 [style = bold, label=""];
8->3 [style = bold, label=""];
3->6 [style = bold, label=""];
11->12 [style = bold, label=""];
1->0 [style = bold, label=""];
2->4 [style = bold, label=""];
7->9 [style = bold, label=""];
3->10 [style = bold, label=""];
3->5 [style = bold, label=""];
5->6 [style = dashed, label="0"];
5->10 [style = dashed, label="0"];
0->13 [style = dashed, label="0"];
2->14 [style = bold, label=""];
4->8 [style = dashed, label="0"];
4->14 [style = dashed, label="0"];
0->9 [style = dashed, label="0"];
2->8 [style = bold, label=""];
13->2 [style = bold, label=""];
10->11 [style = bold, label=""];
}
