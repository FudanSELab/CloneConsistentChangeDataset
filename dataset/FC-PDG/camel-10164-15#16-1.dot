digraph {
6 [style = filled, label = "assertEquals(\"textQualifier\",found.getName())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(16,options.size())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(\"\\\",found.getDefaultValue())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "DataFormatModel model = JsonMapper.generateDataFormatModel(json)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"flatpack\",model.getName())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertNotNull(json)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testUniVocityTsvEscapeChar['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"attribute\",found.getKind())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "CamelContext context = new DefaultCamelContext()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Map<String,DataFormatOptionModel> options = model.getOptions().stream().collect(Collectors.toMap(null,null))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String json = context.adapt().getEipParameterJsonSchema(\"flatpack\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "String json = context.adapt().getEipParameterJsonSchema(\"univocity-tsv\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"java.lang.String\",found.getJavaType())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(10,options.size())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(false,found.isDeprecated())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"escapeChar\",found.getName())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"If the text is qualified with a character. Uses quote character by default.\",found.getDescription())@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(false,found.isRequired())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertNotNull(found)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"string\",found.getType())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "BaseOptionModel found = options.get(\"escapeChar\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Map<String,DataFormatOptionModel> options = model.getOptions().stream().collect(Collectors.toMap(null,null))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testFlatpackDefaultValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(false,found.isSecret())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"The escape character.\",found.getDescription())@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "BaseOptionModel found = options.get(\"textQualifier\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testFlatpackDefaultValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "assertEquals(\"univocity-tsv\",model.getName())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->4 [style = solid, label="json"];
13->25 [style = bold, label=""];
6->3 [style = bold, label=""];
9->20 [style = dashed, label="0"];
2->19 [style = bold, label=""];
26->11 [style = solid, label="json"];
0->12 [style = bold, label=""];
3->14 [style = bold, label=""];
25->3 [style = bold, label=""];
9->17 [style = bold, label=""];
7->20 [style = bold, label=""];
1->26 [style = bold, label=""];
11->24 [style = bold, label=""];
26->4 [style = bold, label=""];
10->11 [style = solid, label="json"];
11->2 [style = bold, label=""];
7->9 [style = bold, label=""];
26->4 [style = solid, label="json"];
10->26 [style = dashed, label="0"];
23->13 [style = solid, label="found"];
20->23 [style = bold, label=""];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
16->1 [style = bold, label=""];
19->9 [style = bold, label=""];
18->10 [style = bold, label=""];
23->13 [style = bold, label=""];
22->27 [style = bold, label=""];
7->19 [style = dashed, label="0"];
6->25 [style = dashed, label="0"];
0->22 [style = bold, label=""];
21->1 [style = bold, label=""];
10->4 [style = bold, label=""];
14->15 [style = bold, label=""];
17->13 [style = bold, label=""];
17->13 [style = solid, label="found"];
17->23 [style = dashed, label="0"];
2->7 [style = bold, label=""];
13->6 [style = bold, label=""];
2->24 [style = dashed, label="0"];
4->11 [style = bold, label=""];
24->7 [style = bold, label=""];
1->10 [style = bold, label=""];
15->8 [style = bold, label=""];
}
