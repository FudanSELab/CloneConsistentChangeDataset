digraph {
17 [style = filled, label = "assertThat(regions).hasSize(2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(regions.stream().map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "element = find(regions,\"customers3\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertThat(element.getGroup()).isNull()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Region element = find(regions,\"customers\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Region region = find(regions,\"customers2\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "listAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "element = find(regions,\"customers1\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(region.getGroup()).isIn(\"group1\",\"group2\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(element.getGroups()).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertThat(regions.stream().filter(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(regions).hasSize(6)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThat(element.getGroup()).isEqualTo(\"group1\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(regions.stream().filter(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(RegionType.PARTITION,RegionType.PARTITION_PROXY)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(regions.stream().filter(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertThat(region.getType()).isIn(RegionType.PARTITION,RegionType.PARTITION_PROXY)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "List<Region> regions = client.list(filter).getConfigResult()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(regions.stream().map(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(RegionType.PARTITION,RegionType.PARTITION_PROXY)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "listRegionByName2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "listAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "filter.setName(\"customers2\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "List<Region> regions = client.list(filter).getConfigResult()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
6->17 [style = bold, label=""];
1->14 [style = dashed, label="0"];
19->20 [style = bold, label=""];
0->12 [style = bold, label=""];
9->4 [style = bold, label=""];
10->12 [style = dashed, label="0"];
3->6 [style = bold, label=""];
3->10 [style = solid, label="regions"];
6->17 [style = dashed, label="0"];
3->15 [style = bold, label=""];
20->6 [style = bold, label=""];
3->5 [style = solid, label="regions"];
4->21 [style = dashed, label="0"];
7->3 [style = bold, label=""];
8->0 [style = bold, label=""];
3->8 [style = solid, label="regions"];
0->10 [style = bold, label=""];
3->9 [style = solid, label="regions"];
13->3 [style = bold, label=""];
6->15 [style = dashed, label="0"];
15->9 [style = bold, label=""];
2->16 [style = dashed, label="0"];
12->14 [style = bold, label=""];
4->8 [style = bold, label=""];
1->2 [style = bold, label=""];
5->11 [style = bold, label=""];
18->21 [style = bold, label=""];
6->9 [style = bold, label=""];
10->1 [style = bold, label=""];
17->18 [style = bold, label=""];
2->5 [style = bold, label=""];
}
