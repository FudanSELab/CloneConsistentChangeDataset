digraph {
6 [style = filled, label = "assertEquals(4,explain.length)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "tableEnv.executeSql(\"create table src (a string)\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "String logicalPlan = explain(2(@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveCatalog,\"default\",\"src\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1ae2e09).commit(\"p1=2014, p2='2014'\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "batchTableEnv.executeSql(\"create table src(x int,y string) partitioned by (p1 bigint, p2 string)\")@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "Object(( rowStrings = rows.stream().map(null).sorted().toArray()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "{tableEnv.executeSql(\"drop table src\")}@@@27@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "{batchTableEnv.executeSql(\"drop table src\")}@@@26@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "Table table = tableEnv.sqlQuery(\"select * from hive.`default`.src limit 1\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "tableEnv.executeSql(\"create table src(x int,y string) partitioned by (p1 bigint, p2 string)\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1ae2dd0,rowStrings)@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TableEnvironment tableEnv = createTableEnv()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveCatalog,\"default\",\"src\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1ae2df2).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1ae2df8).commit(\"p1=2013, p2='2013'\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "String(( explain = table.explain().split(\"==.*==\")@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "hiveShell.execute(\"analyze table src COMPUTE STATISTICS\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(4,explain.length)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Table table = batchTableEnv.sqlQuery(\"select p1, count(y) from hive.`default`.src group by p1\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "{tableEnv.executeSql(\"drop table src\")}@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testProjectionPushDown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Object(( rowStrings = rows.stream().map(null).sorted().toArray()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1ae2ef0,rowStrings)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "String logicalPlan = explain(2(@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "String(( explain = table.explain().split(\"==.*==\")@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,\"default\",\"src\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1ae2e8b).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1ae2e90).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1ae2e95).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1ae2e9a).commit()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testProjectionPushDown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "List<Row> rows = CollectionUtil.iteratorToList(table.execute().collect())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(2,rows.size())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,\"default\",\"src\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1ae2d78).commit(\"p1=2014, p2='2014'\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertTrue(logicalPlan,logicalPlan.contains(\"table=((hive, default, src, limit=(1(((\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(1,rows.size())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Table table = tableEnv.sqlQuery(\"select p1, count(y) from hive.`default`.src group by p1\")@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "testLimitPushDown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10->9 [style = solid, label="rowStrings"];
19->18 [style = bold, label=""];
20->17 [style = bold, label=""];
3->25 [style = dashed, label="0"];
15->7 [style = bold, label=""];
21->6 [style = bold, label=""];
4->17 [style = dashed, label="0"];
7->10 [style = bold, label=""];
24->0 [style = bold, label=""];
0->5 [style = solid, label="expectedExplain"];
1->19 [style = dashed, label="0"];
0->2 [style = solid, label="explain"];
29->28 [style = solid, label="rowStrings"];
25->4 [style = bold, label=""];
28->26 [style = bold, label=""];
0->2 [style = solid, label="logicalPlan"];
12->6 [style = bold, label=""];
3->4 [style = bold, label=""];
13->11 [style = bold, label=""];
17->19 [style = bold, label=""];
29->28 [style = bold, label=""];
8->0 [style = bold, label=""];
2->30 [style = solid, label="logicalPlan"];
5->2 [style = solid, label="expectedExplain"];
7->10 [style = solid, label="rowStrings"];
5->2 [style = bold, label=""];
23->24 [style = bold, label=""];
6->0 [style = solid, label="explain"];
10->16 [style = bold, label=""];
22->20 [style = bold, label=""];
10->29 [style = bold, label=""];
11->3 [style = bold, label=""];
27->11 [style = bold, label=""];
30->31 [style = bold, label=""];
31->10 [style = bold, label=""];
5->30 [style = dashed, label="0"];
2->15 [style = bold, label=""];
6->8 [style = bold, label=""];
9->14 [style = bold, label=""];
1->12 [style = bold, label=""];
12->18 [style = dashed, label="0"];
7->10 [style = dashed, label="0"];
4->1 [style = bold, label=""];
10->9 [style = bold, label=""];
18->21 [style = bold, label=""];
2->30 [style = bold, label=""];
4->23 [style = bold, label=""];
11->25 [style = bold, label=""];
0->5 [style = bold, label=""];
8->5 [style = solid, label="logicalPlan"];
21->8 [style = solid, label="explain"];
}
