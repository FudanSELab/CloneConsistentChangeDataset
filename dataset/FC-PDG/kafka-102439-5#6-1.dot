digraph {
20 [style = filled, label = "expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "consumer.unsubscribe()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Task task1 = mock()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final Set<TaskId> corruptedTasks = singleton(taskId1)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expect(task1.id()).andReturn(taskId1).anyTimes()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "expect(task2.state()).andStubReturn(Task.State.RUNNING)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final ConsumerGroupMetadata consumerGroupMetadata = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "final AtomicBoolean exceptionHandlerInvoked = new AtomicBoolean(false)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expect(task1.state()).andReturn(Task.State.RUNNING).anyTimes()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "expect(task2.id()).andStubReturn(taskId2)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final TopologyMetadata topologyMetadata = new TopologyMetadata(internalTopologyBuilder,config)@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "expect(task1.id()).andStubReturn(taskId1)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertThat(exceptionHandlerInvoked.get(),is(true))@@@38@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final TaskId taskId1 = new TaskId(0,0)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final Consumer<byte((,byte((> consumer = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "taskManager.handleCorruption(corruptedTasks)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "expect(task1.state()).andStubReturn(Task.State.RUNNING)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "shouldCatchHandleCorruptionOnTaskCorruptedExceptionPath['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "verify(taskManager)@@@36@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "expect(task2.state()).andReturn(Task.State.RUNNING).anyTimes()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "thread.setStreamsUncaughtExceptionHandler(null)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "EasyMock.replay(task1,task2,taskManager,consumer)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "thread.run()@@@36@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "shouldCatchHandleCorruptionOnTaskCorruptedExceptionPath['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "consumer.subscribe((Collection<String>)anyObject(),anyObject())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "expect(task2.id()).andReturn(taskId2).anyTimes()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "shouldCatchTimeoutExceptionFromHandleCorruptionAndInvokeExceptionHandler['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "EasyMock.replay(consumerGroupMetadata)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics,CLIENT_ID,StreamsConfig.METRICS_LATEST,mockTime)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final TaskManager taskManager = EasyMock.createNiceMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final Task task2 = mock()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "expectLastCall().andThrow(new TimeoutException())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "thread.run()@@@35@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final StreamThread thread = new StreamThread(mockTime,config,null,consumer,consumer,null,null,taskManager,streamsMetrics,internalTopologyBuilder,CLIENT_ID,new LogContext(\"\"),new AtomicInteger(),new AtomicLong(Long.MAX_VALUE),null,HANDLER,null){@Override void runOnce(){setState(State.PENDING_SHUTDOWN)throw new TaskCorruptedException(corruptedTasks)}}.updateThreadMetadata(getSharedAdminClientId(CLIENT_ID))@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final StreamThread thread = new StreamThread(mockTime,config,null,consumer,consumer,null,null,taskManager,streamsMetrics,topologyMetadata,CLIENT_ID,new LogContext(\"\"),new AtomicInteger(),new AtomicLong(Long.MAX_VALUE),null,HANDLER,null){@Override void runOnce(){setState(State.PENDING_SHUTDOWN)throw new TaskCorruptedException(corruptedTasks)}}.updateThreadMetadata(getSharedAdminClientId(CLIENT_ID))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "final TaskId taskId2 = new TaskId(0,2)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "topologyMetadata.buildAndRewriteTopology()@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "verify(taskManager)@@@37@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->43 [style = dashed, label="0"];
10->22 [style = bold, label=""];
24->7 [style = solid, label="consumer"];
16->13 [style = bold, label=""];
15->10 [style = bold, label=""];
33->35 [style = bold, label=""];
1->43 [style = solid, label="taskId1"];
5->23 [style = bold, label=""];
29->30 [style = bold, label=""];
27->0 [style = bold, label=""];
38->11 [style = bold, label=""];
1->15 [style = bold, label=""];
28->31 [style = bold, label=""];
16->6 [style = bold, label=""];
37->41 [style = bold, label=""];
41->3 [style = bold, label=""];
43->36 [style = bold, label=""];
39->43 [style = bold, label=""];
26->6 [style = solid, label="consumerGroupMetadata"];
5->7 [style = solid, label="task1"];
10->11 [style = solid, label="corruptedTasks"];
34->7 [style = bold, label=""];
31->29 [style = bold, label=""];
21->38 [style = dashed, label="0"];
3->12 [style = bold, label=""];
18->2 [style = bold, label=""];
26->13 [style = solid, label="consumerGroupMetadata"];
23->7 [style = solid, label="task2"];
25->16 [style = bold, label=""];
26->4 [style = bold, label=""];
35->4 [style = bold, label=""];
0->12 [style = solid, label="taskManager"];
9->37 [style = bold, label=""];
42->0 [style = bold, label=""];
1->10 [style = solid, label="taskId1"];
0->7 [style = solid, label="taskManager"];
24->26 [style = bold, label=""];
6->5 [style = bold, label=""];
12->40 [style = bold, label=""];
26->33 [style = solid, label="consumerGroupMetadata"];
22->18 [style = bold, label=""];
17->0 [style = bold, label=""];
19->32 [style = bold, label=""];
11->34 [style = bold, label=""];
2->36 [style = dashed, label="0"];
10->39 [style = bold, label=""];
21->11 [style = bold, label=""];
19->9 [style = bold, label=""];
2->21 [style = bold, label=""];
22->39 [style = dashed, label="0"];
23->1 [style = bold, label=""];
9->3 [style = bold, label=""];
4->8 [style = bold, label=""];
0->20 [style = bold, label=""];
0->30 [style = solid, label="taskManager"];
15->38 [style = solid, label="taskId2"];
36->38 [style = bold, label=""];
20->24 [style = bold, label=""];
26->33 [style = bold, label=""];
7->19 [style = bold, label=""];
8->25 [style = bold, label=""];
13->14 [style = bold, label=""];
14->6 [style = bold, label=""];
32->28 [style = bold, label=""];
11->7 [style = bold, label=""];
}
