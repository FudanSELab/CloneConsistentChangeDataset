digraph {
18 [style = filled, label = "wrap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Arrays.fill(netBytes,(byte)0x1F)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "unwrapWithBufferUnderflow['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(unwrappedBuffer.remaining()).isEqualTo(0)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "byte(( netBytes = new byte((((@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(inputSharing.getBuffer().capacity())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "unwrapWithBufferUnderflow['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "byte(( appBytes = new byte((((@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "unwrappedBuffer.flip()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "byte(( netBytes = new byte((((@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "appData.flip()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(wrappedData.position()).isEqualTo(netBytes.length)@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "ByteBuffer wrappedBuffer = spyNioSslEngine.wrap(appData)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "verify(spyNioSslEngine,times(1)).expandWriteBuffer(any(),any(),any())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "wrappedData.put(netBytes)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(unwrappedBuffer.remaining()).isEqualTo(0)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Arrays.fill(appBytes,(byte)0x1F)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "unwrappedBuffer.flip()@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "appData.flip()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "appData.put(appBytes)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(OK,NEED_TASK,appData.remaining(),appData.remaining()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ByteBuffer unwrappedBuffer = sharedBuffer.getBuffer()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "verify(spyNioSslEngine,times(1)).handleBlockingTasks()@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24->28 [style = bold, label=""];
10->21 [style = dashed, label="0"];
7->23 [style = dashed, label="0"];
11->20 [style = dashed, label="0"];
3->1 [style = bold, label=""];
10->14 [style = bold, label=""];
12->21 [style = bold, label=""];
22->21 [style = solid, label="appData"];
4->15 [style = bold, label=""];
1->10 [style = solid, label="wrappedData"];
22->29 [style = bold, label=""];
11->12 [style = bold, label=""];
21->24 [style = bold, label=""];
9->8 [style = bold, label=""];
15->16 [style = bold, label=""];
1->9 [style = bold, label=""];
29->26 [style = solid, label="appBytes"];
1->22 [style = dashed, label="0"];
29->26 [style = bold, label=""];
6->20 [style = bold, label=""];
22->25 [style = solid, label="appData"];
29->27 [style = solid, label="appBytes"];
4->25 [style = dashed, label="0"];
26->27 [style = bold, label=""];
5->27 [style = dashed, label="0"];
12->10 [style = bold, label=""];
2->0 [style = bold, label=""];
18->22 [style = bold, label=""];
11->10 [style = solid, label="testEngine"];
9->29 [style = dashed, label="0"];
8->5 [style = bold, label=""];
0->4 [style = bold, label=""];
9->5 [style = solid, label="netBytes"];
6->11 [style = bold, label=""];
23->6 [style = bold, label=""];
7->6 [style = bold, label=""];
20->12 [style = bold, label=""];
25->19 [style = bold, label=""];
28->25 [style = bold, label=""];
5->7 [style = bold, label=""];
10->2 [style = bold, label=""];
17->13 [style = bold, label=""];
27->23 [style = bold, label=""];
2->24 [style = dashed, label="0"];
13->8 [style = bold, label=""];
8->7 [style = solid, label="netBytes"];
8->26 [style = dashed, label="0"];
9->8 [style = solid, label="netBytes"];
6->12 [style = solid, label="testEngine"];
14->4 [style = bold, label=""];
8->5 [style = solid, label="netBytes"];
}
