digraph {
23 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verify(mockChannel,times(1)).read(isA())@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ByteBuffer data = nioSslEngine.readAtLeast(mockChannel,amountToRead,wrappedBuffer)@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "readAtLeastUsingSmallAppBufferAtWriteLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SocketChannel mockChannel = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "readAtLeastUsingSmallAppBufferAtWriteLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * testSSLEngine.getNumberOfUnwraps() + preexistingBytes)@@@26@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "nioSslEngine.peerAppData = unwrappedBuffer@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * testSSLEngine.getNumberOfUnwraps() + preexistingBytes)@@@30@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final int preexistingBytes = initialUnwrappedBufferSize - 7@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertThat(nioSslEngine.peerAppData.capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final int individualRead = 60@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final int individualRead = 150@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final ByteBufferSharingImpl inputSharingImpl = (ByteBufferSharingImpl)inputSharing@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->27 [style = solid, label="initialUnwrappedBufferSize"];
28->30 [style = bold, label=""];
5->8 [style = bold, label=""];
2->13 [style = solid, label="testSSLEngine"];
5->12 [style = solid, label="unwrappedBuffer"];
28->5 [style = solid, label="preexistingBytes"];
8->12 [style = bold, label=""];
20->6 [style = bold, label=""];
6->10 [style = solid, label="testSSLEngine"];
10->17 [style = bold, label=""];
31->10 [style = solid, label="individualRead"];
28->34 [style = solid, label="preexistingBytes"];
23->24 [style = bold, label=""];
18->22 [style = bold, label=""];
14->6 [style = dashed, label="0"];
25->19 [style = bold, label=""];
4->5 [style = solid, label="initialUnwrappedBufferSize"];
4->11 [style = bold, label=""];
11->24 [style = solid, label="preexistingBytes"];
3->9 [style = solid, label="individualRead"];
13->6 [style = bold, label=""];
9->2 [style = bold, label=""];
26->34 [style = solid, label="initialFreeSpace"];
3->31 [style = dashed, label="0"];
11->1 [style = bold, label=""];
3->17 [style = solid, label="individualRead"];
0->3 [style = bold, label=""];
4->11 [style = solid, label="initialUnwrappedBufferSize"];
22->20 [style = bold, label=""];
19->23 [style = bold, label=""];
10->25 [style = bold, label=""];
16->13 [style = bold, label=""];
35->10 [style = bold, label=""];
7->26 [style = solid, label="initialUnwrappedBufferSize"];
0->31 [style = bold, label=""];
29->0 [style = bold, label=""];
33->13 [style = bold, label=""];
12->9 [style = bold, label=""];
8->18 [style = bold, label=""];
11->8 [style = solid, label="preexistingBytes"];
12->32 [style = bold, label=""];
3->20 [style = solid, label="individualRead"];
16->2 [style = dashed, label="0"];
15->0 [style = bold, label=""];
6->14 [style = bold, label=""];
32->2 [style = bold, label=""];
28->10 [style = solid, label="preexistingBytes"];
17->10 [style = dashed, label="0"];
26->34 [style = bold, label=""];
27->8 [style = solid, label="unwrappedBuffer"];
27->5 [style = bold, label=""];
5->22 [style = solid, label="unwrappedBuffer"];
28->26 [style = solid, label="preexistingBytes"];
2->33 [style = bold, label=""];
30->13 [style = solid, label="wrappedBuffer"];
0->6 [style = solid, label="amountToRead"];
7->5 [style = bold, label=""];
7->6 [style = solid, label="mockChannel"];
2->16 [style = bold, label=""];
3->24 [style = solid, label="individualRead"];
1->13 [style = solid, label="mockChannel"];
30->1 [style = bold, label=""];
32->33 [style = solid, label="testSSLEngine"];
1->7 [style = bold, label=""];
11->17 [style = solid, label="preexistingBytes"];
6->35 [style = bold, label=""];
14->10 [style = bold, label=""];
21->0 [style = bold, label=""];
31->28 [style = bold, label=""];
0->13 [style = solid, label="amountToRead"];
31->12 [style = solid, label="individualRead"];
1->6 [style = solid, label="wrappedBuffer"];
3->4 [style = bold, label=""];
10->26 [style = bold, label=""];
7->27 [style = bold, label=""];
}
