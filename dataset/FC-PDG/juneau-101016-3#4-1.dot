digraph {
9 [style = filled, label = "a03_header_Header['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertObject(x.getFirstHeader(\"Bar\").getValue()).doesNotExist()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertObject(x.getLastHeader(\"Bar\").getValue()).doesNotExist()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "a03_header_Header['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "a04_headers_List['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertString(x.getStringHeader(\"Bar\")).doesNotExist()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "BasicHttpResource x = of(\"foo\").header(null).header(header(\"Foo\",\"bar\")).header(header(\"Foo\",\"baz\")).header(header(null,\"bar\")).header(header(\"Bar\",null)).header(null)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertString(x.getFirstHeader(\"Foo\").toString()).is(\"Foo: bar\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertString(x.getLastHeader(\"Foo\").toString()).is(\"Foo: baz\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "StringResource x = stringResource(\"foo\").header(null).header(header(\"Foo\",\"bar\")).header(header(\"Foo\",\"baz\")).header(header(null,\"bar\")).header(header(\"Bar\",null)).header(null).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertString(x.getFirstHeader(\"Foo\").toString()).is(\"Foo: bar\")@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertObject(x.getHeaders()).asJson().is(\"(null,'Foo: bar','Foo: baz','null: bar','Bar: null',null(\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertString(x.getLastHeader(\"Foo\").toString()).is(\"Foo: baz\")@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "BasicHttpResource x = of(\"foo\").headers(AList.of(header(\"Foo\",\"bar\"),header(\"Foo\",\"baz\"),header(null,\"bar\"),header(\"Bar\",null),null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertObject(x.getHeaders()).asJson().is(\"('Foo: bar','Foo: baz','null: bar','Bar: null',null(\")@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertString(x.getStringHeader(\"Foo\")).is(\"baz\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
6->11 [style = dashed, label="0"];
4->8 [style = bold, label=""];
2->0 [style = bold, label=""];
7->1 [style = bold, label=""];
14->13 [style = bold, label=""];
6->13 [style = dashed, label="0"];
5->6 [style = bold, label=""];
9->11 [style = bold, label=""];
8->3 [style = dashed, label="0"];
13->2 [style = bold, label=""];
4->15 [style = bold, label=""];
11->10 [style = bold, label=""];
3->4 [style = bold, label=""];
10->12 [style = bold, label=""];
12->7 [style = bold, label=""];
8->15 [style = dashed, label="0"];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
}
