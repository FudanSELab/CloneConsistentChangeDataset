digraph {
58 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(2)))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(3)))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(3)),hostIds.get(2)))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ArrayList<Token> endpointTokens = new ArrayList<Token>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(keyTokens.get(3),hostIds.get(2)))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,7)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(endpointTokens.get(2)))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(4)),hostIds.get(2)))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(keyTokens.get(0)))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "tmd.clearUnsafe()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(keyTokens.get(1),hostIds.get(2)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(1)),hostIds.get(3)))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(keyTokens.get(1),Gossiper.computeExpireTime()))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(endpointTokens.get(2))))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(3)),hostIds.get(2)))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "ArrayList<Token> keyTokens = new ArrayList<Token>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertTrue(tmd.getEndpoint(endpointTokens.get(2)) == null)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(2)),hostIds.get(3)))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "testStateJumpToLeaving['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(0)))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(2)))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertTrue(tmd.getEndpoint(keyTokens.get(1)).equals(hosts.get(2)))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(keyTokens.get(3),hostIds.get(2)))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "List<InetAddress> hosts = new ArrayList<InetAddress>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().size() == 1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(keyTokens.get(4),hostIds.get(2)))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "StorageService ss = StorageService.instance@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testStateJumpToBootstrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "List<UUID> hostIds = new ArrayList<UUID>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "IPartitioner partitioner = new RandomPartitioner()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TokenMetadata tmd = ss.getTokenMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testStateJumpToBootstrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(keyTokens.get(1)))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@40@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,6)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(3)))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.normal(keyTokens.get(2),hostIds.get(3)))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.bootstrapping(keyTokens.get(1),hostIds.get(3)))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(2)))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
13->47 [style = bold, label=""];
28->6 [style = bold, label=""];
46->13 [style = bold, label=""];
35->55 [style = bold, label=""];
16->7 [style = bold, label=""];
30->36 [style = bold, label=""];
43->18 [style = bold, label=""];
1->13 [style = bold, label=""];
37->42 [style = dashed, label="0"];
17->38 [style = bold, label=""];
8->1 [style = bold, label=""];
8->54 [style = dashed, label="0"];
3->5 [style = bold, label=""];
48->51 [style = bold, label=""];
36->18 [style = bold, label=""];
12->44 [style = dashed, label="0"];
35->12 [style = bold, label=""];
28->6 [style = solid, label="hostIds"];
24->10 [style = bold, label=""];
57->54 [style = bold, label=""];
18->31 [style = bold, label=""];
22->25 [style = bold, label=""];
12->55 [style = dashed, label="0"];
33->16 [style = bold, label=""];
35->44 [style = bold, label=""];
11->24 [style = solid, label="partitioner"];
54->46 [style = bold, label=""];
21->57 [style = solid, label="keyTokens"];
22->41 [style = bold, label=""];
11->6 [style = solid, label="partitioner"];
10->21 [style = bold, label=""];
2->9 [style = bold, label=""];
28->57 [style = solid, label="hostIds"];
25->41 [style = dashed, label="0"];
6->57 [style = dashed, label="0"];
45->1 [style = bold, label=""];
56->58 [style = bold, label=""];
44->4 [style = bold, label=""];
25->37 [style = bold, label=""];
1->46 [style = dashed, label="0"];
31->33 [style = bold, label=""];
9->57 [style = solid, label="ss"];
0->20 [style = bold, label=""];
16->39 [style = bold, label=""];
53->56 [style = bold, label=""];
7->39 [style = dashed, label="0"];
34->29 [style = bold, label=""];
9->6 [style = solid, label="ss"];
27->14 [style = bold, label=""];
11->57 [style = solid, label="partitioner"];
49->35 [style = bold, label=""];
30->43 [style = bold, label=""];
32->57 [style = solid, label="hosts"];
40->9 [style = bold, label=""];
11->24 [style = bold, label=""];
38->19 [style = bold, label=""];
10->6 [style = solid, label="endpointTokens"];
58->48 [style = bold, label=""];
7->15 [style = bold, label=""];
28->57 [style = bold, label=""];
47->52 [style = bold, label=""];
20->11 [style = bold, label=""];
15->23 [style = bold, label=""];
39->15 [style = bold, label=""];
21->6 [style = solid, label="keyTokens"];
9->0 [style = bold, label=""];
52->53 [style = bold, label=""];
50->9 [style = bold, label=""];
32->6 [style = solid, label="hosts"];
42->17 [style = bold, label=""];
37->17 [style = bold, label=""];
4->26 [style = bold, label=""];
51->49 [style = bold, label=""];
36->43 [style = dashed, label="0"];
26->30 [style = bold, label=""];
55->4 [style = bold, label=""];
12->4 [style = bold, label=""];
19->27 [style = bold, label=""];
6->8 [style = bold, label=""];
21->32 [style = bold, label=""];
10->57 [style = solid, label="endpointTokens"];
23->34 [style = bold, label=""];
8->45 [style = dashed, label="0"];
29->22 [style = bold, label=""];
6->45 [style = bold, label=""];
13->35 [style = bold, label=""];
32->28 [style = bold, label=""];
41->42 [style = bold, label=""];
}
