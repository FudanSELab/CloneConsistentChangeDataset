digraph {
16 [style = filled, label = "String itemNames@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "boolean found = false@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "String respBody = decoder.decodeToPayload(channelHandlerContext,(ByteBuf)responses.get(inx + 1))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "String body@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertNotNull(rootObject.get(\"data\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(itemNames.length,activeChecks.size())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "String body@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertZabbixAgentDataResponse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertZabbixAgentDataResponseWithEncoded(respBody)@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Assert.assertTrue(StringUtil.isNotEmpty(rootObject.get(\"info\").getAsString()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "JsonArray activeChecks = rootObject.getAsJsonArray(\"data\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "found = true@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertZabbixActiveChecksResponse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "!found@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(curCheck.get(\"lastlogsize\").getAsInt() >= 0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertTrue(StringUtil.isNotEmpty(response.getAgentData().getInfo()))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Assert.assertTrue(curCheck.get(\"delay\").getAsInt() > 0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(\"success\",rootObject.get(\"response\").getAsString())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "JsonElement bodyRoot = new Gson().fromJson(body,)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "String itemKey = curCheck.get(\"key\").getAsString()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Objects.equals(itemKey,itemName)@@@15@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertNotNull(rootObject.get(\"info\"))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "encoder.encode(channelHandlerContext,response,null)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "JsonObject curCheck = perCheck.getAsJsonObject()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "JsonObject rootObject = bodyRoot.getAsJsonObject()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int inx@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertNotNull(body)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ZabbixResponse response = (ZabbixResponse)responses.get(inx)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "throw new AssertionError(\"Could not found \" + itemName + \" in Active Checks response\")@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertTrue(curCheck.get(\"mtime\").getAsInt() >= 0)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertZabbixAgentDataResponse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7->5 [style = solid, label="body"];
3->29 [style = dashed, label="0"];
4->3 [style = bold, label=""];
8->10 [style = bold, label=""];
1->4 [style = bold, label=""];
25->28 [style = bold, label=""];
10->11 [style = solid, label="response"];
7->18 [style = dashed, label="0"];
7->2 [style = solid, label="body"];
13->12 [style = solid, label="respBody"];
29->30 [style = bold, label=""];
10->14 [style = bold, label=""];
28->20 [style = bold, label=""];
0->2 [style = bold, label=""];
3->6 [style = bold, label=""];
18->2 [style = solid, label="body"];
30->25 [style = bold, label=""];
4->29 [style = bold, label=""];
24->27 [style = dotted, label="true"];
21->28 [style = bold, label=""];
20->22 [style = bold, label=""];
24->20 [style = bold, label=""];
5->1 [style = bold, label=""];
26->2 [style = bold, label=""];
17->28 [style = bold, label=""];
13->12 [style = bold, label=""];
9->10 [style = solid, label="inx"];
18->5 [style = solid, label="body"];
24->23 [style = dotted, label="true"];
22->24 [style = solid, label="itemKey"];
7->9 [style = dashed, label="0"];
23->19 [style = bold, label=""];
11->13 [style = bold, label=""];
24->15 [style = dotted, label="true"];
24->17 [style = bold, label=""];
27->17 [style = bold, label=""];
26->18 [style = dotted, label="true"];
24->19 [style = dotted, label="true"];
26->16 [style = dotted, label="true"];
8->9 [style = dotted, label="true"];
22->24 [style = bold, label=""];
19->15 [style = bold, label=""];
17->21 [style = dotted, label="true"];
15->27 [style = bold, label=""];
14->11 [style = bold, label=""];
27->20 [style = bold, label=""];
17->21 [style = bold, label=""];
9->13 [style = solid, label="inx"];
0->7 [style = dotted, label="true"];
2->5 [style = bold, label=""];
24->23 [style = bold, label=""];
}
