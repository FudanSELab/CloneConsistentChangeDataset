digraph {
23 [style = filled, label = "worker = new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore,executorService,noneConnectorClientConfigOverridePolicy)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EasyMock.expect(delegatingLoader.connectorLoader(.getName())).andReturn(pluginLoader)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "connProps.put(\"value.converter.extra.config\",\"bar\")@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "EasyMock.expectLastCall().andReturn()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TaskConfig taskConfig = new TaskConfig(origProps)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectTaskKeyConverters(ClassLoaderUsage.PLUGINS,taskKeyConverter)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "origProps.put(TaskConfig.TASK_CLASS_CONFIG,.getName())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,null)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Map<String,String> origProps = new HashMap<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertStatistics(worker,0,1)@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertEquals(Collections.emptySet(),worker.taskIds())@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "EasyMock.expect(plugins.newTask()).andReturn(task)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "testConverterOverrides['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "testConverterOverrides['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "PowerMock.verifyAll()@@@57@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "worker.stop()@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Map<String,String> connProps = anyConnectorConfigMap()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "worker.startTask(TASK_ID,ClusterConfigState.EMPTY,connProps,origProps,taskStatusListener,TargetState.STARTED)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "PowerMock.replayAll()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "worker.stop()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
68 [style = filled, label = "PowerMock.verifyAll()@@@47@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "expectNewWorkerTask()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertNotNull(taskKeyConverter)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expectFileConfigProvider()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "worker.start()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertStatistics(worker,0,0)@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expectLastCall()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG,.getName())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,null)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG,.getName())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(Collections.emptySet(),worker.taskIds())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "expectConverters()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertStatistics(worker,0,0)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertNotNull(taskValueConverter)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expectLastCall()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "PowerMock.expectNew(,EasyMock.eq(TASK_ID),EasyMock.eq(task),anyObject(),EasyMock.eq(TargetState.STARTED),anyObject(),anyObject(),anyObject(),EasyMock.eq(new TransformationChain<>(Collections.emptyList(),NOOP_OPERATOR)),anyObject(),anyObject(),anyObject(),anyObject(),anyObject(),anyObject(),EasyMock.eq(pluginLoader),anyObject(),anyObject(),anyObject()).andReturn(workerTask)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "workerTask.stop()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertStatistics(worker,0,0)@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Capture<HeaderConverter> headerConverter = EasyMock.newCapture()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "worker.stopAndAwaitTask(TASK_ID)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(executorService.submit(workerTask)).andReturn(null)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "PowerMock.expectNew(,EasyMock.eq(TASK_ID),EasyMock.eq(task),anyObject(),EasyMock.eq(TargetState.STARTED),EasyMock.capture(keyConverter),EasyMock.capture(valueConverter),EasyMock.capture(headerConverter),EasyMock.eq(new TransformationChain<>(Collections.emptyList(),NOOP_OPERATOR)),anyObject(),anyObject(),anyObject(),anyObject(),anyObject(),anyObject(),EasyMock.eq(pluginLoader),anyObject(),anyObject(),anyObject()).andReturn(workerTask)@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "worker.herder = herder@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expectLastCall()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "worker.startTask(TASK_ID,ClusterConfigState.EMPTY,anyConnectorConfigMap(),origProps,taskStatusListener,TargetState.STARTED)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "EasyMock.expect(workerTask.loader()).andReturn(pluginLoader)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "workerTask.initialize(taskConfig)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "assertStatistics(worker,0,1)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "testCleanupTasksOnStop['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "expectStartStorage()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.expect(task.version()).andReturn(\"1.0\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "plugins.connectorClass(.getName())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expectStopStorage()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS,taskHeaderConverter)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "connProps.put(\"key.converter.extra.config\",\"foo\")@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,null)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertNotNull(taskHeaderConverter)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Capture<TestConverter> keyConverter = EasyMock.newCapture()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertStatistics(worker,0,0)@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expectTaskValueConverters(ClassLoaderUsage.PLUGINS,taskValueConverter)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28->20 [style = bold, label=""];
31->9 [style = bold, label=""];
38->4 [style = bold, label=""];
44->7 [style = bold, label=""];
50->61 [style = dashed, label="0"];
5->28 [style = bold, label=""];
62->67 [style = bold, label=""];
44->66 [style = dashed, label="0"];
12->2 [style = bold, label=""];
46->21 [style = bold, label=""];
40->16 [style = bold, label=""];
45->6 [style = bold, label=""];
65->68 [style = bold, label=""];
24->17 [style = bold, label=""];
13->45 [style = bold, label=""];
18->32 [style = bold, label=""];
33->56 [style = bold, label=""];
7->62 [style = solid, label="origProps"];
2->52 [style = bold, label=""];
23->65 [style = solid, label="worker"];
32->11 [style = bold, label=""];
51->11 [style = bold, label=""];
55->12 [style = bold, label=""];
49->36 [style = bold, label=""];
9->51 [style = bold, label=""];
35->18 [style = bold, label=""];
66->7 [style = bold, label=""];
21->0 [style = bold, label=""];
47->48 [style = bold, label=""];
11->44 [style = bold, label=""];
30->34 [style = bold, label=""];
20->38 [style = bold, label=""];
16->19 [style = bold, label=""];
51->35 [style = bold, label=""];
36->14 [style = bold, label=""];
13->53 [style = solid, label="taskConfig"];
46->37 [style = solid, label="connProps"];
6->53 [style = bold, label=""];
27->46 [style = bold, label=""];
23->2 [style = solid, label="worker"];
43->22 [style = bold, label=""];
57->30 [style = bold, label=""];
19->62 [style = bold, label=""];
39->41 [style = bold, label=""];
14->61 [style = bold, label=""];
3->58 [style = bold, label=""];
60->56 [style = bold, label=""];
23->22 [style = solid, label="worker"];
11->59 [style = bold, label=""];
42->37 [style = bold, label=""];
37->24 [style = bold, label=""];
63->65 [style = bold, label=""];
59->7 [style = bold, label=""];
56->31 [style = bold, label=""];
4->57 [style = bold, label=""];
22->55 [style = bold, label=""];
11->66 [style = bold, label=""];
1->3 [style = bold, label=""];
29->49 [style = bold, label=""];
17->43 [style = bold, label=""];
26->54 [style = bold, label=""];
67->63 [style = bold, label=""];
34->39 [style = bold, label=""];
14->50 [style = bold, label=""];
53->1 [style = bold, label=""];
23->67 [style = solid, label="worker"];
50->15 [style = bold, label=""];
23->24 [style = solid, label="worker"];
54->23 [style = bold, label=""];
25->13 [style = bold, label=""];
41->29 [style = bold, label=""];
7->37 [style = solid, label="origProps"];
48->8 [style = bold, label=""];
15->26 [style = bold, label=""];
0->10 [style = bold, label=""];
58->47 [style = bold, label=""];
64->56 [style = bold, label=""];
7->13 [style = solid, label="origProps"];
8->5 [style = bold, label=""];
10->42 [style = bold, label=""];
23->40 [style = bold, label=""];
61->15 [style = bold, label=""];
19->27 [style = bold, label=""];
7->25 [style = bold, label=""];
23->19 [style = solid, label="worker"];
}
