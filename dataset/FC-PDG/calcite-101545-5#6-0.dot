digraph {
6 [style = filled, label = "final RelBuilder builder = relBuilder().scan(\"EMP\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final String expectedSql = \"SELECT *\" + \"FROM \"scott\".\"EMP\"\" + \"WHERE \"DEPTNO\" IN (21)\"@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testUnparseIn1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(sql,isLinux(expectedSql))@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final String expectedSql = \"SELECT *\" + \"FROM \"scott\".\"EMP\"\" + \"WHERE \"DEPTNO\" IN (20, 21)\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final RelNode root = relBuilder().scan(\"EMP\").filter(condition).build()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testUnparseIn1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final String sql = toSql(root)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testUnparseIn2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final String sql = unparseRelTree(empScan.filter(condition).build())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "final RexNode filter = builder.call(SqlStdOperatorTable.IN,builder.field(\"DEPTNO\"),builder.literal(20),builder.literal(21))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final RexNode condition = builder.call(SqlStdOperatorTable.IN,builder.field(\"DEPTNO\"),builder.literal(21))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final String sql = unparseRelTree(empScan.filter(filter).build())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(sql,isLinux(expectedSql))@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
5->9 [style = solid, label="root"];
1->3 [style = solid, label="expectedSql"];
5->9 [style = bold, label=""];
2->1 [style = bold, label=""];
12->11 [style = bold, label=""];
1->3 [style = bold, label=""];
8->6 [style = bold, label=""];
4->2 [style = bold, label=""];
11->3 [style = solid, label="expectedSql"];
3->7 [style = solid, label="expectedSql"];
6->4 [style = bold, label=""];
2->5 [style = dashed, label="0"];
2->12 [style = dashed, label="0"];
3->7 [style = bold, label=""];
11->3 [style = bold, label=""];
0->4 [style = bold, label=""];
10->12 [style = bold, label=""];
1->11 [style = dashed, label="0"];
9->3 [style = bold, label=""];
9->7 [style = solid, label="sql"];
12->3 [style = solid, label="sql"];
4->10 [style = dashed, label="0"];
4->5 [style = bold, label=""];
2->3 [style = solid, label="sql"];
}
