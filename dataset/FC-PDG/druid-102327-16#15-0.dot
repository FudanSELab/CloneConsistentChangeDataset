digraph {
3 [style = filled, label = "Assert.assertEquals(true,copy.isReportParseExceptions())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testConvert['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig)original.convertToTaskTuningConfig()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(100,copy.getMaxRecordsPerPoll())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(4,copy.getMaxPendingPersists())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig)original.convertToTaskTuningConfig()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(null,1,null,null,2,10L,new Period(\"PT3S\"),new File(\"/tmp/xxx\"),4,new IndexSpec(),new IndexSpec(),true,5L,null,null,null,null,null,null,null,null,null,null,null,null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertNotEquals(null,copy.getMaxTotalRows())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(3,copy.getMaxBytesInMemory())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertTrue(copy.getBuildV9Directly())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(5L,copy.getHandoffConditionTimeout())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(500,copy.getRecordBufferOfferTimeout())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertTrue(copy.isReportParseExceptions())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(new Period(\"PT3S\"),copy.getIntermediatePersistPeriod())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(null,1,(long)3,null,2,100L,new Period(\"PT3S\"),new File(\"/tmp/xxx\"),4,new IndexSpec(),new IndexSpec(),true,true,5L,true,false,null,null,null,null,null,null,1000,500,500,6000,2,null,null,null,null,null,null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testConvert['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(new File(\"/tmp/xxx\"),copy.getBasePersistDirectory())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(new IndexSpec(),copy.getIndexSpec())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(10L,copy.getMaxTotalRows().longValue())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(100L,(long)copy.getMaxTotalRows())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(2,copy.getMaxRowsPerSegment().intValue())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(2,(int)copy.getFetchThreads())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(null,1,null,null,2,10L,new Period(\"PT3S\"),new File(\"/tmp/xxx\"),4,new IndexSpec(),new IndexSpec(),true,true,5L,null,null,null,null,null,null,null,null,null,null,null,null)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(copy.isResetOffsetAutomatically())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(6000,copy.getFetchSequenceNumberTimeout())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(500,copy.getRecordBufferFullWait())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(1000,copy.getRecordBufferSize())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(original.getAppendableIndexSpec(),copy.getAppendableIndexSpec())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testConvert['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(5L,copy.getHandoffConditionTimeout())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE),copy.getIntermediateHandoffPeriod())@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(1,copy.getMaxRowsInMemory())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->31 [style = bold, label=""];
30->22 [style = bold, label=""];
7->17 [style = bold, label=""];
15->14 [style = bold, label=""];
7->12 [style = bold, label=""];
6->20 [style = dashed, label="0"];
3->1 [style = dashed, label="0"];
19->20 [style = bold, label=""];
27->28 [style = bold, label=""];
11->6 [style = bold, label=""];
4->13 [style = bold, label=""];
16->7 [style = bold, label=""];
1->3 [style = bold, label=""];
25->32 [style = bold, label=""];
12->17 [style = dashed, label="0"];
0->11 [style = bold, label=""];
2->9 [style = bold, label=""];
9->7 [style = bold, label=""];
1->26 [style = bold, label=""];
9->16 [style = bold, label=""];
24->30 [style = bold, label=""];
20->2 [style = bold, label=""];
6->2 [style = bold, label=""];
32->29 [style = bold, label=""];
5->1 [style = bold, label=""];
26->27 [style = bold, label=""];
12->10 [style = bold, label=""];
22->18 [style = bold, label=""];
11->19 [style = dashed, label="0"];
3->8 [style = bold, label=""];
23->19 [style = bold, label=""];
11->14 [style = dashed, label="0"];
13->5 [style = bold, label=""];
10->4 [style = bold, label=""];
28->25 [style = bold, label=""];
29->24 [style = bold, label=""];
17->21 [style = bold, label=""];
14->6 [style = bold, label=""];
21->4 [style = bold, label=""];
}
