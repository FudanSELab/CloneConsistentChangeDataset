digraph {
14 [style = filled, label = "testHarness.waitForInputProcessing()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "OneInputStreamTaskTestHarness<String,String> testHarness = new OneInputStreamTaskTestHarness<>(task,1,2,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "StreamConfig streamConfig = testHarness.getStreamConfig()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testHarness.processEvent(new CancelCheckpointMarker(2L),1,0)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Object result = testHarness.getOutput().poll()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testHarness.invoke(environment)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "OneInputStreamTask<String,String> task = new OneInputStreamTask<String,String>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "StreamMockEnvironment environment = spy(testHarness.createEnvironment())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness.processEvent(new CancelCheckpointMarker(2L),0,0)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "streamConfig.setStreamOperator(op)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "streamConfig.setStreamOperator(mapOperator)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(\"wrong type emitted\",result instanceof CancelCheckpointMarker)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testDeclineCallOnCancelBarrierOneInput['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(environment,times(1)).declineCheckpoint(eq(2L),any())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testHarness.waitForTaskCompletion()@@@20@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testDeclineCallOnCancelBarrierOneInput['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "testHarness.endInput()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "CoStreamMap<String,String,String> op = new CoStreamMap<>(new UnionCoMap())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "StreamMap<String,String> mapOperator = new StreamMap<>(new IdentityMap())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TwoInputStreamTask<String,String,String> task = new TwoInputStreamTask<String,String,String>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testHarness.waitForTaskRunning()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testDeclineCallOnCancelBarrierTwoInputs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"wrong checkpoint id\",2L,((CancelCheckpointMarker)result).getCheckpointId())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "TwoInputStreamTaskTestHarness<String,String,String> testHarness = new TwoInputStreamTaskTestHarness<>(task,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testHarness.setupOutputForSingletonOperatorChain()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertNotNull(\"nothing emitted\",result)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testHarness.processEvent(new CancelCheckpointMarker(2L),0,1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
5->3 [style = solid, label="environment"];
13->10 [style = bold, label=""];
5->3 [style = bold, label=""];
6->17 [style = bold, label=""];
25->22 [style = solid, label="op"];
6->15 [style = solid, label="result"];
25->22 [style = bold, label=""];
4->13 [style = bold, label=""];
0->11 [style = bold, label=""];
9->16 [style = solid, label="mapOperator"];
19->10 [style = bold, label=""];
8->6 [style = bold, label=""];
21->24 [style = bold, label=""];
4->21 [style = dashed, label="0"];
22->5 [style = bold, label=""];
9->16 [style = bold, label=""];
3->0 [style = bold, label=""];
20->4 [style = bold, label=""];
0->7 [style = bold, label=""];
7->14 [style = bold, label=""];
23->14 [style = bold, label=""];
26->21 [style = bold, label=""];
4->13 [style = solid, label="task"];
12->2 [style = bold, label=""];
13->19 [style = bold, label=""];
13->24 [style = dashed, label="0"];
18->4 [style = bold, label=""];
10->25 [style = bold, label=""];
7->23 [style = bold, label=""];
9->25 [style = dashed, label="0"];
17->15 [style = bold, label=""];
1->12 [style = bold, label=""];
6->17 [style = solid, label="result"];
16->5 [style = bold, label=""];
21->24 [style = solid, label="task"];
10->9 [style = bold, label=""];
14->8 [style = bold, label=""];
11->7 [style = bold, label=""];
16->22 [style = dashed, label="0"];
15->1 [style = bold, label=""];
}
