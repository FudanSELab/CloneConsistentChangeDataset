digraph {
9 [style = filled, label = "Assert.assertFalse(buf.hasCompleted())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "buf.next(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "buf.collect(values)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "timedAndSizedTruncationError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "timedAndSizedTruncationError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "buf.next(5)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "buf.collect(values)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(buf.hasError())@@@33@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<Integer> values = new ArrayList<Integer>()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "timedAndSizedTruncationError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertFalse(buf.hasCompleted())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "buf.next(4)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(Arrays.asList(2),values)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "buf.collect(values)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "buf.next(2)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(Arrays.asList(3,4),values)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<Integer>(2,2000,TimeUnit.MILLISECONDS,test,false)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "test.advanceTimeBy(1,TimeUnit.SECONDS)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "test.advanceTimeBy(2,TimeUnit.SECONDS)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "buf.next(3)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "buf.error(new TestException())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<>(2,2000,TimeUnit.MILLISECONDS,test,false)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "Assert.assertEquals(Arrays.asList(5),values)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "values.clear()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "values.clear()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(values.isEmpty())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertFalse(buf.hasError())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(1,buf.size)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "test.advanceTimeBy(1,TimeUnit.SECONDS)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "List<Integer> values = new ArrayList<>()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "values.clear()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "test.advanceTimeBy(2,TimeUnit.SECONDS)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertFalse(buf.hasError())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestScheduler test = new TestScheduler()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertFalse(buf.hasCompleted())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "buf.collect(values)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
11->28 [style = bold, label=""];
33->25 [style = solid, label="values"];
4->32 [style = bold, label=""];
16->18 [style = bold, label=""];
7->30 [style = bold, label=""];
16->8 [style = solid, label="values"];
31->9 [style = bold, label=""];
26->32 [style = dashed, label="0"];
26->29 [style = bold, label=""];
16->28 [style = solid, label="values"];
22->21 [style = bold, label=""];
4->26 [style = bold, label=""];
33->31 [style = solid, label="values"];
16->11 [style = solid, label="values"];
6->0 [style = bold, label=""];
27->22 [style = bold, label=""];
25->17 [style = bold, label=""];
10->6 [style = bold, label=""];
35->4 [style = bold, label=""];
28->14 [style = bold, label=""];
14->1 [style = bold, label=""];
33->28 [style = solid, label="values"];
33->22 [style = solid, label="values"];
32->29 [style = bold, label=""];
24->33 [style = bold, label=""];
4->32 [style = solid, label="test"];
24->16 [style = bold, label=""];
16->31 [style = solid, label="values"];
33->11 [style = solid, label="values"];
4->26 [style = solid, label="test"];
33->8 [style = solid, label="values"];
20->23 [style = bold, label=""];
18->10 [style = bold, label=""];
13->3 [style = bold, label=""];
5->12 [style = bold, label=""];
3->19 [style = bold, label=""];
33->18 [style = bold, label=""];
19->27 [style = bold, label=""];
0->8 [style = bold, label=""];
16->12 [style = solid, label="values"];
15->4 [style = bold, label=""];
9->13 [style = bold, label=""];
21->7 [style = bold, label=""];
34->4 [style = bold, label=""];
16->25 [style = solid, label="values"];
16->33 [style = dashed, label="0"];
23->11 [style = bold, label=""];
30->2 [style = bold, label=""];
29->24 [style = bold, label=""];
8->25 [style = bold, label=""];
12->31 [style = bold, label=""];
33->12 [style = solid, label="values"];
17->20 [style = bold, label=""];
16->22 [style = solid, label="values"];
}
