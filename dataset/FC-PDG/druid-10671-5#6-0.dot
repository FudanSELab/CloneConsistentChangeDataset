digraph {
6 [style = filled, label = "testTimeseriesOnGroupByOnTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(1,scheduler.getTotalPrioritizedAndLaned().get())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(2,scheduler.getTotalAcquired().get())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(2,scheduler.getTotalPrioritizedAndLaned().get())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "final TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(new QueryDataSource(subquery)).granularity(Granularities.ALL).intervals(Intervals.ONLY_ETERNITY).aggregators(new CountAggregatorFactory(\"cnt\")).build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(2,scheduler.getTotalReleased().get())@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final GroupByQuery subquery = GroupByQuery.builder().setDataSource(FOO).setGranularity(Granularities.ALL).setInterval(Collections.singletonList(INTERVAL)).setDimensions(DefaultDimensionSpec.of(\"s\")).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expectedException.expect()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testQuery(query,ImmutableList.of(),ImmutableList.of())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expectedException.expectMessage(\"Subquery generated results beyond maximum(2(\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "initWalker(ImmutableMap.of(\"maxSubqueryRows\",\"2\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testTimeseriesOnGroupByOnTableErrorTooManyRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testTimeseriesOnGroupByOnTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(2,scheduler.getTotalRun().get())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final GroupByQuery subquery = GroupByQuery.builder().setDataSource(FOO).setGranularity(Granularities.ALL).setInterval(Collections.singletonList(INTERVAL)).setDimensions(DefaultDimensionSpec.of(\"s\")).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
6->1 [style = bold, label=""];
4->3 [style = bold, label=""];
0->11 [style = bold, label=""];
1->0 [style = solid, label="subquery"];
7->5 [style = bold, label=""];
2->0 [style = bold, label=""];
1->2 [style = bold, label=""];
14->2 [style = bold, label=""];
11->12 [style = bold, label=""];
12->10 [style = bold, label=""];
5->9 [style = dashed, label="0"];
13->14 [style = bold, label=""];
2->0 [style = solid, label="query"];
0->10 [style = solid, label="query"];
5->4 [style = bold, label=""];
9->4 [style = bold, label=""];
0->7 [style = bold, label=""];
}
