digraph {
12 [style = filled, label = "Object result@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(result instanceof Long)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "values.put(\"a\",6)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "absoluteValueOneField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "absoluteValueOneField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "values.put(\"a\",-1.1)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "StreamEvaluator evaluator = factory.constructEvaluator(\"abs(a)\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "result = evaluator.evaluate(new Tuple(values))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "result = evaluator.evaluate(new Tuple(values))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "values.put(\"a\",6.5)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "values.clear()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(6L,result)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(1.1D,result)@@@19@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "multOneField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(6.5D,result)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "values.clear()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(1D,result)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "values.clear()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(1.1D,result)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "values.put(\"a\",1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(result instanceof Double)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "StreamEvaluator evaluator = factory.constructEvaluator(\"mult(a)\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(1L,result)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "values.clear()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "result = evaluator.evaluate(new Tuple(values))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(result instanceof Double)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "result = evaluator.evaluate(new Tuple(values))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->18 [style = dashed, label="0"];
8->10 [style = bold, label=""];
15->13 [style = solid, label="result"];
4->14 [style = bold, label=""];
15->13 [style = bold, label=""];
10->21 [style = dashed, label="0"];
23->5 [style = bold, label=""];
21->0 [style = bold, label=""];
13->3 [style = solid, label="result"];
22->16 [style = bold, label=""];
2->1 [style = bold, label=""];
1->15 [style = bold, label=""];
14->5 [style = bold, label=""];
16->7 [style = bold, label=""];
18->19 [style = bold, label=""];
16->7 [style = solid, label="result"];
16->2 [style = solid, label="result"];
11->12 [style = bold, label=""];
0->18 [style = solid, label="result"];
6->22 [style = dashed, label="0"];
7->26 [style = bold, label=""];
3->9 [style = bold, label=""];
19->5 [style = bold, label=""];
13->9 [style = solid, label="result"];
14->23 [style = dashed, label="0"];
5->6 [style = bold, label=""];
13->3 [style = bold, label=""];
15->3 [style = solid, label="result"];
25->12 [style = bold, label=""];
0->4 [style = bold, label=""];
6->16 [style = bold, label=""];
12->8 [style = bold, label=""];
7->2 [style = bold, label=""];
24->25 [style = bold, label=""];
6->16 [style = solid, label="result"];
6->7 [style = solid, label="result"];
10->0 [style = bold, label=""];
11->25 [style = dashed, label="0"];
8->21 [style = bold, label=""];
0->23 [style = solid, label="result"];
0->18 [style = bold, label=""];
0->4 [style = solid, label="result"];
2->26 [style = dashed, label="0"];
5->22 [style = bold, label=""];
16->26 [style = solid, label="result"];
4->23 [style = bold, label=""];
0->14 [style = solid, label="result"];
20->11 [style = bold, label=""];
17->11 [style = bold, label=""];
}
