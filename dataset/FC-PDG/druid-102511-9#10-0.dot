digraph {
40 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@71@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,false))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,false))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
80 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,checkpoint.getPartitionSequenceNumberMap())))))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,nextOffsets)))))@@@53@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
74 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "i++@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "kafkaProducer.send(record).get()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "testIncrementalHandOffMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "Thread.sleep(10)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "i < numToAdd@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,1L,1,0L))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i < records.size()@@@41@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "kafkaProducer.commitTransaction()@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@38@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "kafkaProducer.beginTransaction()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "kafkaProducer.commitTransaction()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "int i = 0@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Thread.sleep(10)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i++@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "kafkaProducer.initTransactions()@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "maxTotalRows = 3L@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "kafkaProducer.initTransactions()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,nextOffsets)))))@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "kafkaProducer.beginTransaction()@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int i = numToAdd@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getProcessed())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57->18 [style = solid, label="task"];
54->55 [style = bold, label=""];
54->7 [style = solid, label="numToAdd"];
27->32 [style = bold, label=""];
4->16 [style = solid, label="desc6"];
26->10 [style = bold, label=""];
6->22 [style = bold, label=""];
4->53 [style = bold, label=""];
15->45 [style = solid, label="desc5"];
57->15 [style = solid, label="task"];
64->18 [style = bold, label=""];
31->73 [style = dashed, label="0"];
2->19 [style = solid, label="startPartitions"];
77->68 [style = solid, label="desc2"];
39->14 [style = bold, label=""];
40->43 [style = solid, label="currentOffsets"];
0->57 [style = solid, label="endPartitions"];
53->16 [style = solid, label="desc7"];
3->38 [style = bold, label=""];
75->2 [style = solid, label="startPartitions"];
17->57 [style = solid, label="baseSequenceName"];
69->65 [style = solid, label="desc1"];
21->2 [style = bold, label=""];
1->40 [style = dashed, label="0"];
48->54 [style = bold, label=""];
52->24 [style = bold, label=""];
33->0 [style = bold, label=""];
31->50 [style = bold, label=""];
57->11 [style = solid, label="task"];
64->79 [style = bold, label=""];
12->40 [style = bold, label=""];
75->80 [style = solid, label="startPartitions"];
6->26 [style = dotted, label="true"];
43->3 [style = bold, label=""];
3->5 [style = bold, label=""];
61->22 [style = bold, label=""];
12->20 [style = dotted, label="true"];
8->35 [style = solid, label="i"];
77->11 [style = solid, label="desc2"];
70->71 [style = bold, label=""];
38->7 [style = bold, label=""];
66->64 [style = bold, label=""];
28->27 [style = solid, label="desc2"];
38->56 [style = bold, label=""];
24->17 [style = bold, label=""];
45->42 [style = bold, label=""];
71->2 [style = solid, label="consumerProps"];
63->13 [style = bold, label=""];
7->6 [style = solid, label="i"];
33->21 [style = dashed, label="0"];
13->31 [style = bold, label=""];
39->80 [style = dashed, label="0"];
2->66 [style = bold, label=""];
76->75 [style = bold, label=""];
41->35 [style = solid, label="i"];
38->46 [style = dotted, label="true"];
11->28 [style = bold, label=""];
46->38 [style = bold, label=""];
19->18 [style = bold, label=""];
40->14 [style = solid, label="currentOffsets"];
57->28 [style = solid, label="task"];
11->25 [style = solid, label="desc1"];
15->16 [style = solid, label="desc5"];
68->72 [style = bold, label=""];
0->19 [style = bold, label=""];
57->49 [style = solid, label="task"];
51->21 [style = bold, label=""];
2->34 [style = bold, label=""];
34->33 [style = bold, label=""];
14->63 [style = dashed, label="0"];
34->51 [style = dashed, label="0"];
18->12 [style = bold, label=""];
51->57 [style = solid, label="consumerProps"];
28->16 [style = solid, label="desc2"];
69->77 [style = bold, label=""];
73->69 [style = bold, label=""];
78->40 [style = bold, label=""];
2->66 [style = solid, label="task"];
10->6 [style = solid, label="i"];
69->68 [style = solid, label="desc1"];
5->73 [style = bold, label=""];
2->69 [style = solid, label="task"];
6->61 [style = bold, label=""];
25->27 [style = bold, label=""];
5->1 [style = bold, label=""];
36->25 [style = bold, label=""];
17->19 [style = solid, label="baseSequenceName"];
19->53 [style = solid, label="task"];
40->3 [style = solid, label="currentOffsets"];
7->6 [style = bold, label=""];
19->28 [style = solid, label="task"];
57->53 [style = solid, label="task"];
38->46 [style = bold, label=""];
49->32 [style = solid, label="desc3"];
35->51 [style = bold, label=""];
64->79 [style = dotted, label="true"];
22->44 [style = bold, label=""];
22->44 [style = solid, label="nextOffsets"];
1->39 [style = bold, label=""];
44->30 [style = bold, label=""];
0->57 [style = bold, label=""];
16->36 [style = bold, label=""];
6->26 [style = bold, label=""];
59->7 [style = bold, label=""];
62->51 [style = bold, label=""];
35->9 [style = bold, label=""];
58->8 [style = bold, label=""];
28->49 [style = bold, label=""];
67->70 [style = bold, label=""];
23->15 [style = bold, label=""];
12->20 [style = bold, label=""];
42->47 [style = bold, label=""];
65->11 [style = bold, label=""];
43->12 [style = dashed, label="0"];
53->47 [style = solid, label="desc7"];
40->80 [style = bold, label=""];
49->23 [style = bold, label=""];
0->19 [style = solid, label="endPartitions"];
7->10 [style = solid, label="i"];
22->30 [style = solid, label="nextOffsets"];
77->68 [style = bold, label=""];
8->35 [style = bold, label=""];
10->6 [style = bold, label=""];
23->16 [style = solid, label="desc4"];
18->20 [style = solid, label="currentOffsets"];
4->42 [style = solid, label="desc6"];
57->23 [style = solid, label="task"];
71->76 [style = bold, label=""];
6->10 [style = dotted, label="true"];
19->23 [style = solid, label="task"];
54->8 [style = bold, label=""];
80->3 [style = bold, label=""];
11->16 [style = solid, label="desc1"];
72->65 [style = bold, label=""];
30->5 [style = bold, label=""];
21->2 [style = solid, label="endPartitions"];
19->4 [style = solid, label="task"];
51->19 [style = solid, label="consumerProps"];
35->41 [style = dotted, label="true"];
20->78 [style = bold, label=""];
37->52 [style = bold, label=""];
52->24 [style = dotted, label="true"];
40->43 [style = bold, label=""];
14->13 [style = bold, label=""];
60->52 [style = bold, label=""];
56->59 [style = bold, label=""];
39->63 [style = bold, label=""];
41->35 [style = bold, label=""];
22->63 [style = solid, label="nextOffsets"];
57->4 [style = solid, label="task"];
40->39 [style = solid, label="currentOffsets"];
32->45 [style = bold, label=""];
13->5 [style = dashed, label="0"];
29->67 [style = bold, label=""];
74->52 [style = bold, label=""];
19->57 [style = dashed, label="0"];
49->16 [style = solid, label="desc3"];
2->39 [style = solid, label="startPartitions"];
35->9 [style = dotted, label="true"];
2->77 [style = solid, label="task"];
57->18 [style = bold, label=""];
75->51 [style = bold, label=""];
40->63 [style = solid, label="currentOffsets"];
52->17 [style = bold, label=""];
8->41 [style = solid, label="i"];
19->11 [style = solid, label="task"];
18->12 [style = solid, label="currentOffsets"];
9->41 [style = bold, label=""];
19->18 [style = solid, label="task"];
2->57 [style = solid, label="startPartitions"];
79->64 [style = bold, label=""];
50->11 [style = bold, label=""];
35->62 [style = bold, label=""];
20->12 [style = bold, label=""];
15->4 [style = bold, label=""];
23->45 [style = solid, label="desc4"];
53->16 [style = bold, label=""];
19->15 [style = solid, label="task"];
19->49 [style = solid, label="task"];
29->48 [style = bold, label=""];
17->2 [style = solid, label="baseSequenceName"];
17->29 [style = bold, label=""];
54->35 [style = solid, label="numToAdd"];
55->58 [style = bold, label=""];
22->14 [style = solid, label="nextOffsets"];
}
