digraph {
1 [style = filled, label = "assertTrue(deferredResults.get(key).contains(deferredResult))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(clusters.size(),deferredResults.size())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testPollNotificationWithDefaultNamespace['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String someWatchKey = \"someKey\"@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testPollNotificationWithDefaultNamespaceAsFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testPollNotificationWithDefaultNamespace['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertTrue(deferredResults.get(key).contains(deferredResult))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "when(watchKeysUtil.assembleAllWatchKeys(someAppId,someCluster,defaultNamespace,someDataCenter)).thenReturn(watchKeys)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "String namespace = String.format(\"%s.%s\",defaultNamespace,\"properties\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "String anotherWatchKey = \"anotherKey\"@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "when(namespaceUtil.filterNamespaceName(namespace)).thenReturn(defaultNamespace)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Set<String> watchKeys = Sets.newHashSet(someWatchKey,anotherWatchKey)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertTrue(deferredResults.get(watchKey).contains(deferredResult))@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "String key = Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR).join(someAppId,cluster,defaultNamespace)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(clusters.size(),deferredResults.size())@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<String> clusters = Lists.newArrayList(someCluster,someDataCenter,ConfigConsts.CLUSTER_NAME_DEFAULT)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<String> clusters = Lists.newArrayList(someCluster,someDataCenter,ConfigConsts.CLUSTER_NAME_DEFAULT)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "DeferredResult<ResponseEntity<ApolloConfigNotification>> deferredResult = controller.pollNotification(someAppId,someCluster,namespace,someDataCenter,someNotificationId,someClientIp)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DeferredResult<ResponseEntity<ApolloConfigNotification>> deferredResult = controller.pollNotification(someAppId,someCluster,defaultNamespace,someDataCenter,someNotificationId,someClientIp)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(watchKeys.size(),deferredResults.size())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1->5 [style = bold, label=""];
4->3 [style = bold, label=""];
15->14 [style = bold, label=""];
11->12 [style = solid, label="watchKeys"];
8->11 [style = solid, label="anotherWatchKey"];
3->10 [style = solid, label="deferredResult"];
7->11 [style = solid, label="someWatchKey"];
3->6 [style = bold, label=""];
14->17 [style = bold, label=""];
11->12 [style = bold, label=""];
3->1 [style = solid, label="deferredResult"];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
5->19 [style = bold, label=""];
5->1 [style = bold, label=""];
13->19 [style = bold, label=""];
2->0 [style = bold, label=""];
18->13 [style = solid, label="deferredResult"];
19->13 [style = bold, label=""];
3->2 [style = bold, label=""];
6->10 [style = bold, label=""];
16->5 [style = bold, label=""];
14->18 [style = solid, label="namespace"];
12->3 [style = bold, label=""];
8->11 [style = bold, label=""];
17->18 [style = bold, label=""];
0->5 [style = bold, label=""];
18->16 [style = bold, label=""];
}
