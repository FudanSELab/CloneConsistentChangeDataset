digraph {
3 [style = filled, label = "PowerMockito.mockStatic(,,)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "inOrder.verify(scriptMock).add(\"-cache-inodes\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Mockito.doReturn(StringUtils.EMPTY).when(scriptMock).execute()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "inOrder.verify(scriptMock).execute()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "inOrder.verify(scriptMock).add(\"-allow-lowercase\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "ConfigDriveBuilder.fileToBase64String(Mockito.any())@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "inOrder.verify(scriptMock).add(\"-J\")@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "InOrder inOrder = Mockito.inOrder(scriptMock)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Method getProgramToGenerateIsoMethod = ReflectionUtils.getMethods(,ReflectionUtils.withName(\"getProgramToGenerateIso\")).iterator().next()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "PowerMockito.when(,method).withArguments(nullable(),nullable(),nullable()).thenCallRealMethod()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "generateAndRetrieveIsoAsBase64IsoTestIsoTooBig['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Mockito.when(fileMock.getAbsolutePath()).thenReturn(\"absolutePath\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Method method = ReflectionUtils.getMethods(,ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "inOrder.verify(scriptMock).add(\"tempDirName\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "inOrder.verify(scriptMock).add(\"-allow-multidot\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Mockito.doReturn(64L * 1024L * 1024L).when(fileMock).length()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "PowerMockito.whenNew().withAnyArguments().thenReturn(fileMock)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "File fileMock = Mockito.mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "inOrder.verify(scriptMock).add(\"-o\",\"absolutePath\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "inOrder.verify(scriptMock).add(\"-l\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "PowerMockito.verifyStatic()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Script scriptMock = Mockito.mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Mockito.doReturn(64L * 1024L * 1024L + 1l).when(fileMock).length()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "PowerMockito.whenNew().withAnyArguments().thenReturn(scriptMock)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "PowerMockito.when(,getProgramToGenerateIsoMethod).withNoArguments().thenReturn(\"/usr/bin/genisoimage\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "inOrder.verify(scriptMock).add(\"-r\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "PowerMockito.whenNew().withArguments(\"tempDirName\",\"isoFileName\").thenReturn(fileMock)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "PowerMockito.when(,method).withArguments(Mockito.any(),Mockito.any(),Mockito.any()).thenCallRealMethod()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "generateAndRetrieveIsoAsBase64IsoTestIsoTooBig['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "inOrder.verify(scriptMock).add(\"-V\",\"driveLabel\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "inOrder.verify(scriptMock).add(\"-ldots\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "inOrder.verify(scriptMock).add(\"-quiet\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "generateAndRetrieveIsoAsBase64IsoTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(\"isoFileName\",\"driveLabel\",\"tempDirName\")@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29->30 [style = bold, label=""];
11->12 [style = bold, label=""];
14->3 [style = bold, label=""];
8->4 [style = bold, label=""];
19->1 [style = bold, label=""];
2->11 [style = bold, label=""];
20->4 [style = bold, label=""];
1->8 [style = bold, label=""];
9->2 [style = bold, label=""];
33->7 [style = bold, label=""];
0->19 [style = bold, label=""];
22->15 [style = bold, label=""];
6->33 [style = bold, label=""];
0->1 [style = bold, label=""];
10->3 [style = bold, label=""];
24->22 [style = bold, label=""];
23->26 [style = bold, label=""];
3->6 [style = bold, label=""];
8->20 [style = dashed, label="0"];
9->13 [style = dashed, label="0"];
25->21 [style = bold, label=""];
15->27 [style = bold, label=""];
12->32 [style = bold, label=""];
26->25 [style = bold, label=""];
16->3 [style = bold, label=""];
4->9 [style = bold, label=""];
30->23 [style = bold, label=""];
7->0 [style = bold, label=""];
6->33 [style = solid, label="fileMock"];
28->18 [style = bold, label=""];
6->5 [style = bold, label=""];
7->0 [style = solid, label="scriptMock"];
7->32 [style = solid, label="scriptMock"];
6->5 [style = solid, label="fileMock"];
4->13 [style = bold, label=""];
18->17 [style = bold, label=""];
1->20 [style = bold, label=""];
13->2 [style = bold, label=""];
31->28 [style = bold, label=""];
5->33 [style = dashed, label="0"];
27->31 [style = bold, label=""];
5->7 [style = bold, label=""];
17->29 [style = bold, label=""];
32->24 [style = bold, label=""];
}
