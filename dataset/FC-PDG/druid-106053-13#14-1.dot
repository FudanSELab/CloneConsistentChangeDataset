digraph {
4 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(originalFilter,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",\"countryIsoCode\",\"countryNumber\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"),ImmutableList.of())@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "test_filterPushDown_factToCountryRightWithFilterOnNullColumns['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(joinableClauses,originalFilter)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(originalFilter,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",\"countryIsoCode\",\"countryNumber\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"),ImmutableList.of())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),joinableClauses,joinFilterPreAnalysis)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "test_filterPushDown_factToCountryRightWithFilterOnNullColumns['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.RIGHT))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),joinableClauses,joinFilterPreAnalysisGroup)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(expectedFilterSplit,actualFilterSplit)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Filter originalFilter = new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",null),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",null)))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "JoinFilterPreAnalysis joinFilterPreAnalysis = joinFilterPreAnalysisGroup.getPreAnalysisForSingleLevelMode()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.FULL))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "test_filterPushDown_factToCountryFullWithFilterOnNulls['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(null,new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",null),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",null))),ImmutableSet.of())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(originalFilter,joinableClauses,VirtualColumns.EMPTY)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->3 [style = bold, label=""];
3->8 [style = solid, label="joinFilterPreAnalysis"];
7->1 [style = bold, label=""];
15->14 [style = bold, label=""];
12->2 [style = solid, label="joinFilterPreAnalysis"];
7->2 [style = solid, label="expectedFilterSplit"];
6->0 [style = bold, label=""];
1->2 [style = solid, label="actualFilterSplit"];
5->4 [style = solid, label="originalFilter"];
2->4 [style = bold, label=""];
8->7 [style = bold, label=""];
0->13 [style = solid, label="joinableClauses"];
2->4 [style = solid, label="actualFilterSplit"];
8->13 [style = dashed, label="0"];
0->14 [style = dashed, label="0"];
11->13 [style = solid, label="joinFilterPreAnalysisGroup"];
12->2 [style = bold, label=""];
3->1 [style = solid, label="joinFilterPreAnalysis"];
0->11 [style = solid, label="joinableClauses"];
14->8 [style = solid, label="joinableClauses"];
0->8 [style = solid, label="joinableClauses"];
5->3 [style = solid, label="originalFilter"];
0->3 [style = solid, label="joinableClauses"];
3->8 [style = bold, label=""];
10->0 [style = bold, label=""];
11->13 [style = bold, label=""];
5->11 [style = solid, label="originalFilter"];
1->12 [style = bold, label=""];
1->2 [style = bold, label=""];
5->11 [style = bold, label=""];
13->9 [style = bold, label=""];
1->4 [style = solid, label="expectedFilterSplit"];
3->11 [style = dashed, label="0"];
9->1 [style = bold, label=""];
5->9 [style = solid, label="originalFilter"];
0->5 [style = bold, label=""];
14->5 [style = bold, label=""];
14->3 [style = solid, label="joinableClauses"];
}
