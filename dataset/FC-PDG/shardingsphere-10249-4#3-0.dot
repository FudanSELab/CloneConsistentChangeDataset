digraph {
15 [style = filled, label = "AlgorithmProvidedDatabaseDiscoveryRuleConfiguration actual = swapper.swapToObject(createYamlHARuleConfiguration())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "DatabaseDiscoveryDataSourceRuleConfiguration ruleConfig = actual.getDataSources().iterator().next()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertFalse(ruleConfig.isQueryConsistent())@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertNotNull(ruleConfig)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(ruleConfig.getLoadBalancerName(),is(\"loadBalancerName\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertSwapToObject['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertThat(actual.getLoadBalanceAlgorithms(),is(Collections.emptyMap()))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = actual.getDataSources().iterator().next()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertSwapToObject['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(ruleConfig.getReadDataSourceNames(),is(Collections.singletonList(\"readDataSourceName\")))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(ruleConfig.getName(),is(\"name\"))@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertNotNull(actual)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(ruleConfig.getWriteDataSourceName(),is(\"writeDataSourceName\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(actual.getDataSources().iterator().hasNext())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertNotNull(actual.getDataSources())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "AlgorithmProvidedReadwriteSplittingRuleConfiguration actual = swapper.swapToObject(createYamlReadwriteSplittingRuleConfiguration())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertSwapToObject['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13->7 [style = bold, label=""];
5->10 [style = solid, label="actual"];
10->9 [style = bold, label=""];
4->11 [style = bold, label=""];
4->16 [style = dashed, label="0"];
6->13 [style = bold, label=""];
5->10 [style = bold, label=""];
11->2 [style = bold, label=""];
8->3 [style = bold, label=""];
2->8 [style = bold, label=""];
3->6 [style = bold, label=""];
16->11 [style = solid, label="ruleConfig"];
12->5 [style = bold, label=""];
15->10 [style = solid, label="actual"];
4->11 [style = solid, label="ruleConfig"];
1->4 [style = bold, label=""];
6->7 [style = bold, label=""];
0->5 [style = bold, label=""];
1->16 [style = bold, label=""];
16->11 [style = bold, label=""];
9->1 [style = bold, label=""];
14->15 [style = bold, label=""];
15->10 [style = bold, label=""];
5->15 [style = dashed, label="0"];
}
