digraph {
8 [style = filled, label = "final Set<String> updatedSubscriptionSet = new HashSet<>(updatedSubscription)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,newAssignment))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(updatedSubscriptionSet,subscriptions.subscription())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "client.prepareResponse(syncGroupResponse(singletonList(t1p),Errors.NONE))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(newAssignmentSet,rebalanceListener.assigned)@@@47@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "subscriptions.subscribe(singleton(topic1),rebalanceListener)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.revoked)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.assigned)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertEquals(1,rebalanceListener.revokedCount)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertFalse(coordinator.rejoinNeededOrPending())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "client.prepareResponse(joinGroupFollowerResponse(2,\"consumer\",\"leader\",Errors.NONE))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "testRejoinGroup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(newAssignmentSet,subscriptions.assignedPartitions())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "client.prepareResponse(joinGroupLeaderResponse(1,consumerId,initialSubscription,Errors.NONE))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "coordinator.poll(time.timer(Long.MAX_VALUE))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "client.prepareResponse(syncGroupResponse(newAssignment,Errors.NONE))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){JoinGroupRequest join = (JoinGroupRequest)bodyProtocolMetadata protocolMetadata = join.groupProtocols().iterator().next()PartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(protocolMetadata.metadata())protocolMetadata.metadata().rewind()return subscription.topics().containsAll(updatedSubscriptionSet)}},joinGroupLeaderResponse(2,consumerId,updatedSubscriptions,Errors.NONE))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "subscriptions.subscribe(new HashSet<>(Arrays.asList(topic1,otherTopic)),rebalanceListener)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final List<String> updatedSubscription = Arrays.asList(topic1,topic2)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "subscriptions.subscribe(Pattern.compile(\".*\"),rebalanceListener)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<TopicPartition> newAssignment = Arrays.asList(t1p,t2p)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "String otherTopic = \"otherTopic\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,singletonList(t1p)))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "metadata.needMetadataForAllTopics(true)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testMetadataRefreshDuringRebalance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Map<String,List<String>> initialSubscription = singletonMap(consumerId,singletonList(topic1))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "coordinator.maybeUpdateSubscriptionMetadata()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Map<String,List<String>> updatedSubscriptions = singletonMap(consumerId,Arrays.asList(topic1,topic2))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.revoked)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "coordinator.poll(time.timer(Long.MAX_VALUE))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.assigned)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "client.updateMetadata(TestUtils.metadataUpdateWith(1,singletonMap(topic1,1)))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testMetadataRefreshDuringRebalance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final String consumerId = \"leader\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(1,rebalanceListener.assignedCount)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertTrue(rebalanceListener.revoked.isEmpty())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Set<TopicPartition> newAssignmentSet = new HashSet<>(newAssignment)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "joinAsFollowerAndReceiveAssignment(\"consumer\",coordinator,singletonList(t1p))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(singleton(topic1),subscriptions.subscription())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){final Map<String,Integer> updatedPartitions = new HashMap<>()for (String topic : updatedSubscription)updatedPartitions.put(topic,1)client.updateMetadata(TestUtils.metadataUpdateWith(1,updatedPartitions))return true}},syncGroupResponse(singletonList(t1p),Errors.NONE))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
8->18 [style = solid, label="updatedSubscriptionSet"];
4->3 [style = bold, label=""];
32->45 [style = bold, label=""];
14->18 [style = solid, label="updatedSubscriptions"];
17->7 [style = solid, label="newAssignment"];
41->32 [style = bold, label=""];
42->43 [style = bold, label=""];
20->13 [style = solid, label="consumerId"];
20->9 [style = solid, label="consumerId"];
44->35 [style = bold, label=""];
1->15 [style = bold, label=""];
11->6 [style = bold, label=""];
0->2 [style = bold, label=""];
18->11 [style = bold, label=""];
25->9 [style = bold, label=""];
17->13 [style = solid, label="newAssignment"];
18->3 [style = solid, label="subscription"];
38->36 [style = bold, label=""];
20->18 [style = solid, label="consumerId"];
12->16 [style = bold, label=""];
9->10 [style = bold, label=""];
46->39 [style = bold, label=""];
16->19 [style = bold, label=""];
26->24 [style = bold, label=""];
20->0 [style = solid, label="consumerId"];
17->11 [style = solid, label="newAssignment"];
22->30 [style = bold, label=""];
38->40 [style = solid, label="otherTopic"];
19->25 [style = bold, label=""];
31->34 [style = bold, label=""];
10->8 [style = solid, label="updatedSubscription"];
15->26 [style = bold, label=""];
21->36 [style = dashed, label="0"];
7->14 [style = bold, label=""];
20->21 [style = bold, label=""];
8->0 [style = bold, label=""];
17->7 [style = bold, label=""];
20->14 [style = solid, label="consumerId"];
6->4 [style = bold, label=""];
5->1 [style = bold, label=""];
29->20 [style = bold, label=""];
3->5 [style = bold, label=""];
30->12 [style = bold, label=""];
23->22 [style = bold, label=""];
24->45 [style = dashed, label="0"];
20->38 [style = dashed, label="0"];
10->8 [style = bold, label=""];
34->37 [style = bold, label=""];
8->3 [style = solid, label="updatedSubscriptionSet"];
21->22 [style = bold, label=""];
7->5 [style = solid, label="newAssignmentSet"];
22->12 [style = bold, label=""];
36->42 [style = bold, label=""];
10->2 [style = solid, label="updatedSubscription"];
20->25 [style = solid, label="consumerId"];
28->17 [style = bold, label=""];
39->41 [style = bold, label=""];
33->38 [style = bold, label=""];
7->24 [style = solid, label="newAssignmentSet"];
14->13 [style = bold, label=""];
27->20 [style = bold, label=""];
2->28 [style = bold, label=""];
25->0 [style = solid, label="initialSubscription"];
37->40 [style = bold, label=""];
13->18 [style = bold, label=""];
40->44 [style = bold, label=""];
43->31 [style = bold, label=""];
21->23 [style = bold, label=""];
35->46 [style = bold, label=""];
}
