digraph {
8 [style = filled, label = "List<InputRow> parsedRows = chunkParser.parse(ImmutableList.of(),false)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testWithNullParserAndInputformatParseProperly['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "RowIngestionMeters mockRowIngestionMeters = Mockito.mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final JsonInputFormat inputFormat = new JsonInputFormat(JSONPathSpec.DEFAULT,Collections.emptyMap(),null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "parseEmptyNotEndOfShard['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "parseAndAssertResult(chunkParser)@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final StreamChunkParser<ByteEntity> chunkParser = new StreamChunkParser<>(null,inputFormat,new InputRowSchema(TIMESTAMP_SPEC,DimensionsSpec.EMPTY,Collections.emptyList()),TransformSpec.NONE,temporaryFolder.newFolder(),null,mockRowIngestionMeters,parseExceptionHandler)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Mockito.verify(mockRowIngestionMeters).incrementThrownAway()@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(0,parsedRows.size())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final StreamChunkParser<ByteEntity> chunkParser = new StreamChunkParser<>(null,inputFormat,new InputRowSchema(TIMESTAMP_SPEC,DimensionsSpec.EMPTY,Collections.emptyList()),TransformSpec.NONE,temporaryFolder.newFolder(),null,rowIngestionMeters,parseExceptionHandler)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "final StreamChunkParser<ByteEntity> chunkParser = new StreamChunkParser<>(null,inputFormat,new InputRowSchema(TIMESTAMP_SPEC,DimensionsSpec.EMPTY,ColumnsFilter.all()),TransformSpec.NONE,temporaryFolder.newFolder(),null,rowIngestionMeters,parseExceptionHandler)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final TrackingJsonInputFormat inputFormat = new TrackingJsonInputFormat(JSONPathSpec.DEFAULT,Collections.emptyMap())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testWithNullParserAndInputformatParseProperly['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7->11 [style = bold, label=""];
3->1 [style = bold, label=""];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
3->1 [style = solid, label="chunkParser"];
1->10 [style = dashed, label="0"];
6->10 [style = solid, label="mockRowIngestionMeters"];
12->9 [style = bold, label=""];
3->4 [style = dashed, label="0"];
2->4 [style = bold, label=""];
8->7 [style = bold, label=""];
9->6 [style = bold, label=""];
5->2 [style = bold, label=""];
10->8 [style = bold, label=""];
2->9 [style = dashed, label="0"];
6->10 [style = bold, label=""];
9->10 [style = solid, label="inputFormat"];
4->1 [style = bold, label=""];
2->4 [style = solid, label="inputFormat"];
2->3 [style = solid, label="inputFormat"];
4->1 [style = solid, label="chunkParser"];
}
