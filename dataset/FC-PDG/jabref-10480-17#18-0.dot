digraph {
11 [style = filled, label = "testFindFileInSubdirectory['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "List<Path> result = fileFinder.findAssociatedFiles(localEntry,dirs,extensions)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(result.isEmpty())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(Collections.singletonList(Path.of(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/pdfInSubdirectory.pdf\")),result)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "localEntry.setCitationKey(\"pdfInSubdirectory\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "localEntry.setField(StandardField.YEAR,\"2017\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testFindFileNonRecursive['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(expected,result)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "List<Path> expected = List.of(directory.resolve(\"directory/subdirectory/pdfInSubdirectory.pdf\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testFindFileInSubdirectory['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "BibEntry localEntry = new BibEntry(StandardEntryType.Article)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<String> extensions = Collections.singletonList(\"pdf\")@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"*/(citationkey(.*\\.(extension(\",',')@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "List<Path> dirs = Collections.singletonList(Path.of(FILES_DIRECTORY))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<Path> result = fileFinder.findAssociatedFiles(localEntry,List.of(directory),PDF_EXTENSION)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/(citationkey(.*\\.(extension(\",',')@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
5->13 [style = dashed, label="0"];
4->7 [style = solid, label="localEntry"];
5->9 [style = bold, label=""];
6->7 [style = solid, label="extensions"];
9->12 [style = solid, label="result"];
11->4 [style = bold, label=""];
3->6 [style = bold, label=""];
1->7 [style = solid, label="dirs"];
10->12 [style = solid, label="expected"];
9->10 [style = bold, label=""];
4->9 [style = solid, label="localEntry"];
1->13 [style = bold, label=""];
2->10 [style = dashed, label="0"];
4->0 [style = bold, label=""];
7->14 [style = bold, label=""];
6->1 [style = bold, label=""];
3->5 [style = bold, label=""];
10->12 [style = bold, label=""];
7->2 [style = bold, label=""];
13->7 [style = bold, label=""];
7->9 [style = dashed, label="0"];
15->4 [style = bold, label=""];
5->7 [style = bold, label=""];
8->4 [style = bold, label=""];
7->2 [style = solid, label="result"];
}
