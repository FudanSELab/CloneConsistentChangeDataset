digraph {
7 [style = filled, label = "assertThat(toString).doesNotContain(\"valueA\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(toString).contains(\"valueB\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "graph.putEdgeValue(2,1,\"valueB\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(toString).contains(\"valueC\")@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "graph.putEdgeValue(4,4,\"valueD\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(graph.edgeValueOrDefault(4,4,null)).isEqualTo(\"valueD\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "graph = ValueGraphBuilder.undirected().allowsSelfLoops(true).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "undirectedGraph['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertThat(graph.edgeValueOrDefault(2,3,DEFAULT)).isEqualTo(\"valueC\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(graph.edgeValueOrDefault(4,4,DEFAULT)).isEqualTo(\"valueD\")@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "graph.putEdgeValue(2,3,\"valueC\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(toString).contains(\"valueD\")@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(graph.edgeValueOrDefault(2,3,null)).isEqualTo(\"valueC\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(graph.edgeValueOrDefault(2,1,DEFAULT)).isEqualTo(\"valueB\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "undirectedGraph['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "graph.putEdgeValue(1,2,\"valueA\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(graph.edgeValueOrDefault(1,2,DEFAULT)).isEqualTo(\"valueB\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "undirectedGraph['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(graph.edgeValueOrDefault(1,2,null)).isEqualTo(\"valueB\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(graph.edgeValueOrDefault(2,1,null)).isEqualTo(\"valueB\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String toString = graph.toString()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->3 [style = bold, label=""];
1->8 [style = bold, label=""];
12->5 [style = bold, label=""];
3->1 [style = bold, label=""];
5->9 [style = bold, label=""];
7->10 [style = bold, label=""];
5->15 [style = bold, label=""];
11->12 [style = bold, label=""];
20->3 [style = bold, label=""];
16->17 [style = bold, label=""];
9->7 [style = bold, label=""];
15->16 [style = bold, label=""];
10->6 [style = bold, label=""];
17->19 [style = bold, label=""];
6->4 [style = bold, label=""];
0->14 [style = bold, label=""];
2->0 [style = bold, label=""];
13->3 [style = bold, label=""];
8->2 [style = bold, label=""];
19->9 [style = bold, label=""];
14->11 [style = bold, label=""];
}
