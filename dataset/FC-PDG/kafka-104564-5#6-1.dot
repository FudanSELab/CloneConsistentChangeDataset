digraph {
6 [style = filled, label = "int node1 = 1@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(emptySet(),state.nonAcknowledgingVoters())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(Optional.empty(),state.highWatermark())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "LeaderState state = newLeaderState(mkSet(localId,node1,node2),10L)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertFalse(state.updateLocalState(0,new LogOffsetMetadata(20L)))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "state.updateReplicaState(node1,time.milliseconds(),new LogOffsetMetadata(10L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertFalse(state.updateReplicaState(node1,0,new LogOffsetMetadata(10L)))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testNonMonotonicHighWatermarkUpdate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(state.updateReplicaState(node2,0,new LogOffsetMetadata(15L)))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertFalse(state.updateReplicaState(node1,time.milliseconds(),new LogOffsetMetadata(5L)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(Optional.of(new LogOffsetMetadata(15L)),state.highWatermark())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testUpdateHighWatermarkQuorumSizeThree['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(mkSet(node1,node2),state.nonAcknowledgingVoters())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "LeaderState state = newLeaderState(mkSet(localId,node1),0L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(Optional.of(new LogOffsetMetadata(10L)),state.highWatermark())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(Optional.of(new LogOffsetMetadata(20L)),state.highWatermark())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(Optional.empty(),state.highWatermark())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(singleton(node2),state.nonAcknowledgingVoters())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(Optional.of(new LogOffsetMetadata(15L)),state.highWatermark())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertFalse(state.updateLocalState(0,new LogOffsetMetadata(15L)))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(5L,state.getVoterEndOffsets().get(node1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(Optional.of(new LogOffsetMetadata(20L)),state.highWatermark())@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertFalse(state.updateReplicaState(node2,0,new LogOffsetMetadata(20L)))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testUpdateHighWatermarkQuorumSizeThree['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertFalse(state.updateReplicaState(node2,0,new LogOffsetMetadata(10L)))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int node1 = 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(Optional.of(new LogOffsetMetadata(10L)),state.highWatermark())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(Optional.empty(),state.highWatermark())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(state.updateReplicaState(node1,0,new LogOffsetMetadata(20L)))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "state.updateLocalState(time.milliseconds(),new LogOffsetMetadata(10L))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "LeaderState<?> state = newLeaderState(mkSet(localId,node1,node2),10L)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "MockTime time = new MockTime()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28->29 [style = bold, label=""];
0->16 [style = bold, label=""];
15->10 [style = bold, label=""];
25->28 [style = bold, label=""];
7->11 [style = bold, label=""];
23->5 [style = bold, label=""];
5->9 [style = bold, label=""];
21->6 [style = bold, label=""];
5->16 [style = solid, label="node2"];
6->4 [style = solid, label="node1"];
1->30 [style = dashed, label="0"];
1->3 [style = bold, label=""];
6->9 [style = solid, label="node1"];
27->31 [style = bold, label=""];
9->17 [style = bold, label=""];
9->22 [style = dashed, label="0"];
8->6 [style = bold, label=""];
5->18 [style = solid, label="node2"];
5->25 [style = dashed, label="0"];
5->2 [style = solid, label="node2"];
5->22 [style = solid, label="node2"];
16->19 [style = bold, label=""];
17->29 [style = dashed, label="0"];
2->12 [style = bold, label=""];
5->25 [style = bold, label=""];
29->26 [style = bold, label=""];
20->2 [style = bold, label=""];
3->18 [style = bold, label=""];
12->13 [style = bold, label=""];
6->5 [style = bold, label=""];
26->27 [style = bold, label=""];
5->9 [style = solid, label="node2"];
11->0 [style = bold, label=""];
5->1 [style = solid, label="node2"];
5->29 [style = solid, label="node1"];
6->11 [style = solid, label="node1"];
13->7 [style = bold, label=""];
5->25 [style = solid, label="node1"];
31->30 [style = bold, label=""];
17->15 [style = bold, label=""];
10->4 [style = bold, label=""];
15->26 [style = dashed, label="0"];
22->17 [style = bold, label=""];
5->31 [style = solid, label="node1"];
4->1 [style = bold, label=""];
6->22 [style = solid, label="node1"];
5->15 [style = solid, label="node2"];
5->22 [style = bold, label=""];
5->27 [style = solid, label="node1"];
18->14 [style = bold, label=""];
14->20 [style = bold, label=""];
6->15 [style = solid, label="node1"];
24->23 [style = bold, label=""];
}
