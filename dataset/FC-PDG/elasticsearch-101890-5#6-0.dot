digraph {
17 [style = filled, label = "testLongToUnsignedLong['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals((double)raw(0(,dstLong.getDouble(10.0d),0.1d)@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "List<BigInteger> expected = LongStream.of(raw).mapToObj(null).collect(Collectors.toList())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testLongToBigIntegerToLong['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Field<BigInteger> dst = src.as(Field.BigInteger)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Field<Long> dstLong = dst.as(Field.Long)@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertEquals(Long.valueOf(raw(0(),dstLong.getValue(null))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(LongStream.of(raw).boxed().collect(Collectors.toList()),dstLong.getValues())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "long(( raw = {Long.MIN_VALUE,Long.MAX_VALUE,((long)Integer.MIN_VALUE - 1),((long)Integer.MAX_VALUE + 1),-1L,0L,1L}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(raw(0(,dst.getLong(10))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(LongStream.of(raw).map(null).boxed().collect(Collectors.toList()),dst.getValues())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Field<Long> dst = src.as(UnsignedLongField.UnsignedLong)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Field<Long> src = new LongField(\"\",new FieldValues<Long>(){@Override public boolean isEmpty(){return false}@Override public int size(){return raw.length}@Override public List<Long> getValues(){return LongStream.of(raw).boxed().collect(Collectors.toList())}@Override public Long getNonPrimitiveValue(){return raw(0(}@Override public long getLongValue(){return raw(0(}@Override public double getDoubleValue(){return raw(0(}})@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals((double)(raw(0( ^ MASK_2_63),dst.getDouble(10.0d),0.1d)@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testLongToBigIntegerToLong['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(raw(0(,dstLong.getLong(10))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(expected,dst.getValues())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(raw(0( ^ MASK_2_63,dst.getLong(10))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(Long.valueOf(raw(0( ^ MASK_2_63),dst.getValue(null))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals((double)raw(0(,dst.getDouble(10.0d),0.1d)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Field<BigInteger> dst = src.as(BigIntegerField.BigInteger)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(expected.get(0),dst.getValue(null))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Field<Long> dstLong = dst.as(LongField.Long)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->3 [style = bold, label=""];
0->13 [style = bold, label=""];
3->1 [style = bold, label=""];
6->2 [style = solid, label="raw"];
6->9 [style = solid, label="raw"];
6->13 [style = solid, label="raw"];
5->9 [style = bold, label=""];
9->2 [style = bold, label=""];
4->6 [style = bold, label=""];
17->6 [style = bold, label=""];
1->14 [style = dashed, label="0"];
9->18 [style = dashed, label="0"];
16->6 [style = bold, label=""];
3->14 [style = bold, label=""];
1->19 [style = dashed, label="0"];
7->0 [style = bold, label=""];
13->11 [style = bold, label=""];
12->21 [style = dashed, label="0"];
5->20 [style = dashed, label="0"];
20->18 [style = bold, label=""];
8->22 [style = dashed, label="0"];
12->8 [style = solid, label="expected"];
6->22 [style = solid, label="raw"];
8->5 [style = bold, label=""];
3->19 [style = bold, label=""];
22->20 [style = bold, label=""];
21->22 [style = bold, label=""];
11->10 [style = bold, label=""];
12->8 [style = bold, label=""];
15->0 [style = bold, label=""];
14->12 [style = bold, label=""];
2->15 [style = bold, label=""];
1->12 [style = bold, label=""];
6->10 [style = solid, label="raw"];
6->18 [style = solid, label="raw"];
7->15 [style = dashed, label="0"];
6->20 [style = solid, label="raw"];
2->7 [style = bold, label=""];
6->11 [style = solid, label="raw"];
6->3 [style = solid, label="raw"];
19->21 [style = bold, label=""];
}
