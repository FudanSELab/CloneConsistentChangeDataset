digraph {
5 [style = filled, label = "assertFilterMatches(edf(\"0 + 0\"),ImmutableList.of())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"'true'\"),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "NullHandling.replaceWithDefault()@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"missing == '1'\"),ImmutableList.of())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testMissingColumn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"missing == 2\"),ImmutableList.of())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"missing < 2.0\"),ImmutableList.of())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testConstantExpression['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertFilterMatches(edf(\"1 + 1\"),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"missing > 2\"),ImmutableList.of())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"missing < 2\"),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"missing > '2'\"),ImmutableList.of())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"missing > 2.0\"),ImmutableList.of())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testConstantExpression['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertFilterMatches(edf(\"'false'\"),ImmutableList.of())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"1 + 1\"),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"missing < '2'\"),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertFilterMatches(edf(\"'true'\"),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"missing == null\"),ImmutableList.of())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"missing < '2'\"),ImmutableList.of())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"missing < 2\"),ImmutableList.of())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"'false'\"),ImmutableList.of())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"0 + 0\"),ImmutableList.of())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"like(missing, '1%')\"),ImmutableList.of())@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"missing < 2.0\"),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertFilterMatchesSkipVectorize(edf(\"missing == ''\"),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "NullHandling.replaceWithDefault()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
22->21 [style = dotted, label="true"];
3->5 [style = dashed, label="0"];
15->23 [style = bold, label=""];
25->18 [style = dotted, label="false"];
18->24 [style = bold, label=""];
20->17 [style = bold, label=""];
22->15 [style = bold, label=""];
26->10 [style = bold, label=""];
11->14 [style = bold, label=""];
22->21 [style = bold, label=""];
25->12 [style = dotted, label="true"];
12->24 [style = bold, label=""];
16->22 [style = bold, label=""];
9->8 [style = bold, label=""];
3->4 [style = bold, label=""];
19->25 [style = bold, label=""];
25->20 [style = dotted, label="false"];
25->20 [style = bold, label=""];
2->0 [style = bold, label=""];
25->17 [style = dotted, label="false"];
8->5 [style = bold, label=""];
2->9 [style = dashed, label="0"];
10->12 [style = bold, label=""];
24->11 [style = bold, label=""];
4->7 [style = dashed, label="0"];
0->21 [style = dashed, label="0"];
23->19 [style = bold, label=""];
25->26 [style = bold, label=""];
5->7 [style = bold, label=""];
0->8 [style = dashed, label="0"];
1->2 [style = bold, label=""];
22->15 [style = dotted, label="false"];
25->10 [style = dotted, label="true"];
14->13 [style = bold, label=""];
6->9 [style = bold, label=""];
25->26 [style = dotted, label="true"];
17->18 [style = bold, label=""];
21->23 [style = bold, label=""];
}
