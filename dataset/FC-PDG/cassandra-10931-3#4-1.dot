digraph {
3 [style = filled, label = "check.accept(ColumnFilter.allRegularColumnsBuilder(metadata).add(v1).build())@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertFetchedQueried(true,false,filter,v1)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertFetchedQueried(true,true,filter,v2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "\"3.11\".equals(clusterMinVersion)@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "check.accept(ColumnFilter.selection(metadata,RegularAndStaticColumns.builder().add(v1).build()))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"<all regulars>/(v2(1((\",filter.toString())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertCellFetchedQueried(true,false,filter,v2,path0,path2,path3,path4)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertFetchedQueried(true,true,filter,s1,s2,v1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertCellFetchedQueried(true,false,filter,s2,path0,path1,path2,path3,path4)@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ColumnFilter filter = ColumnFilter.allRegularColumnsBuilder(metadata).select(v2,path1).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testSelectSimpleColumnWithMetadata['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "testSelectCellWithMetadata['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testRoundTrips(filter)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\"*/(v2(1((\",filter.toString())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertFetchedQueried(true,false,filter,s1,s2,v1)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"*/*\",filter.toString())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertCellFetchedQueried(true,false,filter,v2,path0,path2,path3,path4)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertCellFetchedQueried(false,false,filter,s2,path0,path1,path2,path3,path4)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Consumer<ColumnFilter> check = null@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertFetchedQueried(false,false,filter,s1,s2)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "\"3.0\".equals(clusterMinVersion)@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertCellFetchedQueried(true,false,filter,v2,path0,path2,path3,path4)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testSelectSimpleColumnWithMetadata['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertCellFetchedQueried(true,true,filter,s2,path0,path1,path2,path3,path4)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16->24 [style = dotted, label="false"];
20->24 [style = solid, label="filter"];
20->19 [style = solid, label="filter"];
16->13 [style = dotted, label="true"];
26->5 [style = bold, label=""];
2->3 [style = bold, label=""];
16->17 [style = dotted, label="true"];
20->25 [style = solid, label="filter"];
16->15 [style = dotted, label="true"];
20->6 [style = solid, label="filter"];
16->25 [style = dotted, label="false"];
20->26 [style = solid, label="filter"];
11->12 [style = bold, label=""];
8->6 [style = bold, label=""];
12->16 [style = bold, label=""];
16->23 [style = bold, label=""];
20->15 [style = solid, label="filter"];
16->22 [style = dotted, label="true"];
20->13 [style = solid, label="filter"];
16->23 [style = dotted, label="false"];
20->11 [style = solid, label="filter"];
15->22 [style = bold, label=""];
20->17 [style = solid, label="filter"];
20->10 [style = bold, label=""];
12->16 [style = dotted, label="false"];
12->26 [style = dotted, label="true"];
14->26 [style = bold, label=""];
5->19 [style = bold, label=""];
1->20 [style = dashed, label="0"];
12->14 [style = dotted, label="true"];
18->20 [style = bold, label=""];
23->24 [style = bold, label=""];
20->9 [style = solid, label="filter"];
19->9 [style = bold, label=""];
12->5 [style = dotted, label="true"];
12->19 [style = dotted, label="true"];
0->1 [style = bold, label=""];
16->21 [style = bold, label=""];
20->10 [style = solid, label="filter"];
20->8 [style = solid, label="filter"];
12->14 [style = bold, label=""];
16->6 [style = dotted, label="false"];
20->7 [style = solid, label="filter"];
20->5 [style = solid, label="filter"];
16->21 [style = dotted, label="true"];
4->1 [style = bold, label=""];
1->2 [style = bold, label=""];
17->13 [style = bold, label=""];
13->15 [style = bold, label=""];
7->25 [style = bold, label=""];
24->8 [style = bold, label=""];
16->7 [style = dotted, label="false"];
6->7 [style = bold, label=""];
20->22 [style = solid, label="filter"];
16->8 [style = dotted, label="false"];
21->17 [style = bold, label=""];
12->9 [style = dotted, label="true"];
10->11 [style = bold, label=""];
}
