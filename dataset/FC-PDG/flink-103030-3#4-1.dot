digraph {
9 [style = filled, label = "assertEquals(ScheduleMode.EAGER,graph.getScheduleMode())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "final TwoInputTransformation<Integer,Integer,Integer> resultTransform = new TwoInputTransformation<>(bounded,unbounded,\"Test Two Input Transformation\",SimpleOperatorFactory.of(new StreamGraphGeneratorTest.OutputTypeConfigurableOperationWithTwoInputs()),BasicTypeInfo.INT_TYPE_INFO,1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(graph.isAllVerticesInSameSlotSharingGroupByDefault())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertEquals(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,graph.getGlobalDataExchangeMode())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertTrue(graph.isAllVerticesInSameSlotSharingGroupByDefault())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final SourceTransformation<Integer> bounded = getSourceTransformation(\"Bounded Source\",Boundedness.BOUNDED)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,unbounded)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(ScheduleMode.EAGER,graph.getScheduleMode())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testDetectionThroughTransitivePredecessors['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,ScheduleMode.EAGER,true))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,graph.getGlobalDataExchangeMode())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testMixedDetection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(Boundedness.BOUNDED,bounded.getBoundedness())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testDetectionThroughTransitivePredecessors['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final SourceTransformation<Integer> bounded = getSourceTransformation(\"Bounded Source\",Boundedness.BOUNDED)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(Boundedness.BOUNDED,bounded.getBoundedness())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final SourceTransformation<Integer> unbounded = getSourceTransformation(\"Unbounded Source\",Boundedness.CONTINUOUS_UNBOUNDED)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,resultTransform)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(Boundedness.CONTINUOUS_UNBOUNDED,unbounded.getBoundedness())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->16 [style = bold, label=""];
16->15 [style = bold, label=""];
1->4 [style = bold, label=""];
0->9 [style = bold, label=""];
7->11 [style = bold, label=""];
4->6 [style = bold, label=""];
9->2 [style = bold, label=""];
8->3 [style = bold, label=""];
18->17 [style = bold, label=""];
10->3 [style = bold, label=""];
7->0 [style = bold, label=""];
0->11 [style = dashed, label="0"];
13->1 [style = bold, label=""];
3->6 [style = solid, label="bounded"];
5->1 [style = bold, label=""];
3->5 [style = bold, label=""];
1->6 [style = solid, label="unbounded"];
7->11 [style = solid, label="graph"];
17->12 [style = solid, label="unbounded"];
12->14 [style = bold, label=""];
4->12 [style = bold, label=""];
17->13 [style = bold, label=""];
6->7 [style = solid, label="resultTransform"];
6->7 [style = bold, label=""];
}
