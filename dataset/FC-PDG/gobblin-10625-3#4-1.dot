digraph {
4 [style = filled, label = "KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(kafkaDecoderExtractor.getKafkaDeserializer().getClass(),KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.getDeserializerClass())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "WorkUnitState mockWorkUnitState = getMockWorkUnitState()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState){@Override public Object getSchema(){return SchemaBuilder.record(TEST_RECORD_NAME).namespace(TEST_NAMESPACE).fields().name(TEST_FIELD_NAME).type().stringType().noDefault().endRecord()}}@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,KafkaDeserializerExtractor.Deserializers.STRING.name())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testBuiltInStringDeserializer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.getSchemaRegistryClass())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.name())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testBuiltInStringDeserializer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),KafkaDeserializerExtractor.Deserializers.STRING.getSchemaRegistryClass())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "WorkUnitState mockWorkUnitState = getMockWorkUnitState(0L,10L)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testBuiltInConfluentAvroDeserializer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(kafkaDecoderExtractor.getKafkaDeserializer().getClass(),KafkaDeserializerExtractor.Deserializers.STRING.getDeserializerClass())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
8->10 [style = bold, label=""];
7->4 [style = solid, label="mockWorkUnitState"];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
0->9 [style = bold, label=""];
6->7 [style = bold, label=""];
5->0 [style = bold, label=""];
0->8 [style = solid, label="mockWorkUnitState"];
9->8 [style = bold, label=""];
0->7 [style = dashed, label="0"];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
0->4 [style = solid, label="mockWorkUnitState"];
3->9 [style = dashed, label="0"];
7->3 [style = bold, label=""];
4->8 [style = dashed, label="0"];
10->11 [style = bold, label=""];
}
