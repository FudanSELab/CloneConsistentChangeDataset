digraph {
7 [style = filled, label = "assertFalse(message.hasField(optionalInt32Field))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertFalse(message.hasField(optionalBytesField))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "EnumValueDescriptor nonDefaultEnumValueDescriptor = enumDescriptor.getValues().get(1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testFieldPresenceByReflection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertTrue(message.hasField(optionalInt32Field))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertFalse(message.hasField(optionalNestedEnumField))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertFalse(message.hasField(optionalNestedEnumField))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(message.hasField(optionalNestedEnumField)).isFalse()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertFalse(message.hasField(optionalBytesField))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "assertThat(message.hasField(optionalNestedEnumField)).isTrue()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "assertThat(message.hasField(optionalInt32Field)).isFalse()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "DynamicMessage message = defaultInstance.newBuilderForType().build()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "FieldDescriptor optionalInt32Field = descriptor.findFieldByName(\"optional_int32\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertFalse(message.hasField(optionalNestedEnumField))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "assertThat(message.getAllFields()).isEmpty()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "assertFalse(message.hasField(optionalBytesField))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "message = message.toBuilder().setField(optionalInt32Field,0).setField(optionalStringField,\"\").setField(optionalBytesField,ByteString.EMPTY).setField(optionalNestedEnumField,defaultEnumValueDescriptor).build()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertTrue(message.hasField(optionalStringField))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Descriptor descriptor = TestAllTypes.getDescriptor()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(message.hasField(optionalBytesField))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertThat(message.getAllFields()).isEmpty()@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertFalse(message.hasField(optionalStringField))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertTrue(message.hasField(optionalBytesField))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "message = TestAllTypes.newBuilder().setOptionalInt32(1).setOptionalString(\"x\").setOptionalBytes(ByteString.copyFromUtf8(\"y\")).setOptionalNestedEnum(TestAllTypes.NestedEnum.BAR).build()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "testFieldPresenceDynamicMessage['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(message.hasField(optionalStringField)).isFalse()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "assertThat(message.hasField(optionalNestedEnumField)).isFalse()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "FieldDescriptor optionalNestedEnumField = descriptor.findFieldByName(\"optional_nested_enum\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(message.hasField(optionalStringField)).isTrue()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertFalse(message.hasField(optionalNestedEnumField))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertThat(message.hasField(optionalBytesField)).isFalse()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertThat(message.hasField(optionalInt32Field)).isFalse()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertThat(message.hasField(optionalStringField)).isFalse()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "testFieldPresenceByReflection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(message.hasField(optionalStringField))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "FieldDescriptor optionalBytesField = descriptor.findFieldByName(\"optional_bytes\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(0,message.getAllFields().size())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertThat(message.hasField(optionalBytesField)).isFalse()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "FieldDescriptor optionalStringField = descriptor.findFieldByName(\"optional_string\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(message.hasField(optionalInt32Field)).isTrue()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertTrue(message.hasField(optionalNestedEnumField))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertFalse(message.hasField(optionalInt32Field))@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "DynamicMessage defaultInstance = DynamicMessage.getDefaultInstance(descriptor)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertEquals(0,message.getAllFields().size())@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertFalse(message.hasField(optionalStringField))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "EnumValueDescriptor defaultEnumValueDescriptor = enumDescriptor.getValues().get(0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(4,message.getAllFields().size())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertFalse(message.hasField(optionalStringField))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(message.hasField(optionalBytesField)).isTrue()@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertFalse(message.hasField(optionalInt32Field))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "assertTrue(message.hasField(optionalInt32Field))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "message = defaultInstance.newBuilderForType().setField(optionalInt32Field,1).setField(optionalStringField,\"x\").setField(optionalBytesField,ByteString.copyFromUtf8(\"y\")).setField(optionalNestedEnumField,nonDefaultEnumValueDescriptor).build()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertThat(message.getAllFields()).hasSize(4)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "assertTrue(message.hasField(optionalNestedEnumField))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "EnumDescriptor enumDescriptor = optionalNestedEnumField.getEnumType()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(0,message.getAllFields().size())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "TestAllTypes message = TestAllTypes.getDefaultInstance()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29->30 [style = bold, label=""];
14->2 [style = solid, label="optionalInt32Field"];
10->36 [style = dashed, label="0"];
1->2 [style = solid, label="optionalBytesField"];
30->36 [style = bold, label=""];
6->38 [style = dashed, label="0"];
13->1 [style = bold, label=""];
13->3 [style = solid, label="optionalStringField"];
13->41 [style = solid, label="optionalStringField"];
5->28 [style = dashed, label="0"];
11->46 [style = solid, label="optionalNestedEnumField"];
2->15 [style = bold, label=""];
45->42 [style = bold, label=""];
9->5 [style = bold, label=""];
3->39 [style = bold, label=""];
27->33 [style = bold, label=""];
16->33 [style = dashed, label="0"];
1->17 [style = solid, label="optionalBytesField"];
7->34 [style = dashed, label="0"];
25->28 [style = bold, label=""];
1->52 [style = solid, label="optionalBytesField"];
19->20 [style = bold, label=""];
16->6 [style = bold, label=""];
11->44 [style = bold, label=""];
43->51 [style = bold, label=""];
1->4 [style = solid, label="optionalBytesField"];
0->21 [style = bold, label=""];
24->18 [style = bold, label=""];
20->29 [style = dashed, label="0"];
1->11 [style = bold, label=""];
22->18 [style = bold, label=""];
3->2 [style = bold, label=""];
55->7 [style = bold, label=""];
2->39 [style = dashed, label="0"];
12->27 [style = dashed, label="0"];
56->23 [style = bold, label=""];
11->15 [style = solid, label="optionalNestedEnumField"];
36->37 [style = bold, label=""];
46->40 [style = bold, label=""];
6->7 [style = bold, label=""];
11->6 [style = solid, label="optionalNestedEnumField"];
32->31 [style = bold, label=""];
4->9 [style = bold, label=""];
17->10 [style = bold, label=""];
1->16 [style = solid, label="optionalBytesField"];
11->47 [style = solid, label="optionalNestedEnumField"];
31->25 [style = bold, label=""];
52->46 [style = bold, label=""];
40->56 [style = bold, label=""];
11->10 [style = solid, label="optionalNestedEnumField"];
1->49 [style = solid, label="optionalBytesField"];
14->51 [style = solid, label="optionalInt32Field"];
14->19 [style = solid, label="optionalInt32Field"];
15->32 [style = dashed, label="0"];
42->55 [style = bold, label=""];
47->50 [style = bold, label=""];
23->37 [style = dashed, label="0"];
21->12 [style = bold, label=""];
18->42 [style = solid, label="descriptor"];
19->26 [style = dashed, label="0"];
10->23 [style = bold, label=""];
39->32 [style = bold, label=""];
28->8 [style = bold, label=""];
11->9 [style = solid, label="optionalNestedEnumField"];
9->25 [style = dashed, label="0"];
38->34 [style = bold, label=""];
21->35 [style = dashed, label="0"];
14->13 [style = bold, label=""];
5->8 [style = bold, label=""];
35->27 [style = bold, label=""];
20->17 [style = bold, label=""];
4->43 [style = bold, label=""];
8->19 [style = bold, label=""];
13->53 [style = solid, label="optionalStringField"];
26->29 [style = bold, label=""];
14->7 [style = solid, label="optionalInt32Field"];
14->21 [style = solid, label="optionalInt32Field"];
13->12 [style = solid, label="optionalStringField"];
4->31 [style = dashed, label="0"];
12->16 [style = bold, label=""];
14->23 [style = solid, label="optionalInt32Field"];
7->3 [style = bold, label=""];
41->52 [style = bold, label=""];
49->47 [style = bold, label=""];
13->15 [style = solid, label="optionalStringField"];
53->49 [style = bold, label=""];
11->0 [style = bold, label=""];
48->45 [style = bold, label=""];
54->18 [style = bold, label=""];
13->20 [style = solid, label="optionalStringField"];
34->3 [style = bold, label=""];
44->48 [style = bold, label=""];
15->4 [style = bold, label=""];
0->35 [style = bold, label=""];
33->38 [style = bold, label=""];
23->53 [style = bold, label=""];
17->30 [style = dashed, label="0"];
51->41 [style = bold, label=""];
18->14 [style = bold, label=""];
8->26 [style = bold, label=""];
}
