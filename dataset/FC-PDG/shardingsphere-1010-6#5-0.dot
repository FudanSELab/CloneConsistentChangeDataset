digraph {
9 [style = filled, label = "ADVICE.afterMethod(targetObject,executeMethod,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16d447b,new MethodInvocationResult())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertExceptionHandle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "JDBCExecutionUnit executionUnit = mock()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "MockSpan span = spans.get(0)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "List<MockSpan.LogEntry> entries = span.logEntries()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "ADVICE.beforeMethod(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16d438d,new MethodInvocationResult())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertMethod['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(spans.size(),is(1))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "extraMap.put(\"_root_span_\",null)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Map<String,?> fields = entries.get(0).fields()@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND),is(\"java.io.IOException\"))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertThat(tags.get(\"db.statement\"),is(\"select 1\"))@@@23@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "MockAdviceTargetObject targetObject = new MockAdviceTargetObject()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<MockSpan> spans = collector.finishedSpans()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(tags.get(\"span.kind\"),is(\"client\"))@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(fields.get(ErrorLogTagKeys.EVENT),is(\"error\"))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertThat(fields.get(JaegerConstants.ErrorLogTagKeys.EVENT),is(\"error\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Map<String,Object> tags = span.tags()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(span.operationName(),is(\"/ShardingSphere/executeSQL/\"))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(span.operationName(),is(\"/ShardingSphere/executeSQL/\"))@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(tags.get(\"db.instance\"),is(\"mock.db\"))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertExceptionHandle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertThat(tags.get(\"db.instance\"),is(\"mock.db\"))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\",new SQLUnit(\"select 1\",Lists.newArrayList())))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(spans.size(),is(1))@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "MockSpan span = spans.get(0)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Map<String,Object> extraMap = Maps.newHashMap()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(tags.get(\"db.type\"),is(\"sql\"))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(tags.get(\"span.kind\"),is(\"client\"))@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "ADVICE.onThrowing(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16d439e,new IOException())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertThat(spans.get(0).logEntries().size(),is(0))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "ADVICE.afterMethod(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16d43af,new MethodInvocationResult())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "ADVICE.onThrowing(targetObject,executeMethod,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16d42f3,new IOException())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "ADVICE.beforeMethod(targetObject,executeMethod,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16d446d,new MethodInvocationResult())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<MockSpan> spans = tracer.finishedSpans()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(tags.get(\"db.type\"),is(JaegerConstants.DB_TYPE_VALUE))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
23->31 [style = bold, label=""];
0->13 [style = solid, label="extraMap"];
21->10 [style = bold, label=""];
4->35 [style = bold, label=""];
7->11 [style = bold, label=""];
2->19 [style = bold, label=""];
15->23 [style = dashed, label="0"];
0->8 [style = solid, label="extraMap"];
5->26 [style = dashed, label="0"];
15->21 [style = bold, label=""];
25->23 [style = bold, label=""];
20->26 [style = bold, label=""];
8->33 [style = dashed, label="0"];
7->9 [style = solid, label="executionUnit"];
35->2 [style = bold, label=""];
22->21 [style = bold, label=""];
31->29 [style = bold, label=""];
10->17 [style = bold, label=""];
4->2 [style = bold, label=""];
20->1 [style = bold, label=""];
5->14 [style = bold, label=""];
0->9 [style = solid, label="extraMap"];
34->12 [style = bold, label=""];
12->0 [style = bold, label=""];
16->21 [style = dashed, label="0"];
1->22 [style = dashed, label="0"];
12->8 [style = solid, label="targetObject"];
26->30 [style = bold, label=""];
12->13 [style = solid, label="targetObject"];
19->5 [style = bold, label=""];
24->33 [style = bold, label=""];
12->9 [style = solid, label="targetObject"];
3->7 [style = bold, label=""];
33->25 [style = bold, label=""];
1->16 [style = bold, label=""];
9->15 [style = bold, label=""];
30->4 [style = bold, label=""];
29->32 [style = bold, label=""];
7->13 [style = solid, label="executionUnit"];
7->8 [style = solid, label="executionUnit"];
11->13 [style = bold, label=""];
12->24 [style = dashed, label="0"];
9->25 [style = dashed, label="0"];
8->9 [style = bold, label=""];
10->4 [style = bold, label=""];
14->18 [style = bold, label=""];
27->24 [style = bold, label=""];
13->9 [style = bold, label=""];
13->8 [style = bold, label=""];
16->4 [style = bold, label=""];
32->28 [style = bold, label=""];
28->22 [style = bold, label=""];
17->20 [style = bold, label=""];
6->12 [style = bold, label=""];
}
