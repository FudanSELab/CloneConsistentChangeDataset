digraph {
68 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED)).anyTimes()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpointsGroup0)).times(1)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "KinesisIndexTaskIOConfig group1Config = ((KinesisIndexTask)postSplitTasks.get(1)).getIOConfig()@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID1,SHARD_ID2)).anyTimes()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "verifyAll()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expect(taskStorage.getTask(successfulTask1.getId())).andReturn(Optional.of(successfulTask1)).anyTimes()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Task successfulTask = phaseOneTasks.get(0)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Task successfulTask1 = phaseTwoTasks.get(1)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Capture<Task> postSplitCaptured = Capture.newInstance(CaptureType.ALL)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "replayAll()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "EasyMock.reset(taskMaster)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpointsGroup0 = new TreeMap<>()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD1_PARTITION,SHARD2_PARTITION)).anyTimes()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(group0ExpectedEndSequenceNumbers,group0Config.getEndSequenceNumbers())@@@65@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "KinesisIndexTaskIOConfig group0Config = ((KinesisIndexTask)postSplitTasks.get(0)).getIOConfig()@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "Assert.assertEquals((Integer)0,group0Config.getTaskGroupId())@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Map<Integer,Map<String,String>> expectedPartitionGroups = ImmutableMap.of(0,ImmutableMap.of(SHARD_ID1,\"-1\"),1,ImmutableMap.of(SHARD_ID2,\"-1\"))@@@71@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
67 [style = filled, label = "EasyMock.reset(indexerMetadataStorageCoordinator)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "EasyMock.expect(taskStorage.getTask(successfulTask.getId())).andReturn(Optional.of(successfulTask)).anyTimes()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "SeekableStreamStartSequenceNumbers<String,String> group1ExpectedStartSequenceNumbers = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,\"100\"),ImmutableSet.of(SHARD_ID2))@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpointsGroup1 = new TreeMap<>()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group0ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Map<Integer,Set<String>> expectedPartitionGroups = ImmutableMap.of(0,ImmutableSet.of(SHARD_ID1),1,ImmutableSet.of(SHARD_ID2))@@@71@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
64 [style = filled, label = "EasyMock.reset(taskRunner)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(postSplitTasks).anyTimes()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "EasyMock.reset(supervisorRecordSupplier)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(group1ExpectedEndSequenceNumbers,group1Config.getEndSequenceNumbers())@@@67@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "EasyMock.expect(taskStorage.getTask(task.getId())).andReturn(Optional.of(task)).anyTimes()@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(postSplitCaptured))).andReturn(true).times(2)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "checkpointsGroup1.put(1,ImmutableMap.of(SHARD_ID1,\"0\"))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID2))).andReturn(\"200\").anyTimes()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(group1ExpectedStartSequenceNumbers,group1Config.getStartSequenceNumbers())@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(2,postSplitTasks.size())@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED)).anyTimes()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "return postSplitTasks@@@68@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "EasyMock.reset(taskClient)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(successfulTask1.getId())).andReturn(Optional.of(TaskStatus.success(successfulTask1.getId())))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group1ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID0,SHARD_ID1,SHARD_ID2)).anyTimes()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
91 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID1))).andReturn(\"100\").anyTimes()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "testShardSplitPhaseTwo['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(task.getId())).andReturn(Optional.of(TaskStatus.running(task.getId()))).anyTimes()@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "List<Task> postSplitTasks = postSplitCaptured.getValues()@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "ConcurrentHashMap<String,String> expectedPartitionOffsets = new ConcurrentHashMap<>(ImmutableMap.of(SHARD_ID2,\"-1\",SHARD_ID1,\"-1\",SHARD_ID0,\"-1\"))@@@73@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(successfulTask0.getId())).andReturn(Optional.of(TaskStatus.success(successfulTask0.getId())))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "List<Task> phaseOneTasks@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Assert.assertEquals(group0ExpectedStartSequenceNumbers,group0Config.getStartSequenceNumbers())@@@64@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group0ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "EasyMock.reset(taskStorage)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(DATASOURCE,new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.EXPIRED_MARKER,SHARD_ID1,\"100\",SHARD_ID2,\"100\"))))).andReturn(true).anyTimes()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "EasyMock.reset(taskStorage)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "supervisor.runInternal()@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group1ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.replay(taskClient)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "EasyMock.expect(taskStorage.getTask(successfulTask0.getId())).andReturn(Optional.of(successfulTask0)).anyTimes()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "testShardSplitPhaseThree['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "Assert.assertEquals((Integer)1,group1Config.getTaskGroupId())@@@63@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID1))).andReturn(\"200\").anyTimes()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Assert.assertEquals(expectedPartitionOffsets,supervisor.getPartitionOffsets())@@@74@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
90 [style = filled, label = "supervisor.runInternal()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "verifyAll()@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpointsGroup1)).times(1)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID0))).andReturn(KinesisSequenceNumber.END_OF_SHARD_MARKER).anyTimes()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(group1ExpectedEndSequenceNumbers,group1Config.getEndSequenceNumbers())@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID2))).andReturn(\"100\").anyTimes()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpointsGroup1 = new TreeMap<>()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testShardSplitPhaseThree['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "checkpointsGroup0.put(0,ImmutableMap.of(SHARD_ID2,\"0\",SHARD_ID0,KinesisSequenceNumber.END_OF_SHARD_MARKER))@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "Assert.assertEquals(group1ExpectedStartSequenceNumbers,group1Config.getStartSequenceNumbers())@@@66@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "EasyMock.reset(taskQueue)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "SeekableStreamStartSequenceNumbers<String,String> group1ExpectedStartSequenceNumbers = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"0\"),ImmutableSet.of())@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.END_OF_SHARD_MARKER,SHARD_ID1,\"100\",SHARD_ID2,\"100\")))).anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD0_PARTITION,SHARD1_PARTITION,SHARD2_PARTITION)).anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "SeekableStreamStartSequenceNumbers<String,String> group0ExpectedStartSequenceNumbers = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,\"0\"),ImmutableSet.of())@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpointsGroup1)).times(1)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "Assert.assertEquals(2,postSplitTasks.size())@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpointsGroup0)).times(1)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "EasyMock.reset(taskClient)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.END_OF_SHARD_MARKER)))).anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "EasyMock.replay(taskStorage)@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(successfulTask.getId())).andReturn(Optional.of(TaskStatus.success(successfulTask.getId())))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "List<Task> phaseTwoTasks@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "Assert.assertEquals(expectedPartitionGroups,supervisor.getPartitionGroups())@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->24 [style = bold, label=""];
79->8 [style = bold, label=""];
12->53 [style = bold, label=""];
55->69 [style = solid, label="group1ExpectedStartSequenceNumbers"];
28->33 [style = solid, label="group0ExpectedEndSequenceNumbers"];
19->60 [style = bold, label=""];
23->51 [style = bold, label=""];
61->30 [style = bold, label=""];
26->10 [style = bold, label=""];
62->61 [style = bold, label=""];
71->73 [style = solid, label="expectedPartitionOffsets"];
38->4 [style = bold, label=""];
22->79 [style = bold, label=""];
89->94 [style = bold, label=""];
45->48 [style = bold, label=""];
13->1 [style = bold, label=""];
92->43 [style = bold, label=""];
9->26 [style = bold, label=""];
82->67 [style = bold, label=""];
24->17 [style = bold, label=""];
88->95 [style = bold, label=""];
80->83 [style = bold, label=""];
22->38 [style = dashed, label="0"];
7->15 [style = dashed, label="0"];
25->15 [style = bold, label=""];
49->67 [style = bold, label=""];
0->88 [style = dashed, label="0"];
17->44 [style = bold, label=""];
1->31 [style = bold, label=""];
28->55 [style = bold, label=""];
11->16 [style = bold, label=""];
16->3 [style = bold, label=""];
23->25 [style = bold, label=""];
93->90 [style = bold, label=""];
51->23 [style = bold, label=""];
65->33 [style = bold, label=""];
68->34 [style = bold, label=""];
21->41 [style = bold, label=""];
7->37 [style = bold, label=""];
4->2 [style = bold, label=""];
11->91 [style = bold, label=""];
78->86 [style = bold, label=""];
0->62 [style = bold, label=""];
59->76 [style = dashed, label="0"];
82->76 [style = dotted, label="true"];
37->66 [style = solid, label="group0ExpectedEndSequenceNumbers"];
24->53 [style = solid, label="group1ExpectedEndSequenceNumbers"];
63->40 [style = bold, label=""];
70->58 [style = solid, label="expectedPartitionGroups"];
55->7 [style = bold, label=""];
49->59 [style = dotted, label="true"];
41->50 [style = bold, label=""];
52->63 [style = bold, label=""];
45->78 [style = dashed, label="0"];
4->41 [style = dashed, label="0"];
7->57 [style = solid, label="group0ExpectedStartSequenceNumbers"];
14->12 [style = solid, label="group1ExpectedStartSequenceNumbers"];
91->89 [style = bold, label=""];
47->56 [style = bold, label=""];
22->19 [style = bold, label=""];
30->43 [style = bold, label=""];
74->44 [style = bold, label=""];
57->66 [style = bold, label=""];
94->36 [style = bold, label=""];
43->20 [style = bold, label=""];
53->42 [style = bold, label=""];
39->88 [style = bold, label=""];
84->80 [style = bold, label=""];
3->6 [style = bold, label=""];
81->25 [style = bold, label=""];
5->18 [style = bold, label=""];
60->8 [style = bold, label=""];
42->58 [style = solid, label="expectedPartitionGroups"];
85->92 [style = bold, label=""];
77->22 [style = bold, label=""];
24->7 [style = dashed, label="0"];
56->35 [style = bold, label=""];
27->52 [style = bold, label=""];
16->11 [style = dashed, label="0"];
66->12 [style = bold, label=""];
54->8 [style = bold, label=""];
71->73 [style = bold, label=""];
42->58 [style = bold, label=""];
15->28 [style = bold, label=""];
7->84 [style = bold, label=""];
14->55 [style = dashed, label="0"];
40->68 [style = bold, label=""];
4->77 [style = bold, label=""];
61->85 [style = dashed, label="0"];
33->69 [style = bold, label=""];
15->65 [style = solid, label="group0ExpectedStartSequenceNumbers"];
8->54 [style = bold, label=""];
31->78 [style = bold, label=""];
34->21 [style = bold, label=""];
58->71 [style = bold, label=""];
20->11 [style = bold, label=""];
54->51 [style = bold, label=""];
42->70 [style = dashed, label="0"];
32->5 [style = bold, label=""];
37->28 [style = dashed, label="0"];
67->46 [style = bold, label=""];
10->27 [style = bold, label=""];
69->57 [style = bold, label=""];
36->32 [style = bold, label=""];
48->9 [style = bold, label=""];
3->91 [style = dashed, label="0"];
95->85 [style = bold, label=""];
90->52 [style = bold, label=""];
22->66 [style = solid, label="postSplitTasks"];
87->75 [style = bold, label=""];
46->47 [style = bold, label=""];
64->39 [style = bold, label=""];
6->36 [style = bold, label=""];
86->87 [style = bold, label=""];
37->14 [style = bold, label=""];
18->29 [style = bold, label=""];
39->0 [style = bold, label=""];
70->58 [style = bold, label=""];
50->38 [style = bold, label=""];
48->86 [style = dashed, label="0"];
53->70 [style = bold, label=""];
83->74 [style = bold, label=""];
44->65 [style = bold, label=""];
72->67 [style = bold, label=""];
75->93 [style = bold, label=""];
72->59 [style = dotted, label="true"];
35->64 [style = bold, label=""];
2->22 [style = bold, label=""];
7->57 [style = solid, label="group1ExpectedEndSequenceNumbers"];
31->45 [style = bold, label=""];
23->81 [style = bold, label=""];
29->13 [style = bold, label=""];
}
