digraph {
0 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestHelper.assertUndeliverable(errors,0,)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Runnable r2 = new Runnable(){@Override public void run(){ref.get().onError(ex)}}@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ts.assertValueCount(1).assertTerminated()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "TestHelper.race(r1,r2)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i < TestHelper.RACE_LONG_LOOPS@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "!errors.isEmpty()@@@38@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "mainCompleteBoundaryErrorRace['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final TestException ex = new TestException()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<Subscriber<? super Object>>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "TestSubscriberEx<Flowable<Object>> ts = new Flowable<Object>(){@Override protected void subscribeActual(Subscriber<? super Object> subscriber){subscriber.onSubscribe(new BooleanSubscription())refMain.set(subscriber)}}.window(new Flowable<Object>(){@Override protected void subscribeActual(Subscriber<? super Object> subscriber){subscriber.onSubscribe(new BooleanSubscription())ref.set(subscriber)}}).to(TestHelper.testConsumer())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "to.assertValueCount(1).assertTerminated()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<Throwable> errors = TestHelper.trackPluginErrors()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "mainCompleteBoundaryErrorRace['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final AtomicReference<Observer<? super Object>> refMain = new AtomicReference<Observer<? super Object>>()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "{RxJavaPlugins.reset()}@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestObserverEx<Observable<Object>> to = new Observable<Object>(){@Override protected void subscribeActual(Observer<? super Object> observer){observer.onSubscribe(Disposable.empty())refMain.set(observer)}}.window(new Observable<Object>(){@Override protected void subscribeActual(Observer<? super Object> observer){observer.onSubscribe(Disposable.empty())ref.set(observer)}}).to(TestHelper.testConsumer())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "mainCompleteBoundaryErrorRace['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Runnable r1 = new Runnable(){@Override public void run(){refMain.get().onComplete()}}@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->6 [style = bold, label=""];
6->18 [style = bold, label=""];
13->15 [style = bold, label=""];
0->4 [style = bold, label=""];
0->4 [style = solid, label="i"];
20->7 [style = bold, label=""];
14->0 [style = solid, label="i"];
4->3 [style = dotted, label="true"];
13->15 [style = solid, label="r2"];
4->21 [style = dotted, label="true"];
4->12 [style = dotted, label="true"];
7->9 [style = bold, label=""];
4->7 [style = dotted, label="true"];
9->2 [style = bold, label=""];
12->1 [style = bold, label=""];
4->18 [style = dotted, label="true"];
10->11 [style = bold, label=""];
5->19 [style = dashed, label="0"];
4->1 [style = dotted, label="true"];
4->0 [style = dotted, label="true"];
14->4 [style = solid, label="i"];
7->9 [style = dotted, label="true"];
3->5 [style = bold, label=""];
11->14 [style = bold, label=""];
4->8 [style = dotted, label="true"];
8->20 [style = dashed, label="0"];
12->21 [style = dashed, label="0"];
19->21 [style = bold, label=""];
4->15 [style = dotted, label="true"];
18->19 [style = bold, label=""];
1->15 [style = solid, label="r1"];
11->13 [style = solid, label="ex"];
6->3 [style = bold, label=""];
4->19 [style = dotted, label="true"];
17->11 [style = bold, label=""];
15->20 [style = bold, label=""];
3->18 [style = dashed, label="0"];
4->5 [style = dotted, label="true"];
8->7 [style = bold, label=""];
5->12 [style = bold, label=""];
2->0 [style = bold, label=""];
21->1 [style = bold, label=""];
6->9 [style = solid, label="errors"];
14->4 [style = bold, label=""];
4->13 [style = dotted, label="true"];
4->20 [style = dotted, label="true"];
4->6 [style = dotted, label="true"];
15->8 [style = bold, label=""];
16->11 [style = bold, label=""];
1->13 [style = bold, label=""];
7->2 [style = bold, label=""];
}
