digraph {
15 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to lower bound\",shouldRead)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",75)).eval(FILE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertFalse(\"Should not read: id range above upper bound (85 < 79)\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\",79),SPEC,true).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertTrue(\"Should read: may possible ids\",shouldRead)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "boolean shouldRead = new InclusiveManifestEvaluator(SPEC,greaterThanOrEqual(\"id\",85)).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",79)).eval(FILE)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "boolean shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",5)).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testIntegerGtEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",30)).eval(FILE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertFalse(\"Should not read: id below lower bound\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertTrue(\"Should read: id between lower and upper bounds\",shouldRead)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertFalse(\"Should not read: id range above upper bound (80 > 79)\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,greaterThanOrEqual(\"id\",79)).eval(FILE)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,greaterThanOrEqual(\"id\",80)).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",29)).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(\"Should read: one possible id\",shouldRead)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testIntegerGtEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\",80),SPEC,true).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,greaterThanOrEqual(\"id\",75)).eval(FILE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\",85),SPEC,true).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertFalse(\"Should not read: id above upper bound\",shouldRead)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertFalse(\"Should not read: id below lower bound\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertFalse(\"Should not read: id above upper bound\",shouldRead)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",80)).eval(FILE)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\",75),SPEC,true).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "testIntegerEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to upper bound\",shouldRead)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",85)).eval(FILE)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17->21 [style = solid, label="shouldRead"];
14->24 [style = bold, label=""];
4->3 [style = bold, label=""];
23->16 [style = bold, label=""];
7->11 [style = bold, label=""];
7->1 [style = bold, label=""];
4->16 [style = dashed, label="0"];
15->14 [style = bold, label=""];
26->17 [style = bold, label=""];
1->14 [style = dashed, label="0"];
3->7 [style = solid, label="shouldRead"];
20->26 [style = solid, label="shouldRead"];
25->23 [style = bold, label=""];
20->26 [style = bold, label=""];
19->15 [style = solid, label="shouldRead"];
9->8 [style = solid, label="shouldRead"];
8->6 [style = bold, label=""];
0->27 [style = dashed, label="0"];
13->4 [style = solid, label="shouldRead"];
8->13 [style = bold, label=""];
16->19 [style = bold, label=""];
14->24 [style = solid, label="shouldRead"];
9->8 [style = bold, label=""];
12->7 [style = solid, label="shouldRead"];
18->28 [style = bold, label=""];
12->7 [style = bold, label=""];
11->2 [style = solid, label="shouldRead"];
11->2 [style = bold, label=""];
21->18 [style = bold, label=""];
3->19 [style = dashed, label="0"];
18->28 [style = solid, label="shouldRead"];
24->20 [style = bold, label=""];
6->4 [style = bold, label=""];
6->13 [style = dashed, label="0"];
3->12 [style = dashed, label="0"];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
22->27 [style = bold, label=""];
1->11 [style = dashed, label="0"];
0->8 [style = bold, label=""];
7->15 [style = dashed, label="0"];
4->12 [style = bold, label=""];
1->2 [style = solid, label="shouldRead"];
8->25 [style = dashed, label="0"];
23->16 [style = solid, label="shouldRead"];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
0->9 [style = dashed, label="0"];
2->24 [style = dashed, label="0"];
19->15 [style = bold, label=""];
6->4 [style = solid, label="shouldRead"];
27->25 [style = bold, label=""];
17->21 [style = bold, label=""];
6->23 [style = dashed, label="0"];
27->25 [style = solid, label="shouldRead"];
0->8 [style = solid, label="shouldRead"];
13->4 [style = bold, label=""];
}
