digraph {
9 [style = filled, label = "assertThat(rabbit.rabbitmqMetrics.spans()).isEqualTo(spans.size())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertThat(rabbitmqMetrics.messagesDropped()).isZero()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "publish(message)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertThat(rabbit.rabbitmqMetrics.spansDropped()).isZero()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "rabbit.publish(message)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertThat(activemqMetrics.spansDropped()).isZero()@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(rabbitmqMetrics.spansDropped()).isZero()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "messageWithMultipleSpans['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(activemqMetrics.messagesDropped()).isZero()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(rabbitmqMetrics.messages()).isEqualTo(1)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "messageWithMultipleSpans['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(rabbit.rabbitmqMetrics.messages()).isEqualTo(1)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertThat(activemqMetrics.messages()).isEqualTo(1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Thread.sleep(1000)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Thread.sleep(200L)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "activemq.pushMessage(collector.queue,message)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(activemqMetrics.bytes()).isEqualTo(message.length)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(receivedSpans.take()).isEqualTo(spans)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(rabbitmqMetrics.bytes()).isEqualTo(message.length)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "SpanBytesEncoder encoder@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(rabbit.rabbitmqMetrics.bytes()).isEqualTo(message.length)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertThat(storage.acceptedSpanCount()).isEqualTo(spans.size())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertThat(activemqMetrics.spans()).isEqualTo(spans.size())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(rabbit.rabbitmqMetrics.messagesDropped()).isZero()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "messageWithMultipleSpans['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertThat(rabbit.storage.acceptedSpanCount()).isEqualTo(spans.size())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "byte(( message = encoder.encodeList(spans)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
5->8 [style = bold, label=""];
23->20 [style = bold, label=""];
16->11 [style = bold, label=""];
4->16 [style = dashed, label="0"];
2->6 [style = bold, label=""];
1->27 [style = dashed, label="0"];
8->17 [style = solid, label="message"];
26->25 [style = bold, label=""];
10->12 [style = dashed, label="0"];
1->3 [style = bold, label=""];
18->19 [style = bold, label=""];
21->8 [style = bold, label=""];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
1->18 [style = dashed, label="0"];
8->22 [style = solid, label="message"];
4->26 [style = dashed, label="0"];
9->10 [style = bold, label=""];
15->7 [style = dotted, label="true"];
2->17 [style = dashed, label="0"];
3->4 [style = bold, label=""];
22->23 [style = bold, label=""];
8->22 [style = bold, label=""];
19->16 [style = bold, label=""];
20->27 [style = bold, label=""];
3->19 [style = dashed, label="0"];
8->17 [style = bold, label=""];
0->14 [style = dashed, label="0"];
24->26 [style = bold, label=""];
6->13 [style = dashed, label="0"];
8->2 [style = bold, label=""];
5->7 [style = dotted, label="true"];
0->1 [style = bold, label=""];
21->7 [style = dotted, label="true"];
9->25 [style = dashed, label="0"];
9->11 [style = dashed, label="0"];
8->2 [style = solid, label="message"];
14->18 [style = bold, label=""];
17->13 [style = bold, label=""];
27->24 [style = bold, label=""];
2->22 [style = dashed, label="0"];
13->14 [style = bold, label=""];
15->8 [style = bold, label=""];
}
