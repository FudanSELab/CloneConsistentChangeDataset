digraph {
1 [style = filled, label = "Assert.assertEquals(\"hello\",druidLeaderClient.go(request).getContent())@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Request request = druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/redirect\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testRedirection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testSimple['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeRole.PEON,\"/simple/leader\")@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Request request = druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/direct\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeRole.PEON,\"/simple/leader\",EasyMock.createNiceMock())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testSimple['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.replay(druidNodeDiscovery,druidNodeDiscoveryProvider)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "druidLeaderClient.start()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->10 [style = bold, label=""];
0->6 [style = bold, label=""];
9->2 [style = bold, label=""];
2->1 [style = bold, label=""];
11->4 [style = bold, label=""];
0->12 [style = dashed, label="0"];
8->0 [style = solid, label="druidNodeDiscoveryProvider"];
7->8 [style = bold, label=""];
12->6 [style = bold, label=""];
4->10 [style = solid, label="druidNodeDiscovery"];
3->4 [style = bold, label=""];
8->5 [style = solid, label="druidNodeDiscoveryProvider"];
4->7 [style = bold, label=""];
8->12 [style = solid, label="druidNodeDiscoveryProvider"];
6->14 [style = bold, label=""];
9->14 [style = dashed, label="0"];
10->5 [style = bold, label=""];
5->0 [style = bold, label=""];
5->12 [style = bold, label=""];
14->2 [style = bold, label=""];
4->5 [style = solid, label="druidNodeDiscovery"];
6->9 [style = bold, label=""];
13->4 [style = bold, label=""];
}
