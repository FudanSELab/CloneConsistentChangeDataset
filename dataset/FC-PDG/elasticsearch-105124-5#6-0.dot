digraph {
4 [style = filled, label = "w.addDocument(doc)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(-10 + expectedOffset,histogram.getBuckets().get(0).getKey())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "doc.add(new SortedNumericDocValuesField(\"field\",NumericUtils.doubleToSortableLong(value)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(5 + expectedOffset,histogram.getBuckets().get(2).getKey())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(0,histogram.getBuckets().get(3).getDocCount())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(1,histogram.getBuckets().get(1).getDocCount())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "InternalHistogram histogram = search(searcher,new MatchAllDocsQuery(),aggBuilder,doubleField(\"field\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"my_agg\").field(\"field\").interval(interval).offset(offset)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(1,histogram.getBuckets().get(0).getDocCount())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(AggregationInspectionHelper.hasValue(histogram))@@@29@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Document doc = new Document()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(2,histogram.getBuckets().get(2).getDocCount())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "final double expectedOffset = offset % interval@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(1,histogram.getBuckets().get(0).getDocCount())@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "IndexSearcher searcher = new IndexSearcher(reader)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(-Math.PI,histogram.getBuckets().get(3).getKey())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertEquals(2,histogram.getBuckets().get(4).getDocCount())@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertEquals(1,histogram.getBuckets().get(2).getDocCount())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertEquals(3,histogram.getBuckets().size())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "IndexSearcher searcher = new IndexSearcher(reader)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(1,histogram.getBuckets().get(5).getDocCount())@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(6,histogram.getBuckets().size())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertEquals(-2 * Math.PI,histogram.getBuckets().get(2).getKey())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testIrrationalInterval['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "doc.add(new SortedNumericDocValuesField(\"field\",value))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"my_agg\").field(\"field\").interval(Math.PI)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(Math.PI,histogram.getBuckets().get(5).getKey())@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(4,histogram.getBuckets().size())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertEquals(-3 * Math.PI,histogram.getBuckets().get(1).getKey())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testIrrationalInterval['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "assertEquals(0d,histogram.getBuckets().get(4).getKey())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(0,histogram.getBuckets().get(2).getDocCount())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(1,histogram.getBuckets().get(1).getDocCount())@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(AggregationInspectionHelper.hasValue(histogram))@@@25@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final double offset = randomDouble()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(1,histogram.getBuckets().get(3).getDocCount())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "final double interval = 5@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "InternalHistogram histogram = searchAndReduce(searcher,new MatchAllDocsQuery(),aggBuilder,longField(\"field\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertTrue(AggregationInspectionHelper.hasValue(histogram))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "InternalHistogram histogram = search(searcher,new MatchAllDocsQuery(),aggBuilder,longField(\"field\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "assertEquals(expectedOffset,histogram.getBuckets().get(1).getKey())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "testRandomOffset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
39->29 [style = solid, label="histogram"];
4->9 [style = bold, label=""];
16->3 [style = bold, label=""];
22->25 [style = bold, label=""];
0->16 [style = bold, label=""];
4->14 [style = bold, label=""];
23->20 [style = bold, label=""];
17->26 [style = bold, label=""];
18->24 [style = bold, label=""];
40->35 [style = bold, label=""];
36->9 [style = bold, label=""];
16->27 [style = bold, label=""];
5->23 [style = bold, label=""];
1->26 [style = dashed, label="0"];
33->40 [style = solid, label="offset"];
3->27 [style = dashed, label="0"];
6->32 [style = dashed, label="0"];
9->32 [style = bold, label=""];
35->2 [style = bold, label=""];
26->18 [style = bold, label=""];
7->20 [style = dashed, label="0"];
28->9 [style = bold, label=""];
31->29 [style = bold, label=""];
34->31 [style = bold, label=""];
23->19 [style = solid, label="histogram"];
11->12 [style = bold, label=""];
3->38 [style = bold, label=""];
4->33 [style = bold, label=""];
14->13 [style = solid, label="aggBuilder"];
2->30 [style = dashed, label="0"];
13->23 [style = dashed, label="0"];
0->38 [style = dashed, label="0"];
38->1 [style = bold, label=""];
1->11 [style = bold, label=""];
9->6 [style = bold, label=""];
37->40 [style = solid, label="interval"];
20->2 [style = bold, label=""];
2->39 [style = bold, label=""];
8->1 [style = bold, label=""];
13->39 [style = dashed, label="0"];
6->4 [style = bold, label=""];
41->30 [style = bold, label=""];
1->34 [style = bold, label=""];
3->34 [style = dashed, label="0"];
33->35 [style = solid, label="offset"];
11->18 [style = dashed, label="0"];
40->38 [style = solid, label="expectedOffset"];
24->21 [style = bold, label=""];
30->3 [style = bold, label=""];
21->22 [style = bold, label=""];
40->34 [style = solid, label="expectedOffset"];
13->7 [style = bold, label=""];
7->2 [style = bold, label=""];
3->8 [style = bold, label=""];
15->0 [style = bold, label=""];
5->13 [style = bold, label=""];
5->23 [style = solid, label="searcher"];
2->15 [style = bold, label=""];
35->39 [style = solid, label="aggBuilder"];
25->19 [style = bold, label=""];
27->17 [style = bold, label=""];
8->17 [style = dashed, label="0"];
13->12 [style = solid, label="histogram"];
39->41 [style = bold, label=""];
7->41 [style = dashed, label="0"];
10->9 [style = bold, label=""];
32->4 [style = bold, label=""];
40->30 [style = solid, label="expectedOffset"];
2->39 [style = solid, label="searcher"];
8->31 [style = dashed, label="0"];
5->13 [style = solid, label="searcher"];
33->37 [style = bold, label=""];
14->23 [style = solid, label="aggBuilder"];
37->40 [style = bold, label=""];
14->5 [style = bold, label=""];
9->4 [style = solid, label="doc"];
}
