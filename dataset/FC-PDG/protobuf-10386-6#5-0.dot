digraph {
13 [style = filled, label = "input.readStringRequireUtf8()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testReadStringInvalidUtf8['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "CodedOutputStream output = CodedOutputStream.newInstance(rawOutput)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(tag,input.readTag())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "testReadStringRequireUtf8InvalidUtf8['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(inputType.name(),\"Protocol message had invalid UTF-8.\",exception.getMessage())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "output.flush()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(input.readTag()).isEqualTo(tag)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertWithMessage(inputType.name()).that(exception).hasMessageThat().isEqualTo(\"Protocol message had invalid UTF-8.\")@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(inputType.name(),0xfffd,text.charAt(0))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "fail(inputType.name() + \": Expected invalid UTF-8 exception.\")@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "byte(( rawInput = rawOutput.toByteString().toByteArray()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "String text = input.readString()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertWithMessage(\"%s: Expected invalid UTF-8 exception.\",inputType.name()).fail()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "InvalidProtocolBufferException exception@@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testReadStringRequireUtf8InvalidUtf8['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "output.writeRawBytes(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@37577e)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "output.writeRawVarint32(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ByteString.Output rawOutput = ByteString.newOutput()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int tag = WireFormat.makeTag(1,WireFormat.WIRETYPE_LENGTH_DELIMITED)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "output.writeRawVarint32(tag)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(inputType.name(),tag,input.readTag())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "CodedInputStream input = inputType.newDecoder(rawInput)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
8->0 [style = solid, label="rawInput"];
0->9 [style = bold, label=""];
16->0 [style = bold, label=""];
15->2 [style = bold, label=""];
22->19 [style = bold, label=""];
12->16 [style = dashed, label="0"];
9->18 [style = dashed, label="0"];
19->20 [style = bold, label=""];
20->0 [style = bold, label=""];
10->22 [style = solid, label="tag"];
9->22 [style = dashed, label="0"];
1->0 [style = bold, label=""];
5->12 [style = dotted, label="true"];
2->4 [style = bold, label=""];
12->0 [style = bold, label=""];
13->1 [style = bold, label=""];
10->9 [style = solid, label="tag"];
21->2 [style = bold, label=""];
7->14 [style = bold, label=""];
6->2 [style = bold, label=""];
8->0 [style = bold, label=""];
5->16 [style = bold, label=""];
13->17 [style = bold, label=""];
1->17 [style = dashed, label="0"];
17->0 [style = bold, label=""];
3->7 [style = bold, label=""];
11->3 [style = bold, label=""];
5->12 [style = bold, label=""];
10->18 [style = solid, label="tag"];
0->22 [style = bold, label=""];
5->16 [style = dotted, label="true"];
18->13 [style = bold, label=""];
0->18 [style = bold, label=""];
14->8 [style = bold, label=""];
2->4 [style = solid, label="rawOutput"];
10->11 [style = solid, label="tag"];
9->13 [style = bold, label=""];
10->11 [style = bold, label=""];
}
