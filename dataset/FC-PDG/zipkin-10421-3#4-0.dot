digraph {
14 [style = filled, label = "consumerExceptionBeforeCallbackDoesntSetFutureException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "entry.category = \"zipkin\"@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\",consumer)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "entry.message = encodedSpan@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(scribeMetrics.spansDropped()).isEqualTo(1)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "consumerExceptionBeforeCallbackDoesntSetFutureException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(scribeMetrics.spans()).isEqualTo(1)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(scribeMetrics.messagesDropped()).isZero()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(scribeMetrics.spansDropped()).isEqualTo(1)@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "consumer = null@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "expectSuccess(scribe,entry)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(scribeMetrics.messages()).isEqualTo(1)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "LogEntry entry = new LogEntry()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "scribe.Log(asList(entry),callback)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "consumer = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "callbackExceptionDoesntThrow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\",consumer)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(callback.error).isNull()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(scribeMetrics.messages()).isEqualTo(1)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3->12 [style = solid, label="entry"];
8->0 [style = bold, label=""];
12->4 [style = bold, label=""];
1->8 [style = bold, label=""];
16->15 [style = bold, label=""];
7->12 [style = solid, label="callback"];
10->11 [style = bold, label=""];
6->19 [style = solid, label="entry"];
11->2 [style = solid, label="consumer"];
14->11 [style = bold, label=""];
11->2 [style = bold, label=""];
4->1 [style = bold, label=""];
5->13 [style = bold, label=""];
3->6 [style = bold, label=""];
2->3 [style = bold, label=""];
6->9 [style = bold, label=""];
11->15 [style = dashed, label="0"];
7->12 [style = bold, label=""];
15->3 [style = solid, label="consumer"];
15->3 [style = bold, label=""];
17->8 [style = bold, label=""];
18->17 [style = bold, label=""];
7->19 [style = bold, label=""];
0->5 [style = bold, label=""];
3->19 [style = solid, label="scribe"];
19->18 [style = bold, label=""];
9->7 [style = bold, label=""];
}
