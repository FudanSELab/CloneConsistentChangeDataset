digraph {
13 [style = filled, label = "testHarness.processWatermark(20L)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testHarness1.open()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "OperatorSubtaskState snapshot = testHarness.snapshot(0,0)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "KeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0,(maxParallelism / 2) - 1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testStateAndTimerStateShufflingScalingUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_EVENT_TIME_TIMER:10\"),0)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testHarness2.setProcessingTime(20L)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_EVENT_TIME:HELLO\"))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "OperatorSubtaskState initState2 = AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,1,2,1)@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testHarness2.initializeState(snapshot)@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testHarness1.setProcessingTime(20L)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testHarness2.processWatermark(10L)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_STATE:HELLO\"),0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertThat(extractResult(testHarness),contains(\"ON_PROC_TIME:HELLO\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_PROC_TIME:CIAO\"))@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "testProcessingTimeAndEventTimeDontInterfere['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "testHarness.processWatermark(0L)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(extractResult(testHarness).isEmpty())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testHarness2.setup()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testHarness2.initializeState(initState2)@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "TestOperator testOperator = new TestOperator()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "testHarness1.initializeState(initState1)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testHarness2.processWatermark(20L)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_PROC_TIME_TIMER:10\"),0)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,0)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testHarness.processWatermark(0L)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testHarness1.processWatermark(20L)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int key2 = getKeyInKeyGroupRange(subKeyGroupRange2,maxParallelism)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_PROC_TIME_TIMER:10\"),0)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "testHarness.setProcessingTime(10L)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "KeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1,maxParallelism - 1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TestOperator testOperator1 = new TestOperator()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "testHarness.open()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testHarness1.setProcessingTime(10L)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_EVENT_TIME_TIMER:20\"),0)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testHarness2.open()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_STATE:HELLO\"),0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,1,0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_EVENT_TIME:CIAO\"))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testHarness1.setup()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_EVENT_TIME_TIMER:20\"),0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final int maxParallelism = 10@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@51@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testHarness2.setProcessingTime(10L)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "TestOperator testOperator2 = new TestOperator()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "OperatorSubtaskState initState1 = AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,1,2,0)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "int key1 = getKeyInKeyGroupRange(subKeyGroupRange1,maxParallelism)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "testHarness1.initializeState(snapshot)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "testHarness.setProcessingTime(0L)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_STATE:CIAO\"),0)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_PROC_TIME_TIMER:20\"),0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertThat(extractResult(testHarness),contains(\"ON_EVENT_TIME:HELLO\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness2 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator2,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,1)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_PROC_TIME:HELLO\"))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testHarness1.processWatermark(10L)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testStateAndTimerStateShufflingScalingUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2->35 [style = bold, label=""];
17->25 [style = bold, label=""];
29->5 [style = bold, label=""];
32->37 [style = bold, label=""];
12->3 [style = solid, label="key1"];
0->46 [style = bold, label=""];
21->0 [style = solid, label="testOperator1"];
38->12 [style = solid, label="subKeyGroupRange1"];
4->15 [style = bold, label=""];
1->30 [style = bold, label=""];
8->44 [style = bold, label=""];
12->18 [style = solid, label="key1"];
5->38 [style = bold, label=""];
36->33 [style = bold, label=""];
59->61 [style = bold, label=""];
41->35 [style = dashed, label="0"];
26->12 [style = bold, label=""];
12->2 [style = bold, label=""];
34->24 [style = bold, label=""];
19->9 [style = bold, label=""];
35->20 [style = solid, label="testOperator"];
28->8 [style = solid, label="testOperator2"];
14->51 [style = solid, label="snapshot"];
2->43 [style = solid, label="key2"];
38->26 [style = bold, label=""];
60->56 [style = solid, label="testHarness"];
8->17 [style = solid, label="testHarness2"];
5->20 [style = solid, label="maxParallelism"];
57->54 [style = bold, label=""];
0->7 [style = solid, label="testHarness1"];
40->49 [style = dashed, label="0"];
51->28 [style = bold, label=""];
21->0 [style = bold, label=""];
35->20 [style = bold, label=""];
54->60 [style = solid, label="testOperator"];
54->60 [style = bold, label=""];
5->26 [style = solid, label="maxParallelism"];
51->52 [style = solid, label="initState2"];
33->28 [style = bold, label=""];
39->45 [style = bold, label=""];
0->9 [style = solid, label="testHarness1"];
31->11 [style = bold, label=""];
49->32 [style = bold, label=""];
58->39 [style = bold, label=""];
5->51 [style = solid, label="maxParallelism"];
30->19 [style = bold, label=""];
44->4 [style = bold, label=""];
5->0 [style = solid, label="maxParallelism"];
7->23 [style = bold, label=""];
20->39 [style = bold, label=""];
22->17 [style = bold, label=""];
43->10 [style = bold, label=""];
4->52 [style = dashed, label="0"];
50->49 [style = solid, label="initState1"];
18->41 [style = bold, label=""];
48->5 [style = bold, label=""];
46->40 [style = bold, label=""];
15->47 [style = bold, label=""];
14->21 [style = bold, label=""];
2->41 [style = solid, label="key2"];
27->55 [style = dashed, label="0"];
13->18 [style = bold, label=""];
52->15 [style = bold, label=""];
43->39 [style = dashed, label="0"];
9->42 [style = bold, label=""];
27->14 [style = bold, label=""];
14->40 [style = solid, label="snapshot"];
39->13 [style = bold, label=""];
47->31 [style = bold, label=""];
62->35 [style = bold, label=""];
10->6 [style = bold, label=""];
37->7 [style = bold, label=""];
5->50 [style = solid, label="maxParallelism"];
6->27 [style = bold, label=""];
28->8 [style = bold, label=""];
40->32 [style = bold, label=""];
14->50 [style = bold, label=""];
35->58 [style = bold, label=""];
20->60 [style = dashed, label="0"];
18->62 [style = dashed, label="0"];
12->10 [style = solid, label="key1"];
61->62 [style = bold, label=""];
53->55 [style = bold, label=""];
13->53 [style = bold, label=""];
3->58 [style = dashed, label="0"];
46->49 [style = bold, label=""];
41->3 [style = bold, label=""];
8->34 [style = solid, label="testHarness2"];
45->13 [style = bold, label=""];
42->36 [style = bold, label=""];
10->13 [style = dashed, label="0"];
60->59 [style = bold, label=""];
16->22 [style = bold, label=""];
14->4 [style = solid, label="snapshot"];
26->2 [style = solid, label="subKeyGroupRange2"];
5->38 [style = solid, label="maxParallelism"];
55->56 [style = bold, label=""];
24->16 [style = bold, label=""];
14->50 [style = solid, label="snapshot"];
11->34 [style = bold, label=""];
33->51 [style = bold, label=""];
5->2 [style = solid, label="maxParallelism"];
44->52 [style = bold, label=""];
23->1 [style = bold, label=""];
5->8 [style = solid, label="maxParallelism"];
3->43 [style = bold, label=""];
50->21 [style = bold, label=""];
60->53 [style = solid, label="testHarness"];
2->6 [style = solid, label="key2"];
5->12 [style = solid, label="maxParallelism"];
}
