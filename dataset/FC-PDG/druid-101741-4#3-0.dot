digraph {
1 [style = filled, label = "testQuery(\"SELECT COUNT(*) FROM druid.foo\" + \"WHERE EXTRACT(YEAR FROM __time) = 2000\" + \"AND EXTRACT(DAY FROM __time) IN (2, 3, 5)\",ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(QSS(Filtration.eternity())).granularity(Granularities.ALL).aggregators(AGGS(new CountAggregatorFactory(\"a0\"))).filters(AND(EXPRESSION_FILTER(\"(timestamp_extract(\"__time\",'YEAR','UTC') == 2000)\"),OR(EXPRESSION_FILTER(\"(timestamp_extract(\"__time\",'DAY','UTC') == 2)\"),EXPRESSION_FILTER(\"(timestamp_extract(\"__time\",'DAY','UTC') == 3)\"),EXPRESSION_FILTER(\"(timestamp_extract(\"__time\",'DAY','UTC') == 5)\")))).context(TIMESERIES_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9cd158))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "testQuery(\"SELECT COUNT(*) FROM druid.foo\" + \"WHERE EXTRACT(YEAR FROM __time) = 2000\" + \"AND EXTRACT(DAY FROM __time) IN (2, 3, 5)\",ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).aggregators(aggregators(new CountAggregatorFactory(\"a0\"))).filters(and(expressionFilter(\"(timestamp_extract(\"__time\",'YEAR','UTC') == 2000)\"),or(expressionFilter(\"(timestamp_extract(\"__time\",'DAY','UTC') == 2)\"),expressionFilter(\"(timestamp_extract(\"__time\",'DAY','UTC') == 3)\"),expressionFilter(\"(timestamp_extract(\"__time\",'DAY','UTC') == 5)\")))).context(TIMESERIES_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9cd1a0))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testQuery(\"SELECT COUNT(*) FROM druid.foo\" + \"WHERE EXTRACT(YEAR FROM __time) = 2000\" + \"AND EXTRACT(MONTH FROM __time) = 1\",ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(QSS(Filtration.eternity())).granularity(Granularities.ALL).aggregators(AGGS(new CountAggregatorFactory(\"a0\"))).filters(AND(EXPRESSION_FILTER(\"(timestamp_extract(\"__time\",'YEAR','UTC') == 2000)\"),EXPRESSION_FILTER(\"(timestamp_extract(\"__time\",'MONTH','UTC') == 1)\"))).context(TIMESERIES_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9cd1e0))@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testFilterOnTimeExtractWithMultipleDays['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testFilterOnTimeExtract['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testFilterOnTimeExtractWithMultipleDays['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1->2 [style = dashed, label="0"];
1->5 [style = dashed, label="0"];
3->2 [style = bold, label=""];
4->5 [style = bold, label=""];
0->1 [style = bold, label=""];
}
