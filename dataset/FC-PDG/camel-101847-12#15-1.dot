digraph {
22 [style = filled, label = "fileToAdd.createNewFile()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"refs/heads/\" + branchTest,exchanges.get(1).getMessage().getBody().getName())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(gitDir.exists(),true)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Status status = git.status().call()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"refs/heads/master\",exchanges.get(0).getMessage().getBody().getName())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "mockResultBranch.assertIsSatisfied()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Iterable<RevCommit> revCommits = template.requestBody(\"direct:log-branch\",\"\",)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Git git = getGitTestRepository()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<Ref> ref = git.branchList().call()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "refInternal.getName().equals(\"refs/heads/\" + branchTest)@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "branchCreated = true@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(true,gitDir.exists())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "Iterator<RevCommit> gitLogs = git.log().call().iterator()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "File fileToAddDifferent = new File(gitLocalRepo,filenameBranchToAdd)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "File fileToAdd = new File(gitLocalRepo,filenameToAdd)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "branchConsumerTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "MockEndpoint mockResultBranch = getMockEndpoint(\"mock:result-branch\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "git.close()@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<Exchange> exchanges = mockResultBranch.getExchanges()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "git.close()@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "git.branchCreate().setName(branchTest).call()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "List<Ref> ref = git.branchList().call()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(branchCreated,true)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "logBranchTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "branchCreated = true@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "git.add().addFilepattern(filenameBranchToAdd).call()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "git.add().addFilepattern(filenameToAdd).call()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "git.commit().setMessage(commitMessage).call()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(true,branchCreated)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "git.commit().setMessage(commitMessageAll).call()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(gitRevCommit.getShortMessage(),rev.getShortMessage())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "boolean branchCreated = false@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "fileToAddDifferent.createNewFile()@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "File gitDir = new File(gitLocalRepo,\".git\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(gitRevCommit.getName(),rev.getName())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(status.getAdded().contains(filenameToAdd))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "branchConsumerTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "refInternal.getName().equals(\"refs/heads/\" + branchTest)@@@18@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "mockResultBranch.expectedMessageCount(2)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "RevCommit gitRevCommit = gitLogs.next()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->24 [style = dashed, label="0"];
27->26 [style = solid, label="branchCreated"];
34->29 [style = bold, label=""];
12->23 [style = dashed, label="0"];
22->2 [style = bold, label=""];
13->24 [style = bold, label=""];
0->13 [style = bold, label=""];
8->26 [style = solid, label="branchCreated"];
0->13 [style = dotted, label="true"];
29->30 [style = bold, label=""];
8->19 [style = bold, label=""];
35->32 [style = bold, label=""];
14->34 [style = bold, label=""];
19->11 [style = bold, label=""];
23->3 [style = bold, label=""];
30->36 [style = bold, label=""];
31->38 [style = bold, label=""];
3->16 [style = bold, label=""];
17->22 [style = bold, label=""];
2->10 [style = bold, label=""];
9->8 [style = bold, label=""];
1->23 [style = bold, label=""];
39->33 [style = bold, label=""];
28->14 [style = bold, label=""];
14->7 [style = bold, label=""];
13->14 [style = solid, label="branchCreated"];
5->1 [style = bold, label=""];
6->4 [style = bold, label=""];
11->26 [style = bold, label=""];
0->14 [style = bold, label=""];
11->0 [style = bold, label=""];
11->24 [style = solid, label="branchCreated"];
11->27 [style = dotted, label="true"];
11->14 [style = solid, label="branchCreated"];
10->5 [style = bold, label=""];
31->35 [style = bold, label=""];
27->11 [style = bold, label=""];
37->39 [style = bold, label=""];
0->24 [style = bold, label=""];
7->6 [style = bold, label=""];
4->20 [style = bold, label=""];
1->12 [style = bold, label=""];
12->3 [style = bold, label=""];
26->28 [style = bold, label=""];
18->21 [style = bold, label=""];
36->35 [style = bold, label=""];
24->7 [style = bold, label=""];
13->24 [style = solid, label="branchCreated"];
20->15 [style = bold, label=""];
8->11 [style = bold, label=""];
21->17 [style = bold, label=""];
13->14 [style = bold, label=""];
32->31 [style = bold, label=""];
16->9 [style = bold, label=""];
33->22 [style = bold, label=""];
25->21 [style = bold, label=""];
13->0 [style = bold, label=""];
11->27 [style = bold, label=""];
27->26 [style = bold, label=""];
}
