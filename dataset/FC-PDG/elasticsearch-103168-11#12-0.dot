digraph {
17 [style = filled, label = "testIndexOptions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"keyword\").field(\"index_options\",\"freqs\").endObject().endObject().endObject().endObject())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",FIELD_TYPE).field(\"index_options\",\"freqs\").endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(\"The (keyword( field does not support positions, got (index_options(=\" + indexOptions,e.getMessage())@@@13@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testIndexOptions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final String mapping2 = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",FIELD_TYPE).field(\"index_options\",indexOptions).endObject().endObject().endObject().endObject())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final String mapping2 = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"keyword\").field(\"index_options\",indexOptions).endObject().endObject().endObject().endObject())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testIndexOptions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"Unknown value (\" + indexOptions + \"( for field (index_options( - accepted values are (docs, freqs(\",e.getMessage())@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertEquals(\"The (\" + FIELD_TYPE + \"( field does not support positions, got (index_options(=\" + indexOptions,e.getMessage())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(IndexOptions.DOCS_AND_FREQS,fields(0(.fieldType().indexOptions())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "MapperParsingException e = expectThrows(,null)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"1234\").endObject()),XContentType.JSON))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "IllegalArgumentException e = expectThrows(,null)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(2,fields.length)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(mapping,mapper.mappingSource().toString())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->10 [style = solid, label="mapping"];
7->8 [style = bold, label=""];
4->12 [style = dashed, label="0"];
8->5 [style = bold, label=""];
4->16 [style = bold, label=""];
11->0 [style = bold, label=""];
15->4 [style = bold, label=""];
9->3 [style = bold, label=""];
16->15 [style = bold, label=""];
0->14 [style = dashed, label="0"];
17->14 [style = bold, label=""];
9->16 [style = dashed, label="0"];
6->2 [style = bold, label=""];
12->13 [style = bold, label=""];
2->3 [style = bold, label=""];
0->10 [style = bold, label=""];
10->7 [style = bold, label=""];
14->7 [style = solid, label="mapping"];
3->12 [style = bold, label=""];
4->9 [style = bold, label=""];
3->15 [style = dashed, label="0"];
13->3 [style = bold, label=""];
0->7 [style = solid, label="mapping"];
14->10 [style = bold, label=""];
2->15 [style = bold, label=""];
3->4 [style = bold, label=""];
5->6 [style = bold, label=""];
14->10 [style = solid, label="mapping"];
1->0 [style = bold, label=""];
}
