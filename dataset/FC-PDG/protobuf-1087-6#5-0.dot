digraph {
15 [style = filled, label = "i++@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertEquals(2,map.getNumOverflowEntries())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int i = 0@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testEntrySetAdd['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(map.getNumOverflowEntries()).isEqualTo(3)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(map).containsEntry(i,Integer.valueOf(i + 1))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "i < 6@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertEquals(Integer.valueOf(1),map.remove(0))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertNull(map.remove(i + 1))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(6,map.size())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Map.Entry<Integer,Integer> entry = new SimpleEntry<Integer,Integer>(i,i + 1)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertEquals(Integer.valueOf(4),map.remove(3))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "SmallSortedMap<Integer,Integer> map = SmallSortedMap.newInstanceForTest(3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,3,4,5),map.keySet())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Set<Map.Entry<Integer,Integer>> entrySet = map.entrySet()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(entrySet.add(entry)).isFalse()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertEquals(3,map.size())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertEquals(Integer.valueOf(5),map.remove(4))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(Integer.valueOf(2),map.remove(1))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(map).hasSize(6)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertFalse(entrySet.add(entry))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertEquals(5,map.size())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(makeSortedKeySet(0,1,2,3,4,5),map.keySet())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(3,map.size())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(map.getNumArrayEntries()).isEqualTo(3)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(entrySet.add(entry)).isTrue()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "testEntrySetAdd['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "testRemove['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertNull(map.remove(3))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,3,5),map.keySet())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(2,map.getNumArrayEntries())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,5),map.keySet())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "i < 6@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Map.Entry<Integer,Integer> entry = new SimpleEntry<>(i,i + 1)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(Integer.valueOf(i + 1),map.get(i))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "assertNull(map.put(i,i + 1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(3,map.getNumOverflowEntries())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(1,map.getNumOverflowEntries())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(entrySet.add(entry))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertEquals(2,map.size())@@@36@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(4,map.size())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27->13 [style = bold, label=""];
50->32 [style = bold, label=""];
6->3 [style = bold, label=""];
12->45 [style = bold, label=""];
4->16 [style = dashed, label="0"];
12->44 [style = bold, label=""];
12->8 [style = dotted, label="true"];
42->48 [style = bold, label=""];
11->20 [style = solid, label="i"];
9->10 [style = bold, label=""];
12->21 [style = dotted, label="true"];
7->13 [style = solid, label="i"];
49->24 [style = bold, label=""];
12->2 [style = bold, label=""];
11->6 [style = solid, label="i"];
2->8 [style = solid, label="entry"];
35->50 [style = bold, label=""];
48->43 [style = bold, label=""];
2->14 [style = solid, label="entry"];
45->0 [style = bold, label=""];
6->3 [style = dotted, label="true"];
20->15 [style = bold, label=""];
22->13 [style = bold, label=""];
17->16 [style = bold, label=""];
6->15 [style = dotted, label="true"];
1->4 [style = bold, label=""];
13->21 [style = solid, label="i"];
21->19 [style = bold, label=""];
29->39 [style = bold, label=""];
12->21 [style = bold, label=""];
12->44 [style = dotted, label="true"];
30->26 [style = bold, label=""];
12->11 [style = bold, label=""];
12->2 [style = dotted, label="true"];
14->22 [style = dashed, label="0"];
11->3 [style = solid, label="i"];
7->21 [style = solid, label="i"];
10->7 [style = bold, label=""];
13->12 [style = solid, label="i"];
15->6 [style = solid, label="i"];
6->20 [style = dotted, label="true"];
7->12 [style = solid, label="i"];
12->27 [style = dotted, label="true"];
41->30 [style = bold, label=""];
12->22 [style = dotted, label="true"];
13->12 [style = bold, label=""];
2->21 [style = dashed, label="0"];
12->19 [style = dotted, label="true"];
7->27 [style = solid, label="i"];
23->10 [style = bold, label=""];
5->7 [style = bold, label=""];
32->42 [style = bold, label=""];
19->22 [style = bold, label=""];
37->47 [style = bold, label=""];
36->40 [style = bold, label=""];
39->46 [style = bold, label=""];
46->28 [style = bold, label=""];
7->2 [style = solid, label="i"];
34->49 [style = bold, label=""];
6->18 [style = bold, label=""];
43->36 [style = bold, label=""];
8->14 [style = bold, label=""];
31->34 [style = bold, label=""];
6->20 [style = bold, label=""];
4->31 [style = bold, label=""];
12->13 [style = dotted, label="true"];
13->2 [style = solid, label="i"];
10->5 [style = bold, label=""];
13->27 [style = solid, label="i"];
0->1 [style = bold, label=""];
14->13 [style = bold, label=""];
33->37 [style = bold, label=""];
15->20 [style = solid, label="i"];
8->19 [style = dashed, label="0"];
7->12 [style = bold, label=""];
38->10 [style = bold, label=""];
11->6 [style = bold, label=""];
26->25 [style = bold, label=""];
18->17 [style = bold, label=""];
15->6 [style = bold, label=""];
6->0 [style = bold, label=""];
3->15 [style = bold, label=""];
24->29 [style = bold, label=""];
47->35 [style = bold, label=""];
11->15 [style = solid, label="i"];
15->3 [style = solid, label="i"];
12->14 [style = dotted, label="true"];
7->44 [style = solid, label="i"];
13->44 [style = solid, label="i"];
1->17 [style = dashed, label="0"];
28->33 [style = bold, label=""];
3->20 [style = dashed, label="0"];
40->41 [style = bold, label=""];
0->18 [style = dashed, label="0"];
8->27 [style = dashed, label="0"];
44->27 [style = bold, label=""];
2->8 [style = bold, label=""];
}
