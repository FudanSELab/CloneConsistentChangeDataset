digraph {
42 [style = filled, label = "EasyMock.replay(druidServer)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "j++@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int maxSegments@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "segments.add(segment)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Map<SegmentId,DataSegment> segments = new HashMap<>()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "LoadQueuePeonTester fromPeon = new LoadQueuePeonTester()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ServerHolder serverHolder = new ServerHolder(new ImmutableDruidServer(new DruidServerMetadata(serverName,\"localhost\",null,10000000L,ServerType.HISTORICAL,\"hot\",1),3000L,ImmutableMap.of(\"DUMMY\",dataSource),segments.size()),fromPeon)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "setupDummyCluster['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "serverHolderList.add(new ServerHolder(new ImmutableDruidServer(new DruidServerMetadata(\"DruidServer_Name_\" + i,\"localhost\",null,10000000L,ServerType.HISTORICAL,\"hot\",1),3000L,ImmutableMap.of(\"DUMMY\",dataSource),segments.size()),fromPeon))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "return serverHolderList@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "ImmutableDruidServerTests.expectSegments(druidServer,segments.values())@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "serverHolderList.add(serverHolder)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i < serverCount@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expect(druidServer.getLazyAllSegments()).andReturn(segments).anyTimes()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "DataSegment segment = getSegment(j)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "int maxSegments@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "segments.put(segment.getId(),segment)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "List<DataSegment> segments = new ArrayList<>()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "serverHolderList.add(new ServerHolder(druidServer,fromPeon))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "List<DataSegment> segments = IntStream.range(0,maxSegments).mapToObj(null).collect(Collectors.toList())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int serverCount@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int j = 0@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "LoadQueuePeonTester fromPeon = new LoadQueuePeonTester()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "setupDummyCluster['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\",Collections.emptyMap(),segments)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "serverHolderList.add(new ServerHolder(druidServer,fromPeon))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "j < maxSegments@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "int maxSegments@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "EasyMock.expect(druidServer.getLazyAllSegments()).andReturn(segments.values()).anyTimes()@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "String serverName = \"DruidServer_Name_\" + i@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<ServerHolder> serverHolderList = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.expect(druidServer.getMaxSize()).andReturn(100000000L).anyTimes()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "j < (maxSegments - 2)@@@22@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "ImmutableDruidServer druidServer = EasyMock.createMock()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "setupDummyCluster['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "return serverHolderList@@@29@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24->19 [style = solid, label="i"];
26->38 [style = bold, label=""];
24->4 [style = solid, label="i"];
18->20 [style = bold, label=""];
3->42 [style = bold, label=""];
26->37 [style = solid, label="j"];
7->6 [style = bold, label=""];
27->12 [style = solid, label="fromPeon"];
4->17 [style = dotted, label="true"];
7->22 [style = bold, label=""];
13->24 [style = bold, label=""];
26->5 [style = solid, label="j"];
31->14 [style = dotted, label="true"];
39->35 [style = solid, label="fromPeon"];
6->21 [style = bold, label=""];
19->25 [style = solid, label="i"];
16->21 [style = solid, label="druidServer"];
40->33 [style = dotted, label="true"];
40->13 [style = bold, label=""];
18->38 [style = bold, label=""];
31->30 [style = dotted, label="true"];
35->21 [style = bold, label=""];
4->9 [style = dotted, label="true"];
38->5 [style = dotted, label="true"];
42->35 [style = bold, label=""];
9->25 [style = bold, label=""];
10->11 [style = dotted, label="true"];
4->28 [style = dotted, label="true"];
7->23 [style = dotted, label="true"];
28->41 [style = solid, label="fromPeon"];
17->9 [style = solid, label="segments"];
4->25 [style = dotted, label="true"];
0->29 [style = dashed, label="0"];
36->35 [style = solid, label="druidServer"];
37->5 [style = solid, label="segment"];
38->26 [style = dotted, label="true"];
18->38 [style = solid, label="j"];
5->7 [style = solid, label="j"];
26->7 [style = solid, label="j"];
16->12 [style = solid, label="druidServer"];
7->5 [style = dotted, label="true"];
39->36 [style = bold, label=""];
7->32 [style = bold, label=""];
19->41 [style = solid, label="i"];
24->41 [style = solid, label="i"];
6->3 [style = dashed, label="0"];
37->5 [style = bold, label=""];
14->4 [style = solid, label="serverCount"];
17->9 [style = bold, label=""];
4->19 [style = dotted, label="true"];
33->38 [style = solid, label="maxSegments"];
13->15 [style = solid, label="serverHolderList"];
2->8 [style = solid, label="serverHolder"];
5->22 [style = bold, label=""];
29->1 [style = bold, label=""];
7->22 [style = dotted, label="true"];
25->41 [style = dashed, label="0"];
36->42 [style = solid, label="druidServer"];
5->7 [style = bold, label=""];
1->34 [style = bold, label=""];
30->7 [style = solid, label="maxSegments"];
8->19 [style = bold, label=""];
28->17 [style = bold, label=""];
1->0 [style = bold, label=""];
4->41 [style = dotted, label="true"];
18->26 [style = solid, label="j"];
18->37 [style = solid, label="j"];
20->34 [style = dashed, label="0"];
28->2 [style = solid, label="fromPeon"];
9->41 [style = solid, label="dataSource"];
24->4 [style = bold, label=""];
4->27 [style = bold, label=""];
38->37 [style = bold, label=""];
40->14 [style = dotted, label="true"];
16->32 [style = solid, label="druidServer"];
2->8 [style = bold, label=""];
38->22 [style = dotted, label="true"];
16->29 [style = bold, label=""];
25->2 [style = solid, label="serverName"];
13->21 [style = solid, label="serverHolderList"];
10->13 [style = bold, label=""];
19->4 [style = bold, label=""];
31->13 [style = bold, label=""];
38->37 [style = dotted, label="true"];
24->25 [style = solid, label="i"];
9->41 [style = bold, label=""];
7->3 [style = dotted, label="true"];
4->2 [style = dotted, label="true"];
23->3 [style = bold, label=""];
34->18 [style = bold, label=""];
5->22 [style = solid, label="j"];
36->27 [style = bold, label=""];
25->2 [style = bold, label=""];
12->15 [style = bold, label=""];
19->4 [style = solid, label="i"];
4->39 [style = bold, label=""];
41->19 [style = bold, label=""];
3->5 [style = bold, label=""];
21->12 [style = bold, label=""];
32->21 [style = bold, label=""];
27->16 [style = bold, label=""];
4->8 [style = dotted, label="true"];
4->28 [style = bold, label=""];
38->3 [style = bold, label=""];
22->26 [style = bold, label=""];
26->22 [style = solid, label="j"];
26->38 [style = solid, label="j"];
7->38 [style = dashed, label="0"];
23->5 [style = dashed, label="0"];
11->7 [style = solid, label="maxSegments"];
9->2 [style = solid, label="dataSource"];
26->7 [style = bold, label=""];
22->23 [style = bold, label=""];
20->26 [style = bold, label=""];
10->14 [style = dotted, label="true"];
0->18 [style = bold, label=""];
22->23 [style = solid, label="segment"];
}
