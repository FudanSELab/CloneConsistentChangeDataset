digraph {
5 [style = filled, label = "final String sql = toSql(root)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testUnparseInStruct1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final String sql = unparseRelTree(empScan.filter(condition).build())@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final RelBuilder builder = relBuilder().scan(\"EMP\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testUnparseInStruct2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final RexNode condition = builder.call(SqlStdOperatorTable.IN,builder.call(SqlStdOperatorTable.ROW,builder.field(\"DEPTNO\"),builder.field(\"JOB\")),builder.call(SqlStdOperatorTable.ROW,builder.literal(1),builder.literal(\"PRESIDENT\")))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RelNode root = relBuilder().scan(\"EMP\").filter(condition).build()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "final String expectedSql = \"SELECT *\" + \"FROM \"scott\".\"EMP\"\" + \"WHERE ROW(\"DEPTNO\", \"JOB\") IN (ROW(1, 'PRESIDENT'), ROW(2, 'PRESIDENT'))\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testUnparseInStruct1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(sql,isLinux(expectedSql))@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final RexNode condition = builder.call(SqlStdOperatorTable.IN,builder.call(SqlStdOperatorTable.ROW,builder.field(\"DEPTNO\"),builder.field(\"JOB\")),builder.call(SqlStdOperatorTable.ROW,builder.literal(1),builder.literal(\"PRESIDENT\")),builder.call(SqlStdOperatorTable.ROW,builder.literal(2),builder.literal(\"PRESIDENT\")))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final String expectedSql = \"SELECT *\" + \"FROM \"scott\".\"EMP\"\" + \"WHERE ROW(\"DEPTNO\", \"JOB\") IN (ROW(1, 'PRESIDENT'))\"@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(sql,isLinux(expectedSql))@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
7->5 [style = solid, label="root"];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
11->1 [style = bold, label=""];
3->9 [style = solid, label="expectedSql"];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
0->11 [style = dashed, label="0"];
5->9 [style = solid, label="sql"];
1->3 [style = solid, label="sql"];
4->12 [style = dashed, label="0"];
0->7 [style = bold, label=""];
3->9 [style = bold, label=""];
7->5 [style = bold, label=""];
2->0 [style = bold, label=""];
4->3 [style = solid, label="expectedSql"];
0->1 [style = bold, label=""];
1->12 [style = bold, label=""];
12->3 [style = bold, label=""];
1->7 [style = dashed, label="0"];
12->3 [style = solid, label="expectedSql"];
10->11 [style = bold, label=""];
}
