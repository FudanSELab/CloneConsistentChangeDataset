digraph {
0 [style = filled, label = "assertNoMoreEvents()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(cache.getCurrentChildren(\"/test\").keySet(),ImmutableSet.of(\"one\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testWithNamespace['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "client.create().forPath(\"/test/one\",\"hey there\".getBytes())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/test\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEvent(TreeCacheEvent.Type.INITIALIZED)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "client.create().forPath(\"/outer/test\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEvent(TreeCacheEvent.Type.INITIALIZED)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNoMoreEvents()@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()),\"hey there\")@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/test/one\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "cache = new TreeCache(client.usingNamespace(\"outer\"),\"/test\",true)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "client.create().forPath(\"/test\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testAsyncInitialPopulation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "client.create().forPath(\"/outer\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/test/one\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "client.create().forPath(\"/outer/foo\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "cache.start()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "cache = new MyTreeCache(client.usingNamespace(\"outer\"),\"/test\",true)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testWithNamespace['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "client.create().forPath(\"/outer/test/one\",\"hey there\".getBytes())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(cache.getCurrentChildren(\"/test/one\").keySet(),ImmutableSet.of())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
9->11 [style = bold, label=""];
1->14 [style = dashed, label="0"];
7->12 [style = bold, label=""];
19->20 [style = bold, label=""];
3->18 [style = dashed, label="0"];
0->2 [style = bold, label=""];
18->19 [style = bold, label=""];
15->3 [style = bold, label=""];
12->1 [style = bold, label=""];
3->4 [style = bold, label=""];
4->7 [style = bold, label=""];
1->9 [style = bold, label=""];
20->21 [style = bold, label=""];
8->0 [style = bold, label=""];
10->8 [style = bold, label=""];
11->10 [style = bold, label=""];
5->13 [style = bold, label=""];
12->14 [style = bold, label=""];
21->16 [style = bold, label=""];
4->19 [style = dashed, label="0"];
14->9 [style = bold, label=""];
16->9 [style = bold, label=""];
17->18 [style = bold, label=""];
2->5 [style = bold, label=""];
}
