digraph {
15 [style = filled, label = "assertTrue(testDriver.isEmpty(\"result-topic\"))@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "testDriver.pipeInput(recordFactory.create(\"input-topic\",\"a\",1L,10000L))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "compareKeyValue(testDriver.readRecord(\"result-topic\",stringDeserializer,longDeserializer),\"a\",21L)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testDriver.pipeInput(recordFactory.create(\"input-topic\",\"a\",42L,9999L))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "shouldNotUpdateStoreForLargerValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertNull(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer))@@@7@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "pipeInput(\"input-topic\",\"a\",1L,9999L)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "setup()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "shouldPunctuateIfEvenTimeAdvances['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testDriver.pipeInput(recordFactory.create(\"input-topic\",\"a\",1L,9999L))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "shouldPunctuateIfEvenTimeAdvances['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testDriver.pipeInput(recordFactory.create(\"input-topic\",\"a\",1L,9999L))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "pipeInput(\"input-topic\",\"a\",1L,9999L)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertNull(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer))@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "OutputVerifier.compareKeyValue(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer),\"a\",42L)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(testDriver.isEmpty(\"result-topic\"))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "OutputVerifier.compareKeyValue(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer),\"a\",21L)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "compareKeyValue(testDriver.readRecord(\"result-topic\",stringDeserializer,longDeserializer),\"a\",21L)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "pipeInput(\"input-topic\",\"a\",1L,10000L)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "OutputVerifier.compareKeyValue(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer),\"a\",21L)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertThat(store.get(\"a\"),equalTo(42L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->13 [style = dashed, label="0"];
0->3 [style = bold, label=""];
16->15 [style = bold, label=""];
7->16 [style = dashed, label="0"];
11->12 [style = bold, label=""];
0->11 [style = dashed, label="0"];
7->8 [style = bold, label=""];
2->17 [style = dashed, label="0"];
3->4 [style = bold, label=""];
13->16 [style = bold, label=""];
1->17 [style = bold, label=""];
20->18 [style = bold, label=""];
6->1 [style = bold, label=""];
19->1 [style = bold, label=""];
2->0 [style = bold, label=""];
12->10 [style = bold, label=""];
3->12 [style = dashed, label="0"];
18->4 [style = bold, label=""];
2->14 [style = dashed, label="0"];
10->13 [style = bold, label=""];
5->7 [style = bold, label=""];
1->14 [style = bold, label=""];
1->2 [style = bold, label=""];
9->1 [style = bold, label=""];
14->11 [style = bold, label=""];
4->5 [style = bold, label=""];
17->20 [style = bold, label=""];
}
