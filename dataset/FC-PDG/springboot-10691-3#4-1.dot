digraph {
16 [style = filled, label = "RequestMatcher matcher = EndpointRequest.toAnyEndpoint().excluding(,)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "excludeByClassShouldNotMatchExcluded['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "excludeByClassShouldNotMatchExcluded['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertMatcher(matcher,pathMappedEndpoints).doesNotMatch(\"/actuator/baz\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ServerWebExchangeMatcher matcher = EndpointRequest.toAnyEndpoint().excluding(,)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "endpoints.add(mockEndpoint(EndpointId.of(\"foo\"),\"foo\"))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "endpoints.add(mockEndpoint(\"foo\",\"foo\"))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertMatcher(matcher).matches(\"/actuator/bar\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints(\"/actuator\",null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<ExposableEndpoint<?>> endpoints = new ArrayList<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "endpoints.add(mockEndpoint(\"baz\",\"baz\"))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "endpoints.add(mockEndpoint(\"bar\",\"bar\"))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "excludeByClassShouldNotMatchExcluded['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertMatcher(matcher,pathMappedEndpoints).doesNotMatch(\"/actuator/foo\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "endpoints.add(mockEndpoint(EndpointId.of(\"bar\"),\"bar\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertMatcher(matcher).matches(\"/actuator\")@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "endpoints.add(mockEndpoint(EndpointId.of(\"baz\"),\"baz\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16->0 [style = bold, label=""];
4->6 [style = bold, label=""];
0->11 [style = bold, label=""];
10->13 [style = dashed, label="0"];
8->14 [style = dashed, label="0"];
15->16 [style = bold, label=""];
2->4 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
5->2 [style = bold, label=""];
10->8 [style = bold, label=""];
1->11 [style = dashed, label="0"];
0->1 [style = bold, label=""];
11->13 [style = bold, label=""];
8->9 [style = bold, label=""];
9->5 [style = bold, label=""];
14->9 [style = bold, label=""];
12->3 [style = bold, label=""];
1->10 [style = bold, label=""];
13->14 [style = bold, label=""];
3->16 [style = dashed, label="0"];
}
