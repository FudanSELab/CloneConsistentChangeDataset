digraph {
0 [style = filled, label = "testNonEquiJoinPlan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "CalciteAssert.model(JdbcTest.SCOTT_MODEL).query(\"select empno, ename, grade \" + \"from scott.emp e inner join scott.salgrade s \" + \"on e.sal > s.losal and e.sal < s.hisal\").explainContains(\"PLAN=JdbcToEnumerableConverter\" + \" JdbcProject(EMPNO=($0(, ENAME=($1(, GRADE=($3()\" + \" JdbcJoin(condition=(AND(>($2, $4), <($2, $5))(, joinType=(inner()\" + \" JdbcProject(EMPNO=($0(, ENAME=($1(, SAL=($5()\" + \" JdbcTableScan(table=((SCOTT, EMP(()\" + \" JdbcTableScan(table=((SCOTT, SALGRADE(()\").runs().enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB).planHasSql(\"SELECT \"t\".\"EMPNO\", \"t\".\"ENAME\", \" + \"\"SALGRADE\".\"GRADE\"\" + \"FROM (SELECT \"EMPNO\", \"ENAME\", \"SAL\"FROM \"SCOTT\".\"EMP\") AS \"t\"\" + \"INNER JOIN \"SCOTT\".\"SALGRADE\" ON \"t\".\"SAL\" > \"SALGRADE\".\"LOSAL\" AND \"t\".\"SAL\" < \"SALGRADE\".\"HISAL\"\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testNonEquiJoinPlan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "CalciteAssert.model(JdbcTest.SCOTT_MODEL).query(\"select empno, ename, grade \" + \"from scott.emp e inner join scott.salgrade s \" + \"on e.sal > s.losal and e.sal < s.hisal\").explainContains(\"PLAN=JdbcToEnumerableConverter\" + \" JdbcProject(EMPNO=($3(, ENAME=($4(, GRADE=($0()\" + \" JdbcJoin(condition=(AND(>($5, $1), <($5, $2))(, joinType=(inner()\" + \" JdbcTableScan(table=((SCOTT, SALGRADE(()\" + \" JdbcProject(EMPNO=($0(, ENAME=($1(, SAL=($5()\" + \" JdbcTableScan(table=((SCOTT, EMP(()\").runs().enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB).planHasSql(\"SELECT \"t\".\"EMPNO\", \"t\".\"ENAME\", \" + \"\"SALGRADE\".\"GRADE\"\" + \"FROM \"SCOTT\".\"SALGRADE\"\" + \"INNER JOIN (SELECT \"EMPNO\", \"ENAME\", \"SAL\"\" + \"FROM \"SCOTT\".\"EMP\") AS \"t\" \" + \"ON \"SALGRADE\".\"LOSAL\" < \"t\".\"SAL\" \" + \"AND \"SALGRADE\".\"HISAL\" > \"t\".\"SAL\"\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "CalciteAssert.model(JdbcTest.SCOTT_MODEL).query(\"select empno, ename, grade \" + \"from scott.emp e inner join scott.salgrade s \" + \"on s.losal <= e.sal and s.hisal >= e.sal\").explainContains(\"PLAN=JdbcToEnumerableConverter\" + \" JdbcProject(EMPNO=($3(, ENAME=($4(, GRADE=($0()\" + \" JdbcJoin(condition=(AND(<=($1, $5), >=($2, $5))(, joinType=(inner()\" + \" JdbcTableScan(table=((SCOTT, SALGRADE(()\" + \" JdbcProject(EMPNO=($0(, ENAME=($1(, SAL=($5()\" + \" JdbcTableScan(table=((SCOTT, EMP(()\").runs().enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB).planHasSql(\"SELECT \"t\".\"EMPNO\", \"t\".\"ENAME\", \" + \"\"SALGRADE\".\"GRADE\"\" + \"FROM \"SCOTT\".\"SALGRADE\"\" + \"INNER JOIN (SELECT \"EMPNO\", \"ENAME\", \"SAL\"\" + \"FROM \"SCOTT\".\"EMP\") AS \"t\" \" + \"ON \"SALGRADE\".\"LOSAL\" <= \"t\".\"SAL\" \" + \"AND \"SALGRADE\".\"HISAL\" >= \"t\".\"SAL\"\")@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testNonEquiJoinReverseConditionPlan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->4 [style = dashed, label="0"];
1->3 [style = dashed, label="0"];
0->1 [style = bold, label=""];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
}
