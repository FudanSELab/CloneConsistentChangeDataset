digraph {
34 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "byte(( buf = new byte((((@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "sslSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int bytesRead = sslSocket.getInputStream().read(buf,0,buf.length)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "badClientSocket = connectWithoutSSL()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "handshakeCompletedLock.wait(TIMEOUT)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testTLSDetectionNonBlockingStrictServerIdleClient['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "!handshakeCompleted@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(handshakeCompleted)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Socket secureClientSocket = null@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "serverThread.start()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "byte(( buf = new byte((((@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Socket badClientSocket = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "secureClientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "{forceClose(badClientSocket)forceClose(secureClientSocket)serverThread.shutdown(TIMEOUT)}@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "serverThread.start()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "sslSocket.getOutputStream().flush()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,false,DATA_TO_CLIENT)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testConnectWithSSLToStrictServer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,false,DATA_TO_CLIENT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testConnectWithSSLToStrictServer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "!handshakeCompleted@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "handshakeCompletedLock@@@16@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "secureClientSocket = connectWithSSL()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "int bytesRead = secureClientSocket.getInputStream().read(buf,0,buf.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,false,DATA_TO_CLIENT)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "secureClientSocket.getOutputStream().flush()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertTrue(handshakeCompleted)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
7->2 [style = dotted, label="true"];
21->10 [style = bold, label=""];
7->11 [style = bold, label=""];
2->19 [style = bold, label=""];
30->33 [style = bold, label=""];
15->14 [style = bold, label=""];
27->2 [style = solid, label="bytesRead"];
3->25 [style = bold, label=""];
26->3 [style = bold, label=""];
17->9 [style = bold, label=""];
9->27 [style = solid, label="buf"];
33->4 [style = bold, label=""];
22->9 [style = bold, label=""];
2->34 [style = bold, label=""];
9->11 [style = dotted, label="true"];
18->17 [style = bold, label=""];
14->10 [style = bold, label=""];
31->29 [style = bold, label=""];
12->0 [style = solid, label="buf"];
0->27 [style = dashed, label="0"];
26->13 [style = dotted, label="true"];
9->7 [style = bold, label=""];
32->30 [style = bold, label=""];
12->0 [style = bold, label=""];
0->18 [style = solid, label="bytesRead"];
34->11 [style = bold, label=""];
26->13 [style = bold, label=""];
1->9 [style = bold, label=""];
11->26 [style = dotted, label="true"];
28->24 [style = solid, label="secureClientSocket"];
19->16 [style = bold, label=""];
9->34 [style = solid, label="buf"];
20->21 [style = bold, label=""];
29->28 [style = bold, label=""];
9->27 [style = bold, label=""];
8->1 [style = bold, label=""];
4->31 [style = bold, label=""];
25->24 [style = bold, label=""];
4->3 [style = solid, label="sslSocket"];
12->17 [style = solid, label="buf"];
9->19 [style = dotted, label="true"];
1->17 [style = dashed, label="0"];
23->22 [style = bold, label=""];
5->6 [style = bold, label=""];
13->3 [style = bold, label=""];
11->19 [style = dashed, label="0"];
28->23 [style = bold, label=""];
7->2 [style = bold, label=""];
29->24 [style = solid, label="badClientSocket"];
11->13 [style = bold, label=""];
0->8 [style = bold, label=""];
10->4 [style = bold, label=""];
0->18 [style = bold, label=""];
14->21 [style = dashed, label="0"];
8->18 [style = dashed, label="0"];
9->7 [style = dotted, label="true"];
11->3 [style = dotted, label="true"];
12->1 [style = solid, label="buf"];
7->19 [style = bold, label=""];
4->5 [style = bold, label=""];
2->11 [style = bold, label=""];
27->2 [style = bold, label=""];
0->8 [style = solid, label="bytesRead"];
11->26 [style = bold, label=""];
13->16 [style = dashed, label="0"];
6->12 [style = bold, label=""];
}
