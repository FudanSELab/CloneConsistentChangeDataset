digraph {
126 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "finalExpectation.entrySet()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "List<Iterable<Result<SearchResultValue>>> results = new ArrayList<>()@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@80@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "final List<Interval> queryIntervals = Lists.newArrayListWithCapacity(args.length / 2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "expectations@@@82@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
137 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final Iterable<Result<Object>> expected = new ArrayList<>()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Query capturedQuery = capturedQueryPlus.getQuery()@@@131@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "query instanceof TopNQuery@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "results.add(expectation.getResults())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "expectations@@@49@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Assert.assertTrue(capturedQuery.getContextValue(\"bySegment\") == null || capturedQuery.getContextValue(\"bySegment\").equals(false))@@@136@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "List<Capture> queryCaptures = new ArrayList<>()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
131 [style = filled, label = "intervalNo++@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeseriesResults(expectBySegment,segmentIds,intervals,results)).once()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "results.add(expectation.getResults())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
128 [style = filled, label = "ServerExpectation expectation@@@24@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
133 [style = filled, label = "Iterables.addAll((List)expected,filteredExpected.get(intervalNo))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
117 [style = filled, label = "final int numTimesToQuery@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
87 [style = filled, label = "results.add(expectation.getResults())@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
120 [style = filled, label = "testQueryCaching['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "ServerExpectation expectation@@@71@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "final QueryRunner runner@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@57@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
108 [style = filled, label = "expectations@@@82@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "DruidServer server = entry.getKey()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "final int expectedResultsRangeStart@@@93@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "final Capture<? extends QueryPlus> capture = new Capture()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
132 [style = filled, label = "testQueryCachingWithFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "queryCaptures@@@129@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSearchResults(segmentIds,intervals,results)).once()@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
125 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final int numTimesToQuery@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "queryCaptures@@@129@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeBoundaryResults(segmentIds,intervals,results)).once()@@@87@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSelectResults(segmentIds,intervals,results)).once()@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "final Map<DruidServer,ServerExpectations> finalExpectation = serverExpectationList.get(serverExpectationList.size() - 1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
118 [style = filled, label = "Capture queryCapture@@@129@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
88 [style = filled, label = "query instanceof TimeBoundaryQuery@@@78@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "query instanceof GroupByQuery@@@67@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "Assert.assertEquals(true,capturedQuery.getContextValue(\"bySegment\"))@@@133@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
130 [style = filled, label = "Object args@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
107 [style = filled, label = "ServerExpectation expectation@@@38@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
94 [style = filled, label = "intervals.add(expectation.getInterval())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<Iterable<Result<SelectResultValue>>> results = new ArrayList<>()@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "List<Iterable<Result<TimeBoundaryResultValue>>> results = new ArrayList<>()@@@81@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@15@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
136 [style = filled, label = "int intervalNo = 0@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "i < queryIntervals.size()@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
122 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andAnswer(new IAnswer<Sequence>(){@Override public Sequence answer(){return toFilteredQueryableTimeseriesResults((TimeseriesQuery)capture.getValue().getQuery(),segmentIds,queryIntervals,results)}}).times(0,1)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "expectations@@@38@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){HashMap<String,Object> context = new HashMap<>()for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(expected,runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval)))),context))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@79@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).once()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "results.add(expectation.getResults())@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "List<Iterable<Row>> results = new ArrayList<>()@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
129 [style = filled, label = "final int numTimesToQuery@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "query instanceof TimeBoundaryQuery@@@95@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "query instanceof SearchQuery@@@45@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
111 [style = filled, label = "expectations@@@71@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "expectedResultsRangeStart = i@@@96@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "intervals.add(expectation.getInterval())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "intervals.add(expectation.getInterval())@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "expectations@@@60@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@83@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "expectations@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "final Interval actualQueryInterval = new Interval(queryIntervals.get(0).getStart(),queryIntervals.get(i).getEnd())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final List<List<Iterable<Result<Object>>>> expectedResults = Lists.newArrayListWithCapacity(queryIntervals.size())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableGroupByResults(segmentIds,intervals,results)).once()@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "ServerExpectation expectation@@@49@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "final Capture<? extends Map> context = new Capture()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
135 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).times(0,1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "QueryRunner queryable = expectations.getQueryRunner()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "expectations@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Query query@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "ServerExpectation expectation@@@82@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "final Query query@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
64 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "parseResults(queryIntervals,expectedResults,args)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "expectations@@@49@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
104 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "List<Object> mocks = new ArrayList<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@101@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
138 [style = filled, label = "final List<String> segmentIds = new ArrayList<>()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "results.add(expectation.getResults())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "testQueryCaching['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@79@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
96 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
113 [style = filled, label = "boolean expectBySegment@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
103 [style = filled, label = "ServerExpectation expectation@@@60@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "queryCaptures.add(capture)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
127 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@14@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
134 [style = filled, label = "intervalNo < i + 1@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@15@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Object args@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "query instanceof TimeseriesQuery@@@21@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
115 [style = filled, label = "Object args@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "expectations@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "intervals.add(expectation.getInterval())@@@84@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
139 [style = filled, label = "expectations@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
121 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "final QueryRunner runner@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "List<Iterable<Result<TopNResultValue>>> results = new ArrayList<>()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "results.add(expectation.getResults())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@68@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
68 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTopNResults(segmentIds,intervals,results)).once()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
124 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> filteredExpected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "List<String> segmentIds = new ArrayList<>()@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
62 [style = filled, label = "ServerExpectations expectations = entry.getValue()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "mocks.add(serverView)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
123 [style = filled, label = "final Query query@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "++i@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "results.add(expectation.getResults())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
72 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "query instanceof SelectQuery@@@56@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "expectations@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "intervals.add(expectation.getInterval())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final List<Map<DruidServer,ServerExpectations>> serverExpectationList = populateTimeline(queryIntervals,expectedResults,i,mocks)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "intervals.add(expectation.getInterval())@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectBySegment@@@132@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "ServerExpectation expectation@@@71@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "QueryPlus capturedQueryPlus = (QueryPlus)queryCapture.getValue()@@@130@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
119 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@68@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){HashMap<String,List> context = new HashMap<String,List>()for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(new MergeIterable<>(Comparators.naturalNullsFirst(),FunctionalIterable.create(new RangeIterable(expectedResultsRangeStart,expectedResultsRangeEnd)).transformCat(new Function<Integer,Iterable<Iterable<Result<Object>>>>(){@Override public Iterable<Iterable<Result<Object>>> apply(@Nullable Integer input){List<Iterable<Result<Object>>> retVal = new ArrayList<>()final Map<DruidServer,ServerExpectations> exps = serverExpectationList.get(input)for (ServerExpectations expectations : exps.values()){for (ServerExpectation expectation : expectations){retVal.add(expectation.getResults())}}return retVal}})),runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval)))),context))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@103@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
114 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@57@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
120->112 [style = dotted, label="true"];
45->109 [style = dotted, label="true"];
45->102 [style = dotted, label="true"];
42->82 [style = bold, label=""];
45->135 [style = dotted, label="true"];
60->32 [style = bold, label=""];
31->90 [style = dotted, label="false"];
131->133 [style = solid, label="intervalNo"];
71->60 [style = bold, label=""];
11->77 [style = dotted, label="true"];
70->43 [style = bold, label=""];
92->31 [style = dotted, label="false"];
12->18 [style = bold, label=""];
94->5 [style = bold, label=""];
49->4 [style = bold, label=""];
31->3 [style = dotted, label="true"];
71->60 [style = dotted, label="false"];
24->53 [style = bold, label=""];
84->2 [style = bold, label=""];
136->134 [style = bold, label=""];
89->96 [style = bold, label=""];
45->134 [style = dotted, label="true"];
50->49 [style = bold, label=""];
45->49 [style = dotted, label="true"];
97->110 [style = dotted, label="true"];
90->119 [style = dotted, label="true"];
88->108 [style = dotted, label="true"];
80->106 [style = dashed, label="0"];
31->96 [style = dotted, label="true"];
54->2 [style = bold, label=""];
123->97 [style = solid, label="query"];
25->82 [style = bold, label=""];
68->45 [style = bold, label=""];
87->79 [style = bold, label=""];
10->1 [style = bold, label=""];
122->2 [style = bold, label=""];
43->12 [style = solid, label="i"];
122->4 [style = bold, label=""];
100->43 [style = solid, label="context"];
92->36 [style = dotted, label="true"];
65->137 [style = dashed, label="0"];
101->91 [style = bold, label=""];
9->93 [style = bold, label=""];
26->135 [style = dashed, label="0"];
90->119 [style = bold, label=""];
62->43 [style = solid, label="expectations"];
135->39 [style = bold, label=""];
134->131 [style = dotted, label="true"];
46->105 [style = dashed, label="0"];
31->114 [style = bold, label=""];
106->74 [style = bold, label=""];
43->70 [style = solid, label="i"];
100->60 [style = solid, label="context"];
19->66 [style = bold, label=""];
84->49 [style = bold, label=""];
45->71 [style = dotted, label="true"];
92->91 [style = dotted, label="true"];
5->13 [style = bold, label=""];
52->6 [style = bold, label=""];
45->26 [style = dotted, label="true"];
4->136 [style = bold, label=""];
65->8 [style = solid, label="expectBySegment"];
97->5 [style = dotted, label="true"];
112->88 [style = solid, label="query"];
97->122 [style = dotted, label="true"];
98->24 [style = bold, label=""];
32->45 [style = bold, label=""];
66->23 [style = bold, label=""];
45->136 [style = dotted, label="true"];
92->31 [style = bold, label=""];
8->20 [style = dotted, label="false"];
71->12 [style = bold, label=""];
62->135 [style = bold, label=""];
6->96 [style = bold, label=""];
100->55 [style = bold, label=""];
85->2 [style = bold, label=""];
26->39 [style = bold, label=""];
132->81 [style = bold, label=""];
57->52 [style = bold, label=""];
98->50 [style = bold, label=""];
49->4 [style = dashed, label="0"];
90->50 [style = dotted, label="true"];
45->55 [style = dotted, label="true"];
31->84 [style = dotted, label="true"];
97->11 [style = bold, label=""];
80->138 [style = dashed, label="0"];
71->18 [style = dotted, label="true"];
82->73 [style = bold, label=""];
120->65 [style = dotted, label="true"];
16->121 [style = dashed, label="0"];
90->88 [style = bold, label=""];
45->97 [style = dotted, label="true"];
97->106 [style = dotted, label="true"];
27->44 [style = bold, label=""];
46->61 [style = bold, label=""];
43->9 [style = solid, label="i"];
50->2 [style = bold, label=""];
45->59 [style = dotted, label="true"];
11->73 [style = dotted, label="true"];
113->8 [style = solid, label="expectBySegment"];
117->43 [style = solid, label="numTimesToQuery"];
132->130 [style = dotted, label="true"];
11->92 [style = bold, label=""];
22->104 [style = dashed, label="0"];
45->93 [style = dotted, label="true"];
5->30 [style = bold, label=""];
71->12 [style = dotted, label="true"];
136->134 [style = solid, label="intervalNo"];
45->32 [style = dotted, label="true"];
60->9 [style = solid, label="i"];
72->13 [style = bold, label=""];
100->58 [style = bold, label=""];
119->1 [style = bold, label=""];
45->58 [style = dotted, label="true"];
4->71 [style = bold, label=""];
54->49 [style = bold, label=""];
45->23 [style = dotted, label="true"];
90->111 [style = dotted, label="true"];
17->71 [style = solid, label="query"];
126->2 [style = bold, label=""];
90->10 [style = dotted, label="true"];
112->92 [style = solid, label="query"];
16->29 [style = bold, label=""];
31->75 [style = dotted, label="true"];
11->107 [style = dotted, label="true"];
44->49 [style = bold, label=""];
74->125 [style = dashed, label="0"];
14->35 [style = solid, label="args"];
31->57 [style = bold, label=""];
120->113 [style = dotted, label="true"];
7->42 [style = bold, label=""];
1->76 [style = bold, label=""];
17->97 [style = solid, label="query"];
62->26 [style = bold, label=""];
90->1 [style = dotted, label="true"];
114->52 [style = bold, label=""];
90->24 [style = dotted, label="true"];
92->27 [style = dotted, label="true"];
97->80 [style = dotted, label="true"];
92->121 [style = dotted, label="true"];
78->101 [style = bold, label=""];
69->79 [style = bold, label=""];
112->90 [style = solid, label="query"];
125->72 [style = bold, label=""];
45->41 [style = dotted, label="true"];
64->2 [style = bold, label=""];
97->138 [style = dotted, label="true"];
112->71 [style = solid, label="query"];
43->45 [style = solid, label="i"];
68->9 [style = solid, label="i"];
57->114 [style = dashed, label="0"];
90->88 [style = dotted, label="false"];
133->131 [style = bold, label=""];
11->22 [style = bold, label=""];
134->133 [style = dotted, label="true"];
74->28 [style = bold, label=""];
99->65 [style = dotted, label="true"];
97->11 [style = dotted, label="false"];
38->43 [style = solid, label="numTimesToQuery"];
89->84 [style = bold, label=""];
90->48 [style = dotted, label="true"];
88->61 [style = dotted, label="true"];
60->45 [style = solid, label="i"];
20->32 [style = bold, label=""];
97->128 [style = dotted, label="true"];
71->70 [style = dotted, label="false"];
45->33 [style = dotted, label="true"];
11->22 [style = dotted, label="true"];
13->94 [style = bold, label=""];
45->56 [style = dotted, label="true"];
11->92 [style = dotted, label="false"];
80->74 [style = bold, label=""];
18->43 [style = bold, label=""];
45->19 [style = bold, label=""];
132->137 [style = dotted, label="true"];
4->60 [style = solid, label="expected"];
11->104 [style = bold, label=""];
45->21 [style = dotted, label="true"];
23->9 [style = bold, label=""];
43->56 [style = bold, label=""];
2->62 [style = bold, label=""];
132->124 [style = dotted, label="true"];
92->121 [style = bold, label=""];
81->9 [style = solid, label="queryIntervals"];
31->89 [style = dotted, label="true"];
99->17 [style = dotted, label="true"];
41->8 [style = bold, label=""];
105->61 [style = bold, label=""];
8->20 [style = bold, label=""];
136->133 [style = solid, label="intervalNo"];
92->83 [style = dotted, label="true"];
92->116 [style = dotted, label="true"];
120->115 [style = dotted, label="true"];
92->44 [style = dotted, label="true"];
15->35 [style = solid, label="expectedResults"];
88->40 [style = dotted, label="true"];
11->7 [style = dotted, label="true"];
44->2 [style = bold, label=""];
11->37 [style = dotted, label="true"];
97->72 [style = dotted, label="true"];
53->98 [style = bold, label=""];
90->10 [style = bold, label=""];
39->100 [style = bold, label=""];
10->119 [style = dashed, label="0"];
88->47 [style = dotted, label="true"];
15->35 [style = bold, label=""];
88->46 [style = bold, label=""];
9->85 [style = bold, label=""];
81->35 [style = solid, label="queryIntervals"];
81->15 [style = bold, label=""];
88->63 [style = dotted, label="true"];
29->78 [style = bold, label=""];
68->18 [style = solid, label="i"];
88->69 [style = dotted, label="true"];
68->12 [style = solid, label="i"];
126->4 [style = bold, label=""];
45->2 [style = dotted, label="true"];
88->87 [style = dotted, label="true"];
61->69 [style = bold, label=""];
88->79 [style = dotted, label="true"];
92->101 [style = dotted, label="true"];
115->35 [style = solid, label="args"];
17->92 [style = solid, label="query"];
97->125 [style = dotted, label="true"];
131->134 [style = solid, label="intervalNo"];
15->9 [style = solid, label="expectedResults"];
68->45 [style = solid, label="i"];
31->52 [style = dotted, label="true"];
68->43 [style = solid, label="i"];
45->127 [style = dotted, label="true"];
45->19 [style = dotted, label="true"];
92->16 [style = bold, label=""];
31->57 [style = dotted, label="true"];
134->133 [style = bold, label=""];
87->54 [style = bold, label=""];
20->56 [style = bold, label=""];
90->98 [style = dotted, label="true"];
31->114 [style = dotted, label="true"];
77->49 [style = bold, label=""];
40->87 [style = bold, label=""];
90->76 [style = dotted, label="true"];
43->18 [style = solid, label="i"];
58->55 [style = bold, label=""];
130->35 [style = solid, label="args"];
90->67 [style = dotted, label="true"];
19->9 [style = solid, label="mocks"];
17->11 [style = solid, label="query"];
77->2 [style = bold, label=""];
97->139 [style = dotted, label="true"];
11->25 [style = dotted, label="true"];
132->123 [style = dotted, label="true"];
30->122 [style = dashed, label="0"];
91->27 [style = bold, label=""];
45->66 [style = dotted, label="true"];
138->125 [style = bold, label=""];
25->77 [style = bold, label=""];
64->49 [style = bold, label=""];
30->2 [style = bold, label=""];
97->34 [style = dotted, label="true"];
60->134 [style = solid, label="i"];
79->40 [style = bold, label=""];
90->53 [style = dotted, label="true"];
97->80 [style = bold, label=""];
56->41 [style = bold, label=""];
45->4 [style = dotted, label="true"];
30->49 [style = bold, label=""];
68->60 [style = solid, label="i"];
99->38 [style = dotted, label="true"];
112->11 [style = solid, label="query"];
75->89 [style = bold, label=""];
97->138 [style = bold, label=""];
13->122 [style = bold, label=""];
11->0 [style = dotted, label="true"];
45->43 [style = dotted, label="true"];
88->54 [style = dotted, label="true"];
8->95 [style = bold, label=""];
11->104 [style = dotted, label="true"];
104->7 [style = bold, label=""];
96->75 [style = bold, label=""];
31->86 [style = dotted, label="true"];
17->90 [style = solid, label="query"];
13->72 [style = bold, label=""];
97->28 [style = dotted, label="true"];
60->70 [style = bold, label=""];
31->6 [style = dotted, label="true"];
129->60 [style = solid, label="numTimesToQuery"];
22->7 [style = bold, label=""];
27->101 [style = bold, label=""];
45->9 [style = dotted, label="true"];
39->58 [style = solid, label="capture"];
112->31 [style = solid, label="query"];
55->97 [style = bold, label=""];
95->32 [style = bold, label=""];
93->85 [style = bold, label=""];
88->64 [style = bold, label=""];
99->81 [style = bold, label=""];
99->51 [style = dotted, label="true"];
23->60 [style = solid, label="actualQueryInterval"];
45->39 [style = dotted, label="true"];
131->134 [style = bold, label=""];
120->117 [style = dotted, label="true"];
18->133 [style = dashed, label="0"];
31->90 [style = bold, label=""];
31->103 [style = dotted, label="true"];
95->56 [style = bold, label=""];
97->126 [style = dotted, label="false"];
68->70 [style = solid, label="i"];
99->14 [style = dotted, label="true"];
88->64 [style = dotted, label="false"];
97->30 [style = dotted, label="true"];
17->31 [style = solid, label="query"];
92->16 [style = dotted, label="true"];
45->100 [style = dotted, label="true"];
45->118 [style = dotted, label="true"];
134->60 [style = bold, label=""];
11->82 [style = dotted, label="true"];
88->105 [style = dotted, label="true"];
97->106 [style = bold, label=""];
88->105 [style = bold, label=""];
97->94 [style = dotted, label="true"];
88->46 [style = dotted, label="true"];
45->85 [style = dotted, label="true"];
120->81 [style = bold, label=""];
23->43 [style = solid, label="actualQueryInterval"];
73->25 [style = bold, label=""];
121->29 [style = bold, label=""];
17->88 [style = solid, label="query"];
76->24 [style = bold, label=""];
68->134 [style = solid, label="i"];
35->68 [style = bold, label=""];
92->29 [style = dotted, label="true"];
28->13 [style = bold, label=""];
45->8 [style = dotted, label="true"];
92->78 [style = dotted, label="true"];
45->62 [style = dotted, label="true"];
8->95 [style = dotted, label="true"];
11->42 [style = dotted, label="true"];
4->133 [style = solid, label="expected"];
97->13 [style = dotted, label="true"];
112->97 [style = solid, label="query"];
132->129 [style = dotted, label="true"];
97->74 [style = dotted, label="true"];
45->60 [style = dotted, label="true"];
136->131 [style = solid, label="intervalNo"];
97->126 [style = bold, label=""];
}
