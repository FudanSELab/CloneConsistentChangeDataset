digraph {
3 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"initialimport\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "initialImported.put(new TestConfigDataLocation(\"a\"),new ConfigData(Arrays.asList(initialPropertySource)))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verify(this.importer).resolveAndLoad(any(),this.locationResolverContext.capture(),any(),eq(secondLocations))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(secondLocations))).willReturn(secondImported)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Map<ConfigDataLocation,ConfigData> initialImported = new LinkedHashMap<>()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,this.bootstrapRegistry,Arrays.asList(contributor))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),eq(initialLocations))).willReturn(initialImported)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertThat(context.getParent()).hasToString(\"a\")@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),eq(locations))).willReturn(imported)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ConfigDataLocationResolverContext context = this.locationResolverContext.getValue()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<String> locations = Arrays.asList(\"testimport\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "withProcessedImportsResolvesAndLoads['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "imported.put(new TestConfigDataLocation(\"a\"),new ConfigData(Arrays.asList(propertySource)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "verify(this.importer).resolveAndLoad(any(),this.locationResolverContext.capture(),eq(secondLocations))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.ROOT)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "withProcessedImportsProvidesLocationResolverContextWithAccessToParent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "Map<ConfigDataLocation,ConfigData> imported = new LinkedHashMap<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "secondImported.put(new TestConfigDataLocation(\"b\"),new ConfigData(Arrays.asList(secondPropertySource)))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),eq(secondLocations))).willReturn(secondImported)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "List<String> secondLocations = Arrays.asList(\"secondimport\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "this.importer = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "MockPropertySource initialPropertySource = new MockPropertySource()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<String> initialLocations = Arrays.asList(\"initialimport\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Iterator<ConfigDataEnvironmentContributor> iterator = withProcessedImports.iterator()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(iterator.hasNext()).isFalse()@@@16@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"testimport\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "contributors.withProcessedImports(this.importer,this.activationContext)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,Arrays.asList(contributor))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "ConfigDataEnvironmentContributors withProcessedImports = contributors.withProcessedImports(this.importer,this.activationContext)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "initialPropertySource.setProperty(\"spring.config.import\",\"secondimport\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "MockPropertySource propertySource = new MockPropertySource()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(propertySource)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Map<ConfigDataLocation,ConfigData> secondImported = new LinkedHashMap<>()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.INITIAL_IMPORT)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(initialLocations))).willReturn(initialImported)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "MockPropertySource secondPropertySource = new MockPropertySource()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "withProcessedImportsProvidesLocationResolverContextWithAccessToParent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16->15 [style = bold, label=""];
24->28 [style = bold, label=""];
23->16 [style = bold, label=""];
7->11 [style = bold, label=""];
2->20 [style = dashed, label="0"];
3->9 [style = solid, label="contributor"];
31->27 [style = solid, label="propertySource"];
14->34 [style = dashed, label="0"];
18->16 [style = solid, label="importer"];
2->3 [style = bold, label=""];
3->23 [style = solid, label="contributor"];
11->12 [style = bold, label=""];
30->34 [style = bold, label=""];
20->3 [style = bold, label=""];
31->34 [style = solid, label="propertySource"];
15->19 [style = dashed, label="0"];
5->29 [style = dashed, label="0"];
16->19 [style = bold, label=""];
36->33 [style = bold, label=""];
33->27 [style = bold, label=""];
10->6 [style = bold, label=""];
9->23 [style = dashed, label="0"];
9->16 [style = bold, label=""];
13->1 [style = bold, label=""];
21->18 [style = bold, label=""];
14->8 [style = solid, label="initialImported"];
25->31 [style = bold, label=""];
6->2 [style = bold, label=""];
3->9 [style = bold, label=""];
6->20 [style = bold, label=""];
32->9 [style = bold, label=""];
14->22 [style = solid, label="initialImported"];
8->22 [style = dashed, label="0"];
3->23 [style = bold, label=""];
28->35 [style = bold, label=""];
10->20 [style = solid, label="secondImported"];
1->6 [style = solid, label="secondPropertySource"];
28->35 [style = solid, label="contributor"];
34->24 [style = bold, label=""];
30->24 [style = solid, label="imported"];
14->0 [style = bold, label=""];
10->2 [style = solid, label="secondImported"];
11->31 [style = dashed, label="0"];
29->32 [style = bold, label=""];
0->22 [style = bold, label=""];
31->30 [style = bold, label=""];
15->4 [style = bold, label=""];
12->14 [style = bold, label=""];
0->8 [style = bold, label=""];
18->25 [style = bold, label=""];
11->0 [style = solid, label="initialPropertySource"];
13->15 [style = solid, label="secondLocations"];
18->36 [style = solid, label="importer"];
7->25 [style = dashed, label="0"];
16->36 [style = dashed, label="0"];
19->4 [style = bold, label=""];
22->13 [style = bold, label=""];
35->36 [style = bold, label=""];
18->7 [style = bold, label=""];
27->29 [style = bold, label=""];
1->10 [style = bold, label=""];
4->5 [style = bold, label=""];
13->19 [style = solid, label="secondLocations"];
17->18 [style = bold, label=""];
8->13 [style = bold, label=""];
26->18 [style = bold, label=""];
}
