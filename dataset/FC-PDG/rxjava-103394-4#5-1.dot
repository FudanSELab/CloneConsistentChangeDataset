digraph {
29 [style = filled, label = "SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<>(2,2000,TimeUnit.MILLISECONDS,test,false)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "buf.next(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertFalse(buf.hasCompleted())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(Arrays.asList(3,4),values)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<Integer> values = new ArrayList<Integer>()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "buf.next(2)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "buf.collect(values)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "test.advanceTimeBy(2,TimeUnit.SECONDS)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(values.isEmpty())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "buf.next(3)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(1,buf.size)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "timedAndSizedTruncationError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "buf.collect(values)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "timedAndSizedTruncation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "values.clear()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "buf.collect(values)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertFalse(buf.hasError())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "buf.collect(values)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "test.advanceTimeBy(1,TimeUnit.SECONDS)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "timedAndSizedTruncation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "buf.next(4)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<Integer>(2,2000,TimeUnit.MILLISECONDS,test,false)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertFalse(buf.hasCompleted())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "values.clear()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(Arrays.asList(2),values)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertTrue(buf.hasError())@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "test.advanceTimeBy(2,TimeUnit.SECONDS)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "test.advanceTimeBy(1,TimeUnit.SECONDS)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertFalse(buf.hasError())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TestScheduler test = new TestScheduler()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "values.clear()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(Arrays.asList(5),values)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertFalse(buf.hasCompleted())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertTrue(buf.hasCompleted())@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "List<Integer> values = new ArrayList<>()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "buf.error(new TestException())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "buf.complete()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "buf.next(5)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->3 [style = bold, label=""];
19->18 [style = bold, label=""];
34->25 [style = bold, label=""];
23->2 [style = solid, label="values"];
23->7 [style = solid, label="values"];
13->36 [style = dashed, label="0"];
1->35 [style = dashed, label="0"];
27->14 [style = bold, label=""];
16->8 [style = bold, label=""];
23->3 [style = solid, label="values"];
23->10 [style = solid, label="values"];
23->11 [style = solid, label="values"];
4->6 [style = bold, label=""];
11->25 [style = bold, label=""];
25->13 [style = bold, label=""];
25->36 [style = bold, label=""];
22->9 [style = bold, label=""];
30->23 [style = bold, label=""];
23->28 [style = dashed, label="0"];
23->26 [style = bold, label=""];
28->24 [style = solid, label="values"];
32->14 [style = bold, label=""];
28->26 [style = bold, label=""];
10->17 [style = bold, label=""];
20->14 [style = bold, label=""];
14->0 [style = solid, label="test"];
28->7 [style = solid, label="values"];
15->16 [style = bold, label=""];
9->35 [style = bold, label=""];
28->3 [style = solid, label="values"];
21->2 [style = bold, label=""];
29->28 [style = bold, label=""];
36->21 [style = bold, label=""];
28->11 [style = solid, label="values"];
3->10 [style = bold, label=""];
26->12 [style = bold, label=""];
7->24 [style = bold, label=""];
0->23 [style = bold, label=""];
28->10 [style = solid, label="values"];
14->0 [style = bold, label=""];
14->29 [style = solid, label="test"];
8->5 [style = bold, label=""];
35->37 [style = bold, label=""];
28->2 [style = solid, label="values"];
23->24 [style = solid, label="values"];
31->30 [style = bold, label=""];
0->29 [style = dashed, label="0"];
14->29 [style = bold, label=""];
28->5 [style = solid, label="values"];
11->33 [style = bold, label=""];
5->11 [style = bold, label=""];
12->19 [style = bold, label=""];
6->7 [style = bold, label=""];
13->21 [style = bold, label=""];
2->22 [style = bold, label=""];
9->1 [style = bold, label=""];
33->34 [style = bold, label=""];
17->4 [style = bold, label=""];
23->5 [style = solid, label="values"];
0->31 [style = bold, label=""];
24->15 [style = bold, label=""];
}
