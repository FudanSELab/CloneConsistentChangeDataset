digraph {
11 [style = filled, label = "metricValuesAreTheSumOfAllTimeSeriesMatchingTags['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "response = this.endpoint.metric(\"cache\",Collections.singletonList(\"result:hit\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "this.registry.counter(\"cache\",\"result\",\"hit\",\"host\",\"1\").increment(2)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "matchingMeterNotFoundInNestedRegistries['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(availableTagKeys(response)).containsExactly(\"host\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "CompositeMeterRegistry composite = new CompositeMeterRegistry()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "MetricsEndpoint.MetricResponse response = this.endpoint.metric(\"cache\",Collections.emptyList())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "this.registry.counter(\"cache\",\"result\",\"hit\",\"host\",\"2\").increment(2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(response).isNull()@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "composite.add(firstLevel)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "CompositeMeterRegistry firstLevel = new CompositeMeterRegistry()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "MetricsEndpoint endpoint = new MetricsEndpoint(composite)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(response.getName()).isEqualTo(\"cache\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(getCount(response)).hasValue(6.0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "MetricsEndpoint.MetricResponse response = endpoint.metric(\"invalid.metric.name\",Collections.emptyList())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(getCount(response)).hasValue(4.0)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "metricValuesAreTheSumOfAllTimeSeriesMatchingTags['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "SimpleMeterRegistry secondLevel = new SimpleMeterRegistry()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "this.registry.counter(\"cache\",\"result\",\"miss\",\"host\",\"1\").increment(2)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "firstLevel.add(secondLevel)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(availableTagKeys(response)).containsExactly(\"result\",\"host\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->10 [style = bold, label=""];
0->9 [style = bold, label=""];
7->1 [style = bold, label=""];
19->12 [style = bold, label=""];
9->2 [style = bold, label=""];
2->6 [style = bold, label=""];
16->13 [style = solid, label="secondLevel"];
12->16 [style = bold, label=""];
1->0 [style = bold, label=""];
16->17 [style = bold, label=""];
15->18 [style = bold, label=""];
19->15 [style = solid, label="composite"];
6->4 [style = bold, label=""];
10->5 [style = bold, label=""];
3->7 [style = bold, label=""];
12->17 [style = solid, label="firstLevel"];
4->8 [style = bold, label=""];
17->13 [style = bold, label=""];
13->15 [style = bold, label=""];
20->19 [style = bold, label=""];
18->14 [style = bold, label=""];
11->7 [style = bold, label=""];
}
