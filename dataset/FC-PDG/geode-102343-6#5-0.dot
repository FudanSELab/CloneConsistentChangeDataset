digraph {
24 [style = filled, label = "when(InternalInstantiator.getInstantiator(someClassId)).thenReturn(mockInstantiator)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "when(InternalInstantiator.getClassId(mockInstantiator.getClass())).thenReturn(someClassId)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "when(DataSerializer.readString(any())).thenReturn(\"GEMFIRE_ENUM\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "DataOutputStream out = new DataOutputStream(baos)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "out.writeByte(DSCODE.USER_DATA_SERIALIZABLE.toByte())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "PowerMockito.mockStatic()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "getDataTypeShouldReturnUserDataSeriazliable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ByteArrayOutputStream baos = new ByteArrayOutputStream()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "out.writeByte(DSCODE.GEMFIRE_ENUM.toByte())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ByteArrayOutputStream baos = new ByteArrayOutputStream()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DataOutputStream out = new DataOutputStream(baos)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "PowerMockito.mockStatic()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "doReturn().when(mockInstantiator).getInstantiatedClass()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Instantiator mockInstantiator = PowerMockito.mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "getDataTypeShouldReturnGemfireEnum['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "String type = DataType.getDataType(bytes)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "out.writeByte(someClassId)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "byte(( bytes = baos.toByteArray()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "getDataTypeShouldReturnGemfireEnum['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String type = DataType.getDataType(bytes)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "DataSerializer.writeString(DSCODE.GEMFIRE_ENUM.name(),out)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "mockInstantiator.getInstantiatedClass()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "byte(( bytes = baos.toByteArray()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "int someClassId = 1@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(type).isEqualTo(\"org.apache.geode.Instantiator:org.apache.geode.internal.cache.execute.data.CustId\")@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4->3 [style = bold, label=""];
7->2 [style = solid, label="bytes"];
13->24 [style = bold, label=""];
12->24 [style = solid, label="mockInstantiator"];
2->6 [style = bold, label=""];
21->16 [style = solid, label="bytes"];
23->19 [style = solid, label="someClassId"];
12->17 [style = bold, label=""];
0->9 [style = solid, label="out"];
11->19 [style = bold, label=""];
9->7 [style = bold, label=""];
6->14 [style = dashed, label="0"];
6->15 [style = solid, label="baos"];
1->7 [style = bold, label=""];
5->0 [style = solid, label="baos"];
6->15 [style = bold, label=""];
1->9 [style = bold, label=""];
10->5 [style = bold, label=""];
20->23 [style = bold, label=""];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
15->11 [style = bold, label=""];
3->12 [style = dashed, label="0"];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
3->8 [style = bold, label=""];
22->12 [style = bold, label=""];
1->11 [style = dashed, label="0"];
18->13 [style = bold, label=""];
21->16 [style = bold, label=""];
16->14 [style = bold, label=""];
24->6 [style = bold, label=""];
23->18 [style = bold, label=""];
23->13 [style = solid, label="someClassId"];
17->20 [style = bold, label=""];
19->21 [style = bold, label=""];
}
