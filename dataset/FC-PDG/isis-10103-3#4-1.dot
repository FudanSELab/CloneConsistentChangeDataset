digraph {
2 [style = filled, label = "assertHasProperty(interfaceCollSpec,\"interfaceProp\")@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "val concreteCollSpec = concreteColl.getSpecification()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(,abstractCollSpec.getCorrespondingClass())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertHasProperty(concreteCollSpec,\"abstractProp\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "elementTypes_shouldBeIntrospected_whenDiscoveredViaGenerics_usingNoWildcards['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "val vmSpec = specificationLoader.specForTypeElseFail()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(BeanSort.VIEW_MODEL,concreteCollSpec.getBeanSort())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "val concreteColl = vmSpec.getCollectionElseFail(\"concreteColl\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(BeanSort.ABSTRACT,abstractCollSpec.getBeanSort())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "val concreteColl = vmSpec.getCollectionElseFail(\"concreteColl2\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "val interfaceCollSpec = interfaceColl.getSpecification()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertHasAction(abstractCollSpec,\"abstractAction\")@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "val abstractColl = vmSpec.getCollectionElseFail(\"abstractColl\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "val interfaceColl = vmSpec.getCollectionElseFail(\"interfaceColl\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "val abstractCollSpec = abstractColl.getSpecification()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertHasAction(concreteCollSpec,\"interfaceAction\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "elementTypes_shouldBeIntrospected_whenDiscoveredViaGenerics_usingWildcards['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "elementTypes_shouldBeIntrospected_whenDiscoveredViaGenerics_usingNoWildcards['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(BeanSort.ABSTRACT,interfaceCollSpec.getBeanSort())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertHasAction(concreteCollSpec,\"abstractAction\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "val interfaceColl = vmSpec.getCollectionElseFail(\"interfaceColl2\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(,concreteCollSpec.getCorrespondingClass())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertHasAction(interfaceCollSpec,\"interfaceAction\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertHasProperty(concreteCollSpec,\"interfaceProp\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(,interfaceCollSpec.getCorrespondingClass())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertHasProperty(abstractCollSpec,\"abstractProp\")@@@23@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "val vmSpec = specificationLoader.loadSpecification(,IntrospectionState.FULLY_INTROSPECTED)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "val abstractColl = vmSpec.getCollectionElseFail(\"abstractColl2\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->3 [style = bold, label=""];
23->16 [style = bold, label=""];
2->26 [style = bold, label=""];
3->20 [style = solid, label="concreteCollSpec"];
21->19 [style = bold, label=""];
16->27 [style = dashed, label="0"];
27->3 [style = bold, label=""];
12->11 [style = bold, label=""];
18->12 [style = bold, label=""];
1->2 [style = solid, label="interfaceCollSpec"];
3->6 [style = bold, label=""];
1->17 [style = solid, label="interfaceCollSpec"];
5->14 [style = bold, label=""];
3->10 [style = solid, label="concreteCollSpec"];
22->23 [style = bold, label=""];
1->9 [style = bold, label=""];
19->16 [style = bold, label=""];
20->10 [style = bold, label=""];
18->5 [style = solid, label="abstractCollSpec"];
11->5 [style = bold, label=""];
15->17 [style = bold, label=""];
19->23 [style = dashed, label="0"];
17->2 [style = bold, label=""];
3->0 [style = solid, label="concreteCollSpec"];
9->15 [style = bold, label=""];
6->13 [style = bold, label=""];
19->27 [style = bold, label=""];
10->0 [style = bold, label=""];
0->8 [style = bold, label=""];
25->19 [style = bold, label=""];
7->18 [style = bold, label=""];
4->1 [style = bold, label=""];
8->4 [style = bold, label=""];
2->7 [style = bold, label=""];
24->1 [style = bold, label=""];
4->24 [style = dashed, label="0"];
7->26 [style = dashed, label="0"];
3->8 [style = solid, label="concreteCollSpec"];
18->14 [style = solid, label="abstractCollSpec"];
26->18 [style = bold, label=""];
13->20 [style = bold, label=""];
8->24 [style = bold, label=""];
}
