digraph {
15 [style = filled, label = "to.assertNoErrors()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final AtomicInteger emitted = new AtomicInteger()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "takeUntilWithPublishedStreamUsingSelector['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "xs.publish(new Function<Observable<Integer>,Observable<Integer>>(){@Override public Observable<Integer> apply(Observable<Integer> xs){return xs.takeUntil(xs.skipWhile(new Predicate<Integer>(){@Override public boolean test(Integer i){return i <= 3}}))}}).subscribe(to)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "System.out.println(ts.values())@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "to.awaitDone(5,TimeUnit.SECONDS)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Flowable<Integer> xs = Flowable.range(0,Flowable.bufferSize() * 2).doOnNext(new Consumer<Integer>(){@Override public void accept(Integer t1){emitted.incrementAndGet()}})@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TestObserver<Integer> to = new TestObserver<Integer>()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<>()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "to.assertValues(0,1,2,3)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<Integer>()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "xs.publish(new Function<Flowable<Integer>,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Flowable<Integer> xs){return xs.takeUntil(xs.skipWhile(new Predicate<Integer>(){@Override public boolean test(Integer i){return i <= 3}}))}}).subscribe(ts)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(5,emitted.get())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "System.out.println(to.values())@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "takeUntilWithPublishedStreamUsingSelector['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ts.assertNoErrors()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "takeUntilWithPublishedStreamUsingSelector['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Observable<Integer> xs = Observable.range(0,Flowable.bufferSize() * 2).doOnNext(new Consumer<Integer>(){@Override public void accept(Integer t1){emitted.incrementAndGet()}})@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ts.assertValues(0,1,2,3)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
5->10 [style = bold, label=""];
1->4 [style = bold, label=""];
0->9 [style = bold, label=""];
5->12 [style = dashed, label="0"];
7->12 [style = bold, label=""];
2->1 [style = bold, label=""];
0->16 [style = dashed, label="0"];
14->17 [style = bold, label=""];
3->2 [style = solid, label="ts"];
15->16 [style = bold, label=""];
3->13 [style = dashed, label="0"];
8->7 [style = bold, label=""];
9->6 [style = bold, label=""];
4->0 [style = bold, label=""];
12->13 [style = bold, label=""];
7->5 [style = bold, label=""];
1->17 [style = dashed, label="0"];
2->14 [style = dashed, label="0"];
3->2 [style = bold, label=""];
4->15 [style = dashed, label="0"];
10->2 [style = solid, label="ts"];
6->19 [style = dashed, label="0"];
17->15 [style = bold, label=""];
9->19 [style = bold, label=""];
10->2 [style = bold, label=""];
3->10 [style = dashed, label="0"];
18->7 [style = bold, label=""];
13->14 [style = bold, label=""];
13->14 [style = solid, label="to"];
16->9 [style = bold, label=""];
11->7 [style = bold, label=""];
}
