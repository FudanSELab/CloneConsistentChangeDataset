digraph {
4 [style = filled, label = "config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"numeric-string\")@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"ql\",0L,\"qf\",0.0,\"count\",2L),makeRow(query,\"2011-04-01\",\"ql\",1700L,\"qf\",17000.0,\"count\",2L))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testGroupByDecorationOnNumerics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "expectedException.expectMessage(\"GroupBy v1 only supports dimensions with an outputType of STRING.\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "cannotVectorize()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "RegexFilteredDimensionSpec regexSpec = new RegexFilteredDimensionSpec(new DefaultDimensionSpec(\"qualityNumericString\",\"ql\",ValueType.LONG),\"170000\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",NullHandling.defaultLongValue(),\"qf\",NullHandling.defaultDoubleValue(),\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",170000L,\"qf\",170000.0,\"count\",2L))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"numeric\")@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<ResultRow> expectedResults@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "ListFilteredDimensionSpec listFilteredSpec = new ListFilteredDimensionSpec(new DefaultDimensionSpec(\"qualityNumericString\",\"qf\",ValueType.FLOAT),Sets.newHashSet(\"170000\"),true)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testGroupByNumericStringsAsNumericWithDecoration['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "expectedException.expect()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"ql\",null,\"qf\",null,\"count\",2L),makeRow(query,\"2011-04-01\",\"ql\",1700L,\"qf\",17000.0,\"count\",2L))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",null,\"qf\",null,\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",1700L,\"qf\",17000.0,\"count\",2L))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(regexSpec,listFilteredSpec).setDimFilter(new InDimFilter(\"quality\",Arrays.asList(\"entertainment\",\"technology\"),null)).setAggregatorSpecs(new CountAggregatorFactory(\"count\")).setGranularity(QueryRunnerTestHelper.allGran).build()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ListFilteredDimensionSpec listFilteredSpec = new ListFilteredDimensionSpec(new DefaultDimensionSpec(\"qualityFloat\",\"qf\",ValueType.FLOAT),Sets.newHashSet(\"17000.0\"),true)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",0L,\"qf\",0.0,\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",1700L,\"qf\",17000.0,\"count\",2L))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "NullHandling.replaceWithDefault()@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testGroupByDecorationOnNumerics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<Row> expectedResults@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "RegexFilteredDimensionSpec regexSpec = new RegexFilteredDimensionSpec(new DefaultDimensionSpec(\"qualityLong\",\"ql\",ValueType.LONG),\"1700\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(regexSpec,listFilteredSpec).setDimFilter(new InDimFilter(\"quality\",Arrays.asList(\"entertainment\",\"technology\"),null)).setAggregatorSpecs(new CountAggregatorFactory(\"count\")).setGranularity(QueryRunnerTestHelper.allGran).addOrderByColumn(\"ql\").build()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24->10 [style = bold, label=""];
4->6 [style = dotted, label="true"];
3->16 [style = solid, label="query"];
10->15 [style = dashed, label="0"];
3->18 [style = solid, label="query"];
16->18 [style = bold, label=""];
24->21 [style = solid, label="query"];
2->20 [style = dashed, label="0"];
21->19 [style = bold, label=""];
4->1 [style = dotted, label="true"];
3->24 [style = dashed, label="0"];
0->16 [style = dashed, label="0"];
18->12 [style = bold, label=""];
13->17 [style = dashed, label="0"];
5->17 [style = dotted, label="false"];
3->15 [style = bold, label=""];
17->12 [style = solid, label="expectedResults"];
4->2 [style = bold, label=""];
7->4 [style = bold, label=""];
2->9 [style = bold, label=""];
5->0 [style = dotted, label="true"];
25->19 [style = solid, label="expectedResults"];
18->12 [style = solid, label="results"];
5->25 [style = dashed, label="0"];
5->17 [style = bold, label=""];
13->12 [style = solid, label="expectedResults"];
22->7 [style = bold, label=""];
9->23 [style = dashed, label="0"];
15->5 [style = bold, label=""];
14->7 [style = bold, label=""];
6->2 [style = bold, label=""];
5->16 [style = bold, label=""];
6->20 [style = bold, label=""];
3->10 [style = bold, label=""];
23->24 [style = bold, label=""];
5->13 [style = dotted, label="false"];
1->6 [style = bold, label=""];
0->12 [style = solid, label="expectedResults"];
10->5 [style = bold, label=""];
20->23 [style = bold, label=""];
8->12 [style = solid, label="results"];
5->0 [style = bold, label=""];
12->19 [style = dashed, label="0"];
10->25 [style = bold, label=""];
21->19 [style = solid, label="results"];
3->8 [style = solid, label="query"];
5->13 [style = bold, label=""];
11->7 [style = bold, label=""];
0->8 [style = bold, label=""];
4->20 [style = bold, label=""];
5->16 [style = dotted, label="true"];
3->17 [style = solid, label="query"];
16->12 [style = solid, label="expectedResults"];
9->3 [style = bold, label=""];
8->18 [style = dashed, label="0"];
4->1 [style = bold, label=""];
13->8 [style = bold, label=""];
8->12 [style = bold, label=""];
17->18 [style = bold, label=""];
25->21 [style = bold, label=""];
}
