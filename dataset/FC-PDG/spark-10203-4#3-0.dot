digraph {
10 [style = filled, label = "testPairMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "JavaTestUtils.attachTestOutputStream(reversed)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<List<Tuple2<String,Integer>>> inputData = stringIntKVStream@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<List<Tuple2<Integer,String>>> expected = Arrays.asList(Arrays.asList(new Tuple2<>(1,\"california\"),new Tuple2<>(3,\"california\"),new Tuple2<>(4,\"new york\"),new Tuple2<>(1,\"new york\")),Arrays.asList(new Tuple2<>(5,\"california\"),new Tuple2<>(5,\"california\"),new Tuple2<>(3,\"new york\"),new Tuple2<>(1,\"new york\")))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(expected,result)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "JavaDStream<Tuple2<String,Integer>> stream = JavaTestUtils.attachTestInputStream(ssc,inputData,1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<List<Tuple2<Integer,String>>> result = JavaTestUtils.runStreams(ssc,2,2)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testPairMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "JavaPairDStream<String,Integer> pairStream = JavaPairDStream.fromJavaDStream(stream)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "JavaPairDStream<Integer,String> reversed = pairStream.mapToPair(null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "List<List<Tuple2<Integer,String>>> result = JavaTestUtils.runStreams(ssc,2,2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "JavaPairDStream<Integer,String> reversed = pairStream.mapToPair(null)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "JavaPairDStream<Integer,String> reversed = pairStream.mapToPair(new PairFunction<Tuple2<String,Integer>,Integer,String>(){@Override public Tuple2<Integer,String> call(Tuple2<String,Integer> in){return in.swap()}})@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(expected,result)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testPairMap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "JavaTestUtils.attachTestOutputStream(reversed)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
9->4 [style = solid, label="reversed"];
13->12 [style = solid, label="reversed"];
4->6 [style = bold, label=""];
14->15 [style = solid, label="result"];
9->4 [style = bold, label=""];
1->7 [style = bold, label=""];
10->7 [style = bold, label=""];
8->0 [style = bold, label=""];
2->8 [style = solid, label="stream"];
7->2 [style = solid, label="inputData"];
5->2 [style = bold, label=""];
7->5 [style = bold, label=""];
13->12 [style = bold, label=""];
0->4 [style = bold, label=""];
0->13 [style = dashed, label="0"];
12->14 [style = bold, label=""];
8->9 [style = bold, label=""];
14->15 [style = bold, label=""];
5->3 [style = solid, label="expected"];
6->3 [style = solid, label="result"];
0->9 [style = dashed, label="0"];
5->15 [style = solid, label="expected"];
11->7 [style = bold, label=""];
0->4 [style = solid, label="reversed"];
8->13 [style = bold, label=""];
2->8 [style = bold, label=""];
}
