digraph {
12 [style = filled, label = "ColorBlock b1 = new ColorBlock(gp,1.0,2.0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertTrue(b1.equals(b2))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "b2.setBounds(new Rectangle2D.Double(1.0,2.0,3.0,4.0))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "b2 = (EmptyBlock)b1.clone()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "b2 = (ColorBlock)b1.clone()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "GradientPaint gp = new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "ColorBlock b2 = null@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(b1.getClass() == b2.getClass())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testCloning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(b1 != b2)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "fail(e.toString())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Rectangle2D bounds1 = new Rectangle2D.Double(10.0,20.0,30.0,40.0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(b1.equals(b2))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "bounds1.setRect(1.0,2.0,3.0,4.0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EmptyBlock b2 = null@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EmptyBlock b1 = new EmptyBlock(1.0,2.0)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "CloneNotSupportedException e@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "CloneNotSupportedException e@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "b2 = CloneUtils.clone(b1)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "fail(e.toString())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "b1.setBounds(bounds1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(b1.equals(b2))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertFalse(b1.equals(b2))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
16->12 [style = solid, label="gp"];
20->13 [style = bold, label=""];
2->20 [style = dashed, label="0"];
20->14 [style = solid, label="b2"];
0->6 [style = bold, label=""];
22->16 [style = bold, label=""];
2->6 [style = bold, label=""];
15->21 [style = bold, label=""];
2->5 [style = solid, label="b2"];
9->5 [style = solid, label="b2"];
20->11 [style = solid, label="b2"];
4->0 [style = dotted, label="true"];
18->11 [style = bold, label=""];
12->15 [style = bold, label=""];
6->1 [style = dotted, label="true"];
10->3 [style = bold, label=""];
14->19 [style = bold, label=""];
3->6 [style = solid, label="b1"];
12->13 [style = solid, label="b1"];
16->23 [style = bold, label=""];
2->6 [style = solid, label="b2"];
1->13 [style = bold, label=""];
7->3 [style = bold, label=""];
20->13 [style = solid, label="b2"];
9->6 [style = bold, label=""];
4->0 [style = bold, label=""];
19->24 [style = bold, label=""];
6->1 [style = bold, label=""];
3->9 [style = solid, label="b1"];
9->6 [style = solid, label="b2"];
20->24 [style = solid, label="b2"];
21->20 [style = bold, label=""];
8->2 [style = bold, label=""];
17->14 [style = bold, label=""];
2->9 [style = dashed, label="0"];
3->8 [style = bold, label=""];
8->9 [style = bold, label=""];
23->15 [style = solid, label="bounds1"];
11->17 [style = bold, label=""];
23->12 [style = bold, label=""];
13->18 [style = bold, label=""];
}
