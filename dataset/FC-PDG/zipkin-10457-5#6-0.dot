digraph {
6 [style = filled, label = "produceSpans(malformed1,builder.topic)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(rabbitmqMetrics.bytes()).isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(rabbitmqMetrics.messagesDropped()).isEqualTo(2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(kafkaMetrics.bytes()).isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size() * 2)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(rabbitmqMetrics.spansDropped()).isZero()@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "byte(( malformed1 = \"(\"='\".getBytes(UTF_8)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(receivedSpans.take()).containsExactlyElementsOf(spans)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(kafkaMetrics.spansDropped()).isZero()@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "skipsMalformedData['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(kafkaMetrics.spans()).isEqualTo(spans.size() * 2)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(receivedSpans.take()).containsExactlyElementsOf(spans)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Thread.sleep(200L)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(kafkaMetrics.messages()).isEqualTo(5)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "publish(malformed1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "publish(THRIFT.encodeList(spans))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "KafkaCollector.Builder builder = builder(\"decoder_exception\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "skipsMalformedData['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "skipsMalformedData['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "publish(new byte(((()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(rabbitmqMetrics.messages()).isEqualTo(5)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "publish(malformed2)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "produceSpans(new byte((((,builder.topic)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "produceSpans(THRIFT.encodeList(spans),builder.topic)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "byte(( malformed2 = \"malformed\".getBytes(UTF_8)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "produceSpans(THRIFT.encodeList(spans),builder.topic)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "collector.start()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "publish(THRIFT.encodeList(spans))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "produceSpans(malformed2,builder.topic)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->5 [style = bold, label=""];
6->18 [style = dashed, label="0"];
16->4 [style = bold, label=""];
21->22 [style = bold, label=""];
22->24 [style = bold, label=""];
24->20 [style = bold, label=""];
27->0 [style = bold, label=""];
9->13 [style = bold, label=""];
27->18 [style = solid, label="malformed1"];
1->6 [style = bold, label=""];
10->15 [style = dashed, label="0"];
11->14 [style = bold, label=""];
15->7 [style = solid, label="malformed2"];
19->27 [style = bold, label=""];
23->21 [style = bold, label=""];
12->9 [style = bold, label=""];
17->4 [style = bold, label=""];
10->1 [style = bold, label=""];
15->28 [style = bold, label=""];
26->25 [style = bold, label=""];
7->23 [style = dashed, label="0"];
13->11 [style = bold, label=""];
0->15 [style = bold, label=""];
1->28 [style = dashed, label="0"];
3->8 [style = bold, label=""];
28->18 [style = bold, label=""];
20->29 [style = bold, label=""];
2->21 [style = dashed, label="0"];
5->3 [style = bold, label=""];
6->7 [style = bold, label=""];
4->0 [style = bold, label=""];
15->10 [style = bold, label=""];
0->23 [style = solid, label="malformed2"];
0->6 [style = solid, label="malformed1"];
2->12 [style = bold, label=""];
18->23 [style = bold, label=""];
29->26 [style = bold, label=""];
7->2 [style = bold, label=""];
}
