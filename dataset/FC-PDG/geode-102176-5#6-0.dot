digraph {
13 [style = filled, label = "cacheClientNotifier = CacheClientNotifier.getInstance(internalCache,mock(),mock(),mock(),10,10,mock(),null,true)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "testSingletonHasClientProxiesTrue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "when(cacheClientProxy.getProxyID()).thenReturn(mock())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "when(proxy.getProxyID()).thenReturn(mock())@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ccn.addClientProxy(proxy)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "cacheClientNotifier.addClientProxy(cacheClientProxy)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "CacheClientNotifier ccn = CacheClientNotifier.getInstance(internalCache,mock(),mock(),mock(),10,10,mock(),null,true)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(CacheClientNotifier.singletonHasClientProxies()).isTrue()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "when(internalCache.getCCPTimer()).thenReturn(mock())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "CacheClientNotifier ccn = CacheClientNotifier.getInstance(cache,mock(),mock(),mock(),100000,100000,mock(),null,false)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "ccn.shutdown(111)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "when(proxy.getAcceptorId()).thenReturn(Long.valueOf(111))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "InternalCache internalCache = Fakes.cache()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "createCacheClientNotifier['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "when(cacheClientProxy.getAcceptorId()).thenReturn(111L)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testSingletonHasClientProxiesTrue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "CacheClientProxy proxy = mock()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "return ccn@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(CacheClientNotifier.singletonHasClientProxies())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->3 [style = bold, label=""];
1->8 [style = bold, label=""];
0->6 [style = bold, label=""];
7->14 [style = dashed, label="0"];
18->17 [style = bold, label=""];
5->0 [style = solid, label="internalCache"];
7->4 [style = bold, label=""];
11->15 [style = bold, label=""];
3->0 [style = bold, label=""];
12->13 [style = bold, label=""];
4->9 [style = dashed, label="0"];
3->7 [style = solid, label="proxy"];
3->15 [style = dashed, label="0"];
17->16 [style = solid, label="ccn"];
14->9 [style = bold, label=""];
4->1 [style = bold, label=""];
15->12 [style = bold, label=""];
6->7 [style = bold, label=""];
13->14 [style = bold, label=""];
17->16 [style = bold, label=""];
2->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
