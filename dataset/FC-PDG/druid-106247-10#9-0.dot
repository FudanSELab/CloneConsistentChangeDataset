digraph {
41 [style = filled, label = "QueryInterruptedException cause = null@@@42@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "ListenableFuture future = capturedFuture.getValue()@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertTrue(e.getCause() instanceof QueryInterruptedException)@@@47@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testQueryTimeout['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final CountDownLatch queryIsRegistered = new CountDownLatch(1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "DyingQueryRunner interrupted2 = interrupted.poll()@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertFalse(\"runner 3 not completed\",remainingRunner.hasCompleted)@@@71@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "QueryTimeoutException cause = null@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertNotNull(cause)@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Capture<ListenableFuture> capturedFuture = EasyMock.newCapture()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"test\").intervals(\"2014/2015\").aggregators(Collections.singletonList(new CountAggregatorFactory(\"count\"))).context(ImmutableMap.of(QueryContexts.TIMEOUT_KEY,100,\"queryId\",\"test\")).build()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "watcher.registerQueryFuture(EasyMock.anyObject(),EasyMock.and(EasyMock.anyObject(),EasyMock.capture(capturedFuture)))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "ExecutorService exec = PrioritizedExecutorService.create(new Lifecycle(),new DruidProcessingConfig(){@Override public String getFormatString(){return \"test\"}@Override public int getNumThreads(){return 2}})@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(capturedFuture.hasCaptured())@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "interrupted2@@@59@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(\"runner 1 started\",interrupted1.hasStarted)@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DyingQueryRunner remainingRunner = runners.iterator().next()@@@65@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "resultFuture.get()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Future resultFuture = Executors.newFixedThreadPool(1).submit(new Runnable(){@Override public void run(){seq.toList()}})@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(\"runner 3 should be interrupted or not have started\",!remainingRunner.hasStarted || remainingRunner.interrupted)@@@67@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertFalse(\"runner 2 not completed\",interrupted2.hasCompleted)@@@70@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "EasyMock.expectLastCall().andAnswer(new IAnswer<Void>(){@Override public Void answer(){queryIsRegistered.countDown()return null}}).once()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ExecutionException e@@@46@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "testQueryCancellation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Capture<ListenableFuture> capturedFuture = Capture.newInstance()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"test\").intervals(\"2014/2015\").aggregators(Collections.singletonList(new CountAggregatorFactory(\"count\"))).build()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "DyingQueryRunner interrupted1 = interrupted.poll()@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "cause = (QueryInterruptedException)e.getCause()@@@48@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "EasyMock.replay(watcher)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Query timeout\",((QueryInterruptedException)e.getCause()).getErrorCode())@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(\"runner 2 started\",interrupted2.hasStarted)@@@60@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "queryIsRegistered.await()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.verify(watcher)@@@72@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "runners.remove(interrupted2)@@@64@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "runners.remove(interrupted1)@@@63@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "remainingRunner@@@66@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "queriesStarted.await()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final Sequence seq = chainedRunner.run(QueryPlus.wrap(query))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "queriesInterrupted.await()@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final CountDownLatch queriesStarted = new CountDownLatch(2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "future.cancel(true)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertTrue(e.getCause() instanceof QueryTimeoutException)@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Set<DyingQueryRunner> runners = Sets.newHashSet(new DyingQueryRunner(queriesStarted,queriesInterrupted,interrupted),new DyingQueryRunner(queriesStarted,queriesInterrupted,interrupted),new DyingQueryRunner(queriesStarted,queriesInterrupted,interrupted))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(\"runner 1 interrupted\",interrupted1.interrupted)@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(\"Query timeout\",((QueryTimeoutException)e.getCause()).getErrorCode())@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "interrupted1@@@54@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ChainedExecutionQueryRunner chainedRunner = new ChainedExecutionQueryRunner<>(exec,watcher,Lists.newArrayList(runners))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(future.isCancelled())@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final CountDownLatch queriesInterrupted = new CountDownLatch(2)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testQueryTimeout['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "ArrayBlockingQueue<DyingQueryRunner> interrupted = new ArrayBlockingQueue<>(3)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertFalse(\"runner 1 not completed\",interrupted1.hasCompleted)@@@69@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "cause = (QueryTimeoutException)e.getCause()@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "Assert.assertTrue(\"runner 2 interrupted\",interrupted2.interrupted)@@@61@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "QueryWatcher watcher = EasyMock.createStrictMock()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
27->13 [style = bold, label=""];
5->20 [style = bold, label=""];
10->24 [style = bold, label=""];
29->48 [style = dotted, label="true"];
34->2 [style = solid, label="capturedFuture"];
24->32 [style = bold, label=""];
29->49 [style = dotted, label="true"];
26->51 [style = bold, label=""];
7->26 [style = bold, label=""];
23->28 [style = bold, label=""];
35->1 [style = solid, label="exec"];
12->2 [style = bold, label=""];
45->25 [style = bold, label=""];
32->8 [style = dotted, label="true"];
24->32 [style = solid, label="interrupted2"];
49->21 [style = solid, label="cause"];
33->25 [style = bold, label=""];
38->10 [style = solid, label="interrupted"];
21->16 [style = bold, label=""];
42->3 [style = bold, label=""];
30->40 [style = bold, label=""];
8->27 [style = bold, label=""];
43->44 [style = bold, label=""];
38->17 [style = solid, label="interrupted"];
53->2 [style = solid, label="capturedFuture"];
16->9 [style = bold, label=""];
25->21 [style = bold, label=""];
26->46 [style = bold, label=""];
35->31 [style = bold, label=""];
22->19 [style = dotted, label="true"];
28->30 [style = bold, label=""];
29->39 [style = bold, label=""];
18->11 [style = bold, label=""];
48->50 [style = bold, label=""];
31->4 [style = bold, label=""];
39->45 [style = bold, label=""];
20->14 [style = bold, label=""];
41->46 [style = dashed, label="0"];
12->36 [style = solid, label="watcher"];
24->42 [style = solid, label="interrupted2"];
50->49 [style = bold, label=""];
44->38 [style = bold, label=""];
15->35 [style = bold, label=""];
38->27 [style = solid, label="interrupted"];
6->53 [style = bold, label=""];
49->25 [style = bold, label=""];
29->50 [style = dotted, label="true"];
46->33 [style = bold, label=""];
31->17 [style = solid, label="queriesStarted"];
12->1 [style = solid, label="watcher"];
14->18 [style = bold, label=""];
41->21 [style = solid, label="cause"];
38->23 [style = solid, label="interrupted"];
5->52 [style = dashed, label="0"];
0->50 [style = dashed, label="0"];
38->17 [style = bold, label=""];
2->43 [style = bold, label=""];
29->39 [style = dotted, label="true"];
9->22 [style = bold, label=""];
29->0 [style = dotted, label="true"];
54->35 [style = bold, label=""];
6->34 [style = bold, label=""];
17->1 [style = bold, label=""];
13->42 [style = bold, label=""];
22->19 [style = bold, label=""];
0->45 [style = bold, label=""];
3->37 [style = bold, label=""];
1->52 [style = bold, label=""];
19->10 [style = bold, label=""];
4->17 [style = solid, label="queriesInterrupted"];
26->41 [style = bold, label=""];
32->8 [style = bold, label=""];
17->1 [style = solid, label="runners"];
46->21 [style = solid, label="cause"];
40->36 [style = bold, label=""];
3->37 [style = solid, label="remainingRunner"];
41->33 [style = bold, label=""];
53->12 [style = bold, label=""];
45->21 [style = solid, label="cause"];
5->20 [style = solid, label="query"];
52->20 [style = solid, label="query"];
22->10 [style = dotted, label="true"];
4->6 [style = bold, label=""];
34->12 [style = bold, label=""];
37->23 [style = bold, label=""];
47->35 [style = bold, label=""];
45->49 [style = dashed, label="0"];
34->53 [style = dashed, label="0"];
52->20 [style = bold, label=""];
12->44 [style = solid, label="watcher"];
9->22 [style = solid, label="interrupted1"];
32->27 [style = dotted, label="true"];
39->0 [style = bold, label=""];
29->45 [style = dotted, label="true"];
39->48 [style = dashed, label="0"];
29->48 [style = bold, label=""];
37->23 [style = dotted, label="true"];
9->13 [style = solid, label="interrupted1"];
51->41 [style = bold, label=""];
11->7 [style = bold, label=""];
}
