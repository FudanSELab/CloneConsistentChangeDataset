digraph {
5 [style = filled, label = "Assert.assertFalse(analysis.canHashJoin())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final String expression = \"x == 1\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(expression,analysis.getOriginalExpression())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"(== (+ j.x j.y) z)\"),exprsToStrings(analysis.getNonEquiConditions()))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertFalse(analysis.isAlwaysFalse())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "test_forExpression_rightFunction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final String expression = \"\"j.x\" + \"j.y\" == z\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final JoinConditionAnalysis analysis = analyze(expression)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(ImmutableList.of(),equalitiesToPairs(analysis.getEquiConditions()))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertFalse(analysis.isAlwaysTrue())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(analysis.getRightEquiConditionKeys().isEmpty())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "test_forExpression_onlyLeft['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"(== x 1)\"),exprsToStrings(analysis.getNonEquiConditions()))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "test_forExpression_rightFunction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6->1 [style = solid, label="expression"];
1->3 [style = bold, label=""];
6->3 [style = solid, label="expression"];
6->1 [style = bold, label=""];
5->7 [style = bold, label=""];
4->8 [style = bold, label=""];
8->0 [style = bold, label=""];
3->5 [style = bold, label=""];
13->1 [style = solid, label="expression"];
0->9 [style = bold, label=""];
7->4 [style = bold, label=""];
6->13 [style = dashed, label="0"];
0->12 [style = dashed, label="0"];
2->6 [style = bold, label=""];
10->6 [style = bold, label=""];
8->12 [style = bold, label=""];
13->1 [style = bold, label=""];
11->13 [style = bold, label=""];
13->3 [style = solid, label="expression"];
}
