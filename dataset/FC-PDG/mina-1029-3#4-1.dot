digraph {
0 [style = filled, label = "MockAbstractIoFuture<Boolean> future = spy(new MockAbstractIoFuture<Boolean>())@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "doReturn(true).when(future).cancelOwner(anyBoolean())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(future.isDone())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "future.register(listener)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final MockAbstractIoFuture<Boolean> future = spy(new MockAbstractIoFuture<Boolean>())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testCanceledListeners['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "future.cancel(true)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertFalse(future.isCancelled())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "future.register(listener)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "verify(listener).exception(Matchers.any())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "IoFutureListener<Boolean> listener = mock()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testCanceledListeners['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final IoFutureListener<Boolean> listener = mock()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "verify(listener,never()).completed(Matchers.any())@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testCanceledListenersAlreadySet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertFalse(future.isDone())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(future.isCancelled())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
16->0 [style = bold, label=""];
8->15 [style = bold, label=""];
3->1 [style = bold, label=""];
9->4 [style = bold, label=""];
1->7 [style = solid, label="listener"];
6->0 [style = bold, label=""];
0->12 [style = dashed, label="0"];
2->10 [style = bold, label=""];
1->7 [style = bold, label=""];
11->2 [style = bold, label=""];
15->5 [style = bold, label=""];
1->9 [style = bold, label=""];
1->13 [style = dashed, label="0"];
7->9 [style = bold, label=""];
8->5 [style = bold, label=""];
13->7 [style = bold, label=""];
14->12 [style = bold, label=""];
3->13 [style = bold, label=""];
1->15 [style = solid, label="listener"];
4->8 [style = bold, label=""];
5->11 [style = bold, label=""];
12->3 [style = bold, label=""];
13->7 [style = solid, label="listener"];
}
