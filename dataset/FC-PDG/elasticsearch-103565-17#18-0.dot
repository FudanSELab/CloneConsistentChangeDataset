digraph {
23 [style = filled, label = "action.shardOperationOnPrimary(request,indexShard,new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(null),latch))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "when(indexShard.shardId()).thenReturn(shardId)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "action.dispatchedShardOperationOnReplica(request,indexShard,listener)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final Index index = new Index(\"index\",\"uuid\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final ShardId shardId = new ShardId(index,id)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "PlainActionFuture<TransportReplicationAction.ReplicaResult> listener = PlainActionFuture.newFuture()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final int id = randomIntBetween(0,4)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final RetentionLeases retentionLeases = mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final RetentionLeaseSyncAction.Request request = new RetentionLeaseSyncAction.Request(indexShard.shardId(),retentionLeases)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testRetentionLeaseSyncActionOnReplica['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "final AtomicBoolean success = new AtomicBoolean()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final TransportReplicationAction.ReplicaResult result = listener.actionGet()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final RetentionLeaseBackgroundSyncAction.Request request = new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(),retentionLeases)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final IndicesService indicesService = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "latch.await()@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(success.get())@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(indicesService.indexServiceSafe(index)).thenReturn(indexService)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "result.runPostReplicaActions(ActionListener.wrap(null,null))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(indexService.getShard(id)).thenReturn(indexShard)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testRetentionLeaseSyncActionOnReplica['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verify(indexShard).persistRetentionLeases()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testRetentionLeaseBackgroundSyncActionOnPrimary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final IndexShard indexShard = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final IndexService indexService = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()),new WriteMemoryLimits(Settings.EMPTY))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()),new WriteMemoryLimits())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10->22 [style = bold, label=""];
17->10 [style = bold, label=""];
14->3 [style = bold, label=""];
3->7 [style = solid, label="request"];
17->3 [style = solid, label="shardId"];
13->7 [style = solid, label="indexShard"];
17->26 [style = solid, label="shardId"];
0->13 [style = bold, label=""];
3->26 [style = dashed, label="0"];
7->23 [style = dashed, label="0"];
20->9 [style = bold, label=""];
8->18 [style = bold, label=""];
4->19 [style = bold, label=""];
0->17 [style = solid, label="id"];
3->11 [style = bold, label=""];
4->22 [style = solid, label="indicesService"];
14->26 [style = solid, label="retentionLeases"];
25->14 [style = bold, label=""];
5->17 [style = bold, label=""];
12->0 [style = bold, label=""];
10->6 [style = bold, label=""];
6->22 [style = dashed, label="0"];
27->23 [style = solid, label="latch"];
11->7 [style = solid, label="listener"];
19->16 [style = bold, label=""];
6->14 [style = bold, label=""];
14->26 [style = bold, label=""];
26->23 [style = solid, label="request"];
14->3 [style = solid, label="retentionLeases"];
4->6 [style = solid, label="indicesService"];
18->20 [style = bold, label=""];
26->27 [style = bold, label=""];
23->24 [style = bold, label=""];
28->4 [style = bold, label=""];
6->25 [style = dashed, label="0"];
13->23 [style = solid, label="indexShard"];
10->25 [style = bold, label=""];
19->17 [style = solid, label="index"];
7->2 [style = bold, label=""];
17->10 [style = solid, label="shardId"];
14->8 [style = solid, label="retentionLeases"];
15->4 [style = bold, label=""];
13->5 [style = bold, label=""];
13->5 [style = solid, label="indexShard"];
27->23 [style = bold, label=""];
4->25 [style = solid, label="indicesService"];
16->12 [style = solid, label="indexService"];
9->1 [style = bold, label=""];
22->14 [style = bold, label=""];
16->12 [style = bold, label=""];
11->7 [style = bold, label=""];
2->8 [style = bold, label=""];
21->4 [style = bold, label=""];
}
