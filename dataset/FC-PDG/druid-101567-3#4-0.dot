digraph {
3 [style = filled, label = "testQuery(\"SELECT CAST(__time AS BIGINT), m1, ANY_VALUE(dim3, 100) FROM foo WHERE (TIME_FLOOR(__time, 'PT1H'), m1) IN\" + \" (\" + \" SELECT TIME_FLOOR(__time, 'PT1H') AS t1, MIN(m1) AS t2 FROM foo WHERE dim3 = 'b'\" + \" AND __time BETWEEN '1994-04-29 00:00:00' AND '2020-01-11 00:00:00' GROUP BY 1\" + \" )\" + \"GROUP BY 1, 2\",ImmutableList.of(GroupByQuery.builder().setDataSource(join(new TableDataSource(CalciteTests.DATASOURCE1),new QueryDataSource(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Intervals.of(\"1994-04-29/2020-01-11T00:00:00.001Z\"))).filters(selector(\"dim3\",\"b\",null)).granularity(new PeriodGranularity(Period.hours(1),null,DateTimeZone.UTC)).aggregators(aggregators(new FloatMinAggregatorFactory(\"a0\",\"m1\"))).context(getTimeseriesContextWithFloorTime(TIMESERIES_CONTEXT_BY_GRAN,\"d0\")).build()),\"j0.\",\"((timestamp_floor(\"__time\",'PT1H',null,'UTC') == \"j0.d0\") && (\"m1\" == \"j0.a0\"))\",JoinType.INNER)).setInterval(querySegmentSpec(Filtration.eternity())).setDimensions(new DefaultDimensionSpec(\"__time\",\"d0\",ValueType.LONG),new DefaultDimensionSpec(\"m1\",\"d1\",ValueType.FLOAT)).setGranularity(Granularities.ALL).setAggregatorSpecs(aggregators(new StringAnyAggregatorFactory(\"a0\",\"dim3\",100))).setContext(QUERY_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@abe3d5,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@abe3db))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testJoinOnTimeseriesWithFloorOnTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "cannotVectorize()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testJoinOnTimeseriesWithFloorOnTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testQuery(\"SELECT CAST(__time AS BIGINT), m1, ANY_VALUE(dim3, 100) FROM foo WHERE (TIME_FLOOR(__time, 'PT1H'), m1) IN\" + \" (\" + \" SELECT TIME_FLOOR(__time, 'PT1H') AS t1, MIN(m1) AS t2 FROM foo WHERE dim3 = 'b'\" + \" AND __time BETWEEN '1994-04-29 00:00:00' AND '2020-01-11 00:00:00' GROUP BY 1\" + \" )\" + \"GROUP BY 1, 2\",ImmutableList.of(GroupByQuery.builder().setDataSource(join(new TableDataSource(CalciteTests.DATASOURCE1),new QueryDataSource(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Intervals.of(\"1994-04-29/2020-01-11T00:00:00.001Z\"))).filters(selector(\"dim3\",\"b\",null)).granularity(new PeriodGranularity(Period.hours(1),null,DateTimeZone.UTC)).aggregators(aggregators(new FloatMinAggregatorFactory(\"a0\",\"m1\"))).context(getTimeseriesContextWithFloorTime(TIMESERIES_CONTEXT_DEFAULT,\"d0\")).build()),\"j0.\",\"((timestamp_floor(\"__time\",'PT1H',null,'UTC') == \"j0.d0\") && (\"m1\" == \"j0.a0\"))\",JoinType.INNER)).setInterval(querySegmentSpec(Filtration.eternity())).setDimensions(new DefaultDimensionSpec(\"__time\",\"d0\",ValueType.LONG),new DefaultDimensionSpec(\"m1\",\"d1\",ValueType.FLOAT)).setGranularity(Granularities.ALL).setAggregatorSpecs(aggregators(new StringAnyAggregatorFactory(\"a0\",\"dim3\",100))).setContext(QUERY_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@abe341,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@abe347))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "testJoinOnGroupByInsteadOfTimeseriesWithFloorOnTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testQuery(\"SELECT CAST(__time AS BIGINT), m1, ANY_VALUE(dim3, 100) FROM foo WHERE (CAST(TIME_FLOOR(__time, 'PT1H') AS BIGINT), m1) IN\" + \" (\" + \" SELECT CAST(TIME_FLOOR(__time, 'PT1H') AS BIGINT) + 0 AS t1, MIN(m1) AS t2 FROM foo WHERE dim3 = 'b'\" + \" AND __time BETWEEN '1994-04-29 00:00:00' AND '2020-01-11 00:00:00' GROUP BY 1\" + \" )\" + \"GROUP BY 1, 2\",ImmutableList.of(GroupByQuery.builder().setDataSource(join(new TableDataSource(CalciteTests.DATASOURCE1),new QueryDataSource(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Intervals.of(\"1994-04-29/2020-01-11T00:00:00.001Z\"))).setVirtualColumns(expressionVirtualColumn(\"v0\",\"(timestamp_floor(\"__time\",'PT1H',null,'UTC') + 0)\",ValueType.LONG)).setDimFilter(selector(\"dim3\",\"b\",null)).setGranularity(Granularities.ALL).setDimensions(dimensions(new DefaultDimensionSpec(\"v0\",\"d0\",ValueType.LONG))).setAggregatorSpecs(aggregators(new FloatMinAggregatorFactory(\"a0\",\"m1\"))).setContext(QUERY_CONTEXT_DEFAULT).build()),\"j0.\",\"((timestamp_floor(\"__time\",'PT1H',null,'UTC') == \"j0.d0\") && (\"m1\" == \"j0.a0\"))\",JoinType.INNER)).setInterval(querySegmentSpec(Filtration.eternity())).setDimensions(new DefaultDimensionSpec(\"__time\",\"d0\",ValueType.LONG),new DefaultDimensionSpec(\"m1\",\"d1\",ValueType.FLOAT)).setGranularity(Granularities.ALL).setAggregatorSpecs(aggregators(new StringAnyAggregatorFactory(\"a0\",\"dim3\",100))).setContext(QUERY_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@abe473,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@abe479))@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1->2 [style = bold, label=""];
2->0 [style = bold, label=""];
0->3 [style = dashed, label="0"];
4->2 [style = bold, label=""];
0->5 [style = dashed, label="0"];
2->3 [style = bold, label=""];
2->5 [style = bold, label=""];
6->2 [style = bold, label=""];
}
