digraph {
7 [style = filled, label = "i++@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Thread.sleep(20)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(task.getRunner().getStatus(),Status.READING)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(task.getRunner().getCurrentOffsets().get(0) == 200L)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "!task.getRunner().getStatus().equals(Status.READING)@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int i = 0@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "task.getRunner().setEndOffsets(ImmutableMap.of(0,500L),true)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "i < 5@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,200L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,500L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Thread.sleep(20)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testRunWithDuplicateRequest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "runTask(task)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "task.getRunner().pause()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(200L,(long)task.getRunner().getCurrentOffsets().get(0))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "insertData()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "resetOffsetAutomatically = true@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "task.getRunner().pause()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "task.getRunner().setEndOffsets(ImmutableMap.of(0,500L),true)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16->18 [style = bold, label=""];
22->15 [style = bold, label=""];
6->4 [style = solid, label="i"];
5->11 [style = solid, label="task"];
19->20 [style = bold, label=""];
4->0 [style = dotted, label="true"];
0->16 [style = dashed, label="0"];
11->8 [style = solid, label="task"];
4->7 [style = dotted, label="true"];
10->3 [style = bold, label=""];
4->2 [style = bold, label=""];
7->4 [style = bold, label=""];
6->7 [style = solid, label="i"];
4->14 [style = dotted, label="true"];
9->8 [style = bold, label=""];
17->19 [style = bold, label=""];
7->4 [style = solid, label="i"];
15->5 [style = bold, label=""];
1->9 [style = bold, label=""];
9->6 [style = bold, label=""];
14->7 [style = bold, label=""];
0->7 [style = bold, label=""];
20->21 [style = bold, label=""];
8->17 [style = bold, label=""];
0->14 [style = dashed, label="0"];
6->4 [style = bold, label=""];
2->12 [style = dashed, label="0"];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
13->3 [style = bold, label=""];
2->21 [style = dashed, label="0"];
12->14 [style = bold, label=""];
8->9 [style = bold, label=""];
9->1 [style = dotted, label="true"];
21->16 [style = bold, label=""];
4->12 [style = bold, label=""];
11->8 [style = bold, label=""];
4->19 [style = dashed, label="0"];
5->11 [style = bold, label=""];
8->9 [style = dotted, label="true"];
9->1 [style = bold, label=""];
4->12 [style = dotted, label="true"];
4->2 [style = dotted, label="true"];
}
