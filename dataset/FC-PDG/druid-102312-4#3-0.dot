digraph {
27 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED)).anyTimes()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(group0ExpectedEndSequenceNumbers,group0Config.getEndSequenceNumbers())@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "testShardMergePhaseThree['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
63 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpointsGroup0)).times(1)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group0ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD0_PARTITION,SHARD1_PARTITION,SHARD2_PARTITION)).anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "SeekableStreamStartSequenceNumbers<String,String> group0ExpectedStartSequenceNumbers = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,\"0\"),ImmutableSet.of())@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(group0ExpectedStartSequenceNumbers,group0Config.getStartSequenceNumbers())@@@60@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Capture<Task> postMergeCaptured = Capture.newInstance(CaptureType.ALL)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "return postMergeTasks@@@62@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "List<Task> phaseOneTasks@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID2))).andReturn(\"100\").anyTimes()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(task.getId())).andReturn(Optional.of(TaskStatus.running(task.getId()))).anyTimes()@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "EasyMock.reset(supervisorRecordSupplier)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "EasyMock.reset(taskClient)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "verifyAll()@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID0,SHARD_ID1,SHARD_ID2)).anyTimes()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(DATASOURCE,new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.EXPIRED_MARKER,SHARD_ID1,KinesisSequenceNumber.EXPIRED_MARKER,SHARD_ID2,\"100\"))))).andReturn(true).anyTimes()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "EasyMock.expect(taskStorage.getTask(successfulTask0.getId())).andReturn(Optional.of(successfulTask0)).anyTimes()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED)).anyTimes()@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.reset(taskRunner)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "EasyMock.reset(indexerMetadataStorageCoordinator)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD2_PARTITION)).anyTimes()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "EasyMock.reset(taskMaster)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testShardMergePhaseThree['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "EasyMock.reset(taskClient)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "testShardMergePhaseTwo['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(postMergeCaptured))).andReturn(true).times(1)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "EasyMock.expect(taskStorage.getTask(successfulTask1.getId())).andReturn(Optional.of(successfulTask1)).anyTimes()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "KinesisIndexTaskIOConfig group0Config = ((KinesisIndexTask)postMergeTasks.get(0)).getIOConfig()@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "EasyMock.replay(taskClient)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "Assert.assertEquals((Integer)0,group0Config.getTaskGroupId())@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "EasyMock.replay(taskClient)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.END_OF_SHARD_MARKER,SHARD_ID1,KinesisSequenceNumber.END_OF_SHARD_MARKER,SHARD_ID2,\"100\")))).anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "supervisor.runInternal()@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.END_OF_SHARD_MARKER,SHARD_ID1,KinesisSequenceNumber.END_OF_SHARD_MARKER)))).anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(successfulTask0.getId())).andReturn(Optional.of(TaskStatus.success(successfulTask0.getId())))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(group0ExpectedStartSequenceNumbers,group0Config.getStartSequenceNumbers())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "EasyMock.reset(taskStorage)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expect(taskStorage.getTask(successfulTask0.getId())).andReturn(Optional.of(successfulTask0)).anyTimes()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "checkpointsGroup0.put(0,ImmutableMap.of(SHARD_ID2,\"0\",SHARD_ID1,KinesisSequenceNumber.END_OF_SHARD_MARKER))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(1,postMergeTasks.size())@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Task successfulTask0 = phaseOneTasks.get(0)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID1))).andReturn(KinesisSequenceNumber.END_OF_SHARD_MARKER).anyTimes()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<Task> phaseTwoTasks@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID2)).anyTimes()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "supervisor.runInternal()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Task successfulTask1 = phaseOneTasks.get(1)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "EasyMock.replay(taskStorage)@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "verifyAll()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(task.getId())).andReturn(Optional.of(TaskStatus.running(task.getId()))).anyTimes()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "replayAll()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(postMergeTasks).anyTimes()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID0))).andReturn(KinesisSequenceNumber.END_OF_SHARD_MARKER).anyTimes()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID2))).andReturn(\"200\").anyTimes()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(DATASOURCE,new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID2,\"100\"))))).andReturn(true).anyTimes()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(successfulTask1.getId())).andReturn(Optional.of(TaskStatus.success(successfulTask1.getId())))@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.reset(taskStorage)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "KinesisIndexTaskIOConfig group0Config = ((KinesisIndexTask)postSplitTasks.get(0)).getIOConfig()@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.reset(taskQueue)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpointsGroup0 = new TreeMap<>()@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "EasyMock.expect(taskStorage.getTask(task.getId())).andReturn(Optional.of(task)).anyTimes()@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "verifyAll()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(postSplitTasks).anyTimes()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "List<Task> postMergeTasks = postMergeCaptured.getValues()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "EasyMock.expect(taskStorage.getTask(task.getId())).andReturn(Optional.of(task)).anyTimes()@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(group0ExpectedEndSequenceNumbers,group0Config.getEndSequenceNumbers())@@@61@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->77 [style = dashed, label="0"];
24->63 [style = bold, label=""];
35->48 [style = bold, label=""];
71->70 [style = bold, label=""];
43->60 [style = bold, label=""];
76->62 [style = bold, label=""];
69->76 [style = bold, label=""];
33->41 [style = solid, label="group0ExpectedStartSequenceNumbers"];
12->8 [style = dashed, label="0"];
17->6 [style = dotted, label="true"];
27->44 [style = bold, label=""];
67->81 [style = bold, label=""];
5->71 [style = dashed, label="0"];
11->29 [style = bold, label=""];
16->64 [style = bold, label=""];
19->11 [style = bold, label=""];
50->2 [style = bold, label=""];
37->15 [style = bold, label=""];
47->10 [style = bold, label=""];
69->60 [style = solid, label="postMergeTasks"];
26->56 [style = bold, label=""];
45->24 [style = bold, label=""];
2->53 [style = bold, label=""];
38->30 [style = bold, label=""];
40->16 [style = bold, label=""];
57->6 [style = dotted, label="true"];
51->61 [style = bold, label=""];
70->79 [style = bold, label=""];
4->8 [style = bold, label=""];
22->71 [style = bold, label=""];
44->18 [style = bold, label=""];
31->46 [style = bold, label=""];
29->1 [style = bold, label=""];
28->76 [style = dashed, label="0"];
66->43 [style = solid, label="group0ExpectedEndSequenceNumbers"];
8->34 [style = bold, label=""];
24->28 [style = bold, label=""];
61->26 [style = bold, label=""];
74->41 [style = bold, label=""];
4->80 [style = bold, label=""];
78->38 [style = bold, label=""];
64->74 [style = bold, label=""];
34->54 [style = bold, label=""];
51->0 [style = bold, label=""];
1->35 [style = bold, label=""];
63->69 [style = bold, label=""];
17->37 [style = bold, label=""];
22->5 [style = bold, label=""];
46->41 [style = bold, label=""];
5->25 [style = bold, label=""];
18->20 [style = bold, label=""];
7->51 [style = bold, label=""];
21->65 [style = bold, label=""];
35->31 [style = solid, label="group0ExpectedStartSequenceNumbers"];
65->72 [style = bold, label=""];
55->7 [style = bold, label=""];
58->42 [style = bold, label=""];
48->33 [style = bold, label=""];
19->62 [style = bold, label=""];
7->51 [style = dashed, label="0"];
56->14 [style = bold, label=""];
41->43 [style = bold, label=""];
15->36 [style = bold, label=""];
21->23 [style = bold, label=""];
9->22 [style = bold, label=""];
57->37 [style = bold, label=""];
40->64 [style = dashed, label="0"];
59->7 [style = bold, label=""];
36->52 [style = bold, label=""];
19->29 [style = bold, label=""];
48->46 [style = solid, label="group0ExpectedEndSequenceNumbers"];
62->19 [style = bold, label=""];
44->67 [style = bold, label=""];
72->59 [style = bold, label=""];
35->33 [style = dashed, label="0"];
73->8 [style = bold, label=""];
30->21 [style = bold, label=""];
75->37 [style = bold, label=""];
16->31 [style = bold, label=""];
66->16 [style = bold, label=""];
41->43 [style = solid, label="expectedPartitionGroups"];
33->16 [style = dashed, label="0"];
23->39 [style = bold, label=""];
25->42 [style = bold, label=""];
27->44 [style = dashed, label="0"];
14->27 [style = bold, label=""];
5->58 [style = bold, label=""];
32->24 [style = dashed, label="0"];
25->58 [style = dashed, label="0"];
32->45 [style = bold, label=""];
23->21 [style = dashed, label="0"];
42->13 [style = bold, label=""];
33->66 [style = bold, label=""];
24->69 [style = dashed, label="0"];
0->26 [style = bold, label=""];
28->10 [style = bold, label=""];
39->55 [style = bold, label=""];
52->49 [style = bold, label=""];
53->3 [style = bold, label=""];
42->79 [style = dashed, label="0"];
80->73 [style = bold, label=""];
75->77 [style = dotted, label="true"];
54->50 [style = bold, label=""];
33->40 [style = bold, label=""];
8->68 [style = bold, label=""];
12->4 [style = bold, label=""];
79->78 [style = bold, label=""];
20->12 [style = bold, label=""];
47->19 [style = bold, label=""];
10->47 [style = bold, label=""];
13->38 [style = bold, label=""];
3->32 [style = bold, label=""];
49->9 [style = bold, label=""];
81->12 [style = bold, label=""];
68->54 [style = bold, label=""];
}
