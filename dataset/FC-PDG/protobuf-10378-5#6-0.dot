digraph {
16 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawVarint64SlowPath())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertThat(CodedInputStream.readRawVarint32(rawInput)).isEqualTo((int)value)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(1,rawInput.available())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "blockSize *= 2@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertWithMessage(inputType.name()).that(input.readRawVarint64SlowPath()).isEqualTo(value)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "input = inputType.newDecoder(data,blockSize)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertWithMessage(inputType.name()).that(input.skipField(WireFormat.WIRETYPE_VARINT)).isTrue()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "byte(( longerData = new byte((((@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawVarint64())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "System.arraycopy(data,0,longerData,0,data.length)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "InputStream rawInput = new ByteArrayInputStream(longerData)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertWithMessage(inputType.name()).that(input.readRawVarint32()).isEqualTo((int)value)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "long value@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertReadLittleEndian32['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "byte(( data@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "byte(( data@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertWithMessage(inputType.name()).that(input.readRawVarint64()).isEqualTo(value)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "input = inputType.newDecoder(data,blockSize)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "int value@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(inputType.name(),input.skipField(WireFormat.WIRETYPE_VARINT))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertReadVarint['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(inputType.name(),(int)value,input.readRawVarint32())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "byte(( data@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int blockSize = 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertTrue(inputType.name(),input.isAtEnd())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawLittleEndian32())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals((int)value,CodedInputStream.readRawVarint32(rawInput))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertThat(rawInput.available()).isEqualTo(1)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "input = inputType.newDecoder(data,blockSize)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertReadVarint['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "blockSize <= 16@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "CodedInputStream input = inputType.newDecoder(data,blockSize)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
23->11 [style = solid, label="data"];
29->9 [style = dotted, label="true"];
20->11 [style = dotted, label="true"];
16->31 [style = dashed, label="0"];
5->24 [style = dashed, label="0"];
20->27 [style = dotted, label="true"];
14->28 [style = bold, label=""];
29->23 [style = dotted, label="true"];
9->3 [style = solid, label="value"];
1->16 [style = solid, label="data"];
1->11 [style = solid, label="data"];
22->4 [style = bold, label=""];
12->26 [style = dashed, label="0"];
1->7 [style = solid, label="data"];
1->0 [style = solid, label="data"];
17->22 [style = solid, label="input"];
31->6 [style = bold, label=""];
20->30 [style = dotted, label="true"];
13->16 [style = solid, label="input"];
20->31 [style = dotted, label="true"];
6->13 [style = solid, label="blockSize"];
21->16 [style = bold, label=""];
16->14 [style = bold, label=""];
9->21 [style = solid, label="value"];
20->13 [style = dotted, label="true"];
2->25 [style = bold, label=""];
20->15 [style = dotted, label="true"];
18->25 [style = dashed, label="0"];
19->14 [style = solid, label="blockSize"];
10->0 [style = solid, label="longerData"];
35->31 [style = bold, label=""];
23->13 [style = solid, label="data"];
34->19 [style = bold, label=""];
20->24 [style = dotted, label="true"];
19->20 [style = bold, label=""];
3->11 [style = bold, label=""];
18->12 [style = bold, label=""];
15->30 [style = dashed, label="0"];
2->18 [style = bold, label=""];
23->17 [style = solid, label="data"];
27->16 [style = bold, label=""];
20->5 [style = dotted, label="true"];
32->35 [style = solid, label="value"];
23->14 [style = solid, label="data"];
9->30 [style = solid, label="value"];
10->0 [style = bold, label=""];
7->6 [style = bold, label=""];
25->26 [style = bold, label=""];
23->16 [style = solid, label="data"];
17->15 [style = bold, label=""];
23->4 [style = solid, label="data"];
20->3 [style = dotted, label="true"];
1->17 [style = solid, label="data"];
6->4 [style = solid, label="blockSize"];
11->17 [style = bold, label=""];
5->7 [style = bold, label=""];
20->22 [style = dotted, label="true"];
4->7 [style = solid, label="input"];
20->19 [style = bold, label=""];
24->7 [style = bold, label=""];
20->6 [style = dotted, label="true"];
6->17 [style = solid, label="blockSize"];
20->35 [style = dotted, label="true"];
3->28 [style = dashed, label="0"];
20->13 [style = bold, label=""];
4->24 [style = bold, label=""];
21->27 [style = dashed, label="0"];
20->17 [style = dotted, label="true"];
1->22 [style = solid, label="data"];
20->14 [style = dotted, label="true"];
1->13 [style = solid, label="data"];
20->7 [style = dotted, label="true"];
33->13 [style = solid, label="data"];
23->7 [style = solid, label="data"];
15->22 [style = bold, label=""];
19->4 [style = solid, label="blockSize"];
6->20 [style = bold, label=""];
13->27 [style = bold, label=""];
29->19 [style = bold, label=""];
9->18 [style = solid, label="value"];
20->4 [style = dotted, label="true"];
19->20 [style = solid, label="blockSize"];
34->33 [style = dotted, label="true"];
1->4 [style = solid, label="data"];
10->2 [style = solid, label="longerData"];
8->9 [style = dotted, label="true"];
21->35 [style = dashed, label="0"];
23->22 [style = solid, label="data"];
4->5 [style = bold, label=""];
14->11 [style = solid, label="input"];
34->32 [style = dotted, label="true"];
23->0 [style = solid, label="data"];
6->14 [style = solid, label="blockSize"];
30->22 [style = bold, label=""];
8->19 [style = bold, label=""];
28->11 [style = bold, label=""];
0->2 [style = bold, label=""];
9->25 [style = solid, label="value"];
17->30 [style = bold, label=""];
20->21 [style = dotted, label="true"];
19->17 [style = solid, label="blockSize"];
9->33 [style = dashed, label="0"];
1->14 [style = solid, label="data"];
20->10 [style = bold, label=""];
8->1 [style = dotted, label="true"];
9->15 [style = solid, label="value"];
19->13 [style = solid, label="blockSize"];
20->28 [style = dotted, label="true"];
6->20 [style = solid, label="blockSize"];
9->27 [style = solid, label="value"];
9->28 [style = solid, label="value"];
13->21 [style = bold, label=""];
13->35 [style = bold, label=""];
20->16 [style = dotted, label="true"];
2->18 [style = solid, label="rawInput"];
}
