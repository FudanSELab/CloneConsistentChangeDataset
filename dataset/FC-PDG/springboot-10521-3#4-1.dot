digraph {
12 [style = filled, label = "CompositeMeterRegistry firstLevel1 = new CompositeMeterRegistry()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "matchingMeterNotFoundInNestedRegistries['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "secondLevel.counter(\"cache\",\"result\",\"miss\",\"host\",\"1\").increment(2)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "composite.add(firstLevel1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "composite.add(firstLevel0)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "MetricsEndpoint.MetricResponse response = endpoint.metric(\"invalid.metric.name\",Collections.emptyList())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "MetricsEndpoint.MetricResponse response = endpoint.metric(\"cache\",Collections.emptyList())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(response).isNull()@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(availableTagKeys(response)).containsExactly(\"result\",\"host\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "findFirstMatchingMetersFromNestedRegistries['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "secondLevel.counter(\"cache\",\"result\",\"hit\",\"host\",\"2\").increment(2)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "CompositeMeterRegistry composite = new CompositeMeterRegistry()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "composite.add(firstLevel)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "MetricsEndpoint endpoint = new MetricsEndpoint(composite)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "MetricsEndpoint endpoint = new MetricsEndpoint(composite)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "response = endpoint.metric(\"cache\",Collections.singletonList(\"result:hit\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(response.getName()).isEqualTo(\"cache\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "findFirstMatchingMetersFromNestedRegistries['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "firstLevel1.add(secondLevel)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "SimpleMeterRegistry secondLevel = new SimpleMeterRegistry()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(getCount(response)).hasValue(6.0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SimpleMeterRegistry firstLevel0 = new SimpleMeterRegistry()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "CompositeMeterRegistry firstLevel = new CompositeMeterRegistry()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "firstLevel.add(secondLevel)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(availableTagKeys(response)).containsExactly(\"host\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "secondLevel.counter(\"cache\",\"result\",\"hit\",\"host\",\"1\").increment(2)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(getCount(response)).hasValue(4.0)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
17->8 [style = bold, label=""];
21->0 [style = bold, label=""];
9->4 [style = bold, label=""];
3->14 [style = bold, label=""];
0->2 [style = bold, label=""];
8->3 [style = bold, label=""];
9->22 [style = dashed, label="0"];
20->1 [style = bold, label=""];
26->24 [style = bold, label=""];
24->22 [style = bold, label=""];
12->0 [style = bold, label=""];
10->2 [style = solid, label="firstLevel0"];
17->25 [style = dashed, label="0"];
1->23 [style = bold, label=""];
11->5 [style = bold, label=""];
19->1 [style = bold, label=""];
1->26 [style = solid, label="composite"];
2->0 [style = dashed, label="0"];
23->21 [style = bold, label=""];
16->1 [style = bold, label=""];
18->6 [style = bold, label=""];
0->25 [style = bold, label=""];
10->12 [style = bold, label=""];
21->25 [style = solid, label="secondLevel"];
6->24 [style = dashed, label="0"];
23->0 [style = solid, label="firstLevel"];
25->26 [style = bold, label=""];
1->18 [style = solid, label="composite"];
0->8 [style = solid, label="secondLevel"];
5->7 [style = bold, label=""];
7->15 [style = bold, label=""];
14->13 [style = bold, label=""];
6->9 [style = bold, label=""];
4->11 [style = bold, label=""];
10->23 [style = dashed, label="0"];
1->10 [style = bold, label=""];
12->17 [style = solid, label="firstLevel1"];
13->18 [style = bold, label=""];
}
