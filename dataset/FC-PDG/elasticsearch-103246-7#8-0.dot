digraph {
1 [style = filled, label = "assertEquals(List.of(\"value\"),fetchSourceValue(normalizerMapper,\"value\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "MappedFieldType nullValueMapper = new KeywordFieldMapper.Builder(\"field\").nullValue(\"NULL\").build(new ContentPath()).fieldType()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(List.of(\"NULL\"),fetchSourceValue(nullValueMapper,null))@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(List.of(\"NULL\"),fetchSourceValue(nullValueMapper,null))@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "MappedFieldType ignoreAboveMapper = new KeywordFieldMapper.Builder(\"field\").ignoreAbove(4).build(new ContentPath()).fieldType()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(List.of(\"true\"),fetchSourceValue(mapper,true))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "MappedFieldType normalizerMapper = new KeywordFieldMapper.Builder(\"field\",createIndexAnalyzers()).normalizer(\"lowercase\").build(new ContentPath()).fieldType()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(List.of(\"42\"),fetchSourceValue(normalizerMapper,42L))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(List.of(),fetchSourceValue(ignoreAboveMapper,\"value\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(List.of(\"42\"),fetchSourceValue(ignoreAboveMapper,42L))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testFetchSourceValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "MappedFieldType mapper = new KeywordFieldMapper.Builder(\"field\").build(new ContentPath()).fieldType()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(List.of(\"value\"),fetchSourceValue(mapper,\"value\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "MappedFieldType normalizerMapper = new KeywordFieldMapper.Builder(\"field\",createIndexAnalyzers(),ScriptCompiler.NONE).normalizer(\"lowercase\").build(new ContentPath()).fieldType()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(\"Field (field( of type (keyword( doesn't support formats.\",e.getMessage())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "MappedFieldType nullValueMapper = new WildcardFieldMapper.Builder(\"field\",Version.CURRENT).nullValue(\"NULL\").build(new ContentPath()).fieldType()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(List.of(\"true\"),fetchSourceValue(ignoreAboveMapper,true))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(List.of(\"value\"),fetchSourceValue(normalizerMapper,\"VALUE\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "IllegalArgumentException e = expectThrows(,null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "MappedFieldType mapper = new WildcardFieldMapper.Builder(\"field\",Version.CURRENT).build(new ContentPath()).fieldType()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testFetchSourceValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(List.of(\"42\"),fetchSourceValue(mapper,42L))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testFetchSourceValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "MappedFieldType ignoreAboveMapper = new WildcardFieldMapper.Builder(\"field\",Version.CURRENT).ignoreAbove(4).build(new ContentPath()).fieldType()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18->8 [style = solid, label="normalizerMapper"];
4->14 [style = solid, label="mapper"];
6->11 [style = solid, label="ignoreAboveMapper"];
0->6 [style = bold, label=""];
18->1 [style = solid, label="normalizerMapper"];
20->16 [style = solid, label="mapper"];
10->19 [style = bold, label=""];
9->4 [style = bold, label=""];
3->18 [style = dashed, label="0"];
18->13 [style = solid, label="normalizerMapper"];
12->15 [style = bold, label=""];
14->10 [style = bold, label=""];
11->12 [style = bold, label=""];
6->12 [style = solid, label="ignoreAboveMapper"];
15->3 [style = bold, label=""];
1->7 [style = bold, label=""];
15->18 [style = bold, label=""];
20->10 [style = solid, label="mapper"];
3->13 [style = solid, label="normalizerMapper"];
4->10 [style = solid, label="mapper"];
4->16 [style = solid, label="mapper"];
8->1 [style = bold, label=""];
7->5 [style = bold, label=""];
2->0 [style = bold, label=""];
3->8 [style = solid, label="normalizerMapper"];
19->23 [style = solid, label="ignoreAboveMapper"];
19->21 [style = solid, label="ignoreAboveMapper"];
20->16 [style = bold, label=""];
3->12 [style = dashed, label="0"];
23->21 [style = bold, label=""];
21->11 [style = bold, label=""];
22->20 [style = bold, label=""];
4->20 [style = dashed, label="0"];
19->23 [style = bold, label=""];
6->15 [style = solid, label="ignoreAboveMapper"];
6->11 [style = bold, label=""];
20->14 [style = solid, label="mapper"];
18->13 [style = bold, label=""];
3->13 [style = bold, label=""];
16->14 [style = bold, label=""];
19->11 [style = solid, label="ignoreAboveMapper"];
10->2 [style = bold, label=""];
13->8 [style = bold, label=""];
3->1 [style = solid, label="normalizerMapper"];
17->4 [style = bold, label=""];
4->16 [style = bold, label=""];
}
