digraph {
15 [style = filled, label = "main['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "unalignedCheckpoints.ifPresent(null)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "final Optional<Boolean> unalignedCheckpoints = args.length > 4? Optional.of(Boolean.parseBoolean(args(4()): Optional.empty()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final String outputPath = args(1(@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "main['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "env.execute()@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "main['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String(( args@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "env.setParallelism(parallelism)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "source.map(new MapFunction<Integer,Tuple2<Integer,Integer>>(){@Override public Tuple2<Integer,Integer> map(Integer value){return new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism),value)}}).keyBy(new KeySelector<Tuple2<Integer,Integer>,Integer>(){@Override public Integer getKey(Tuple2<Integer,Integer> value){return value.f0}}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath,FileSystem.WriteMode.OVERWRITE)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "DataStream<Integer> source = env.addSource(new InfiniteIntegerSource())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "source.map(new MapFunction<Integer,Tuple2<Integer,Integer>>(){@Override public Tuple2<Integer,Integer> map(Integer value){return new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism),value)}}).keyBy(new KeySelector<Tuple2<Integer,Integer>,Integer>(){@Override public Integer getKey(Tuple2<Integer,Integer> value){return value.f0}}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "env.enableCheckpointing(100)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "env.enableCheckpointing(checkpointingInterval)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final String checkpointPath = args(1(@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final int checkpointingInterval = Integer.parseInt(args(2()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final String outputPath = args(3(@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "env.setStateBackend(new FsStateBackend(checkpointPath))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final int parallelism = 1@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final String checkpointPath = args(0(@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "env.execute()@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final int parallelism = Integer.parseInt(args(0()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1,1000))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DataStream<Integer> source = env.addSource(new InfiniteIntegerSource())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
8->16 [style = solid, label="args"];
8->13 [style = solid, label="args"];
14->10 [style = solid, label="checkpointingInterval"];
7->10 [style = bold, label=""];
13->12 [style = solid, label="checkpointPath"];
8->14 [style = solid, label="args"];
4->8 [style = dotted, label="true"];
13->17 [style = dashed, label="0"];
3->6 [style = bold, label=""];
8->17 [style = solid, label="args"];
8->1 [style = solid, label="args"];
6->0 [style = bold, label=""];
1->6 [style = solid, label="outputPath"];
18->8 [style = dotted, label="true"];
16->17 [style = bold, label=""];
12->24 [style = bold, label=""];
11->7 [style = solid, label="parallelism"];
10->2 [style = dashed, label="0"];
14->1 [style = bold, label=""];
21->2 [style = bold, label=""];
16->23 [style = solid, label="checkpointPath"];
8->11 [style = solid, label="args"];
5->2 [style = bold, label=""];
18->16 [style = bold, label=""];
23->22 [style = bold, label=""];
15->8 [style = dotted, label="true"];
15->11 [style = bold, label=""];
10->12 [style = bold, label=""];
22->12 [style = bold, label=""];
7->23 [style = bold, label=""];
11->13 [style = bold, label=""];
17->20 [style = bold, label=""];
10->9 [style = bold, label=""];
12->3 [style = bold, label=""];
9->12 [style = bold, label=""];
1->2 [style = bold, label=""];
20->21 [style = solid, label="parallelism"];
2->7 [style = bold, label=""];
17->12 [style = solid, label="outputPath"];
4->11 [style = bold, label=""];
20->19 [style = bold, label=""];
13->14 [style = bold, label=""];
8->5 [style = solid, label="args"];
19->21 [style = bold, label=""];
}
