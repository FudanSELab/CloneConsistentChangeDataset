digraph {
6 [style = filled, label = "assertEquals(\"four\",driver.flushedEntryStored(4))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "store.put(5,\"five\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"two\",store.get(2))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "store.delete(5)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(4,driver.sizeOf(store))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(\"zero\",store.get(0))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"one\",driver.flushedEntryStored(1))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertFalse(driver.flushedEntryRemoved(1))@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(\"two\",driver.flushedEntryStored(2))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertFalse(driver.flushedEntryRemoved(4))@@@22@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "expectedContents.put(0,\"zero\")@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(false,driver.flushedEntryRemoved(0))@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"four\",store.get(4))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(expectedContents,getContents(store.range(2,6)))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(false,driver.flushedEntryRemoved(2))@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertNull(store.get(3))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertFalse(driver.flushedEntryRemoved(0))@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "store.put(1,\"one\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "store.flush()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(null,driver.flushedEntryStored(5))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "final HashMap<Integer,String> expectedContents = new HashMap<>()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(4,driver.sizeOf(store))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertEquals(5,driver.sizeOf(store))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertNull(store.putIfAbsent(4,\"four\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertNull(store.putIfAbsent(1,\"one\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertNull(store.putIfAbsent(2,\"two\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testPutGetRange['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testPutIfAbsent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertEquals(false,driver.flushedEntryRemoved(4))@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expectedContents.put(2,\"two\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(expectedContents,getContents(store.all()))@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(\"zero\",driver.flushedEntryStored(0))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "store.put(4,\"four\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "store.put(0,\"zero\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "expectedContents.put(4,\"four\")@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "store.put(2,\"two\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "expectedContents.put(1,\"one\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(false,driver.flushedEntryRemoved(1))@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(true,driver.flushedEntryRemoved(5))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertFalse(driver.flushedEntryRemoved(2))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(\"four\",store.putIfAbsent(4,\"unexpected value\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"one\",store.get(1))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(expectedContents,getContents(store.range(2,4)))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertEquals(\"five\",store.get(5))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testPutIfAbsent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertNull(store.putIfAbsent(0,\"zero\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->21 [style = bold, label=""];
12->25 [style = dashed, label="0"];
13->15 [style = bold, label=""];
3->44 [style = dashed, label="0"];
23->25 [style = bold, label=""];
36->37 [style = bold, label=""];
16->4 [style = bold, label=""];
26->36 [style = bold, label=""];
4->21 [style = dashed, label="0"];
27->28 [style = bold, label=""];
2->5 [style = bold, label=""];
41->44 [style = bold, label=""];
37->35 [style = bold, label=""];
40->45 [style = bold, label=""];
5->41 [style = dashed, label="0"];
0->9 [style = bold, label=""];
18->13 [style = bold, label=""];
20->23 [style = dashed, label="0"];
7->32 [style = dashed, label="0"];
39->35 [style = solid, label="expectedContents"];
1->18 [style = bold, label=""];
29->41 [style = bold, label=""];
6->24 [style = bold, label=""];
11->6 [style = bold, label=""];
0->42 [style = dashed, label="0"];
4->20 [style = bold, label=""];
12->38 [style = bold, label=""];
31->32 [style = bold, label=""];
6->16 [style = bold, label=""];
39->26 [style = solid, label="expectedContents"];
10->1 [style = bold, label=""];
3->17 [style = bold, label=""];
15->11 [style = bold, label=""];
22->7 [style = bold, label=""];
6->34 [style = bold, label=""];
34->16 [style = bold, label=""];
14->8 [style = bold, label=""];
28->18 [style = bold, label=""];
42->9 [style = bold, label=""];
16->24 [style = dashed, label="0"];
9->14 [style = bold, label=""];
43->27 [style = bold, label=""];
2->29 [style = dashed, label="0"];
30->40 [style = bold, label=""];
45->26 [style = bold, label=""];
5->3 [style = bold, label=""];
19->7 [style = bold, label=""];
32->29 [style = bold, label=""];
21->23 [style = bold, label=""];
44->33 [style = bold, label=""];
39->45 [style = solid, label="expectedContents"];
1->43 [style = bold, label=""];
39->30 [style = bold, label=""];
20->12 [style = bold, label=""];
8->10 [style = bold, label=""];
17->0 [style = bold, label=""];
33->42 [style = bold, label=""];
38->39 [style = bold, label=""];
7->2 [style = bold, label=""];
}
