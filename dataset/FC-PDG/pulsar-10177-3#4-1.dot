digraph {
19 [style = filled, label = "testCompressDecompress['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "raw.writeBytes(data)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "uncompressed.release()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "i < 5@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(raw.refCnt(),0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(raw.readableBytes(),data.length)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "byte(( data = text.getBytes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(compressed.readableBytes(),compressedSize)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "compressed.release()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int compressedSize = compressed.readableBytes()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "ByteBuf compressed = codec.encode(raw)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(uncompressed,raw)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "CompressionType type@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(compressed.refCnt(),0)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ByteBuf uncompressed = codec.decode(compressed,data.length)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(compressed.refCnt(),0)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testMultpileUsages['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "i++@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "int i = 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testCompressDecompress['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(uncompressed.readableBytes(),data.length)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "CompressionType type@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ByteBuf raw = PooledByteBufAllocator.DEFAULT.buffer()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "raw.release()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->16 [style = bold, label=""];
6->3 [style = bold, label=""];
2->15 [style = solid, label="compressed"];
23->25 [style = bold, label=""];
20->2 [style = solid, label="raw"];
7->10 [style = bold, label=""];
25->4 [style = dotted, label="true"];
25->4 [style = bold, label=""];
19->12 [style = dotted, label="true"];
19->11 [style = bold, label=""];
4->18 [style = bold, label=""];
15->6 [style = bold, label=""];
10->17 [style = bold, label=""];
4->2 [style = solid, label="raw"];
25->0 [style = dotted, label="true"];
21->25 [style = bold, label=""];
5->12 [style = dotted, label="true"];
18->2 [style = bold, label=""];
0->6 [style = solid, label="compressedSize"];
9->7 [style = bold, label=""];
25->13 [style = dotted, label="true"];
25->14 [style = dotted, label="true"];
25->1 [style = dotted, label="true"];
22->24 [style = dotted, label="true"];
0->15 [style = bold, label=""];
14->1 [style = bold, label=""];
1->9 [style = bold, label=""];
21->25 [style = solid, label="i"];
25->18 [style = dotted, label="true"];
8->0 [style = bold, label=""];
20->18 [style = bold, label=""];
9->23 [style = bold, label=""];
15->13 [style = solid, label="uncompressed"];
25->15 [style = dotted, label="true"];
25->9 [style = dotted, label="true"];
4->20 [style = dashed, label="0"];
16->21 [style = bold, label=""];
12->11 [style = solid, label="type"];
4->13 [style = solid, label="raw"];
12->24 [style = dashed, label="0"];
25->6 [style = dotted, label="true"];
3->13 [style = bold, label=""];
20->13 [style = solid, label="raw"];
25->3 [style = dotted, label="true"];
5->11 [style = bold, label=""];
25->23 [style = dotted, label="true"];
16->4 [style = bold, label=""];
16->20 [style = bold, label=""];
25->2 [style = dotted, label="true"];
21->23 [style = solid, label="i"];
23->25 [style = solid, label="i"];
13->14 [style = bold, label=""];
22->11 [style = bold, label=""];
16->18 [style = solid, label="data"];
25->8 [style = dotted, label="true"];
2->8 [style = bold, label=""];
24->11 [style = solid, label="type"];
}
