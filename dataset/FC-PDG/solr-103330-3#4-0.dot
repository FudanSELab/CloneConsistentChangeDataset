digraph {
38 [style = filled, label = "NumericDocValues doubles = cache.getNumerics(ar,\"bogusdoubles\",FieldCache.DOUBLE_POINT_PARSER)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "scratch = sorted.get(0)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(0,ints.get(0))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertEquals(NO_MORE_DOCS,binaries.nextDoc())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "SortedDocValues sorted = cache.getTermsIndex(ar,\"bogustermsindex\")@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertEquals(-1,sorted.getOrd(0))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "NumericDocValues floats = cache.getNumerics(ar,\"bogusfloats\",FieldCache.FLOAT_POINT_PARSER,true)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertFalse(bits.get(0))@@@32@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(NO_MORE_DOCS,floats.nextDoc())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "dir.close()@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(0,scratch.length)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "RandomIndexWriter iw = new RandomIndexWriter(random(),dir)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "cache.purgeAllCaches()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertEquals(0,cache.getCacheEntries().length)@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "testNonexistantFields['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "NumericDocValues longs = cache.getNumerics(ar,\"boguslongs\",FieldCache.LEGACY_LONG_PARSER,true)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(NO_MORE_DOCS,longs.nextDoc())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "ir.close()@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Document doc = new Document()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(0,cache.getCacheEntries().length)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(0,longs.get(0))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DirectoryReader ir = iw.getReader()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertEquals(NO_MORE_DOCS,ints.nextDoc())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
53 [style = filled, label = "NumericDocValues doubles = cache.getNumerics(ar,\"bogusdoubles\",FieldCache.LEGACY_DOUBLE_PARSER,true)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(0,scratch.length)@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "iw.addDocument(doc)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "NumericDocValues floats = cache.getNumerics(ar,\"bogusfloats\",FieldCache.LEGACY_FLOAT_PARSER,true)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "BinaryDocValues binaries = cache.getTerms(ar,\"bogusterms\")@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testNonexistantFields['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "BytesRef scratch = binaries.get(0)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertEquals(NO_MORE_DOCS,doubles.nextDoc())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "LeafReader ar = getOnlyLeafReader(ir)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertFalse(bits.get(0))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "NumericDocValues longs = cache.getNumerics(ar,\"boguslongs\",FieldCache.LONG_POINT_PARSER,true)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "final FieldCache cache = FieldCache.DEFAULT@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "SortedSetDocValues sortedSet = cache.getDocTermOrds(ar,\"bogusmultivalued\",null)@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "dir.close()@@@23@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(SortedSetDocValues.NO_MORE_ORDS,sortedSet.nextOrd())@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "NumericDocValues ints = cache.getNumerics(ar,\"bogusints\",FieldCache.INT_POINT_PARSER,true)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "iw.close()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "sortedSet.setDocument(0)@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "assertEquals(NO_MORE_DOCS,sortedSet.nextDoc())@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "Bits bits = cache.getDocsWithField(ar,\"bogusbits\",null)@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "NumericDocValues ints = cache.getNumerics(ar,\"bogusints\",FieldCache.INT_POINT_PARSER)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "NumericDocValues ints = cache.getNumerics(ar,\"bogusints\",FieldCache.LEGACY_INT_PARSER,true)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "NumericDocValues doubles = cache.getNumerics(ar,\"bogusdoubles\",FieldCache.DOUBLE_POINT_PARSER,true)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(0,cache.getCacheEntries().length)@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "NumericDocValues floats = cache.getNumerics(ar,\"bogusfloats\",FieldCache.FLOAT_POINT_PARSER)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Directory dir = newDirectory()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(NO_MORE_DOCS,sorted.nextDoc())@@@24@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "ir.close()@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testNonexistantFields['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "BinaryDocValues binaries = cache.getTerms(ar,\"bogusterms\",true)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "NumericDocValues longs = cache.getNumerics(ar,\"boguslongs\",FieldCache.LONG_POINT_PARSER)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(0,doubles.get(0))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(0,floats.get(0))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->33 [style = solid, label="ir"];
23->51 [style = dashed, label="0"];
10->24 [style = bold, label=""];
31->1 [style = bold, label=""];
21->30 [style = bold, label=""];
0->53 [style = bold, label=""];
44->46 [style = bold, label=""];
33->54 [style = solid, label="ar"];
20->16 [style = bold, label=""];
52->14 [style = bold, label=""];
0->25 [style = bold, label=""];
33->25 [style = solid, label="ar"];
20->37 [style = bold, label=""];
33->4 [style = solid, label="ar"];
33->7 [style = solid, label="ar"];
0->34 [style = dashed, label="0"];
33->38 [style = solid, label="ar"];
33->37 [style = solid, label="ar"];
28->3 [style = bold, label=""];
33->55 [style = solid, label="ar"];
23->50 [style = dashed, label="0"];
25->28 [style = bold, label=""];
7->11 [style = bold, label=""];
48->49 [style = bold, label=""];
11->51 [style = bold, label=""];
26->17 [style = bold, label=""];
35->44 [style = bold, label=""];
33->15 [style = bold, label=""];
33->12 [style = solid, label="ar"];
9->2 [style = bold, label=""];
19->20 [style = bold, label=""];
33->44 [style = solid, label="ar"];
33->45 [style = solid, label="ar"];
33->23 [style = solid, label="ar"];
12->48 [style = bold, label=""];
40->34 [style = bold, label=""];
36->14 [style = bold, label=""];
7->54 [style = dashed, label="0"];
50->39 [style = bold, label=""];
5->13 [style = solid, label="doc"];
4->0 [style = bold, label=""];
8->22 [style = bold, label=""];
33->8 [style = solid, label="ar"];
4->55 [style = dashed, label="0"];
43->12 [style = bold, label=""];
49->31 [style = bold, label=""];
33->40 [style = solid, label="ar"];
15->9 [style = bold, label=""];
47->41 [style = bold, label=""];
51->27 [style = bold, label=""];
34->38 [style = bold, label=""];
38->35 [style = bold, label=""];
33->50 [style = solid, label="ar"];
41->50 [style = bold, label=""];
13->10 [style = bold, label=""];
16->18 [style = bold, label=""];
54->11 [style = bold, label=""];
22->19 [style = bold, label=""];
14->32 [style = solid, label="dir"];
25->53 [style = dashed, label="0"];
1->3 [style = bold, label=""];
33->31 [style = solid, label="ar"];
45->20 [style = bold, label=""];
24->33 [style = bold, label=""];
33->51 [style = solid, label="ar"];
25->38 [style = dashed, label="0"];
27->55 [style = bold, label=""];
27->39 [style = dashed, label="0"];
39->40 [style = bold, label=""];
5->13 [style = bold, label=""];
28->8 [style = bold, label=""];
3->21 [style = bold, label=""];
2->54 [style = bold, label=""];
8->44 [style = dashed, label="0"];
14->32 [style = bold, label=""];
2->47 [style = bold, label=""];
53->28 [style = bold, label=""];
37->42 [style = bold, label=""];
33->47 [style = solid, label="ar"];
7->47 [style = dashed, label="0"];
16->20 [style = dashed, label="0"];
32->5 [style = bold, label=""];
42->43 [style = bold, label=""];
23->27 [style = bold, label=""];
17->31 [style = bold, label=""];
33->53 [style = solid, label="ar"];
22->46 [style = dashed, label="0"];
12->26 [style = bold, label=""];
55->0 [style = bold, label=""];
28->35 [style = dashed, label="0"];
6->14 [style = bold, label=""];
27->4 [style = bold, label=""];
18->29 [style = bold, label=""];
29->12 [style = bold, label=""];
33->43 [style = solid, label="ar"];
33->20 [style = solid, label="ar"];
11->41 [style = dashed, label="0"];
46->45 [style = bold, label=""];
26->42 [style = dashed, label="0"];
2->7 [style = bold, label=""];
4->40 [style = dashed, label="0"];
11->23 [style = bold, label=""];
}
