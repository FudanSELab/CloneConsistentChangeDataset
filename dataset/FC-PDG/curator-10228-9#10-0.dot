digraph {
25 [style = filled, label = "PathChildrenCache cache2 = new PathChildrenCache(client,\"/test\",true,false,exec)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "cache2.close()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "cache.getListenable().addListener(new PathChildrenCacheListener(){@Override public void childEvent(CuratorFramework client,PathChildrenCacheEvent event){if (event.getData().getPath().equals(\"/test/one\")) {events.offer(event.getType())}}})@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "cache.start()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Timing timing = new Timing()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "client.setData().forPath(\"/test/one\",\"sup!\".getBytes())@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "cache2.start()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()),\"sup!\")@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testBasics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "cache2.getListenable().addListener(new PathChildrenCacheListener(){@Override public void childEvent(CuratorFramework client,PathChildrenCacheEvent event){if (event.getData().getPath().equals(\"/test/one\")) {events2.offer(event.getType())}}})@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(events2.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_ADDED)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "PathChildrenCache cache = new PathChildrenCache(client,\"/test\",true)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "client.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final ExecutorService exec = Executors.newSingleThreadExecutor()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(events.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_ADDED)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "cache.start()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(events.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_UPDATED)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testBasics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(events2.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_REMOVED)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "cache.getListenable().addListener(new PathChildrenCacheListener(){@Override public void childEvent(CuratorFramework client,PathChildrenCacheEvent event){if (event.getData().getPath().equals(\"/test/one\")) {events.offer(event.getType())}}})@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "client.create().forPath(\"/test\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "client.create().forPath(\"/test/one\",\"hey there\".getBytes())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()),\"sup!\")@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(events2.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_UPDATED)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "PathChildrenCache cache = new PathChildrenCache(client,\"/test\",true,false,exec)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(events.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_REMOVED)@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "{TestCleanState.closeAndTestClean(client)}@@@45@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testBasicsOnTwoCachesWithSameExecutor['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "client.delete().forPath(\"/test/one\")@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "{TestCleanState.closeAndTestClean(client)}@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "cache.close()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
6->17 [style = bold, label=""];
16->3 [style = bold, label=""];
6->32 [style = bold, label=""];
4->14 [style = bold, label=""];
10->15 [style = bold, label=""];
5->9 [style = bold, label=""];
22->19 [style = bold, label=""];
0->6 [style = bold, label=""];
21->33 [style = bold, label=""];
16->7 [style = bold, label=""];
29->25 [style = bold, label=""];
12->30 [style = bold, label=""];
31->25 [style = solid, label="exec"];
12->16 [style = bold, label=""];
9->10 [style = bold, label=""];
2->4 [style = bold, label=""];
27->22 [style = bold, label=""];
7->3 [style = bold, label=""];
1->9 [style = bold, label=""];
33->0 [style = bold, label=""];
8->1 [style = bold, label=""];
31->26 [style = bold, label=""];
24->4 [style = bold, label=""];
14->26 [style = solid, label="client"];
13->12 [style = bold, label=""];
14->28 [style = solid, label="client"];
18->4 [style = bold, label=""];
14->25 [style = solid, label="client"];
15->0 [style = bold, label=""];
13->23 [style = bold, label=""];
7->27 [style = bold, label=""];
11->8 [style = bold, label=""];
14->5 [style = solid, label="client"];
23->12 [style = bold, label=""];
17->13 [style = bold, label=""];
19->28 [style = bold, label=""];
31->26 [style = solid, label="exec"];
1->31 [style = bold, label=""];
30->16 [style = bold, label=""];
20->15 [style = bold, label=""];
14->11 [style = bold, label=""];
14->3 [style = solid, label="client"];
32->17 [style = bold, label=""];
15->29 [style = bold, label=""];
26->20 [style = bold, label=""];
25->21 [style = bold, label=""];
}
