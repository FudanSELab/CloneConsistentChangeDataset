digraph {
15 [style = filled, label = "rulepair(0(.setUuid(UUID.randomUUID())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final ConfigurePortForwardingRulesOnLogicalRouterAnswer a = (ConfigurePortForwardingRulesOnLogicalRouterAnswer)resource.executeRequest(cmd)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final NatRule(( rulepair = resource.generatePortForwardingRulePair(\"10.10.10.10\",new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@72ae5a,\"11.11.11.11\",new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@72ae60,\"tcp\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "rulepair(1(.setUuid(UUID.randomUUID())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(nvpApi.createLogicalRouterNatRule(eq(\"aaaaa\"),(NatRule)any())).thenReturn(rulepair(0().thenReturn(rulepair(1()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "resource.configure(\"NiciraNvpResource\",parameters)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "when(nvpApi.findNatRulesByLogicalRouterUuid(\"aaaaa\")).thenReturn(storedRules)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertFalse(a.getResult())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "verify(nvpApi,atLeast(2)).createLogicalRouterNatRule(eq(\"aaaaa\"),argThat(new ArgumentMatcher<NatRule>(){@Override public boolean matches(final NatRule rule){if (rule.getType().equals(\"DestinationNatRule\") && ((DestinationNatRule)rule).getToDestinationIpAddress().equals(\"10.10.10.10\")) {return true}if (rule.getType().equals(\"SourceNatRule\") && ((SourceNatRule)rule).getToSourceIpAddressMin().equals(\"11.11.11.11\")) {return true}return false}}))@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final PortForwardingRuleTO rule = new PortForwardingRuleTO(1,\"11.11.11.11\",80,80,\"10.10.10.10\",8080,8080,\"tcp\",false,false)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(cmd.getRules()).thenReturn(rules)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testConfigurePortForwardingRulesOnLogicalRouter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "testConfigurePortForwardingRulesOnLogicalRouter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "@SuppressWarnings(\"unchecked\") final List<NatRule> storedRules = Collections.EMPTY_LIST@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testConfigurePortForwardingRulesOnLogicalRouterPortRange['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final ConfigurePortForwardingRulesOnLogicalRouterCommand cmd = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final PortForwardingRuleTO rule = new PortForwardingRuleTO(1,\"11.11.11.11\",80,85,\"10.10.10.10\",80,85,\"tcp\",false,false)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(a.getResult())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(cmd.getLogicalRouterUuid()).thenReturn(\"aaaaa\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "rules.add(rule)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final List<PortForwardingRuleTO> rules = new ArrayList<PortForwardingRuleTO>()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->14 [style = solid, label="rule"];
11->4 [style = bold, label=""];
20->14 [style = solid, label="rule"];
11->20 [style = bold, label=""];
10->6 [style = bold, label=""];
15->12 [style = bold, label=""];
6->11 [style = bold, label=""];
14->13 [style = bold, label=""];
9->2 [style = bold, label=""];
16->8 [style = bold, label=""];
7->19 [style = dashed, label="0"];
2->16 [style = solid, label="rulepair"];
0->13 [style = solid, label="rules"];
11->8 [style = solid, label="cmd"];
12->16 [style = bold, label=""];
17->6 [style = bold, label=""];
3->9 [style = solid, label="storedRules"];
3->9 [style = bold, label=""];
8->7 [style = bold, label=""];
4->20 [style = dashed, label="0"];
5->3 [style = bold, label=""];
7->1 [style = bold, label=""];
20->0 [style = bold, label=""];
0->14 [style = bold, label=""];
2->15 [style = bold, label=""];
13->5 [style = bold, label=""];
18->6 [style = bold, label=""];
4->0 [style = bold, label=""];
8->19 [style = bold, label=""];
}
