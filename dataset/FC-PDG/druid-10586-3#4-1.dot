digraph {
13 [style = filled, label = "response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\",true,null,null,null)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "testGetDatasourceLoadstatusDefault['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(1,((Map)response.getEntity()).get(\"datasource1\"))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DataSegment datasource1Segment1 = new DataSegment(\"datasource1\",Intervals.of(\"2010-01-01/P1D\"),\"\",null,null,null,null,0x9,10)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "DataSegment datasource1Segment2 = new DataSegment(\"datasource1\",Intervals.of(\"2010-01-22/P1D\"),\"\",null,null,null,null,0x9,20)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Map<SegmentId,SegmentLoadInfo> completedLoadInfoMap = ImmutableMap.of(datasource1Segment1.getId(),new SegmentLoadInfo(datasource1Segment1),datasource1Segment2.getId(),new SegmentLoadInfo(datasource1Segment2),datasource2Segment1.getId(),new SegmentLoadInfo(datasource2Segment1))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(1,((Map)response.getEntity()).size())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testGetDatasourceLoadstatusSimple['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Response response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\",true,null,null,null)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(200,response.getStatus())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertNotNull(response.getEntity())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(completedLoadInfoMap).once()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\",true,null,\"simple\",null)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(50.0,((Map)response.getEntity()).get(\"datasource1\"))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Map<SegmentId,SegmentLoadInfo> halfLoadedInfoMap = ImmutableMap.of(datasource1Segment1.getId(),new SegmentLoadInfo(datasource1Segment1))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\",true,null,null,null,null)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "EasyMock.reset(segmentsMetadataManager,inventoryView)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.replay(segmentsMetadataManager,inventoryView)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testGetDatasourceLoadstatusDefault['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"),EasyMock.anyObject(),EasyMock.anyBoolean())).andReturn(Optional.of(segments)).once()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(1,((Map)response.getEntity()).size())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"),EasyMock.anyObject(),EasyMock.anyBoolean())).andReturn(Optional.of(segments)).once()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.verify(segmentsMetadataManager,inventoryView)@@@31@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "DataSourcesResource dataSourcesResource = new DataSourcesResource(inventoryView,segmentsMetadataManager,null,null,null,null)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.verify(segmentsMetadataManager,inventoryView)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Response response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\",true,null,null,null,null)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertTrue(((Map)response.getEntity()).containsKey(\"datasource1\"))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(100.0,((Map)response.getEntity()).get(\"datasource1\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(halfLoadedInfoMap).once()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNotNull(response.getEntity())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(0,((Map)response.getEntity()).get(\"datasource1\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(200,response.getStatus())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<DataSegment> segments = ImmutableList.of(datasource1Segment1,datasource1Segment2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(((Map)response.getEntity()).containsKey(\"datasource1\"))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.replay(segmentsMetadataManager,inventoryView)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "dataSourcesResource = new DataSourcesResource(inventoryView,segmentsMetadataManager,null,null,null,null)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "DataSegment datasource2Segment1 = new DataSegment(\"datasource2\",Intervals.of(\"2010-01-01/P1D\"),\"\",null,null,null,null,0x9,30)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Response response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\",true,null,\"simple\",null)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->8 [style = bold, label=""];
0->16 [style = bold, label=""];
13->37 [style = dashed, label="0"];
25->22 [style = bold, label=""];
16->10 [style = bold, label=""];
6->18 [style = bold, label=""];
17->35 [style = dashed, label="0"];
35->2 [style = bold, label=""];
24->34 [style = bold, label=""];
7->22 [style = solid, label="datasource1Segment1"];
1->35 [style = bold, label=""];
20->14 [style = bold, label=""];
4->29 [style = bold, label=""];
32->7 [style = bold, label=""];
11->9 [style = bold, label=""];
22->23 [style = bold, label=""];
6->22 [style = solid, label="datasource1Segment2"];
4->33 [style = dashed, label="0"];
26->11 [style = bold, label=""];
31->11 [style = bold, label=""];
34->11 [style = bold, label=""];
7->23 [style = solid, label="datasource1Segment1"];
1->17 [style = bold, label=""];
37->3 [style = bold, label=""];
33->29 [style = bold, label=""];
23->28 [style = bold, label=""];
8->0 [style = bold, label=""];
24->26 [style = bold, label=""];
3->20 [style = bold, label=""];
17->2 [style = bold, label=""];
10->13 [style = bold, label=""];
13->3 [style = bold, label=""];
12->4 [style = bold, label=""];
24->31 [style = bold, label=""];
30->3 [style = bold, label=""];
36->7 [style = bold, label=""];
15->24 [style = bold, label=""];
14->12 [style = bold, label=""];
21->1 [style = bold, label=""];
7->6 [style = bold, label=""];
27->7 [style = bold, label=""];
9->21 [style = bold, label=""];
28->19 [style = bold, label=""];
18->25 [style = bold, label=""];
12->33 [style = bold, label=""];
26->31 [style = dashed, label="0"];
6->25 [style = solid, label="datasource1Segment2"];
7->25 [style = solid, label="datasource1Segment1"];
19->15 [style = bold, label=""];
26->34 [style = dashed, label="0"];
10->30 [style = bold, label=""];
13->30 [style = dashed, label="0"];
2->5 [style = bold, label=""];
10->37 [style = bold, label=""];
18->22 [style = solid, label="datasource2Segment1"];
}
