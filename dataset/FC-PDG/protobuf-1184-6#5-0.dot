digraph {
7 [style = filled, label = "assertNotNull(\"Extension registered in lite registry\",extension)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ExtensionRegistryLite registry1 = ExtensionRegistryLite.newInstance()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "registry2.add(NonNestedExtension.nonNestedExtension)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(\"Test is using a non-lite extension\",.isAssignableFrom(NonNestedExtensionLite.nonNestedExtensionLite.getClass()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertNotNull(\"Extension is registered in masqueraded full registry\",fullRegistry2.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "NonNestedExtension.registerAllExtensions((ExtensionRegistry)registry2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ExtensionRegistryLite registry2 = ExtensionRegistryLite.newInstance()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertNotNull(\"Extension is registered in Lite registry\",extension)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "NonNestedExtensionLite.registerAllExtensions(registry)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertNull(\"Extension is not registered in masqueraded full registry\",fullRegistry1.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testAdd['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "NonNestedExtensionLite.registerAllExtensions(registry1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testAdd['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(\"Test is using a non-lite extension\",.isAssignableFrom(NonNestedExtension.nonNestedExtension.getClass()))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "registry1.add(NonNestedExtensionLite.nonNestedExtensionLite)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertWithMessage(\"Extension is registered in Lite registry\").that(extension).isNotNull()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended,?> extension = registry1.findLiteExtensionByNumber(NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(),1)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "ExtensionRegistry fullRegistry2 = (ExtensionRegistry)registry2@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testAdd['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended,?> extension = registry.findLiteExtensionByNumber(NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(),1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ExtensionRegistry fullRegistry1 = (ExtensionRegistry)registry1@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17->10 [style = bold, label=""];
13->7 [style = solid, label="extension"];
19->18 [style = bold, label=""];
7->17 [style = bold, label=""];
12->21 [style = bold, label=""];
1->19 [style = dashed, label="0"];
1->3 [style = bold, label=""];
21->8 [style = bold, label=""];
11->19 [style = solid, label="registry1"];
16->20 [style = solid, label="registry2"];
3->6 [style = bold, label=""];
0->11 [style = dashed, label="0"];
11->19 [style = bold, label=""];
4->0 [style = bold, label=""];
15->11 [style = bold, label=""];
3->2 [style = bold, label=""];
5->0 [style = bold, label=""];
16->8 [style = solid, label="registry2"];
13->7 [style = bold, label=""];
0->1 [style = bold, label=""];
20->12 [style = bold, label=""];
8->9 [style = bold, label=""];
3->2 [style = solid, label="extension"];
9->14 [style = bold, label=""];
2->6 [style = dashed, label="0"];
11->21 [style = solid, label="registry1"];
14->13 [style = bold, label=""];
0->1 [style = solid, label="registry"];
16->20 [style = bold, label=""];
18->16 [style = bold, label=""];
}
