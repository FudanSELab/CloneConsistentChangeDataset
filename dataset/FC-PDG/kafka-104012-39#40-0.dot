digraph {
48 [style = filled, label = "assertEquals(getRevoked(owned,assigned),rebalanceListener.revoked)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(singleton(topic1),subscriptions.subscription())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testMetadataRefreshDuringRebalance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "Map<String,List<String>> initialSubscription = singletonMap(consumerId,singletonList(topic1))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final List<TopicPartition> assigned = Arrays.asList(t1p)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "String otherTopic = \"otherTopic\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "subscriptions.subscribe(singleton(topic1),rebalanceListener)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(getAdded(owned,oldAssigned),rebalanceListener.assigned)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "rebalanceListener.revoked = null@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "coordinator.poll(time.timer(Long.MAX_VALUE))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(getRevoked(owned,oldAssigned),rebalanceListener.revoked)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<TopicPartition> newAssigned = Arrays.asList(t1p,t2p)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(getAdded(owned,assigned),rebalanceListener.assigned)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "subscriptions.subscribe(Pattern.compile(\".*\"),rebalanceListener)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "client.prepareResponse(syncGroupResponse(assigned,Errors.NONE))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "joinAsFollowerAndReceiveAssignment(\"consumer\",coordinator,assigned)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final String consumerId = \"leader\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,newAssigned))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertEquals(1,rebalanceListener.revokedCount)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(1,rebalanceListener.assignedCount)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Map<String,List<String>> updatedSubscriptions = singletonMap(consumerId,Arrays.asList(topic1,topic2))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(toSet(oldAssigned),subscriptions.assignedPartitions())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(toSet(updatedSubscription),subscriptions.subscription())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "client.prepareResponse(joinGroupLeaderResponse(1,consumerId,initialSubscription,Errors.NONE))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertFalse(coordinator.rejoinNeededOrPending())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "subscriptions.subscribe(new HashSet<>(Arrays.asList(topic1,otherTopic)),rebalanceListener)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(getAdded(oldAssigned,newAssigned),rebalanceListener.assigned)@@@57@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(1,rebalanceListener.revokedCount)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,oldAssigned))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){final Map<String,Integer> updatedPartitions = new HashMap<>()for (String topic : updatedSubscription)updatedPartitions.put(topic,1)client.updateMetadata(TestUtils.metadataUpdateWith(1,updatedPartitions))return true}},syncGroupResponse(oldAssigned,Errors.NONE))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "coordinator.maybeUpdateSubscriptionMetadata()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(toSet(newAssigned),subscriptions.assignedPartitions())@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testRejoinGroup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "client.updateMetadata(TestUtils.metadataUpdateWith(1,singletonMap(topic1,1)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(getRevoked(oldAssigned,newAssigned),rebalanceListener.revoked)@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "rebalanceListener.assigned = null@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final List<TopicPartition> owned = Collections.emptyList()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertEquals(1,rebalanceListener.assignedCount)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "client.prepareResponse(syncGroupResponse(newAssigned,Errors.NONE))@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "coordinator.poll(time.timer(Long.MAX_VALUE))@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertFalse(coordinator.rejoinNeededOrPending())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(getAdded(assigned,assigned),rebalanceListener.assigned)@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertEquals(getRevoked(assigned,assigned),rebalanceListener.revoked)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final List<TopicPartition> oldAssigned = Arrays.asList(t1p)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(singleton(topic1),subscriptions.subscription())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testMetadataRefreshDuringRebalance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "client.prepareResponse(joinGroupFollowerResponse(2,\"consumer\",\"leader\",Errors.NONE))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final List<String> updatedSubscription = Arrays.asList(topic1,topic2)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){JoinGroupRequest join = (JoinGroupRequest)bodyIterator<JoinGroupRequestData.JoinGroupRequestProtocol> protocolIterator = join.data().protocols().iterator()assertTrue(protocolIterator.hasNext())JoinGroupRequestData.JoinGroupRequestProtocol protocolMetadata = protocolIterator.next()ByteBuffer metadata = ByteBuffer.wrap(protocolMetadata.metadata())ConsumerPartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(metadata)metadata.rewind()return subscription.topics().containsAll(updatedSubscription)}},joinGroupLeaderResponse(2,consumerId,updatedSubscriptions,Errors.NONE))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28->21 [style = bold, label=""];
41->48 [style = solid, label="assigned"];
28->0 [style = solid, label="oldAssigned"];
7->43 [style = dashed, label="0"];
44->48 [style = bold, label=""];
33->17 [style = bold, label=""];
5->7 [style = solid, label="owned"];
52->44 [style = bold, label=""];
32->39 [style = dashed, label="0"];
54->45 [style = bold, label=""];
28->20 [style = solid, label="oldAssigned"];
4->24 [style = bold, label=""];
21->18 [style = bold, label=""];
25->19 [style = solid, label="consumerId"];
25->55 [style = dashed, label="0"];
16->19 [style = solid, label="newAssigned"];
2->33 [style = bold, label=""];
39->47 [style = bold, label=""];
32->2 [style = solid, label="subscription"];
5->28 [style = bold, label=""];
41->52 [style = solid, label="assigned"];
41->46 [style = bold, label=""];
5->41 [style = bold, label=""];
7->16 [style = bold, label=""];
10->32 [style = solid, label="updatedSubscriptions"];
8->23 [style = bold, label=""];
19->32 [style = bold, label=""];
49->43 [style = bold, label=""];
55->5 [style = bold, label=""];
11->6 [style = bold, label=""];
31->2 [style = solid, label="updatedSubscription"];
51->50 [style = bold, label=""];
37->40 [style = bold, label=""];
25->5 [style = bold, label=""];
29->13 [style = solid, label="initialSubscription"];
5->48 [style = solid, label="owned"];
50->47 [style = solid, label="assigned"];
20->45 [style = dashed, label="0"];
31->15 [style = solid, label="updatedSubscription"];
26->3 [style = bold, label=""];
32->4 [style = bold, label=""];
22->1 [style = bold, label=""];
25->34 [style = solid, label="consumerId"];
28->6 [style = solid, label="oldAssigned"];
1->0 [style = bold, label=""];
20->11 [style = bold, label=""];
28->41 [style = dashed, label="0"];
15->30 [style = bold, label=""];
53->54 [style = bold, label=""];
13->15 [style = bold, label=""];
41->43 [style = solid, label="assigned"];
43->51 [style = bold, label=""];
12->2 [style = bold, label=""];
55->42 [style = solid, label="otherTopic"];
17->20 [style = bold, label=""];
18->26 [style = bold, label=""];
3->27 [style = bold, label=""];
16->10 [style = bold, label=""];
51->45 [style = solid, label="revoked"];
46->52 [style = bold, label=""];
34->31 [style = bold, label=""];
25->32 [style = solid, label="consumerId"];
8->48 [style = dashed, label="0"];
14->25 [style = bold, label=""];
24->12 [style = bold, label=""];
16->20 [style = solid, label="newAssigned"];
5->43 [style = solid, label="owned"];
31->13 [style = bold, label=""];
5->8 [style = solid, label="owned"];
16->33 [style = solid, label="newAssigned"];
16->4 [style = solid, label="newAssigned"];
25->13 [style = solid, label="consumerId"];
42->39 [style = bold, label=""];
48->49 [style = bold, label=""];
31->32 [style = solid, label="updatedSubscription"];
25->29 [style = solid, label="consumerId"];
16->6 [style = solid, label="newAssigned"];
6->40 [style = dashed, label="0"];
28->15 [style = solid, label="oldAssigned"];
0->9 [style = bold, label=""];
47->53 [style = bold, label=""];
30->22 [style = bold, label=""];
28->34 [style = solid, label="oldAssigned"];
50->42 [style = bold, label=""];
27->35 [style = bold, label=""];
10->19 [style = bold, label=""];
38->55 [style = bold, label=""];
29->34 [style = bold, label=""];
28->8 [style = solid, label="oldAssigned"];
50->40 [style = solid, label="assigned"];
25->10 [style = solid, label="consumerId"];
23->7 [style = bold, label=""];
28->7 [style = solid, label="oldAssigned"];
35->29 [style = bold, label=""];
45->37 [style = bold, label=""];
9->8 [style = bold, label=""];
50->45 [style = solid, label="assigned"];
21->46 [style = dashed, label="0"];
36->25 [style = bold, label=""];
}
