digraph {
3 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column 3\",projected.getField(2),300L)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column 2\",projected.get(1),200L)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column 3\",projected.getLong(2),300L)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertNull(\"Should contain the correct value in column d\",projected.getField(\"d\"))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Record record = GenericRecord.create(schema.asStruct())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column b\",projected.getField(\"b\"),200L)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Schema schema = new Schema(Types.NestedField.required(1,\"a\",Types.LongType.get()),Types.NestedField.required(2,\"b\",Types.LongType.get()),Types.NestedField.required(3,\"d\",Types.LongType.get()))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Schema renamedAdded = new Schema(Types.NestedField.optional(1,\"a\",Types.LongType.get()),Types.NestedField.optional(2,\"b\",Types.LongType.get()),Types.NestedField.optional(3,\"c\",Types.LongType.get()),Types.NestedField.optional(4,\"d\",Types.LongType.get()))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Schema renamedAdded = new Schema(Types.NestedField.optional(1,\"a\",Types.LongType.get()),Types.NestedField.optional(2,\"b\",Types.LongType.get()),Types.NestedField.optional(3,\"c\",Types.LongType.get()),Types.NestedField.optional(4,\"d\",Types.LongType.get()))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column 2\",projected.getLong(1),200L)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Row row = Row.of(100L,200L,300L)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column a\",projected.getField(\"a\"),100L)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "RowData projected = writeAndRead(\"rename_and_add_column_projection\",schema,renamedAdded,row)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "record.setField(\"d\",300L)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertTrue(\"Should contain empty value on new column 4\",projected.isNullAt(3))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Record projected = writeAndRead(\"rename_and_add_column_projection\",schema,renamedAdded,record)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertNull(\"Should contain empty value on new column 4\",projected.getField(3))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "record.setField(\"a\",100L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Row projected = writeAndRead(\"rename_and_add_column_projection\",schema,renamedAdded,row)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "testRenamedAddedField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testRenamedAddedField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column 1\",projected.get(0),100L)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertNull(\"Should contain empty value on new column 4\",projected.get(3))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column c\",projected.getField(\"c\"),300L)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column 3\",projected.get(2),300L)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "record.setField(\"b\",200L)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column 1\",projected.getField(0),100L)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "RowData row = GenericRowData.of(100L,200L,300L)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testRenamedAddedField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(\"Should contain the correct value in column 1\",projected.getLong(0),100L)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3->29 [style = dashed, label="0"];
5->3 [style = bold, label=""];
22->28 [style = solid, label="record"];
17->5 [style = bold, label=""];
15->10 [style = bold, label=""];
5->14 [style = dashed, label="0"];
7->23 [style = dashed, label="0"];
23->27 [style = bold, label=""];
5->28 [style = solid, label="renamedAdded"];
20->26 [style = bold, label=""];
26->25 [style = bold, label=""];
13->11 [style = solid, label="row"];
6->11 [style = dashed, label="0"];
8->6 [style = bold, label=""];
19->2 [style = bold, label=""];
16->17 [style = bold, label=""];
8->11 [style = solid, label="renamedAdded"];
2->28 [style = solid, label="schema"];
5->28 [style = bold, label=""];
11->9 [style = bold, label=""];
0->20 [style = dashed, label="0"];
2->4 [style = bold, label=""];
2->6 [style = solid, label="schema"];
21->18 [style = bold, label=""];
0->10 [style = dashed, label="0"];
3->0 [style = bold, label=""];
2->13 [style = bold, label=""];
24->16 [style = bold, label=""];
6->28 [style = dashed, label="0"];
29->20 [style = bold, label=""];
12->2 [style = bold, label=""];
7->5 [style = bold, label=""];
5->27 [style = dashed, label="0"];
28->23 [style = bold, label=""];
7->9 [style = dashed, label="0"];
8->6 [style = solid, label="renamedAdded"];
9->14 [style = bold, label=""];
3->15 [style = dashed, label="0"];
4->8 [style = bold, label=""];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
22->24 [style = bold, label=""];
27->29 [style = bold, label=""];
13->8 [style = bold, label=""];
6->7 [style = bold, label=""];
2->22 [style = bold, label=""];
4->13 [style = dashed, label="0"];
8->11 [style = bold, label=""];
4->6 [style = solid, label="row"];
25->21 [style = bold, label=""];
2->11 [style = solid, label="schema"];
}
