digraph {
47 [style = filled, label = "MemoryStateBackend stateBackend = spy(new MemoryStateBackend(1024))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertNotNull(operatorStateInputs)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "JobManagerTaskRestore jobManagerTaskRestore = new JobManagerTaskRestore(0L,taskStateSnapshot)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testWithRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "OperatorID operatorID = new OperatorID(47L,11L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "InternalTimeServiceManager<?> timeServiceManager = stateContext.internalTimerServiceManager()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "CloseableRegistry closeableRegistry = new CloseableRegistry()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "++count@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertNotNull(keyedStateBackend)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertNotNull(operatorStateBackend)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "CloseableIterable<StatePartitionStreamProvider> operatorStateInputs = stateContext.rawOperatorStateInputs()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "when(streamOperator.getOperatorID()).thenReturn(operatorID)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "CloseableIterable<StatePartitionStreamProvider> operatorStateInputs = stateContext.rawOperatorStateInputs()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertNotNull(keyedStateInputs)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TaskStateSnapshot taskStateSnapshot = new TaskStateSnapshot()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(mockingBackend,jobManagerTaskRestore,false)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(false,stateContext.isRestored())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(true,stateContext.isRestored())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "taskStateSnapshot.putSubtaskStateByOperatorID(operatorID,operatorSubtaskState)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertNotNull(keyedStateInputs)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(3,count)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "AbstractKeyedStateBackend<?> keyedStateBackend = stateContext.keyedStateBackend()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "++count@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "StreamOperatorStateContext stateContext = streamTaskStateManager.streamOperatorStateContext(streamOperator.getOperatorID(),streamOperator.getClass().getSimpleName(),new TestProcessingTimeService(),streamOperator,typeSerializer,closeableRegistry,new UnregisteredMetricsGroup())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs = stateContext.rawKeyedStateInputs()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertNotNull(operatorStateInputs)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs)@@@55@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "OperatorStateBackend operatorStateBackend = stateContext.operatorStateBackend()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "TypeSerializer<?> typeSerializer = new IntSerializer()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertNotNull(timeServiceManager)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "AbstractKeyedStateBackend<?> keyedStateBackend = stateContext.keyedStateBackend()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertFalse(keyedStateInputs.iterator().hasNext())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "StateBackend mockingBackend = spy(new StateBackend(){@Override public CompletedCheckpointStorageLocation resolveCheckpoint(String pointer){throw new UnsupportedOperationException()}@Override public CheckpointStorage createCheckpointStorage(JobID jobId){throw new UnsupportedOperationException()}@Override public AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env,JobID jobID,String operatorIdentifier,TypeSerializer<K> keySerializer,int numberOfKeyGroups,KeyGroupRange keyGroupRange,TaskKvStateRegistry kvStateRegistry,TtlTimeProvider ttlTimeProvider,MetricGroup metricGroup,@Nonnull Collection<KeyedStateHandle> stateHandles,CloseableRegistry cancelStreamRegistry){return mock()}@Override public OperatorStateBackend createOperatorStateBackend(Environment env,String operatorIdentifier,@Nonnull Collection<OperatorStateHandle> stateHandles,CloseableRegistry cancelStreamRegistry){return mock()}})@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertNotNull(operatorStateBackend)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "testNoRestore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testWithRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Random random = new Random(0x42)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int count = 0@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertFalse(operatorStateInputs.iterator().hasNext())@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertNull(timeServiceManager)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "InternalTimeServiceManager<?> timeServiceManager = stateContext.internalTimerServiceManager()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertNotNull(keyedStateBackend)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(stateBackend,null,true)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "AbstractStreamOperator<?> streamOperator = mock()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs = stateContext.rawKeyedStateInputs()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(1,count)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "count = 0@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(new OperatorStreamStateHandle(Collections.singletonMap(\"a\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc59cc,OperatorStateHandle.Mode.SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random)),new OperatorStreamStateHandle(Collections.singletonMap(\"_default_\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc59e2,OperatorStateHandle.Mode.SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random)),CheckpointTestUtils.createDummyKeyGroupStateHandle(random),CheckpointTestUtils.createDummyKeyGroupStateHandle(random),singleton(createNewInputChannelStateHandle(10,random)),singleton(createNewResultSubpartitionStateHandle(10,random)))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->21 [style = bold, label=""];
2->24 [style = solid, label="taskStateSnapshot"];
30->21 [style = solid, label="mockingBackend"];
35->11 [style = solid, label="keyedStateBackend"];
41->44 [style = solid, label="operatorID"];
11->9 [style = solid, label="closeableRegistry"];
16->1 [style = bold, label=""];
4->9 [style = bold, label=""];
17->23 [style = bold, label=""];
5->29 [style = bold, label=""];
13->10 [style = solid, label="random"];
18->33 [style = dashed, label="0"];
20->17 [style = bold, label=""];
41->34 [style = bold, label=""];
20->2 [style = bold, label=""];
13->10 [style = bold, label=""];
40->35 [style = bold, label=""];
11->14 [style = solid, label="closeableRegistry"];
28->0 [style = bold, label=""];
35->48 [style = bold, label=""];
38->39 [style = bold, label=""];
30->47 [style = dashed, label="0"];
39->33 [style = bold, label=""];
35->20 [style = solid, label="keyedStateBackend"];
44->46 [style = bold, label=""];
20->8 [style = solid, label="operatorID"];
24->21 [style = solid, label="jobManagerTaskRestore"];
37->20 [style = bold, label=""];
47->42 [style = solid, label="stateBackend"];
19->5 [style = bold, label=""];
27->3 [style = solid, label="keyedStateBackend"];
6->11 [style = bold, label=""];
7->16 [style = bold, label=""];
0->19 [style = bold, label=""];
33->37 [style = bold, label=""];
10->8 [style = solid, label="operatorSubtaskState"];
46->43 [style = solid, label="typeSerializer"];
34->44 [style = bold, label=""];
12->18 [style = bold, label=""];
29->7 [style = bold, label=""];
1->4 [style = bold, label=""];
6->14 [style = solid, label="typeSerializer"];
25->27 [style = bold, label=""];
31->15 [style = bold, label=""];
48->38 [style = bold, label=""];
16->4 [style = solid, label="count"];
40->37 [style = solid, label="operatorStateBackend"];
48->17 [style = solid, label="timeServiceManager"];
36->43 [style = bold, label=""];
18->22 [style = bold, label=""];
38->23 [style = solid, label="keyedStateInputs"];
15->12 [style = bold, label=""];
2->13 [style = bold, label=""];
12->9 [style = solid, label="operatorStateInputs"];
10->8 [style = bold, label=""];
11->14 [style = bold, label=""];
12->19 [style = solid, label="operatorStateInputs"];
30->20 [style = bold, label=""];
42->41 [style = bold, label=""];
23->6 [style = bold, label=""];
40->11 [style = solid, label="operatorStateBackend"];
34->43 [style = solid, label="streamOperator"];
43->40 [style = bold, label=""];
31->28 [style = solid, label="timeServiceManager"];
14->25 [style = bold, label=""];
36->43 [style = solid, label="closeableRegistry"];
38->11 [style = solid, label="keyedStateInputs"];
25->22 [style = solid, label="operatorStateBackend"];
39->11 [style = solid, label="operatorStateInputs"];
8->24 [style = bold, label=""];
46->36 [style = bold, label=""];
15->0 [style = solid, label="keyedStateInputs"];
27->31 [style = bold, label=""];
47->42 [style = bold, label=""];
25->9 [style = solid, label="operatorStateBackend"];
5->7 [style = solid, label="count"];
39->6 [style = solid, label="operatorStateInputs"];
22->3 [style = bold, label=""];
21->17 [style = bold, label=""];
36->11 [style = solid, label="closeableRegistry"];
45->47 [style = bold, label=""];
27->9 [style = solid, label="keyedStateBackend"];
15->9 [style = solid, label="keyedStateInputs"];
20->23 [style = solid, label="operatorID"];
32->30 [style = bold, label=""];
17->14 [style = solid, label="streamOperator"];
26->30 [style = bold, label=""];
3->28 [style = bold, label=""];
28->17 [style = dashed, label="0"];
}
