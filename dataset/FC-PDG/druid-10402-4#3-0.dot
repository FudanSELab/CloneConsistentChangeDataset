digraph {
10 [style = filled, label = "Assert.assertEquals(0,loadQueuePeon.getSegmentsToLoad().size())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "loadQueueCache.start()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "loadQueuePeon.loadSegment(segment,new LoadPeonCallback(){@Override public void execute(){segmentLoadedSignal.countDown()}})@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "loadQueuePeon = new CuratorLoadQueuePeon(curator,LOAD_QUEUE_PATH,null,Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),Execs.singleThreaded(\"test_load_queue_peon-%d\"),new TestDruidCoordinatorConfig(null,null,null,null,new Duration(1),null,null,null,null,10,new Duration(\"PT1s\")))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testFailAssignForNonTimeoutFailures['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "loadQueuePeon = new CuratorLoadQueuePeon(curator,LOAD_QUEUE_PATH,null,Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),Execs.singleThreaded(\"test_load_queue_peon-%d\"),new TestDruidCoordinatorConfig(null,null,null,new Duration(1),null,null,10,new Duration(\"PT1s\")))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "testFailAssignForNonTimeoutFailures['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "super(null,null,null,Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),null,new TestDruidCoordinatorConfig(null,null,null,new Duration(1),null,null,10,null,new Duration(\"PT1s\")))@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final CountDownLatch segmentLoadedSignal = new CountDownLatch(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "LoadQueuePeonTester['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(0L,loadQueuePeon.getLoadQueueSize())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "loadQueuePeon.start()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(0,loadQueuePeon.getTimedOutSegments().size())@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3->6 [style = solid, label="segment"];
8->10 [style = bold, label=""];
1->4 [style = bold, label=""];
3->5 [style = bold, label=""];
10->9 [style = bold, label=""];
5->11 [style = bold, label=""];
12->3 [style = bold, label=""];
14->13 [style = bold, label=""];
0->11 [style = dashed, label="0"];
5->0 [style = bold, label=""];
9->7 [style = bold, label=""];
4->6 [style = bold, label=""];
11->1 [style = bold, label=""];
0->1 [style = bold, label=""];
5->8 [style = solid, label="segmentLoadedSignal"];
6->8 [style = bold, label=""];
2->3 [style = bold, label=""];
}
