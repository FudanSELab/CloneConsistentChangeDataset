digraph {
0 [style = filled, label = "conversionData.conversionGraph.addEdge(inConvention,outConvention)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "conversionData.mapArcToConverterRule.put(Pair.of(inConvention,outConvention),converterRule)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "RelOptPlanner planner@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ConverterRule converterRule@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "conversionData.conversionGraph.addVertex(outConvention)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final boolean removed = conversionData.conversionGraph.removeEdge(inConvention,outConvention)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "ConversionData conversionData = getConversionData(planner)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ConverterRule converterRule@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "registerConverterRule['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "converterRule.isGuaranteed()@@@3@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "registerConverterRule['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "RelOptPlanner planner@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "RelOptPlanner planner@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "deregisterConverterRule['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assert removed@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final Convention outConvention = (Convention)converterRule.getOutTrait()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Convention inConvention = (Convention)converterRule.getInTrait()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "conversionData.mapArcToConverterRule.remove(Pair.of(inConvention,outConvention),converterRule)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ConverterRule converterRule@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "conversionData.conversionGraph.addVertex(inConvention)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->18 [style = dotted, label="true"];
7->4 [style = solid, label="converterRule"];
12->4 [style = solid, label="converterRule"];
10->8 [style = dotted, label="true"];
13->10 [style = bold, label=""];
19->18 [style = bold, label=""];
13->12 [style = dotted, label="true"];
9->18 [style = solid, label="inConvention"];
7->17 [style = dashed, label="0"];
1->3 [style = bold, label=""];
10->3 [style = dotted, label="true"];
14->10 [style = bold, label=""];
5->0 [style = solid, label="outConvention"];
16->19 [style = bold, label=""];
10->9 [style = dotted, label="true"];
10->5 [style = dotted, label="true"];
3->0 [style = bold, label=""];
5->18 [style = solid, label="outConvention"];
9->4 [style = solid, label="inConvention"];
5->16 [style = bold, label=""];
14->17 [style = dotted, label="true"];
5->1 [style = bold, label=""];
14->15 [style = dotted, label="true"];
5->4 [style = solid, label="outConvention"];
6->2 [style = dotted, label="true"];
10->8 [style = bold, label=""];
0->4 [style = bold, label=""];
10->19 [style = dotted, label="true"];
1->16 [style = dashed, label="0"];
15->18 [style = solid, label="converterRule"];
17->8 [style = solid, label="planner"];
5->16 [style = solid, label="outConvention"];
6->10 [style = bold, label=""];
9->16 [style = solid, label="inConvention"];
11->8 [style = solid, label="planner"];
8->9 [style = bold, label=""];
6->7 [style = dotted, label="true"];
9->5 [style = bold, label=""];
7->12 [style = dashed, label="0"];
0->18 [style = dashed, label="0"];
10->0 [style = dotted, label="true"];
13->11 [style = dotted, label="true"];
10->1 [style = dotted, label="true"];
10->4 [style = dotted, label="true"];
2->8 [style = solid, label="planner"];
9->1 [style = solid, label="inConvention"];
10->16 [style = dotted, label="true"];
9->0 [style = solid, label="inConvention"];
5->3 [style = solid, label="outConvention"];
}
