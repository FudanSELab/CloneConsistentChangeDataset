digraph {
21 [style = filled, label = "Assert.assertEquals(testSegments,Sets.newHashSet(server.iterateAllSegments()))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "DataSegment segment2 = makeSegment(102)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Set<DataSegment> segments = Sets.newHashSet(server.getSegments())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "segmentAnnouncer.announceSegment(segment1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testRun['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "segmentAnnouncer.unannounceSegment(segment2)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "segmentAnnouncer.announceSegment(segment2)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DruidServer server = Iterables.get(batchServerInventoryView.getInventory(),0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "int prevUpdateCount = inventoryUpdateCounter.get()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(testSegments,Sets.newHashSet(server.getSegments()))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Set<DataSegment> segments = Sets.newHashSet(server.iterateAllSegments())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "testSegments.remove(segment1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertNull(Iterables.getOnlyElement(filteredBatchServerInventoryView.getInventory()).getSegment(segment1.getId()))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testSegments.add(segment2)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "waitForSync(filteredBatchServerInventoryView,testSegments)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(testSegments,Sets.newHashSet(server.getSegments()))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "testSegments.add(segment1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testRunWithFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(testSegments,segments)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "segmentAnnouncer.announceSegments(testSegments)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testSegments.remove(segment2)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "DruidServer server = Iterables.get(filteredBatchServerInventoryView.getInventory(),0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "waitForSync(batchServerInventoryView,testSegments)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "segmentAnnouncer.unannounceSegment(segment1)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testRun['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Assert.assertEquals(testSegments,Sets.newHashSet(server.iterateAllSegments()))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "waitForUpdateEvents(prevUpdateCount + 1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "waitForSync(batchServerInventoryView,testSegments)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "DataSegment segment1 = makeSegment(101)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "waitForSync(batchServerInventoryView,testSegments)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
2->3 [style = solid, label="segments"];
13->10 [style = bold, label=""];
10->18 [style = bold, label=""];
7->18 [style = solid, label="segment1"];
15->10 [style = solid, label="segment2"];
15->9 [style = solid, label="segment2"];
19->27 [style = dashed, label="0"];
15->13 [style = bold, label=""];
2->20 [style = dashed, label="0"];
9->0 [style = bold, label=""];
5->9 [style = bold, label=""];
26->17 [style = bold, label=""];
3->24 [style = bold, label=""];
6->23 [style = bold, label=""];
16->25 [style = dashed, label="0"];
2->3 [style = bold, label=""];
27->28 [style = bold, label=""];
12->17 [style = bold, label=""];
15->8 [style = solid, label="segment2"];
1->20 [style = bold, label=""];
29->25 [style = bold, label=""];
7->0 [style = solid, label="segment1"];
15->4 [style = solid, label="segment2"];
8->6 [style = bold, label=""];
11->23 [style = dashed, label="0"];
20->3 [style = bold, label=""];
1->28 [style = dashed, label="0"];
17->19 [style = bold, label=""];
21->5 [style = bold, label=""];
28->2 [style = bold, label=""];
19->1 [style = bold, label=""];
18->29 [style = bold, label=""];
7->5 [style = solid, label="segment1"];
20->3 [style = solid, label="segments"];
18->4 [style = bold, label=""];
3->7 [style = bold, label=""];
16->21 [style = bold, label=""];
6->11 [style = bold, label=""];
0->8 [style = bold, label=""];
7->13 [style = solid, label="segment1"];
22->17 [style = bold, label=""];
24->29 [style = solid, label="prevUpdateCount"];
7->15 [style = bold, label=""];
16->14 [style = bold, label=""];
14->21 [style = dashed, label="0"];
1->2 [style = bold, label=""];
17->27 [style = bold, label=""];
24->7 [style = bold, label=""];
4->16 [style = bold, label=""];
13->18 [style = bold, label=""];
14->5 [style = bold, label=""];
}
