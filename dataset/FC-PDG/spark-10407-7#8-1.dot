digraph {
11 [style = filled, label = "UnsafeRow row2 = new UnsafeRow(numFields)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "row1.setLong(0,row1Data)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "row2Data = Long.reverseBytes(row2Data)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "insertRow(row1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int numFields = 1@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "byte(( data1 = new byte((((@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ByteOrder.nativeOrder().equals(ByteOrder.LITTLE_ENDIAN)@@@6@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "row2.setLong(0,row2Data)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "row2.setLong(0,11L + Integer.MAX_VALUE)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "row2.setLong(0,1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertTrue(compare(0,1) > 0)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "insertRow(row2)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "long row1Data = 11L@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "row2.pointTo(data2,computeSizeInBytes(numFields * 8))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "byte(( data2 = new byte((((@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "UnsafeRow row1 = new UnsafeRow(numFields)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testBinaryComparatorWhenSubtractionIsDivisibleByMaxIntValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "row1.pointTo(data1,computeSizeInBytes(numFields * 8))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "row1Data = Long.reverseBytes(row1Data)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "row1.setLong(0,Long.MIN_VALUE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "row1.setLong(0,11)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "testBinaryComparatorWhenSubtractionCanOverflowLongValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "long row2Data = 11L + Integer.MAX_VALUE@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Assert.assertTrue(compare(0,1) < 0)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testBinaryComparatorWhenSubtractionIsDivisibleByMaxIntValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(compare(0,1) < 0)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->3 [style = bold, label=""];
17->21 [style = solid, label="row2Data"];
3->8 [style = solid, label="numFields"];
21->6 [style = bold, label=""];
1->15 [style = bold, label=""];
17->15 [style = solid, label="row2Data"];
12->11 [style = bold, label=""];
18->19 [style = dotted, label="true"];
9->1 [style = solid, label="data2"];
18->19 [style = bold, label=""];
16->19 [style = solid, label="row1Data"];
8->14 [style = bold, label=""];
3->11 [style = solid, label="numFields"];
3->6 [style = bold, label=""];
18->21 [style = dotted, label="true"];
23->3 [style = bold, label=""];
6->0 [style = bold, label=""];
20->3 [style = bold, label=""];
4->2 [style = bold, label=""];
7->4 [style = bold, label=""];
16->17 [style = bold, label=""];
3->16 [style = bold, label=""];
10->13 [style = dashed, label="0"];
10->22 [style = dashed, label="0"];
11->9 [style = bold, label=""];
2->10 [style = bold, label=""];
1->7 [style = bold, label=""];
11->2 [style = solid, label="row2"];
3->6 [style = solid, label="numFields"];
2->13 [style = bold, label=""];
19->14 [style = solid, label="row1Data"];
24->4 [style = bold, label=""];
12->25 [style = dashed, label="0"];
12->14 [style = dashed, label="0"];
6->4 [style = solid, label="row1"];
18->6 [style = bold, label=""];
7->24 [style = dashed, label="0"];
25->11 [style = bold, label=""];
1->24 [style = bold, label=""];
0->8 [style = bold, label=""];
15->4 [style = bold, label=""];
7->15 [style = dashed, label="0"];
16->14 [style = solid, label="row1Data"];
9->1 [style = bold, label=""];
3->1 [style = solid, label="numFields"];
21->15 [style = solid, label="row2Data"];
2->22 [style = bold, label=""];
14->11 [style = bold, label=""];
8->25 [style = bold, label=""];
8->12 [style = bold, label=""];
17->18 [style = bold, label=""];
0->8 [style = solid, label="data1"];
19->21 [style = bold, label=""];
}
