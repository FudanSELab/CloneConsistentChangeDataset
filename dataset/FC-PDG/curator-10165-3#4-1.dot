digraph {
5 [style = filled, label = "List<Closeable> closeables = Lists.newArrayList()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "discovery.unregisterService(instance)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "new Timing().sleepABit()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "List<Closeable> closeables = Lists.newArrayList()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "discovery.start()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "closeables.add(discovery)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "discovery.start()@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(discovery.queryForInstances(name).isEmpty(),\"Service should have unregistered.\")@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final CountDownLatch restartLatch = new CountDownLatch(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(discovery.queryForInstances(\"test\"),list)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "ServiceInstance<String> instance = ServiceInstance.builder().payload(\"thing\").name(name).port(10064).build()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "CuratorFramework client = null@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(discovery.queryForInstances(\"test\"),list)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "{Collections.reverse(closeables)for (Closeable c : closeables){CloseableUtils.closeQuietly(c)}}@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "closeables.add(discovery)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "ServiceDiscovery<String> discovery = null@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "restartLatch.countDown()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "{CloseableUtils.closeQuietly(discovery)CloseableUtils.closeQuietly(client)}@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "final String name = \"name\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertFalse(discovery.queryForInstances(name).isEmpty(),\"Service should start registered.\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(discovery.queryForNames(),Collections.singletonList(\"test\"))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "client.start()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "testUnregisterService['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "closeables.add(client)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "{Collections.reverse(closeables)for (Closeable c : closeables){CloseableUtils.closeQuietly(c)}}@@@17@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder().basePath(\"/test\").client(client).thisInstance(instance).serializer(slowSerializer).watchInstances(true).build()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "server.restart()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "InstanceSerializer<String> slowSerializer = new JsonInstanceSerializer<String>(){@Override public byte(( serialize(ServiceInstance<String> instance){if (first) {System.out.println(\"Serializer first registration.\")first = false}{System.out.println(\"Waiting for reconnect to finish.\")restartLatch.await()}return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11f8e0finstance}}@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "client.start()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "closeables.add(client)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testBasic['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "server.stop()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "discovery.start()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testBasic['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->7 [style = solid, label="closeables"];
4->9 [style = bold, label=""];
5->10 [style = bold, label=""];
24->28 [style = bold, label=""];
0->16 [style = bold, label=""];
1->4 [style = bold, label=""];
20->17 [style = bold, label=""];
31->22 [style = bold, label=""];
9->0 [style = bold, label=""];
26->32 [style = bold, label=""];
15->21 [style = bold, label=""];
0->2 [style = bold, label=""];
6->0 [style = solid, label="instance"];
31->33 [style = solid, label="instance"];
11->22 [style = dashed, label="0"];
3->6 [style = bold, label=""];
32->27 [style = bold, label=""];
6->31 [style = dashed, label="0"];
23->3 [style = bold, label=""];
6->9 [style = solid, label="instance"];
11->19 [style = bold, label=""];
9->2 [style = solid, label="list"];
17->16 [style = solid, label="client"];
3->6 [style = solid, label="client"];
10->12 [style = solid, label="client"];
22->4 [style = bold, label=""];
8->1 [style = bold, label=""];
11->31 [style = bold, label=""];
11->8 [style = solid, label="discovery"];
21->20 [style = bold, label=""];
19->14 [style = bold, label=""];
28->33 [style = bold, label=""];
22->4 [style = solid, label="discovery"];
18->6 [style = bold, label=""];
33->25 [style = bold, label=""];
10->12 [style = bold, label=""];
10->23 [style = bold, label=""];
11->16 [style = solid, label="discovery"];
6->11 [style = bold, label=""];
25->26 [style = bold, label=""];
10->17 [style = dashed, label="0"];
30->10 [style = bold, label=""];
13->5 [style = bold, label=""];
11->8 [style = bold, label=""];
10->27 [style = solid, label="closeables"];
12->3 [style = bold, label=""];
34->35 [style = bold, label=""];
2->7 [style = bold, label=""];
4->29 [style = dashed, label="0"];
29->24 [style = bold, label=""];
9->29 [style = bold, label=""];
35->30 [style = bold, label=""];
4->0 [style = solid, label="list"];
17->18 [style = bold, label=""];
14->4 [style = bold, label=""];
}
