digraph {
8 [style = filled, label = "assertThat(element.getGroup()).isEqualTo(\"group1\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Region region = CacheElement.findElement(regions,\"customers2\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(regions).hasSize(2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Region element = find(regions,\"customers\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertThat(element.getGroups()).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "element = CacheElement.findElement(regions,\"customers1\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "element = find(regions,\"customers1\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(region.getGroup()).isIn(\"group1\",\"group2\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(regions.stream().map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(element.getGroup()).isNull()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "element = CacheElement.findElement(regions,\"customers3\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "List<Region> regions = client.list(filter).getConfigResult()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "listRegionByName2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<Region> regions = client.list(filter).getConfigResult()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "listAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Region element = CacheElement.findElement(regions,\"customers\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "listAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Region region = find(regions,\"customers2\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertThat(regions.stream().map(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(RegionType.PARTITION,RegionType.PARTITION_PROXY)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "element = find(regions,\"customers3\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "filter.setName(\"customers2\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(region.getType()).isIn(RegionType.PARTITION,RegionType.PARTITION_PROXY)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
5->13 [style = dashed, label="0"];
14->3 [style = bold, label=""];
5->8 [style = bold, label=""];
15->10 [style = bold, label=""];
7->21 [style = dashed, label="0"];
16->11 [style = bold, label=""];
4->6 [style = bold, label=""];
0->17 [style = bold, label=""];
0->12 [style = bold, label=""];
2->3 [style = bold, label=""];
20->0 [style = bold, label=""];
10->1 [style = solid, label="regions"];
8->14 [style = bold, label=""];
10->6 [style = solid, label="regions"];
9->10 [style = bold, label=""];
10->14 [style = solid, label="regions"];
0->17 [style = dashed, label="0"];
1->7 [style = bold, label=""];
3->4 [style = bold, label=""];
17->19 [style = bold, label=""];
12->7 [style = bold, label=""];
10->2 [style = solid, label="regions"];
1->12 [style = dashed, label="0"];
18->20 [style = bold, label=""];
7->5 [style = bold, label=""];
6->16 [style = dashed, label="0"];
10->12 [style = solid, label="regions"];
10->16 [style = solid, label="regions"];
2->14 [style = dashed, label="0"];
8->2 [style = bold, label=""];
0->1 [style = bold, label=""];
6->11 [style = bold, label=""];
10->0 [style = bold, label=""];
10->13 [style = solid, label="regions"];
13->8 [style = bold, label=""];
10->5 [style = solid, label="regions"];
4->16 [style = bold, label=""];
19->21 [style = bold, label=""];
}
