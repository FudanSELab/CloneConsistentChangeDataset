digraph {
29 [style = filled, label = "AvroInputFormat<User> format = new AvroInputFormat<>(new Path(testFile.getAbsolutePath()),)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "int elements = 0@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(1539,elementsPerSplit(2()@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "format.reopen(splits(i(,state)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(990,elementsPerSplit(3()@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "format.configure(parameters)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(896,elementsPerSplit(3()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "format.close()@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "elements++@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "format = new AvroInputFormat<>(new Path(testFile.getAbsolutePath()),)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "format.close()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int i = 0@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "format.close()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(1604,elementsPerSplit(0()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "testAvroRecovery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(splits.length,4)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "!format.reachedEnd()@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(1203,elementsPerSplit(1()@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "i < splits.length@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(1539,elementsPerSplit(0()@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "AvroInputFormat<User> format = new AvroInputFormat<User>(new Path(testFile.getAbsolutePath()),)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(1026,elementsPerSplit(1()@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "i++@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(1203,elementsPerSplit(2()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testSplittedIF['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Configuration parameters = new Configuration()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testSplittedIF['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "int(( elementsPerSplit = new int((((@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(NUM_RECORDS,elements)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(format.getRecordsReadFromBlock(),recordsUntilCheckpoint)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "elementsPerSplit(i(++@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Tuple2<Long,Long> state = format.getCurrentState()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Configuration parameters = new Configuration()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(u.getName().toString().startsWith(TEST_NAME))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final int recordsUntilCheckpoint = 132@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "format.open(splits(i()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "User u = format.nextRecord(null)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "format.getRecordsReadFromBlock() == recordsUntilCheckpoint@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "FileInputSplit(( splits = format.createInputSplits(4)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(1539,elementsPerSplit(0()@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21->10 [style = bold, label=""];
37->38 [style = solid, label="recordsUntilCheckpoint"];
0->15 [style = solid, label="splits"];
22->15 [style = bold, label=""];
5->9 [style = bold, label=""];
21->15 [style = dotted, label="true"];
14->17 [style = solid, label="i"];
21->11 [style = dotted, label="true"];
8->15 [style = solid, label="i"];
10->19 [style = bold, label=""];
21->15 [style = bold, label=""];
17->4 [style = solid, label="elementsPerSplit"];
21->8 [style = bold, label=""];
17->27 [style = solid, label="elementsPerSplit"];
38->31 [style = bold, label=""];
1->30 [style = bold, label=""];
14->10 [style = solid, label="elementsPerSplit"];
6->29 [style = bold, label=""];
15->9 [style = dotted, label="true"];
16->26 [style = dashed, label="0"];
11->31 [style = dotted, label="true"];
15->11 [style = bold, label=""];
15->20 [style = bold, label=""];
8->22 [style = dotted, label="true"];
31->33 [style = solid, label="i"];
17->10 [style = solid, label="elementsPerSplit"];
22->15 [style = solid, label="i"];
8->20 [style = dotted, label="true"];
8->4 [style = bold, label=""];
22->21 [style = solid, label="i"];
8->27 [style = bold, label=""];
31->22 [style = solid, label="i"];
13->14 [style = bold, label=""];
27->25 [style = bold, label=""];
19->28 [style = dashed, label="0"];
17->26 [style = solid, label="elementsPerSplit"];
25->28 [style = bold, label=""];
34->33 [style = bold, label=""];
9->17 [style = bold, label=""];
21->22 [style = dotted, label="true"];
7->0 [style = bold, label=""];
11->5 [style = dotted, label="true"];
32->36 [style = dotted, label="true"];
31->11 [style = bold, label=""];
17->21 [style = solid, label="i"];
8->22 [style = bold, label=""];
17->16 [style = solid, label="elementsPerSplit"];
14->31 [style = solid, label="elementsPerSplit"];
15->17 [style = dotted, label="true"];
14->22 [style = solid, label="i"];
3->7 [style = bold, label=""];
17->28 [style = solid, label="elementsPerSplit"];
17->15 [style = bold, label=""];
14->21 [style = solid, label="i"];
32->36 [style = bold, label=""];
14->8 [style = bold, label=""];
21->35 [style = dotted, label="true"];
32->31 [style = bold, label=""];
7->22 [style = solid, label="splits"];
22->33 [style = solid, label="i"];
39->37 [style = bold, label=""];
13->17 [style = solid, label="elements"];
4->10 [style = bold, label=""];
22->31 [style = solid, label="i"];
15->5 [style = dotted, label="true"];
32->34 [style = dotted, label="true"];
8->21 [style = dotted, label="true"];
31->23 [style = solid, label="elementsPerSplit"];
14->23 [style = solid, label="elementsPerSplit"];
31->10 [style = solid, label="elementsPerSplit"];
11->17 [style = dotted, label="true"];
8->15 [style = dotted, label="true"];
4->27 [style = dashed, label="0"];
28->26 [style = bold, label=""];
8->33 [style = solid, label="i"];
11->9 [style = dotted, label="true"];
16->23 [style = bold, label=""];
9->23 [style = solid, label="elements"];
13->10 [style = solid, label="elementsPerSplit"];
13->19 [style = solid, label="elementsPerSplit"];
32->33 [style = dotted, label="true"];
37->12 [style = bold, label=""];
19->16 [style = bold, label=""];
17->25 [style = solid, label="elementsPerSplit"];
11->5 [style = bold, label=""];
13->25 [style = solid, label="elementsPerSplit"];
13->28 [style = solid, label="elementsPerSplit"];
18->6 [style = bold, label=""];
13->26 [style = solid, label="elementsPerSplit"];
15->11 [style = dotted, label="true"];
32->38 [style = dotted, label="true"];
36->33 [style = solid, label="state"];
12->3 [style = bold, label=""];
21->22 [style = solid, label="i"];
10->25 [style = dashed, label="0"];
36->34 [style = bold, label=""];
14->16 [style = solid, label="elementsPerSplit"];
6->12 [style = bold, label=""];
31->16 [style = solid, label="elementsPerSplit"];
11->32 [style = dotted, label="true"];
21->17 [style = solid, label="i"];
13->17 [style = solid, label="elementsPerSplit"];
8->21 [style = solid, label="i"];
13->16 [style = solid, label="elementsPerSplit"];
13->27 [style = solid, label="elementsPerSplit"];
0->33 [style = solid, label="splits"];
17->1 [style = solid, label="elements"];
35->22 [style = bold, label=""];
29->3 [style = bold, label=""];
0->2 [style = bold, label=""];
14->19 [style = solid, label="elementsPerSplit"];
8->22 [style = solid, label="i"];
22->21 [style = bold, label=""];
17->32 [style = bold, label=""];
14->8 [style = solid, label="i"];
11->35 [style = bold, label=""];
13->1 [style = solid, label="elements"];
2->13 [style = bold, label=""];
20->21 [style = bold, label=""];
8->31 [style = solid, label="i"];
13->4 [style = solid, label="elementsPerSplit"];
37->32 [style = solid, label="recordsUntilCheckpoint"];
26->23 [style = bold, label=""];
12->29 [style = dashed, label="0"];
23->1 [style = bold, label=""];
8->21 [style = bold, label=""];
33->38 [style = bold, label=""];
12->7 [style = solid, label="parameters"];
2->23 [style = solid, label="elements"];
21->8 [style = solid, label="i"];
24->6 [style = bold, label=""];
17->19 [style = solid, label="elementsPerSplit"];
31->19 [style = solid, label="elementsPerSplit"];
2->9 [style = solid, label="elements"];
6->3 [style = solid, label="parameters"];
}
