digraph {
10 [style = filled, label = "ProducerBatch producerBatch = batches.peek()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(0L,recordBatch.baseOffset())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Deque<ProducerBatch> batches = accum.batches().get(tp1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(0L,record.offset())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(1,batches.size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testAppendLarge['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "List<Record> records = TestUtils.toList(recordBatch)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "byte(( value = new byte((((@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testAppendLargeOldMessageFormat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(ByteBuffer.wrap(value),record.value())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(0L,record.timestamp())@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int batchSize = 512@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "CompressionType compressionType@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "CompressionType compressionType@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "RecordAccumulator accum = createTestRecordAccumulator(batchSize + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10 * 1024,compressionType,0)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<MutableRecordBatch> recordBatches = TestUtils.toList(producerBatch.records().batches())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ApiVersions apiVersions = new ApiVersions()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testAppendLargeOldMessageFormat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertEquals(1,recordBatches.size())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(ByteBuffer.wrap(key),record.key())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(1,records.size())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "apiVersions.update(node1.idString(),NodeApiVersions.create(Collections.singleton(new ApiVersionsResponse.ApiVersion(ApiKeys.PRODUCE.id,(short)0,(short)2))))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,maxBlockTimeMs)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "apiVersions.update(node1.idString(),NodeApiVersions.create(Collections.singleton(new ApiVersionsResponse.ApiVersion(ApiKeys.PRODUCE,(short)0,(short)2))))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Record record = records.get(0)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "MutableRecordBatch recordBatch = recordBatches.get(0)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->11 [style = solid, label="batchSize"];
5->8 [style = bold, label=""];
9->12 [style = solid, label="value"];
7->11 [style = bold, label=""];
2->19 [style = bold, label=""];
25->1 [style = bold, label=""];
9->11 [style = bold, label=""];
0->13 [style = bold, label=""];
18->0 [style = solid, label="batches"];
21->15 [style = dotted, label="true"];
9->17 [style = bold, label=""];
26->11 [style = solid, label="compressionType"];
11->12 [style = bold, label=""];
4->2 [style = bold, label=""];
15->11 [style = solid, label="compressionType"];
3->16 [style = bold, label=""];
16->22 [style = bold, label=""];
9->5 [style = solid, label="value"];
1->9 [style = bold, label=""];
20->5 [style = bold, label=""];
17->7 [style = bold, label=""];
4->19 [style = solid, label="recordBatch"];
17->24 [style = bold, label=""];
22->20 [style = bold, label=""];
18->6 [style = bold, label=""];
7->24 [style = dashed, label="0"];
24->11 [style = bold, label=""];
6->10 [style = bold, label=""];
10->0 [style = bold, label=""];
21->1 [style = bold, label=""];
12->14 [style = bold, label=""];
15->26 [style = dashed, label="0"];
23->1 [style = bold, label=""];
14->18 [style = bold, label=""];
23->15 [style = dotted, label="true"];
19->3 [style = bold, label=""];
25->26 [style = dotted, label="true"];
13->4 [style = bold, label=""];
}
