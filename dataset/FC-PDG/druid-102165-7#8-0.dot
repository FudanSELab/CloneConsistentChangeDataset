digraph {
15 [style = filled, label = "assertInputRowCorrect(inputRow,DIMENSIONS_SCHEMALESS)@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ByteBufferInputRowParser parser2 = jsonMapper.readValue(jsonMapper.writeValueAsString(parser),)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Integer id = repositoryClient.registerSchema(TOPIC,SomeAvroDatum.getClassSchema())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(parser,parser2)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "GenericRecord someAvroDatum = buildSomeAvroDatum()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testSerde['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Repository repository = new Avro1124RESTRepositoryClientWrapper(\"http://github.io\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Repository repository = new InMemoryRepository(null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TypedSchemaRepository<Integer,Schema,String> repositoryClient = new TypedSchemaRepository<>(repository,new IntegerConverter(),new AvroSchemaConverter(),new IdentityConverter())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "repository = ((SchemaRepoBasedAvroBytesDecoder)((AvroStreamInputRowParser)parser2).getAvroBytesDecoder()).getSchemaRepository()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DatumWriter<GenericRecord> writer = new SpecificDatumWriter<>(someAvroDatum.getSchema())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ByteBuffer byteBuffer = ByteBuffer.allocate(4)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testSerde['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "AvroStreamInputRowParser parser = new AvroStreamInputRowParser(PARSE_SPEC_SCHEMALESS,new SchemaRepoBasedAvroBytesDecoder<>(new Avro1124SubjectAndIdConverter(TOPIC),repository))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "out.write(byteBuffer.array())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testParseSchemaless['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Avro1124SubjectAndIdConverter converter = new Avro1124SubjectAndIdConverter(TOPIC)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "writer.write(someAvroDatum,EncoderFactory.get().directBinaryEncoder(out,null))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "AvroStreamInputRowParser parser = new AvroStreamInputRowParser(PARSE_SPEC,new SchemaRepoBasedAvroBytesDecoder<>(new Avro1124SubjectAndIdConverter(TOPIC),repository))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(parser,parser2)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "InputRow inputRow = parser2.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "converter.putSubjectAndId(id,byteBuffer)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->3 [style = bold, label=""];
11->18 [style = solid, label="repository"];
4->3 [style = bold, label=""];
0->5 [style = dashed, label="0"];
4->3 [style = solid, label="parser"];
14->3 [style = solid, label="parser"];
7->12 [style = bold, label=""];
3->11 [style = bold, label=""];
0->11 [style = dashed, label="0"];
10->21 [style = bold, label=""];
2->4 [style = bold, label=""];
21->18 [style = bold, label=""];
9->16 [style = bold, label=""];
3->0 [style = bold, label=""];
2->4 [style = solid, label="repository"];
6->2 [style = bold, label=""];
13->15 [style = solid, label="inputRow"];
8->17 [style = bold, label=""];
12->13 [style = bold, label=""];
3->5 [style = bold, label=""];
16->14 [style = solid, label="repository"];
3->5 [style = solid, label="parser2"];
11->10 [style = bold, label=""];
2->16 [style = dashed, label="0"];
10->12 [style = solid, label="someAvroDatum"];
17->20 [style = solid, label="byteBuffer"];
16->14 [style = bold, label=""];
4->14 [style = dashed, label="0"];
3->0 [style = solid, label="parser2"];
1->2 [style = bold, label=""];
18->8 [style = bold, label=""];
13->15 [style = bold, label=""];
4->0 [style = solid, label="parser"];
20->19 [style = bold, label=""];
19->7 [style = bold, label=""];
4->5 [style = solid, label="parser"];
8->20 [style = solid, label="id"];
17->20 [style = bold, label=""];
}
