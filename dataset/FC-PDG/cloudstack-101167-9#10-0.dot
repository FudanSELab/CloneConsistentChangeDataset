digraph {
8 [style = filled, label = "volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock,newDiskOfferingMock,storagePoolMock)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "inOrder.verify(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Mockito.when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Mockito.when(storagePoolMock.isShared()).thenReturn(true)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Mockito.doReturn(null).when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "inOrder.verify(storagePoolMock).isLocal()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Mockito.doReturn(\"tag1\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "InOrder inOrder = Mockito.inOrder(volumeVoMock,newDiskOfferingMock,storagePoolMock,volumeApiServiceImpl)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "inOrder.verify(storagePoolMock).isShared()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Mockito.when(newDiskOfferingMock.isUseLocalStorage()).thenReturn(false)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Mockito.when(storagePoolMock.isLocal()).thenReturn(false)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "inOrder.verify(newDiskOfferingMock).getUseLocalStorage()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "inOrder.verify(newDiskOfferingMock,times(0)).isShared()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "inOrder.verify(volumeVoMock).getSize()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "inOrder.verify(newDiskOfferingMock).getDiskSize()@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4->7 [style = bold, label=""];
6->4 [style = bold, label=""];
10->6 [style = bold, label=""];
8->12 [style = bold, label=""];
4->9 [style = dashed, label="0"];
17->18 [style = bold, label=""];
2->5 [style = bold, label=""];
16->8 [style = bold, label=""];
0->8 [style = bold, label=""];
9->7 [style = bold, label=""];
3->6 [style = bold, label=""];
6->9 [style = bold, label=""];
0->16 [style = dashed, label="0"];
5->0 [style = bold, label=""];
19->11 [style = bold, label=""];
12->19 [style = bold, label=""];
11->13 [style = bold, label=""];
14->6 [style = bold, label=""];
20->17 [style = bold, label=""];
7->1 [style = bold, label=""];
13->20 [style = bold, label=""];
1->2 [style = bold, label=""];
5->16 [style = bold, label=""];
18->15 [style = bold, label=""];
}
