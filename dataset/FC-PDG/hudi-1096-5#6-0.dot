digraph {
20 [style = filled, label = "@CliOption(key={\"sortBy\"},help=\"Sorting Field\",unspecifiedDefaultValue=\"\") final String sortByField@@@4@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "rollback.getInstants().forEach(null)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "expected = removeNonWordAndStripSpace(expected)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "showRollbacks['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "HoodieActiveTimeline activeTimeline = new RollbackTimeline(HoodieCLI.getTableMetaClient())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "@CliOption(key={\"limit\"},help=\"Limit #rows to be displayed\",unspecifiedDefaultValue=\"10\") Integer limit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "CommandResult cr = shell().executeCommand(\"show rollbacks\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "List<Comparable((> rows = new ArrayList<>()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String got = removeNonWordAndStripSpace(cr.getResult().toString())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Stream<HoodieInstant> rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants().getInstants()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(cr.isSuccess())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testShowRollbacks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "return HoodiePrintHelper.print(header,new HashMap<>(),sortByField,descending,limit,headerOnly,rows)@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT).addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT).addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED).addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS).addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final List<Comparable((> rows = new ArrayList<>()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "HoodieActiveTimeline activeTimeline = new RollbacksCommand.RollbackTimeline(HoodieCLI.getTableMetaClient())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "rollback.sorted().forEach(null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "@CliOption(key={\"headeronly\"},help=\"Print Header Only\",unspecifiedDefaultValue=\"false\") final boolean headerOnly@@@8@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "HoodieTimeline rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "CommandResult cr = getShell().executeCommand(\"show rollbacks\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT).addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT).addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED).addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS).addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testShowRollbacks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(expected,got)@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "@CliOption(key={\"desc\"},help=\"Ordering\",unspecifiedDefaultValue=\"false\") final boolean descending@@@6@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String expected = HoodiePrintHelper.print(header,new HashMap<>(),\"\",false,-1,false,rows)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
0->9 [style = bold, label=""];
24->14 [style = dotted, label="true"];
21->19 [style = bold, label=""];
4->6 [style = bold, label=""];
5->3 [style = solid, label="header"];
20->23 [style = solid, label="sortByField"];
9->10 [style = bold, label=""];
4->6 [style = solid, label="got"];
18->23 [style = solid, label="rows"];
1->7 [style = bold, label=""];
15->18 [style = bold, label=""];
24->16 [style = dotted, label="true"];
8->6 [style = solid, label="expected"];
3->23 [style = dashed, label="0"];
12->13 [style = bold, label=""];
14->23 [style = solid, label="headerOnly"];
11->0 [style = bold, label=""];
22->23 [style = solid, label="limit"];
7->3 [style = solid, label="rows"];
7->2 [style = bold, label=""];
24->22 [style = dotted, label="true"];
3->8 [style = bold, label=""];
19->23 [style = bold, label=""];
24->20 [style = dotted, label="true"];
0->13 [style = dashed, label="0"];
24->17 [style = bold, label=""];
17->15 [style = bold, label=""];
13->9 [style = bold, label=""];
8->4 [style = bold, label=""];
18->21 [style = bold, label=""];
10->1 [style = bold, label=""];
16->23 [style = solid, label="descending"];
19->23 [style = solid, label="header"];
3->8 [style = solid, label="expected"];
2->5 [style = bold, label=""];
}
