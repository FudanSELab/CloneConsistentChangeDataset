digraph {
22 [style = filled, label = "LocalRegion owner = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "setEntryMap(map)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "map != null@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "RegionEntryFactory factory@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "this.setEntryFactory(factory)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "TestableAbstractRegionMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ConcurrentMapWithReusableEntries map@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "setEntryFactory(factory)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "initialize(owner,new Attributes(),null,false)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return owner@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(owner.getCachePerfStats()).thenReturn(cachePerfStats)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "createOwner['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "when(owner.getEvictionAttributes()).thenReturn(evictionAttributes)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "this._setMap(map)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "factory != null@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "TestableAbstractRegionMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "CachePerfStats cachePerfStats = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "RegionEntryFactory factory@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "super(null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "doThrow().when(owner).checkEntryNotFound(any())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "CustomEntryConcurrentHashMap map@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20->12 [style = solid, label="withConcurrencyChecks"];
25->24 [style = solid, label="withConcurrencyChecks"];
0->16 [style = bold, label=""];
24->12 [style = bold, label=""];
8->16 [style = dashed, label="0"];
4->24 [style = bold, label=""];
3->17 [style = dashed, label="0"];
22->2 [style = bold, label=""];
7->4 [style = solid, label="cachePerfStats"];
1->17 [style = dotted, label="true"];
22->5 [style = solid, label="owner"];
9->11 [style = dotted, label="true"];
12->15 [style = bold, label=""];
18->19 [style = dotted, label="true"];
1->3 [style = bold, label=""];
18->21 [style = dotted, label="true"];
11->3 [style = solid, label="map"];
1->0 [style = bold, label=""];
7->4 [style = bold, label=""];
18->20 [style = dotted, label="true"];
9->6 [style = dotted, label="true"];
6->8 [style = solid, label="factory"];
21->16 [style = solid, label="factory"];
13->1 [style = bold, label=""];
15->5 [style = bold, label=""];
3->0 [style = bold, label=""];
1->17 [style = bold, label=""];
1->3 [style = dotted, label="true"];
0->8 [style = dotted, label="true"];
6->0 [style = solid, label="factory"];
10->12 [style = solid, label="withConcurrencyChecks"];
2->7 [style = solid, label="cachePerfStats"];
2->13 [style = solid, label="owner"];
17->0 [style = bold, label=""];
23->22 [style = bold, label=""];
5->13 [style = bold, label=""];
0->8 [style = bold, label=""];
11->25 [style = dashed, label="0"];
9->14 [style = bold, label=""];
4->12 [style = bold, label=""];
14->2 [style = bold, label=""];
0->16 [style = dotted, label="true"];
2->7 [style = bold, label=""];
19->17 [style = solid, label="map"];
9->10 [style = dotted, label="true"];
18->14 [style = bold, label=""];
23->25 [style = dotted, label="true"];
21->0 [style = solid, label="factory"];
11->1 [style = solid, label="map"];
19->1 [style = solid, label="map"];
11->21 [style = dashed, label="0"];
}
