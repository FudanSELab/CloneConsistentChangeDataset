digraph {
11 [style = filled, label = "addDataPoints()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(\"p999_key1_test should have p999=999\",999L,values.get(\"p999_key1_test\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(\"p50_key1_test should have p50=500\",500L,values.get(\"p50_key1_test\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(\"min_key1_test should =0\",0L,values.get(\"min_key1_test\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(\"should have cnt=1000\",1000L,values.get(\"cnt_test\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Map<String,Object> values = testCounter.values()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\"sum_key2_test should =14\",2999 * 500L,values.get(\"sum_key2_test\"))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertEquals(\"max_key2_test should =5\",1999L,values.get(\"max_key2_test\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "Assert.assertEquals(\"should have p999=999\",999L,values.get(\"p999_test\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(\"p95_key2_test should have p95=1950\",1950L,values.get(\"p95_key2_test\"))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Assert.assertEquals(\"sum_key2_test should =14\",2999 * 500L,values.get(\"sum_key2_test\"))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"cnt_key2_test should =4\",1000L,values.get(\"cnt_key2_test\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "testValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"max_key1_test should =999\",999L,values.get(\"max_key1_test\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(\"There should be 18 values in the set\",18,values.size())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertEquals(\"cnt_key1_test should =1000\",1000L,values.get(\"cnt_key1_test\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(\"cnt_key1_test should =1000\",1000L,values.get(\"cnt_key1_test\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"p50_key2_test should have p50=1500\",1500L,values.get(\"p50_key2_test\"))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertEquals(\"p50_key2_test should have p50=1500\",1500L,values.get(\"p50_key2_test\"))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertEquals(\"p50_key1_test should have p50=500\",500L,values.get(\"p50_key1_test\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "Assert.assertEquals(\"should have min=0\",0L,values.get(\"min_test\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(\"sum_key1_test should =999*500\",999 * 500L,values.get(\"sum_key1_test\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "assertEquals(\"min_key1_test should =0\",0L,values.get(\"min_key1_test\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "Assert.assertEquals(\"should have p95=950\",950L,values.get(\"p95_test\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(\"min_key2_test should =2\",1000L,values.get(\"min_key2_test\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"There should be 18 values in the set\",18,values.size())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertEquals(\"p999_key2_test should have p999=1999\",1999L,values.get(\"p999_key2_test\"))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(\"p99_key1_test should have p99=990\",990L,values.get(\"p99_key1_test\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(\"p999_key2_test should have p999=1999\",1999L,values.get(\"p999_key2_test\"))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "testValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(\"p999_key1_test should have p999=999\",999L,values.get(\"p999_key1_test\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "Assert.assertEquals(\"should have sum=999*500\",999 * 500L,values.get(\"sum_test\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(\"max_key2_test should =5\",1999L,values.get(\"max_key2_test\"))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(\"p99_key2_test should have p99=1990\",1990L,values.get(\"p99_key2_test\"))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "assertEquals(\"avg_key1_test should =499.5\",999D / 2,values.get(\"avg_key1_test\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Map<String,Object> values = testCounterSet.values()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"p95_key1_test should have p95=950\",950L,values.get(\"p95_key1_test\"))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"avg_key1_test should =499.5\",999D / 2,values.get(\"avg_key1_test\"))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertEquals(\"p95_key1_test should have p95=950\",950L,values.get(\"p95_key1_test\"))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertEquals(\"min_key2_test should =2\",1000L,values.get(\"min_key2_test\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(\"p95_key2_test should have p95=1950\",1950L,values.get(\"p95_key2_test\"))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"avg_key2_test should =3.5\",1000 + 999D / 2,values.get(\"avg_key2_test\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(\"should avg=499.5\",999D / 2,values.get(\"avg_test\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Assert.assertEquals(\"There should be 9 values in the set\",9,values.size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Assert.assertEquals(\"should have p50=500\",500L,values.get(\"p50_test\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\"cnt_key2_test should =4\",1000L,values.get(\"cnt_key2_test\"))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(\"p99_key1_test should have p99=990\",990L,values.get(\"p99_key1_test\"))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(\"max_key1_test should =999\",999L,values.get(\"max_key1_test\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(\"should have max=999\",999L,values.get(\"max_test\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(\"sum_key1_test should =999*500\",999 * 500L,values.get(\"sum_key1_test\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "assertEquals(\"p99_key2_test should have p99=1990\",1990L,values.get(\"p99_key2_test\"))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "Assert.assertEquals(\"should have p99=990\",990L,values.get(\"p99_test\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(\"avg_key2_test should =3.5\",1000 + 999D / 2,values.get(\"avg_key2_test\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3->29 [style = dashed, label="0"];
47->53 [style = bold, label=""];
31->37 [style = bold, label=""];
19->18 [style = bold, label=""];
27->32 [style = bold, label=""];
16->52 [style = dashed, label="0"];
12->5 [style = bold, label=""];
1->48 [style = dashed, label="0"];
17->6 [style = bold, label=""];
18->22 [style = dashed, label="0"];
10->39 [style = dashed, label="0"];
4->38 [style = dashed, label="0"];
18->53 [style = dashed, label="0"];
16->25 [style = dashed, label="0"];
28->39 [style = bold, label=""];
15->37 [style = dashed, label="0"];
46->49 [style = bold, label=""];
11->45 [style = bold, label=""];
4->21 [style = bold, label=""];
5->15 [style = bold, label=""];
24->34 [style = bold, label=""];
14->17 [style = bold, label=""];
22->28 [style = bold, label=""];
19->47 [style = dashed, label="0"];
41->11 [style = bold, label=""];
12->30 [style = dashed, label="0"];
51->52 [style = bold, label=""];
18->2 [style = bold, label=""];
1->32 [style = dashed, label="0"];
7->8 [style = bold, label=""];
2->10 [style = bold, label=""];
2->50 [style = dashed, label="0"];
13->11 [style = bold, label=""];
34->30 [style = bold, label=""];
45->44 [style = bold, label=""];
6->33 [style = dashed, label="0"];
43->46 [style = bold, label=""];
3->0 [style = bold, label=""];
14->26 [style = dashed, label="0"];
9->35 [style = dashed, label="0"];
53->50 [style = bold, label=""];
6->49 [style = dashed, label="0"];
8->1 [style = bold, label=""];
6->4 [style = bold, label=""];
40->29 [style = bold, label=""];
52->43 [style = bold, label=""];
14->43 [style = dashed, label="0"];
10->51 [style = dashed, label="0"];
23->33 [style = bold, label=""];
10->16 [style = bold, label=""];
19->36 [style = dashed, label="0"];
20->34 [style = dashed, label="0"];
42->11 [style = bold, label=""];
15->9 [style = bold, label=""];
30->31 [style = bold, label=""];
44->48 [style = bold, label=""];
48->47 [style = bold, label=""];
50->51 [style = bold, label=""];
26->23 [style = bold, label=""];
7->45 [style = dashed, label="0"];
25->26 [style = bold, label=""];
20->12 [style = bold, label=""];
2->28 [style = dashed, label="0"];
21->40 [style = dashed, label="0"];
17->46 [style = dashed, label="0"];
7->27 [style = bold, label=""];
5->31 [style = dashed, label="0"];
0->24 [style = dashed, label="0"];
32->36 [style = bold, label=""];
16->14 [style = bold, label=""];
33->38 [style = bold, label=""];
0->20 [style = bold, label=""];
8->27 [style = dashed, label="0"];
39->25 [style = bold, label=""];
37->35 [style = bold, label=""];
17->23 [style = dashed, label="0"];
8->44 [style = dashed, label="0"];
1->19 [style = bold, label=""];
38->40 [style = bold, label=""];
29->24 [style = bold, label=""];
11->7 [style = bold, label=""];
21->3 [style = bold, label=""];
36->22 [style = bold, label=""];
}
