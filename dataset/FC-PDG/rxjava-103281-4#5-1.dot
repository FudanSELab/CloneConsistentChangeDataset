digraph {
6 [style = filled, label = "s.advanceTimeBy(300,TimeUnit.MILLISECONDS)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "d1.dispose()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(0L,list3.get(0).longValue())@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Observable<Long> interval = Observable.interval(100,TimeUnit.MILLISECONDS,s).publish().refCount()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final List<Long> list3 = new ArrayList<>()@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertEquals(6L,list2.get(4).longValue())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(3,list2.size())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Disposable d2 = interval.subscribe(new Consumer<Long>(){@Override public void accept(Long t1){list2.add(t1)}})@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "s.advanceTimeBy(300,TimeUnit.MILLISECONDS)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "interval.subscribe(new Consumer<Long>(){@Override public void accept(Long t1){list3.add(t1)}})@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(2L,list1.get(2).longValue())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final List<Long> list2 = new ArrayList<Long>()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "TestScheduler s = new TestScheduler()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "refCount['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertEquals(4L,list2.get(2).longValue())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(1L,list1.get(1).longValue())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "refCount['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(2,list3.size())@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final List<Long> list1 = new ArrayList<>()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "s.advanceTimeBy(1000,TimeUnit.MILLISECONDS)@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(0L,list1.get(0).longValue())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(3L,list2.get(1).longValue())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "d2.dispose()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final List<Long> list2 = new ArrayList<>()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertEquals(5,list1.size())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(4L,list1.get(4).longValue())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(1L,list3.get(1).longValue())@@@51@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "s.advanceTimeBy(200,TimeUnit.MILLISECONDS)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(7L,list2.get(5).longValue())@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "refCount['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(5,list1.size())@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Disposable d1 = interval.subscribe(new Consumer<Long>(){@Override public void accept(Long t1){list1.add(t1)}})@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Flowable<Long> interval = Flowable.interval(100,TimeUnit.MILLISECONDS,s).publish().refCount()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(5L,list2.get(3).longValue())@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "s.advanceTimeBy(200,TimeUnit.MILLISECONDS)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(3L,list1.get(3).longValue())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final List<Long> list1 = new ArrayList<Long>()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(6,list2.size())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final List<Long> list3 = new ArrayList<Long>()@@@41@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(2,list1.size())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(2L,list2.get(0).longValue())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
13->37 [style = dashed, label="0"];
28->6 [style = bold, label=""];
30->22 [style = bold, label=""];
31->23 [style = bold, label=""];
4->38 [style = bold, label=""];
10->15 [style = bold, label=""];
33->20 [style = bold, label=""];
0->26 [style = bold, label=""];
39->16 [style = bold, label=""];
22->16 [style = bold, label=""];
29->9 [style = bold, label=""];
34->33 [style = bold, label=""];
37->17 [style = bold, label=""];
21->8 [style = bold, label=""];
20->14 [style = bold, label=""];
32->7 [style = bold, label=""];
4->18 [style = bold, label=""];
7->31 [style = bold, label=""];
25->29 [style = bold, label=""];
18->2 [style = bold, label=""];
5->28 [style = bold, label=""];
2->10 [style = bold, label=""];
18->38 [style = dashed, label="0"];
14->1 [style = bold, label=""];
24->5 [style = bold, label=""];
38->2 [style = bold, label=""];
13->17 [style = bold, label=""];
17->34 [style = bold, label=""];
23->37 [style = bold, label=""];
12->4 [style = bold, label=""];
23->13 [style = bold, label=""];
19->27 [style = bold, label=""];
15->0 [style = bold, label=""];
22->36 [style = bold, label=""];
9->21 [style = bold, label=""];
16->36 [style = dashed, label="0"];
22->39 [style = dashed, label="0"];
30->39 [style = bold, label=""];
40->30 [style = bold, label=""];
27->24 [style = bold, label=""];
1->19 [style = bold, label=""];
3->32 [style = bold, label=""];
35->30 [style = bold, label=""];
11->30 [style = bold, label=""];
8->12 [style = bold, label=""];
6->25 [style = bold, label=""];
36->3 [style = bold, label=""];
}
