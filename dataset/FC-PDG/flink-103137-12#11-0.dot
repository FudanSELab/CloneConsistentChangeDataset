digraph {
48 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(stateBackend,null,true)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertEquals(false,stateContext.isRestored())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "int count = 0@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testWithRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "CloseableRegistry closeableRegistry = new CloseableRegistry()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "++count@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "CloseableIterable<StatePartitionStreamProvider> operatorStateInputs = stateContext.rawOperatorStateInputs()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(mockingBackend,jobManagerTaskRestore,false)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "OperatorStateBackend operatorStateBackend = stateContext.operatorStateBackend()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs)@@@57@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(new OperatorStreamStateHandle(Collections.singletonMap(\"a\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc4292,OperatorStateHandle.Mode.SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random)),new OperatorStreamStateHandle(Collections.singletonMap(\"_default_\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc42a8,OperatorStateHandle.Mode.SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random)),CheckpointTestUtils.createDummyKeyGroupStateHandle(random),CheckpointTestUtils.createDummyKeyGroupStateHandle(random))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertFalse(operatorStateInputs.iterator().hasNext())@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertNotNull(keyedStateBackend)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Random random = new Random(0x42)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "verify(keyedStateBackend).restore(eq(operatorSubtaskState.getManagedKeyedState()))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertNotNull(keyedStateInputs)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "++count@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNotNull(operatorStateBackend)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(3,count)@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "AbstractStreamOperator<?> streamOperator = mock()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "AbstractKeyedStateBackend<?> keyedStateBackend = stateContext.keyedStateBackend()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "OperatorID operatorID = new OperatorID(47L,11L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "testNoRestore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertNotNull(keyedStateInputs)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs = stateContext.rawKeyedStateInputs()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs = stateContext.rawKeyedStateInputs()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TaskStateSnapshot taskStateSnapshot = new TaskStateSnapshot()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertNull(timeServiceManager)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "count = 0@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testWithRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "Assert.assertNotNull(operatorStateBackend)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(true,stateContext.isRestored())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertFalse(keyedStateInputs.iterator().hasNext())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(1,count)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "StreamOperatorStateContext stateContext = streamTaskStateManager.streamOperatorStateContext(streamOperator.getOperatorID(),streamOperator.getClass().getSimpleName(),streamOperator,typeSerializer,closeableRegistry)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "InternalTimeServiceManager<?> timeServiceManager = stateContext.internalTimerServiceManager()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "TypeSerializer<?> typeSerializer = new IntSerializer()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "MemoryStateBackend stateBackend = spy(new MemoryStateBackend(1024))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "InternalTimeServiceManager<?> timeServiceManager = stateContext.internalTimerServiceManager()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertNotNull(operatorStateInputs)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "CloseableIterable<StatePartitionStreamProvider> operatorStateInputs = stateContext.rawOperatorStateInputs()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "when(streamOperator.getOperatorID()).thenReturn(operatorID)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertNotNull(keyedStateBackend)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertNotNull(operatorStateInputs)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "JobManagerTaskRestore jobManagerTaskRestore = new JobManagerTaskRestore(0L,taskStateSnapshot)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AbstractKeyedStateBackend<?> keyedStateBackend = stateContext.keyedStateBackend()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "StateBackend mockingBackend = spy(new StateBackend(){@Override public CompletedCheckpointStorageLocation resolveCheckpoint(String pointer){throw new UnsupportedOperationException()}@Override public CheckpointStorage createCheckpointStorage(JobID jobId){throw new UnsupportedOperationException()}@Override public AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env,JobID jobID,String operatorIdentifier,TypeSerializer<K> keySerializer,int numberOfKeyGroups,KeyGroupRange keyGroupRange,TaskKvStateRegistry kvStateRegistry,TtlTimeProvider ttlTimeProvider){return mock()}@Override public OperatorStateBackend createOperatorStateBackend(Environment env,String operatorIdentifier){return mock()}})@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "verify(operatorStateBackend).restore(eq(operatorSubtaskState.getManagedOperatorState()))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "taskStateSnapshot.putSubtaskStateByOperatorID(operatorID,operatorSubtaskState)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertNotNull(timeServiceManager)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->3 [style = bold, label=""];
8->11 [style = solid, label="operatorSubtaskState"];
3->10 [style = bold, label=""];
23->30 [style = dashed, label="0"];
47->5 [style = solid, label="operatorStateInputs"];
38->40 [style = bold, label=""];
42->22 [style = solid, label="keyedStateBackend"];
23->16 [style = bold, label=""];
5->32 [style = bold, label=""];
35->40 [style = solid, label="streamOperator"];
25->1 [style = bold, label=""];
4->33 [style = solid, label="taskStateSnapshot"];
19->23 [style = solid, label="timeServiceManager"];
50->32 [style = solid, label="keyedStateInputs"];
43->30 [style = solid, label="timeServiceManager"];
2->29 [style = bold, label=""];
35->37 [style = bold, label=""];
16->28 [style = bold, label=""];
36->40 [style = solid, label="typeSerializer"];
36->38 [style = bold, label=""];
24->15 [style = solid, label="count"];
47->45 [style = bold, label=""];
1->2 [style = bold, label=""];
14->17 [style = bold, label=""];
17->21 [style = solid, label="operatorStateBackend"];
22->30 [style = bold, label=""];
27->25 [style = bold, label=""];
24->7 [style = bold, label=""];
43->50 [style = bold, label=""];
0->22 [style = bold, label=""];
39->35 [style = bold, label=""];
10->21 [style = solid, label="operatorStateInputs"];
15->21 [style = bold, label=""];
12->13 [style = solid, label="keyedStateBackend"];
17->9 [style = solid, label="operatorStateBackend"];
32->14 [style = solid, label="closeableRegistry"];
30->31 [style = bold, label=""];
28->27 [style = bold, label=""];
12->19 [style = bold, label=""];
31->5 [style = bold, label=""];
6->45 [style = dashed, label="0"];
18->30 [style = bold, label=""];
38->40 [style = solid, label="closeableRegistry"];
42->32 [style = solid, label="keyedStateBackend"];
1->29 [style = solid, label="count"];
20->8 [style = solid, label="random"];
47->32 [style = solid, label="operatorStateInputs"];
10->6 [style = bold, label=""];
45->44 [style = bold, label=""];
46->48 [style = bold, label=""];
0->18 [style = solid, label="mockingBackend"];
13->23 [style = bold, label=""];
32->14 [style = bold, label=""];
5->14 [style = solid, label="typeSerializer"];
20->8 [style = bold, label=""];
41->44 [style = solid, label="operatorStateBackend"];
33->18 [style = bold, label=""];
38->32 [style = solid, label="closeableRegistry"];
30->14 [style = solid, label="streamOperator"];
40->41 [style = bold, label=""];
32->21 [style = solid, label="closeableRegistry"];
33->18 [style = solid, label="jobManagerTaskRestore"];
7->15 [style = bold, label=""];
22->11 [style = solid, label="operatorID"];
0->46 [style = dashed, label="0"];
11->33 [style = bold, label=""];
3->16 [style = solid, label="keyedStateInputs"];
41->32 [style = solid, label="operatorStateBackend"];
3->21 [style = solid, label="keyedStateInputs"];
10->28 [style = solid, label="operatorStateInputs"];
12->21 [style = solid, label="keyedStateBackend"];
50->47 [style = bold, label=""];
39->37 [style = solid, label="operatorID"];
9->13 [style = bold, label=""];
46->48 [style = solid, label="stateBackend"];
42->43 [style = bold, label=""];
17->12 [style = bold, label=""];
48->39 [style = bold, label=""];
22->31 [style = solid, label="operatorID"];
4->20 [style = bold, label=""];
34->0 [style = bold, label=""];
6->9 [style = bold, label=""];
8->11 [style = bold, label=""];
37->36 [style = bold, label=""];
41->42 [style = bold, label=""];
22->4 [style = bold, label=""];
49->46 [style = bold, label=""];
29->24 [style = bold, label=""];
44->22 [style = bold, label=""];
50->31 [style = solid, label="keyedStateInputs"];
26->0 [style = bold, label=""];
}
