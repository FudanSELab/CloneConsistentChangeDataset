digraph {
3 [style = filled, label = "Assert.assertEquals(0,usersCursor.getCurrentIndex())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(iterator.hasNext())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Mapper mapper = sqlSession.getMapper()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "SqlSession sqlSession = sqlSessionFactory.openSession()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "iterator2.hasNext()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testCursorMultipleIteratorCall['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(-1,usersCursor.getCurrentIndex())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "User user = iterator.next()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Iterator<User> iterator2 = null@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testCursorMultipleHasNextCall['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.fail(\"We should have failed since calling iterator several times is not allowed\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "{sqlSession.close()}@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(iterator.hasNext())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testCursorMultipleHasNextCall['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Cursor<User> usersCursor = mapper.getAllUsers()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "iterator2 = usersCursor.iterator()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "{sqlSession.close()}@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "IllegalStateException e@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertTrue(iterator.hasNext())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Iterator<User> iterator = usersCursor.iterator()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertNull(\"iterator2 should be null\",iterator2)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(0,usersCursor.getCurrentIndex())@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.fail(\"Should have returned earlier\")@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(\"User1\",user.getName())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
4->18 [style = dashed, label="0"];
1->4 [style = bold, label=""];
3->1 [style = bold, label=""];
11->16 [style = dashed, label="0"];
21->15 [style = bold, label=""];
0->2 [style = bold, label=""];
20->21 [style = dotted, label="true"];
16->19 [style = bold, label=""];
7->8 [style = bold, label=""];
2->10 [style = bold, label=""];
15->19 [style = bold, label=""];
9->6 [style = bold, label=""];
14->7 [style = bold, label=""];
20->21 [style = bold, label=""];
8->0 [style = bold, label=""];
8->17 [style = bold, label=""];
3->23 [style = bold, label=""];
0->10 [style = bold, label=""];
13->12 [style = bold, label=""];
17->0 [style = bold, label=""];
10->5 [style = bold, label=""];
0->23 [style = solid, label="iterator"];
11->13 [style = bold, label=""];
6->7 [style = bold, label=""];
4->11 [style = bold, label=""];
24->6 [style = bold, label=""];
19->22 [style = bold, label=""];
1->23 [style = dashed, label="0"];
23->18 [style = bold, label=""];
20->15 [style = dotted, label="true"];
18->16 [style = bold, label=""];
}
