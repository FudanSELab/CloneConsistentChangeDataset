digraph {
69 [style = filled, label = "kafkaProducer.commitTransaction()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "kafkaProducer.beginTransaction()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@71@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "maxTotalRows = 3L@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
81 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,nextOffsets)))))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Thread.sleep(10)@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L,1,0L))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "insertData()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "kafkaProducer.commitTransaction()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "kafkaProducer.beginTransaction()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@59@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@50@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@60@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
66 [style = filled, label = "kafkaProducer.initTransactions()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
85 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Thread.sleep(10)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,4L,1,2L))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "int i = 0@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "i < records.size()@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "int i = numToAdd@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "i++@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Thread.sleep(10)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "i < numToAdd@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "kafkaProducer.initTransactions()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@28@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "i++@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75->83 [style = bold, label=""];
2->35 [style = bold, label=""];
18->43 [style = dashed, label="0"];
36->43 [style = solid, label="task"];
73->82 [style = bold, label=""];
70->66 [style = bold, label=""];
51->74 [style = bold, label=""];
2->0 [style = solid, label="desc2"];
69->60 [style = bold, label=""];
25->33 [style = bold, label=""];
40->31 [style = solid, label="desc1"];
76->50 [style = solid, label="desc7"];
42->17 [style = solid, label="desc4"];
67->48 [style = bold, label=""];
71->18 [style = bold, label=""];
43->0 [style = solid, label="desc5"];
5->15 [style = bold, label=""];
59->62 [style = bold, label=""];
2->46 [style = dashed, label="0"];
45->0 [style = solid, label="desc7"];
3->65 [style = bold, label=""];
80->49 [style = bold, label=""];
25->31 [style = solid, label="desc1"];
42->0 [style = solid, label="desc4"];
18->17 [style = solid, label="desc5"];
26->22 [style = bold, label=""];
36->47 [style = solid, label="task"];
46->0 [style = solid, label="desc2"];
61->58 [style = solid, label="i"];
22->4 [style = bold, label=""];
7->14 [style = bold, label=""];
49->55 [style = bold, label=""];
23->29 [style = bold, label=""];
36->35 [style = solid, label="task"];
4->30 [style = solid, label="baseSequenceName"];
75->48 [style = solid, label="numToAdd"];
30->10 [style = solid, label="task"];
60->54 [style = solid, label="nextOffsets"];
17->51 [style = solid, label="desc2"];
33->25 [style = bold, label=""];
5->36 [style = solid, label="startPartitions"];
85->68 [style = bold, label=""];
45->0 [style = bold, label=""];
60->63 [style = bold, label=""];
18->0 [style = solid, label="desc5"];
79->61 [style = bold, label=""];
36->2 [style = solid, label="task"];
70->57 [style = bold, label=""];
58->84 [style = bold, label=""];
30->17 [style = solid, label="task"];
39->45 [style = dashed, label="0"];
35->38 [style = solid, label="desc3"];
8->39 [style = bold, label=""];
53->75 [style = bold, label=""];
77->59 [style = bold, label=""];
38->77 [style = solid, label="desc1"];
28->52 [style = dashed, label="0"];
30->38 [style = solid, label="task"];
55->80 [style = bold, label=""];
68->77 [style = solid, label="desc6"];
29->36 [style = bold, label=""];
76->77 [style = solid, label="desc7"];
68->76 [style = bold, label=""];
66->67 [style = bold, label=""];
63->54 [style = bold, label=""];
5->32 [style = solid, label="startPartitions"];
22->9 [style = bold, label=""];
12->11 [style = bold, label=""];
30->24 [style = solid, label="task"];
38->62 [style = solid, label="desc1"];
37->19 [style = dotted, label="true"];
25->40 [style = dashed, label="0"];
34->31 [style = bold, label=""];
68->82 [style = solid, label="desc6"];
10->21 [style = bold, label=""];
12->11 [style = solid, label="currentOffsets"];
32->30 [style = solid, label="endPartitions"];
25->2 [style = bold, label=""];
46->41 [style = bold, label=""];
48->55 [style = solid, label="i"];
19->37 [style = bold, label=""];
56->58 [style = bold, label=""];
0->34 [style = bold, label=""];
49->55 [style = solid, label="i"];
85->73 [style = solid, label="desc5"];
17->77 [style = solid, label="desc2"];
11->71 [style = dashed, label="0"];
52->0 [style = bold, label=""];
43->47 [style = bold, label=""];
35->71 [style = bold, label=""];
36->25 [style = solid, label="task"];
35->18 [style = solid, label="currentOffsets"];
65->72 [style = bold, label=""];
35->0 [style = solid, label="desc3"];
48->55 [style = bold, label=""];
30->85 [style = solid, label="task"];
35->0 [style = solid, label="currentOffsets"];
3->0 [style = solid, label="startPartitions"];
18->70 [style = bold, label=""];
41->0 [style = solid, label="desc3"];
44->22 [style = bold, label=""];
30->68 [style = solid, label="task"];
22->9 [style = dotted, label="true"];
38->17 [style = bold, label=""];
36->46 [style = solid, label="task"];
57->70 [style = bold, label=""];
83->79 [style = bold, label=""];
85->77 [style = solid, label="desc5"];
29->36 [style = solid, label="endPartitions"];
17->10 [style = bold, label=""];
75->58 [style = solid, label="numToAdd"];
27->18 [style = bold, label=""];
30->24 [style = bold, label=""];
81->34 [style = bold, label=""];
43->17 [style = solid, label="desc5"];
55->49 [style = dotted, label="true"];
62->51 [style = bold, label=""];
41->38 [style = solid, label="desc3"];
15->65 [style = dashed, label="0"];
72->32 [style = bold, label=""];
45->21 [style = solid, label="desc7"];
58->56 [style = dotted, label="true"];
55->69 [style = bold, label=""];
12->30 [style = solid, label="consumerProps"];
21->73 [style = solid, label="desc4"];
36->45 [style = solid, label="task"];
35->71 [style = solid, label="currentOffsets"];
10->77 [style = solid, label="desc3"];
32->30 [style = bold, label=""];
8->52 [style = bold, label=""];
4->7 [style = bold, label=""];
27->42 [style = dashed, label="0"];
37->12 [style = bold, label=""];
28->32 [style = bold, label=""];
58->64 [style = dotted, label="true"];
13->36 [style = solid, label="consumerProps"];
24->33 [style = bold, label=""];
84->12 [style = bold, label=""];
54->8 [style = bold, label=""];
33->25 [style = dotted, label="true"];
6->5 [style = bold, label=""];
4->36 [style = solid, label="baseSequenceName"];
48->49 [style = solid, label="i"];
11->3 [style = bold, label=""];
25->0 [style = solid, label="desc1"];
55->80 [style = dotted, label="true"];
10->74 [style = solid, label="desc3"];
47->45 [style = bold, label=""];
18->8 [style = bold, label=""];
21->77 [style = solid, label="desc4"];
14->13 [style = bold, label=""];
13->6 [style = bold, label=""];
35->41 [style = dashed, label="0"];
12->3 [style = solid, label="currentOffsets"];
82->50 [style = bold, label=""];
58->64 [style = bold, label=""];
1->37 [style = bold, label=""];
36->42 [style = solid, label="task"];
15->23 [style = bold, label=""];
36->1 [style = solid, label="task"];
35->27 [style = bold, label=""];
33->35 [style = bold, label=""];
8->47 [style = dashed, label="0"];
47->10 [style = solid, label="desc6"];
42->43 [style = bold, label=""];
27->0 [style = solid, label="desc4"];
8->10 [style = solid, label="desc6"];
31->16 [style = bold, label=""];
36->40 [style = solid, label="task"];
36->39 [style = solid, label="task"];
36->41 [style = solid, label="task"];
47->0 [style = solid, label="desc6"];
9->4 [style = bold, label=""];
20->28 [style = bold, label=""];
76->77 [style = bold, label=""];
74->73 [style = bold, label=""];
56->58 [style = solid, label="i"];
61->56 [style = solid, label="i"];
61->58 [style = bold, label=""];
39->0 [style = solid, label="desc7"];
0->81 [style = bold, label=""];
36->1 [style = bold, label=""];
8->0 [style = solid, label="desc6"];
40->46 [style = bold, label=""];
70->57 [style = dotted, label="true"];
3->20 [style = bold, label=""];
64->56 [style = bold, label=""];
39->0 [style = bold, label=""];
33->40 [style = bold, label=""];
40->0 [style = solid, label="desc1"];
21->85 [style = bold, label=""];
86->53 [style = bold, label=""];
12->32 [style = solid, label="currentOffsets"];
7->86 [style = dashed, label="0"];
36->18 [style = solid, label="task"];
39->21 [style = solid, label="desc7"];
30->21 [style = solid, label="task"];
35->81 [style = solid, label="currentOffsets"];
23->72 [style = dashed, label="0"];
3->30 [style = solid, label="startPartitions"];
60->81 [style = solid, label="nextOffsets"];
37->19 [style = bold, label=""];
2->16 [style = solid, label="desc2"];
36->8 [style = solid, label="task"];
46->16 [style = solid, label="desc2"];
60->63 [style = solid, label="nextOffsets"];
78->22 [style = bold, label=""];
4->86 [style = bold, label=""];
36->27 [style = solid, label="task"];
16->38 [style = bold, label=""];
30->76 [style = solid, label="task"];
41->42 [style = bold, label=""];
27->17 [style = solid, label="desc4"];
}
