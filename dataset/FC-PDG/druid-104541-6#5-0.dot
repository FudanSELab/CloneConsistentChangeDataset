digraph {
26 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@32@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,new IndexTask.IndexIngestionSpec(new DataSchema(\"test\",getObjectMapper().convertValue(new StringInputRowParser(DEFAULT_PARSE_SPEC,null),),new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9ff278,new UniformGranularitySpec(Granularities.HOUR,Granularities.MINUTE,null),null,getObjectMapper()),new IndexTask.IndexIOConfig(new IngestSegmentFirehoseFactory(DATA_SOURCE,Intervals.of(\"2014-01-01/2014-01-02\"),null,null,null,null,null,getIndexIO(),coordinatorClient,segmentLoaderFactory,RETRY_POLICY_FACTORY),false),IndexTaskTest.createTuningConfig(5000000,null,null,Long.MAX_VALUE,null,false,true)),null,AuthTestUtils.TEST_AUTHORIZER_MAPPER,new NoopChatHandlerProvider(),rowIngestionMetersFactory,appenderatorsManager)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testRunRegularIndexTaskWithIngestSegmentFirehose['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(DEFAULT_COMPACTION_STATE,segments.get(i).getLastCompactionState())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,0),segments.get(i).getShardSpec())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "i < 3@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<DataSegment> segments = resultPair.rhs@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(DEFAULT_COMPACTION_STATE,segments.get(i).getLastCompactionState())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "int i = 0@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Pair<TaskStatus,List<DataSegment>> resultPair = runTask(compactionTask1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,0),segments.get(i).getShardSpec())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final CompactionTask compactionTask2 = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testRunCompactionTwice['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "i++@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final CompactionTask compactionTask1 = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "resultPair = runTask(compactionTask2)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "runIndexTask()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,getObjectMapper(),AuthTestUtils.TEST_AUTHORIZER_MAPPER,new NoopChatHandlerProvider(),rowIngestionMetersFactory,indexingServiceClient,coordinatorClient,segmentLoaderFactory,RETRY_POLICY_FACTORY,appenderatorsManager)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,0),segments.get(i).getShardSpec())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "int i = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final List<DataSegment> segments = resultPair.rhs@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,0,2,(short)2,(short)1),segments.get(i).getShardSpec())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "i++@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testRunRegularIndexTaskWithIngestSegmentFirehose['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "segments = resultPair.rhs@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final Pair<TaskStatus,List<DataSegment>> resultPair = runTask(indexTask)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(32768,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "i < 3@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16->0 [style = bold, label=""];
24->17 [style = dotted, label="true"];
9->10 [style = bold, label=""];
0->4 [style = solid, label="i"];
11->9 [style = bold, label=""];
36->33 [style = bold, label=""];
9->16 [style = bold, label=""];
24->35 [style = dotted, label="false"];
23->29 [style = bold, label=""];
8->1 [style = bold, label=""];
34->24 [style = bold, label=""];
5->0 [style = bold, label=""];
20->36 [style = solid, label="i"];
24->17 [style = bold, label=""];
6->10 [style = solid, label="i"];
9->14 [style = bold, label=""];
1->12 [style = bold, label=""];
9->5 [style = bold, label=""];
29->21 [style = solid, label="compactionTask1"];
6->0 [style = dotted, label="true"];
6->11 [style = dotted, label="true"];
10->4 [style = dotted, label="true"];
36->24 [style = dotted, label="true"];
19->3 [style = bold, label=""];
13->0 [style = solid, label="i"];
25->28 [style = bold, label=""];
6->4 [style = solid, label="i"];
35->18 [style = bold, label=""];
8->23 [style = bold, label=""];
21->19 [style = bold, label=""];
9->14 [style = dotted, label="false"];
5->9 [style = dashed, label="0"];
20->33 [style = solid, label="i"];
26->13 [style = bold, label=""];
10->6 [style = solid, label="i"];
22->20 [style = bold, label=""];
3->7 [style = bold, label=""];
18->33 [style = solid, label="i"];
30->10 [style = bold, label=""];
10->0 [style = dotted, label="true"];
14->16 [style = dashed, label="0"];
25->28 [style = solid, label="compactionTask2"];
27->8 [style = bold, label=""];
11->30 [style = bold, label=""];
32->31 [style = bold, label=""];
13->6 [style = solid, label="i"];
3->26 [style = bold, label=""];
10->0 [style = solid, label="i"];
11->9 [style = dotted, label="true"];
10->9 [style = dotted, label="true"];
10->6 [style = bold, label=""];
29->21 [style = bold, label=""];
28->32 [style = bold, label=""];
0->10 [style = solid, label="i"];
6->10 [style = dotted, label="true"];
13->10 [style = solid, label="i"];
10->11 [style = dotted, label="true"];
6->10 [style = bold, label=""];
12->3 [style = bold, label=""];
13->6 [style = bold, label=""];
36->18 [style = dotted, label="true"];
11->30 [style = dotted, label="false"];
15->8 [style = bold, label=""];
20->36 [style = bold, label=""];
36->33 [style = dotted, label="true"];
7->13 [style = bold, label=""];
9->5 [style = dotted, label="true"];
1->12 [style = solid, label="indexTask"];
31->22 [style = bold, label=""];
24->35 [style = bold, label=""];
18->36 [style = bold, label=""];
6->0 [style = bold, label=""];
9->16 [style = dotted, label="false"];
18->36 [style = solid, label="i"];
6->0 [style = solid, label="i"];
20->18 [style = solid, label="i"];
0->10 [style = bold, label=""];
14->0 [style = bold, label=""];
6->4 [style = dotted, label="true"];
0->4 [style = bold, label=""];
10->4 [style = bold, label=""];
7->3 [style = dashed, label="0"];
4->11 [style = bold, label=""];
36->34 [style = dotted, label="true"];
33->34 [style = bold, label=""];
2->8 [style = bold, label=""];
17->18 [style = bold, label=""];
6->25 [style = bold, label=""];
}
