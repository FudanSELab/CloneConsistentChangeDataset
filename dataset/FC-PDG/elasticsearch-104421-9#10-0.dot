digraph {
19 [style = filled, label = "assertEquals(2,perClusterIndices.size())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(Arrays.asList(\"foo:bar\",\"foo*\",\"baz\",\"boo\"),perClusterIndices.get(\"cluster_2\"))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertFalse(service.isCrossClusterSearchEnabled())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "builder.putList(\"cluster.remote.cluster_1.sniff.seeds\",cluster1Seed.getAddress().toString())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "transportService.acceptIncomingRequests()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expectThrows(,null)@@@36@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(service.isCrossClusterSearchEnabled())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertNotNull(localIndices)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DiscoveryNode cluster1Seed = cluster1Transport.getLocalDiscoNode()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Map<String,List<String>> perClusterIndices = service.groupClusterIndices(service.getRemoteClusterNames(),new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1491796)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "service.initializeRemoteClusters()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testGroupClusterIndices['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DiscoveryNode cluster2Seed = cluster2Transport.getLocalDiscoNode()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Collections.shuffle(knownNodes,random())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "builder.putList(\"cluster.remote.cluster_1.seeds\",cluster1Seed.getAddress().toString())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertFalse(service.isRemoteClusterRegistered(\"foo\"))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "knownNodes.add(cluster2Transport.getLocalDiscoNode())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "knownNodes.add(cluster1Transport.getLocalDiscoNode())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "{Map<String,OriginalIndices> perClusterIndices = service.groupIndices(IndicesOptions.LENIENT_EXPAND_OPEN,Strings.EMPTY_ARRAY)assertEquals(1,perClusterIndices.size())assertArrayEquals(Strings.EMPTY_ARRAY,perClusterIndices.get(RemoteClusterAware.LOCAL_CLUSTER_GROUP_KEY).indices())}@@@56@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "{Map<String,OriginalIndices> perClusterIndices = service.groupIndices(IndicesOptions.LENIENT_EXPAND_OPEN,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@149186c)assertEquals(3,perClusterIndices.size())assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1491880,perClusterIndices.get(RemoteClusterAware.LOCAL_CLUSTER_GROUP_KEY).indices())assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@149188f,perClusterIndices.get(\"cluster_1\").indices())assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@149189f,perClusterIndices.get(\"cluster_2\").indices())}@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(Arrays.asList(\"bar\",\"test\",\"baz\",\"boo\"),perClusterIndices.get(\"cluster_1\"))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<String> localIndices = perClusterIndices.remove(RemoteClusterAware.LOCAL_CLUSTER_GROUP_KEY)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "builder.putList(\"cluster.remote.cluster_2.sniff.seeds\",cluster2Seed.getAddress().toString())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "{expectThrows(,null)}@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "transportService.start()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expectThrows(,null)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testGroupIndices['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "{Map<String,OriginalIndices> perClusterIndices = service.groupIndices(IndicesOptions.LENIENT_EXPAND_OPEN,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14918bd)assertEquals(2,perClusterIndices.size())assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14918cc,perClusterIndices.get(\"cluster_1\").indices())assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14918d9,perClusterIndices.get(\"cluster_2\").indices())}@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(\"foo\",localIndices.get(0))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "builder.putList(\"cluster.remote.cluster_2.seeds\",cluster2Seed.getAddress().toString())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Settings.Builder builder = Settings.builder()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testGroupClusterIndices['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4->6 [style = bold, label=""];
16->24 [style = bold, label=""];
6->21 [style = solid, label="localIndices"];
2->4 [style = bold, label=""];
33->31 [style = bold, label=""];
20->7 [style = bold, label=""];
21->15 [style = bold, label=""];
25->2 [style = bold, label=""];
23->1 [style = bold, label=""];
12->28 [style = dashed, label="0"];
7->18 [style = bold, label=""];
1->8 [style = bold, label=""];
22->16 [style = bold, label=""];
20->29 [style = dashed, label="0"];
27->23 [style = bold, label=""];
15->19 [style = bold, label=""];
19->22 [style = bold, label=""];
24->11 [style = bold, label=""];
17->3 [style = bold, label=""];
5->9 [style = bold, label=""];
10->25 [style = bold, label=""];
6->21 [style = bold, label=""];
0->12 [style = bold, label=""];
9->17 [style = bold, label=""];
3->0 [style = bold, label=""];
30->23 [style = bold, label=""];
23->9 [style = solid, label="knownNodes"];
12->20 [style = bold, label=""];
8->13 [style = bold, label=""];
2->33 [style = bold, label=""];
29->7 [style = bold, label=""];
26->23 [style = bold, label=""];
0->28 [style = bold, label=""];
18->14 [style = bold, label=""];
14->10 [style = bold, label=""];
31->34 [style = bold, label=""];
13->5 [style = bold, label=""];
28->29 [style = bold, label=""];
34->32 [style = bold, label=""];
}
