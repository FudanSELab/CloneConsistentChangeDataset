digraph {
10 [style = filled, label = "assertEquals(Strings.toString(mapping),mapper2.mappingSource().toString())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(2,pointField.fieldType().pointIndexDimensionCount())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(Strings.toString(mapping)))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DocumentMapper mapper2 = parser.parse(\"type\",new CompressedXContent(Strings.toString(mapping)))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "IndexableField pointField = fields(1(@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "IndexableField dvField = fields(0(@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(Strings.toString(mapping),mapper.mappingSource().toString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",type).field(\"doc_values\",false)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\").startObject(\"properties\").startObject(\"field\").field(\"type\",type)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "doTestCoerce['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(DocValuesType.BINARY,dvField.fieldType().docValuesType())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "mapping = mapping.endObject().endObject().endObject().endObject()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",type).field(\"coerce\",false).endObject().endObject().endObject().endObject()@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "DocumentMapper mapper = parser.parse(\"_doc\",new CompressedXContent(Strings.toString(mapping)))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "ThrowingRunnable runnable = null@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "doTestCoerce['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\").startObject(\"properties\").startObject(\"field\").field(\"type\",type).field(\"coerce\",false).endObject().endObject().endObject().endObject()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(2,fields.length)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(e.getCause().getMessage(),anyOf(containsString(\"passed as String\"),containsString(\"failed to parse date\"),containsString(\"is not an IP string literal\")))@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "doTestNoDocValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject(\"field\").field(getFromField(),getFrom(type)).field(getToField(),getTo(type)).endObject().endObject()),XContentType.JSON))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "String type@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "mapping = mapping.field(\"format\",DATE_FORMAT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(1,fields.length)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "type.equals(\"date_range\") == false@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String type@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "IndexableField pointField = fields(0(@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "MapperParsingException e = expectThrows(,runnable)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "type.equals(\"date_range\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",type)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "DocumentMapper mapper2 = parser.parse(\"_doc\",new CompressedXContent(Strings.toString(mapping)))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(2,pointField.fieldType().pointIndexDimensionCount())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->22 [style = bold, label=""];
4->10 [style = bold, label=""];
22->25 [style = bold, label=""];
17->5 [style = bold, label=""];
19->7 [style = solid, label="fields"];
19->18 [style = bold, label=""];
12->23 [style = dashed, label="0"];
21->0 [style = bold, label=""];
19->29 [style = solid, label="fields"];
10->14 [style = bold, label=""];
11->1 [style = bold, label=""];
0->19 [style = bold, label=""];
12->21 [style = bold, label=""];
19->31 [style = bold, label=""];
19->2 [style = solid, label="fields"];
11->6 [style = bold, label=""];
14->8 [style = solid, label="runnable"];
27->30 [style = bold, label=""];
15->4 [style = solid, label="mapping"];
16->7 [style = bold, label=""];
5->24 [style = dashed, label="0"];
1->21 [style = solid, label="mapping"];
31->29 [style = bold, label=""];
13->5 [style = solid, label="type"];
26->13 [style = dotted, label="true"];
18->2 [style = bold, label=""];
26->24 [style = bold, label=""];
9->14 [style = dotted, label="true"];
7->3 [style = bold, label=""];
1->23 [style = bold, label=""];
9->25 [style = dotted, label="true"];
15->22 [style = dashed, label="0"];
9->8 [style = dotted, label="true"];
1->23 [style = solid, label="mapping"];
3->9 [style = bold, label=""];
6->1 [style = bold, label=""];
27->28 [style = dotted, label="true"];
30->11 [style = bold, label=""];
4->25 [style = dashed, label="0"];
13->28 [style = dashed, label="0"];
8->20 [style = bold, label=""];
23->21 [style = bold, label=""];
1->12 [style = solid, label="mapping"];
9->15 [style = bold, label=""];
24->11 [style = bold, label=""];
29->32 [style = bold, label=""];
11->6 [style = dotted, label="true"];
2->29 [style = dashed, label="0"];
9->20 [style = dotted, label="true"];
15->4 [style = bold, label=""];
13->24 [style = solid, label="type"];
1->12 [style = bold, label=""];
9->4 [style = dotted, label="true"];
22->25 [style = solid, label="mapping"];
25->10 [style = bold, label=""];
9->15 [style = dotted, label="true"];
5->11 [style = bold, label=""];
14->8 [style = bold, label=""];
17->13 [style = dotted, label="true"];
15->10 [style = solid, label="mapping"];
9->10 [style = dotted, label="true"];
22->10 [style = solid, label="mapping"];
9->22 [style = dotted, label="true"];
18->31 [style = dashed, label="0"];
5->30 [style = dashed, label="0"];
2->16 [style = bold, label=""];
}
