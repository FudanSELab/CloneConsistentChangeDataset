digraph {
29 [style = filled, label = "taskStorage = new HeapMemoryTaskStorage(new TaskStorageConfig(null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final IndexerMetadataStorageCoordinator mdc@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "final TaskConfig taskConfig = new TaskConfig(directory.getPath(),null,null,50000,null,true,null,null,null)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final TaskStorage taskStorage@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "SegmentLoaderConfig segmentLoaderConfig = new SegmentLoaderConfig(){@Override public List<StorageLocationConfig> getLocations(){return new ArrayList<>()}}@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final TaskToolboxFactory toolboxFactory = new TaskToolboxFactory(taskConfig,null,taskActionClientFactory,EMITTER,new TestDataSegmentPusher(),new TestDataSegmentKiller(),null,null,new TestDataSegmentAnnouncer(),EasyMock.createNiceMock(),handoffNotifierFactory,null,Execs.directExecutor(),NoopJoinableFactory.INSTANCE,EasyMock.createMock(),new SegmentLoaderFactory(null,testUtils.getTestObjectMapper()),testUtils.getTestObjectMapper(),testUtils.getTestIndexIO(),MapCache.create(1024),new CacheConfig(),new CachePopulatorStats(),testUtils.getTestIndexMergerV9(),EasyMock.createNiceMock(),EasyMock.createNiceMock(),new LookupNodeService(\"tier\"),new DataNodeService(\"tier\",1000,ServerType.INDEXER_EXECUTOR,0),new NoopTestTaskReportFileWriter(),null)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "IndexerSQLMetadataStorageCoordinator mdc = new IndexerSQLMetadataStorageCoordinator(mapper,derbyConnectorRule.metadataTablesConfigSupplier().get(),derbyConnectorRule.getConnector()){@Override public Set<DataSegment> announceHistoricalSegments(Set<DataSegment> segments){Set<DataSegment> result = super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@aa188bsegmentsAssert.assertFalse(\"Segment latch not initialized, did you forget to call expectPublishSegments?\",segmentLatch == null)publishedSegments.addAll(result)segments.forEach(null)return result}@Override public SegmentPublishResult announceHistoricalSegments(Set<DataSegment> segments,DataSourceMetadata startMetadata,DataSourceMetadata endMetadata){SegmentPublishResult result = super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@aa18afsegmentsstartMetadataendMetadataAssert.assertFalse(\"Segment latch not initialized, did you forget to call expectPublishSegments?\",segmentLatch == null)publishedSegments.addAll(result.getSegments())result.getSegments().forEach(null)return result}}@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "makeToolboxFactory['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final Task task@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "SegmentLoaderConfig segmentLoaderConfig = new SegmentLoaderConfig(){@Override public List<StorageLocationConfig> getLocations(){return new ArrayList<>()}}@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final TaskActionClientFactory taskActionClientFactory = new LocalTaskActionClientFactory(taskStorage,taskActionToolbox,new TaskAuditLogConfig(false))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final TaskActionToolbox taskActionToolbox = new TaskActionToolbox(taskLockbox,taskStorage,mdc,EMITTER,EasyMock.createMock())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "taskLockbox = new TaskLockbox(taskStorage,mdc)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "handOffCallbacks = new ConcurrentHashMap<>()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final TestUtils testUtils = new TestUtils()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "mapper.registerSubtypes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "rowIngestionMetersFactory = testUtils.getRowIngestionMetersFactory()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "taskLockbox.syncFromStorage()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final Task task@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EntryExistsException e@@@8@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "final TaskActionClientFactory taskActionClientFactory = new LocalTaskActionClientFactory(taskStorage,taskActionToolbox,new TaskAuditLogConfig(false))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "handOffCallbacks = new ConcurrentHashMap<>()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "final TaskActionToolbox taskActionToolbox = new TaskActionToolbox(taskLockbox,taskStorage,mdc,EMITTER,EasyMock.createMock())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final File directory@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "{}@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final TaskLockbox taskLockbox = new TaskLockbox(taskStorage,mdc)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "makeToolbox['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "taskStorage.insert(task,TaskStatus.running(task.getId()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final TestUtils testUtils = new TestUtils()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final TaskConfig taskConfig = new TaskConfig(directory.getPath(),null,null,50000,null,true,null,null,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final File directory@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final QueryRunnerFactoryConglomerate conglomerate = new DefaultQueryRunnerFactoryConglomerate(ImmutableMap.of(,new TimeseriesQueryRunnerFactory(new TimeseriesQueryQueryToolChest(),new TimeseriesQueryEngine(),new QueryWatcher(){@Override public void registerQueryFuture(Query query,ListenableFuture future){}})))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final IndexerMetadataStorageCoordinator mdc@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final SegmentHandoffNotifierFactory handoffNotifierFactory = new SegmentHandoffNotifierFactory(){@Override public SegmentHandoffNotifier createSegmentHandoffNotifier(String dataSource){return new SegmentHandoffNotifier(){@Override public boolean registerSegmentHandoffCallback(SegmentDescriptor descriptor,Executor exec,Runnable handOffRunnable){handOffCallbacks.put(descriptor,new Pair<>(exec,handOffRunnable))return true}@Override public void start(){}@Override public void close(){}}}}@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final File directory@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final SegmentHandoffNotifierFactory handoffNotifierFactory = null@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "return toolboxFactory.build(task)@@@43@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "ObjectMapper mapper = new DefaultObjectMapper()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "{}@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "mapper.registerSubtypes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "taskToolboxFactory = new TaskToolboxFactory(taskConfig,new DruidNode(\"druid/middlemanager\",\"localhost\",false,8091,null,true,false),taskActionClientFactory,EMITTER,new TestDataSegmentPusher(),new TestDataSegmentKiller(),null,null,new TestDataSegmentAnnouncer(),EasyMock.createNiceMock(),handoffNotifierFactory,null,Execs.directExecutor(),NoopJoinableFactory.INSTANCE,EasyMock.createMock(),new SegmentLoaderFactory(null,testUtils.getTestObjectMapper()),testUtils.getTestObjectMapper(),testUtils.getTestIndexIO(),MapCache.create(1024),new CacheConfig(),new CachePopulatorStats(),testUtils.getTestIndexMergerV9(),EasyMock.createNiceMock(),EasyMock.createNiceMock(),new LookupNodeService(\"tier\"),new DataNodeService(\"tier\",1000,ServerType.INDEXER_EXECUTOR,0),new SingleFileTaskReportFileWriter(reportsFile),null)@@@53@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "publishedSegments = new CopyOnWriteArrayList<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "makeToolbox['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "final QueryRunnerFactoryConglomerate conglomerate = new DefaultQueryRunnerFactoryConglomerate(ImmutableMap.of(,new TimeseriesQueryRunnerFactory(new TimeseriesQueryQueryToolChest(),new TimeseriesQueryEngine(),null)))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36->38 [style = dotted, label="true"];
40->32 [style = bold, label=""];
21->2 [style = solid, label="mdc"];
43->35 [style = solid, label="taskConfig"];
17->1 [style = bold, label=""];
5->19 [style = solid, label="taskConfig"];
19->35 [style = dashed, label="0"];
33->31 [style = bold, label=""];
11->10 [style = dotted, label="true"];
39->35 [style = solid, label="taskActionClientFactory"];
6->2 [style = solid, label="taskLockbox"];
36->29 [style = bold, label=""];
23->20 [style = dotted, label="true"];
0->14 [style = solid, label="task"];
0->7 [style = solid, label="task"];
13->6 [style = solid, label="mdc"];
29->34 [style = solid, label="taskStorage"];
12->4 [style = bold, label=""];
16->19 [style = bold, label=""];
29->40 [style = bold, label=""];
9->15 [style = bold, label=""];
42->43 [style = bold, label=""];
17->37 [style = dashed, label="0"];
23->24 [style = dotted, label="true"];
18->3 [style = solid, label="taskStorage"];
30->42 [style = solid, label="mdc"];
4->17 [style = bold, label=""];
11->0 [style = dotted, label="true"];
12->41 [style = dashed, label="0"];
37->26 [style = bold, label=""];
18->7 [style = solid, label="task"];
32->30 [style = solid, label="mapper"];
22->9 [style = bold, label=""];
29->39 [style = solid, label="taskStorage"];
13->2 [style = solid, label="mdc"];
15->2 [style = bold, label=""];
20->6 [style = solid, label="taskStorage"];
27->35 [style = bold, label=""];
2->3 [style = bold, label=""];
39->41 [style = bold, label=""];
43->34 [style = bold, label=""];
26->25 [style = bold, label=""];
20->3 [style = solid, label="taskStorage"];
23->21 [style = dotted, label="true"];
3->12 [style = bold, label=""];
28->37 [style = bold, label=""];
23->18 [style = dotted, label="true"];
2->3 [style = solid, label="taskActionToolbox"];
23->5 [style = bold, label=""];
11->18 [style = dotted, label="true"];
37->35 [style = solid, label="handoffNotifierFactory"];
30->34 [style = solid, label="mdc"];
42->34 [style = solid, label="taskLockbox"];
18->14 [style = solid, label="task"];
34->39 [style = solid, label="taskActionToolbox"];
7->15 [style = bold, label=""];
31->30 [style = bold, label=""];
19->14 [style = bold, label=""];
34->39 [style = bold, label=""];
18->6 [style = solid, label="taskStorage"];
9->8 [style = bold, label=""];
6->7 [style = bold, label=""];
32->33 [style = bold, label=""];
1->16 [style = bold, label=""];
25->27 [style = bold, label=""];
11->13 [style = dotted, label="true"];
17->19 [style = solid, label="handoffNotifierFactory"];
29->42 [style = solid, label="taskStorage"];
30->42 [style = bold, label=""];
20->2 [style = solid, label="taskStorage"];
8->15 [style = bold, label=""];
5->6 [style = bold, label=""];
11->5 [style = bold, label=""];
41->28 [style = bold, label=""];
3->19 [style = solid, label="taskActionClientFactory"];
18->2 [style = solid, label="taskStorage"];
21->6 [style = solid, label="mdc"];
}
