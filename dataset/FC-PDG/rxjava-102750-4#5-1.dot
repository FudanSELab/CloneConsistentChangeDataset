digraph {
5 [style = filled, label = "assertNotNull(receivedException.get())@@@29@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "verify(observer,times(1)).onNext(\"one\")@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "fail(e.getMessage())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "w.t.join()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verify(subscriber,Mockito.never()).onNext(\"two\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "verify(subscriber,Mockito.never()).onNext(\"three\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "resumeNextWithAsyncExecution['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "verify(subscriber,times(1)).onNext(\"twoResume\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final AtomicReference<Throwable> receivedException = new AtomicReference<Throwable>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "InterruptedException e@@@19@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Subscription s = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "TestObservable w = new TestObservable(s,\"one\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "verify(observer,Mockito.never()).onError(any())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TestFlowable w = new TestFlowable(s,\"one\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final AtomicReference<Throwable> receivedException = new AtomicReference<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Subscriber<String> subscriber = TestHelper.mockSubscriber()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "o.subscribe(observer)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "verify(observer,times(1)).onNext(\"twoResume\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "verify(observer,Mockito.never()).onNext(\"two\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "verify(subscriber,times(1)).onComplete()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "flowable.subscribe(subscriber)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Function<Throwable,Flowable<String>> resume = new Function<Throwable,Flowable<String>>(){@Override public Flowable<String> apply(Throwable t1){receivedException.set(t1)return Flowable.just(\"twoResume\",\"threeResume\")}}@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "verify(observer,Mockito.never()).onNext(\"three\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Observable<String> o = Observable.unsafeCreate(w).onErrorResumeNext(resume)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "verify(subscriber,times(1)).onNext(\"threeResume\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Function<Throwable,Observable<String>> resume = new Function<Throwable,Observable<String>>(){@Override public Observable<String> apply(Throwable t1){receivedException.set(t1)return Observable.just(\"twoResume\",\"threeResume\")}}@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "verify(observer,times(1)).onComplete()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "resumeNextWithAsyncExecution['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "verify(subscriber,Mockito.never()).onError(any())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Observer<String> observer = TestHelper.mockObserver()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "resumeNextWithAsyncExecution['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Flowable<String> flowable = Flowable.unsafeCreate(w).onErrorResumeNext(resume)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "verify(subscriber,times(1)).onNext(\"one\")@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "verify(observer,times(1)).onNext(\"threeResume\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33->7 [style = bold, label=""];
22->26 [style = bold, label=""];
14->12 [style = solid, label="s"];
23->25 [style = bold, label=""];
3->31 [style = dashed, label="0"];
26->5 [style = bold, label=""];
21->31 [style = solid, label="observer"];
8->9 [style = solid, label="resume"];
19->20 [style = bold, label=""];
16->6 [style = bold, label=""];
11->4 [style = bold, label=""];
30->27 [style = bold, label=""];
1->29 [style = dashed, label="0"];
7->20 [style = dashed, label="0"];
4->27 [style = dashed, label="0"];
9->17 [style = bold, label=""];
1->18 [style = bold, label=""];
20->14 [style = bold, label=""];
14->28 [style = bold, label=""];
31->2 [style = bold, label=""];
14->28 [style = solid, label="s"];
24->22 [style = bold, label=""];
17->21 [style = dashed, label="0"];
15->5 [style = bold, label=""];
0->7 [style = bold, label=""];
7->14 [style = bold, label=""];
23->25 [style = solid, label="resume"];
17->3 [style = solid, label="subscriber"];
21->31 [style = bold, label=""];
3->2 [style = bold, label=""];
18->10 [style = bold, label=""];
10->13 [style = bold, label=""];
28->23 [style = bold, label=""];
12->8 [style = bold, label=""];
12->28 [style = dashed, label="0"];
29->32 [style = bold, label=""];
6->11 [style = bold, label=""];
14->12 [style = bold, label=""];
9->25 [style = dashed, label="0"];
8->9 [style = bold, label=""];
17->3 [style = bold, label=""];
15->26 [style = dashed, label="0"];
4->1 [style = bold, label=""];
13->15 [style = bold, label=""];
27->29 [style = bold, label=""];
11->30 [style = dashed, label="0"];
2->30 [style = bold, label=""];
32->24 [style = bold, label=""];
13->22 [style = dashed, label="0"];
10->24 [style = dashed, label="0"];
2->11 [style = bold, label=""];
25->21 [style = bold, label=""];
16->6 [style = dotted, label="true"];
8->23 [style = dashed, label="0"];
18->32 [style = dashed, label="0"];
6->30 [style = bold, label=""];
}
