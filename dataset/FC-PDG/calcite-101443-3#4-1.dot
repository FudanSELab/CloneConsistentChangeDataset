digraph {
2 [style = filled, label = "planner.addRule(new SingleLeafTraitRule())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testCollationConversion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(input.getTraitSet().contains(SIMPLE_DISTRIBUTION_RANDOM))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "planner.addRelTraitDef(COLLATION_TRAIT_DEF)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(input.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertTrue(input2.getTraitSet().contains(LEAF_COLLATION))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final VolcanoPlanner planner = new VolcanoPlanner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "planner.addRule(new LeafTraitRule())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(result.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "RelNode result = planner.chooseDelegate().findBestExp()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertTrue(input.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(input2 instanceof SingletonLeafRel)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(result.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertTrue(result.getTraitSet().contains(ROOT_COLLATION))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(input2.getTraitSet().contains(SIMPLE_DISTRIBUTION_SINGLETON))@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final NoneSingleRel singleRel = new NoneSingleRel(cluster,leafRel)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertTrue(input instanceof PhysicalSort)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(input2 instanceof LeafRel)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final RelNode input = result.getInput(0)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RelOptCluster cluster = newCluster(planner)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "planner.setRoot(convertedRel)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testTraitConversion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "final RelNode convertedRel = planner.changeTraits(singleRel,cluster.traitSetOf(PHYS_CALLING_CONVENTION).plus(ROOT_COLLATION))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testTraitConversion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "planner.addRule(new RandomSingleTraitRule())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "planner.addRelTraitDef(ConventionTraitDef.INSTANCE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(result instanceof RandomSingleRel)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final RelNode input = result.getInput(0)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "planner.addRule(new SingleNodeRule())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertTrue(result.getTraitSet().contains(ROOT_COLLATION))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final RelNode convertedRel = planner.changeTraits(singleRel,cluster.traitSetOf(PHYS_CALLING_CONVENTION))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final RelNode result = planner.chooseDelegate().findBestExp()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertTrue(result instanceof RootSingleRel)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final RelNode input2 = input.getInput(0)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "planner.addRule(ExpandConversionRule.INSTANCE)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "planner.addRelTraitDef(NEW_TRAIT_DEF_INSTANCE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(input.getTraitSet().contains(PHYS_CALLING_CONVENTION))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final NoneLeafRel leafRel = new NoneLeafRel(cluster,\"a\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->22 [style = bold, label=""];
24->10 [style = bold, label=""];
13->10 [style = bold, label=""];
35->31 [style = bold, label=""];
22->25 [style = bold, label=""];
7->17 [style = solid, label="cluster"];
27->36 [style = bold, label=""];
22->15 [style = bold, label=""];
7->17 [style = bold, label=""];
16->11 [style = bold, label=""];
15->4 [style = solid, label="result"];
16->32 [style = dashed, label="0"];
17->6 [style = bold, label=""];
37->10 [style = bold, label=""];
1->27 [style = dashed, label="0"];
2->3 [style = bold, label=""];
18->1 [style = solid, label="input2"];
10->7 [style = solid, label="planner"];
4->19 [style = bold, label=""];
18->12 [style = bold, label=""];
12->20 [style = bold, label=""];
8->14 [style = bold, label=""];
8->34 [style = dashed, label="0"];
16->32 [style = bold, label=""];
31->21 [style = bold, label=""];
36->26 [style = bold, label=""];
23->8 [style = bold, label=""];
25->35 [style = bold, label=""];
17->6 [style = solid, label="leafRel"];
34->30 [style = bold, label=""];
29->18 [style = bold, label=""];
9->33 [style = dashed, label="0"];
32->29 [style = bold, label=""];
5->16 [style = bold, label=""];
7->6 [style = solid, label="cluster"];
25->35 [style = solid, label="result"];
21->5 [style = bold, label=""];
15->25 [style = dashed, label="0"];
11->0 [style = bold, label=""];
30->28 [style = bold, label=""];
18->1 [style = bold, label=""];
3->7 [style = bold, label=""];
9->22 [style = solid, label="convertedRel"];
16->32 [style = solid, label="input"];
10->23 [style = bold, label=""];
12->36 [style = dashed, label="0"];
6->33 [style = bold, label=""];
14->30 [style = dashed, label="0"];
2->28 [style = dashed, label="0"];
15->4 [style = bold, label=""];
1->12 [style = bold, label=""];
23->34 [style = bold, label=""];
21->16 [style = bold, label=""];
0->18 [style = bold, label=""];
14->2 [style = bold, label=""];
28->3 [style = bold, label=""];
6->9 [style = bold, label=""];
33->22 [style = solid, label="convertedRel"];
6->33 [style = solid, label="singleRel"];
12->27 [style = bold, label=""];
4->35 [style = dashed, label="0"];
20->26 [style = dashed, label="0"];
6->9 [style = solid, label="singleRel"];
33->22 [style = bold, label=""];
5->16 [style = solid, label="input"];
12->27 [style = solid, label="input2"];
19->21 [style = bold, label=""];
}
