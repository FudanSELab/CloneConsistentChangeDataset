digraph {
16 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"*Y*\"))),equalTo(newHashSet(\"testXXY\",\"testXYY\",\"testYYY\",\"kukuYYY\")))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Metadata.Builder mdBuilder = Metadata.builder().put(indexBuilder(\"testXXX\").putAlias(AliasMetadata.builder(\"alias1\")).putAlias(AliasMetadata.builder(\"alias2\"))).put(indexBuilder(\"testXYY\").putAlias(AliasMetadata.builder(\"alias2\"))).put(indexBuilder(\"testYYY\").putAlias(AliasMetadata.builder(\"alias3\"))).put(indexBuilder(\"kuku\"))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testConvertWildcardsTests['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"-kuku\"))),equalTo(newHashSet(\"-kuku\")))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"test*X*\"))),equalTo(newHashSet(\"testXXX\",\"testXXY\",\"testXYY\")))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"test*X*Y\"))),equalTo(newHashSet(\"testXXY\",\"testXYY\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testYY*\",\"alias*\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "MetaData.Builder mdBuilder = MetaData.builder().put(indexBuilder(\"testXXX\")).put(indexBuilder(\"testXXY\")).put(indexBuilder(\"testXYY\")).put(indexBuilder(\"testYYY\")).put(indexBuilder(\"kuku\")).put(indexBuilder(\"kukuYYY\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"test*\",\"-testYYY\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\")))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testX*\",\"testYYY\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testMultipleWildcards['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"*Y*X\"))).size(),equalTo(0))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "IndexNameExpressionResolver.WildcardExpressionResolver resolver = new IndexNameExpressionResolver.WildcardExpressionResolver()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testConvertWildcardsTests['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"kuku*Y*\"))),equalTo(newHashSet(\"kukuYYY\")))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "MetaData.Builder mdBuilder = MetaData.builder().put(indexBuilder(\"testXXX\").putAlias(AliasMetaData.builder(\"alias1\")).putAlias(AliasMetaData.builder(\"alias2\"))).put(indexBuilder(\"testXYY\").putAlias(AliasMetaData.builder(\"alias2\"))).put(indexBuilder(\"testYYY\").putAlias(AliasMetaData.builder(\"alias3\"))).put(indexBuilder(\"kuku\"))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testYYY\",\"testX*\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state,IndicesOptions.lenientExpandOpen())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"test*Y*X\"))).size(),equalTo(0))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
4->18 [style = dashed, label="0"];
0->20 [style = solid, label="context"];
10->0 [style = solid, label="state"];
7->17 [style = dashed, label="0"];
0->17 [style = bold, label=""];
0->17 [style = solid, label="context"];
6->11 [style = dashed, label="0"];
12->11 [style = bold, label=""];
8->20 [style = dashed, label="0"];
10->3 [style = bold, label=""];
7->4 [style = bold, label=""];
2->9 [style = bold, label=""];
0->8 [style = solid, label="context"];
16->19 [style = bold, label=""];
0->2 [style = solid, label="context"];
0->18 [style = solid, label="context"];
15->5 [style = bold, label=""];
3->0 [style = bold, label=""];
0->7 [style = bold, label=""];
9->19 [style = dashed, label="0"];
0->9 [style = solid, label="context"];
6->5 [style = bold, label=""];
18->20 [style = bold, label=""];
1->6 [style = bold, label=""];
20->16 [style = bold, label=""];
19->13 [style = bold, label=""];
8->2 [style = bold, label=""];
5->10 [style = dashed, label="0"];
6->15 [style = dashed, label="0"];
11->10 [style = bold, label=""];
2->16 [style = dashed, label="0"];
4->8 [style = bold, label=""];
0->7 [style = solid, label="context"];
14->15 [style = bold, label=""];
5->0 [style = solid, label="state"];
0->16 [style = solid, label="context"];
17->18 [style = bold, label=""];
0->4 [style = solid, label="context"];
}
