digraph {
57 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Thread.sleep(10)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "kafkaProducer.send(record).get()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "task.getRunner().getStatus() != KafkaIndexTask.Status.PAUSED@@@30@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "task.getRunner().getStatus() != KafkaIndexTask.Status.PAUSED@@@24@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final KafkaPartitions endPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,2L))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@21@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
59 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionOffsetMap().equals(nextOffsets))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "task.getRunner().getStatus() != KafkaIndexTask.Status.PAUSED@@@21@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
66 [style = filled, label = "final KafkaPartitions checkpoint2 = new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,0L))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionOffsetMap().equals(currentOffsets))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final KafkaPartitions checkpoint1 = new KafkaPartitions(topic,ImmutableMap.of(0,5L,1,0L))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "int i = numToAdd@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "int i = 0@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "i++@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L,1,0L))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "i++@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@52@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,4L,1,2L))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "maxTotalRows = 3L@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new KafkaPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new KafkaPartitions(topic,nextOffsets)))))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new KafkaPartitions(topic,currentOffsets)))))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "i < records.size()@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "final KafkaPartitions checkpoint1 = new KafkaPartitions(topic,ImmutableMap.of(0,3L,1,0L))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "i < numToAdd@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Thread.sleep(10)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets) || checkpoint2.getPartitionSequenceNumberMap().equals(currentOffsets))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new KafkaPartitions(topic,currentOffsets)))))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "final KafkaPartitions startPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,0L,1,0L))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@62@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final KafkaPartitions startPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,0L,1,0L))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->5 [style = bold, label=""];
6->41 [style = solid, label="currentOffsets"];
6->3 [style = bold, label=""];
3->41 [style = dashed, label="0"];
34->67 [style = bold, label=""];
68->69 [style = bold, label=""];
27->20 [style = solid, label="currentOffsets"];
17->76 [style = solid, label="desc7"];
62->54 [style = bold, label=""];
62->60 [style = solid, label="numToAdd"];
70->65 [style = bold, label=""];
7->34 [style = solid, label="consumerProps"];
75->35 [style = bold, label=""];
59->51 [style = bold, label=""];
8->37 [style = solid, label="desc6"];
68->69 [style = dotted, label="true"];
34->74 [style = solid, label="startPartitions"];
71->59 [style = solid, label="nextOffsets"];
31->48 [style = dashed, label="0"];
60->68 [style = solid, label="i"];
25->29 [style = bold, label=""];
2->74 [style = solid, label="endPartitions"];
49->9 [style = solid, label="task"];
5->28 [style = bold, label=""];
64->73 [style = bold, label=""];
74->22 [style = solid, label="task"];
3->27 [style = bold, label=""];
3->75 [style = dashed, label="0"];
18->21 [style = solid, label="desc7"];
18->37 [style = solid, label="desc3"];
27->35 [style = solid, label="currentOffsets"];
18->22 [style = bold, label=""];
31->6 [style = bold, label=""];
45->43 [style = bold, label=""];
4->22 [style = solid, label="desc3"];
6->30 [style = solid, label="currentOffsets"];
5->49 [style = solid, label="baseSequenceName"];
49->13 [style = bold, label=""];
25->67 [style = dashed, label="0"];
50->62 [style = bold, label=""];
7->16 [style = bold, label=""];
6->41 [style = bold, label=""];
34->9 [style = solid, label="task"];
43->49 [style = solid, label="endPartitions"];
6->23 [style = solid, label="currentOffsets"];
24->17 [style = solid, label="desc2"];
60->68 [style = bold, label=""];
42->1 [style = bold, label=""];
61->24 [style = bold, label=""];
11->43 [style = dashed, label="0"];
13->31 [style = bold, label=""];
37->33 [style = bold, label=""];
3->30 [style = bold, label=""];
44->47 [style = bold, label=""];
18->22 [style = solid, label="desc7"];
1->38 [style = bold, label=""];
20->61 [style = bold, label=""];
2->31 [style = bold, label=""];
4->37 [style = solid, label="desc3"];
28->57 [style = dashed, label="0"];
6->46 [style = solid, label="currentOffsets"];
36->9 [style = bold, label=""];
48->2 [style = bold, label=""];
63->1 [style = bold, label=""];
29->66 [style = dashed, label="0"];
2->74 [style = bold, label=""];
55->58 [style = solid, label="i"];
11->34 [style = solid, label="endPartitions"];
22->37 [style = solid, label="desc4"];
3->30 [style = dotted, label="true"];
31->2 [style = bold, label=""];
26->73 [style = solid, label="desc5"];
19->34 [style = solid, label="startPartitions"];
34->18 [style = solid, label="task"];
10->21 [style = bold, label=""];
14->33 [style = solid, label="desc4"];
49->14 [style = solid, label="task"];
16->19 [style = bold, label=""];
17->37 [style = bold, label=""];
29->45 [style = dashed, label="0"];
19->25 [style = bold, label=""];
54->58 [style = bold, label=""];
18->64 [style = solid, label="desc3"];
23->35 [style = bold, label=""];
8->17 [style = bold, label=""];
5->57 [style = bold, label=""];
9->37 [style = solid, label="desc2"];
9->21 [style = solid, label="desc2"];
41->30 [style = bold, label=""];
27->46 [style = bold, label=""];
66->2 [style = bold, label=""];
44->49 [style = solid, label="startPartitions"];
39->7 [style = bold, label=""];
36->37 [style = solid, label="desc1"];
53->68 [style = bold, label=""];
74->18 [style = solid, label="task"];
15->12 [style = bold, label=""];
49->24 [style = solid, label="task"];
34->4 [style = solid, label="task"];
58->55 [style = dotted, label="true"];
9->10 [style = solid, label="desc6"];
74->36 [style = solid, label="task"];
62->58 [style = solid, label="numToAdd"];
9->22 [style = solid, label="desc6"];
26->40 [style = dashed, label="0"];
29->11 [style = bold, label=""];
34->49 [style = dashed, label="0"];
49->4 [style = solid, label="task"];
73->52 [style = bold, label=""];
14->36 [style = bold, label=""];
38->5 [style = bold, label=""];
22->26 [style = bold, label=""];
2->48 [style = bold, label=""];
8->52 [style = solid, label="desc6"];
4->14 [style = bold, label=""];
72->55 [style = bold, label=""];
67->66 [style = bold, label=""];
14->22 [style = solid, label="desc4"];
35->15 [style = bold, label=""];
19->23 [style = solid, label="startPartitions"];
28->39 [style = bold, label=""];
7->49 [style = solid, label="consumerProps"];
5->74 [style = solid, label="baseSequenceName"];
12->20 [style = bold, label=""];
17->37 [style = solid, label="desc7"];
34->13 [style = solid, label="task"];
13->48 [style = bold, label=""];
25->47 [style = dashed, label="0"];
26->8 [style = bold, label=""];
26->37 [style = solid, label="desc5"];
27->56 [style = dashed, label="0"];
21->64 [style = bold, label=""];
48->6 [style = bold, label=""];
74->6 [style = bold, label=""];
53->68 [style = solid, label="i"];
54->55 [style = solid, label="i"];
68->53 [style = dotted, label="true"];
74->6 [style = solid, label="task"];
58->72 [style = bold, label=""];
9->18 [style = bold, label=""];
30->3 [style = bold, label=""];
23->46 [style = dashed, label="0"];
16->44 [style = bold, label=""];
24->22 [style = solid, label="desc2"];
36->22 [style = solid, label="desc5"];
71->59 [style = bold, label=""];
74->9 [style = solid, label="task"];
32->1 [style = bold, label=""];
69->53 [style = bold, label=""];
46->35 [style = bold, label=""];
74->8 [style = solid, label="task"];
27->75 [style = bold, label=""];
31->2 [style = dotted, label="true"];
47->45 [style = bold, label=""];
30->0 [style = bold, label=""];
20->22 [style = solid, label="desc1"];
15->56 [style = bold, label=""];
1->38 [style = dotted, label="true"];
22->40 [style = bold, label=""];
70->65 [style = dotted, label="true"];
34->20 [style = solid, label="task"];
35->70 [style = bold, label=""];
27->61 [style = solid, label="currentOffsets"];
60->53 [style = solid, label="i"];
22->73 [style = solid, label="desc4"];
34->24 [style = solid, label="task"];
65->70 [style = bold, label=""];
36->33 [style = solid, label="desc5"];
49->18 [style = solid, label="task"];
57->50 [style = bold, label=""];
52->76 [style = bold, label=""];
34->20 [style = solid, label="startPartitions"];
0->27 [style = bold, label=""];
49->36 [style = solid, label="task"];
34->13 [style = bold, label=""];
71->51 [style = solid, label="nextOffsets"];
44->46 [style = solid, label="startPartitions"];
74->26 [style = solid, label="task"];
33->10 [style = bold, label=""];
48->2 [style = dotted, label="true"];
5->34 [style = solid, label="baseSequenceName"];
74->17 [style = solid, label="task"];
6->3 [style = solid, label="currentOffsets"];
19->44 [style = dashed, label="0"];
49->13 [style = solid, label="task"];
24->4 [style = bold, label=""];
11->34 [style = bold, label=""];
54->58 [style = solid, label="i"];
58->29 [style = bold, label=""];
20->8 [style = solid, label="desc1"];
70->60 [style = bold, label=""];
68->71 [style = bold, label=""];
29->74 [style = solid, label="consumerProps"];
58->72 [style = dotted, label="true"];
43->49 [style = bold, label=""];
27->23 [style = bold, label=""];
34->14 [style = solid, label="task"];
56->20 [style = bold, label=""];
51->15 [style = bold, label=""];
49->20 [style = solid, label="task"];
27->75 [style = solid, label="currentOffsets"];
20->24 [style = bold, label=""];
34->36 [style = solid, label="task"];
71->61 [style = solid, label="nextOffsets"];
55->58 [style = bold, label=""];
36->10 [style = solid, label="desc1"];
40->8 [style = bold, label=""];
}
