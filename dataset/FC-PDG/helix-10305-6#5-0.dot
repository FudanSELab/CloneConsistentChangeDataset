digraph {
31 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentAssignmentCount(),4)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "AssignableReplica addingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"SLAVE\",2)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "expectedCapacityMap.put(\"item2\",8)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Map<String,Set<String>> expectedAssignment = new HashMap<>()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testDefaultInstanceCapacity['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentAssignmentsMap().equals(expectedAssignment))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),11.0 / 20.0,0.005)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentAssignmentCount(),4)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "expectedCapacityMap.put(\"item2\",8)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testDefaultInstanceCapacity['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "Map<String,Integer> expectedCapacityMap = new HashMap<>()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertTrue(assignableNode.getDisabledPartitionsMap().equals(_disabledPartitionsMap))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentAssignmentsMap().equals(expectedAssignment))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentAssignmentsMap().equals(expectedAssignment))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Set<AssignableReplica> assignmentSet = generateReplicas(testCache)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Set<String> expectedAssignmentSet2 = new HashSet<>(_partitionNames.subList(2,4))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "expectedCapacityMap.put(\"item1\",4)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Assert.assertTrue(assignableNode.getDisabledPartitionsMap().equals(_disabledPartitionsMap))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "AssignableNode assignableNode = new AssignableNode(testClusterConfig,testInstanceConfig,_testInstanceId,Collections.emptyList())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).remove(_partitionNames.get(2))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "expectedCapacityMap.put(\"item1\",9)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ClusterConfig testClusterConfig = new ClusterConfig(\"testClusterConfigId\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),16.0 / 20.0,0.005)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentCapacity().equals(expectedCapacityMap))@@@51@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(assignableNode.getMaxCapacity().equals(_capacityDataMap))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Set<String> expectedAssignmentSet1 = new HashSet<>(_partitionNames.subList(0,2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertTrue(assignableNode.getMaxCapacity().equals(_capacityDataMap))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "ResourceControllerDataProvider testCache = setupClusterDataCache()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),16.0 / 20.0,0.005)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertTrue(assignableNode.getDisabledPartitionsMap().equals(_disabledPartitionsMap))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "expectedCapacityMap.put(\"item3\",30)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentAssignmentCount(),3)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "InstanceConfig testInstanceConfig = new InstanceConfig(\"testInstanceConfigId\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(assignableNode.getMaxCapacity().equals(_capacityDataMap))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "AssignableNode assignableNode = new AssignableNode(testCache.getClusterConfig(),testCache.getInstanceConfigMap().get(_testInstanceId),_testInstanceId,assignmentSet)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentCapacity().equals(expectedCapacityMap))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "expectedCapacityMap.put(\"item2\",18)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "expectedAssignment.put(\"Resource2\",expectedAssignmentSet2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "AssignableNode assignableNode = new AssignableNode(testClusterConfig,testInstanceConfig,_testInstanceId)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assignableNode.release(removingReplica)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testClusterConfig.setDefaultInstanceCapacityMap(_capacityDataMap)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "AssignableReplica removingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"MASTER\",1)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expectedCapacityMap.put(\"item1\",4)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assignableNode.assign(addingReplica)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expectedAssignment.put(\"Resource1\",expectedAssignmentSet1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentCapacity().equals(expectedCapacityMap))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testNormalUsage['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).add(_partitionNames.get(2))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
23->31 [style = bold, label=""];
18->24 [style = bold, label=""];
7->1 [style = bold, label=""];
26->32 [style = bold, label=""];
28->10 [style = bold, label=""];
15->14 [style = bold, label=""];
57->51 [style = bold, label=""];
9->33 [style = bold, label=""];
25->45 [style = bold, label=""];
21->27 [style = solid, label="assignmentSet"];
8->18 [style = bold, label=""];
41->12 [style = solid, label="expectedAssignmentSet1"];
16->45 [style = solid, label="expectedAssignment"];
4->7 [style = solid, label="testInstanceConfig"];
51->9 [style = bold, label=""];
37->25 [style = bold, label=""];
49->44 [style = bold, label=""];
12->57 [style = bold, label=""];
21->41 [style = bold, label=""];
10->53 [style = bold, label=""];
42->47 [style = bold, label=""];
4->5 [style = solid, label="testInstanceConfig"];
6->0 [style = bold, label=""];
55->38 [style = bold, label=""];
51->22 [style = solid, label="expectedCapacityMap"];
29->49 [style = bold, label=""];
14->56 [style = bold, label=""];
52->13 [style = bold, label=""];
34->50 [style = bold, label=""];
45->48 [style = bold, label=""];
54->22 [style = bold, label=""];
3->4 [style = bold, label=""];
39->28 [style = bold, label=""];
4->7 [style = bold, label=""];
43->46 [style = bold, label=""];
19->8 [style = bold, label=""];
24->54 [style = bold, label=""];
31->11 [style = bold, label=""];
11->35 [style = bold, label=""];
51->32 [style = solid, label="expectedCapacityMap"];
0->5 [style = solid, label="testClusterConfig"];
5->1 [style = bold, label=""];
16->15 [style = solid, label="expectedAssignment"];
29->13 [style = solid, label="addingReplica"];
41->30 [style = bold, label=""];
2->0 [style = bold, label=""];
16->20 [style = solid, label="expectedAssignment"];
33->40 [style = bold, label=""];
40->27 [style = bold, label=""];
42->25 [style = solid, label="removingReplica"];
17->39 [style = bold, label=""];
48->55 [style = bold, label=""];
30->57 [style = solid, label="expectedAssignmentSet2"];
44->52 [style = bold, label=""];
56->23 [style = bold, label=""];
20->43 [style = bold, label=""];
46->19 [style = bold, label=""];
50->21 [style = solid, label="testCache"];
51->53 [style = solid, label="expectedCapacityMap"];
36->37 [style = bold, label=""];
13->15 [style = bold, label=""];
5->7 [style = dashed, label="0"];
50->21 [style = bold, label=""];
30->16 [style = bold, label=""];
38->17 [style = bold, label=""];
4->5 [style = bold, label=""];
16->12 [style = bold, label=""];
27->20 [style = bold, label=""];
47->36 [style = bold, label=""];
35->26 [style = bold, label=""];
0->7 [style = solid, label="testClusterConfig"];
53->29 [style = bold, label=""];
22->42 [style = bold, label=""];
}
