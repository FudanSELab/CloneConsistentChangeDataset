digraph {
8 [style = filled, label = "String allocId2 = randomAlphaOfLength(10)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String allocId1 = randomAlphaOfLength(10)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testRestoreThrottle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(),equalTo(1))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testShardLockObtainFailedExceptionPreferOtherValidCopies['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "testAllocator.allocateUnassigned(allocation)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(),equalTo(node2.getId()))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertClusterHealthStatus(allocation,ClusterHealthStatus.YELLOW)@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testShardLockObtainFailedExceptionPreferOtherValidCopies['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(allocation.routingNodes().unassigned().ignored().isEmpty(),equalTo(true))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(allocation.routingNodesChanged(),equalTo(true))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(allocation.routingNodes().unassigned().ignored().isEmpty(),equalTo(false))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertClusterHealthStatus(allocation,ClusterHealthStatus.YELLOW)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).allocationId().getId(),equalTo(allocId2))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testAllocator.addData(node1,allocId1,randomBoolean(),new ShardLockObtainFailedException(shardId,\"test\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testAllocator.allocateUnassigned(allocation)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testAllocator.addData(node2,allocId2,randomBoolean(),null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final RoutingAllocation allocation = routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders(),CLUSTER_RECOVERED,allocId1,allocId2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testAllocator.addData(node1,\"some allocId\",randomBoolean())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(allocation.routingNodesChanged(),equalTo(true))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "RoutingAllocation allocation = getRestoreRoutingAllocation(throttleAllocationDeciders(),\"allocId\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->10 [style = bold, label=""];
1->4 [style = bold, label=""];
2->13 [style = solid, label="allocId1"];
2->3 [style = solid, label="allocId1"];
4->6 [style = bold, label=""];
9->2 [style = bold, label=""];
15->21 [style = solid, label="allocation"];
19->20 [style = bold, label=""];
0->12 [style = bold, label=""];
18->15 [style = bold, label=""];
3->11 [style = bold, label=""];
10->3 [style = bold, label=""];
8->13 [style = solid, label="allocId2"];
15->16 [style = bold, label=""];
12->1 [style = bold, label=""];
8->6 [style = solid, label="allocId2"];
17->19 [style = bold, label=""];
11->5 [style = bold, label=""];
8->11 [style = solid, label="allocId2"];
15->20 [style = solid, label="allocation"];
12->19 [style = dashed, label="0"];
13->3 [style = bold, label=""];
5->0 [style = bold, label=""];
13->7 [style = solid, label="allocation"];
16->21 [style = bold, label=""];
13->5 [style = solid, label="allocation"];
14->2 [style = bold, label=""];
6->7 [style = bold, label=""];
21->17 [style = bold, label=""];
8->13 [style = bold, label=""];
2->8 [style = bold, label=""];
}
