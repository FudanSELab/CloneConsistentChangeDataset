digraph {
3 [style = filled, label = "assertTrue(result instanceof IterMergedRel)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue((child instanceof AltTraitConverter) || (child instanceof PhysToIteratorConverter))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(ALT_TRAIT2,child.getTraitSet().getTrait(ALT_TRAIT_DEF))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "planner.addRelTraitDef(ALT_TRAIT_DEF)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "NoneSingleRel noneRel = RelOptUtil.addTrait(new NoneSingleRel(cluster,noneLeafRel),ALT_TRAIT2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue((child instanceof AltTraitConverter) || (child instanceof PhysToIteratorConverter))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "planner.addRule(IterSinglePhysMergeRule.INSTANCE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertTrue(result instanceof IterSingleRel)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "RelOptCluster cluster = newCluster(planner)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "planner.addRule(new IterSinglePhysMergeRule())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "planner.addRule(new PhysLeafRule())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "NoneLeafRel noneLeafRel = RelOptUtil.addTrait(new NoneLeafRel(cluster,\"noneLeafRel\"),ALT_TRAIT)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "NoneSingleRel noneRel = RelOptUtil.addTrait(new NoneSingleRel(cluster,noneLeafRel),ALT_EMPTY_TRAIT)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testRuleMatchAfterConversion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "planner.addRule(PhysLeafRule.INSTANCE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "testTraitPropagation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "RelNode convertedRel = planner.changeTraits(noneRel,cluster.traitSetOf(EnumerableConvention.INSTANCE).replace(ALT_TRAIT2))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "VolcanoPlanner planner = new VolcanoPlanner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "planner.addRule(new IterSingleRule2())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "planner.setRoot(convertedRel)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "child = child.getInputs().get(0)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertTrue(child instanceof IterSingleRel)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "RelNode convertedRel = planner.changeTraits(noneRel,cluster.traitSetOf(EnumerableConvention.INSTANCE).replace(ALT_EMPTY_TRAIT))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "child = child.getInputs().get(0)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(EnumerableConvention.INSTANCE,result.getTraitSet().getTrait(ConventionTraitDef.INSTANCE))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "planner.addRelTraitDef(ConventionTraitDef.INSTANCE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "planner.addRule(IterSingleRule.INSTANCE)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "planner.addRule(PhysToIteratorConverterRule.INSTANCE)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertEquals(ALT_TRAIT2,result.getTraitSet().getTrait(ALT_TRAIT_DEF))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "RelNode child = result.getInputs().get(0)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "planner.addRule(new IterSingleRule())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "child = child.getInputs().get(0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "planner.addRule(new PhysToIteratorConverterRule())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testRuleMatchAfterConversion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "planner.addRule(new AltTraitConverterRule(ALT_TRAIT,ALT_TRAIT2,\"AltToAlt2ConverterRule\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "RelNode result = planner.chooseDelegate().findBestExp()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertTrue(child instanceof PhysLeafRel)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(EnumerableConvention.INSTANCE,child.getTraitSet().getTrait(ConventionTraitDef.INSTANCE))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->22 [style = bold, label=""];
8->10 [style = bold, label=""];
21->10 [style = bold, label=""];
4->14 [style = bold, label=""];
33->35 [style = bold, label=""];
16->18 [style = bold, label=""];
34->9 [style = bold, label=""];
23->20 [style = bold, label=""];
32->37 [style = bold, label=""];
12->7 [style = solid, label="noneRel"];
3->2 [style = dashed, label="0"];
25->34 [style = bold, label=""];
32->37 [style = solid, label="child"];
9->2 [style = bold, label=""];
0->12 [style = bold, label=""];
2->3 [style = bold, label=""];
24->32 [style = bold, label=""];
1->19 [style = dashed, label="0"];
9->2 [style = solid, label="result"];
18->19 [style = bold, label=""];
22->29 [style = bold, label=""];
14->17 [style = bold, label=""];
7->9 [style = solid, label="convertedRel"];
6->0 [style = bold, label=""];
36->26 [style = bold, label=""];
19->6 [style = bold, label=""];
29->6 [style = solid, label="cluster"];
12->7 [style = bold, label=""];
13->1 [style = bold, label=""];
15->5 [style = bold, label=""];
26->30 [style = bold, label=""];
20->24 [style = solid, label="child"];
7->9 [style = bold, label=""];
6->12 [style = solid, label="cluster"];
11->5 [style = bold, label=""];
29->6 [style = bold, label=""];
1->6 [style = bold, label=""];
30->28 [style = bold, label=""];
0->12 [style = solid, label="noneLeafRel"];
10->13 [style = bold, label=""];
0->25 [style = bold, label=""];
28->23 [style = bold, label=""];
31->33 [style = bold, label=""];
5->4 [style = bold, label=""];
0->25 [style = solid, label="noneRel"];
7->25 [style = dashed, label="0"];
8->21 [style = bold, label=""];
5->6 [style = solid, label="planner"];
28->23 [style = solid, label="child"];
8->17 [style = dashed, label="0"];
5->29 [style = solid, label="planner"];
25->34 [style = solid, label="convertedRel"];
14->8 [style = bold, label=""];
12->0 [style = dashed, label="0"];
10->16 [style = dashed, label="0"];
27->5 [style = bold, label=""];
35->36 [style = bold, label=""];
13->18 [style = dashed, label="0"];
29->0 [style = solid, label="cluster"];
20->24 [style = bold, label=""];
6->0 [style = solid, label="noneLeafRel"];
35->36 [style = solid, label="child"];
2->3 [style = solid, label="result"];
13->22 [style = dashed, label="0"];
17->16 [style = bold, label=""];
6->0 [style = solid, label="cluster"];
2->31 [style = bold, label=""];
}
