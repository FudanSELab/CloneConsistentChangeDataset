digraph {
5 [style = filled, label = "IndexableField sourceField = doc.rootDoc().getField(\"_source\")@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(sourceAsMap.containsKey(\"path2\"),equalTo(false))@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertThat(sourceAsMap.containsKey(\"path1\"),equalTo(true))@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(sourceAsMap.containsKey(\"path2\"),equalTo(true))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "sourceAsMap = parser.map()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"_source\").array(\"includes\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1482f98).endObject().endObject().endObject())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertThat(sourceAsMap.containsKey(\"path1\"),equalTo(false))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ParsedDocument doc = documentMapper.parse(source(null))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "sourceAsMap = parser.map()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DocumentMapper documentMapper = createDocumentMapper(topMapping(null))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Map<String,Object> sourceAsMap@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testIncludes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testExcludes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "DocumentMapper documentMapper = createIndex(\"test\").mapperService().parse(\"type\",new CompressedXContent(mapping))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testIncludes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"_source\").array(\"excludes\",\"path1*\").endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(sourceAsMap.containsKey(\"path1\"),equalTo(true))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "IndexableField sourceField = doc.rootDoc().getField(\"_source\")@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject(\"path1\").field(\"field1\",\"value1\").endObject().startObject(\"path2\").field(\"field2\",\"value2\").endObject().endObject()),XContentType.JSON))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Map<String,Object> sourceAsMap@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1->5 [style = bold, label=""];
0->6 [style = bold, label=""];
6->18 [style = bold, label=""];
2->3 [style = bold, label=""];
17->4 [style = bold, label=""];
19->16 [style = solid, label="mapping"];
1->0 [style = bold, label=""];
16->17 [style = bold, label=""];
15->19 [style = bold, label=""];
7->8 [style = bold, label=""];
3->13 [style = dashed, label="0"];
3->4 [style = bold, label=""];
19->16 [style = bold, label=""];
3->19 [style = dashed, label="0"];
7->6 [style = dashed, label="0"];
0->10 [style = bold, label=""];
14->0 [style = bold, label=""];
5->0 [style = bold, label=""];
3->4 [style = solid, label="mapping"];
11->8 [style = bold, label=""];
8->18 [style = dashed, label="0"];
4->1 [style = bold, label=""];
6->7 [style = bold, label=""];
13->14 [style = bold, label=""];
8->12 [style = bold, label=""];
9->13 [style = bold, label=""];
10->11 [style = bold, label=""];
}
