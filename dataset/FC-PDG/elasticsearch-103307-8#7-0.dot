digraph {
34 [style = filled, label = "testExpandedTerms['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME,\"abc\")),query)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "query = new QueryStringQueryBuilder(\"(aBc TO BcD(\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createSearchExecutionContext())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "query = new QueryStringQueryBuilder(\"(aBc TO BcD(\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createSearchExecutionContext())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(new Term(TEXT_FIELD_NAME,\"abc\"),fuzzyQuery.getTerm())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(new WildcardQuery(new Term(TEXT_FIELD_NAME,\"aBc*D\")),query)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Query query = new SimpleQueryStringBuilder(\"aBc*\").field(TEXT_FIELD_NAME).analyzer(\"whitespace\").toQuery(createShardContext())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "FuzzyQuery expected = new FuzzyQuery(new Term(TEXT_FIELD_NAME,\"aBc\"),1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "query = new QueryStringQueryBuilder(\"(aBc TO BcD(\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*D\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*D\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createSearchExecutionContext())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "testExpandedTerms['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "query = new SimpleQueryStringBuilder(\"aBc~1\").field(TEXT_FIELD_NAME).analyzer(\"whitespace\").toQuery(createShardContext())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "fuzzyQuery = (FuzzyQuery)query@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*D\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createSearchExecutionContext())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "query = new SimpleQueryStringBuilder(\"aBc~1\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(new TermRangeQuery(TEXT_FIELD_NAME,new BytesRef(\"abc\"),new BytesRef(\"bcd\"),true,true),query)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc~1\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createSearchExecutionContext())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "query = new QueryStringQueryBuilder(\"(aBc TO BcD(\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "FuzzyQuery fuzzyQuery = (FuzzyQuery)query@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(new WildcardQuery(new Term(TEXT_FIELD_NAME,\"abc*d\")),query)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testExpandedTerms['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(expected,query)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "query = new SimpleQueryStringBuilder(\"aBc*\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "expected = new FuzzyQuery(new Term(TEXT_FIELD_NAME,\"abc\"),1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(new Term(TEXT_FIELD_NAME,\"aBc\"),fuzzyQuery.getTerm())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(expected,query)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc~1\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createSearchExecutionContext())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*D\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(new TermRangeQuery(TEXT_FIELD_NAME,new BytesRef(\"aBc\"),new BytesRef(\"BcD\"),true,true),query)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc~1\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Query query = new QueryStringQueryBuilder(\"aBc*\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createSearchExecutionContext())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc~1\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME,\"aBc\")),query)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Query query = new QueryStringQueryBuilder(\"aBc*\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createSearchExecutionContext())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->9 [style = bold, label=""];
17->25 [style = bold, label=""];
21->10 [style = bold, label=""];
15->13 [style = bold, label=""];
7->17 [style = bold, label=""];
30->13 [style = bold, label=""];
31->33 [style = solid, label="query"];
8->23 [style = bold, label=""];
26->13 [style = solid, label="query"];
7->31 [style = dashed, label="0"];
19->12 [style = bold, label=""];
19->12 [style = solid, label="query"];
8->18 [style = bold, label=""];
36->29 [style = bold, label=""];
25->4 [style = solid, label="query"];
16->24 [style = bold, label=""];
7->17 [style = solid, label="query"];
17->35 [style = dashed, label="0"];
35->33 [style = bold, label=""];
4->21 [style = bold, label=""];
15->30 [style = dashed, label="0"];
25->4 [style = bold, label=""];
35->33 [style = solid, label="expected"];
18->2 [style = solid, label="query"];
5->15 [style = bold, label=""];
11->12 [style = bold, label=""];
36->32 [style = solid, label="query"];
6->0 [style = bold, label=""];
12->31 [style = bold, label=""];
9->10 [style = bold, label=""];
28->12 [style = bold, label=""];
28->12 [style = solid, label="query"];
18->2 [style = bold, label=""];
0->20 [style = dashed, label="0"];
13->11 [style = bold, label=""];
3->4 [style = bold, label=""];
30->13 [style = solid, label="query"];
12->7 [style = bold, label=""];
3->4 [style = solid, label="query"];
26->13 [style = bold, label=""];
34->30 [style = bold, label=""];
24->14 [style = bold, label=""];
6->20 [style = bold, label=""];
11->28 [style = dashed, label="0"];
13->19 [style = bold, label=""];
20->8 [style = bold, label=""];
15->13 [style = solid, label="query"];
27->26 [style = bold, label=""];
31->35 [style = bold, label=""];
10->16 [style = bold, label=""];
4->36 [style = dashed, label="0"];
11->12 [style = solid, label="query"];
16->1 [style = bold, label=""];
11->19 [style = dashed, label="0"];
9->21 [style = dashed, label="0"];
29->32 [style = solid, label="expected"];
1->24 [style = dashed, label="0"];
29->32 [style = bold, label=""];
0->8 [style = solid, label="query"];
9->10 [style = solid, label="query"];
33->36 [style = bold, label=""];
18->23 [style = dashed, label="0"];
0->8 [style = bold, label=""];
21->10 [style = solid, label="query"];
17->3 [style = bold, label=""];
22->17 [style = solid, label="query"];
24->14 [style = solid, label="query"];
23->2 [style = solid, label="query"];
22->17 [style = bold, label=""];
15->26 [style = dashed, label="0"];
1->14 [style = solid, label="query"];
1->14 [style = bold, label=""];
23->2 [style = bold, label=""];
7->22 [style = dashed, label="0"];
14->6 [style = bold, label=""];
12->22 [style = bold, label=""];
13->28 [style = bold, label=""];
20->8 [style = solid, label="query"];
3->25 [style = dashed, label="0"];
}
