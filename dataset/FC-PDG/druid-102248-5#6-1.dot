digraph {
8 [style = filled, label = "verifyAll()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(httpClient.go(EasyMock.capture(captured),EasyMock.anyObject(),EasyMock.eq(TEST_HTTP_TIMEOUT))).andReturn(Futures.immediateFuture(responseHolder)).times(numRequests)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "i++@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expect(responseHolder.getContent()).andReturn(String.valueOf(now.getMillis())).anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testGetStartTimeAsync['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<ListenableFuture<DateTime>> futures = new ArrayList<>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expectedUrls.add(new URL(StringUtils.format(URL_FORMATTER,TEST_HOST,TEST_PORT,testId,\"time/start\")))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.expect(httpClient.go(EasyMock.capture(captured),EasyMock.anyObject(),EasyMock.eq(TEST_HTTP_TIMEOUT))).andReturn(Futures.immediateFuture(responseHolder)).times(numRequests)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i < numRequests@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<Request> requests = captured.getValues()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(HttpMethod.GET,requests.get(i).getMethod())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(now,responses.get(i))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int i = 0@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "EasyMock.expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "futures.add(client.getStartTimeAsync(testId))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testGetStartTimeAsync['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<DateTime> responses = Futures.allAsList(futures).get()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testGetStartTimeAsync['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "final int numRequests = TEST_IDS.size()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(\"unexpectedURL\",expectedUrls.contains(requests.get(i).getUrl()))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final DateTime now = DateTimes.nowUtc()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "replayAll()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Capture<Request> captured = Capture.newInstance(CaptureType.ALL)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "List<URL> expectedUrls = new ArrayList<>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(numRequests,requests.size())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(numRequests,responses.size())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
9->14 [style = solid, label="i"];
22->2 [style = bold, label=""];
18->23 [style = bold, label=""];
14->12 [style = dotted, label="true"];
11->14 [style = bold, label=""];
6->21 [style = bold, label=""];
1->15 [style = solid, label="numRequests"];
8->3 [style = bold, label=""];
9->12 [style = solid, label="i"];
18->19 [style = bold, label=""];
1->20 [style = solid, label="numRequests"];
25->4 [style = bold, label=""];
11->9 [style = solid, label="i"];
19->6 [style = bold, label=""];
12->9 [style = bold, label=""];
1->13 [style = bold, label=""];
1->14 [style = solid, label="numRequests"];
14->16 [style = dotted, label="true"];
13->17 [style = bold, label=""];
3->20 [style = bold, label=""];
24->4 [style = bold, label=""];
1->19 [style = solid, label="numRequests"];
1->23 [style = solid, label="numRequests"];
22->0 [style = bold, label=""];
15->11 [style = bold, label=""];
11->12 [style = solid, label="i"];
14->5 [style = dotted, label="true"];
5->12 [style = bold, label=""];
19->23 [style = dashed, label="0"];
7->2 [style = bold, label=""];
23->6 [style = bold, label=""];
0->8 [style = bold, label=""];
11->14 [style = solid, label="i"];
9->14 [style = bold, label=""];
10->4 [style = bold, label=""];
16->5 [style = bold, label=""];
21->7 [style = bold, label=""];
4->12 [style = solid, label="now"];
4->1 [style = bold, label=""];
14->9 [style = dotted, label="true"];
2->22 [style = bold, label=""];
20->15 [style = bold, label=""];
17->18 [style = bold, label=""];
}
