digraph {
16 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "dagManager.addDag(dag,true)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "jobConfig = jobConfig.withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME,ConfigValueFactory.fromAnyRef(\"7\")).withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME_UNIT,ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testOrphanFlowKill['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String dagId = DagManagerUtils.generateDagId(dag)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testOrphanFlowKill['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(dagManager.dagManagerThreads(queue(.dagToSLA.get(dagId).longValue(),TimeUnit.SECONDS.toMillis(7L))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String dagId = DagManagerUtils.generateDagId(dag)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag),ERROR_MESSAGE)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\",flowExecutionId,\"FINISH_RUNNING\",1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testFlowSlaWithConfig['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\",234567891L,\"FINISH_RUNNING\",1)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int queue = DagManagerUtils.getDagQueueId(dag,dagNumThreads)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"),eq(\"group4\"),anyInt())).thenReturn(Collections.singletonList(flowExecutionId))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "jobConfig = jobConfig.withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME,ConfigValueFactory.fromAnyRef(\"7\")).withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT,ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "long flowExecutionId = System.currentTimeMillis()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18->10 [style = solid, label="jobConfig"];
4->14 [style = dashed, label="0"];
15->1 [style = bold, label=""];
21->22 [style = bold, label=""];
22->20 [style = solid, label="flowExecutionId"];
2->7 [style = bold, label=""];
1->8 [style = solid, label="dag"];
10->9 [style = bold, label=""];
1->12 [style = bold, label=""];
1->6 [style = solid, label="dag"];
20->8 [style = bold, label=""];
6->13 [style = bold, label=""];
14->0 [style = bold, label=""];
22->20 [style = bold, label=""];
11->6 [style = bold, label=""];
3->1 [style = bold, label=""];
7->14 [style = bold, label=""];
5->17 [style = bold, label=""];
0->10 [style = bold, label=""];
14->0 [style = solid, label="jobConfig"];
2->19 [style = dashed, label="0"];
4->0 [style = solid, label="jobConfig"];
2->19 [style = bold, label=""];
8->2 [style = bold, label=""];
1->10 [style = solid, label="dag"];
5->11 [style = bold, label=""];
7->4 [style = bold, label=""];
17->6 [style = bold, label=""];
13->16 [style = bold, label=""];
18->10 [style = bold, label=""];
1->12 [style = solid, label="dag"];
19->4 [style = bold, label=""];
4->18 [style = dashed, label="0"];
22->19 [style = solid, label="flowExecutionId"];
20->13 [style = solid, label="dag"];
20->9 [style = solid, label="dag"];
20->8 [style = solid, label="dag"];
12->8 [style = bold, label=""];
9->5 [style = bold, label=""];
20->2 [style = solid, label="dag"];
4->0 [style = bold, label=""];
4->18 [style = bold, label=""];
}
