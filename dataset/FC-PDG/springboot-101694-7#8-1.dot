digraph {
20 [style = filled, label = "Map<ConfigDataLocation,ConfigData> secondImported = new LinkedHashMap<>()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "List<String> secondLocations = Arrays.asList(\"secondimport\")@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Map<ConfigDataResource,ConfigData> initialImported = new LinkedHashMap<>()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "secondImported.put(new TestConfigDataLocation(\"b\"),new ConfigData(Arrays.asList(secondPropertySource)))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "this.importer = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MockPropertySource initialPropertySource = new MockPropertySource()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "initialImported.put(new TestConfigDataLocation(\"a\"),new ConfigData(Arrays.asList(initialPropertySource)))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Map<ConfigDataResource,ConfigData> secondImported = new LinkedHashMap<>()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "List<ConfigDataLocation> initialLocations = Arrays.asList(LOCATION_1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"initialimport\")@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.ROOT)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "List<ConfigDataLocation> secondLocations = Arrays.asList(LOCATION_2)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "verify(this.importer).resolveAndLoad(any(),this.locationResolverContext.capture(),any(),eq(secondLocations))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(iterator.hasNext()).isFalse()@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<String> initialLocations = Arrays.asList(\"initialimport\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "contributors.withProcessedImports(this.importer,this.activationContext)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "ConfigDataEnvironmentContributors withProcessedImports = contributors.withProcessedImports(this.importer,this.activationContext)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "initialImported.put(new TestConfigDataResource(\"a\"),new ConfigData(Arrays.asList(initialPropertySource)))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "initialPropertySource.setProperty(\"spring.config.import\",\"secondimport\")@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "withProcessedImportsProvidesLocationResolverContextWithAccessToParent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "withProcessedImportsResolvesAndLoadsChainedImports['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(secondPropertySource)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(initialPropertySource)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,this.bootstrapContext,Arrays.asList(contributor))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "ConfigDataLocationResolverContext context = this.locationResolverContext.getValue()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "initialPropertySource.setProperty(\"spring.config.import\",\"location2\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(secondLocations))).willReturn(secondImported)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(context.getParent()).hasToString(\"a\")@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Iterator<ConfigDataEnvironmentContributor> iterator = withProcessedImports.iterator()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "secondImported.put(new TestConfigDataResource(\"b\"),new ConfigData(Arrays.asList(secondPropertySource)))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "MockPropertySource secondPropertySource = new MockPropertySource()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(initialLocations))).willReturn(initialImported)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "withProcessedImportsResolvesAndLoadsChainedImports['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.INITIAL_IMPORT)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Map<ConfigDataLocation,ConfigData> initialImported = new LinkedHashMap<>()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
4->9 [style = bold, label=""];
8->30 [style = bold, label=""];
6->33 [style = solid, label="importer"];
30->24 [style = bold, label=""];
7->12 [style = bold, label=""];
16->10 [style = bold, label=""];
6->23 [style = bold, label=""];
19->29 [style = bold, label=""];
19->20 [style = bold, label=""];
0->23 [style = dashed, label="0"];
18->27 [style = dashed, label="0"];
11->4 [style = bold, label=""];
15->24 [style = dashed, label="0"];
11->26 [style = dashed, label="0"];
5->26 [style = bold, label=""];
24->7 [style = solid, label="initialImported"];
3->6 [style = bold, label=""];
9->17 [style = bold, label=""];
26->4 [style = solid, label="contributor"];
6->0 [style = bold, label=""];
19->14 [style = solid, label="secondPropertySource"];
20->1 [style = bold, label=""];
15->7 [style = solid, label="initialImported"];
23->8 [style = bold, label=""];
25->6 [style = bold, label=""];
4->33 [style = bold, label=""];
26->4 [style = bold, label=""];
15->18 [style = bold, label=""];
22->5 [style = bold, label=""];
8->27 [style = solid, label="initialPropertySource"];
12->32 [style = solid, label="secondLocations"];
20->29 [style = dashed, label="0"];
19->1 [style = solid, label="secondPropertySource"];
1->22 [style = dashed, label="0"];
21->2 [style = bold, label=""];
9->33 [style = dashed, label="0"];
31->35 [style = bold, label=""];
7->28 [style = bold, label=""];
17->14 [style = bold, label=""];
20->5 [style = solid, label="secondImported"];
12->28 [style = dashed, label="0"];
27->7 [style = bold, label=""];
34->6 [style = bold, label=""];
0->8 [style = bold, label=""];
28->19 [style = bold, label=""];
11->4 [style = solid, label="contributor"];
33->32 [style = bold, label=""];
5->11 [style = bold, label=""];
13->15 [style = bold, label=""];
29->22 [style = bold, label=""];
6->9 [style = solid, label="importer"];
18->7 [style = bold, label=""];
12->19 [style = bold, label=""];
8->18 [style = solid, label="initialPropertySource"];
8->21 [style = solid, label="initialPropertySource"];
19->22 [style = solid, label="secondPropertySource"];
29->5 [style = solid, label="secondImported"];
24->27 [style = bold, label=""];
32->31 [style = bold, label=""];
14->21 [style = bold, label=""];
13->30 [style = dashed, label="0"];
8->13 [style = bold, label=""];
2->16 [style = bold, label=""];
}
