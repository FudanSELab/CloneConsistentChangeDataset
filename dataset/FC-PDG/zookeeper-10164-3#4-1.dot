digraph {
2 [style = filled, label = "multipleAddresses.addAddress(addresses.get(1))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(CollectionUtils.isEqualCollection(addresses,multipleAddresses.getAllAddresses()))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "multipleAddresses.addAddress(addresses.get(addresses.size() - 1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testGetAllAddresses['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testGetAllAddresses['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<InetSocketAddress> addresses = getAddressList()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(CollectionUtils.isEqualCollection(hostStrings,multipleAddresses.getAllHostStrings()))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "MultipleAddresses multipleAddresses = new MultipleAddresses(addresses)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(CollectionUtils.isEqualCollection(addresses,multipleAddresses.getAllAddresses()))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertTrue(CollectionUtils.isEqualCollection(hostStrings,multipleAddresses.getAllHostStrings()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testGetAllHostStrings['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertTrue(CollectionUtils.isEqualCollection(addresses,multipleAddresses.getAllAddresses()))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertTrue(CollectionUtils.isEqualCollection(addresses,multipleAddresses.getAllAddresses()))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "List<String> hostStrings = getHostStrings(addresses)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->9 [style = bold, label=""];
6->3 [style = bold, label=""];
3->10 [style = solid, label="addresses"];
3->0 [style = solid, label="addresses"];
0->2 [style = bold, label=""];
12->11 [style = bold, label=""];
1->3 [style = bold, label=""];
3->4 [style = solid, label="addresses"];
3->8 [style = solid, label="addresses"];
10->11 [style = solid, label="hostStrings"];
3->4 [style = bold, label=""];
4->7 [style = bold, label=""];
4->0 [style = bold, label=""];
3->10 [style = bold, label=""];
2->12 [style = dashed, label="0"];
13->3 [style = bold, label=""];
5->11 [style = dashed, label="0"];
7->2 [style = bold, label=""];
10->9 [style = solid, label="hostStrings"];
10->4 [style = bold, label=""];
5->8 [style = dashed, label="0"];
9->12 [style = bold, label=""];
0->9 [style = dashed, label="0"];
3->7 [style = solid, label="addresses"];
0->7 [style = dashed, label="0"];
3->5 [style = solid, label="addresses"];
2->8 [style = bold, label=""];
2->5 [style = bold, label=""];
}
