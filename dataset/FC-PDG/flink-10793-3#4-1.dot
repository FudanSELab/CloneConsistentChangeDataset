digraph {
11 [style = filled, label = "splits.add(split)@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final byte(( startKey = keys.getFirst()(i(@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final String(( hosts = new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b0820e@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "keys == null || keys.getFirst() == null || keys.getFirst().length == 0@@@6@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final List<TableInputSplit> splits = new ArrayList<>(minNumSplits)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final byte(( startRow = scan.getStartRow()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i < keys.getFirst().length@@@15@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final TableInputSplit split = new TableInputSplit(id,hosts,table.getTableName(),splitStart,splitStop)@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "initTable()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "throw new IOException(\"Expecting at least one region.\")@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "return splits.toArray(new TableInputSplit(((()@@@39@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final String regionLocation = table.getRegionLocator().getRegionLocation(startKey,false).getHostnamePort()@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "LOG.info(\"Created \" + splits.size() + \" splits\")@@@35@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "logSplitInfo(\"created\",split)@@@37@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final boolean scanWithNoLowerBound = startRow.length == 0@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final byte(( splitStart = scanWithNoLowerBound || Bytes.compareTo(startKey,startRow) >= 0? startKey: startRow@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final TableInputSplit split = new TableInputSplit(id,hosts,table.getName().getName(),splitStart,splitStop)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "(scanWithNoLowerBound || isLastRegion || Bytes.compareTo(startRow,endKey) < 0) && (scanWithNoUpperBound || Bytes.compareTo(stopRow,startKey) > 0)@@@27@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final byte(( splitStop = (scanWithNoUpperBound || Bytes.compareTo(endKey,stopRow) <= 0) && !isLastRegion? endKey: stopRow@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "boolean isLastRegion = endKey.length == 0@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "int i = 0@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final Pair<byte((((,byte((((> keys = regionLocator.getStartEndKeys()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "createInputSplits['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "i++@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final boolean scanWithNoUpperBound = stopRow.length == 0@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final byte(( stopRow = scan.getStopRow()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final int minNumSplits@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "createInputSplits['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "int id = splits.size()@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final byte(( endKey = keys.getSecond()(i(@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Pair<byte((((,byte((((> keys = table.getRegionLocator().getStartEndKeys()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "!includeRegionInScan(startKey,endKey)@@@20@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final String regionLocation = regionLocator.getRegionLocation(startKey,false).getHostnamePort()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "createInputSplits['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "{closeTable()}@@@41@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25->33 [style = solid, label="splitStop"];
0->5 [style = dotted, label="true"];
18->3 [style = solid, label="minNumSplits"];
34->4 [style = solid, label="keys"];
21->33 [style = solid, label="id"];
28->6 [style = solid, label="i"];
6->25 [style = solid, label="endKey"];
0->6 [style = dotted, label="true"];
27->20 [style = solid, label="splitStart"];
17->26 [style = solid, label="startKey"];
0->31 [style = dotted, label="true"];
28->0 [style = bold, label=""];
33->11 [style = bold, label=""];
23->18 [style = dotted, label="true"];
20->11 [style = solid, label="split"];
0->24 [style = dotted, label="true"];
33->12 [style = solid, label="split"];
14->9 [style = bold, label=""];
27->25 [style = bold, label=""];
25->21 [style = bold, label=""];
27->33 [style = solid, label="splitStart"];
28->0 [style = solid, label="i"];
5->10 [style = bold, label=""];
19->34 [style = bold, label=""];
33->11 [style = solid, label="split"];
28->17 [style = solid, label="i"];
0->10 [style = dotted, label="true"];
0->17 [style = bold, label=""];
24->0 [style = bold, label=""];
22->25 [style = solid, label="stopRow"];
26->20 [style = dotted, label="true"];
0->29 [style = bold, label=""];
31->1 [style = solid, label="regionLocation"];
26->24 [style = bold, label=""];
6->26 [style = solid, label="endKey"];
0->8 [style = dotted, label="true"];
16->34 [style = dashed, label="0"];
26->27 [style = bold, label=""];
8->26 [style = solid, label="isLastRegion"];
10->0 [style = bold, label=""];
2->27 [style = solid, label="scanWithNoLowerBound"];
13->15 [style = bold, label=""];
20->33 [style = dashed, label="0"];
0->26 [style = dotted, label="true"];
10->1 [style = bold, label=""];
24->17 [style = solid, label="i"];
9->22 [style = bold, label=""];
4->9 [style = bold, label=""];
1->33 [style = solid, label="hosts"];
4->14 [style = bold, label=""];
32->18 [style = dotted, label="true"];
1->8 [style = bold, label=""];
22->2 [style = bold, label=""];
26->33 [style = dotted, label="true"];
21->20 [style = solid, label="id"];
17->6 [style = bold, label=""];
26->27 [style = dotted, label="true"];
28->24 [style = solid, label="i"];
25->20 [style = solid, label="splitStop"];
32->19 [style = bold, label=""];
11->24 [style = bold, label=""];
19->16 [style = bold, label=""];
12->13 [style = bold, label=""];
6->5 [style = bold, label=""];
3->28 [style = bold, label=""];
31->10 [style = bold, label=""];
30->18 [style = dotted, label="true"];
23->19 [style = bold, label=""];
9->26 [style = solid, label="startRow"];
16->4 [style = solid, label="keys"];
5->31 [style = dashed, label="0"];
26->11 [style = dotted, label="true"];
16->4 [style = bold, label=""];
7->25 [style = solid, label="scanWithNoUpperBound"];
0->1 [style = dotted, label="true"];
20->11 [style = bold, label=""];
7->26 [style = solid, label="scanWithNoUpperBound"];
24->0 [style = solid, label="i"];
20->12 [style = solid, label="split"];
26->25 [style = dotted, label="true"];
21->33 [style = bold, label=""];
5->1 [style = solid, label="regionLocation"];
4->14 [style = dotted, label="true"];
7->3 [style = bold, label=""];
29->12 [style = bold, label=""];
9->27 [style = solid, label="startRow"];
17->27 [style = solid, label="startKey"];
21->20 [style = bold, label=""];
6->31 [style = bold, label=""];
26->21 [style = dotted, label="true"];
1->20 [style = solid, label="hosts"];
34->4 [style = bold, label=""];
0->17 [style = dotted, label="true"];
22->26 [style = solid, label="stopRow"];
2->7 [style = bold, label=""];
24->6 [style = solid, label="i"];
2->26 [style = solid, label="scanWithNoLowerBound"];
8->26 [style = bold, label=""];
}
