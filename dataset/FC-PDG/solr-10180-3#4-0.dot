digraph {
1 [style = filled, label = "!(first instanceof List)@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "numbers.add(d)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<Number> numbers = new ArrayList<>()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "doWork['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "@SuppressWarnings({\"unchecked\"}) double(( result = MathArrays.ebeDivide(((List)first).stream().mapToDouble(null).toArray(),((List)second).stream().mapToDouble(null).toArray())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory),first.getClass().getSimpleName()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Number> numbers = new ArrayList()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "null == first@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "double(( result = MathArrays.ebeMultiply(((List)first).stream().mapToDouble(null).toArray(),((List)second).stream().mapToDouble(null).toArray())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "null == second@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Object second@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "return numbers@@@22@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "return numbers@@@20@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Object second@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Object first@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "doWork['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "doWork['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory),first.getClass().getSimpleName()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Object second@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "double(( result = MathArrays.ebeDivide(((List)first).stream().mapToDouble(null).toArray(),((List)second).stream().mapToDouble(null).toArray())@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "!(second instanceof List)@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9->18 [style = bold, label=""];
14->5 [style = bold, label=""];
9->22 [style = bold, label=""];
11->9 [style = dotted, label="true"];
11->22 [style = bold, label=""];
5->8 [style = bold, label=""];
13->8 [style = solid, label="second"];
22->0 [style = bold, label=""];
20->5 [style = solid, label="first"];
4->11 [style = bold, label=""];
17->13 [style = dotted, label="true"];
11->9 [style = bold, label=""];
11->18 [style = bold, label=""];
5->12 [style = dotted, label="true"];
16->19 [style = solid, label="numbers"];
14->7 [style = dotted, label="true"];
6->19 [style = bold, label=""];
21->20 [style = dotted, label="true"];
8->3 [style = bold, label=""];
3->1 [style = bold, label=""];
1->11 [style = bold, label=""];
13->5 [style = solid, label="first"];
7->8 [style = solid, label="second"];
8->1 [style = bold, label=""];
17->15 [style = dotted, label="true"];
11->10 [style = bold, label=""];
14->13 [style = dotted, label="true"];
0->6 [style = solid, label="numbers"];
21->5 [style = bold, label=""];
18->16 [style = bold, label=""];
16->6 [style = bold, label=""];
1->4 [style = bold, label=""];
2->6 [style = bold, label=""];
15->8 [style = solid, label="second"];
5->12 [style = bold, label=""];
9->10 [style = bold, label=""];
8->3 [style = dotted, label="true"];
0->2 [style = bold, label=""];
12->8 [style = bold, label=""];
10->22 [style = dashed, label="0"];
1->4 [style = dotted, label="true"];
17->5 [style = bold, label=""];
10->0 [style = bold, label=""];
21->13 [style = dotted, label="true"];
}
