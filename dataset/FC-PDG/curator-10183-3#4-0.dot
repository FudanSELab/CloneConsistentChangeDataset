digraph {
1 [style = filled, label = "queueHandles(i( = new SimpleDistributedQueue(clients(i(,dir)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "CuratorFramework clients = null@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "{closeAll(clients)}@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "clients = new CuratorFramework((((@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "clients(i(.start()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i++@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(new String(dequeuedBytes),testString)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final int num_clients = 1@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "i < clients.length@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int i = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "queueHandles(0(.offer(testString.getBytes())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "SimpleDistributedQueue queueHandles = new SimpleDistributedQueue((((@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "clients(i( = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "String testString = \"Hello World\"@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "{closeAll(clients)}@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testOffer1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertNull(queueHandles(0(.poll(3,TimeUnit.SECONDS))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testPollWithTimeout['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "String dir = \"/testOffer1\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "byte dequeuedBytes = queueHandles(0(.remove()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testPollWithTimeout['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertNull(queueHandles(0(.poll(3,TimeUnit.SECONDS))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7->13 [style = bold, label=""];
5->8 [style = bold, label=""];
20->17 [style = bold, label=""];
15->7 [style = bold, label=""];
6->5 [style = solid, label="i"];
13->1 [style = solid, label="dir"];
12->4 [style = solid, label="clients"];
5->1 [style = dotted, label="true"];
8->1 [style = solid, label="clients"];
19->11 [style = bold, label=""];
11->12 [style = bold, label=""];
5->18 [style = bold, label=""];
5->14 [style = bold, label=""];
12->17 [style = solid, label="clients"];
13->11 [style = bold, label=""];
10->6 [style = bold, label=""];
8->4 [style = solid, label="clients"];
0->14 [style = dashed, label="0"];
6->5 [style = bold, label=""];
13->19 [style = bold, label=""];
12->10 [style = bold, label=""];
8->17 [style = solid, label="clients"];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
0->4 [style = bold, label=""];
1->2 [style = solid, label="i"];
8->9 [style = bold, label=""];
21->7 [style = bold, label=""];
5->9 [style = dotted, label="true"];
0->18 [style = dashed, label="0"];
1->2 [style = bold, label=""];
19->20 [style = solid, label="testString"];
5->8 [style = dotted, label="true"];
9->1 [style = bold, label=""];
16->20 [style = solid, label="dequeuedBytes"];
16->20 [style = bold, label=""];
2->5 [style = solid, label="i"];
5->2 [style = dotted, label="true"];
2->5 [style = bold, label=""];
14->4 [style = bold, label=""];
18->16 [style = bold, label=""];
}
