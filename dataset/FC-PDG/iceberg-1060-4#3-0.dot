digraph {
16 [style = filled, label = "Schema schema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(1,\"data\",Types.StringType.get()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testRename['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testRename['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "int cmp = Comparators.charSequences().compare(\"test\",(CharSequence)projected.get(\"renamed\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "record.put(\"data\",\"test\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testFullProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertTrue(\"Should contain the correct data value\",cmp == 0)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Record projected = writeAndRead(\"full_projection\",schema,schema,record)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Record projected = writeAndRead(\"project_and_rename\",writeSchema,readSchema,record)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Schema readSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(1,\"renamed\",Types.StringType.get()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "record.put(\"id\",34L)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(\"Should contain the correct data/renamed value\",cmp == 0)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "int cmp = Comparators.charSequences().compare(\"test\",(CharSequence)projected.get(\"data\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(1,\"data\",Types.StringType.get()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Should contain the correct data/renamed value\",0,cmp)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(schema,\"table\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
4->3 [style = bold, label=""];
9->10 [style = dashed, label="0"];
1->9 [style = solid, label="cmp"];
3->0 [style = solid, label="readSchema"];
2->1 [style = bold, label=""];
7->16 [style = dashed, label="0"];
0->2 [style = bold, label=""];
4->15 [style = bold, label=""];
7->0 [style = solid, label="writeSchema"];
1->10 [style = solid, label="cmp"];
8->12 [style = dashed, label="0"];
8->6 [style = bold, label=""];
7->8 [style = bold, label=""];
12->6 [style = bold, label=""];
7->8 [style = solid, label="writeSchema"];
16->12 [style = solid, label="schema"];
1->9 [style = bold, label=""];
3->0 [style = bold, label=""];
2->13 [style = bold, label=""];
6->4 [style = bold, label=""];
15->17 [style = bold, label=""];
16->15 [style = solid, label="schema"];
17->2 [style = bold, label=""];
2->13 [style = solid, label="cmp"];
9->13 [style = dashed, label="0"];
5->7 [style = bold, label=""];
1->2 [style = dashed, label="0"];
12->15 [style = solid, label="record"];
1->10 [style = bold, label=""];
8->0 [style = solid, label="record"];
16->12 [style = bold, label=""];
11->7 [style = bold, label=""];
}
