digraph {
15 [style = filled, label = "final FieldCache cache = FieldCache.DEFAULT@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int NUM_THREADS = 3@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testGetDocsWithFieldThreadSafety['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Thread(( threads = new Thread((((@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final int NUM_ITER = 200 * RANDOM_MULTIPLIER@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final AtomicBoolean failed = new AtomicBoolean()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertFalse(failed.get())@@@71@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int threadIDX = 0@@@66@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int threadIDX = 0@@@62@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "threadIDX++@@@68@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testGetDocsWithFieldThreadSafety['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "threads(threadIDX(.join()@@@69@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final CyclicBarrier restart = new CyclicBarrier(NUM_THREADS,new Runnable(){@Override public void run(){cache.purgeAllCaches()iters.incrementAndGet()}})@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "cache.purgeAllCaches()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int threadIDX = 0@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "threads(threadIDX(.start()@@@64@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "threadIDX++@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertFalse(failed.get())@@@67@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final AtomicInteger iters = new AtomicInteger()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "threadIDX < NUM_THREADS@@@18@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "threadIDX < NUM_THREADS@@@67@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testGetDocsWithFieldThreadSafety['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "threads(threadIDX(.start()@@@60@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "threads(threadIDX( = new Thread(){@Override public void run(){try {while (!failed.get()) {final int op = random().nextInt(3)if (op == 0) {restart.await()if (iters.get() >= NUM_ITER) {break}}if (op == 1) {Bits docsWithField = cache.getDocsWithField(reader,\"sparse\",FieldCache.INT_POINT_PARSER)for (int i = 0 i < docsWithField.length() i++){assertEquals(i % 2 == 0,docsWithField.get(i))}}{NumericDocValues ints = cache.getNumerics(reader,\"sparse\",FieldCache.INT_POINT_PARSER,true)Bits docsWithField = cache.getDocsWithField(reader,\"sparse\",FieldCache.INT_POINT_PARSER)for (int i = 0 i < docsWithField.length() i++){if (i % 2 == 0) {assertTrue(docsWithField.get(i))assertEquals(i,ints.get(i))}{assertFalse(docsWithField.get(i))}}}}}catch (Throwable t) }}@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->1 [style = solid, label="threadIDX"];
18->13 [style = solid, label="threadIDX"];
6->18 [style = bold, label=""];
13->7 [style = bold, label=""];
0->4 [style = bold, label=""];
23->15 [style = bold, label=""];
1->11 [style = dotted, label="true"];
21->6 [style = solid, label="threadIDX"];
2->1 [style = solid, label="NUM_THREADS"];
7->18 [style = bold, label=""];
1->21 [style = bold, label=""];
21->13 [style = solid, label="threadIDX"];
13->6 [style = bold, label=""];
18->13 [style = bold, label=""];
0->11 [style = solid, label="NUM_ITER"];
6->13 [style = bold, label=""];
9->0 [style = bold, label=""];
22->15 [style = bold, label=""];
6->20 [style = bold, label=""];
1->6 [style = bold, label=""];
1->11 [style = bold, label=""];
2->6 [style = solid, label="NUM_THREADS"];
14->1 [style = bold, label=""];
19->16 [style = bold, label=""];
6->13 [style = dotted, label="true"];
8->2 [style = bold, label=""];
16->1 [style = bold, label=""];
13->18 [style = dotted, label="true"];
13->6 [style = solid, label="threadIDX"];
17->15 [style = bold, label=""];
1->5 [style = dotted, label="true"];
12->3 [style = bold, label=""];
11->19 [style = bold, label=""];
3->9 [style = bold, label=""];
6->13 [style = solid, label="threadIDX"];
6->18 [style = solid, label="threadIDX"];
1->19 [style = dotted, label="true"];
6->18 [style = dotted, label="true"];
4->14 [style = bold, label=""];
2->13 [style = solid, label="NUM_THREADS"];
2->4 [style = solid, label="NUM_THREADS"];
13->10 [style = bold, label=""];
15->8 [style = bold, label=""];
21->6 [style = bold, label=""];
13->7 [style = dotted, label="true"];
5->16 [style = bold, label=""];
16->1 [style = solid, label="threadIDX"];
11->16 [style = solid, label="threadIDX"];
2->12 [style = bold, label=""];
11->5 [style = bold, label=""];
1->16 [style = dotted, label="true"];
}
