digraph {
2 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testLinger['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "i < appends@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),record.key())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(batchSize + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10L * batchSize,CompressionType.NONE,10L,100L,metrics,time,new ApiVersions())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertEquals(1,batches.size())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Deque<ProducerBatch> partitionBatches = accum.batches().get(tp1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "i++@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "accum.append(tp1,0L,key,value,null,maxBlockTimeMs)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testLinger['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "int i = 0@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Iterator<Record> iter = batch.records().records().iterator()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(1024 + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10 * 1024,CompressionType.NONE,lingerMs,100L,metrics,time,new ApiVersions())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"No partitions should be ready.\",0,accum.ready(cluster,now).readyNodes.size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ProducerBatch batch = batches.get(0)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "int appends = expectedNumAppends(batchSize)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),record.value())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"No partitions should be ready\",0,accum.ready(cluster,time.milliseconds()).readyNodes.size())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "int i = 0@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "accum.append(tp1,0L,key,value,null,maxBlockTimeMs)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "accum.append(tp1,0L,key,value,null,maxBlockTimeMs)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "long lingerMs = 10L@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(1,partitionBatches.size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(partitionBatchesIterator.next().isWritable())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "long now = time.milliseconds()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "int batchSize = 1025@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(1024 + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10 * 1024,CompressionType.NONE,lingerMs,100L,metrics,time,new ApiVersions(),null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "ProducerBatch batch = partitionBatches.peekFirst()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Record record = iter.next()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Record record = iter.next()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Iterator<Record> iter = batch.records().records().iterator()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "i < appends@@@29@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "List<ProducerBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertFalse(partitionBatchesIterator.next().isWritable())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "time.sleep(10)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Deque<ProducerBatch> partitionBatches = accum.batches().get(tp1)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertEquals(2,partitionBatches.size())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Iterator<ProducerBatch> partitionBatchesIterator = partitionBatches.iterator()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testFull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),record.value())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),record.key())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ProducerBatch batch = batches.get(0)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<ProducerBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(batch.isWritable())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "i++@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->15 [style = dashed, label="0"];
13->10 [style = bold, label=""];
32->35 [style = bold, label=""];
34->18 [style = solid, label="i"];
24->6 [style = dotted, label="true"];
0->9 [style = bold, label=""];
16->13 [style = bold, label=""];
18->24 [style = bold, label=""];
31->22 [style = bold, label=""];
22->45 [style = bold, label=""];
25->22 [style = bold, label=""];
23->22 [style = solid, label="appends"];
13->15 [style = solid, label="lingerMs"];
24->17 [style = dotted, label="true"];
3->14 [style = bold, label=""];
4->13 [style = bold, label=""];
20->28 [style = bold, label=""];
22->25 [style = dotted, label="true"];
18->24 [style = solid, label="i"];
24->44 [style = dotted, label="true"];
40->25 [style = bold, label=""];
38->27 [style = bold, label=""];
47->29 [style = solid, label="batchSize"];
28->26 [style = bold, label=""];
26->43 [style = bold, label=""];
8->6 [style = bold, label=""];
19->36 [style = bold, label=""];
22->32 [style = bold, label=""];
22->40 [style = dotted, label="true"];
29->23 [style = bold, label=""];
31->25 [style = solid, label="i"];
30->37 [style = bold, label=""];
24->27 [style = dotted, label="true"];
12->1 [style = bold, label=""];
6->44 [style = bold, label=""];
36->20 [style = bold, label=""];
7->3 [style = bold, label=""];
44->38 [style = bold, label=""];
43->30 [style = bold, label=""];
47->23 [style = solid, label="batchSize"];
1->11 [style = bold, label=""];
47->29 [style = bold, label=""];
13->39 [style = dashed, label="0"];
35->40 [style = bold, label=""];
5->2 [style = bold, label=""];
24->38 [style = dotted, label="true"];
34->24 [style = bold, label=""];
23->24 [style = solid, label="appends"];
37->31 [style = bold, label=""];
33->42 [style = bold, label=""];
15->0 [style = bold, label=""];
14->12 [style = bold, label=""];
10->0 [style = bold, label=""];
46->33 [style = bold, label=""];
34->24 [style = solid, label="i"];
9->5 [style = bold, label=""];
23->34 [style = bold, label=""];
22->35 [style = dotted, label="true"];
39->47 [style = bold, label=""];
13->15 [style = bold, label=""];
42->19 [style = bold, label=""];
41->39 [style = bold, label=""];
6->7 [style = bold, label=""];
22->32 [style = dotted, label="true"];
24->6 [style = bold, label=""];
25->22 [style = solid, label="i"];
27->21 [style = bold, label=""];
13->10 [style = solid, label="lingerMs"];
31->22 [style = solid, label="i"];
21->17 [style = bold, label=""];
24->21 [style = dotted, label="true"];
24->46 [style = bold, label=""];
17->18 [style = bold, label=""];
24->18 [style = dotted, label="true"];
2->8 [style = bold, label=""];
}
