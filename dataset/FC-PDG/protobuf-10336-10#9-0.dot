digraph {
17 [style = filled, label = "testEqualsAndHashCode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TestMap m1 = TestMap.newBuilder().putInt32ToInt32Field(1,2).putInt32ToInt32Field(3,4).putInt32ToInt32Field(5,6).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertFalse(m1.equals(m2))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "m2 = b2.build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(m1.hashCode(),m2.hashCode())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "b2.putInt32ToInt32Field(1,0)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "b2.removeInt32ToInt32Field(1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "m2 = b2.build()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(m1.equals(m2)).isFalse()@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testEqualsAndHashCode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertFalse(m1.equals(m2))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TestMap m2 = b2.build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(m2).isEqualTo(m1)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testEqualsAndHashCode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(m2.hashCode()).isEqualTo(m1.hashCode())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertEquals(m1,m2)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertFalse(m2.equals(m1))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TestMap.Builder b2 = TestMap.newBuilder().putInt32ToInt32Field(5,6).putInt32ToInt32Field(1,2).putInt32ToInt32Field(3,4)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->0 [style = bold, label=""];
8->11 [style = dashed, label="0"];
7->8 [style = bold, label=""];
11->12 [style = bold, label=""];
4->12 [style = dashed, label="0"];
14->16 [style = bold, label=""];
8->4 [style = bold, label=""];
3->15 [style = solid, label="m1"];
2->5 [style = bold, label=""];
16->15 [style = bold, label=""];
17->3 [style = bold, label=""];
7->11 [style = bold, label=""];
10->3 [style = bold, label=""];
5->13 [style = bold, label=""];
3->1 [style = bold, label=""];
3->8 [style = solid, label="m1"];
2->9 [style = bold, label=""];
7->8 [style = solid, label="m2"];
6->3 [style = bold, label=""];
2->5 [style = solid, label="m2"];
1->7 [style = bold, label=""];
0->2 [style = bold, label=""];
13->14 [style = bold, label=""];
3->11 [style = solid, label="m1"];
5->9 [style = dashed, label="0"];
4->0 [style = bold, label=""];
14->16 [style = solid, label="m2"];
}
