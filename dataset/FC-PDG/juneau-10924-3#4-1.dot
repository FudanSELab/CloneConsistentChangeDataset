digraph {
34 [style = filled, label = "assertEquals(\"foo\",IOUtils.read(x.postX8(\"foo\").get()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(\"'foo'\",IOUtils.read(x.postX7(\"foo\").get()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "c01_returnTypes_json['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"foo\",x.postX9(\"foo\").get())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "d01_returnTypes_partSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(\"'foo'\",read(x.postX11(\"foo\").get()))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(\"foo\",x.postX1(\"foo\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"'foo'\",read(x.postX6(\"foo\").get().getEntity().getContent()))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(\"'foo'\",read(x.postX3(\"foo\")))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertEquals(\"foo\",IOUtils.read(x.postX3(\"foo\")))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"'foo'\",IOUtils.read(x.postX4(\"foo\")))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"'foo'\",IOUtils.read(x.postX11(\"foo\").get()))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "assertEquals(\"foo\",IOUtils.read(x.postX2(\"foo\").getEntity().getContent()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(\"foo\",IOUtils.read(x.postX11(\"foo\").get()))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(\"foo\",x.postX5(\"foo\").get())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"'foo'\",IOUtils.read(x.postX12(\"foo\").get()))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "C1 x = MockRestClient.buildJson().getRemote()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "c01_returnTypes_json['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "assertEquals(\"foo\",IOUtils.read(x.postX4(\"foo\")))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(\"'foo'\",read(x.postX10(\"foo\").get().getEntity().getContent()))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(\"foo\",IOUtils.read(x.postX10(\"foo\").get().getEntity().getContent()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"'foo'\",read(x.postX2(\"foo\").getEntity().getContent()))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(\"'foo'\",IOUtils.read(x.postX3(\"foo\")))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"'foo'\",IOUtils.read(x.postX2(\"foo\").getEntity().getContent()))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"'foo'\",read(x.postX4(\"foo\")))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "D1 x = MockRestClient.create().openApi().build().getRemote()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(\"foo\",IOUtils.read(x.postX7(\"foo\").get()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"'foo'\",read(x.postX12(\"foo\").get()))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertEquals(\"foo\",IOUtils.read(x.postX12(\"foo\").get()))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(\"'foo'\",IOUtils.read(x.postX8(\"foo\").get()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"'foo'\",IOUtils.read(x.postX10(\"foo\").get().getEntity().getContent()))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"'foo'\",IOUtils.read(x.postX6(\"foo\").get().getEntity().getContent()))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"'foo'\",read(x.postX8(\"foo\").get()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertEquals(\"foo\",IOUtils.read(x.postX6(\"foo\").get().getEntity().getContent()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(\"'foo'\",read(x.postX7(\"foo\").get()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13->10 [style = bold, label=""];
21->10 [style = bold, label=""];
17->5 [style = bold, label=""];
3->30 [style = dashed, label="0"];
12->23 [style = dashed, label="0"];
25->34 [style = bold, label=""];
5->23 [style = bold, label=""];
4->6 [style = bold, label=""];
11->1 [style = bold, label=""];
31->5 [style = bold, label=""];
30->26 [style = bold, label=""];
22->21 [style = bold, label=""];
8->32 [style = dashed, label="0"];
10->3 [style = bold, label=""];
9->22 [style = dashed, label="0"];
1->0 [style = bold, label=""];
4->26 [style = dashed, label="0"];
8->14 [style = dashed, label="0"];
1->28 [style = dashed, label="0"];
12->9 [style = bold, label=""];
34->10 [style = bold, label=""];
2->17 [style = dashed, label="0"];
3->4 [style = bold, label=""];
32->33 [style = bold, label=""];
8->7 [style = bold, label=""];
2->31 [style = dashed, label="0"];
6->18 [style = dashed, label="0"];
29->28 [style = bold, label=""];
20->18 [style = bold, label=""];
28->0 [style = bold, label=""];
19->1 [style = bold, label=""];
15->17 [style = bold, label=""];
0->14 [style = bold, label=""];
26->27 [style = bold, label=""];
23->22 [style = bold, label=""];
13->21 [style = dashed, label="0"];
10->16 [style = bold, label=""];
5->12 [style = bold, label=""];
4->20 [style = dashed, label="0"];
6->27 [style = dashed, label="0"];
7->2 [style = bold, label=""];
24->25 [style = bold, label=""];
5->24 [style = bold, label=""];
12->24 [style = dashed, label="0"];
9->25 [style = dashed, label="0"];
0->8 [style = bold, label=""];
7->15 [style = dashed, label="0"];
33->31 [style = bold, label=""];
14->15 [style = bold, label=""];
7->33 [style = dashed, label="0"];
0->32 [style = bold, label=""];
16->20 [style = bold, label=""];
13->34 [style = dashed, label="0"];
10->30 [style = bold, label=""];
3->16 [style = dashed, label="0"];
2->5 [style = bold, label=""];
9->13 [style = bold, label=""];
}
