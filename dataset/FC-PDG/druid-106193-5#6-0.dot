digraph {
1 [style = filled, label = "Assert.assertEquals(ExprEval.of(true,ExprType.LONG).value(),result.value())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "NullHandling.sqlCompatible()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "expectException(,\"Function(regexp_like( pattern must be a string literal\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final ExprEval<?> result = eval(\"regexp_like(a, null)\",Parser.withMap(ImmutableMap.of(\"a\",\"foo\")))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(ExprEval.ofLongBoolean(true).value(),result.value())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testNullPattern['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final ExprEval<?> result = eval(\"icontains_string(a, '')\",InputBindings.withMap(ImmutableMap.of(\"a\",\"foo\")))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testEmptyStringSearch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testEmptyStringSearch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(ExprEval.ofBoolean(true,ExprType.LONG).value(),result.value())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final ExprEval<?> result = eval(\"icontains_string(a, '')\",Parser.withMap(ImmutableMap.of(\"a\",\"foo\")))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8->7 [style = bold, label=""];
4->3 [style = bold, label=""];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
10->9 [style = bold, label=""];
0->3 [style = dashed, label="0"];
1->5 [style = dashed, label="0"];
9->8 [style = bold, label=""];
9->6 [style = dotted, label="true"];
0->1 [style = bold, label=""];
6->8 [style = bold, label=""];
9->6 [style = bold, label=""];
}
