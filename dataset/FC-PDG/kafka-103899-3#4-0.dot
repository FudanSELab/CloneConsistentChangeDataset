digraph {
26 [style = filled, label = "MockClient client = new MockClient(time,metadata)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "initMetadata(client,Utils.mkMap(Utils.mkEntry(topic,1),Utils.mkEntry(topic2,1),Utils.mkEntry(topic3,1)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(1,records.count())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertEquals(Utils.mkSet(tp0,t2p0),consumer.assignment())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "fetches1.clear()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertEquals(100L,consumer.position(t3p0))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(0L,consumer.position(t3p0))@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "consumer.subscribe(Arrays.asList(topic,topic2),getConsumerRebalanceListener(consumer))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "fetches1.clear()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "assertEquals(2L,consumer.position(tp0))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(Utils.mkSet(tp0,t3p0),consumer.assignment())@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Map<TopicPartition,FetchInfo> fetches1 = new HashMap<>()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Node coordinator = prepareRebalance(client,node,assignor,Arrays.asList(tp0,t2p0),null)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "consumer.subscribe(Arrays.asList(topic,topic2),countingRebalanceListener)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(Collections.singleton(tp0),consumer.assignment())@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ConsumerMetadata metadata = createMetadata(subscription)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic2),consumer.subscription())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "SubscriptionState subscription = new SubscriptionState(new LogContext(),OffsetResetStrategy.EARLIEST)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(4L,consumer.position(tp0))@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(Collections.singleton(tp0),consumer.assignment())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "fetches1.put(t2p0,new FetchInfo(0,10))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertEquals(11,records.count())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertEquals(10L,consumer.position(t2p0))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "partitionOffsets1.put(t2p0,10L)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "fetches1.put(t2p0,new FetchInfo(10,20))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "consumer.poll(Duration.ofMillis(100L))@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
76 [style = filled, label = "MockRebalanceListener countingRebalanceListener = new MockRebalanceListener()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "records = consumer.poll(Duration.ZERO)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ConsumerPartitionAssignor assignor = new CooperativeStickyAssignor()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "fetches1.put(tp0,new FetchInfo(1,1))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "assertEquals(countingRebalanceListener.assignedCount,1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Node node = metadata.fetch().nodes().get(0)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "records = consumer.poll(Duration.ZERO)@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "testReturnRecordsDuringRebalance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "consumer.enforceRebalance()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ConsumerRecords<String,String> records = consumer.poll(Duration.ZERO)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "fetches1.put(t3p0,new FetchInfo(0,100))@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "AtomicBoolean commitReceived = prepareOffsetCommitResponse(client,coordinator,partitionOffsets1)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertEquals(1,records.count())@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "fetches1.put(tp0,new FetchInfo(3,1))@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "fetches1.clear()@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Time time = new MockTime(1L)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertEquals(5L,consumer.position(tp0))@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "assertEquals(Collections.emptySet(),consumer.assignment())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "fetches1.put(tp0,new FetchInfo(2,1))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "fetches1.put(tp0,new FetchInfo(0,1))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertTrue(commitReceived.get())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "consumer.close()@@@71@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "consumer.poll(Duration.ZERO)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "consumer.subscribe(Arrays.asList(topic,topic3),getConsumerRebalanceListener(consumer))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "testEnforceRebalanceTriggersRebalanceOnNextPoll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "records = consumer.poll(Duration.ZERO)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "records = consumer.poll(Duration.ZERO)@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "fetches1.put(tp0,new FetchInfo(4,1))@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertEquals(1,records.count())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "client.respondFrom(joinGroupFollowerResponse(assignor,2,\"memberId\",\"leaderId\",Errors.NONE),coordinator)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "consumer.unsubscribe()@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "ConsumerPartitionAssignor assignor = new RoundRobinAssignor()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(1L,consumer.position(tp0))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "client.requests().clear()@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "assertEquals(countingRebalanceListener.revokedCount,0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "consumer.poll(Duration.ZERO)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Map<TopicPartition,Long> partitionOffsets1 = new HashMap<>()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertEquals(Utils.mkSet(tp0,t2p0),consumer.assignment())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertEquals(3L,consumer.position(tp0))@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "testReturnRecordsDuringRebalance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "fetches1.clear()@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "prepareRebalance(client,node,assignor,Arrays.asList(tp0,t2p0),null)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "KafkaConsumer<String,String> consumer = newConsumer(time,client,subscription,metadata,assignor,true,groupInstanceId)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "assertEquals(countingRebalanceListener.revokedCount,1)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(101,records.count())@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "consumer.poll(Duration.ZERO)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "client.prepareResponseFrom(syncGroupResponse(Arrays.asList(tp0,t3p0),Errors.NONE),coordinator)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->59 [style = bold, label=""];
47->15 [style = solid, label="subscription"];
11->4 [style = bold, label=""];
46->72 [style = bold, label=""];
22->42 [style = bold, label=""];
61->31 [style = solid, label="consumer"];
61->43 [style = bold, label=""];
53->55 [style = bold, label=""];
50->28 [style = bold, label=""];
42->32 [style = bold, label=""];
36->2 [style = bold, label=""];
34->49 [style = bold, label=""];
54->56 [style = bold, label=""];
47->20 [style = solid, label="subscription"];
57->26 [style = solid, label="time"];
58->37 [style = bold, label=""];
47->30 [style = bold, label=""];
65->9 [style = bold, label=""];
20->1 [style = bold, label=""];
30->61 [style = solid, label="metadata"];
27->65 [style = bold, label=""];
75->61 [style = solid, label="assignor"];
76->74 [style = solid, label="countingRebalanceListener"];
0->27 [style = solid, label="node"];
4->19 [style = bold, label=""];
26->61 [style = solid, label="client"];
64->52 [style = bold, label=""];
29->17 [style = bold, label=""];
69->71 [style = bold, label=""];
5->75 [style = dashed, label="0"];
28->23 [style = solid, label="partitionOffsets1"];
67->24 [style = bold, label=""];
26->64 [style = solid, label="client"];
64->80 [style = dashed, label="0"];
5->64 [style = solid, label="assignor"];
79->73 [style = bold, label=""];
13->20 [style = bold, label=""];
48->13 [style = bold, label=""];
64->25 [style = solid, label="coordinator"];
33->12 [style = bold, label=""];
43->74 [style = bold, label=""];
30->26 [style = solid, label="metadata"];
67->55 [style = solid, label="fetches1"];
47->21 [style = solid, label="subscription"];
30->26 [style = bold, label=""];
57->61 [style = solid, label="time"];
24->53 [style = bold, label=""];
57->47 [style = bold, label=""];
28->38 [style = bold, label=""];
60->78 [style = dashed, label="0"];
46->21 [style = bold, label=""];
14->45 [style = bold, label=""];
47->30 [style = solid, label="subscription"];
26->23 [style = solid, label="client"];
71->60 [style = bold, label=""];
47->9 [style = solid, label="subscription"];
60->67 [style = bold, label=""];
44->29 [style = bold, label=""];
0->80 [style = solid, label="node"];
26->43 [style = solid, label="client"];
74->0 [style = bold, label=""];
67->14 [style = solid, label="fetches1"];
38->23 [style = bold, label=""];
1->54 [style = bold, label=""];
5->61 [style = bold, label=""];
68->27 [style = bold, label=""];
18->8 [style = bold, label=""];
9->50 [style = bold, label=""];
0->32 [style = solid, label="node"];
76->43 [style = bold, label=""];
61->76 [style = bold, label=""];
52->21 [style = bold, label=""];
26->75 [style = bold, label=""];
49->6 [style = bold, label=""];
25->48 [style = bold, label=""];
41->33 [style = bold, label=""];
59->51 [style = bold, label=""];
77->79 [style = bold, label=""];
52->46 [style = bold, label=""];
64->23 [style = solid, label="coordinator"];
10->68 [style = bold, label=""];
47->61 [style = solid, label="subscription"];
23->63 [style = bold, label=""];
21->69 [style = bold, label=""];
35->7 [style = bold, label=""];
72->78 [style = bold, label=""];
75->80 [style = solid, label="assignor"];
0->64 [style = solid, label="node"];
19->16 [style = bold, label=""];
0->14 [style = solid, label="node"];
62->34 [style = bold, label=""];
17->36 [style = bold, label=""];
26->80 [style = solid, label="client"];
67->4 [style = solid, label="fetches1"];
15->35 [style = bold, label=""];
80->52 [style = bold, label=""];
21->60 [style = bold, label=""];
8->44 [style = bold, label=""];
51->41 [style = bold, label=""];
5->25 [style = solid, label="assignor"];
7->58 [style = bold, label=""];
45->18 [style = bold, label=""];
64->48 [style = solid, label="coordinator"];
67->27 [style = solid, label="fetches1"];
61->65 [style = solid, label="consumer"];
43->31 [style = bold, label=""];
75->61 [style = bold, label=""];
2->11 [style = bold, label=""];
70->57 [style = bold, label=""];
0->64 [style = bold, label=""];
0->4 [style = solid, label="node"];
63->22 [style = bold, label=""];
3->62 [style = bold, label=""];
78->77 [style = bold, label=""];
56->39 [style = bold, label=""];
6->10 [style = bold, label=""];
0->80 [style = bold, label=""];
26->5 [style = bold, label=""];
40->14 [style = bold, label=""];
81->57 [style = bold, label=""];
67->32 [style = solid, label="fetches1"];
47->18 [style = solid, label="subscription"];
55->3 [style = bold, label=""];
0->55 [style = solid, label="node"];
21->72 [style = dashed, label="0"];
5->61 [style = solid, label="assignor"];
39->40 [style = bold, label=""];
31->74 [style = dashed, label="0"];
32->15 [style = bold, label=""];
37->25 [style = bold, label=""];
66->57 [style = bold, label=""];
31->0 [style = bold, label=""];
}
