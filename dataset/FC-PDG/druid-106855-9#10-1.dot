digraph {
9 [style = filled, label = "Assert.assertTrue(analysis.isConcreteBased())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testJoinSimpleLeftLeaning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(Optional.of(TABLE_FOO),analysis.getBaseTableDataSource())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(Optional.empty(),analysis.getBaseQuery())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(Optional.empty(),analysis.getBaseQuerySegmentSpec())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testJoinSimpleRightLeaning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testJoinSimpleLeftLeaning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(analysis.isJoin())@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(analysis.isConcreteTableBased())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(Optional.empty(),analysis.getJoinBaseTableFilter())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertTrue(analysis.isJoin())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertFalse(analysis.isQuery())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final JoinDataSource rightLeaningJoinStack = join(LOOKUP_LOOKYLOO,join(INLINE,subquery(LOOKUP_LOOKYLOO),\"1.\",JoinType.LEFT),\"2.\",JoinType.FULL)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(TABLE_FOO,analysis.getBaseDataSource())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final JoinDataSource joinDataSource = join(join(join(TABLE_FOO,LOOKUP_LOOKYLOO,\"1.\",JoinType.INNER),INLINE,\"2.\",JoinType.LEFT),subquery(LOOKUP_LOOKYLOO),\"3.\",JoinType.FULL)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(Optional.empty(),analysis.getBaseQuery())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(joinDataSource,analysis.getDataSource())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertFalse(analysis.isGlobal())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(ImmutableList.of(new PreJoinableClause(\"3.\",rightLeaningJoinStack,JoinType.RIGHT,joinClause(\"3.\"))),analysis.getPreJoinableClauses())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final JoinDataSource joinDataSource = join(TABLE_FOO,rightLeaningJoinStack,\"3.\",JoinType.RIGHT)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(Optional.empty(),analysis.getBaseUnionDataSource())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
14->3 [style = bold, label=""];
11->20 [style = bold, label=""];
21->20 [style = solid, label="rightLeaningJoinStack"];
4->6 [style = bold, label=""];
12->15 [style = bold, label=""];
16->7 [style = bold, label=""];
3->11 [style = bold, label=""];
22->21 [style = bold, label=""];
21->18 [style = solid, label="rightLeaningJoinStack"];
5->14 [style = bold, label=""];
10->7 [style = bold, label=""];
21->18 [style = bold, label=""];
1->9 [style = bold, label=""];
2->4 [style = solid, label="joinDataSource"];
2->0 [style = solid, label="joinDataSource"];
7->5 [style = bold, label=""];
2->0 [style = bold, label=""];
10->16 [style = bold, label=""];
8->2 [style = bold, label=""];
17->2 [style = bold, label=""];
18->1 [style = bold, label=""];
0->1 [style = bold, label=""];
6->10 [style = bold, label=""];
11->13 [style = bold, label=""];
15->4 [style = bold, label=""];
18->1 [style = solid, label="joinDataSource"];
9->12 [style = bold, label=""];
20->19 [style = bold, label=""];
18->6 [style = solid, label="joinDataSource"];
}
