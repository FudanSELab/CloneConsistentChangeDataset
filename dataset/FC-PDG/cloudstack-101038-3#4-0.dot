digraph {
8 [style = filled, label = "when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(network.getId()).thenReturn(networkId)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(network.getVpcId()).thenReturn(null)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "lenient().when(network.getNetworkOfferingId()).thenReturn(networkOfferingId)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "when(network.getDataCenterId()).thenReturn(dataCenterId)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(virtualRouterElement.addPasswordAndUserdata(network,nic,vm,dest,context))@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "lenient().when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "when(virtualRouterElement._networkMdl.isProviderSupportServiceInNetwork(networkId,service,Network.Provider.VirtualRouter)).thenReturn(true)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "DeployDestination dest = Mockito.mock()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "NicProfile nic = Mockito.mock()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "ReservationContext context = Mockito.mock()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final long dataCenterId = 33@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Service service = Service.UserData@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "when(virtualRouterElement._networkMdl.getPhysicalNetworkId(network)).thenReturn(physicalNetworkId)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Network network = Mockito.mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final long networkOfferingId = 10@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final long physicalNetworkId = 42@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(network.getNetworkOfferingId()).thenReturn(networkOfferingId)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testAddPasswordAndUserdata['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "when(virtualRouterElement._networkMdl.isProviderForNetwork(Network.Provider.VirtualRouter,networkId)).thenReturn(true)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "when(vm.getType()).thenReturn(VirtualMachine.Type.User)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "when(virtualRouterElement._dcDao.findById(dataCenterId)).thenReturn(Mockito.mock())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(virtualRouterElement.canHandle(network,null))@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testCanHandle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testCanHandle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "when(network.getTrafficType()).thenReturn(TrafficType.Guest)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "when(virtualRouterElement.canHandle(network,service)).thenReturn(false)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "VirtualMachineProfile vm = Mockito.mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final long networkId = 1@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "lenient().when(network.getTrafficType()).thenReturn(TrafficType.Guest)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "when(virtualRouterElement._networkMdl.isProviderEnabledInPhysicalNetwork(physicalNetworkId,Network.Provider.VirtualRouter.getName())).thenReturn(true)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "lenient().when(network.getDataCenterId()).thenReturn(dataCenterId)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
29->30 [style = bold, label=""];
12->0 [style = bold, label=""];
4->6 [style = bold, label=""];
26->24 [style = bold, label=""];
13->16 [style = solid, label="dataCenterId"];
9->11 [style = bold, label=""];
11->21 [style = bold, label=""];
8->5 [style = bold, label=""];
8->18 [style = dashed, label="0"];
14->18 [style = bold, label=""];
20->16 [style = bold, label=""];
15->12 [style = bold, label=""];
13->4 [style = solid, label="dataCenterId"];
19->20 [style = bold, label=""];
7->20 [style = dashed, label="0"];
25->26 [style = bold, label=""];
24->15 [style = bold, label=""];
3->23 [style = dashed, label="0"];
2->22 [style = solid, label="network"];
10->21 [style = dashed, label="0"];
4->16 [style = dashed, label="0"];
27->9 [style = bold, label=""];
25->22 [style = solid, label="dest"];
5->19 [style = dashed, label="0"];
30->25 [style = bold, label=""];
0->13 [style = bold, label=""];
15->14 [style = solid, label="networkId"];
12->9 [style = solid, label="physicalNetworkId"];
10->3 [style = bold, label=""];
6->27 [style = bold, label=""];
6->9 [style = bold, label=""];
30->22 [style = solid, label="nic"];
28->22 [style = bold, label=""];
12->18 [style = solid, label="physicalNetworkId"];
11->10 [style = bold, label=""];
2->29 [style = bold, label=""];
18->19 [style = bold, label=""];
7->4 [style = bold, label=""];
31->2 [style = bold, label=""];
16->6 [style = bold, label=""];
14->8 [style = bold, label=""];
12->8 [style = solid, label="physicalNetworkId"];
23->28 [style = bold, label=""];
0->7 [style = solid, label="networkOfferingId"];
29->22 [style = solid, label="vm"];
2->3 [style = solid, label="network"];
13->14 [style = bold, label=""];
21->23 [style = bold, label=""];
0->20 [style = solid, label="networkOfferingId"];
2->15 [style = bold, label=""];
1->2 [style = bold, label=""];
5->7 [style = bold, label=""];
17->2 [style = bold, label=""];
26->22 [style = solid, label="context"];
}
