digraph {
9 [style = filled, label = "assertNull(map.put(i,i + 1))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertEquals(6,map.size())@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Map.Entry<Integer,Integer> entry = new SimpleEntry<Integer,Integer>(i,i + 1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "i < 6@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(entrySet.add(entry))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int i = 0@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(3,map.getNumOverflowEntries())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "int i = 0@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i < 6@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i++@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(Integer.valueOf(i + 1),map.get(i))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(map.put(i,i + 1)).isNull()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "SmallSortedMap<Integer,Integer> map = SmallSortedMap.newInstanceForTest(3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testEntrySetAdd['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(map.remove(i + 1)).isNull()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "int i = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(map.put(i,i + 2)).isEqualTo(Integer.valueOf(i + 1))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "i++@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testReplacingPut['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNull(map.remove(i + 1))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertFalse(entrySet.add(entry))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Set<Map.Entry<Integer,Integer>> entrySet = map.entrySet()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testReplacingPut['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4->7 [style = solid, label="i"];
10->18 [style = dotted, label="true"];
5->10 [style = bold, label=""];
10->18 [style = bold, label=""];
2->9 [style = solid, label="i"];
10->12 [style = dotted, label="true"];
6->4 [style = solid, label="i"];
1->8 [style = bold, label=""];
7->17 [style = bold, label=""];
5->3 [style = solid, label="i"];
4->17 [style = dashed, label="0"];
15->21 [style = bold, label=""];
9->18 [style = dashed, label="0"];
5->2 [style = solid, label="i"];
0->4 [style = dotted, label="true"];
12->11 [style = bold, label=""];
10->3 [style = dotted, label="true"];
7->0 [style = solid, label="i"];
7->0 [style = bold, label=""];
6->0 [style = bold, label=""];
18->19 [style = solid, label="entry"];
19->2 [style = bold, label=""];
0->4 [style = solid, label="i"];
2->10 [style = solid, label="i"];
23->8 [style = bold, label=""];
6->7 [style = solid, label="i"];
2->10 [style = bold, label=""];
6->14 [style = solid, label="i"];
2->18 [style = solid, label="i"];
10->9 [style = dotted, label="true"];
10->6 [style = bold, label=""];
22->5 [style = bold, label=""];
11->2 [style = bold, label=""];
4->7 [style = bold, label=""];
2->3 [style = solid, label="i"];
7->4 [style = solid, label="i"];
8->22 [style = bold, label=""];
14->7 [style = bold, label=""];
0->7 [style = bold, label=""];
6->0 [style = solid, label="i"];
4->17 [style = solid, label="i"];
0->17 [style = solid, label="i"];
18->20 [style = bold, label=""];
0->14 [style = bold, label=""];
8->5 [style = bold, label=""];
3->2 [style = bold, label=""];
10->2 [style = dotted, label="true"];
0->4 [style = bold, label=""];
10->12 [style = bold, label=""];
10->11 [style = dotted, label="true"];
10->20 [style = dotted, label="true"];
10->19 [style = dotted, label="true"];
10->0 [style = bold, label=""];
7->4 [style = dotted, label="true"];
3->20 [style = dashed, label="0"];
5->18 [style = solid, label="i"];
21->16 [style = bold, label=""];
9->3 [style = bold, label=""];
7->15 [style = bold, label=""];
0->14 [style = dotted, label="true"];
4->14 [style = dashed, label="0"];
10->9 [style = bold, label=""];
9->12 [style = dashed, label="0"];
0->7 [style = dotted, label="true"];
13->8 [style = bold, label=""];
20->19 [style = bold, label=""];
7->17 [style = dotted, label="true"];
18->20 [style = solid, label="entry"];
5->10 [style = solid, label="i"];
17->4 [style = bold, label=""];
3->11 [style = dashed, label="0"];
0->7 [style = solid, label="i"];
7->14 [style = solid, label="i"];
5->9 [style = solid, label="i"];
}
