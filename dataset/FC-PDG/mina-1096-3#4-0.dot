digraph {
10 [style = filled, label = "assertEquals(1,results.length)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "int i = 0@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "sb.append(\"a string\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder(LineDelimiter.UNIX)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap((sb.toString() + \"\").getBytes()),context)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "++i@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testThatUnixLineTerminatedLongStringReturnsNonEmptyResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Context context = decoder.createDecoderState()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i < 100@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "StringBuffer sb = new StringBuffer()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(801,context.getBuffer().position())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "int i = 0@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertEquals(0,results.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testThatUnixLineTerminatedLongStringReturnsNonEmptyResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertNotNull(results)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder(LineDelimiter.WINDOWS)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(sb.toString(),results(0()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "String results = decoder.decode(ByteBuffer.wrap((sb.toString() + \"\").getBytes()),context)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "++i@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(sb.toString(),results)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testThatUnixLineTerminatedLongStringReturnsEmptyResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3->2 [style = solid, label="i"];
15->2 [style = bold, label=""];
9->16 [style = dashed, label="0"];
2->0 [style = dotted, label="true"];
1->8 [style = bold, label=""];
1->9 [style = solid, label="context"];
10->21 [style = dashed, label="0"];
6->18 [style = bold, label=""];
6->21 [style = bold, label=""];
16->6 [style = bold, label=""];
19->20 [style = bold, label=""];
8->3 [style = bold, label=""];
11->22 [style = dashed, label="0"];
2->15 [style = dotted, label="true"];
18->17 [style = bold, label=""];
11->12 [style = bold, label=""];
2->9 [style = bold, label=""];
7->4 [style = bold, label=""];
20->1 [style = bold, label=""];
3->13 [style = dashed, label="0"];
0->15 [style = bold, label=""];
9->11 [style = solid, label="results"];
9->6 [style = bold, label=""];
16->6 [style = solid, label="results"];
10->18 [style = dashed, label="0"];
5->2 [style = bold, label=""];
2->0 [style = bold, label=""];
14->4 [style = bold, label=""];
13->2 [style = solid, label="i"];
3->2 [style = bold, label=""];
9->6 [style = solid, label="results"];
21->22 [style = bold, label=""];
4->20 [style = dashed, label="0"];
6->10 [style = bold, label=""];
16->18 [style = solid, label="results"];
4->1 [style = bold, label=""];
2->5 [style = dotted, label="true"];
5->15 [style = dashed, label="0"];
1->16 [style = solid, label="context"];
8->13 [style = bold, label=""];
0->5 [style = bold, label=""];
13->2 [style = bold, label=""];
10->11 [style = bold, label=""];
2->16 [style = bold, label=""];
}
