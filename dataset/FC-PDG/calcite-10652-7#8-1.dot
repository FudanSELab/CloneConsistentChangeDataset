digraph {
17 [style = filled, label = "Planner planner = getPlanner(traitDefs,Programs.of(ruleSet))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\"\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testPlan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "traitDefs.add(RelCollationTraitDef.INSTANCE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\"\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "RelNode convert = planner.rel(validate).project()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testPlan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "testPlanWithExplicitTraitDefs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(toString(transform),equalTo(\"EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "RelNode convert = planner.convert(validate)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Planner planner = getPlanner(null,program)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "traitDefs.add(ConventionTraitDef.INSTANCE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "RelNode convert = planner.convert(validate)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Program program = Programs.ofRules(FilterMergeRule.INSTANCE,EnumerableRules.ENUMERABLE_FILTER_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "RelTraitSet traitSet = planner.getEmptyTraitSet().replace(EnumerableConvention.INSTANCE)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(FilterMergeRule.INSTANCE,EnumerableRules.ENUMERABLE_FILTER_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final List<RelTraitDef> traitDefs = new ArrayList<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
19->18 [style = solid, label="transform"];
19->18 [style = bold, label=""];
5->14 [style = dashed, label="0"];
16->11 [style = bold, label=""];
8->4 [style = solid, label="transform"];
0->8 [style = solid, label="convert"];
15->17 [style = solid, label="traitDefs"];
4->13 [style = bold, label=""];
1->0 [style = solid, label="validate"];
9->8 [style = solid, label="convert"];
1->0 [style = bold, label=""];
15->16 [style = bold, label=""];
1->9 [style = bold, label=""];
5->7 [style = solid, label="program"];
8->4 [style = solid, label="validate"];
6->1 [style = bold, label=""];
4->19 [style = solid, label="convert"];
13->19 [style = bold, label=""];
6->1 [style = solid, label="parse"];
10->5 [style = bold, label=""];
14->17 [style = solid, label="ruleSet"];
3->8 [style = bold, label=""];
7->6 [style = bold, label=""];
12->14 [style = bold, label=""];
17->3 [style = bold, label=""];
9->3 [style = bold, label=""];
5->7 [style = bold, label=""];
11->17 [style = bold, label=""];
14->15 [style = bold, label=""];
13->19 [style = solid, label="traitSet"];
3->8 [style = solid, label="traitSet"];
8->4 [style = bold, label=""];
0->9 [style = dashed, label="0"];
3->8 [style = solid, label="parse"];
2->5 [style = bold, label=""];
}
