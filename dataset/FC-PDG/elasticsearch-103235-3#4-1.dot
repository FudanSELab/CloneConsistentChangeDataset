digraph {
1 [style = filled, label = "ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\",\"type\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"2016-03-11\").endObject()),XContentType.JSON))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testDefaults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertEquals(1457654400000L,dvField.numericValue().longValue())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "IndexableField pointField = fields(0(@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(1457654400000L,pointField.numericValue().longValue())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertFalse(dvField.fieldType().stored())@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))),dvField.binaryValue())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(1,pointField.fieldType().pointIndexDimensionCount())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertFalse(pointField.fieldType().stored())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(mapping,mapper.mappingSource().toString())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(1,pointField.fieldType().pointDimensionCount())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testDefaults['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(2,fields.length)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"date\").endObject().endObject().endObject().endObject())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))),pointField.binaryValue())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(8,pointField.fieldType().pointNumBytes())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "IndexableField dvField = fields(1(@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(DocValuesType.SORTED_NUMERIC,dvField.fieldType().docValuesType())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\",\"type\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"::1\").endObject()),XContentType.JSON))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testDefaults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"ip\").endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(DocValuesType.SORTED_SET,dvField.fieldType().docValuesType())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(16,pointField.fieldType().pointNumBytes())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->16 [style = bold, label=""];
15->9 [style = solid, label="mapping"];
5->8 [style = bold, label=""];
2->5 [style = bold, label=""];
4->16 [style = dashed, label="0"];
7->14 [style = solid, label="fields"];
15->3 [style = solid, label="mapping"];
19->3 [style = solid, label="mapping"];
3->1 [style = bold, label=""];
10->14 [style = bold, label=""];
7->10 [style = bold, label=""];
21->6 [style = bold, label=""];
6->24 [style = bold, label=""];
8->6 [style = bold, label=""];
4->2 [style = bold, label=""];
15->19 [style = dashed, label="0"];
8->21 [style = dashed, label="0"];
16->2 [style = bold, label=""];
24->18 [style = bold, label=""];
1->7 [style = bold, label=""];
22->5 [style = bold, label=""];
11->15 [style = bold, label=""];
1->20 [style = dashed, label="0"];
5->21 [style = bold, label=""];
12->13 [style = bold, label=""];
3->20 [style = bold, label=""];
19->9 [style = bold, label=""];
15->9 [style = bold, label=""];
23->19 [style = bold, label=""];
12->24 [style = dashed, label="0"];
17->15 [style = bold, label=""];
9->3 [style = bold, label=""];
19->9 [style = solid, label="mapping"];
13->18 [style = dashed, label="0"];
7->6 [style = solid, label="fields"];
20->7 [style = bold, label=""];
2->22 [style = dashed, label="0"];
4->22 [style = bold, label=""];
18->0 [style = bold, label=""];
13->0 [style = bold, label=""];
14->4 [style = bold, label=""];
6->12 [style = bold, label=""];
}
