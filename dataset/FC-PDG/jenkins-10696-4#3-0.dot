digraph {
24 [style = filled, label = "assertThat(d.getActions(),Matchers.iterableWithSize(0))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(Util.filter(allActions,),Matchers.iterableWithSize(0))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertNotNull(p.getAction())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertEquals(2,LazyFactory.count)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(0,LazyFactory.count)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(1,OldFactory.count)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(1,LazyFactory.count)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "OldFactory.count = 0@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(Util.filter(allActions,),Matchers.iterableWithSize(1))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "laziness['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(Util.filter(allActions,),Matchers.iterableWithSize(1))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(p.getActions(),Matchers.iterableWithSize(1))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertThat(p.getActions(),Matchers.iterableWithSize(1))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "allActions = d.getAllActions()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertThat(Util.filter(allActions,),Matchers.iterableWithSize(1))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(Util.filter(allActions,),Matchers.iterableWithSize(0))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertEquals(0,LazyFactory.count)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNull(p.getAction())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "LazyFactory.count = 0@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(d.getActions(),Matchers.iterableWithSize(0))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "compatibility['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "assertNull(d.getAction())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(Util.filter(allActions,),Matchers.iterableWithSize(0))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(Util.filter(allActions,),Matchers.iterableWithSize(0))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(2,LazyFactory.count)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "MockFolder d = r.createFolder(\"d\")@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertThat(p.getActions(),Matchers.iterableWithSize(1))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<? extends Action> allActions = p.getAllActions()@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(1,OldFactory.count)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "FreeStyleProject p = r.createFreeStyleProject()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertNull(d.getAction())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(1,OldFactory.count)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(0,LazyFactory.count)@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<? extends Action> allActions = p.getAllActions()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertNotNull(p.getAction())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "LazyFactory.count = 0@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(1,LazyFactory.count)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(p.getActions(),Matchers.iterableWithSize(1))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertThat(p.getActions(),Matchers.iterableWithSize(0))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(p.getActions(),Matchers.iterableWithSize(0))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(2,OldFactory.count)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(1,LazyFactory.count)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "LazyFactory.count = 0@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "compatibility['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(Util.filter(allActions,),Matchers.iterableWithSize(1))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14->16 [style = bold, label=""];
11->20 [style = bold, label=""];
8->10 [style = bold, label=""];
4->32 [style = bold, label=""];
9->16 [style = dashed, label="0"];
10->21 [style = dashed, label="0"];
16->11 [style = bold, label=""];
28->15 [style = bold, label=""];
9->11 [style = bold, label=""];
0->37 [style = bold, label=""];
15->34 [style = bold, label=""];
22->37 [style = solid, label="count"];
0->36 [style = solid, label="allActions"];
0->6 [style = bold, label=""];
30->43 [style = bold, label=""];
3->37 [style = dashed, label="0"];
11->34 [style = dashed, label="0"];
2->3 [style = bold, label=""];
13->3 [style = solid, label="count"];
18->19 [style = bold, label=""];
36->28 [style = bold, label=""];
7->20 [style = dashed, label="0"];
2->6 [style = solid, label="allActions"];
24->29 [style = bold, label=""];
5->32 [style = dashed, label="0"];
15->40 [style = dashed, label="0"];
32->26 [style = bold, label=""];
26->39 [style = bold, label=""];
27->33 [style = solid, label="allActions"];
3->0 [style = bold, label=""];
14->11 [style = solid, label="count"];
3->18 [style = bold, label=""];
39->22 [style = bold, label=""];
6->14 [style = bold, label=""];
33->23 [style = bold, label=""];
25->27 [style = bold, label=""];
2->0 [style = solid, label="allActions"];
35->40 [style = bold, label=""];
37->14 [style = bold, label=""];
31->42 [style = bold, label=""];
23->24 [style = bold, label=""];
17->12 [style = bold, label=""];
2->19 [style = solid, label="allActions"];
28->40 [style = solid, label="count"];
0->14 [style = solid, label="allActions"];
19->14 [style = bold, label=""];
22->0 [style = bold, label=""];
42->30 [style = bold, label=""];
12->8 [style = bold, label=""];
5->13 [style = bold, label=""];
6->19 [style = dashed, label="0"];
0->9 [style = solid, label="allActions"];
1->12 [style = bold, label=""];
10->4 [style = bold, label=""];
14->15 [style = solid, label="count"];
8->21 [style = bold, label=""];
28->42 [style = solid, label="count"];
7->15 [style = bold, label=""];
44->25 [style = bold, label=""];
14->9 [style = bold, label=""];
29->38 [style = bold, label=""];
0->18 [style = dashed, label="0"];
21->4 [style = bold, label=""];
34->35 [style = bold, label=""];
40->31 [style = bold, label=""];
27->33 [style = bold, label=""];
41->12 [style = bold, label=""];
28->34 [style = solid, label="count"];
30->38 [style = solid, label="count"];
2->18 [style = solid, label="allActions"];
20->15 [style = bold, label=""];
43->44 [style = bold, label=""];
4->5 [style = bold, label=""];
27->23 [style = solid, label="allActions"];
11->7 [style = bold, label=""];
13->2 [style = bold, label=""];
9->36 [style = bold, label=""];
}
