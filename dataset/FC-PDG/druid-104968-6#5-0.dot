digraph {
29 [style = filled, label = "testSanity['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(3,startOrder,stopOrder),Lifecycle.Stage.LAST)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(expectedOrder,startOrder)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final Lifecycle lifecycle = new Lifecycle()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(0,stopOrder.size())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testAddToLifecycleInStartMethod['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "lifecycle.stop()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(8,stopOrder.size())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(8,startOrder.size())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(7,startOrder,stopOrder))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(6,startOrder,stopOrder),Lifecycle.Stage.LAST)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "lifecycle.start()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Lifecycle lifecycle = new Lifecycle()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final List<Integer> startOrder = new ArrayList<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "List<Integer> stopOrder = new ArrayList<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(5,startOrder,stopOrder))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "List<Integer> startOrder = new ArrayList<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final List<Integer> expectedOrder = Arrays.asList(0,1,2,4,5,7,3,6)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(expectedStopOrder,stopOrder)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(Lists.reverse(expectedOrder),stopOrder)@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(Lists.reverse(expectedOrder),stopOrder)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(4,startOrder,stopOrder))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "lifecycle.addHandler(new Lifecycle.Handler(){@Override public void start(){lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(1,startOrder,stopOrder),Lifecycle.Stage.NORMAL)lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(2,startOrder,stopOrder),Lifecycle.Stage.INIT)lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(3,startOrder,stopOrder),Lifecycle.Stage.LAST)lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(4,startOrder,stopOrder))lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(5,startOrder,stopOrder))lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(6,startOrder,stopOrder),Lifecycle.Stage.LAST)lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(7,startOrder,stopOrder))}@Override public void stop(){}})@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(0,startOrder,stopOrder))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(1,startOrder,stopOrder),Lifecycle.Stage.NORMAL)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final List<Integer> expectedStopOrder = Arrays.asList(6,3,7,5,4,1,0,2)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final List<Integer> stopOrder = new ArrayList<>()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "lifecycle.stop()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testAddToLifecycleInStartMethod['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(expectedOrder,startOrder)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(2,startOrder,stopOrder),Lifecycle.Stage.NORMAL)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(expectedOrder,startOrder)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(0,stopOrder.size())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(8,startOrder.size())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22->26 [style = bold, label=""];
18->31 [style = bold, label=""];
6->9 [style = solid, label="stopOrder"];
32->22 [style = bold, label=""];
0->9 [style = bold, label=""];
15->10 [style = bold, label=""];
33->3 [style = solid, label="stopOrder"];
4->9 [style = solid, label="startOrder"];
5->14 [style = dashed, label="0"];
4->6 [style = bold, label=""];
1->5 [style = solid, label="expectedOrder"];
13->14 [style = solid, label="expectedStopOrder"];
9->18 [style = dashed, label="0"];
21->33 [style = bold, label=""];
27->28 [style = bold, label=""];
33->31 [style = solid, label="stopOrder"];
33->30 [style = solid, label="stopOrder"];
1->3 [style = bold, label=""];
33->25 [style = solid, label="stopOrder"];
30->25 [style = bold, label=""];
4->7 [style = solid, label="startOrder"];
16->32 [style = bold, label=""];
6->0 [style = bold, label=""];
28->1 [style = bold, label=""];
21->18 [style = solid, label="startOrder"];
21->16 [style = solid, label="startOrder"];
1->2 [style = solid, label="expectedOrder"];
21->19 [style = solid, label="startOrder"];
33->20 [style = solid, label="stopOrder"];
33->16 [style = solid, label="stopOrder"];
7->8 [style = bold, label=""];
21->0 [style = solid, label="startOrder"];
21->31 [style = solid, label="startOrder"];
25->17 [style = bold, label=""];
1->13 [style = bold, label=""];
4->21 [style = dashed, label="0"];
6->5 [style = solid, label="stopOrder"];
6->33 [style = dashed, label="0"];
33->0 [style = bold, label=""];
6->14 [style = solid, label="stopOrder"];
1->7 [style = solid, label="expectedOrder"];
21->30 [style = solid, label="startOrder"];
12->2 [style = bold, label=""];
13->3 [style = bold, label=""];
4->2 [style = solid, label="startOrder"];
3->7 [style = bold, label=""];
24->21 [style = bold, label=""];
11->10 [style = bold, label=""];
33->18 [style = solid, label="stopOrder"];
23->19 [style = bold, label=""];
26->23 [style = bold, label=""];
2->14 [style = bold, label=""];
19->27 [style = bold, label=""];
21->20 [style = solid, label="startOrder"];
10->4 [style = bold, label=""];
4->0 [style = solid, label="startOrder"];
6->0 [style = solid, label="stopOrder"];
33->0 [style = solid, label="stopOrder"];
0->18 [style = bold, label=""];
32->19 [style = solid, label="expectedOrder"];
31->20 [style = bold, label=""];
9->1 [style = bold, label=""];
20->30 [style = bold, label=""];
29->24 [style = bold, label=""];
21->25 [style = solid, label="startOrder"];
21->17 [style = solid, label="startOrder"];
7->26 [style = dashed, label="0"];
32->3 [style = solid, label="expectedOrder"];
33->17 [style = solid, label="stopOrder"];
10->24 [style = dashed, label="0"];
8->12 [style = bold, label=""];
17->16 [style = bold, label=""];
2->5 [style = bold, label=""];
}
