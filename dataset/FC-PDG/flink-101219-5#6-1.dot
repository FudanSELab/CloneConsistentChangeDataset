digraph {
11 [style = filled, label = "final long convergence_threshold = 3@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(5,aggr_values(2()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testConnectedComponentsWithParametrizableConvergence['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "DataSet<Tuple2<Long,Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0).with(new NeighborWithComponentIDJoin()).groupBy(0).min(1)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "iteration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,new LongSumAggregator(),new UpdatedElementsConvergenceCriterion(convergence_threshold))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final String AGGREGATOR_NAME = \"elements.in.component.aggregator\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(6,aggr_values(3()@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final int MAX_ITERATIONS = 5@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "IterativeDataSet<Tuple2<Long,Long>> iteration = initialSolutionSet.iterate(MAX_ITERATIONS)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final String UPDATED_ELEMENTS = \"updated.elements.aggr\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testParameterizableAggregator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(3,aggr_values(0()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Collections.sort(result,new TestBaseUtils.TupleComparator<Tuple2<Long,Long>>())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "final long componentId = 1l@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "iteration.registerAggregator(AGGREGATOR_NAME,new LongSumAggregatorWithParameter(componentId))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DataSet<Tuple2<Long,Long>> edges = env.fromCollection(edgesInput)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DataSet<Tuple2<Long,Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0).with(new NeighborWithComponentIDJoin()).groupBy(0).min(1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "DataSet<Tuple2<Long,Long>> initialSolutionSet = env.fromCollection(verticesInput)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "DataSet<Tuple2<Long,Long>> updatedComponentId = verticesWithNewComponents.join(iteration).where(0).equalTo(0).flatMap(new MinimumIdFilterCounting(AGGREGATOR_NAME))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "List<Tuple2<Long,Long>> result = iteration.closeWith(updatedComponentId).collect()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(4,aggr_values(1()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<Tuple2<Long,Long>> result = iteration.closeWith(updatedComponentId).collect()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Collections.sort(result,new JavaProgramTestBase.TupleComparator<Tuple2<Long,Long>>())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testConnectedComponentsWithParametrizableConvergence['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<Tuple2<Long,Long>> expectedResult = Arrays.asList(new Tuple2<>(1L,1L),new Tuple2<>(2L,1L),new Tuple2<>(3L,1L),new Tuple2<>(4L,1L),new Tuple2<>(5L,1L),new Tuple2<>(6L,1L),new Tuple2<>(7L,7L),new Tuple2<>(8L,7L),new Tuple2<>(9L,7L))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "long(( aggr_values = MinimumIdFilterCounting.aggr_value@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(expectedResult,result)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24->15 [style = solid, label="aggr_values"];
25->16 [style = solid, label="expectedResult"];
18->20 [style = solid, label="AGGREGATOR_NAME"];
12->7 [style = solid, label="result"];
16->24 [style = bold, label=""];
3->27 [style = dashed, label="0"];
1->3 [style = bold, label=""];
18->19 [style = bold, label=""];
18->27 [style = solid, label="AGGREGATOR_NAME"];
0->11 [style = bold, label=""];
20->3 [style = bold, label=""];
3->12 [style = bold, label=""];
19->20 [style = solid, label="componentId"];
25->16 [style = bold, label=""];
2->7 [style = solid, label="result"];
26->22 [style = bold, label=""];
2->16 [style = solid, label="result"];
9->6 [style = bold, label=""];
14->7 [style = bold, label=""];
3->27 [style = bold, label=""];
24->28 [style = solid, label="aggr_values"];
8->0 [style = bold, label=""];
5->21 [style = bold, label=""];
6->5 [style = bold, label=""];
12->2 [style = bold, label=""];
12->2 [style = solid, label="result"];
22->18 [style = bold, label=""];
21->20 [style = bold, label=""];
24->23 [style = solid, label="aggr_values"];
2->14 [style = dashed, label="0"];
19->9 [style = bold, label=""];
15->28 [style = bold, label=""];
0->3 [style = solid, label="UPDATED_ELEMENTS"];
11->10 [style = bold, label=""];
28->23 [style = bold, label=""];
12->14 [style = solid, label="result"];
22->21 [style = solid, label="MAX_ITERATIONS"];
5->4 [style = bold, label=""];
24->17 [style = bold, label=""];
12->14 [style = bold, label=""];
17->15 [style = bold, label=""];
0->4 [style = solid, label="UPDATED_ELEMENTS"];
5->21 [style = dashed, label="0"];
24->17 [style = solid, label="aggr_values"];
10->9 [style = bold, label=""];
4->1 [style = bold, label=""];
7->25 [style = bold, label=""];
2->7 [style = bold, label=""];
11->4 [style = solid, label="convergence_threshold"];
27->2 [style = bold, label=""];
13->0 [style = bold, label=""];
}
