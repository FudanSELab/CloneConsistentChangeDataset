digraph {
2 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1192da),sn.getServersForQueue(\"c\",Collections.EMPTY_SET,-1))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119303),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "sn.removeServer(l1)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "sn.updateLoad(l1,\"\",new ServerLoad(10,1,1,1))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "ServerLocation l2 = new ServerLocation(\"localhost\",2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "sn.removeServer(l1,\"\")@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "sn.addServer(l2,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119123,new ServerLoad(1,1,1,1))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "ServerLocation l1 = new ServerLocation(\"localhost\",1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "sn.addServer(l1,new String((((,new ServerLoad(1,1,1,1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "sn.addServer(l1,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119113,new ServerLoad(1,1,1,1))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11936f),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@42@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "sn.updateLoad(l2,new ServerLoad(100,1,1,1))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "sn.addServer(l2,\"\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119266,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "sn.removeServer(l1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11935c),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertNotNull(sn.getServerForConnection(null,Collections.EMPTY_SET))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "sn.updateLoad(l2,\"\",new ServerLoad(100,1,1,1))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testRemoveServer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1192ee),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,-1))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1192c6),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertNull(sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1193c0),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(Collections.singletonList(l2),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testGroups['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119318),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "sn.updateLoad(l1,new ServerLoad(10,1,1,1))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testGroups['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "LocatorLoadSnapshot sn = new LocatorLoadSnapshot()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "sn.addServer(l2,new String((((,new ServerLoad(100,.2f,10,.2f))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "sn.addServer(l1,\"\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119254,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->0 [style = solid, label="l1"];
10->4 [style = solid, label="l2"];
14->3 [style = bold, label=""];
19->23 [style = solid, label="l1"];
10->38 [style = solid, label="l2"];
24->12 [style = bold, label=""];
19->1 [style = solid, label="l1"];
10->33 [style = solid, label="l2"];
16->18 [style = bold, label=""];
16->38 [style = dashed, label="0"];
32->37 [style = bold, label=""];
23->5 [style = bold, label=""];
21->34 [style = dashed, label="0"];
11->1 [style = bold, label=""];
6->22 [style = bold, label=""];
31->9 [style = bold, label=""];
19->24 [style = solid, label="l1"];
19->32 [style = solid, label="l1"];
26->25 [style = bold, label=""];
28->11 [style = bold, label=""];
4->15 [style = bold, label=""];
27->3 [style = bold, label=""];
29->9 [style = bold, label=""];
34->33 [style = bold, label=""];
10->0 [style = solid, label="l2"];
20->28 [style = dashed, label="0"];
35->32 [style = bold, label=""];
19->10 [style = bold, label=""];
12->30 [style = bold, label=""];
10->26 [style = bold, label=""];
19->11 [style = solid, label="l1"];
10->6 [style = solid, label="l2"];
10->21 [style = bold, label=""];
19->26 [style = solid, label="l1"];
20->11 [style = bold, label=""];
19->27 [style = solid, label="l1"];
19->35 [style = solid, label="l1"];
14->27 [style = dashed, label="0"];
19->14 [style = solid, label="l1"];
22->7 [style = bold, label=""];
10->25 [style = solid, label="l2"];
10->3 [style = solid, label="l2"];
10->35 [style = solid, label="l2"];
10->12 [style = solid, label="l2"];
5->16 [style = bold, label=""];
10->28 [style = solid, label="l2"];
19->34 [style = solid, label="l1"];
4->25 [style = dashed, label="0"];
10->24 [style = solid, label="l2"];
15->17 [style = bold, label=""];
3->28 [style = bold, label=""];
3->20 [style = bold, label=""];
2->0 [style = bold, label=""];
13->27 [style = bold, label=""];
19->21 [style = solid, label="l1"];
19->12 [style = solid, label="l1"];
10->34 [style = bold, label=""];
19->30 [style = solid, label="l1"];
18->6 [style = bold, label=""];
30->5 [style = bold, label=""];
21->26 [style = dashed, label="0"];
37->38 [style = bold, label=""];
0->24 [style = bold, label=""];
33->36 [style = bold, label=""];
10->20 [style = solid, label="l2"];
10->37 [style = solid, label="l2"];
23->30 [style = dashed, label="0"];
8->9 [style = bold, label=""];
25->15 [style = bold, label=""];
9->19 [style = bold, label=""];
19->36 [style = solid, label="l1"];
10->7 [style = solid, label="l2"];
17->13 [style = bold, label=""];
1->2 [style = bold, label=""];
12->23 [style = bold, label=""];
10->2 [style = solid, label="l2"];
36->35 [style = bold, label=""];
10->16 [style = solid, label="l2"];
10->13 [style = solid, label="l2"];
13->14 [style = bold, label=""];
10->5 [style = solid, label="l2"];
5->37 [style = dashed, label="0"];
19->17 [style = solid, label="l1"];
21->4 [style = bold, label=""];
}
