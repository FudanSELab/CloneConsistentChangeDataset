digraph {
7 [style = filled, label = "final String outputPath = args(4(@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "String(( args@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "env.setParallelism(parallelism)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "env.setStateBackend(new FsStateBackend(checkpointPath))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final String host = args(1(@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final String outputPath = args(6(@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "env.setStateBackend(new FsStateBackend(checkpointPath))@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(host,port,jarFile)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "env.execute()@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "main['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(host,port,jarFile)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "env.enableCheckpointing(100)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "source.map(new MapFunction<Integer,Tuple2<Integer,Integer>>(){@Override public Tuple2<Integer,Integer> map(Integer value){return new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism),value)}}).keyBy(new KeySelector<Tuple2<Integer,Integer>,Integer>(){@Override public Integer getKey(Tuple2<Integer,Integer> value){return value.f0}}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "env.enableCheckpointing(checkpointingInterval)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "env.execute()@@@26@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "source.map(new MapFunction<Integer,Tuple2<Integer,Integer>>(){@Override public Tuple2<Integer,Integer> map(Integer value){return new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism),value)}}).keyBy(new KeySelector<Tuple2<Integer,Integer>,Integer>(){@Override public Integer getKey(Tuple2<Integer,Integer> value){return value.f0}}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath,FileSystem.WriteMode.OVERWRITE)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "env.getConfig().disableSysoutLogging()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "env.setParallelism(parallelism)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "final String checkpointPath = args(0(@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "final String jarFile = args(0(@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final int parallelism = 1@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final int port = Integer.parseInt(args(2()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final String outputPath = args(1(@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "final String checkpointPath = args(4(@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final int checkpointingInterval = Integer.parseInt(args(5()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "env.getConfig().disableSysoutLogging()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final int parallelism = Integer.parseInt(args(3()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final String checkpointPath = args(3(@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "main['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DataStream<Integer> source = env.addSource(new InfiniteIntegerSource())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "main['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "env.execute()@@@29@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11->16 [style = bold, label=""];
11->28 [style = bold, label=""];
8->10 [style = bold, label=""];
18->3 [style = bold, label=""];
17->5 [style = bold, label=""];
23->20 [style = bold, label=""];
4->16 [style = solid, label="args"];
32->5 [style = bold, label=""];
12->5 [style = solid, label="host"];
29->15 [style = bold, label=""];
15->2 [style = solid, label="jarFile"];
12->2 [style = solid, label="host"];
9->0 [style = bold, label=""];
26->32 [style = bold, label=""];
12->23 [style = dashed, label="0"];
3->26 [style = dashed, label="0"];
0->19 [style = bold, label=""];
4->32 [style = solid, label="args"];
11->5 [style = solid, label="port"];
4->12 [style = solid, label="args"];
12->11 [style = bold, label=""];
16->7 [style = bold, label=""];
22->1 [style = solid, label="checkpointPath"];
9->30 [style = bold, label=""];
4->22 [style = solid, label="args"];
20->18 [style = solid, label="parallelism"];
24->18 [style = bold, label=""];
22->23 [style = bold, label=""];
10->6 [style = bold, label=""];
21->4 [style = dotted, label="true"];
3->5 [style = solid, label="parallelism"];
7->3 [style = bold, label=""];
1->9 [style = bold, label=""];
7->6 [style = solid, label="outputPath"];
15->22 [style = dashed, label="0"];
23->0 [style = solid, label="outputPath"];
4->7 [style = solid, label="args"];
16->8 [style = solid, label="checkpointPath"];
4->11 [style = solid, label="args"];
4->25 [style = solid, label="args"];
5->1 [style = bold, label=""];
15->5 [style = solid, label="jarFile"];
6->27 [style = bold, label=""];
25->31 [style = solid, label="checkpointPath"];
28->1 [style = solid, label="parallelism"];
3->2 [style = bold, label=""];
21->22 [style = bold, label=""];
30->31 [style = bold, label=""];
31->10 [style = bold, label=""];
4->15 [style = solid, label="args"];
4->28 [style = solid, label="args"];
6->13 [style = bold, label=""];
25->26 [style = bold, label=""];
29->4 [style = dotted, label="true"];
0->8 [style = bold, label=""];
7->25 [style = dashed, label="0"];
4->23 [style = solid, label="args"];
28->25 [style = bold, label=""];
32->6 [style = solid, label="outputPath"];
3->17 [style = bold, label=""];
4->26 [style = solid, label="args"];
14->15 [style = bold, label=""];
15->12 [style = bold, label=""];
2->24 [style = dashed, label="0"];
20->24 [style = bold, label=""];
11->2 [style = solid, label="port"];
14->4 [style = dotted, label="true"];
26->30 [style = solid, label="checkpointingInterval"];
9->30 [style = dashed, label="0"];
2->5 [style = bold, label=""];
}
