digraph {
8 [style = filled, label = "badSource['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "badSource['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TestHelper.assertUndeliverable(errors,0,)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "badSource['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "scheduler.triggerActions()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TestSubscriber<Integer> ts = new Flowable<Integer>(){@Override protected void subscribeActual(Subscriber<? super Integer> subscriber){subscriber.onSubscribe(new BooleanSubscription())subscriber.onComplete()subscriber.onNext(1)subscriber.onError(new TestException())subscriber.onComplete()}}.observeOn(scheduler).test()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestObserver<Integer> to = new Observable<Integer>(){@Override protected void subscribeActual(Observer<? super Integer> observer){observer.onSubscribe(Disposable.empty())observer.onComplete()observer.onNext(1)observer.onError(new TestException())observer.onComplete()}}.observeOn(scheduler).test()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ts.assertResult()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "{RxJavaPlugins.reset()}@@@20@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<Throwable> errors = TestHelper.trackPluginErrors()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestScheduler scheduler = new TestScheduler()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "to.assertResult()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->2 [style = bold, label=""];
4->1 [style = solid, label="errors"];
3->10 [style = bold, label=""];
7->1 [style = bold, label=""];
2->10 [style = dashed, label="0"];
7->11 [style = dashed, label="0"];
11->1 [style = bold, label=""];
0->4 [style = bold, label=""];
5->11 [style = bold, label=""];
4->3 [style = bold, label=""];
1->6 [style = bold, label=""];
8->4 [style = bold, label=""];
10->5 [style = bold, label=""];
5->7 [style = bold, label=""];
9->4 [style = bold, label=""];
2->5 [style = bold, label=""];
}
