digraph {
2 [style = filled, label = "ExecNode execNode = planner.translateToExecNodePlan(toScala(Collections.singletonList(relNode))).get(0)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "testParallelismSettingTranslateAndAssert['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Transformation<?> transformation = execNode.translateToPlan(planner)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testParallelismSettingTranslateAndAssert['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "Table table = batchTableEnv.sqlQuery(\"select * from hive.source_db.test_parallelism\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "ExecNode<?> execNode = planner.translateToExecNodeGraph(toScala(Collections.singletonList(relNode))).getRootNodes().get(0)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(expected,transformation.getParallelism())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "@SuppressWarnings(\"unchecked\") Transformation transformation = execNode.translateToPlan(planner)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "RelNode relNode = planner.optimize(TableTestUtil.toRelNode(table))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveCatalog,dbName,tblName).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c2bd0f).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c2bd15).commit(\"pt=1\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Table table@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveCatalog,dbName,tblName).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c2bcf7).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c2bcfd).commit(\"pt=0\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TableEnvironment tEnv@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "TableEnvironment tEnv@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Table table@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final String tblName = \"test_parallelism\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testParallelismSetting['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "batchTableEnv.executeSql(\"CREATE TABLE source_db.test_parallelism \" + \"(`year` STRING, `value` INT) partitioned by (pt int)\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testParallelismSettingTranslateAndAssert(2,table,batchTableEnv)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "PlannerBase planner = (PlannerBase)((TableEnvironmentImpl)tEnv).getPlanner()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final String dbName = \"source_db\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->1 [style = solid, label="expected"];
5->8 [style = bold, label=""];
10->12 [style = dotted, label="true"];
6->4 [style = solid, label="table"];
11->1 [style = bold, label=""];
15->21 [style = bold, label=""];
4->13 [style = bold, label=""];
5->6 [style = dotted, label="true"];
0->11 [style = dashed, label="0"];
4->2 [style = bold, label=""];
16->17 [style = bold, label=""];
5->3 [style = dotted, label="true"];
10->9 [style = dotted, label="true"];
13->11 [style = bold, label=""];
9->1 [style = solid, label="expected"];
2->0 [style = bold, label=""];
21->20 [style = bold, label=""];
19->14 [style = bold, label=""];
10->8 [style = bold, label=""];
8->11 [style = solid, label="planner"];
5->7 [style = dotted, label="true"];
2->13 [style = dashed, label="0"];
0->1 [style = bold, label=""];
17->15 [style = bold, label=""];
7->4 [style = solid, label="table"];
14->18 [style = bold, label=""];
8->0 [style = solid, label="planner"];
8->4 [style = bold, label=""];
10->7 [style = dotted, label="true"];
21->20 [style = solid, label="table"];
18->16 [style = bold, label=""];
}
