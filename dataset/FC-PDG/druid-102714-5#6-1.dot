digraph {
18 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@914f33)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "VarianceAggregatorCollector holder2 = new VarianceAggregatorCollector()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new VarianceAggregatorFactory(\"a0:agg\",\"d1\",\"sample\",\"double\"),new VarianceAggregatorFactory(\"a1:agg\",\"f1\",\"sample\",\"float\"),new VarianceAggregatorFactory(\"a2:agg\",\"l1\",\"sample\",\"long\"))).postAggregators(new StandardDeviationPostAggregator(\"a0\",\"a0:agg\",\"sample\"),new StandardDeviationPostAggregator(\"a1\",\"a1:agg\",\"sample\"),new StandardDeviationPostAggregator(\"a2\",\"a2:agg\",\"sample\")).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "i < expectedResults.size()@@@23@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "VarianceAggregatorCollector holder1 = new VarianceAggregatorCollector()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "queryLogHook.clearRecordedQueries()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new VarianceAggregatorFactory(\"a0:agg\",\"d1\",\"population\",\"double\"),new VarianceAggregatorFactory(\"a1:agg\",\"f1\",\"population\",\"float\"),new VarianceAggregatorFactory(\"a2:agg\",\"l1\",\"population\",\"long\"))).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "VarianceAggregatorCollector holder3 = new VarianceAggregatorCollector()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "i++@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int i = 0@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertArrayEquals(expectedResults.get(i),results.get(i))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testVarPop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Object raw3 = row.getRaw(\"l1\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Object raw2 = row.getRaw(\"f1\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91501b)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testStdDevSamp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT,authenticationResult).toList()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Object raw1 = row.getRaw(\"d1\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testVarPop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Object raw1 = row.getRaw(\"d1\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT,authenticationResult).toList()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "addToHolder(holder2,raw2)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT,CalciteTestBase.DEFAULT_PARAMETERS,authenticationResult).toList()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "addToHolder(holder3,raw3)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final String sql = \"SELECT\" + \"STDDEV_SAMP(d1),\" + \"STDDEV_SAMP(f1),\" + \"STDDEV_SAMP(l1)\" + \"FROM numfoo\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "addToHolder(holder1,raw1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
9->22 [style = bold, label=""];
3->29 [style = dashed, label="0"];
0->26 [style = bold, label=""];
12->5 [style = bold, label=""];
7->9 [style = solid, label="raw2"];
5->23 [style = bold, label=""];
0->9 [style = solid, label="holder3"];
26->22 [style = solid, label="holder3"];
16->6 [style = bold, label=""];
1->5 [style = solid, label="i"];
8->3 [style = bold, label=""];
12->11 [style = bold, label=""];
25->3 [style = bold, label=""];
18->19 [style = bold, label=""];
21->8 [style = bold, label=""];
22->28 [style = bold, label=""];
28->1 [style = bold, label=""];
5->11 [style = solid, label="i"];
11->5 [style = solid, label="i"];
26->4 [style = bold, label=""];
13->23 [style = dashed, label="0"];
4->7 [style = bold, label=""];
7->9 [style = solid, label="raw3"];
16->22 [style = solid, label="raw3"];
12->27 [style = solid, label="i"];
22->4 [style = bold, label=""];
20->2 [style = bold, label=""];
4->6 [style = solid, label="raw2"];
2->16 [style = solid, label="holder1"];
12->11 [style = dotted, label="true"];
3->10 [style = bold, label=""];
12->13 [style = bold, label=""];
19->1 [style = bold, label=""];
11->5 [style = bold, label=""];
0->14 [style = bold, label=""];
3->20 [style = bold, label=""];
29->2 [style = bold, label=""];
17->0 [style = bold, label=""];
9->18 [style = bold, label=""];
17->6 [style = solid, label="holder1"];
12->5 [style = solid, label="i"];
27->11 [style = bold, label=""];
5->11 [style = dotted, label="true"];
5->12 [style = bold, label=""];
12->5 [style = dotted, label="true"];
0->9 [style = solid, label="holder2"];
24->25 [style = bold, label=""];
1->12 [style = solid, label="i"];
4->6 [style = solid, label="raw1"];
7->16 [style = bold, label=""];
14->16 [style = solid, label="raw1"];
5->27 [style = dotted, label="true"];
1->12 [style = bold, label=""];
9->14 [style = bold, label=""];
1->11 [style = solid, label="i"];
10->20 [style = dashed, label="0"];
10->2 [style = bold, label=""];
12->11 [style = solid, label="i"];
5->27 [style = bold, label=""];
11->27 [style = solid, label="i"];
6->9 [style = bold, label=""];
17->6 [style = solid, label="holder2"];
5->12 [style = solid, label="i"];
15->8 [style = bold, label=""];
3->29 [style = bold, label=""];
14->4 [style = bold, label=""];
}
