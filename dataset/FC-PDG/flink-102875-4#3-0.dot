digraph {
12 [style = filled, label = "testIsAvailableWithBufferedDataInDeserializer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "buffers.add(createDataBuffer())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertHasNextElement(input,output)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<BufferOrEvent> buffers = new ArrayList<>(2)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "buffers.add(new BufferOrEvent(barrier,0))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "CheckpointBarrier barrier = new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testNoDataProcessedAfterCheckpointBarrier['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "StreamTaskNetworkInput input = createStreamTaskNetworkInput(buffers,output)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(2,output.getNumberOfEmittedRecords())@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "VerifyRecordsDataOutput output = new VerifyRecordsDataOutput<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testNoDataProcessedAfterCheckpointBarrier['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<BufferOrEvent> buffers = Collections.singletonList(createDataBuffer())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(0,output.getNumberOfEmittedRecords())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertHasNextElement(input,output)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "buffers.add(new BufferOrEvent(barrier,new InputChannelInfo(0,0)))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertHasNextElement(input,output)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
9->0 [style = bold, label=""];
11->14 [style = bold, label=""];
7->4 [style = solid, label="input"];
15->11 [style = solid, label="output"];
11->14 [style = solid, label="input"];
2->3 [style = bold, label=""];
3->6 [style = bold, label=""];
10->3 [style = bold, label=""];
13->11 [style = solid, label="buffers"];
7->4 [style = bold, label=""];
11->6 [style = solid, label="input"];
2->10 [style = dashed, label="0"];
8->0 [style = bold, label=""];
12->13 [style = bold, label=""];
15->6 [style = solid, label="output"];
5->2 [style = bold, label=""];
15->11 [style = bold, label=""];
6->7 [style = solid, label="output"];
0->10 [style = solid, label="barrier"];
15->14 [style = solid, label="output"];
4->1 [style = bold, label=""];
13->15 [style = bold, label=""];
6->7 [style = bold, label=""];
6->4 [style = solid, label="output"];
5->7 [style = solid, label="buffers"];
14->6 [style = bold, label=""];
0->2 [style = solid, label="barrier"];
0->5 [style = bold, label=""];
}
