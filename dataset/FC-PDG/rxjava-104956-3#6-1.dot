digraph {
9 [style = filled, label = "final List<Throwable> list = new CopyOnWriteArrayList<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "{RxJavaPlugins.reset()}@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(1,list.size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Burst.items(1).error(e2).collect(supplierListCreator(),biConsumerThrows(e1)).test().assertError(e1).assertNotComplete()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final RuntimeException e2 = new RuntimeException()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "RxJavaPlugins.setErrorHandler(addToList(list))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "collectorFailureDoesNotResultInTwoErrorEmissionsFlowable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final List<Throwable> list = new CopyOnWriteArrayList<Throwable>()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(e2,list.get(0).getCause())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RuntimeException e1 = new RuntimeException()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "collectorFailureDoesNotResultInTwoErrorEmissions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "collectorFailureDoesNotResultInTwoErrorEmissions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Burst.items(1).error(e2).collect(supplierListCreator(),biConsumerThrows(e1)).toFlowable().test().assertError(e1).assertNotComplete()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3->0 [style = solid, label="list"];
1->8 [style = solid, label="e2"];
5->8 [style = bold, label=""];
4->3 [style = bold, label=""];
2->12 [style = dashed, label="0"];
1->2 [style = bold, label=""];
8->6 [style = bold, label=""];
9->0 [style = solid, label="list"];
7->1 [style = bold, label=""];
10->9 [style = bold, label=""];
9->0 [style = bold, label=""];
12->5 [style = bold, label=""];
3->9 [style = dashed, label="0"];
11->3 [style = bold, label=""];
3->0 [style = bold, label=""];
2->5 [style = bold, label=""];
0->7 [style = bold, label=""];
1->12 [style = bold, label=""];
}
