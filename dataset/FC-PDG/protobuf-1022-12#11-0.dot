digraph {
5 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSerializeError(e.getMessage()).build()@@@61@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "request.getTestCategory() == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST@@@37@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "request.getPayloadCase()@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "throw new RuntimeException(\"Unspecified output format.\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "isProto3@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "{throw new RuntimeException(\"Unexpected payload case.\")}@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "doTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "{try {TestMessagesProto3.TestAllTypesProto3.Builder builder = TestMessagesProto3.TestAllTypesProto3.newBuilder()JsonFormat.Parser parser = JsonFormat.parser().usingTypeRegistry(typeRegistry)if (request.getTestCategory() == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST) {parser = parser.ignoringUnknownFields()}parser.merge(request.getJsonPayload(),builder)testMessage = builder.build()}catch (InvalidProtocolBufferException e) break}@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Conformance.TestAllTypes testMessage@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "throw new RuntimeException(\"Unspecified output format.\")@@@52@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "{return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support JSON format.\").build()}@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "{ByteString MessageString = testMessage.toByteString()return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build()}@@@53@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "{throw new RuntimeException(\"Request didn't have payload.\")}@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "boolean isProto2 = request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "{throw new RuntimeException(\"Request didn't have payload.\")}@@@48@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "{try {testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload())}catch (InvalidProtocolBufferException e) break}@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "request.getPayloadCase()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Conformance.ConformanceRequest request@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "request.getRequestedOutputFormat()@@@24@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "InvalidProtocolBufferException|IllegalArgumentException e@@@64@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSerializeError(e.getMessage()).build()@@@65@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "throw new RuntimeException(\"Unspecified output format.\")@@@56@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "boolean isProto3 = request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "request.getRequestedOutputFormat()@@@55@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "{throw new RuntimeException(\"Unexpected payload case.\")}@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "InvalidProtocolBufferException|IllegalArgumentException e@@@60@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "doTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "{if (isProto3) {try {ExtensionRegistry extensions = ExtensionRegistry.newInstance()TestMessagesProto3.registerAllExtensions(extensions)testMessage = parseBinary(request.getProtobufPayload(),TestAllTypesProto3.parser(),extensions)}catch (InvalidProtocolBufferException e) }if (isProto2) {try {ExtensionRegistry extensions = ExtensionRegistry.newInstance()TestMessagesProto2.registerAllExtensions(extensions)testMessage = parseBinary(request.getProtobufPayload(),TestAllTypesProto2.parser(),extensions)}catch (InvalidProtocolBufferException e) }{throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\")}break}@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "{throw new RuntimeException(\"Unexpected request output.\")}@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "com.google.protobuf.AbstractMessage testMessage@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "{throw new RuntimeException(\"Unexpected request output.\")}@@@67@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "{throw new RuntimeException(\"Unexpected request output.\")}@@@63@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support JSON format.\").build()@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "{ByteString MessageString = testMessage.toByteString()return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build()}@@@57@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setJsonPayload(JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build()@@@62@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setJsonPayload(JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build()@@@58@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "doTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28->31 [style = bold, label=""];
19->21 [style = dotted, label="true"];
23->22 [style = bold, label=""];
10->37 [style = bold, label=""];
30->34 [style = bold, label=""];
5->8 [style = bold, label=""];
28->35 [style = bold, label=""];
1->10 [style = bold, label=""];
21->22 [style = bold, label=""];
34->28 [style = bold, label=""];
1->29 [style = dotted, label="true"];
23->24 [style = bold, label=""];
12->11 [style = dotted, label="true"];
12->15 [style = bold, label=""];
9->7 [style = dotted, label="true"];
28->32 [style = bold, label=""];
4->14 [style = solid, label="isProto2"];
1->29 [style = bold, label=""];
23->24 [style = dotted, label="true"];
12->15 [style = dotted, label="true"];
2->10 [style = bold, label=""];
9->0 [style = bold, label=""];
0->3 [style = bold, label=""];
3->14 [style = solid, label="isProto3"];
12->23 [style = bold, label=""];
2->25 [style = bold, label=""];
25->12 [style = bold, label=""];
31->32 [style = bold, label=""];
1->37 [style = bold, label=""];
4->2 [style = bold, label=""];
24->22 [style = bold, label=""];
12->16 [style = bold, label=""];
10->12 [style = bold, label=""];
1->33 [style = bold, label=""];
1->33 [style = dotted, label="true"];
19->21 [style = bold, label=""];
27->24 [style = bold, label=""];
0->34 [style = dashed, label="0"];
32->35 [style = bold, label=""];
2->26 [style = dotted, label="true"];
28->36 [style = bold, label=""];
11->8 [style = bold, label=""];
2->13 [style = dotted, label="true"];
23->18 [style = dotted, label="true"];
2->1 [style = bold, label=""];
20->7 [style = dotted, label="true"];
15->16 [style = bold, label=""];
6->25 [style = bold, label=""];
35->36 [style = bold, label=""];
14->6 [style = bold, label=""];
36->1 [style = bold, label=""];
30->7 [style = dotted, label="true"];
29->10 [style = bold, label=""];
23->18 [style = bold, label=""];
2->6 [style = bold, label=""];
2->14 [style = bold, label=""];
12->11 [style = bold, label=""];
20->0 [style = bold, label=""];
16->29 [style = dashed, label="0"];
18->27 [style = bold, label=""];
16->11 [style = bold, label=""];
12->8 [style = bold, label=""];
6->1 [style = bold, label=""];
33->29 [style = bold, label=""];
17->5 [style = dotted, label="true"];
3->4 [style = bold, label=""];
17->5 [style = bold, label=""];
1->10 [style = dotted, label="true"];
2->12 [style = bold, label=""];
23->27 [style = bold, label=""];
}
