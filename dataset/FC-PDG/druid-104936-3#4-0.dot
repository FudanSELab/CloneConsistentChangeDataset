digraph {
28 [style = filled, label = "assertOutputType(\"greatest(y, 0)\",inputTypes,ExprType.LONG)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertOutputType(\"if(y,2,3.0)\",inputTypes,ExprType.DOUBLE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertOutputType(\"case_searched(x=='baz','is baz',x=='foo','is foo','is other')\",inputTypes,ExprType.STRING)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertOutputType(\"least(34.0, z, 5.0, 767.0)\",inputTypes,ExprType.DOUBLE)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertOutputType(\"case_simple(z,2.0,2.0,3.0,3.0,4.0)\",inputTypes,ExprType.DOUBLE)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertOutputType(\"notnull(y)\",inputTypes,ExprType.LONG)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1,z==2.0,2,null)\",inputTypes,ExprType.LONG)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertOutputType(\"isnull(z)\",inputTypes,ExprType.LONG)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertOutputType(\"if(y, 'foo', 'bar')\",inputTypes,ExprType.STRING)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertOutputType(\"if(y,2,3)\",inputTypes,ExprType.LONG)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1.0,z==2.0,2.0,null)\",inputTypes,ExprType.DOUBLE)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertOutputType(\"isnull(x)\",inputTypes,ExprType.LONG)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertOutputType(\"nvl(y, 1)\",inputTypes,ExprType.LONG)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertOutputType(\"case_searched(y==1,1,y==2,2.0,0)\",inputTypes,ExprType.DOUBLE)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertOutputType(\"greatest(34.0, z, 5.0, 767.0)\",inputTypes,ExprType.DOUBLE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testConditionalFunctions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "assertOutputType(\"greatest('B', x, 'A')\",inputTypes,ExprType.STRING)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertOutputType(\"least('B', x, 'A')\",inputTypes,ExprType.STRING)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertOutputType(\"nvl(z, 2.0)\",inputTypes,ExprType.DOUBLE)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertOutputType(\"nvl(x, 'foo')\",inputTypes,ExprType.STRING)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertOutputType(\"nvl(y, 2.0)\",inputTypes,ExprType.DOUBLE)@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertOutputType(\"least(y, 0)\",inputTypes,ExprType.LONG)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertOutputType(\"isnull(y)\",inputTypes,ExprType.LONG)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertOutputType(\"case_searched(y==1,1,y==2,2,0)\",inputTypes,ExprType.LONG)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertOutputType(\"case_simple(x,'baz','is baz','foo','is foo','is other')\",inputTypes,ExprType.STRING)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertOutputType(\"case_simple(y,2,2,3,3.0,4)\",inputTypes,ExprType.DOUBLE)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertOutputType(\"case_simple(z,2.0,2.0,3.0,3.0,null)\",inputTypes,ExprType.DOUBLE)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testConditionalFunctions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertOutputType(\"notnull(x)\",inputTypes,ExprType.LONG)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertOutputType(\"case_simple(y,2,2,3,3,4)\",inputTypes,ExprType.LONG)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertOutputType(\"notnull(z)\",inputTypes,ExprType.LONG)@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1.0,z==2.0,2.0,0.0)\",inputTypes,ExprType.DOUBLE)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testReduceFunctions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertOutputType(\"nvl(y, 1.1)\",inputTypes,ExprType.DOUBLE)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
24->21 [style = bold, label=""];
29->30 [style = bold, label=""];
3->11 [style = bold, label=""];
27->33 [style = bold, label=""];
4->7 [style = bold, label=""];
10->2 [style = bold, label=""];
0->28 [style = dashed, label="0"];
14->33 [style = dashed, label="0"];
13->19 [style = bold, label=""];
19->1 [style = bold, label=""];
15->4 [style = bold, label=""];
9->13 [style = bold, label=""];
26->10 [style = bold, label=""];
11->6 [style = bold, label=""];
1->25 [style = bold, label=""];
12->24 [style = bold, label=""];
31->32 [style = bold, label=""];
4->30 [style = dashed, label="0"];
7->14 [style = bold, label=""];
5->17 [style = bold, label=""];
12->9 [style = bold, label=""];
8->18 [style = bold, label=""];
30->27 [style = bold, label=""];
0->15 [style = bold, label=""];
22->26 [style = bold, label=""];
21->20 [style = bold, label=""];
25->5 [style = bold, label=""];
16->3 [style = bold, label=""];
32->28 [style = bold, label=""];
15->29 [style = dashed, label="0"];
1->5 [style = bold, label=""];
23->18 [style = bold, label=""];
13->1 [style = bold, label=""];
28->29 [style = bold, label=""];
20->9 [style = bold, label=""];
14->10 [style = bold, label=""];
7->27 [style = dashed, label="0"];
17->16 [style = bold, label=""];
2->12 [style = bold, label=""];
18->32 [style = dashed, label="0"];
18->0 [style = bold, label=""];
14->22 [style = bold, label=""];
}
