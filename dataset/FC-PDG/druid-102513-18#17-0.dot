digraph {
7 [style = filled, label = "testCanStartFromLaterThanEarliestOffset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2008/P1D\",0,ImmutableList.of(\"a\")),sdd(\"2009/P1D\",0,ImmutableList.of(\"b\"))),publishedDescriptors())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(),currentOffsets)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "maxTotalRows = null@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Thread.sleep(10)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,INPUT_FORMAT))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "insertData()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testCanStartFromLaterThanEarliestOffset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions))))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getProcessed())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,1L),ImmutableSet.of())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,1L,1,0L))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
10->15 [style = dashed, label="0"];
31->25 [style = bold, label=""];
4->17 [style = bold, label=""];
25->22 [style = bold, label=""];
29->30 [style = bold, label=""];
26->5 [style = bold, label=""];
10->13 [style = solid, label="endPartitions"];
27->31 [style = bold, label=""];
6->5 [style = solid, label="consumerProps"];
6->2 [style = solid, label="consumerProps"];
11->17 [style = dashed, label="0"];
8->13 [style = solid, label="baseSequenceName"];
7->8 [style = bold, label=""];
11->13 [style = solid, label="startPartitions"];
30->29 [style = bold, label=""];
24->20 [style = solid, label="currentOffsets"];
1->9 [style = bold, label=""];
13->5 [style = solid, label="task"];
9->6 [style = bold, label=""];
15->26 [style = bold, label=""];
2->5 [style = solid, label="task"];
24->20 [style = bold, label=""];
8->0 [style = bold, label=""];
17->5 [style = solid, label="startPartitions"];
10->2 [style = solid, label="endPartitions"];
6->4 [style = bold, label=""];
26->5 [style = solid, label="endPartitions"];
6->13 [style = solid, label="consumerProps"];
0->23 [style = bold, label=""];
8->5 [style = solid, label="baseSequenceName"];
10->13 [style = bold, label=""];
18->27 [style = bold, label=""];
11->2 [style = solid, label="startPartitions"];
11->10 [style = bold, label=""];
12->8 [style = bold, label=""];
0->1 [style = bold, label=""];
2->13 [style = dashed, label="0"];
28->8 [style = bold, label=""];
17->15 [style = bold, label=""];
29->30 [style = dotted, label="true"];
13->5 [style = bold, label=""];
21->16 [style = bold, label=""];
16->14 [style = bold, label=""];
14->18 [style = bold, label=""];
10->2 [style = bold, label=""];
24->19 [style = solid, label="currentOffsets"];
8->2 [style = solid, label="baseSequenceName"];
17->14 [style = solid, label="startPartitions"];
4->11 [style = bold, label=""];
29->24 [style = bold, label=""];
20->19 [style = bold, label=""];
23->9 [style = bold, label=""];
5->3 [style = solid, label="task"];
3->29 [style = bold, label=""];
2->5 [style = bold, label=""];
19->21 [style = bold, label=""];
}
