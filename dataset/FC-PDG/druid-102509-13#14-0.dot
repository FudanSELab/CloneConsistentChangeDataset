digraph {
30 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,1L,1,0L))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Thread.sleep(10)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,4L,1,2L))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "insertData()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "insertData()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@43@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,checkpoint.getPartitionSequenceNumberMap())))))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getProcessed())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2->42 [style = dashed, label="0"];
44->1 [style = solid, label="desc4"];
32->22 [style = bold, label=""];
46->30 [style = solid, label="desc2"];
37->46 [style = dashed, label="0"];
19->28 [style = solid, label="desc7"];
59->58 [style = bold, label=""];
37->55 [style = solid, label="desc2"];
58->9 [style = bold, label=""];
51->32 [style = bold, label=""];
35->41 [style = solid, label="task"];
25->35 [style = solid, label="startPartitions"];
14->7 [style = bold, label=""];
36->29 [style = solid, label="currentOffsets"];
35->15 [style = solid, label="task"];
44->12 [style = solid, label="desc4"];
24->49 [style = bold, label=""];
23->33 [style = bold, label=""];
36->24 [style = bold, label=""];
20->16 [style = bold, label=""];
33->18 [style = bold, label=""];
5->0 [style = bold, label=""];
49->10 [style = bold, label=""];
18->35 [style = bold, label=""];
9->5 [style = bold, label=""];
40->12 [style = solid, label="desc3"];
41->26 [style = solid, label="desc6"];
26->28 [style = bold, label=""];
8->4 [style = bold, label=""];
37->30 [style = solid, label="desc2"];
5->36 [style = bold, label=""];
20->34 [style = dotted, label="true"];
15->1 [style = solid, label="desc4"];
45->41 [style = bold, label=""];
22->25 [style = bold, label=""];
42->46 [style = bold, label=""];
57->61 [style = bold, label=""];
19->12 [style = bold, label=""];
42->39 [style = solid, label="desc1"];
16->56 [style = bold, label=""];
36->21 [style = solid, label="currentOffsets"];
52->60 [style = solid, label="desc1"];
20->34 [style = bold, label=""];
52->37 [style = bold, label=""];
31->61 [style = dashed, label="0"];
46->12 [style = solid, label="desc2"];
41->12 [style = solid, label="desc6"];
31->11 [style = bold, label=""];
35->37 [style = solid, label="task"];
56->51 [style = bold, label=""];
60->55 [style = bold, label=""];
37->12 [style = solid, label="desc2"];
43->12 [style = bold, label=""];
58->9 [style = solid, label="task"];
18->35 [style = solid, label="endPartitions"];
35->9 [style = solid, label="task"];
45->1 [style = solid, label="desc5"];
46->40 [style = bold, label=""];
44->45 [style = bold, label=""];
35->40 [style = solid, label="task"];
41->43 [style = bold, label=""];
45->12 [style = solid, label="desc5"];
52->6 [style = solid, label="desc1"];
36->24 [style = solid, label="currentOffsets"];
6->48 [style = bold, label=""];
35->19 [style = solid, label="task"];
2->12 [style = solid, label="desc1"];
35->44 [style = solid, label="task"];
14->1 [style = solid, label="desc5"];
15->14 [style = bold, label=""];
16->8 [style = bold, label=""];
21->57 [style = bold, label=""];
35->43 [style = solid, label="task"];
16->58 [style = solid, label="baseSequenceName"];
23->21 [style = solid, label="startPartitions"];
35->9 [style = bold, label=""];
43->12 [style = solid, label="desc7"];
19->12 [style = solid, label="desc7"];
5->0 [style = dotted, label="true"];
43->28 [style = solid, label="desc7"];
6->38 [style = solid, label="desc3"];
6->40 [style = dashed, label="0"];
6->15 [style = bold, label=""];
38->1 [style = bold, label=""];
58->37 [style = solid, label="task"];
27->39 [style = bold, label=""];
14->12 [style = solid, label="desc5"];
2->39 [style = solid, label="desc1"];
37->6 [style = solid, label="desc2"];
10->13 [style = bold, label=""];
34->16 [style = bold, label=""];
14->45 [style = dashed, label="0"];
16->35 [style = solid, label="baseSequenceName"];
29->10 [style = bold, label=""];
22->58 [style = solid, label="consumerProps"];
7->41 [style = dashed, label="0"];
42->12 [style = solid, label="desc1"];
7->26 [style = solid, label="desc6"];
35->42 [style = solid, label="task"];
7->19 [style = bold, label=""];
12->27 [style = bold, label=""];
7->12 [style = solid, label="desc6"];
40->44 [style = bold, label=""];
0->5 [style = bold, label=""];
35->14 [style = solid, label="task"];
23->53 [style = dashed, label="0"];
6->12 [style = solid, label="desc3"];
30->38 [style = bold, label=""];
35->45 [style = solid, label="task"];
35->7 [style = solid, label="task"];
15->12 [style = solid, label="desc4"];
25->23 [style = bold, label=""];
35->6 [style = solid, label="task"];
17->31 [style = bold, label=""];
58->52 [style = solid, label="task"];
11->50 [style = dashed, label="0"];
35->46 [style = solid, label="task"];
15->44 [style = dashed, label="0"];
54->20 [style = bold, label=""];
24->29 [style = bold, label=""];
48->60 [style = bold, label=""];
11->42 [style = bold, label=""];
37->6 [style = bold, label=""];
1->26 [style = bold, label=""];
32->35 [style = solid, label="consumerProps"];
50->52 [style = bold, label=""];
11->2 [style = bold, label=""];
17->57 [style = dashed, label="0"];
39->30 [style = bold, label=""];
35->2 [style = solid, label="task"];
59->58 [style = solid, label="endPartitions"];
8->56 [style = dashed, label="0"];
3->20 [style = bold, label=""];
36->49 [style = solid, label="currentOffsets"];
53->59 [style = bold, label=""];
19->43 [style = dashed, label="0"];
25->21 [style = solid, label="startPartitions"];
47->20 [style = bold, label=""];
61->50 [style = bold, label=""];
23->53 [style = bold, label=""];
33->59 [style = dashed, label="0"];
40->38 [style = solid, label="desc3"];
2->37 [style = bold, label=""];
13->21 [style = bold, label=""];
21->17 [style = bold, label=""];
4->32 [style = bold, label=""];
23->58 [style = solid, label="startPartitions"];
}
