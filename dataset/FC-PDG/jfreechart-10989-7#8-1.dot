digraph {
14 [style = filled, label = "XYIntervalSeriesCollection<String> c1 = new XYIntervalSeriesCollection<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "XYIntervalSeriesCollection c2 = CloneUtils.clone(c1)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertFalse(c1.equals(c2))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "s1.add(1.0,1.1,1.2,1.3,1.4,1.5)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(c1.equals(c2))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "c2.addSeries(new XYIntervalSeries<>(\"Empty\"))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "c2.addSeries(new XYIntervalSeries(\"Empty\"))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "XYIntervalSeriesCollection c2 = TestUtils.serialised(c1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "XYIntervalSeries<String> s1 = new XYIntervalSeries<>(\"Series\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertTrue(c1.equals(c2))@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "XYIntervalSeriesCollection c1 = new XYIntervalSeriesCollection()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "c2.addSeries(new XYIntervalSeries(\"Empty\"))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertTrue(c1 != c2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "XYIntervalSeries s1 = new XYIntervalSeries(\"Series\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "XYIntervalSeriesCollection<String> c2 = CloneUtils.clone(c1)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertTrue(c1.equals(c2))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertTrue(c1.getClass() == c2.getClass())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(c1,c2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "c1.addSeries(new XYIntervalSeries<>(\"Empty\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "c1.addSeries(new XYIntervalSeries(\"Empty\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21->18 [style = solid, label="c2"];
14->16 [style = bold, label=""];
18->3 [style = bold, label=""];
12->5 [style = solid, label="c2"];
12->11 [style = solid, label="c2"];
12->5 [style = bold, label=""];
7->12 [style = bold, label=""];
14->5 [style = solid, label="c1"];
2->3 [style = bold, label=""];
4->13 [style = bold, label=""];
0->16 [style = dashed, label="0"];
16->7 [style = bold, label=""];
12->4 [style = solid, label="c2"];
6->0 [style = bold, label=""];
6->14 [style = dashed, label="0"];
19->6 [style = bold, label=""];
9->5 [style = solid, label="c2"];
3->4 [style = bold, label=""];
10->6 [style = bold, label=""];
13->11 [style = bold, label=""];
5->20 [style = dashed, label="0"];
20->22 [style = bold, label=""];
0->7 [style = bold, label=""];
6->5 [style = solid, label="c1"];
14->12 [style = solid, label="c1"];
21->4 [style = solid, label="c2"];
7->9 [style = bold, label=""];
6->9 [style = solid, label="c1"];
6->20 [style = solid, label="c1"];
5->1 [style = bold, label=""];
8->13 [style = dashed, label="0"];
22->18 [style = bold, label=""];
9->11 [style = solid, label="c2"];
21->20 [style = bold, label=""];
9->4 [style = solid, label="c2"];
17->14 [style = bold, label=""];
9->21 [style = dashed, label="0"];
9->2 [style = solid, label="c2"];
12->2 [style = solid, label="c2"];
2->15 [style = bold, label=""];
6->21 [style = solid, label="c1"];
15->4 [style = bold, label=""];
9->5 [style = bold, label=""];
7->21 [style = bold, label=""];
3->15 [style = dashed, label="0"];
4->8 [style = bold, label=""];
1->2 [style = bold, label=""];
9->12 [style = dashed, label="0"];
8->11 [style = bold, label=""];
21->20 [style = solid, label="c2"];
}
