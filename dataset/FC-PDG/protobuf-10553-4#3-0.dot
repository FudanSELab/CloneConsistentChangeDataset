digraph {
11 [style = filled, label = "assertThat(actualBytes).hasLength(expectedBytes.length)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(expectedBytes.length,actualBytes.length)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(expected,actual)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "byte(( actualBytes = ExperimentalSerializationUtil.toByteArray(result)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "proto3Roundtrip['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Proto3Message result = fromByteArray(expectedBytes,)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "proto3Roundtrip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Proto3Message expected = new Proto3MessageFactory(5,10,2,2).newMessage()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Proto3Message result = ExperimentalSerializationUtil.fromByteArray(expectedBytes,)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(expected,result)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(actual).isEqualTo(expected)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "proto3Roundtrip['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Proto3Message actual = Proto3Message.parseFrom(actualBytes)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "byte(( expectedBytes = expected.toByteArray()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "byte(( actualBytes = toByteArray(result,expectedBytes.length)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(expected,actual)@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(result).isEqualTo(expected)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->13 [style = dashed, label="0"];
0->8 [style = solid, label="expected"];
16->14 [style = solid, label="actualBytes"];
5->6 [style = solid, label="result"];
4->13 [style = solid, label="expectedBytes"];
4->13 [style = bold, label=""];
7->11 [style = dashed, label="0"];
2->9 [style = bold, label=""];
12->1 [style = bold, label=""];
1->7 [style = bold, label=""];
11->2 [style = bold, label=""];
3->0 [style = bold, label=""];
1->11 [style = bold, label=""];
0->9 [style = solid, label="expected"];
4->5 [style = solid, label="expectedBytes"];
6->12 [style = dashed, label="0"];
8->9 [style = dashed, label="0"];
6->1 [style = bold, label=""];
0->2 [style = solid, label="expected"];
13->16 [style = solid, label="result"];
5->6 [style = bold, label=""];
5->12 [style = bold, label=""];
0->4 [style = bold, label=""];
6->16 [style = bold, label=""];
7->2 [style = bold, label=""];
1->2 [style = solid, label="actualBytes"];
0->12 [style = solid, label="expected"];
15->0 [style = bold, label=""];
1->16 [style = dashed, label="0"];
10->0 [style = bold, label=""];
13->6 [style = solid, label="result"];
2->8 [style = solid, label="actual"];
5->1 [style = solid, label="result"];
16->14 [style = bold, label=""];
14->2 [style = bold, label=""];
13->6 [style = bold, label=""];
14->2 [style = solid, label="actual"];
4->5 [style = bold, label=""];
0->6 [style = solid, label="expected"];
2->8 [style = bold, label=""];
}
