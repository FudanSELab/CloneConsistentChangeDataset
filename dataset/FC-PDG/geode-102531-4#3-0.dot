digraph {
47 [style = filled, label = "assertTrue(cos.isEmpty())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "cos.flush()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "final Sequence seqStreamOne = mockContext.sequence(\"seqStreamOne\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "cos.close()@@@57@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertFalse(cos.isEmpty())@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "cos.write(9)@@@55@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "final OutputStream streamTwo = mock(,\"streamTwo\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(0)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "mockContext.checking(new Expectations(){})@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@18a0c5,2,3)@@@49@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "verifyZeroInteractions(streamTwo)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@18a1e5)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "cos.close()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "cos.write(9)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "cos.close()@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "cos.removeOutputStream(streamTwo)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final OutputStream streamOne = mockContext.mock(,\"streamOne\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertFalse(cos.isEmpty())@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "cos.write(9)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(1,cos.size())@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(4)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@18a131,2,3)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "assertEquals(0,cos.size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "cos.flush()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "mockContext.checking(new Expectations(){})@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@18a144)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "cos.removeOutputStream(streamTwo)@@@46@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testNewCompositeOutputStreamWithNoStreams['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@18a1d2,2,3)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(2,cos.size())@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@43@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "cos.flush()@@@56@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "inOrderStreams.verify(streamOne,times(2)).flush()@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(1)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "final OutputStream streamTwo = mockContext.mock(,\"streamTwo\")@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertThat(cos.size()).isEqualTo(2)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@18a0d8)@@@52@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
45->41 [style = bold, label=""];
14->3 [style = bold, label=""];
18->31 [style = bold, label=""];
8->10 [style = bold, label=""];
32->22 [style = bold, label=""];
16->0 [style = bold, label=""];
27->38 [style = bold, label=""];
48->49 [style = bold, label=""];
28->18 [style = bold, label=""];
0->13 [style = bold, label=""];
11->14 [style = bold, label=""];
21->27 [style = bold, label=""];
20->29 [style = bold, label=""];
30->20 [style = bold, label=""];
24->35 [style = bold, label=""];
10->34 [style = dashed, label="0"];
3->27 [style = dashed, label="0"];
26->34 [style = bold, label=""];
39->31 [style = solid, label="streamTwo"];
38->36 [style = bold, label=""];
39->23 [style = solid, label="streamTwo"];
3->15 [style = bold, label=""];
31->21 [style = bold, label=""];
4->39 [style = dashed, label="0"];
46->47 [style = bold, label=""];
0->28 [style = dashed, label="0"];
13->11 [style = bold, label=""];
2->11 [style = solid, label="streamTwo"];
43->46 [style = bold, label=""];
35->25 [style = bold, label=""];
23->28 [style = bold, label=""];
12->2 [style = bold, label=""];
39->20 [style = solid, label="streamTwo"];
17->24 [style = bold, label=""];
42->44 [style = bold, label=""];
19->32 [style = bold, label=""];
5->6 [style = bold, label=""];
29->19 [style = bold, label=""];
4->16 [style = solid, label="streamOne"];
44->48 [style = bold, label=""];
34->29 [style = solid, label="streamOne"];
39->23 [style = bold, label=""];
34->39 [style = bold, label=""];
7->16 [style = bold, label=""];
40->17 [style = bold, label=""];
2->16 [style = solid, label="streamTwo"];
10->4 [style = bold, label=""];
33->30 [style = bold, label=""];
4->12 [style = bold, label=""];
34->23 [style = solid, label="streamOne"];
14->21 [style = dashed, label="0"];
47->45 [style = bold, label=""];
36->37 [style = bold, label=""];
2->7 [style = bold, label=""];
13->18 [style = dashed, label="0"];
6->9 [style = bold, label=""];
37->33 [style = bold, label=""];
41->42 [style = bold, label=""];
22->40 [style = bold, label=""];
15->1 [style = bold, label=""];
}
