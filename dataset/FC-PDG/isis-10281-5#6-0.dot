digraph {
17 [style = filled, label = "user_and_roles_and_real_name_preserved_and_avatarUrl_set['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\",\"CAVEMAN\",\"HUSBAND\").withRealName(\"Fred Flintstone\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assertions.assertThat(userMemento.isImpersonating()).isFalse()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assertions.assertThat(userMemento2.getRoles().size()).isEqualTo(2)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(null)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assertions.assertThat(userMemento2.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "val userMemento = UserMemento.ofName(\"fredflintstone\").withRole(\"CAVEMAN\").withRole(\"HUSBAND\").withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\")).withRealName(\"Fred Flintstone\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assertions.assertThat(userMemento.isImpersonating()).isFalse()@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assertions.assertThat(userMemento2.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(null)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assertions.assertThat(userMemento2.getRoles()).hasSize(2)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "Assertions.assertThat(userMemento.getRoles()).hasSize(2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assertions.assertThat(userMemento2.getRoles()).hasSize(2)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assertions.assertThat(userMemento2.isImpersonating()).isTrue()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "val userMemento2 = userMemento.withImpersonating()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\")@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "user_and_roles_and_real_name_preserved_and_avatarUrl_set['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "happy_case['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "val userMemento2 = userMemento.withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assertions.assertThat(userMemento2).isNotSameAs(userMemento)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assertions.assertThat(userMemento.getRoles()).hasSize(2)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assertions.assertThat(userMemento2).isNotSameAs(userMemento)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11->16 [style = bold, label=""];
18->3 [style = bold, label=""];
32->22 [style = bold, label=""];
4->14 [style = bold, label=""];
30->13 [style = bold, label=""];
28->20 [style = bold, label=""];
14->28 [style = dashed, label="0"];
31->24 [style = bold, label=""];
0->12 [style = bold, label=""];
37->25 [style = bold, label=""];
36->31 [style = bold, label=""];
0->16 [style = dashed, label="0"];
35->33 [style = bold, label=""];
1->3 [style = bold, label=""];
1->18 [style = dashed, label="0"];
8->13 [style = bold, label=""];
9->8 [style = bold, label=""];
22->23 [style = bold, label=""];
34->30 [style = bold, label=""];
13->1 [style = bold, label=""];
14->7 [style = bold, label=""];
29->28 [style = bold, label=""];
5->2 [style = bold, label=""];
3->5 [style = bold, label=""];
11->0 [style = bold, label=""];
12->10 [style = bold, label=""];
17->14 [style = bold, label=""];
19->26 [style = bold, label=""];
6->11 [style = bold, label=""];
14->6 [style = solid, label="userMemento"];
2->15 [style = bold, label=""];
7->6 [style = bold, label=""];
20->37 [style = bold, label=""];
15->26 [style = dashed, label="0"];
23->36 [style = bold, label=""];
10->9 [style = bold, label=""];
27->19 [style = bold, label=""];
21->35 [style = bold, label=""];
15->32 [style = bold, label=""];
33->34 [style = bold, label=""];
16->12 [style = bold, label=""];
24->27 [style = bold, label=""];
25->21 [style = bold, label=""];
13->18 [style = bold, label=""];
28->13 [style = solid, label="userMemento"];
}
