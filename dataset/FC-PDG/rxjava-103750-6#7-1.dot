digraph {
6 [style = filled, label = "ts.assertValueCount(1).assertNotTerminated()@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Runnable r2 = new Runnable(){@Override public void run(){ref.get().onError(ex)}}@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "i++@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "TestHelper.assertUndeliverable(errors,0,)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "mainCompleteBoundaryErrorRace['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<Subscriber<? super Object>>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "int i = 0@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "to.assertValueCount(1).assertTerminated()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ref.get().onNext(1)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TestHelper.race(r1,r2)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "TestObserverEx<Observable<Object>> to = new Observable<Object>(){@Override protected void subscribeActual(Observer<? super Object> observer){observer.onSubscribe(Disposable.empty())refMain.set(observer)}}.window(new Observable<Object>(){@Override protected void subscribeActual(Observer<? super Object> observer){observer.onSubscribe(Disposable.empty())ref.set(observer)}}).to(TestHelper.testConsumer())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "takeOneAnotherBoundary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final TestException ex = new TestException()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TestSubscriberEx<Flowable<Object>> ts = new Flowable<Object>(){@Override protected void subscribeActual(Subscriber<? super Object> subscriber){subscriber.onSubscribe(new BooleanSubscription())refMain.set(subscriber)}}.window(new Flowable<Object>(){@Override protected void subscribeActual(Subscriber<? super Object> subscriber){subscriber.onSubscribe(new BooleanSubscription())ref.set(subscriber)}}).to(TestHelper.testConsumer())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "takeOneAnotherBoundary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "{RxJavaPlugins.reset()}@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final AtomicReference<Observer<? super Object>> refMain = new AtomicReference<Observer<? super Object>>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "i < TestHelper.RACE_LONG_LOOPS@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Runnable r1 = new Runnable(){@Override public void run(){refMain.get().onComplete()}}@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ts.assertValueCount(1).assertNotTerminated().cancel()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "!errors.isEmpty()@@@38@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "List<Throwable> errors = TestHelper.trackPluginErrors()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19->10 [style = dotted, label="true"];
5->3 [style = bold, label=""];
21->10 [style = bold, label=""];
19->14 [style = dotted, label="true"];
23->16 [style = bold, label=""];
14->22 [style = solid, label="r2"];
16->18 [style = bold, label=""];
19->25 [style = dotted, label="true"];
25->19 [style = solid, label="i"];
3->1 [style = bold, label=""];
10->14 [style = bold, label=""];
19->17 [style = dotted, label="true"];
12->21 [style = bold, label=""];
0->2 [style = bold, label=""];
14->22 [style = bold, label=""];
19->12 [style = dotted, label="true"];
19->23 [style = dotted, label="true"];
16->20 [style = dotted, label="true"];
11->25 [style = solid, label="i"];
19->21 [style = dotted, label="true"];
19->24 [style = dotted, label="true"];
11->19 [style = bold, label=""];
9->8 [style = bold, label=""];
2->4 [style = bold, label=""];
22->23 [style = bold, label=""];
10->22 [style = solid, label="r1"];
19->24 [style = bold, label=""];
7->9 [style = bold, label=""];
20->18 [style = bold, label=""];
17->12 [style = bold, label=""];
1->6 [style = bold, label=""];
15->11 [style = bold, label=""];
8->5 [style = bold, label=""];
24->20 [style = solid, label="errors"];
2->9 [style = dashed, label="0"];
11->19 [style = solid, label="i"];
24->17 [style = bold, label=""];
25->19 [style = bold, label=""];
19->22 [style = dotted, label="true"];
18->25 [style = bold, label=""];
19->16 [style = dotted, label="true"];
4->8 [style = dashed, label="0"];
15->14 [style = solid, label="ex"];
13->15 [style = bold, label=""];
16->20 [style = bold, label=""];
4->5 [style = bold, label=""];
}
