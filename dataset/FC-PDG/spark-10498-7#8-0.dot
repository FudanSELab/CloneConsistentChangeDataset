digraph {
0 [style = filled, label = "Map<Integer,Integer> categoricalFeaturesInfo = new HashMap<>()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final GradientBoostedTreesModel model = GradientBoostedTrees.train(trainingData,boostingStrategy)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "BoostingStrategy boostingStrategy = BoostingStrategy.defaultParams(\"Classification\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "int maxBins = 32@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "System.out.println(\"Test Error: \" + testErr)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "String impurity = \"gini\"@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "System.out.println(\"Test Error: \" + testErr)@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "System.out.println(\"Test Error: \" + testErr)@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "SparkConf sparkConf = new SparkConf().setAppName(\"JavaGradientBoostedTreesClassificationExample\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "JavaRDD<LabeledPoint> trainingData = splits(0(@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "double testErr = predictionAndLabel.filter(null).count() / (double)testData.count()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "boostingStrategy.getTreeStrategy().setNumClasses(2)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "boostingStrategy.getTreeStrategy().setMaxDepth(5)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "DecisionTreeModel sameModel = DecisionTreeModel.load(jsc.sc(),\"target/tmp/myDecisionTreeClassificationModel\")@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "JavaPairRDD<Double,Double> predictionAndLabel = testData.mapToPair(new PairFunction<LabeledPoint,Double,Double>(){@Override public Tuple2<Double,Double> call(LabeledPoint p){return new Tuple2<>(model.predict(p.features()),p.label())}})@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "GradientBoostedTreesModel sameModel = GradientBoostedTreesModel.load(jsc.sc(),\"target/tmp/myGradientBoostingClassificationModel\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "System.out.println(\"Learned classification GBT model:\" + model.toDebugString())@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "model.save(jsc.sc(),\"target/tmp/myDecisionTreeClassificationModel\")@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "JavaSparkContext jsc = new JavaSparkContext(sparkConf)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Integer maxDepth = 5@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "String datapath = \"data/mllib/sample_libsvm_data.txt\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "main['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "model.save(jsc.sc(),\"target/tmp/myGradientBoostingClassificationModel\")@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "boostingStrategy.treeStrategy().setCategoricalFeaturesInfo(categoricalFeaturesInfo)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "JavaRDD<LabeledPoint>(( splits = data.randomSplit(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a7ae8c)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "DecisionTreeModel model = DecisionTree.trainClassifier(trainingData,numClasses,categoricalFeaturesInfo,impurity,maxDepth,maxBins)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "int maxDepth = 5@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "JavaPairRDD<Double,Double> predictionAndLabel = testData.mapToPair(new PairFunction<LabeledPoint,Double,Double>(){@Override public Tuple2<Double,Double> call(LabeledPoint p){return new Tuple2<>(model.predict(p.features()),p.label())}})@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "jsc.stop()@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Double testErr = 1.0 * predictionAndLabel.filter(new Function<Tuple2<Double,Double>,Boolean>(){@Override public Boolean call(Tuple2<Double,Double> pl){return !pl._1().equals(pl._2())}}).count() / testData.count()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "SparkConf sparkConf = new SparkConf().setAppName(\"JavaDecisionTreeClassificationExample\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "main['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String(( args@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "JavaRDD<LabeledPoint> data = MLUtils.loadLibSVMFile(jsc.sc(),datapath).toJavaRDD()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Integer numClasses = 2@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "main['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Map<Integer,Integer> categoricalFeaturesInfo = new HashMap<>()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "boostingStrategy.setNumIterations(3)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "JavaRDD<LabeledPoint> testData = splits(1(@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final DecisionTreeModel model = DecisionTree.trainClassifier(trainingData,numClasses,categoricalFeaturesInfo,impurity,maxDepth,maxBins)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "JavaPairRDD<Double,Double> predictionAndLabel = testData.mapToPair(null)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Double testErr = 1.0 * predictionAndLabel.filter(new Function<Tuple2<Double,Double>,Boolean>(){@Override public Boolean call(Tuple2<Double,Double> pl){return !pl._1().equals(pl._2())}}).count() / testData.count()@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "int numClasses = 2@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "System.out.println(\"Learned classification tree model:\" + model.toDebugString())@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6->3 [style = bold, label=""];
8->19 [style = dashed, label="0"];
15->34 [style = dashed, label="0"];
16->18 [style = bold, label=""];
36->40 [style = bold, label=""];
15->23 [style = dashed, label="0"];
16->31 [style = dashed, label="0"];
5->23 [style = bold, label=""];
31->27 [style = solid, label="maxDepth"];
1->5 [style = solid, label="splits"];
2->1 [style = bold, label=""];
8->19 [style = bold, label=""];
19->20 [style = bold, label=""];
27->28 [style = bold, label=""];
19->20 [style = dashed, label="0"];
18->12 [style = bold, label=""];
22->29 [style = bold, label=""];
11->17 [style = dotted, label="true"];
5->15 [style = bold, label=""];
10->28 [style = dashed, label="0"];
1->13 [style = solid, label="splits"];
4->12 [style = solid, label="impurity"];
4->27 [style = solid, label="impurity"];
34->42 [style = bold, label=""];
6->3 [style = solid, label="testErr"];
21->25 [style = bold, label=""];
33->9 [style = bold, label=""];
24->22 [style = bold, label=""];
23->0 [style = bold, label=""];
33->9 [style = solid, label="sparkConf"];
34->36 [style = solid, label="boostingStrategy"];
1->13 [style = bold, label=""];
10->6 [style = bold, label=""];
0->12 [style = solid, label="categoricalFeaturesInfo"];
5->34 [style = bold, label=""];
42->35 [style = bold, label=""];
7->9 [style = bold, label=""];
4->31 [style = bold, label=""];
25->24 [style = bold, label=""];
31->26 [style = bold, label=""];
26->27 [style = bold, label=""];
15->12 [style = solid, label="numClasses"];
12->10 [style = bold, label=""];
28->21 [style = bold, label=""];
43->8 [style = solid, label="testErr"];
20->41 [style = bold, label=""];
7->9 [style = solid, label="sparkConf"];
13->27 [style = solid, label="trainingData"];
0->4 [style = bold, label=""];
35->37 [style = bold, label=""];
20->41 [style = dashed, label="0"];
0->27 [style = solid, label="categoricalFeaturesInfo"];
3->8 [style = bold, label=""];
15->0 [style = bold, label=""];
30->7 [style = bold, label=""];
23->27 [style = solid, label="numClasses"];
13->12 [style = solid, label="trainingData"];
21->25 [style = solid, label="testErr"];
43->8 [style = bold, label=""];
38->17 [style = dotted, label="true"];
9->14 [style = bold, label=""];
13->5 [style = bold, label=""];
37->18 [style = bold, label=""];
18->32 [style = bold, label=""];
32->36 [style = bold, label=""];
18->26 [style = dashed, label="0"];
12->27 [style = dashed, label="0"];
18->12 [style = solid, label="maxBins"];
14->2 [style = bold, label=""];
7->33 [style = dashed, label="0"];
30->17 [style = dotted, label="true"];
40->43 [style = bold, label=""];
26->27 [style = solid, label="maxBins"];
13->36 [style = solid, label="trainingData"];
18->32 [style = solid, label="categoricalFeaturesInfo"];
41->39 [style = bold, label=""];
38->33 [style = bold, label=""];
11->7 [style = bold, label=""];
4->16 [style = bold, label=""];
16->12 [style = solid, label="maxDepth"];
}
