digraph {
10 [style = filled, label = "Assert.assertTrue(specsInSEI == 0,\"SpecExecutorInstanceProducer should not contain \" + \"Spec after deletion\")@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "specsInSEI = ((List)(sei.listSpecs().get())).size()@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(specs.size() == 0,\"Spec store should not contain Spec after deletion\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "logger.info(\"(Before Create( Spec \" + i++ + \": \" + gson.toJson(topologySpec))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertTrue(specs.size() == 1,\"Spec store should contain 1 Flow that was added in last test\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "topologySpec = (TopologySpec)spec@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "int specsInSEI = ((List)(sei.listSpecs().get())).size()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "logger.info(\"(After Delete( Spec \" + i++ + \": \" + gson.toJson(flowSpec))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "deleteFlowSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "deleteFlowSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(specsInSEI == 0,\"SpecExecutorInstanceProducer should contain 0 \" + \"Spec after addition because Orchestrator is a no-op listener for any new FlowSpecs\")@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "SpecExecutorInstanceProducer sei = specCompiler.getTopologySpecMap().values().iterator().next().getSpecExecutorInstanceProducer()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "logger.info(\"(After Delete( Number of specs: \" + specs.size())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "TopologySpec topologySpec = (TopologySpec)spec@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "logger.info(\"(After Create( Spec \" + i++ + \": \" + gson.toJson(topologySpec))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "int i = 0@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "specs = topologyCatalog.getSpecs()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "IdentityFlowToJobSpecCompiler specCompiler = (IdentityFlowToJobSpecCompiler)this.orchestrator.getSpecCompiler()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "specs = flowCatalog.getSpecs()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "logger.info(\"(After Create( Number of specs: \" + specs.size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "this.flowCatalog.remove(flowSpec.getUri())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertTrue(specs.size() == 0,\"Spec store should be empty before addition\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "FlowSpec flowSpec = (FlowSpec)spec@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertTrue(specCompiler.getTopologySpecMap().size() == 0,\"SpecCompiler should not know about any Topology \" + \"before addition\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Collection<Spec> specs = flowCatalog.getSpecs()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertTrue(specs.size() == 1,\"Spec store should contain 1 Spec after addition\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "flowSpec = (FlowSpec)spec@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "logger.info(\"(Before Create( Number of specs: \" + specs.size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "this.topologyCatalog.put(topologySpec)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "i = 0@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "specsInSEI = ((List)(sei.getProducer().get().listSpecs().get())).size()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "int specsInSEI = ((List)(sei.getProducer().get().listSpecs().get())).size()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Assert.assertTrue(specsInSEI == 0,\"SpecProducer should not contain \" + \"Spec after deletion\")@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "Assert.assertTrue(specCompiler.getTopologySpecMap().size() == 1,\"SpecCompiler should contain 1 Spec after addition\")@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Collection<Spec> specs = topologyCatalog.getSpecs()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "logger.info(\"(Before Delete( Spec \" + i++ + \": \" + gson.toJson(flowSpec))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "SpecExecutor sei = specCompiler.getTopologySpecMap().values().iterator().next().getSpecExecutor()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "createTopologySpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "logger.info(\"(Before Delete( Number of specs: \" + specs.size())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(specsInSEI == 0,\"SpecProducer should contain 0 \" + \"Spec after addition because Orchestrator is a no-op listener for any new FlowSpecs\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7->13 [style = bold, label=""];
32->30 [style = solid, label="i"];
13->7 [style = dashed, label="0"];
11->1 [style = solid, label="flowSpec"];
23->20 [style = bold, label=""];
27->32 [style = bold, label=""];
16->11 [style = bold, label=""];
30->33 [style = bold, label=""];
28->34 [style = bold, label=""];
11->1 [style = bold, label=""];
8->18 [style = bold, label=""];
0->17 [style = bold, label=""];
11->33 [style = dashed, label="0"];
1->30 [style = dashed, label="0"];
2->3 [style = bold, label=""];
12->15 [style = bold, label=""];
39->8 [style = bold, label=""];
7->35 [style = bold, label=""];
23->20 [style = solid, label="specsInSEI"];
17->4 [style = solid, label="specsInSEI"];
15->6 [style = bold, label=""];
1->0 [style = bold, label=""];
9->10 [style = bold, label=""];
3->16 [style = bold, label=""];
18->2 [style = bold, label=""];
10->22 [style = dashed, label="0"];
21->22 [style = solid, label="specsInSEI"];
25->2 [style = bold, label=""];
32->33 [style = bold, label=""];
33->26 [style = solid, label="topologySpec"];
1->11 [style = bold, label=""];
7->5 [style = solid, label="i"];
5->19 [style = bold, label=""];
29->27 [style = bold, label=""];
19->38 [style = dashed, label="0"];
0->23 [style = bold, label=""];
5->35 [style = dashed, label="0"];
19->9 [style = bold, label=""];
38->37 [style = bold, label=""];
21->22 [style = bold, label=""];
30->31 [style = bold, label=""];
36->7 [style = bold, label=""];
16->1 [style = solid, label="i"];
7->35 [style = solid, label="topologySpec"];
5->13 [style = bold, label=""];
34->36 [style = bold, label=""];
4->20 [style = dashed, label="0"];
9->21 [style = dashed, label="0"];
20->12 [style = bold, label=""];
0->31 [style = dashed, label="0"];
13->5 [style = bold, label=""];
33->30 [style = bold, label=""];
4->12 [style = bold, label=""];
31->40 [style = bold, label=""];
40->26 [style = bold, label=""];
14->8 [style = bold, label=""];
35->38 [style = bold, label=""];
26->28 [style = bold, label=""];
33->30 [style = solid, label="topologySpec"];
24->8 [style = bold, label=""];
17->23 [style = dashed, label="0"];
6->7 [style = bold, label=""];
13->5 [style = solid, label="flowSpec"];
36->35 [style = solid, label="i"];
8->25 [style = bold, label=""];
8->29 [style = bold, label=""];
35->7 [style = bold, label=""];
17->4 [style = bold, label=""];
18->25 [style = dashed, label="0"];
9->10 [style = solid, label="specsInSEI"];
19->21 [style = bold, label=""];
}
