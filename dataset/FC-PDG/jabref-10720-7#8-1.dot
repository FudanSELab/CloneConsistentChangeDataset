digraph {
16 [style = filled, label = "testImportAsModsAndExportAsMods['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testPerformExport['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "importFile = Paths.get(.getResource(filename).toURI())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testPerformExport['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Path xmlFile = Paths.get(.getResource(xmlFileName).toURI())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<BibEntry> entries = modsImporter.importDatabase(xmlFile,charset).getDatabase().getEntries()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String filename@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String filename@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "String xmlFileName = filename.replace(\".bib\",\".xml\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<BibEntry> entries = bibtexImporter.importDatabase(importFile,charset).getDatabase().getEntries()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "exporter.export(databaseContext,tempFile,charset,entries)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertThat(test,CompareMatcher.isSimilarTo(control).withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure())@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(String.join(\"\",Files.readAllLines(xmlFile)),String.join(\"\",Files.readAllLines(tempFile)))@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Path tempFilename = tempFile.toAbsolutePath()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Builder test = Input.from(Files.newInputStream(tempFilename))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "modsExportFormat.export(databaseContext,tempFile,charset,entries)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Builder control = Input.from(Files.newInputStream(xmlFile))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->8 [style = bold, label=""];
8->10 [style = bold, label=""];
4->2 [style = solid, label="test"];
10->14 [style = bold, label=""];
7->10 [style = bold, label=""];
8->4 [style = solid, label="tempFilename"];
0->15 [style = dashed, label="0"];
11->12 [style = bold, label=""];
4->2 [style = bold, label=""];
10->12 [style = solid, label="xmlFile"];
3->4 [style = bold, label=""];
13->1 [style = bold, label=""];
8->7 [style = bold, label=""];
7->9 [style = solid, label="entries"];
6->1 [style = bold, label=""];
7->11 [style = solid, label="entries"];
16->1 [style = bold, label=""];
13->0 [style = dotted, label="true"];
10->3 [style = solid, label="xmlFile"];
9->3 [style = bold, label=""];
5->7 [style = bold, label=""];
9->11 [style = dashed, label="0"];
14->9 [style = bold, label=""];
10->9 [style = bold, label=""];
6->0 [style = dotted, label="true"];
14->9 [style = solid, label="entries"];
16->15 [style = dotted, label="true"];
10->11 [style = bold, label=""];
}
