digraph {
20 [style = filled, label = "Assert.assertEquals(testBucketPath,bucket.getBucketPath())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "Assert.assertEquals(testBucket,recoveredState.getBucketPath())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(numFiles,is(1L))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final RecoverableWriter.ResumeRecoverable current = stream.persist()@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "FileStatus(( statuses = fs.listStatus(testBucket.getParent())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "final File testFolder = tempFolder.newFolder()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final Path testBucket = new Path(testFolder.getPath(),\"test\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Assert.assertNull(recoveredState.getInProgressResumableFile())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final String scenarioName = \"only-in-progress\"@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "long numFiles = Files.list(Paths.get(testBucketPath.toString())).map(null).count()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final BucketState<String> bucketState = new BucketState<>(\"test\",testBucket,Long.MAX_VALUE,current,new HashMap<>())@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final RecoverableFsDataOutputStream stream = writer.open(testBucket)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(testBucket,recoveredState.getBucketPath())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "final FileSystem fs = FileSystem.get(testFolder.toURI())@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final RecoverableWriter writer = fs.createRecoverableWriter()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(statuses(0(.getPath().getPath().startsWith((new Path(testBucket.getParent(),\".test.inprogress\")).getPath()))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "stream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")))@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testSerializationOnlyInProgress['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "stream.close()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "final BucketState<String> recoveredState = SimpleVersionedSerialization.readVersionAndDeSerialize(serializer,bytes)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final byte(( bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer,bucketState)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final BucketState<String> recoveredState = readBucketState(scenarioName,previousVersion)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "final BucketState<String> bucketState = new BucketState<>(\"test\",testBucket,Long.MAX_VALUE,null,new HashMap<>())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(8,bucket.getInProgressPart().getSize())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "byte(( bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer,bucketState)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final java.nio.file.Path outputPath = getOutputPath(scenarioName,previousVersion)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "testSerializationEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final SimpleVersionedSerializer<BucketState<String>> serializer = new BucketStateSerializer<>(writer.getResumeRecoverableSerializer(),writer.getCommitRecoverableSerializer(),SimpleVersionedStringSerializer.INSTANCE)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(1L,statuses.length)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "testSerializationOnlyInProgress['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final Path testBucket = new Path(testFolder.getPath(),\"test\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final Bucket<String,String> bucket = restoreBucket(0,recoveredState)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertTrue(recoveredState.getCommittableFilesPerCheckpoint().isEmpty())@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0->30 [style = bold, label=""];
29->0 [style = solid, label="serializer"];
5->9 [style = bold, label=""];
32->0 [style = solid, label="bytes"];
22->19 [style = bold, label=""];
0->6 [style = bold, label=""];
26->21 [style = solid, label="scenarioName"];
28->31 [style = bold, label=""];
32->0 [style = bold, label=""];
3->14 [style = bold, label=""];
30->27 [style = bold, label=""];
27->9 [style = bold, label=""];
16->7 [style = bold, label=""];
1->3 [style = bold, label=""];
6->32 [style = dashed, label="0"];
18->17 [style = bold, label=""];
10->3 [style = bold, label=""];
31->29 [style = bold, label=""];
1->8 [style = solid, label="testBucket"];
26->17 [style = solid, label="scenarioName"];
1->18 [style = dashed, label="0"];
1->14 [style = solid, label="testBucket"];
2->10 [style = bold, label=""];
9->8 [style = bold, label=""];
6->9 [style = solid, label="bytes"];
29->32 [style = solid, label="serializer"];
13->16 [style = bold, label=""];
21->18 [style = bold, label=""];
22->19 [style = solid, label="numFiles"];
11->15 [style = bold, label=""];
26->21 [style = bold, label=""];
24->20 [style = bold, label=""];
15->6 [style = solid, label="bucketState"];
28->31 [style = solid, label="testBucket"];
6->5 [style = bold, label=""];
12->2 [style = bold, label=""];
3->28 [style = bold, label=""];
17->24 [style = bold, label=""];
11->15 [style = solid, label="current"];
23->22 [style = bold, label=""];
0->6 [style = solid, label="serializer"];
18->20 [style = solid, label="testBucketPath"];
20->23 [style = bold, label=""];
1->15 [style = solid, label="testBucket"];
17->24 [style = solid, label="recoveredState"];
16->9 [style = dashed, label="0"];
29->32 [style = bold, label=""];
15->0 [style = bold, label=""];
25->26 [style = bold, label=""];
4->11 [style = bold, label=""];
10->1 [style = bold, label=""];
28->30 [style = solid, label="testBucket"];
0->9 [style = solid, label="serializer"];
33->2 [style = bold, label=""];
31->32 [style = solid, label="bucketState"];
8->13 [style = bold, label=""];
14->4 [style = bold, label=""];
}
