digraph {
0 [style = filled, label = "JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc,inputData,1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "JavaTestUtils.attachTestOutputStream(flatMapped)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testFlatMap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "List<List<String>> expected = Arrays.asList(Arrays.asList(\"g\",\"o\",\"g\",\"i\",\"a\",\"n\",\"t\",\"s\"),Arrays.asList(\"b\",\"o\",\"o\",\"d\",\"o\",\"d\",\"g\",\"e\",\"r\",\"s\"),Arrays.asList(\"a\",\"t\",\"h\",\"l\",\"e\",\"t\",\"i\",\"c\",\"s\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertOrderInvariantEquals(expected,result)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "JavaTestUtils.attachTestOutputStream(flatMapped)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testFlatMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "JavaDStream<String> flatMapped = stream.flatMap(null)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "List<List<String>> result = JavaTestUtils.runStreams(ssc,3,3)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "JavaDStream<String> flatMapped = stream.flatMap(null)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertOrderInvariantEquals(expected,result)@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testFlatMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<List<String>> expected = Arrays.asList(Arrays.asList(\"g\",\"o\",\"g\",\"i\",\"a\",\"n\",\"t\",\"s\"),Arrays.asList(\"b\",\"o\",\"o\",\"d\",\"o\",\"d\",\"g\",\"e\",\"r\",\"s\"),Arrays.asList(\"a\",\"t\",\"h\",\"l\",\"e\",\"t\",\"i\",\"c\",\"s\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "List<List<String>> result = JavaTestUtils.runStreams(ssc,3,3)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<List<String>> inputData = Arrays.asList(Arrays.asList(\"go\",\"giants\"),Arrays.asList(\"boo\",\"dodgers\"),Arrays.asList(\"athletics\"))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "JavaDStream<String> flatMapped = stream.flatMap(new FlatMapFunction<String,String>(){@Override public Iterator<String> call(String x){return Arrays.asList(x.split(\"(?!^)\")).iterator()}})@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
6->8 [style = dashed, label="0"];
0->13 [style = bold, label=""];
0->6 [style = bold, label=""];
9->4 [style = bold, label=""];
11->12 [style = bold, label=""];
10->12 [style = solid, label="expected"];
1->0 [style = bold, label=""];
1->10 [style = dashed, label="0"];
13->14 [style = solid, label="flatMapped"];
2->4 [style = bold, label=""];
7->3 [style = bold, label=""];
8->7 [style = bold, label=""];
4->0 [style = solid, label="inputData"];
8->7 [style = solid, label="flatMapped"];
3->5 [style = bold, label=""];
11->12 [style = solid, label="result"];
6->13 [style = dashed, label="0"];
1->5 [style = solid, label="expected"];
10->0 [style = bold, label=""];
15->4 [style = bold, label=""];
0->8 [style = bold, label=""];
4->1 [style = bold, label=""];
6->7 [style = solid, label="flatMapped"];
6->7 [style = bold, label=""];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
3->5 [style = solid, label="result"];
}
