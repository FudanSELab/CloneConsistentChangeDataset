digraph {
15 [style = filled, label = "assertThat(region.get(KEY)).isEqualTo(\"quickExpire\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "customEntryIdleTimeoutCanBeShortened['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "RegionFactory<String,String> rf = server.getCache().createRegionFactory(RegionShortcut.LOCAL)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "await().atMost(LONG_WAIT_MS / 2,MILLISECONDS).until(null)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "region.put(KEY,\"quickExpire\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "customEntryTimeToLiveCanBeShortened['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "rf.setCustomEntryIdleTimeout(new CustomExpiryTestClass<>())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "RegionFactory<String,String> rf = cache.createRegionFactory(RegionShortcut.LOCAL)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "await().atMost(1,MINUTES).until(null)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Region<String,String> region = rf.create(regionName)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "await().atMost(1,MINUTES).until(null)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "customEntryIdleTimeoutCanBeShortened['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Region<String,String> region = rf.create(testName.getMethodName())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "rf.setStatisticsEnabled(true)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "region.get(KEY)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(region.get(KEY)).isEqualTo(\"longExpire\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "region.put(KEY,\"longExpire\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "rf.setCustomEntryTimeToLive(new CustomExpiryTestClass<>())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
1->4 [style = bold, label=""];
17->5 [style = bold, label=""];
7->11 [style = bold, label=""];
15->14 [style = bold, label=""];
4->17 [style = dashed, label="0"];
9->4 [style = bold, label=""];
1->9 [style = dashed, label="0"];
12->7 [style = bold, label=""];
7->3 [style = bold, label=""];
2->10 [style = dashed, label="0"];
1->17 [style = bold, label=""];
6->12 [style = dashed, label="0"];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
5->12 [style = bold, label=""];
16->1 [style = bold, label=""];
11->10 [style = bold, label=""];
0->1 [style = bold, label=""];
8->9 [style = bold, label=""];
13->15 [style = bold, label=""];
6->7 [style = bold, label=""];
4->5 [style = bold, label=""];
3->11 [style = dashed, label="0"];
}
