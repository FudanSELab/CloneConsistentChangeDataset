digraph {
4 [style = filled, label = "createMockAncestors(req,createAncestor(j,\"../../..\"),createAncestor(parent,\"../..\"),createAncestor(view,\".\"))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TopLevelItemAndItemGroup parent = mock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Jenkins j = createMockJenkins()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "View view = mock()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ItemGroup parent = j@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "createMockAncestors(req,createAncestor(computer,\".\"),createAncestor(j,\"../..\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "TopLevelItem i = createMockItem(parent,\"job/i/\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "String result = Functions.getRelativeLinkTo(i)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "when(view.getOwnerItemGroup()).thenReturn(parent)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "mockStatic()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(view.getOwner()).thenReturn(parent)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testGetRelativeLinkTo_JobContainedInViewWithinItemGroup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(view.getItems()).thenReturn(Arrays.asList(i))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "StaplerRequest req = createMockRequest(contextPath)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "when(parent.getItemGroup()).thenReturn(parent)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "when(parent.getShortUrl()).thenReturn(\"parent/\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testGetRelativeLinkTo_JobContainedInViewWithinItemGroup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "testGetRelativeLinkTo_JobFromComputer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "String contextPath = \"/jenkins\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "createMockAncestors(req,createAncestor(j,\"../../..\"),createAncestor(parent,\"../..\"),createAncestor(view,\".\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(Stapler.getCurrentRequest()).thenReturn(req)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Computer computer = mock()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"job/i/\",result)@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertEquals(\"/jenkins/job/i/\",result)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TopLevelItem i = createMockItem(parent,\"job/i/\",\"parent/job/i/\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String result = Functions.getRelativeLinkTo(i)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->1 [style = solid, label="contextPath"];
14->3 [style = bold, label=""];
16->15 [style = bold, label=""];
14->24 [style = bold, label=""];
2->24 [style = solid, label="j"];
20->13 [style = bold, label=""];
12->16 [style = solid, label="parent"];
14->24 [style = solid, label="computer"];
22->19 [style = bold, label=""];
4->6 [style = bold, label=""];
9->2 [style = bold, label=""];
12->4 [style = solid, label="parent"];
12->6 [style = solid, label="parent"];
6->5 [style = solid, label="i"];
12->15 [style = solid, label="parent"];
11->16 [style = dashed, label="0"];
8->17 [style = solid, label="result"];
12->5 [style = solid, label="parent"];
11->4 [style = bold, label=""];
20->13 [style = solid, label="contextPath"];
3->6 [style = solid, label="view"];
13->24 [style = solid, label="req"];
3->11 [style = bold, label=""];
7->8 [style = solid, label="result"];
5->7 [style = solid, label="i"];
15->6 [style = bold, label=""];
1->0 [style = bold, label=""];
3->16 [style = bold, label=""];
18->2 [style = bold, label=""];
1->4 [style = solid, label="req"];
7->8 [style = bold, label=""];
24->22 [style = bold, label=""];
6->7 [style = solid, label="i"];
13->1 [style = bold, label=""];
2->12 [style = bold, label=""];
21->2 [style = bold, label=""];
2->4 [style = solid, label="j"];
8->17 [style = bold, label=""];
6->5 [style = bold, label=""];
25->20 [style = bold, label=""];
0->14 [style = bold, label=""];
12->10 [style = bold, label=""];
12->25 [style = dashed, label="0"];
10->13 [style = bold, label=""];
19->23 [style = solid, label="result"];
19->23 [style = bold, label=""];
12->11 [style = solid, label="parent"];
1->14 [style = solid, label="req"];
22->19 [style = solid, label="i"];
5->7 [style = bold, label=""];
13->0 [style = solid, label="req"];
3->4 [style = solid, label="view"];
3->14 [style = dashed, label="0"];
2->25 [style = bold, label=""];
1->6 [style = solid, label="req"];
25->22 [style = solid, label="parent"];
2->25 [style = solid, label="j"];
2->6 [style = solid, label="j"];
8->23 [style = dashed, label="0"];
5->8 [style = solid, label="i"];
}
