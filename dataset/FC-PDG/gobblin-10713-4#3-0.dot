digraph {
2 [style = filled, label = "Assert.assertNull(error)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(task.getTaskState().getWorkingState(),WorkUnitState.WorkingState.SUCCESSFUL)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "MyConverter converter = new MyConverter()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "MyExtractor extractor = new MyExtractor(new StreamEntity((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@19ed948)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testFlushFailure['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "MyFlushDataWriter writer = new MyFlushDataWriter()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "MyExtractor extractor = new MyExtractor(new StreamEntity((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@19ed89f)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(task.getTaskState().getWorkingState(),WorkUnitState.WorkingState.FAILED)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(converter.messages,Lists.newArrayList(FlushControlMessage.builder().flushReason(\"flush1\").build(),FlushControlMessage.builder().flushReason(\"flush2\").build()))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "task.commit()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Throwable error = flushAckable1.waitForAck()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "FlushAckable flushAckable2 = new FlushAckable()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(writer.flush_messages,Lists.newArrayList(\"flush called\",\"flush called\"))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(converter.records,Lists.newArrayList(\"a\",\"b\"))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Task task = setupTask(extractor,writer,converter)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "error = flushAckable2.waitForAck()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(writer.records,Lists.newArrayList(\"a\",\"b\"))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testFlushControlMessages['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(writer.records,Lists.newArrayList(\"a\",\"b\"))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(writer.flush_messages,Lists.newArrayList(\"flush called\"))@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "task.run()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "FlushAckable flushAckable1 = new FlushAckable()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(converter.messages,Lists.newArrayList(FlushControlMessage.builder().flushReason(\"flush1\").build(),FlushControlMessage.builder().flushReason(\"flushFail1\").build()))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertNotNull(error)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testFlushFailure['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9->18 [style = dashed, label="0"];
16->20 [style = dashed, label="0"];
4->6 [style = bold, label=""];
8->9 [style = bold, label=""];
9->11 [style = bold, label=""];
11->20 [style = bold, label=""];
14->16 [style = bold, label=""];
15->10 [style = solid, label="flushAckable2"];
13->9 [style = dashed, label="0"];
19->5 [style = bold, label=""];
24->23 [style = bold, label=""];
5->10 [style = solid, label="flushAckable1"];
7->2 [style = solid, label="error"];
12->4 [style = solid, label="converter"];
12->1 [style = bold, label=""];
23->12 [style = solid, label="writer"];
0->3 [style = bold, label=""];
21->24 [style = bold, label=""];
6->8 [style = bold, label=""];
10->12 [style = bold, label=""];
8->18 [style = bold, label=""];
23->12 [style = bold, label=""];
21->12 [style = solid, label="extractor"];
1->4 [style = solid, label="writer"];
3->8 [style = bold, label=""];
11->13 [style = bold, label=""];
10->4 [style = solid, label="extractor"];
1->4 [style = bold, label=""];
24->12 [style = solid, label="converter"];
2->0 [style = bold, label=""];
22->21 [style = bold, label=""];
6->7 [style = bold, label=""];
13->14 [style = bold, label=""];
15->10 [style = bold, label=""];
17->5 [style = bold, label=""];
18->11 [style = bold, label=""];
0->3 [style = solid, label="error"];
5->15 [style = bold, label=""];
7->2 [style = bold, label=""];
}
