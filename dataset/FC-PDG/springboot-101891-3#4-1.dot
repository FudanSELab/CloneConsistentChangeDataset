digraph {
7 [style = filled, label = "List<ApplicationEvent> events = listener.receivedEvents()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "addHttpHandlerBean()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(initializedEvent.getSource().getPort() >= 0).isTrue()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "whenContextIsRefreshedThenReactiveWebServerInitializedEventIsPublished['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "ServletWebServerInitializedEvent initializedEvent = (ServletWebServerInitializedEvent)events.get(1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "whenContextIsRefreshedThenReactiveWebServerInitializedEventIsPublished['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "addWebServerFactoryBean()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(initializedEvent.getApplicationContext()).isEqualTo(this.context)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<ApplicationEvent> events = this.context.getBean().receivedEvents()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(initializedEvent.getSource().getPort()).isGreaterThanOrEqualTo(0)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(events).hasSize(2).extracting(\"class\").containsExactly(,)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(initializedEvent.getApplicationContext()).isEqualTo(this.context)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ReactiveWebServerInitializedEvent initializedEvent = (ReactiveWebServerInitializedEvent)events.get(0)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "TestApplicationListener listener = new TestApplicationListener()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ReactiveWebServerInitializedEvent initializedEvent = (ReactiveWebServerInitializedEvent)events.get(1)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "ServletWebServerInitializedEventPublished['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "this.context.addApplicationListener(listener)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(events).hasSize(2).extracting(\"class\").containsExactly(,)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "this.context.refresh()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "this.context.registerBeanDefinition(\"listener\",new RootBeanDefinition())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(events).hasSize(2).extracting(\"class\").contains(,)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
7->18 [style = dashed, label="0"];
5->9 [style = bold, label=""];
15->14 [style = bold, label=""];
1->14 [style = dashed, label="0"];
11->1 [style = bold, label=""];
2->1 [style = bold, label=""];
4->15 [style = bold, label=""];
3->6 [style = bold, label=""];
6->0 [style = bold, label=""];
19->17 [style = bold, label=""];
7->8 [style = bold, label=""];
12->9 [style = bold, label=""];
13->11 [style = bold, label=""];
4->7 [style = bold, label=""];
8->13 [style = dashed, label="0"];
3->19 [style = dashed, label="0"];
2->15 [style = dashed, label="0"];
18->4 [style = bold, label=""];
8->2 [style = bold, label=""];
0->4 [style = bold, label=""];
6->0 [style = solid, label="listener"];
9->19 [style = bold, label=""];
9->3 [style = bold, label=""];
2->11 [style = dashed, label="0"];
8->4 [style = dashed, label="0"];
1->10 [style = bold, label=""];
16->9 [style = bold, label=""];
17->18 [style = bold, label=""];
14->20 [style = bold, label=""];
}
