digraph {
30 [style = filled, label = "Assert.assertFalse(result)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "doReturn(idealState).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.IDEALSTATES)))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "when(externalView.getStateMap(\"db0\")).thenReturn(ImmutableMap.of(TEST_INSTANCE,\"Master\",\"instance1\",\"Slave\",\"instance2\",\"Slave\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "boolean result = InstanceValidationUtil.siblingNodesActiveReplicaCheck(mock.dataAccessor,TEST_INSTANCE)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "StateModelDefinition stateModelDefinition = mock()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "doReturn(stateModelDefinition).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.STATEMODELDEFS)))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(idealState.getStateModelDefRef()).thenReturn(\"MasterSlave\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "doReturn(ImmutableList.of(resource)).when(mock.dataAccessor).getChildNames(argThat(new PropertyKeyArgument(PropertyType.IDEALSTATES)))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestSiblingNodesActiveReplicaCheck_success['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "when(idealState.isEnabled()).thenReturn(true)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "when(idealState.isValid()).thenReturn(true)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "when(externalView.getMinActiveReplicas()).thenReturn(2)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "doReturn(externalView).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "when(stateModelDefinition.getInitialState()).thenReturn(\"OFFLINE\")@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Mock mock = new Mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "IdealState idealState = mock()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "ExternalView externalView = mock()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "boolean result = InstanceValidationUtil.siblingNodesActiveReplicaCheck(mock.dataAccessor,TEST_INSTANCE)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(stateModelDefinition.getInitialState()).thenReturn(\"OFFLINE\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "doReturn(stateModelDefinition).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.STATEMODELDEFS)))@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Assert.assertTrue(result)@@@21@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "when(externalView.getPartitionSet()).thenReturn(ImmutableSet.of(\"db0\"))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(externalView.getStateModelDefRef()).thenReturn(\"MasterSlave\")@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "TestSiblingNodesActiveReplicaCheck_fail['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "when(externalView.getMinActiveReplicas()).thenReturn(3)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "doReturn(ImmutableList.of(resource)).when(mock.dataAccessor).getChildNames(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TestSiblingNodesActiveReplicaCheck_success['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "ExternalView externalView = mock()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "StateModelDefinition stateModelDefinition = mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String resource = \"resource\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "doReturn(ImmutableList.of(resource)).when(mock.dataAccessor).getChildNames(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
6->17 [style = bold, label=""];
5->29 [style = bold, label=""];
14->30 [style = solid, label="result"];
15->10 [style = bold, label=""];
27->1 [style = bold, label=""];
1->8 [style = bold, label=""];
14->6 [style = solid, label="result"];
14->30 [style = bold, label=""];
15->11 [style = solid, label="mock"];
10->27 [style = bold, label=""];
16->24 [style = bold, label=""];
15->1 [style = solid, label="mock"];
18->11 [style = bold, label=""];
29->0 [style = bold, label=""];
11->29 [style = dashed, label="0"];
15->6 [style = solid, label="mock"];
28->9 [style = bold, label=""];
12->16 [style = bold, label=""];
1->26 [style = bold, label=""];
15->16 [style = solid, label="mock"];
26->4 [style = bold, label=""];
22->23 [style = bold, label=""];
2->13 [style = bold, label=""];
7->9 [style = bold, label=""];
20->18 [style = bold, label=""];
25->20 [style = bold, label=""];
12->10 [style = bold, label=""];
11->0 [style = bold, label=""];
3->2 [style = bold, label=""];
22->23 [style = solid, label="result"];
19->9 [style = bold, label=""];
21->22 [style = bold, label=""];
9->15 [style = bold, label=""];
24->25 [style = bold, label=""];
15->3 [style = solid, label="mock"];
6->30 [style = dashed, label="0"];
15->12 [style = bold, label=""];
5->11 [style = bold, label=""];
8->4 [style = bold, label=""];
10->1 [style = bold, label=""];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
14->6 [style = bold, label=""];
17->21 [style = bold, label=""];
8->26 [style = dashed, label="0"];
}
