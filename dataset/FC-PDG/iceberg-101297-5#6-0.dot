digraph {
0 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(lessThanOrEqual(\"id\",79),SPEC,true).eval(FILE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(lessThanOrEqual(\"id\",5),SPEC,true).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(lessThanOrEqual(\"id\",INT_MAX_VALUE),SPEC,true).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",30),SPEC,true).eval(FILE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testIntegerLtEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",79),SPEC,true).eval(FILE)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(lessThanOrEqual(\"id\",30),SPEC,true).eval(FILE)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to upper bound\",shouldRead)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",85),SPEC,true).eval(FILE)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testIntegerLtEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(\"Should read: one possible id\",shouldRead)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(\"Should read: many possible ids\",shouldRead)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(lessThanOrEqual(\"id\",INT_MIN_VALUE - 25),SPEC,true).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to lower bound\",shouldRead)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",80),SPEC,true).eval(FILE)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(lessThanOrEqual(\"id\",INT_MIN_VALUE),SPEC,true).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertTrue(\"Should read: id between lower and upper bounds\",shouldRead)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",29),SPEC,true).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertFalse(\"Should not read: id range below lower bound (5 < 30)\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testIntegerNotEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",75),SPEC,true).eval(FILE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",5),SPEC,true).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(lessThanOrEqual(\"id\",29),SPEC,true).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(lessThanOrEqual(\"id\",INT_MIN_VALUE - 1),SPEC,true).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertFalse(\"Should not read: id range below lower bound (29 < 30)\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
0->3 [style = solid, label="shouldRead"];
26->23 [style = solid, label="shouldRead"];
1->4 [style = bold, label=""];
19->18 [style = bold, label=""];
14->25 [style = bold, label=""];
8->16 [style = dashed, label="0"];
8->1 [style = solid, label="shouldRead"];
16->27 [style = bold, label=""];
7->10 [style = bold, label=""];
21->14 [style = solid, label="shouldRead"];
25->15 [style = solid, label="shouldRead"];
22->21 [style = bold, label=""];
10->3 [style = bold, label=""];
7->0 [style = bold, label=""];
11->5 [style = solid, label="shouldRead"];
4->26 [style = dashed, label="0"];
12->9 [style = bold, label=""];
2->17 [style = dashed, label="0"];
28->16 [style = bold, label=""];
0->20 [style = dashed, label="0"];
0->10 [style = dashed, label="0"];
1->11 [style = bold, label=""];
4->5 [style = solid, label="shouldRead"];
3->19 [style = dashed, label="0"];
24->20 [style = bold, label=""];
8->9 [style = dashed, label="0"];
8->1 [style = bold, label=""];
11->5 [style = bold, label=""];
5->2 [style = bold, label=""];
17->24 [style = bold, label=""];
18->22 [style = bold, label=""];
9->1 [style = solid, label="shouldRead"];
17->24 [style = solid, label="shouldRead"];
7->24 [style = dashed, label="0"];
10->3 [style = solid, label="shouldRead"];
13->7 [style = bold, label=""];
2->13 [style = dashed, label="0"];
5->13 [style = bold, label=""];
26->23 [style = bold, label=""];
6->8 [style = bold, label=""];
25->15 [style = bold, label=""];
2->7 [style = solid, label="shouldRead"];
23->17 [style = bold, label=""];
2->7 [style = bold, label=""];
4->11 [style = dashed, label="0"];
20->19 [style = solid, label="shouldRead"];
9->1 [style = bold, label=""];
20->19 [style = bold, label=""];
4->5 [style = bold, label=""];
16->27 [style = solid, label="shouldRead"];
13->7 [style = solid, label="shouldRead"];
18->22 [style = solid, label="shouldRead"];
21->14 [style = bold, label=""];
27->26 [style = bold, label=""];
}
