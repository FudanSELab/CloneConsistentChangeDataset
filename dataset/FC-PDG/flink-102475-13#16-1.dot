digraph {
2 [style = filled, label = "final Map<OperatorID,OperatorSnapshotFutures> snapshotsInProgress = new HashMap<>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testAsyncCheckpointException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "isTaskRunning@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertNull(environment.getCause())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(0,subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "subtaskCheckpointCoordinator.getChannelStateWriter().start(checkpointId,CheckpointOptions.forCheckpointWithDefaultLocation())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "rawKeyedStateHandleFuture.awaitRun()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "OperatorSnapshotFutures operatorSnapshotResult = new OperatorSnapshotFutures(DoneFuture.of(SnapshotResult.empty()),rawKeyedStateHandleFuture,DoneFuture.of(SnapshotResult.empty()),DoneFuture.of(SnapshotResult.empty()),DoneFuture.of(SnapshotResult.empty()),DoneFuture.of(SnapshotResult.empty()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testAsyncCheckpointException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "subtaskCheckpointCoordinator.notifyCheckpointAborted(checkpointId,operatorChain,null)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "snapshotsInProgress.put(new OperatorID(),new OperatorSnapshotFutures(ExceptionallyDoneFuture.of(new RuntimeException(\"Async Checkpoint Exception\")),DoneFuture.of(SnapshotResult.empty()),DoneFuture.of(SnapshotResult.empty()),DoneFuture.of(SnapshotResult.empty()),DoneFuture.of(SnapshotResult.empty()),DoneFuture.of(SnapshotResult.empty())))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final AsyncCheckpointRunnable runnable = createAsyncRunnable(snapshotsInProgress,environment,isTaskRunning)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(1,subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final AsyncCheckpointRunnable runnable = createAsyncRunnable(snapshotsInProgress,environment,false,isTaskRunning)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertFalse(rawKeyedStateHandleFuture.isCancelled())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(rawKeyedStateHandleFuture.isCancelled())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final BlockingRunnableFuture rawKeyedStateHandleFuture = new BlockingRunnableFuture()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final OperatorChain<String,AbstractStreamOperator<String>> operatorChain = operatorChain(new CheckpointOperator(operatorSnapshotResult))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertSame(environment.getCause().getCheckpointFailureReason(),CheckpointFailureReason.CHECKPOINT_ASYNC_EXCEPTION)@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "long checkpointId = 42L@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "MockEnvironment mockEnvironment = MockEnvironment.builder().build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "subtaskCheckpointCoordinator.checkpointState(new CheckpointMetaData(checkpointId,System.currentTimeMillis()),CheckpointOptions.forCheckpointWithDefaultLocation(),new CheckpointMetricsBuilder(),operatorChain,null)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "boolean isTaskRunning@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "runnable.run()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final TestEnvironment environment = new TestEnvironment()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testNotifyCheckpointAbortedDuringAsyncPhase['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->4 [style = bold, label=""];
22->15 [style = bold, label=""];
0->5 [style = dotted, label="true"];
18->12 [style = solid, label="checkpointId"];
2->6 [style = bold, label=""];
18->23 [style = solid, label="checkpointId"];
7->3 [style = dotted, label="false"];
14->12 [style = solid, label="operatorChain"];
2->10 [style = solid, label="snapshotsInProgress"];
5->7 [style = solid, label="isTaskRunning"];
0->2 [style = bold, label=""];
18->25 [style = solid, label="checkpointId"];
9->10 [style = solid, label="environment"];
12->20 [style = bold, label=""];
9->1 [style = solid, label="environment"];
11->5 [style = dotted, label="true"];
1->10 [style = dashed, label="0"];
9->10 [style = bold, label=""];
7->8 [style = bold, label=""];
15->16 [style = bold, label=""];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
4->7 [style = bold, label=""];
5->10 [style = solid, label="isTaskRunning"];
2->1 [style = solid, label="snapshotsInProgress"];
17->24 [style = bold, label=""];
19->13 [style = bold, label=""];
25->12 [style = bold, label=""];
21->22 [style = bold, label=""];
5->1 [style = solid, label="isTaskRunning"];
18->25 [style = bold, label=""];
10->4 [style = bold, label=""];
13->23 [style = bold, label=""];
16->14 [style = bold, label=""];
23->17 [style = bold, label=""];
14->18 [style = bold, label=""];
16->14 [style = solid, label="operatorSnapshotResult"];
6->9 [style = bold, label=""];
9->1 [style = bold, label=""];
14->23 [style = solid, label="operatorChain"];
20->19 [style = bold, label=""];
7->8 [style = dotted, label="true"];
15->16 [style = solid, label="rawKeyedStateHandleFuture"];
}
