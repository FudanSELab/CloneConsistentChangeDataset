digraph {
15 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",5),SPEC,true).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "Assert.assertFalse(\"Should not read: id range below lower bound (29 < 30)\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "boolean shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",5)).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",80),SPEC,true).eval(FILE)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,lessThanOrEqual(\"id\",29)).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",75),SPEC,true).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Assert.assertTrue(\"Should read: one possible id\",shouldRead)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertTrue(\"Should read: id between lower and upper bounds\",shouldRead)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testIntegerNotEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",30),SPEC,true).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testIntegerLtEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",79)).eval(FILE)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "boolean shouldRead = new InclusiveManifestEvaluator(SPEC,lessThanOrEqual(\"id\",5)).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",29),SPEC,true).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",29)).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",30)).eval(FILE)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Assert.assertFalse(\"Should not read: id range below lower bound (5 < 30)\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",79),SPEC,true).eval(FILE)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,lessThanOrEqual(\"id\",30)).eval(FILE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertTrue(\"Should read: many possible ids\",shouldRead)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",75)).eval(FILE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",80)).eval(FILE)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to lower bound\",shouldRead)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to upper bound\",shouldRead)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notEqual(\"id\",85),SPEC,true).eval(FILE)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,lessThanOrEqual(\"id\",79)).eval(FILE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",85)).eval(FILE)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "testIntegerNotEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
18->14 [style = solid, label="shouldRead"];
0->3 [style = solid, label="shouldRead"];
16->13 [style = bold, label=""];
3->30 [style = dashed, label="0"];
25->31 [style = solid, label="shouldRead"];
28->30 [style = bold, label=""];
8->18 [style = bold, label=""];
5->23 [style = dashed, label="0"];
15->5 [style = solid, label="shouldRead"];
4->8 [style = solid, label="shouldRead"];
21->3 [style = solid, label="shouldRead"];
22->9 [style = bold, label=""];
27->28 [style = bold, label=""];
14->22 [style = bold, label=""];
2->27 [style = dashed, label="0"];
11->29 [style = dashed, label="0"];
30->25 [style = bold, label=""];
11->17 [style = dashed, label="0"];
3->16 [style = bold, label=""];
26->24 [style = bold, label=""];
5->17 [style = bold, label=""];
24->23 [style = bold, label=""];
0->28 [style = dashed, label="0"];
11->2 [style = bold, label=""];
6->5 [style = solid, label="shouldRead"];
11->2 [style = solid, label="shouldRead"];
14->1 [style = bold, label=""];
1->9 [style = bold, label=""];
15->5 [style = bold, label=""];
17->2 [style = solid, label="shouldRead"];
10->13 [style = solid, label="shouldRead"];
25->31 [style = bold, label=""];
23->29 [style = bold, label=""];
1->22 [style = dashed, label="0"];
28->30 [style = solid, label="shouldRead"];
3->10 [style = bold, label=""];
6->5 [style = bold, label=""];
29->27 [style = bold, label=""];
20->8 [style = bold, label=""];
2->0 [style = bold, label=""];
1->9 [style = solid, label="shouldRead"];
29->27 [style = solid, label="shouldRead"];
24->23 [style = solid, label="shouldRead"];
10->13 [style = bold, label=""];
17->2 [style = bold, label=""];
6->15 [style = dashed, label="0"];
4->20 [style = dashed, label="0"];
2->21 [style = bold, label=""];
0->21 [style = dashed, label="0"];
6->24 [style = dashed, label="0"];
22->9 [style = solid, label="shouldRead"];
13->31 [style = dashed, label="0"];
7->6 [style = bold, label=""];
12->14 [style = bold, label=""];
4->8 [style = bold, label=""];
12->18 [style = dashed, label="0"];
13->20 [style = bold, label=""];
5->11 [style = bold, label=""];
10->16 [style = dashed, label="0"];
19->15 [style = bold, label=""];
20->8 [style = solid, label="shouldRead"];
16->13 [style = solid, label="shouldRead"];
18->14 [style = bold, label=""];
10->25 [style = dashed, label="0"];
8->12 [style = bold, label=""];
12->14 [style = solid, label="shouldRead"];
21->3 [style = bold, label=""];
13->4 [style = bold, label=""];
}
