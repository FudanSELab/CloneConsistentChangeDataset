digraph {
26 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,false,DATA_TO_CLIENT)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(1))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(1))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Socket secureClientSocket = null@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertFalse(handshakeCompleted)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "bytesRead = secureClientSocket.getInputStream().read(buf,0,buf.length)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "handshakeCompletedLock.wait(TIMEOUT)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "byte(( buf = new byte((((@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "handshakeCompletedLock@@@18@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "clientSocket = connectWithoutSSL()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "byte(( buf = new byte((((@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "!handshakeCompleted@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "serverThread.start()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int bytesRead = clientSocket.getInputStream().read(buf,0,buf.length)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "testTLSDetectionNonBlockingStrictServerIdleClient['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "{forceClose(badClientSocket)forceClose(secureClientSocket)serverThread.shutdown(TIMEOUT)}@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testTLSDetectionNonBlockingNonStrictServerIdleClient['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "clientSocket.getOutputStream().flush()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "badClientSocket = connectWithoutSSL()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "assertTrue(handshakeCompleted)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "secureClientSocket = connectWithSSL()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "clientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "handshakeCompletedLock@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "testTLSDetectionNonBlockingNonStrictServerIdleClient['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "buf = new byte((((@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Socket badClientSocket = null@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "secureClientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertFalse(handshakeCompleted)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "int bytesRead = secureClientSocket.getInputStream().read(buf,0,buf.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "secureClientSocket.getOutputStream().flush()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Socket clientSocket = null@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(handshakeCompleted)@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->42 [style = dashed, label="0"];
7->18 [style = solid, label="buf"];
28->6 [style = bold, label=""];
16->32 [style = dashed, label="0"];
26->38 [style = dashed, label="0"];
11->29 [style = bold, label=""];
41->9 [style = bold, label=""];
14->28 [style = bold, label=""];
21->24 [style = bold, label=""];
12->42 [style = bold, label=""];
38->31 [style = bold, label=""];
24->27 [style = dotted, label="true"];
1->13 [style = bold, label=""];
0->15 [style = bold, label=""];
9->16 [style = bold, label=""];
15->8 [style = dotted, label="true"];
10->12 [style = bold, label=""];
36->2 [style = bold, label=""];
5->29 [style = solid, label="badClientSocket"];
7->26 [style = solid, label="buf"];
6->41 [style = dashed, label="0"];
27->17 [style = bold, label=""];
18->35 [style = bold, label=""];
35->38 [style = bold, label=""];
24->27 [style = bold, label=""];
9->30 [style = dashed, label="0"];
2->20 [style = bold, label=""];
11->44 [style = bold, label=""];
2->29 [style = solid, label="secureClientSocket"];
18->19 [style = bold, label=""];
37->29 [style = bold, label=""];
7->38 [style = solid, label="buf"];
23->3 [style = bold, label=""];
20->14 [style = bold, label=""];
17->37 [style = bold, label=""];
12->1 [style = bold, label=""];
14->43 [style = bold, label=""];
5->25 [style = bold, label=""];
18->19 [style = solid, label="bytesRead"];
26->0 [style = bold, label=""];
27->11 [style = bold, label=""];
3->7 [style = bold, label=""];
28->43 [style = dashed, label="0"];
19->26 [style = bold, label=""];
13->5 [style = bold, label=""];
43->16 [style = solid, label="buf"];
28->16 [style = solid, label="buf"];
19->35 [style = dashed, label="0"];
15->36 [style = bold, label=""];
6->9 [style = solid, label="bytesRead"];
1->39 [style = dashed, label="0"];
39->13 [style = bold, label=""];
44->29 [style = bold, label=""];
16->24 [style = bold, label=""];
6->30 [style = solid, label="bytesRead"];
30->32 [style = bold, label=""];
8->36 [style = dashed, label="0"];
32->33 [style = bold, label=""];
24->11 [style = dotted, label="true"];
27->37 [style = bold, label=""];
8->2 [style = bold, label=""];
33->24 [style = bold, label=""];
28->32 [style = solid, label="buf"];
22->10 [style = bold, label=""];
7->18 [style = bold, label=""];
4->12 [style = bold, label=""];
43->41 [style = bold, label=""];
25->29 [style = solid, label="clientSocket"];
12->39 [style = bold, label=""];
27->17 [style = dotted, label="true"];
18->35 [style = solid, label="bytesRead"];
15->8 [style = bold, label=""];
40->10 [style = bold, label=""];
42->13 [style = bold, label=""];
43->41 [style = solid, label="buf"];
25->23 [style = bold, label=""];
15->36 [style = dotted, label="true"];
34->10 [style = bold, label=""];
31->15 [style = bold, label=""];
28->6 [style = solid, label="buf"];
41->9 [style = solid, label="bytesRead"];
5->2 [style = bold, label=""];
21->33 [style = dashed, label="0"];
16->21 [style = bold, label=""];
0->31 [style = dashed, label="0"];
24->37 [style = dotted, label="true"];
10->4 [style = bold, label=""];
11->37 [style = dashed, label="0"];
6->9 [style = bold, label=""];
17->11 [style = bold, label=""];
6->30 [style = bold, label=""];
}
