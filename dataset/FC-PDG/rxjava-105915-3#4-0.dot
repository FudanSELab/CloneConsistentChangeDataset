digraph {
6 [style = filled, label = "TestSubscriber<Long> ts = new TestSubscriber<Long>(0L)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ts.request(1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "doesntRequestMoreThanNeededFromUpstream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Flowable.interval(100,TimeUnit.MILLISECONDS).doOnRequest(new LongConsumer(){@Override public void accept(long n){requests.addAndGet(n)}}).skip(4).subscribe(ts)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ts.request(1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ts.assertComplete()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ts.request(1)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Thread.sleep(100)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Thread.sleep(100)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(3,requests.get())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "ts.cancel()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Thread.sleep(50)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "backpressureMultipleSmallAsyncRequests['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final AtomicLong requests = new AtomicLong()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final AtomicLong requests = new AtomicLong(0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(6,requests.get())@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "doesntRequestMoreThanNeededFromUpstream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ts.assertNoErrors()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(2,requests.get())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16->3 [style = bold, label=""];
1->8 [style = bold, label=""];
9->11 [style = bold, label=""];
8->15 [style = dashed, label="0"];
10->3 [style = bold, label=""];
9->17 [style = bold, label=""];
8->6 [style = bold, label=""];
15->6 [style = bold, label=""];
6->2 [style = solid, label="ts"];
2->10 [style = bold, label=""];
6->2 [style = bold, label=""];
7->5 [style = dashed, label="0"];
3->9 [style = bold, label=""];
11->0 [style = bold, label=""];
5->12 [style = bold, label=""];
0->4 [style = bold, label=""];
7->12 [style = dashed, label="0"];
5->7 [style = bold, label=""];
10->16 [style = dashed, label="0"];
13->8 [style = bold, label=""];
19->15 [style = bold, label=""];
4->5 [style = bold, label=""];
18->14 [style = bold, label=""];
17->18 [style = bold, label=""];
14->5 [style = bold, label=""];
2->16 [style = bold, label=""];
}
