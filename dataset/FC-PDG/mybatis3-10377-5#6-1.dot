digraph {
6 [style = filled, label = "criteria.setFirstName(\"Christian\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testWithComplex4['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Person criteria = new Person()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(\"Christian\",person.getFirstName())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertNotNull(\"parent must not be null\",parent)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"John\",parent.getFirstName())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "Assertions.assertNotNull(person,\"person must not be null\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(\"Smith\",parent.getLastName())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "PersonMapper personMapper = sqlSession.getMapper()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assertions.assertEquals(\"Poitras\",person.getLastName())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assertions.assertNotNull(parent,\"parent must not be null\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assertions.assertEquals(\"Christian\",person.getFirstName())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertNotNull(\"person must not be null\",person)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Person person = personMapper.getParentWithComplex(criteria)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Person parent = person.getParent()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"Smith\",parent.getLastName())@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"John\",parent.getFirstName())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNotNull(\"parent must not be null\",parent)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assertions.assertEquals(\"Smith\",parent.getLastName())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testWithComplex4['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Person person = personMapper.getComplexWithParamAttributes(2l)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testWithParamAttributes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(\"Poitras\",person.getLastName())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assertions.assertEquals(\"John\",parent.getFirstName())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "criteria.setLastName(\"Poitras\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
4->1 [style = solid, label="parent"];
23->21 [style = solid, label="person"];
12->5 [style = bold, label=""];
1->15 [style = dashed, label="0"];
2->18 [style = solid, label="person"];
11->4 [style = bold, label=""];
4->15 [style = bold, label=""];
0->16 [style = dashed, label="0"];
10->0 [style = solid, label="parent"];
12->17 [style = dashed, label="0"];
0->11 [style = bold, label=""];
3->6 [style = bold, label=""];
2->18 [style = bold, label=""];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
17->19 [style = bold, label=""];
7->3 [style = bold, label=""];
3->2 [style = solid, label="criteria"];
3->23 [style = dashed, label="0"];
15->17 [style = bold, label=""];
8->2 [style = bold, label=""];
23->21 [style = bold, label=""];
21->22 [style = bold, label=""];
13->7 [style = bold, label=""];
4->15 [style = solid, label="parent"];
11->14 [style = dashed, label="0"];
7->23 [style = bold, label=""];
10->0 [style = bold, label=""];
6->8 [style = bold, label=""];
1->12 [style = bold, label=""];
16->14 [style = bold, label=""];
4->1 [style = bold, label=""];
22->24 [style = bold, label=""];
20->7 [style = bold, label=""];
5->19 [style = dashed, label="0"];
10->18 [style = dashed, label="0"];
14->4 [style = bold, label=""];
2->10 [style = solid, label="person"];
18->16 [style = bold, label=""];
}
