digraph {
6 [style = filled, label = "Integer id = ref.fieldId()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "T upper = Conversions.fromByteBuffer(ref.type(),upperBounds.get(id))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Literal<T> lit@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "T upper = Conversions.fromByteBuffer(field.type(),upperBounds.get(id))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "notEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "cmp <= 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "cmp < 0@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Preconditions.checkNotNull(field,\"Cannot filter by nested column: %s\",schema.findField(id))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return ROWS_MIGHT_NOT_MATCH@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "lowerBounds != null && lowerBounds.containsKey(id)@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Types.NestedField field = struct.field(id)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "return ROWS_CANNOT_MATCH@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "BoundReference<T> ref@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int cmp = lit.comparator().compare(lower,lit.value())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "gt['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "T lower = Conversions.fromByteBuffer(struct.field(id).type(),lowerBounds.get(id))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "return ROWS_MIGHT_MATCH@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "return ROWS_MUST_MATCH@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Literal<T> lit@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Literal<T> lit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "upperBounds != null && upperBounds.containsKey(id)@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int cmp = lit.comparator().compare(upper,lit.value())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "cmp > 0@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "return ROWS_MUST_MATCH@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "gt['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8->10 [style = dotted, label="true"];
25->21 [style = solid, label="cmp"];
8->14 [style = bold, label=""];
6->14 [style = solid, label="id"];
4->14 [style = dashed, label="0"];
5->8 [style = bold, label=""];
10->2 [style = bold, label=""];
6->4 [style = solid, label="id"];
8->4 [style = bold, label=""];
2->11 [style = bold, label=""];
20->18 [style = bold, label=""];
19->20 [style = bold, label=""];
21->24 [style = dotted, label="true"];
13->6 [style = bold, label=""];
7->6 [style = bold, label=""];
16->8 [style = bold, label=""];
10->19 [style = solid, label="cmp"];
4->10 [style = solid, label="upper"];
21->8 [style = bold, label=""];
8->2 [style = dotted, label="true"];
6->8 [style = solid, label="id"];
21->24 [style = bold, label=""];
13->9 [style = dotted, label="true"];
0->11 [style = bold, label=""];
6->8 [style = bold, label=""];
15->6 [style = bold, label=""];
7->9 [style = dotted, label="true"];
0->20 [style = dashed, label="0"];
1->5 [style = solid, label="field"];
10->19 [style = bold, label=""];
8->19 [style = dotted, label="true"];
19->20 [style = dotted, label="true"];
25->21 [style = bold, label=""];
8->18 [style = bold, label=""];
2->19 [style = dashed, label="0"];
6->16 [style = solid, label="id"];
8->11 [style = bold, label=""];
6->5 [style = solid, label="id"];
16->21 [style = dotted, label="true"];
11->18 [style = dashed, label="0"];
14->10 [style = solid, label="upper"];
9->23 [style = dashed, label="0"];
4->10 [style = bold, label=""];
8->14 [style = dotted, label="true"];
16->25 [style = dotted, label="true"];
17->25 [style = solid, label="lower"];
2->0 [style = bold, label=""];
16->17 [style = bold, label=""];
6->17 [style = solid, label="id"];
2->0 [style = dotted, label="true"];
15->22 [style = dotted, label="true"];
14->10 [style = bold, label=""];
24->8 [style = bold, label=""];
7->3 [style = dotted, label="true"];
13->12 [style = dotted, label="true"];
19->18 [style = bold, label=""];
6->1 [style = bold, label=""];
8->4 [style = dotted, label="true"];
5->16 [style = bold, label=""];
16->17 [style = dotted, label="true"];
15->23 [style = dotted, label="true"];
6->1 [style = solid, label="id"];
10->2 [style = solid, label="cmp"];
17->25 [style = bold, label=""];
1->5 [style = bold, label=""];
}
