digraph {
19 [style = filled, label = "final ValueType toValueType = aggregateRowSignature.getColumnType(expression.getDirectColumn()).orElseThrow(null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final ExprType toExprType = Expressions.exprTypeForValueType(columnValueType)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "return true@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return toExprType.equals(fromExprType)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ValueType columnValueType = aggregateRowSignature.getColumnType(expression.getDirectColumn()).orElseThrow(null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final RexNode rexNode@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "columnValueType == ValueType.COMPLEX@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final RowSignature aggregateRowSignature@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "return toValueType == ValueType.COMPLEX && fromValueType == ValueType.COMPLEX@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "postAggregatorComplexDirectColumnIsOk['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final ExprType fromExprType = Expressions.exprTypeForValueType(Calcites.getValueTypeForRelDataType(rexNode.getType()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "final RowSignature aggregateRowSignature@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "final ValueType fromValueType = Calcites.getValueTypeForRelDataType(rexNode.getType())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final ExprType fromExprType = ExprType.fromValueType(Calcites.getValueTypeForRelDataType(rexNode.getType()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final ExprType toExprType = ExprType.fromValueType(columnValueType)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "postAggregatorDirectColumnIsOk['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final DruidExpression expression@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "return false@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final RowSignature aggregateRowSignature@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final DruidExpression expression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final RexNode rexNode@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "postAggregatorDirectColumnIsOk['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "!expression.isDirectColumnAccess()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final RexNode rexNode@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22->23 [style = solid, label="fromValueType"];
15->10 [style = bold, label=""];
2->19 [style = bold, label=""];
16->12 [style = dotted, label="true"];
21->20 [style = dotted, label="true"];
16->11 [style = bold, label=""];
16->13 [style = dotted, label="true"];
21->18 [style = dotted, label="true"];
15->10 [style = solid, label="fromExprType"];
4->14 [style = solid, label="columnValueType"];
11->4 [style = bold, label=""];
8->3 [style = bold, label=""];
1->3 [style = bold, label=""];
8->14 [style = bold, label=""];
7->20 [style = dashed, label="0"];
21->17 [style = dotted, label="true"];
9->10 [style = bold, label=""];
4->8 [style = solid, label="columnValueType"];
11->19 [style = bold, label=""];
2->4 [style = bold, label=""];
22->23 [style = bold, label=""];
11->2 [style = bold, label=""];
3->9 [style = bold, label=""];
8->1 [style = dotted, label="true"];
16->7 [style = dotted, label="true"];
8->1 [style = bold, label=""];
8->22 [style = dashed, label="0"];
11->2 [style = dotted, label="true"];
21->11 [style = bold, label=""];
6->11 [style = bold, label=""];
19->23 [style = solid, label="toValueType"];
6->7 [style = dotted, label="true"];
4->8 [style = bold, label=""];
4->3 [style = solid, label="columnValueType"];
4->19 [style = dashed, label="0"];
1->14 [style = bold, label=""];
14->15 [style = bold, label=""];
6->0 [style = dotted, label="true"];
3->14 [style = dashed, label="0"];
19->22 [style = bold, label=""];
1->23 [style = dashed, label="0"];
9->10 [style = solid, label="fromExprType"];
6->5 [style = dotted, label="true"];
9->15 [style = dashed, label="0"];
}
