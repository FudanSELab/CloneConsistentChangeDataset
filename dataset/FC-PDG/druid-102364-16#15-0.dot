digraph {
13 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getThrownAway())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testRunTwoTasksTwoPartitions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(4,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "final KinesisIndexTask task2 = createTask(null,new KinesisIndexTaskIOConfig(1,\"sequence1\",new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"3\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"9\")),true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final KinesisIndexTask task1 = createTask(null,new KinesisIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"2\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\")),true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(TaskState.FAILED,future2.get().getStatusCode())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "recordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2011/P1D\",0)@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "EasyMock.expectLastCall().atLeastOnce()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\",SHARD_ID0,\"1\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@26@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2),publishedDescriptors())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "verifyAll()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(2,13)).once().andReturn(records.subList(3,13)).once()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testRunTwoTasksTwoPartitions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final KinesisIndexTask task2 = createTask(null,new KinesisIndexTaskIOConfig(1,\"sequence1\",new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID0,\"0\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID0,\"1\")),true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2010/P1D\",0,ImmutableList.of(\"c\")),sdd(\"2011/P1D\",0,ImmutableList.of(\"d\",\"e\"),ImmutableList.of(\"h\")),sdd(\"2011/P1D\",1,ImmutableList.of(\"d\",\"e\"),ImmutableList.of(\"h\")),sdd(\"2012/P1D\",0,ImmutableList.of(\"g\"))),publishedDescriptors())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2010/P1D\",0)@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testRunConflicting['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(3)))@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "EasyMock.expectLastCall().times(2)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "SegmentDescriptor desc4 = sd(\"2012/P1D\",0)@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "recordSupplier.close()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@31@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2011/P1D\",1)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(3,task1.getRunner().getRowIngestionMeters().getProcessed())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4),publishedDescriptors())@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "recordSupplier.assign(EasyMock.anyObject())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(2,13)).once().andReturn(records.subList(13,15)).once()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expect(recordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(ImmutableList.of(\"d\",\"e\"),ImmutableList.of(\"h\")),ImmutableSet.of(readSegmentColumn(\"dim1\",publishedDescriptors.get(1)),readSegmentColumn(\"dim1\",publishedDescriptors.get(2))))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\",SHARD_ID0,\"1\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(2,task2.getRunner().getRowIngestionMeters().getProcessed())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "replayAll()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(3,task2.getRunner().getRowIngestionMeters().getProcessed())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21->10 [style = bold, label=""];
30->24 [style = bold, label=""];
12->28 [style = solid, label="desc1"];
16->37 [style = dashed, label="0"];
1->43 [style = dashed, label="0"];
7->30 [style = bold, label=""];
28->22 [style = bold, label=""];
2->3 [style = bold, label=""];
3->14 [style = bold, label=""];
18->26 [style = bold, label=""];
34->33 [style = bold, label=""];
6->28 [style = solid, label="desc3"];
31->40 [style = dashed, label="0"];
0->29 [style = bold, label=""];
10->17 [style = bold, label=""];
16->23 [style = bold, label=""];
46->39 [style = bold, label=""];
12->41 [style = solid, label="desc1"];
5->28 [style = bold, label=""];
37->23 [style = bold, label=""];
11->40 [style = bold, label=""];
27->41 [style = solid, label="desc2"];
27->6 [style = bold, label=""];
22->7 [style = bold, label=""];
24->7 [style = dashed, label="0"];
1->11 [style = bold, label=""];
4->0 [style = bold, label=""];
2->14 [style = solid, label="task1"];
43->11 [style = bold, label=""];
19->44 [style = bold, label=""];
11->31 [style = bold, label=""];
6->5 [style = bold, label=""];
36->46 [style = bold, label=""];
45->14 [style = bold, label=""];
41->36 [style = bold, label=""];
27->28 [style = solid, label="desc2"];
20->16 [style = bold, label=""];
20->38 [style = dashed, label="0"];
8->2 [style = bold, label=""];
39->7 [style = bold, label=""];
38->37 [style = bold, label=""];
15->1 [style = bold, label=""];
24->25 [style = bold, label=""];
29->32 [style = bold, label=""];
3->45 [style = dashed, label="0"];
42->10 [style = bold, label=""];
6->41 [style = dashed, label="0"];
27->41 [style = bold, label=""];
26->15 [style = bold, label=""];
15->43 [style = bold, label=""];
23->34 [style = bold, label=""];
9->19 [style = bold, label=""];
2->45 [style = bold, label=""];
3->19 [style = solid, label="task2"];
14->9 [style = bold, label=""];
23->12 [style = bold, label=""];
35->10 [style = bold, label=""];
13->38 [style = bold, label=""];
19->4 [style = bold, label=""];
45->19 [style = solid, label="task2"];
32->13 [style = bold, label=""];
5->28 [style = solid, label="desc4"];
12->34 [style = dashed, label="0"];
31->8 [style = bold, label=""];
12->27 [style = bold, label=""];
4->44 [style = dashed, label="0"];
17->18 [style = bold, label=""];
40->8 [style = bold, label=""];
44->0 [style = bold, label=""];
13->20 [style = bold, label=""];
}
