digraph {
27 [style = filled, label = "Assert.fail(\"We should have failed since calling iterator several times is not allowed\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "User user = iterator.next()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testCursorMultipleIteratorCall['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Iterator<User> iterator = usersCursor.iterator()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertNull(\"iterator2 should be null\",iterator2)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assertions.assertTrue(iterator.hasNext())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testCursorMultipleHasNextCall['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(\"User1\",user.getName())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Cursor<User> usersCursor = mapper.getAllUsers()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assertions.assertEquals(0,usersCursor.getCurrentIndex())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "iterator2 = usersCursor.iterator()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Iterator<User> iterator2 = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertTrue(iterator.hasNext())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Mapper mapper = sqlSession.getMapper()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(0,usersCursor.getCurrentIndex())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Mapper mapper = sqlSession.getMapper()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.fail(\"Should have returned earlier\")@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertTrue(iterator.hasNext())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "testCursorMultipleHasNextCall['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(0,usersCursor.getCurrentIndex())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "iterator2.hasNext()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assertions.assertTrue(iterator.hasNext())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "User user = iterator.next()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assertions.assertEquals(\"User1\",user.getName())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assertions.assertTrue(iterator.hasNext())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assertions.assertEquals(0,usersCursor.getCurrentIndex())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "IllegalStateException e@@@15@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assertions.assertEquals(-1,usersCursor.getCurrentIndex())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "return@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->23 [style = dashed, label="0"];
5->10 [style = bold, label=""];
5->12 [style = dashed, label="0"];
7->18 [style = dashed, label="0"];
15->14 [style = bold, label=""];
16->8 [style = bold, label=""];
9->2 [style = bold, label=""];
2->6 [style = bold, label=""];
0->12 [style = bold, label=""];
5->23 [style = solid, label="iterator"];
10->17 [style = bold, label=""];
6->14 [style = dashed, label="0"];
24->28 [style = dotted, label="true"];
17->19 [style = bold, label=""];
6->22 [style = dashed, label="0"];
1->9 [style = bold, label=""];
4->0 [style = bold, label=""];
2->15 [style = dashed, label="0"];
20->21 [style = bold, label=""];
9->19 [style = dashed, label="0"];
2->23 [style = bold, label=""];
5->1 [style = bold, label=""];
24->26 [style = bold, label=""];
11->13 [style = dashed, label="0"];
12->10 [style = bold, label=""];
1->17 [style = dashed, label="0"];
23->22 [style = bold, label=""];
22->27 [style = bold, label=""];
24->26 [style = dotted, label="true"];
3->8 [style = bold, label=""];
6->11 [style = bold, label=""];
28->25 [style = bold, label=""];
26->28 [style = bold, label=""];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
19->15 [style = bold, label=""];
11->27 [style = dashed, label="0"];
10->1 [style = bold, label=""];
27->25 [style = bold, label=""];
11->7 [style = bold, label=""];
13->18 [style = bold, label=""];
0->5 [style = bold, label=""];
21->4 [style = bold, label=""];
}
