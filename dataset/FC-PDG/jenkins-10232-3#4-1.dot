digraph {
5 [style = filled, label = "assertThat(result,failedWith(2))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1--', expected correct notation M,N or M-N\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"-\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1--\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"--1\" is not a valid option\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"--1\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1-', expected string with a range M-N\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(result,failedWith(2))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"---\" is not a valid option\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"---\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(result,failedWith(3))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"-1\" is not a valid option\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "dummyRangeRangeSingleShouldFailIfBuildRangeContainsEmptyNumber['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"-1\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "dummyRangeRangeSingleShouldFailIfBuildRangeContainsEmptyNumber['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"-\" is not a valid option\"))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1-\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "dummyRangeRangeSingleShouldFailIfBuildRangeContainsHyphen['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
4->9 [style = bold, label=""];
16->15 [style = bold, label=""];
1->4 [style = bold, label=""];
2->5 [style = solid, label="result"];
2->19 [style = dashed, label="0"];
15->4 [style = solid, label="result"];
19->3 [style = solid, label="result"];
7->12 [style = bold, label=""];
19->5 [style = solid, label="result"];
1->15 [style = dashed, label="0"];
0->2 [style = bold, label=""];
18->19 [style = bold, label=""];
14->10 [style = bold, label=""];
7->20 [style = dashed, label="0"];
3->6 [style = bold, label=""];
9->20 [style = bold, label=""];
20->14 [style = bold, label=""];
3->16 [style = bold, label=""];
9->7 [style = bold, label=""];
1->4 [style = solid, label="result"];
12->10 [style = solid, label="result"];
14->11 [style = solid, label="result"];
15->9 [style = solid, label="result"];
14->10 [style = solid, label="result"];
6->1 [style = bold, label=""];
19->5 [style = bold, label=""];
12->10 [style = bold, label=""];
6->16 [style = dashed, label="0"];
12->14 [style = dashed, label="0"];
1->9 [style = solid, label="result"];
12->11 [style = solid, label="result"];
15->4 [style = bold, label=""];
8->17 [style = dashed, label="0"];
11->8 [style = bold, label=""];
11->17 [style = bold, label=""];
2->3 [style = solid, label="result"];
2->5 [style = bold, label=""];
13->2 [style = bold, label=""];
10->11 [style = bold, label=""];
}
