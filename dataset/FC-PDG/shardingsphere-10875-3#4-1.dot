digraph {
24 [style = filled, label = "verify(channelHandlerContext).flush()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "when(queryCommandExecutor.getQueryRowPacket()).thenReturn(packet)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "verify(channelHandlerContext).write(isA())@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "PostgreSQLComQueryExecutor queryCommandExecutor = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertWriteQueryDataWithHasNextResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "ResourceLock resourceLock = mock()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "commandExecuteEngine.writeQueryData(channelHandlerContext,backendConnection,queryCommandExecutor,0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "verify(resourceLock).doAwait()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "when(queryCommandExecutor.next()).thenReturn(true,false)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "PostgreSQLCommandExecuteEngine commandExecuteEngine = new PostgreSQLCommandExecuteEngine()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "commandExecuteEngine.writeQueryData(channelHandlerContext,backendConnection,queryCommandExecutor,0)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "when(backendConnection.getResourceLock()).thenReturn(resourceLock)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(queryCommandExecutor.getResponseType()).thenReturn(ResponseType.QUERY)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "verify(channelHandlerContext).write(packet)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "when(channel.isWritable()).thenReturn(false,true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "verify(channelHandlerContext).write(isA())@@@7@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "PostgreSQLPacket packet = mock()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "verify(channelHandlerContext).write(isA())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertWriteQueryDataWithInactiveChannel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "when(channel.isActive()).thenReturn(true)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "boolean actual = commandExecuteEngine.writeQueryData(channelHandlerContext,backendConnection,queryCommandExecutor,0)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "when(channel.isActive()).thenReturn(false)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "PostgreSQLCommandExecuteEngine commandExecuteEngine = new PostgreSQLCommandExecuteEngine()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "verify(channelHandlerContext).write(isA())@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(actual)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertWriteQueryDataWithInactiveChannel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10->18 [style = bold, label=""];
15->10 [style = bold, label=""];
20->13 [style = bold, label=""];
3->1 [style = bold, label=""];
5->9 [style = bold, label=""];
10->13 [style = solid, label="packet"];
21->24 [style = bold, label=""];
23->17 [style = solid, label="queryCommandExecutor"];
1->0 [style = bold, label=""];
4->2 [style = bold, label=""];
25->14 [style = bold, label=""];
16->17 [style = bold, label=""];
5->25 [style = dashed, label="0"];
9->7 [style = bold, label=""];
24->22 [style = bold, label=""];
23->0 [style = bold, label=""];
19->15 [style = solid, label="resourceLock"];
9->7 [style = solid, label="actual"];
8->1 [style = bold, label=""];
4->9 [style = dashed, label="0"];
0->25 [style = bold, label=""];
14->12 [style = bold, label=""];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
19->15 [style = bold, label=""];
12->19 [style = bold, label=""];
10->18 [style = solid, label="packet"];
13->21 [style = bold, label=""];
11->23 [style = bold, label=""];
0->5 [style = bold, label=""];
17->20 [style = bold, label=""];
18->16 [style = bold, label=""];
}
