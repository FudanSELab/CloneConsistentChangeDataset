digraph {
5 [style = filled, label = "Span clientSpan = newClientSpan(testSuffix)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "accept(clientSpan)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertThat(names().getRemoteServiceNames(clientSpan.localServiceName() + 1).execute()).isEmpty()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertThat(names().getRemoteServiceNames(clientSpan.localServiceName()).execute()).isEmpty()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "TestInfo testInfo@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(names().getRemoteServiceNames(\"frontend\").execute()).isEmpty()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "getRemoteServiceNames['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String testSuffix = testSuffix(testInfo)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(names().getRemoteServiceNames(clientSpan.localServiceName()).execute()).contains(clientSpan.remoteServiceName())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(names().getSpanNames(\"frontend\").execute()).isEmpty()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "getRemoteServiceNames['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertThat(names().getRemoteServiceNames(\"frontend\").execute()).contains(CLIENT_SPAN.remoteServiceName())@@@6@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(names().getSpanNames(\"frontend\").execute()).contains(CLIENT_SPAN.name())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(names().getRemoteServiceNames(\"frontend\" + 1).execute()).isEmpty()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "getSpanNames['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "accept(CLIENT_SPAN)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(names().getSpanNames(\"frontend\" + 1).execute()).isEmpty()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->15 [style = bold, label=""];
4->3 [style = bold, label=""];
0->16 [style = bold, label=""];
9->12 [style = dotted, label="true"];
12->10 [style = solid, label="testInfo"];
5->7 [style = solid, label="clientSpan"];
10->5 [style = solid, label="testSuffix"];
9->10 [style = bold, label=""];
3->13 [style = dashed, label="0"];
3->0 [style = bold, label=""];
2->15 [style = dashed, label="0"];
10->5 [style = bold, label=""];
1->11 [style = dashed, label="0"];
0->1 [style = bold, label=""];
1->16 [style = dashed, label="0"];
6->8 [style = bold, label=""];
7->6 [style = bold, label=""];
1->2 [style = bold, label=""];
5->11 [style = bold, label=""];
14->13 [style = bold, label=""];
11->7 [style = bold, label=""];
13->0 [style = bold, label=""];
}
