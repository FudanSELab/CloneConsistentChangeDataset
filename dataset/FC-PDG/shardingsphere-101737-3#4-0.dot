digraph {
2 [style = filled, label = "SimpleTableSegment tableSegment1 = createTableSegment(\"table_1\",\"tbl_1\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(schemaMetaData.containsColumn(anyString(),anyString())).thenReturn(true)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertFindTableNameWhenColumnSegmentOwnerAbsentAndSchemaMetaDataContainsColumn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(actual.get(),is(\"table_1\"))@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "SchemaMetaData schemaMetaData = mock()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(actual.isPresent())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertFindTableNameWhenColumnSegmentOwnerPresent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Optional<String> actual = new TablesContext(Arrays.asList(tableSegment1,tableSegment2)).findTableName(createColumnSegment(),schemaMetaData)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ColumnSegment columnSegment = createColumnSegment()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Optional<String> actual = new TablesContext(Arrays.asList(tableSegment1,tableSegment2)).findTableName(columnSegment,mock())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "columnSegment.setOwner(new OwnerSegment(0,10,new IdentifierValue(\"table_1\")))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Optional<String> actual = new TablesContext(Arrays.asList(tableSegment1,tableSegment2)).findTableName(columnSegment,mock())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertFindTableNameWhenColumnSegmentOwnerPresent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "SimpleTableSegment tableSegment2 = createTableSegment(\"table_2\",\"tbl_2\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->1 [style = bold, label=""];
6->3 [style = bold, label=""];
0->8 [style = dashed, label="0"];
0->13 [style = dashed, label="0"];
1->4 [style = bold, label=""];
12->10 [style = bold, label=""];
5->6 [style = bold, label=""];
10->13 [style = bold, label=""];
5->12 [style = bold, label=""];
12->13 [style = solid, label="schemaMetaData"];
9->2 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
3->8 [style = bold, label=""];
11->2 [style = bold, label=""];
13->1 [style = bold, label=""];
3->0 [style = bold, label=""];
6->0 [style = solid, label="columnSegment"];
6->8 [style = solid, label="columnSegment"];
2->5 [style = bold, label=""];
}
