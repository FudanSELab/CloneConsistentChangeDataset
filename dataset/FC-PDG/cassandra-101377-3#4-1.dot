digraph {
29 [style = filled, label = "resolver.preprocess(readResponseMessage(peer1,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build())),cmd))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestableReadRepair readRepair = new TestableReadRepair(cmd)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DeletionTime expectedCmplxDelete = new DeletionTime(ts(1( - 1,nowInSec)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertNull(readRepair.sent.get(peer2))@@@31@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Row.Builder builder = BTreeRow.unsortedBuilder(nowInSec)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ReadCommand cmd = Util.cmd(cfs2,dk).withNowInSeconds(nowInSec).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "resolver.preprocess(readResponseMessage(peer2,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build())),cmd))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "DataResolver resolver = new DataResolver(ks,cmd,ConsistencyLevel.ALL,2,System.nanoTime(),readRepair)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "builder.addCell(mapCell(0,0,ts(0())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "InetAddressAndPort peer2 = peer()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Cell expectedCell = mapCell(1,1,ts(1()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "InetAddressAndPort peer1 = peer()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Iterator<Row> rowIter = mutation.getPartitionUpdate(cfm2).iterator()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertColumns(row,\"m\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "builder.addComplexDeletion(m,expectedCmplxDelete)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertNotNull(row.getCell(m,CellPath.create(bb(1))))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(expectedCmplxDelete,cd.complexDeletion())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testResolveDeletedCollection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertFalse(rowIter.hasNext())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(expectedCmplxDelete,cd.complexDeletion())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testResolveComplexDelete['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "builder.addComplexDeletion(m,new DeletionTime(ts(0( - 1,nowInSec))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(Collections.singleton(expectedCell),Sets.newHashSet(cd))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNull(readRepair.sent.get(peer2))@@@38@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "builder.newRow(Clustering.EMPTY)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertNull(row.getCell(m,CellPath.create(bb(0))))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Row row = Iterators.getOnlyElement(rows)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "long(( ts = {100,200}@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertFalse(data.hasNext())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(Collections.emptySet(),Sets.newHashSet(cd))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "builder.addCell(expectedCell)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertTrue(rowIter.hasNext())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testResolveComplexDelete['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "TestableReadRepair readRepair = new TestableReadRepair(cmd,ConsistencyLevel.QUORUM)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "Row row = rowIter.next()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "builder.newRow(Clustering.EMPTY)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Mutation mutation = readRepair.getForEndpoint(peer1)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22->6 [style = solid, label="cmd"];
12->23 [style = solid, label="expectedCmplxDelete"];
32->22 [style = bold, label=""];
7->11 [style = bold, label=""];
22->3 [style = solid, label="cmd"];
21->6 [style = solid, label="peer2"];
29->5 [style = bold, label=""];
23->30 [style = bold, label=""];
18->23 [style = bold, label=""];
25->7 [style = solid, label="ts"];
0->29 [style = solid, label="peer1"];
3->24 [style = bold, label=""];
21->6 [style = bold, label=""];
37->36 [style = bold, label=""];
3->31 [style = dashed, label="0"];
22->24 [style = solid, label="cmd"];
20->18 [style = solid, label="cd"];
31->24 [style = bold, label=""];
16->26 [style = bold, label=""];
38->9 [style = bold, label=""];
22->31 [style = bold, label=""];
21->1 [style = solid, label="peer2"];
25->11 [style = solid, label="ts"];
0->29 [style = bold, label=""];
9->20 [style = bold, label=""];
14->19 [style = bold, label=""];
10->21 [style = bold, label=""];
22->31 [style = solid, label="cmd"];
14->19 [style = solid, label="cd"];
19->18 [style = dashed, label="0"];
21->30 [style = solid, label="peer2"];
4->7 [style = bold, label=""];
27->15 [style = bold, label=""];
13->1 [style = bold, label=""];
34->22 [style = bold, label=""];
26->21 [style = bold, label=""];
12->10 [style = solid, label="expectedCmplxDelete"];
25->16 [style = solid, label="ts"];
22->3 [style = bold, label=""];
16->26 [style = solid, label="expectedCell"];
20->18 [style = bold, label=""];
12->13 [style = solid, label="expectedCmplxDelete"];
11->0 [style = bold, label=""];
12->10 [style = bold, label=""];
25->12 [style = solid, label="ts"];
10->16 [style = bold, label=""];
19->13 [style = bold, label=""];
5->12 [style = bold, label=""];
15->9 [style = bold, label=""];
3->24 [style = solid, label="readRepair"];
16->19 [style = solid, label="expectedCell"];
24->25 [style = bold, label=""];
6->33 [style = bold, label=""];
0->9 [style = solid, label="peer1"];
22->29 [style = solid, label="cmd"];
28->17 [style = bold, label=""];
30->14 [style = bold, label=""];
0->37 [style = solid, label="peer1"];
25->8 [style = bold, label=""];
28->17 [style = solid, label="row"];
35->38 [style = bold, label=""];
8->4 [style = bold, label=""];
17->27 [style = bold, label=""];
36->35 [style = bold, label=""];
2->22 [style = bold, label=""];
33->37 [style = bold, label=""];
31->24 [style = solid, label="readRepair"];
6->28 [style = bold, label=""];
}
