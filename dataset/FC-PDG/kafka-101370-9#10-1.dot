digraph {
1 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(2)),TimeWindows.of(ofMillis(3)).grace(ofMillis(1)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "verifyInEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(9)),SessionWindows.with(ofMillis(1)).grace(ofMillis(7)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(4)).advanceBy(ofMillis(2)).grace(ofMillis(2)),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "verifyInEquality(TimeWindows.ofSizeWithNoGrace(ofMillis(9)),TimeWindows.ofSizeWithNoGrace(ofMillis(3)))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "verifyInEquality(TimeWindows.ofSizeAndGrace(ofMillis(9),ofMillis(9)),TimeWindows.ofSizeAndGrace(ofMillis(3),ofMillis(9)))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "verifyInEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(0)).grace(ofMillis(7)),SessionWindows.with(ofMillis(1)).grace(ofMillis(6)))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(9)),TimeWindows.of(ofMillis(3)).grace(ofMillis(4)))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verifyInEquality(SessionWindows.with(ofMillis(9)),SessionWindows.with(ofMillis(1)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "verifyInEquality(SessionWindows.with(ofMillis(2)).grace(ofMillis(6)).grace(ofMillis(7)),SessionWindows.with(ofMillis(1)).grace(ofMillis(6)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(2)),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(9)),TimeWindows.of(ofMillis(3)))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "verifyInEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(9)),SessionWindows.with(ofMillis(1)).grace(ofMillis(6)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertNotEquals(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(1)),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8->9 [style = bold, label=""];
6->3 [style = bold, label=""];
1->4 [style = bold, label=""];
3->5 [style = bold, label=""];
7->1 [style = bold, label=""];
4->2 [style = bold, label=""];
10->8 [style = bold, label=""];
9->7 [style = bold, label=""];
15->16 [style = bold, label=""];
16->12 [style = bold, label=""];
2->6 [style = bold, label=""];
13->14 [style = bold, label=""];
7->16 [style = dashed, label="0"];
11->13 [style = bold, label=""];
0->7 [style = bold, label=""];
12->11 [style = bold, label=""];
}
