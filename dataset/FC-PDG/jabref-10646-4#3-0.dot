digraph {
15 [style = filled, label = "testCrossRef['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "expectedCrossingResult.insertEntry(database,EINSTEIN)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expectedCrossingResult.addEntry(bibEntry)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEquals(expectedCrossingResult,crossingResult)@@@9@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expectedCrossingResult.insertEntry(database,EINSTEIN_B)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(expectedCrossingResult,crossingResult)@@@14@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectedCrossingResult.insertEntry(database,EINSTEIN_C)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "expectedCrossingResult.insertEntry(database,DARWIN)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testSingleFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expectedCrossingResult.increaseCrossRefsCount()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "TexBibEntriesResolverResult crossingResult = new TexBibEntriesResolver(database).resolveKeys(parserResult)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testCrossRef['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Path texFile = Paths.get(.getResource(\"crossref.tex\").toURI())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TexBibEntriesResolverResult expectedCrossingResult = new TexBibEntriesResolverResult(parserResult)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(expectedCrossingResult,crossingResult)@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "expectedCrossingResult.addUnresolvedKey(EINSTEIN_21)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "expectedCrossingResult.insertEntry(database,EINSTEIN_A)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "expectedCrossingResult.addUnresolvedKey(UNRESOLVED)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Path texFile = Paths.get(.getResource(\"paper.tex\").toURI())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TexBibEntriesResolverResult crossingResult = new TexBibEntriesResolver(database,importFormatPreferences,fileMonitor).resolve(parserResult)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "TexParserResult parserResult = new DefaultTexParser().parse(texFile)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->18 [style = dashed, label="0"];
2->11 [style = solid, label="parserResult"];
5->14 [style = dashed, label="0"];
7->12 [style = bold, label=""];
11->4 [style = bold, label=""];
1->19 [style = dashed, label="0"];
1->2 [style = solid, label="texFile"];
8->6 [style = bold, label=""];
19->2 [style = bold, label=""];
2->5 [style = solid, label="parserResult"];
2->14 [style = solid, label="parserResult"];
13->16 [style = bold, label=""];
17->19 [style = bold, label=""];
11->18 [style = bold, label=""];
4->0 [style = bold, label=""];
14->16 [style = solid, label="crossingResult"];
20->10 [style = bold, label=""];
19->2 [style = solid, label="texFile"];
18->20 [style = bold, label=""];
0->10 [style = bold, label=""];
5->3 [style = solid, label="crossingResult"];
11->16 [style = solid, label="expectedCrossingResult"];
10->8 [style = bold, label=""];
11->3 [style = solid, label="expectedCrossingResult"];
2->14 [style = bold, label=""];
11->13 [style = bold, label=""];
5->10 [style = solid, label="crossingResult"];
1->2 [style = bold, label=""];
5->11 [style = bold, label=""];
12->3 [style = bold, label=""];
6->7 [style = bold, label=""];
9->1 [style = bold, label=""];
4->13 [style = dashed, label="0"];
14->11 [style = bold, label=""];
11->10 [style = solid, label="expectedCrossingResult"];
2->5 [style = bold, label=""];
15->1 [style = bold, label=""];
}
