digraph {
19 [style = filled, label = "assertThat(\"3 records expect to flush out as a mini-batch\",dataBuffer.values().stream().findFirst().map(null).orElse(-1),is(3))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Map<String,List<HoodieRecord>> dataBuffer = funcWrapper.getDataBuffer()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "testInsertAllowsDuplication['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "final OperatorEvent event1 = funcWrapper.getNextEvent()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event4)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "funcWrapper.invoke(rowData)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expected.put(\"par1\",\"(\" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,4,par1, \" + \"id1,par1,id1,Danny,23,4,par1(\")@@@36@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event2)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "InsertFunctionWrapper<RowData> funcWrapper = new InsertFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "final OperatorEvent event4 = funcWrapper.getNextEvent()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testInsertAllowsDuplication['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "funcWrapper.openFunction()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "TestData.checkWrittenAllData(tempFile,expected,1)@@@37@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final OperatorEvent event2 = funcWrapper.getNextEvent()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event1)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Map<String,String> expected = new HashMap<>()@@@22@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "funcWrapper.openFunction()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "testInsertWithMiniBatches['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final OperatorEvent event2 = funcWrapper.getNextEvent()@@@25@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "checkInflightInstant(funcWrapper.getWriteClient())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "expected.put(\"par1\",\"(\" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,4,par1, \" + \"id1,par1,id1,Danny,23,4,par1(\")@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "assertThat(\"All data should be flushed out\",dataBuffer.size(),is(0))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "funcWrapper.invoke(rowData)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "funcWrapper.checkpointFunction(2)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE,0.0006)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "checkWrittenData(tempFile,expected,1)@@@36@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "funcWrapper.invoke(rowData)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE,0.0008)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event1)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "final OperatorEvent event1 = funcWrapper.getNextEvent()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "checkWrittenData(tempFile,expected,1)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final OperatorEvent event3 = funcWrapper.getNextEvent()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event4)@@@34@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
54 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TestData.checkWrittenAllData(tempFile,expected,1)@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(\"The operator expect to send an event\",event1,instanceOf())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "dataBuffer = funcWrapper.getDataBuffer()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertThat(\"Should have 1 data bucket\",dataBuffer.size(),is(1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(\"The operator expect to send an event\",event2,instanceOf())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "conf.setBoolean(FlinkOptions.INSERT_DEDUP,false)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@35@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event2)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event3)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "conf.setString(FlinkOptions.OPERATION,WriteOperationType.INSERT.value())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "funcWrapper.invoke(rowData)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "String instant = funcWrapper.getWriteClient().getLastPendingInstant(getTableType())@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Map<String,String> expected = new HashMap<>()@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Map<String,String> expected = getMiniBatchExpected()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@35@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40->2 [style = bold, label=""];
26->54 [style = solid, label="instant"];
2->26 [style = bold, label=""];
39->33 [style = solid, label="event1"];
46->15 [style = bold, label=""];
18->30 [style = bold, label=""];
7->8 [style = bold, label=""];
4->12 [style = dashed, label="0"];
37->5 [style = bold, label=""];
29->6 [style = bold, label=""];
3->36 [style = bold, label=""];
1->49 [style = dashed, label="0"];
39->20 [style = solid, label="event1"];
8->47 [style = bold, label=""];
25->13 [style = dashed, label="0"];
19->15 [style = bold, label=""];
13->14 [style = bold, label=""];
3->2 [style = solid, label="event1"];
25->21 [style = bold, label=""];
15->23 [style = solid, label="event2"];
14->37 [style = bold, label=""];
11->28 [style = bold, label=""];
28->18 [style = bold, label=""];
27->12 [style = bold, label=""];
46->22 [style = solid, label="event1"];
4->31 [style = solid, label="expected"];
24->55 [style = bold, label=""];
56->46 [style = bold, label=""];
33->41 [style = bold, label=""];
22->23 [style = bold, label=""];
15->3 [style = solid, label="event2"];
50->49 [style = bold, label=""];
34->0 [style = bold, label=""];
12->13 [style = solid, label="instant"];
5->25 [style = bold, label=""];
26->27 [style = bold, label=""];
21->11 [style = bold, label=""];
1->16 [style = bold, label=""];
40->27 [style = solid, label="expected"];
12->24 [style = solid, label="expected"];
0->48 [style = bold, label=""];
2->27 [style = bold, label=""];
0->20 [style = bold, label=""];
52->51 [style = bold, label=""];
9->1 [style = bold, label=""];
20->19 [style = bold, label=""];
39->20 [style = bold, label=""];
24->7 [style = bold, label=""];
0->39 [style = bold, label=""];
17->8 [style = bold, label=""];
49->45 [style = bold, label=""];
36->40 [style = bold, label=""];
7->17 [style = bold, label=""];
40->5 [style = solid, label="expected"];
13->42 [style = bold, label=""];
35->32 [style = bold, label=""];
12->24 [style = bold, label=""];
15->3 [style = bold, label=""];
45->44 [style = bold, label=""];
4->7 [style = bold, label=""];
21->42 [style = dashed, label="0"];
12->11 [style = solid, label="expected"];
42->14 [style = bold, label=""];
54->8 [style = bold, label=""];
4->17 [style = solid, label="expected"];
43->38 [style = bold, label=""];
25->11 [style = solid, label="event3"];
30->31 [style = bold, label=""];
38->34 [style = bold, label=""];
14->5 [style = solid, label="event3"];
23->2 [style = bold, label=""];
14->53 [style = bold, label=""];
8->13 [style = bold, label=""];
14->5 [style = bold, label=""];
22->23 [style = solid, label="event2"];
44->6 [style = bold, label=""];
16->10 [style = bold, label=""];
53->5 [style = bold, label=""];
41->3 [style = bold, label=""];
51->56 [style = bold, label=""];
6->0 [style = bold, label=""];
32->43 [style = bold, label=""];
3->22 [style = bold, label=""];
20->33 [style = bold, label=""];
21->28 [style = solid, label="event4"];
53->25 [style = solid, label="event4"];
24->4 [style = bold, label=""];
3->24 [style = solid, label="instant"];
10->29 [style = bold, label=""];
48->19 [style = bold, label=""];
55->54 [style = bold, label=""];
47->14 [style = bold, label=""];
22->26 [style = solid, label="event2"];
19->52 [style = bold, label=""];
13->42 [style = solid, label="event2"];
}
