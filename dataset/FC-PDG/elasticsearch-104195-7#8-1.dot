digraph {
2 [style = filled, label = "Settings settings = Settings.builder().put(NetworkModule.HTTP_TYPE_SETTING.getKey(),\"custom\").put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(),\"default_custom\").put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(),\"local\").put(NetworkModule.TRANSPORT_TYPE_KEY,\"default_custom\").build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testOverrideDefault['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Settings settings = Settings.builder().put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(),\"default_custom\").put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(),\"default_custom\").build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Supplier<Transport> customTransport = null@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "NetworkModule module = newNetworkModule(settings,new NetworkPlugin(){@Override public Map<String,Supplier<Transport>> getTransports(Settings settings,ThreadPool threadPool,PageCacheRecycler pageCacheRecycler,CircuitBreakerService circuitBreakerService,NamedWriteableRegistry namedWriteableRegistry,NetworkService networkService){return Collections.singletonMap(\"default_custom\",customTransport)}@Override public Map<String,Supplier<HttpServerTransport>> getHttpTransports(Settings settings,ThreadPool threadPool,BigArrays bigArrays,PageCacheRecycler pageCacheRecycler,CircuitBreakerService circuitBreakerService,NamedXContentRegistry xContentRegistry,NetworkService networkService,HttpServerTransport.Dispatcher requestDispatcher){Map<String,Supplier<HttpServerTransport>> supplierMap = new HashMap<>()supplierMap.put(\"custom\",custom)supplierMap.put(\"default_custom\",def)return supplierMap}})@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testOverrideDefault['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Supplier<Transport> customTransport = null@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertSame(def,module.getHttpServerTransportSupplier())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertSame(custom,module.getHttpServerTransportSupplier())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Supplier<HttpServerTransport> custom = null@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Supplier<HttpServerTransport> def = null@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertSame(customTransport,module.getTransportSupplier())@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "NetworkModule module = newNetworkModule(settings,false,new NetworkPlugin(){@Override public Map<String,Supplier<Transport>> getTransports(Settings settings,ThreadPool threadPool,PageCacheRecycler pageCacheRecycler,CircuitBreakerService circuitBreakerService,NamedWriteableRegistry namedWriteableRegistry,NetworkService networkService){return Collections.singletonMap(\"default_custom\",customTransport)}@Override public Map<String,Supplier<HttpServerTransport>> getHttpTransports(Settings settings,ThreadPool threadPool,BigArrays bigArrays,PageCacheRecycler pageCacheRecycler,CircuitBreakerService circuitBreakerService,NamedXContentRegistry xContentRegistry,NetworkService networkService,HttpServerTransport.Dispatcher requestDispatcher){Map<String,Supplier<HttpServerTransport>> supplierMap = new HashMap<>()supplierMap.put(\"custom\",custom)supplierMap.put(\"default_custom\",def)return supplierMap}})@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "NetworkModule module = newNetworkModule(settings,false,new NetworkPlugin(){@Override public Map<String,Supplier<Transport>> getTransports(Settings settings,ThreadPool threadPool,PageCacheRecycler pageCacheRecycler,CircuitBreakerService circuitBreakerService,NamedWriteableRegistry namedWriteableRegistry,NetworkService networkService){return Collections.singletonMap(\"default_custom\",customTransport)}@Override public Map<String,Supplier<HttpServerTransport>> getHttpTransports(Settings settings,ThreadPool threadPool,BigArrays bigArrays,PageCacheRecycler pageCacheRecycler,CircuitBreakerService circuitBreakerService,NamedXContentRegistry xContentRegistry,NetworkService networkService,HttpServerTransport.Dispatcher requestDispatcher){Map<String,Supplier<HttpServerTransport>> supplierMap = new HashMap<>()supplierMap.put(\"custom\",custom)supplierMap.put(\"default_custom\",def)return supplierMap}})@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertSame(customTransport,module.getTransportSupplier())@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testDefaultKeys['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
1->9 [style = solid, label="def"];
15->13 [style = bold, label=""];
11->14 [style = bold, label=""];
7->14 [style = dashed, label="0"];
0->3 [style = solid, label="customTransport"];
1->11 [style = solid, label="customTransport"];
14->10 [style = bold, label=""];
13->11 [style = solid, label="settings"];
4->14 [style = solid, label="def"];
5->9 [style = dashed, label="0"];
0->9 [style = solid, label="customTransport"];
9->7 [style = bold, label=""];
7->3 [style = bold, label=""];
1->9 [style = bold, label=""];
1->11 [style = bold, label=""];
6->2 [style = bold, label=""];
2->0 [style = bold, label=""];
13->12 [style = bold, label=""];
1->10 [style = solid, label="customTransport"];
2->9 [style = solid, label="settings"];
8->2 [style = bold, label=""];
12->4 [style = bold, label=""];
0->4 [style = bold, label=""];
12->11 [style = solid, label="custom"];
2->13 [style = dashed, label="0"];
4->5 [style = solid, label="custom"];
1->5 [style = solid, label="def"];
4->11 [style = solid, label="def"];
0->5 [style = solid, label="customTransport"];
5->7 [style = bold, label=""];
4->1 [style = bold, label=""];
4->7 [style = solid, label="custom"];
4->9 [style = solid, label="custom"];
2->5 [style = solid, label="settings"];
}
