digraph {
2 [style = filled, label = "assertThat(updatedSlave.getNumExecutors(),equalTo(42))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "createNode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final Slave updated = (Slave)j.jenkins.getNode(\"AgentFromXML\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(updated.getNumExecutors(),equalTo(42))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(updatedSlave.getNodeName(),equalTo(\"CustomSlaveName\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(updatedSlave.getNumExecutors(),equalTo(42))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "createNode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(updatedSlave.getNodeName(),equalTo(\"SlaveFromXML\"))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invoke()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(updated.getNodeName(),equalTo(\"AgentFromXML\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"CustomSlaveName\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(result,succeededSilently())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(\"A slave with original name should not exist\",j.jenkins.getNode(\"SlaveFromXml\"),nullValue())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final Slave updatedSlave = (Slave)j.jenkins.getNode(\"SlaveFromXML\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "final Slave updatedSlave = (Slave)j.jenkins.getNode(\"CustomSlaveName\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "createNodeSpecifyingNameExplicitly['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
1->4 [style = bold, label=""];
3->1 [style = bold, label=""];
15->14 [style = bold, label=""];
12->11 [style = bold, label=""];
14->10 [style = bold, label=""];
4->2 [style = bold, label=""];
4->6 [style = dashed, label="0"];
1->13 [style = dashed, label="0"];
5->3 [style = solid, label="result"];
11->3 [style = solid, label="result"];
8->5 [style = bold, label=""];
5->11 [style = dashed, label="0"];
3->7 [style = bold, label=""];
11->3 [style = bold, label=""];
2->9 [style = dashed, label="0"];
7->6 [style = bold, label=""];
3->13 [style = bold, label=""];
13->15 [style = bold, label=""];
6->9 [style = bold, label=""];
1->7 [style = dashed, label="0"];
0->5 [style = bold, label=""];
}
