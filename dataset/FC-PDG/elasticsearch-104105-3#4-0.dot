digraph {
1 [style = filled, label = "int i = 0@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "AtomicInteger failed = new AtomicInteger(0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "i++@@@52@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "testPut['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "thread(i( = new Thread(){@Override public void run(){try {latch.countDown()latch.await()for (int i = 0 i < count i++){semaphore.acquire()processor.put(new Object(),null)}}catch (Exception ex) }}@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i < thread.length@@@26@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final int count = randomIntBetween(1000,20000)@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(count * thread.length,received.get())@@@54@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(actualFailed.get(),failed.get())@@@62@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "AtomicInteger received = new AtomicInteger(0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "i++@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(semaphore.tryAcquire(Integer.MAX_VALUE,10,TimeUnit.SECONDS))@@@55@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "AtomicInteger actualFailed = new AtomicInteger(0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testRandomFail['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "thread(i( = new Thread(){@Override public void run(){try {latch.countDown()latch.await()for (int i = 0 i < count i++){semaphore.acquire()processor.put(new Object(),null)}}catch (Exception ex) }}@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "boolean blockInternal = randomBoolean()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "AsyncIOProcessor<Object> processor = new AsyncIOProcessor<Object>(logger,scaledRandomIntBetween(1,2024)){@Override protected void write(List<Tuple<Object,Consumer<Exception>>> candidates){received.addAndGet(candidates.size())if (randomBoolean()) {failed.addAndGet(candidates.size())if (randomBoolean()) {throw new IOException()}{throw new RuntimeException()}}}}@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "int i = 0@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i < thread.length@@@56@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i++@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "thread(i(.start()@@@46@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AsyncIOProcessor<Object> processor = new AsyncIOProcessor<Object>(logger,scaledRandomIntBetween(1,2024)){@Override protected void write(List<Tuple<Object,Consumer<Exception>>> candidates){if (blockInternal) {synchronized (this) {for (int i = 0 i < candidates.size() i++){received.incrementAndGet()}}}{received.addAndGet(candidates.size())}}}@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Semaphore semaphore = new Semaphore(Integer.MAX_VALUE)@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Thread(( thread = new Thread((((@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(count * thread.length,received.get())@@@56@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertEquals(count * thread.length,received.get())@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "i++@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "CountDownLatch latch = new CountDownLatch(thread.length)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(semaphore.tryAcquire(Integer.MAX_VALUE,10,TimeUnit.SECONDS))@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "thread(i(.start()@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i < thread.length@@@49@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "thread(i(.join()@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testPut['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
13->26 [style = bold, label=""];
8->14 [style = bold, label=""];
16->24 [style = bold, label=""];
11->4 [style = bold, label=""];
6->12 [style = solid, label="blockInternal"];
8->9 [style = bold, label=""];
1->8 [style = solid, label="i"];
15->9 [style = bold, label=""];
17->27 [style = bold, label=""];
20->6 [style = bold, label=""];
9->19 [style = solid, label="i"];
8->16 [style = dotted, label="true"];
15->14 [style = solid, label="i"];
9->13 [style = solid, label="i"];
27->13 [style = bold, label=""];
2->13 [style = bold, label=""];
13->17 [style = bold, label=""];
17->19 [style = bold, label=""];
2->9 [style = dotted, label="true"];
12->4 [style = bold, label=""];
15->23 [style = bold, label=""];
1->8 [style = bold, label=""];
24->15 [style = bold, label=""];
9->2 [style = bold, label=""];
9->13 [style = bold, label=""];
23->16 [style = bold, label=""];
13->22 [style = bold, label=""];
29->28 [style = bold, label=""];
11->15 [style = solid, label="count"];
9->27 [style = solid, label="i"];
23->24 [style = solid, label="i"];
10->11 [style = bold, label=""];
14->15 [style = solid, label="i"];
15->23 [style = dotted, label="true"];
17->3 [style = bold, label=""];
30->10 [style = bold, label=""];
0->21 [style = solid, label="count"];
15->7 [style = bold, label=""];
8->7 [style = dotted, label="true"];
13->17 [style = dotted, label="true"];
0->1 [style = bold, label=""];
0->23 [style = solid, label="count"];
2->17 [style = bold, label=""];
19->13 [style = bold, label=""];
24->15 [style = solid, label="i"];
7->14 [style = bold, label=""];
16->2 [style = bold, label=""];
19->13 [style = solid, label="i"];
12->10 [style = bold, label=""];
1->15 [style = solid, label="i"];
27->13 [style = solid, label="i"];
8->15 [style = dotted, label="true"];
5->25 [style = bold, label=""];
32->31 [style = bold, label=""];
14->8 [style = solid, label="i"];
2->13 [style = dotted, label="true"];
16->14 [style = bold, label=""];
31->5 [style = bold, label=""];
8->15 [style = bold, label=""];
14->8 [style = bold, label=""];
6->5 [style = bold, label=""];
15->16 [style = bold, label=""];
9->2 [style = solid, label="i"];
13->19 [style = dotted, label="true"];
13->27 [style = dotted, label="true"];
11->3 [style = solid, label="count"];
8->14 [style = dotted, label="true"];
15->16 [style = dotted, label="true"];
5->12 [style = bold, label=""];
16->9 [style = solid, label="i"];
22->21 [style = bold, label=""];
13->9 [style = bold, label=""];
24->23 [style = solid, label="i"];
16->2 [style = solid, label="i"];
14->15 [style = bold, label=""];
25->30 [style = bold, label=""];
26->29 [style = bold, label=""];
14->23 [style = solid, label="i"];
15->24 [style = dotted, label="true"];
18->6 [style = bold, label=""];
4->0 [style = bold, label=""];
11->29 [style = solid, label="count"];
}
