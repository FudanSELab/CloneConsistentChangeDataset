digraph {
15 [style = filled, label = "String pattern@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testOptional['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int minRepeat@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(p.toString(),is(\"a b? c\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(p.toString(),is(pattern))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testOptional['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "final Pattern p = Pattern.builder().symbol(\"a\").symbol(\"b\").optional().seq().symbol(\"c\").seq().build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final String rows = \"acabcabbcabbbcabbbbcabdbc\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "String expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final String rows = \"acabcabbc\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final Matcher<Character> matcher = Matcher.builder(p.toAutomaton()).add(\"a\",null).add(\"b\",null).add(\"c\",null).build()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "checkRepeat['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int maxRepeat@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final Pattern p = Pattern.builder().symbol(\"a\").symbol(\"b\").repeat(minRepeat,maxRepeat).seq().symbol(\"c\").seq().build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(matcher.match(chars(rows)),isMatchList(expected))@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final String expected = \"((a, c(, (a, b, c((\"@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
5->14 [style = dashed, label="0"];
15->14 [style = solid, label="pattern"];
12->14 [style = bold, label=""];
9->1 [style = solid, label="expected"];
14->13 [style = bold, label=""];
6->1 [style = solid, label="expected"];
3->1 [style = bold, label=""];
3->6 [style = bold, label=""];
2->3 [style = bold, label=""];
10->12 [style = bold, label=""];
2->1 [style = solid, label="rows"];
10->8 [style = dotted, label="true"];
7->0 [style = bold, label=""];
13->1 [style = solid, label="rows"];
13->3 [style = bold, label=""];
0->5 [style = bold, label=""];
10->15 [style = dotted, label="true"];
10->11 [style = dotted, label="true"];
6->1 [style = bold, label=""];
10->9 [style = dotted, label="true"];
4->0 [style = bold, label=""];
2->13 [style = dashed, label="0"];
0->12 [style = dashed, label="0"];
}
