digraph {
12 [style = filled, label = "recordsPerFetch = 100@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "recordSupplier.seekToEarliest(Collections.singleton(shard0))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(SHARDS_LAG_MILLIS,recordSupplier.getPartitionTimeLag())@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "replayAll()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID1),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testPollDeaggregate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "recordSupplier.start()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID0),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(STREAM,SHARD_ID1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expect(getRecordsResult0.getRecords()).andReturn(SHARD0_RECORDS).once()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Thread.sleep(100)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertEquals(partitions,recordSupplier.getAssignment())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "recordSupplier.assign(partitions)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testSeekUnassigned['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(StreamPartition.of(STREAM,SHARD_ID0),StreamPartition.of(STREAM,SHARD_ID1))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "int i = 0@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,1,0,2,false,100,5000,5000,60000,5,true)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "EasyMock.expect(getRecordsResult0.getNextShardIterator()).andReturn(null).anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "recordSupplier.seekToEarliest(partitions)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "verifyAll()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(STREAM,SHARD_ID0)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 12@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "EasyMock.expect(getRecordsResult1.getMillisBehindLatest()).andReturn(SHARD1_LAG_MILLIS).once()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD1_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult1).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "recordSupplier.assign(partitions)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD0_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult0).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "i++@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,1,0,2,false,100,5000,5000,60000,5)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "List<OrderedPartitionableRecord<String,String>> polledRecords = cleanRecords(recordSupplier.poll(POLL_TIMEOUT_MILLIS))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "EasyMock.expect(getShardIteratorResult0.getShardIterator()).andReturn(SHARD0_ITERATOR).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(ALL_RECORDS))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testSeekUnassigned['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expect(getRecordsResult1.getRecords()).andReturn(SHARD1_RECORDS).once()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,true,100,5000,5000,60000,100)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "EasyMock.expect(getRecordsResult0.getMillisBehindLatest()).andReturn(SHARD0_LAG_MILLIS).once()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "EasyMock.expect(getShardIteratorResult1.getShardIterator()).andReturn(SHARD1_ITERATOR).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "EasyMock.expect(getRecordsResult1.getNextShardIterator()).andReturn(null).anyTimes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->3 [style = bold, label=""];
32->22 [style = bold, label=""];
31->22 [style = bold, label=""];
12->28 [style = bold, label=""];
34->20 [style = bold, label=""];
3->1 [style = bold, label=""];
27->12 [style = bold, label=""];
22->31 [style = dotted, label="true"];
25->13 [style = bold, label=""];
20->26 [style = bold, label=""];
17->9 [style = bold, label=""];
25->34 [style = solid, label="partitions"];
8->3 [style = bold, label=""];
18->15 [style = bold, label=""];
37->29 [style = bold, label=""];
11->32 [style = bold, label=""];
6->0 [style = bold, label=""];
10->21 [style = bold, label=""];
16->17 [style = bold, label=""];
15->16 [style = bold, label=""];
22->23 [style = bold, label=""];
21->18 [style = bold, label=""];
22->30 [style = bold, label=""];
23->35 [style = bold, label=""];
0->14 [style = dashed, label="0"];
13->19 [style = bold, label=""];
36->25 [style = bold, label=""];
3->0 [style = solid, label="shard0"];
2->6 [style = solid, label="partitions"];
19->14 [style = bold, label=""];
5->6 [style = bold, label=""];
28->33 [style = bold, label=""];
12->13 [style = solid, label="recordsPerFetch"];
32->31 [style = solid, label="i"];
1->2 [style = solid, label="shard1"];
30->31 [style = bold, label=""];
33->24 [style = bold, label=""];
32->22 [style = solid, label="i"];
7->6 [style = bold, label=""];
24->37 [style = bold, label=""];
29->10 [style = bold, label=""];
1->2 [style = bold, label=""];
2->7 [style = bold, label=""];
22->30 [style = dotted, label="true"];
35->34 [style = bold, label=""];
5->7 [style = dashed, label="0"];
25->19 [style = solid, label="partitions"];
14->11 [style = bold, label=""];
25->14 [style = solid, label="partitions"];
31->22 [style = solid, label="i"];
2->5 [style = bold, label=""];
9->36 [style = bold, label=""];
}
