digraph {
11 [style = filled, label = "AuxParserResult auxResult = auxParser.parse(Paths.get(\"unknownfile.aux\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(0,auxResult.getUnresolvedKeysCount())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "InputStream originalStream = .getResourceAsStream(\"origin.bib\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "File auxFile = Paths.get(.getResource(\"nested.aux\").toURI()).toFile()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testNestedAux['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "AuxParserResult auxResult = auxParser.parse()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertEquals(2,auxResult.getResolvedKeysCount())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(auxResult.getGeneratedBibDatabase().hasEntries())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(0,auxResult.getResolvedKeysCount())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "BibDatabase newDB = auxResult.getGeneratedBibDatabase()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(2,newDB.getEntries().size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "AuxParser auxParser = new AuxParser(\"unknownfile.bib\",new BibDatabase())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testFileNotFound['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testFileNotFound['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(0,auxResult.getUnresolvedKeysCount())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "AuxParserResult auxResult = auxParser.parse()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ParserResult result = new BibtexParser(importFormatPreferences).parse(originalReader)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "BibDatabase newDB = auxResult.getGeneratedBibDatabase()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertFalse(auxResult.getGeneratedBibDatabase().hasEntries())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(0,auxResult.getCrossRefEntriesCount())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AuxParser auxParser = new DefaultAuxParser(new BibDatabase())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(2,auxResult.getFoundKeysInAux())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "AuxParser auxParser = new AuxParser(auxFile.getAbsolutePath(),result.getDatabase())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(0,auxResult.getCrossRefEntriesCount())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8->23 [style = bold, label=""];
15->21 [style = bold, label=""];
0->23 [style = dashed, label="0"];
22->9 [style = bold, label=""];
11->4 [style = bold, label=""];
20->0 [style = bold, label=""];
12->11 [style = bold, label=""];
1->3 [style = bold, label=""];
6->11 [style = dashed, label="0"];
3->6 [style = bold, label=""];
7->0 [style = bold, label=""];
4->2 [style = bold, label=""];
19->17 [style = bold, label=""];
4->22 [style = dashed, label="0"];
16->19 [style = bold, label=""];
9->8 [style = bold, label=""];
21->18 [style = bold, label=""];
6->4 [style = bold, label=""];
0->10 [style = bold, label=""];
23->24 [style = bold, label=""];
13->12 [style = bold, label=""];
3->12 [style = dashed, label="0"];
8->5 [style = bold, label=""];
17->14 [style = bold, label=""];
0->22 [style = bold, label=""];
10->9 [style = bold, label=""];
2->7 [style = bold, label=""];
10->24 [style = dashed, label="0"];
14->20 [style = bold, label=""];
9->15 [style = dashed, label="0"];
24->15 [style = bold, label=""];
}
