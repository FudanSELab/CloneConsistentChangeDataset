digraph {
5 [style = filled, label = "final KeyValueIterator<String,String> iterator = subject.all()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "shouldHandleDeletesOnRestoreAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "subject.init(context,subject)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final KeyValueIterator<Bytes,byte((> iterator = subject.all()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "keys.add(iterator.next().key)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "final List<KeyValue<byte((,byte((>> entries = getKeyValueEntries()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"),(byte(()null))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "keys.add(stringDeserializer.deserialize(null,iterator.next().key.get()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertThat(keys,equalTo(Utils.mkSet(\"2\",\"3\")))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final Set<String> keys = new HashSet<>()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(subject.get(\"2\"),\"b\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(subject.get(\"3\"),\"c\")@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "context.restore(subject.name(),entries)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "shouldHandleDeletesOnRestoreAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertEquals(subject.get(\"1\"),\"a\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "iterator.hasNext()@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "shouldRestoreAll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3->11 [style = dotted, label="true"];
5->12 [style = dashed, label="0"];
1->3 [style = bold, label=""];
3->11 [style = bold, label=""];
1->2 [style = solid, label="keys"];
6->0 [style = bold, label=""];
3->9 [style = dotted, label="true"];
7->8 [style = bold, label=""];
12->1 [style = bold, label=""];
15->16 [style = bold, label=""];
4->7 [style = bold, label=""];
0->7 [style = bold, label=""];
3->9 [style = bold, label=""];
5->1 [style = bold, label=""];
8->5 [style = bold, label=""];
3->2 [style = bold, label=""];
14->0 [style = bold, label=""];
11->3 [style = bold, label=""];
0->4 [style = bold, label=""];
10->0 [style = bold, label=""];
9->3 [style = bold, label=""];
9->11 [style = dashed, label="0"];
13->15 [style = bold, label=""];
0->8 [style = solid, label="entries"];
8->12 [style = bold, label=""];
8->13 [style = bold, label=""];
}
