digraph {
8 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Hello-0-0\",initialTime))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "testHarness.waitForTaskCompletion()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Ciao-0-0\",initialTime),0,1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Hello-0-0\",initialTime))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),2,0)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Witam-0-1\",initialTime))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),0,1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testHarness.processElement(new StreamRecord<>(1.0d,initialTime),2,0)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testHarness.processElement(new StreamRecord<>(1.0d,initialTime),2,1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),1,0)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Ciao-0-0\",initialTime),0,0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(testHarness.getOutput(),contains(expectedOutput.toArray()))@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "expectedOutput.add(new CancelCheckpointMarker(0))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"1.0\",initialTime))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,0)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testHarness.processElement(new StreamRecord<>(42,initialTime),1,1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),2,1)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Ciao-0-0\",initialTime))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testCheckpointBarriers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testHarness.processElement(new StreamRecord<>(11,initialTime),1,1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(testHarness.getOutput(),contains(expectedOutput.toArray()))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(testHarness.getOutput(),contains(expectedOutput.toArray()))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"1.0\",initialTime))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),1,1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"42\",initialTime))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ArrayDeque<Object> expectedOutput = new ArrayDeque<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testOvertakingCheckpointBarriers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Ciao-0-0\",initialTime))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,1)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),2,1)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),0,0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,1)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testCheckpointBarriers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Witam-0-1\",initialTime),0,1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertThat(testHarness.getOutput(),contains(expectedOutput.toArray()))@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"11\",initialTime))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Hello-0-0\",initialTime),0,0)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "long initialTime = 0L@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),2,0)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39->37 [style = bold, label=""];
28->29 [style = bold, label=""];
11->16 [style = solid, label="initialTime"];
16->0 [style = bold, label=""];
15->10 [style = bold, label=""];
29->17 [style = bold, label=""];
11->22 [style = solid, label="initialTime"];
0->37 [style = dashed, label="0"];
26->32 [style = bold, label=""];
0->13 [style = bold, label=""];
7->12 [style = bold, label=""];
24->35 [style = bold, label=""];
18->34 [style = bold, label=""];
11->6 [style = bold, label=""];
33->4 [style = bold, label=""];
11->8 [style = solid, label="initialTime"];
23->15 [style = bold, label=""];
22->21 [style = bold, label=""];
11->37 [style = solid, label="initialTime"];
9->22 [style = dashed, label="0"];
10->17 [style = bold, label=""];
11->23 [style = solid, label="initialTime"];
2->9 [style = bold, label=""];
36->26 [style = bold, label=""];
37->23 [style = bold, label=""];
11->5 [style = solid, label="initialTime"];
11->30 [style = solid, label="initialTime"];
11->0 [style = solid, label="initialTime"];
11->21 [style = solid, label="initialTime"];
20->4 [style = bold, label=""];
19->16 [style = bold, label=""];
6->2 [style = bold, label=""];
3->18 [style = bold, label=""];
17->7 [style = bold, label=""];
8->1 [style = bold, label=""];
25->27 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
30->28 [style = bold, label=""];
11->13 [style = solid, label="initialTime"];
19->21 [style = dashed, label="0"];
21->39 [style = bold, label=""];
18->1 [style = bold, label=""];
11->40 [style = solid, label="initialTime"];
10->25 [style = bold, label=""];
11->2 [style = solid, label="initialTime"];
11->31 [style = solid, label="initialTime"];
11->9 [style = solid, label="initialTime"];
31->30 [style = bold, label=""];
40->22 [style = bold, label=""];
9->19 [style = bold, label=""];
27->24 [style = bold, label=""];
12->3 [style = bold, label=""];
13->15 [style = bold, label=""];
18->8 [style = bold, label=""];
34->38 [style = bold, label=""];
35->36 [style = bold, label=""];
5->40 [style = bold, label=""];
11->19 [style = solid, label="initialTime"];
4->11 [style = bold, label=""];
11->15 [style = solid, label="initialTime"];
2->40 [style = dashed, label="0"];
32->31 [style = bold, label=""];
11->39 [style = solid, label="initialTime"];
16->39 [style = dashed, label="0"];
14->4 [style = bold, label=""];
}
