digraph {
7 [style = filled, label = "return result@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return result@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "String operator = ctx.logicalOperator().getText()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final ExprContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)),(ExpressionSegment)visit(ctx.expr(1)),ctx.logicalOperator().getText(),text)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "null != ctx.XOR()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "visitExpr['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "visitExpr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "null != ctx.logicalOperator()@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "return result@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "return visit(ctx.booleanPrimary())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "return result@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String operator = \"XOR\"@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "null != ctx.logicalOperator()@@@13@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "NotExpression result = new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "NotExpression result = new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "return result@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "return visit(ctx.expr(0))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "visitExpr['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "null != ctx.LP_()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "null != ctx.booleanPrimary()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24->6 [style = dotted, label="true"];
24->12 [style = dotted, label="true"];
21->25 [style = solid, label="result"];
16->13 [style = dotted, label="true"];
16->27 [style = dashed, label="0"];
12->8 [style = dotted, label="true"];
0->19 [style = dashed, label="0"];
27->28 [style = bold, label=""];
1->27 [style = bold, label=""];
16->20 [style = dotted, label="true"];
7->8 [style = bold, label=""];
16->10 [style = dotted, label="true"];
9->16 [style = bold, label=""];
12->7 [style = bold, label=""];
26->12 [style = bold, label=""];
17->15 [style = dotted, label="true"];
5->0 [style = bold, label=""];
24->21 [style = bold, label=""];
24->11 [style = bold, label=""];
6->13 [style = solid, label="result"];
6->12 [style = solid, label="right"];
12->7 [style = solid, label="result"];
6->20 [style = dashed, label="0"];
3->11 [style = bold, label=""];
18->12 [style = bold, label=""];
18->19 [style = bold, label=""];
21->25 [style = bold, label=""];
20->18 [style = bold, label=""];
13->12 [style = bold, label=""];
24->26 [style = dotted, label="true"];
1->16 [style = bold, label=""];
8->7 [style = dashed, label="0"];
3->20 [style = solid, label="operator"];
28->24 [style = bold, label=""];
8->5 [style = solid, label="result"];
10->2 [style = bold, label=""];
12->7 [style = dotted, label="true"];
16->11 [style = dotted, label="true"];
24->7 [style = dotted, label="true"];
16->18 [style = bold, label=""];
18->7 [style = dotted, label="true"];
17->1 [style = bold, label=""];
6->23 [style = bold, label=""];
2->3 [style = bold, label=""];
1->9 [style = bold, label=""];
9->27 [style = bold, label=""];
3->23 [style = dashed, label="0"];
24->11 [style = dotted, label="true"];
24->23 [style = dotted, label="true"];
1->9 [style = dotted, label="true"];
6->13 [style = bold, label=""];
27->24 [style = bold, label=""];
22->1 [style = bold, label=""];
23->12 [style = solid, label="operator"];
22->15 [style = dotted, label="true"];
7->19 [style = bold, label=""];
26->12 [style = solid, label="text"];
11->12 [style = solid, label="left"];
11->20 [style = bold, label=""];
16->2 [style = dotted, label="true"];
2->6 [style = solid, label="right"];
16->10 [style = bold, label=""];
2->20 [style = solid, label="right"];
3->6 [style = solid, label="operator"];
11->6 [style = bold, label=""];
23->26 [style = bold, label=""];
10->20 [style = solid, label="left"];
12->0 [style = bold, label=""];
16->3 [style = dotted, label="true"];
14->1 [style = bold, label=""];
27->28 [style = dotted, label="true"];
14->15 [style = dotted, label="true"];
18->12 [style = dotted, label="true"];
8->5 [style = bold, label=""];
12->5 [style = dotted, label="true"];
0->4 [style = bold, label=""];
11->6 [style = solid, label="text"];
7->8 [style = solid, label="text"];
7->21 [style = bold, label=""];
10->6 [style = solid, label="left"];
0->4 [style = solid, label="result"];
11->20 [style = solid, label="text"];
16->12 [style = bold, label=""];
12->7 [style = solid, label="text"];
16->6 [style = dotted, label="true"];
}
