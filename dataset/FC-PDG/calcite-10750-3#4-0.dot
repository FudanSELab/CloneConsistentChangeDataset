digraph {
2 [style = filled, label = "tester.checkBoolean(\"false<=false\",Boolean.TRUE)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "tester.checkBoolean(\"true<=false\",Boolean.FALSE)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "tester.checkBoolean(\"1000<=cast(1e2 as real)\",Boolean.FALSE)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "tester.checkBoolean(\"1.1<=1.1\",Boolean.TRUE)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "tester.checkNull(\"cast(null as real)<=cast(1 as real)\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "tester.checkBoolean(\"false<=true\",Boolean.TRUE)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "tester.checkBoolean(\"1.2e1<=cast(1e2 as real)\",Boolean.TRUE)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "tester.checkBoolean(\"-1<=1\",Boolean.TRUE)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "tester.checkBoolean(\"true<=true\",Boolean.TRUE)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "tester.checkBoolean(\"1.2<=1\",Boolean.FALSE)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "tester.checkBoolean(\"1.2e1<=1e2\",Boolean.TRUE)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testLessThanOrEqualOperator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "tester.checkBoolean(\"cast(null as boolean) is not true\",Boolean.TRUE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "tester.checkBoolean(\"1<=cast(1e2 as real)\",Boolean.TRUE)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "tester.checkBoolean(\"x'0A0001B0'<=x'0A0001B0'\",Boolean.TRUE)@@@25@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "tester.checkBoolean(\"-1.1<=-1.2\",Boolean.FALSE)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "tester.checkBoolean(\"true is not true\",Boolean.FALSE)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "tester.checkBoolean(\"1.1<=1.2\",Boolean.TRUE)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testLessThanOrEqualOperator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "tester.checkBoolean(\"1<=1\",Boolean.TRUE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "tester.checkNull(\"cast(null as integer)<=1.32\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "tester.checkFails(\"select ^'a string' is not true^ from (values (1))\",\"(?s)Cannot apply 'IS NOT TRUE' to arguments of type '<CHAR\(8\)> IS NOT TRUE'. Supported form\(s\): '<BOOLEAN> IS NOT TRUE'.*\",false)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "tester.setFor(SqlStdOperatorTable.IS_NOT_TRUE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "tester.checkNull(\"3<=cast(null as smallint)\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "tester.checkBoolean(\"1<=2\",Boolean.TRUE)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "tester.checkNull(\"cast(null as integer)<=3\")@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testIsNotTrueOperator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "tester.checkBoolean(\"2<=1\",Boolean.FALSE)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "tester.checkBoolean(\"false is not true\",Boolean.TRUE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "tester.checkBoolean(\"x'0A000130'<=x'0A0001B0'\",Boolean.TRUE)@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "tester.setFor(SqlStdOperatorTable.LESS_THAN_OR_EQUAL)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28->30 [style = bold, label=""];
12->25 [style = dashed, label="0"];
29->27 [style = bold, label=""];
20->7 [style = bold, label=""];
27->28 [style = bold, label=""];
4->28 [style = dashed, label="0"];
19->20 [style = bold, label=""];
6->0 [style = bold, label=""];
25->26 [style = bold, label=""];
13->6 [style = bold, label=""];
12->1 [style = bold, label=""];
3->27 [style = dashed, label="0"];
17->12 [style = bold, label=""];
4->17 [style = bold, label=""];
2->10 [style = bold, label=""];
11->16 [style = bold, label=""];
9->21 [style = bold, label=""];
14->19 [style = bold, label=""];
7->22 [style = bold, label=""];
30->25 [style = bold, label=""];
17->30 [style = dashed, label="0"];
8->3 [style = bold, label=""];
5->13 [style = bold, label=""];
1->11 [style = bold, label=""];
21->18 [style = bold, label=""];
24->3 [style = bold, label=""];
15->5 [style = bold, label=""];
22->23 [style = bold, label=""];
0->2 [style = bold, label=""];
10->14 [style = bold, label=""];
3->4 [style = bold, label=""];
1->26 [style = dashed, label="0"];
16->9 [style = bold, label=""];
18->15 [style = bold, label=""];
}
