digraph {
15 [style = filled, label = "runnable.call(new Call(\"findCoordinator\",deadline,new LeastLoadedNodeProvider()){@Override FindCoordinatorRequest.Builder createRequest(int timeoutMs){return new FindCoordinatorRequest.Builder(new FindCoordinatorRequestData().setKeyType(CoordinatorType.GROUP.id()).setKey(groupId))}@Override void handleResponse(AbstractResponse abstractResponse){final FindCoordinatorResponse fcResponse = (FindCoordinatorResponse)abstractResponseif (handleGroupRequestError(fcResponse.error(),futures.get(groupId))) returnfinal long nowDescribeConsumerGroups = time.milliseconds()final int nodeId = fcResponse.node().id()runnable.call(new Call(\"describeConsumerGroups\",deadline,new ConstantNodeIdProvider(nodeId)){@Override AbstractRequest.Builder createRequest(int timeoutMs){return new DescribeGroupsRequest.Builder(new DescribeGroupsRequestData().setGroups(Collections.singletonList(groupId)).setIncludeAuthorizedOperations(options.includeAuthorizedOperations()))}@Override void handleResponse(AbstractResponse abstractResponse){final DescribeGroupsResponse response = (DescribeGroupsResponse)abstractResponseKafkaFutureImpl<ConsumerGroupDescription> future = futures.get(groupId)final DescribedGroup describedGroup = response.data().groups().stream().filter(null).findFirst().get()final Errors groupError = Errors.forCode(describedGroup.errorCode())if (handleGroupRequestError(groupError,future)) returnfinal String protocolType = describedGroup.protocolType()if (protocolType.equals(ConsumerProtocol.PROTOCOL_TYPE) || protocolType.isEmpty()) {final List<DescribedGroupMember> members = describedGroup.members()final List<MemberDescription> memberDescriptions = new ArrayList<>(members.size())final Set<AclOperation> authorizedOperations = validAclOperations(describedGroup.authorizedOperations())for (DescribedGroupMember groupMember : members){Set<TopicPartition> partitions = Collections.emptySet()if (groupMember.memberAssignment().length > 0) {final PartitionAssignor.Assignment assignment = ConsumerProtocol.deserializeAssignment(ByteBuffer.wrap(groupMember.memberAssignment()))partitions = new HashSet<>(assignment.partitions())}final MemberDescription memberDescription = new MemberDescription(groupMember.memberId(),groupMember.clientId(),groupMember.clientHost(),new MemberAssignment(partitions))memberDescriptions.add(memberDescription)}final ConsumerGroupDescription consumerGroupDescription = new ConsumerGroupDescription(groupId,protocolType.isEmpty(),memberDescriptions,describedGroup.protocolData(),ConsumerGroupState.parse(describedGroup.groupState()),fcResponse.node(),authorizedOperations)future.complete(consumerGroupDescription)}}@Override void handleFailure(Throwable throwable){KafkaFutureImpl<ConsumerGroupDescription> future = futures.get(groupId)future.completeExceptionally(throwable)}},nowDescribeConsumerGroups)}@Override void handleFailure(Throwable throwable){KafkaFutureImpl<ConsumerGroupDescription> future = futures.get(groupId)future.completeExceptionally(throwable)}},startFindCoordinatorMs)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final long deadline = calcDeadlineMs(startFindCoordinatorMs,options.timeoutMs())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final String groupId = entry.getKey()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return new DescribeConsumerGroupsResult(new HashMap<>(futures))@@@74@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "deleteConsumerGroups['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Collection<String> groupIds@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "DeleteConsumerGroupsOptions options@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "entry.getValue().isCompletedExceptionally()@@@15@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "runnable.call(new Call(\"findCoordinator\",deadline,new LeastLoadedNodeProvider()){@Override FindCoordinatorRequest.Builder createRequest(int timeoutMs){return new FindCoordinatorRequest.Builder(new FindCoordinatorRequestData().setKeyType(CoordinatorType.GROUP.id()).setKey(groupId))}@Override void handleResponse(AbstractResponse abstractResponse){final FindCoordinatorResponse response = (FindCoordinatorResponse)abstractResponseif (handleFindCoordinatorError(response,futures.get(groupId))) returnfinal long nowDeleteConsumerGroups = time.milliseconds()final int nodeId = response.node().id()runnable.call(new Call(\"deleteConsumerGroups\",deadline,new ConstantNodeIdProvider(nodeId)){@Override AbstractRequest.Builder createRequest(int timeoutMs){return new DeleteGroupsRequest.Builder(Collections.singleton(groupId))}@Override void handleResponse(AbstractResponse abstractResponse){final DeleteGroupsResponse response = (DeleteGroupsResponse)abstractResponseKafkaFutureImpl<Void> future = futures.get(groupId)final Errors groupError = response.get(groupId)if (groupError != Errors.NONE) {future.completeExceptionally(groupError.exception())}{future.complete(null)}}@Override void handleFailure(Throwable throwable){KafkaFutureImpl<Void> future = futures.get(groupId)future.completeExceptionally(throwable)}},nowDeleteConsumerGroups)}@Override void handleFailure(Throwable throwable){KafkaFutureImpl<Void> future = futures.get(groupId)future.completeExceptionally(throwable)}},startFindCoordinatorMs)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "describeConsumerGroups['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "!futures.containsKey(groupId)@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "futures.put(groupId,new KafkaFutureImpl<>())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "return new DeleteConsumerGroupsResult(new HashMap<>(futures))@@@56@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final Collection<String> groupIds@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "final Collection<String> groupIds@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return new DescribeConsumerGroupsResult(new HashMap<>(futures))@@@70@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "final Map<String,KafkaFutureImpl<Void>> futures = new HashMap<>(groupIds.size())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final long startFindCoordinatorMs = time.milliseconds()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final Map<String,KafkaFutureImpl<ConsumerGroupDescription>> futures = new HashMap<>(groupIds.size())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "future.completeExceptionally(new ApiException(\"The given group id '\" + groupId + \"' cannot be represented in a request.\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "futures.get(groupId).isCompletedExceptionally()@@@15@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "future.completeExceptionally(new InvalidGroupIdException(\"The given group id '\" + groupId + \"' cannot be represented in a request.\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "KafkaFutureImpl<ConsumerGroupDescription> future = new KafkaFutureImpl<>()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "groupIdIsUnrepresentable(groupId)@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "futures.put(groupId,future)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final DescribeConsumerGroupsOptions options@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "KafkaFutureImpl<Void> future = new KafkaFutureImpl<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "describeConsumerGroups['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1->17 [style = solid, label="futures"];
4->6 [style = dotted, label="true"];
5->10 [style = bold, label=""];
22->11 [style = solid, label="startFindCoordinatorMs"];
0->9 [style = bold, label=""];
15->10 [style = bold, label=""];
7->11 [style = bold, label=""];
14->25 [style = bold, label=""];
8->15 [style = bold, label=""];
12->5 [style = bold, label=""];
14->12 [style = dotted, label="true"];
24->2 [style = bold, label=""];
25->22 [style = bold, label=""];
16->13 [style = dotted, label="true"];
9->2 [style = solid, label="future"];
0->27 [style = bold, label=""];
3->24 [style = dashed, label="0"];
1->19 [style = dashed, label="0"];
23->21 [style = dotted, label="true"];
9->27 [style = dashed, label="0"];
5->25 [style = dashed, label="0"];
1->0 [style = bold, label=""];
1->10 [style = solid, label="futures"];
7->15 [style = solid, label="groupId"];
5->17 [style = bold, label=""];
12->0 [style = bold, label=""];
13->26 [style = dashed, label="0"];
15->5 [style = bold, label=""];
19->0 [style = bold, label=""];
4->13 [style = dotted, label="true"];
11->15 [style = solid, label="startFindCoordinatorMs"];
15->17 [style = bold, label=""];
0->14 [style = bold, label=""];
2->0 [style = bold, label=""];
25->20 [style = bold, label=""];
23->26 [style = dotted, label="true"];
8->20 [style = bold, label=""];
3->2 [style = bold, label=""];
14->0 [style = bold, label=""];
16->1 [style = bold, label=""];
27->2 [style = solid, label="future"];
11->8 [style = solid, label="deadline"];
12->25 [style = bold, label=""];
0->24 [style = dotted, label="true"];
23->19 [style = bold, label=""];
14->12 [style = bold, label=""];
0->14 [style = dotted, label="false"];
9->3 [style = bold, label=""];
5->7 [style = bold, label=""];
11->8 [style = bold, label=""];
9->15 [style = solid, label="future"];
27->24 [style = bold, label=""];
4->1 [style = bold, label=""];
10->20 [style = dashed, label="0"];
0->3 [style = dotted, label="true"];
19->20 [style = solid, label="futures"];
0->2 [style = dotted, label="true"];
11->8 [style = solid, label="startFindCoordinatorMs"];
0->27 [style = dotted, label="true"];
2->25 [style = bold, label=""];
0->9 [style = dotted, label="true"];
8->25 [style = bold, label=""];
22->11 [style = bold, label=""];
22->8 [style = solid, label="startFindCoordinatorMs"];
8->15 [style = solid, label="deadline"];
2->5 [style = bold, label=""];
14->5 [style = bold, label=""];
16->18 [style = dotted, label="true"];
}
