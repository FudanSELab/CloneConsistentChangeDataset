digraph {
30 [style = filled, label = "TaskStateSnapshot taskStateSnapshot = new TaskStateSnapshot()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(mockingBackend,jobManagerTaskRestore,false)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "CloseableRegistry closeableRegistry = new CloseableRegistry()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "AbstractStreamOperator<?> streamOperator = mock()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "taskStateSnapshot.putSubtaskStateByOperatorID(operatorID,operatorSubtaskState)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertFalse(\"Expected the context to NOT be restored\",stateContext.isRestored())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertNotNull(operatorStateBackend)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "CheckpointableKeyedStateBackend<?> keyedStateBackend = stateContext.keyedStateBackend()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "OperatorStateBackend operatorStateBackend = stateContext.operatorStateBackend()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs)@@@49@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "InternalTimeServiceManager<?> timeServiceManager = stateContext.internalTimerServiceManager()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int count = 0@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "InternalTimeServiceManager<?> timeServiceManager = stateContext.internalTimerServiceManager()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "StreamOperatorStateContext stateContext = streamTaskStateManager.streamOperatorStateContext(streamOperator.getOperatorID(),streamOperator.getClass().getSimpleName(),new TestProcessingTimeService(),streamOperator,typeSerializer,closeableRegistry,new UnregisteredMetricsGroup(),1.0,false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertNotNull(operatorStateBackend)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "CheckpointableKeyedStateBackend<?> keyedStateBackend = stateContext.keyedStateBackend()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs = stateContext.rawKeyedStateInputs()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertNotNull(operatorStateInputs)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertNotNull(timeServiceManager)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "count = 0@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "++count@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertFalse(operatorStateInputs.iterator().hasNext())@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(1,count)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(stateBackend,null,true)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Random random = new Random(0x42)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertNotNull(operatorStateInputs)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertNull(timeServiceManager)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "CloseableIterable<StatePartitionStreamProvider> operatorStateInputs = stateContext.rawOperatorStateInputs()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "TypeSerializer<?> typeSerializer = new IntSerializer()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs = stateContext.rawKeyedStateInputs()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testWithRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "++count@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertNotNull(keyedStateBackend)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testWithRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testNoRestore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertNotNull(keyedStateBackend)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "when(streamOperator.getOperatorID()).thenReturn(operatorID)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(3,count)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "JobManagerTaskRestore jobManagerTaskRestore = new JobManagerTaskRestore(0L,taskStateSnapshot)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertNotNull(keyedStateInputs)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "OperatorID operatorID = new OperatorID(47L,11L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "StateBackend mockingBackend = spy(new StateBackend(){@Override public AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env,JobID jobID,String operatorIdentifier,TypeSerializer<K> keySerializer,int numberOfKeyGroups,KeyGroupRange keyGroupRange,TaskKvStateRegistry kvStateRegistry,TtlTimeProvider ttlTimeProvider,MetricGroup metricGroup,@Nonnull Collection<KeyedStateHandle> stateHandles,CloseableRegistry cancelStreamRegistry){return mock()}@Override public OperatorStateBackend createOperatorStateBackend(Environment env,String operatorIdentifier,@Nonnull Collection<OperatorStateHandle> stateHandles,CloseableRegistry cancelStreamRegistry){return mock()}})@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertFalse(keyedStateInputs.iterator().hasNext())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertNotNull(keyedStateInputs)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "OperatorSubtaskState operatorSubtaskState = OperatorSubtaskState.builder().setManagedOperatorState(new OperatorStreamStateHandle(Collections.singletonMap(\"a\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc67ad,SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random,null))).setRawOperatorState(new OperatorStreamStateHandle(Collections.singletonMap(\"_default_\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc67c1,SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random,null))).setManagedKeyedState(CheckpointTestUtils.createDummyKeyGroupStateHandle(random,null)).setRawKeyedState(CheckpointTestUtils.createDummyKeyGroupStateHandle(random,null)).setInputChannelState(singleton(createNewInputChannelStateHandle(10,random))).setResultSubpartitionState(singleton(createNewResultSubpartitionStateHandle(10,random))).build()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "CloseableIterable<StatePartitionStreamProvider> operatorStateInputs = stateContext.rawOperatorStateInputs()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "MemoryStateBackend stateBackend = spy(new MemoryStateBackend(1024))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertTrue(\"Expected the context to be restored\",stateContext.isRestored())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28->21 [style = bold, label=""];
35->33 [style = bold, label=""];
21->3 [style = bold, label=""];
22->12 [style = solid, label="operatorID"];
33->6 [style = solid, label="timeServiceManager"];
43->48 [style = bold, label=""];
44->42 [style = bold, label=""];
23->10 [style = bold, label=""];
13->20 [style = solid, label="typeSerializer"];
9->7 [style = solid, label="operatorStateInputs"];
38->41 [style = bold, label=""];
41->45 [style = solid, label="closeableRegistry"];
31->18 [style = bold, label=""];
37->1 [style = solid, label="operatorStateInputs"];
2->17 [style = bold, label=""];
8->26 [style = solid, label="count"];
17->25 [style = solid, label="keyedStateBackend"];
36->1 [style = solid, label="keyedStateInputs"];
3->25 [style = bold, label=""];
6->12 [style = bold, label=""];
13->1 [style = bold, label=""];
10->15 [style = bold, label=""];
20->2 [style = bold, label=""];
38->45 [style = solid, label="typeSerializer"];
37->13 [style = solid, label="operatorStateInputs"];
8->16 [style = bold, label=""];
22->30 [style = bold, label=""];
24->14 [style = solid, label="mockingBackend"];
23->39 [style = dashed, label="0"];
41->45 [style = bold, label=""];
41->1 [style = solid, label="closeableRegistry"];
0->19 [style = bold, label=""];
48->40 [style = bold, label=""];
48->45 [style = solid, label="streamOperator"];
1->20 [style = solid, label="closeableRegistry"];
12->13 [style = bold, label=""];
5->31 [style = bold, label=""];
24->42 [style = dashed, label="0"];
47->34 [style = solid, label="operatorStateBackend"];
29->7 [style = bold, label=""];
34->22 [style = bold, label=""];
47->1 [style = solid, label="operatorStateBackend"];
46->43 [style = bold, label=""];
7->8 [style = bold, label=""];
36->12 [style = solid, label="keyedStateInputs"];
22->6 [style = bold, label=""];
35->22 [style = solid, label="keyedStateBackend"];
15->4 [style = bold, label=""];
0->4 [style = solid, label="timeServiceManager"];
47->35 [style = bold, label=""];
2->10 [style = solid, label="operatorStateBackend"];
1->25 [style = solid, label="closeableRegistry"];
26->28 [style = bold, label=""];
5->31 [style = solid, label="operatorSubtaskState"];
18->14 [style = bold, label=""];
19->29 [style = solid, label="keyedStateInputs"];
17->0 [style = bold, label=""];
11->5 [style = bold, label=""];
40->38 [style = bold, label=""];
9->25 [style = solid, label="operatorStateInputs"];
18->14 [style = solid, label="jobManagerTaskRestore"];
43->40 [style = solid, label="operatorID"];
36->37 [style = bold, label=""];
19->9 [style = bold, label=""];
16->26 [style = bold, label=""];
39->34 [style = bold, label=""];
30->11 [style = bold, label=""];
45->47 [style = bold, label=""];
22->31 [style = solid, label="operatorID"];
28->3 [style = solid, label="count"];
35->1 [style = solid, label="keyedStateBackend"];
42->46 [style = solid, label="stateBackend"];
24->22 [style = bold, label=""];
19->25 [style = solid, label="keyedStateInputs"];
27->24 [style = bold, label=""];
6->20 [style = solid, label="streamOperator"];
4->6 [style = dashed, label="0"];
37->39 [style = bold, label=""];
17->15 [style = solid, label="keyedStateBackend"];
2->25 [style = solid, label="operatorStateBackend"];
42->46 [style = bold, label=""];
14->6 [style = bold, label=""];
9->23 [style = bold, label=""];
1->20 [style = bold, label=""];
4->29 [style = bold, label=""];
33->36 [style = bold, label=""];
32->24 [style = bold, label=""];
30->18 [style = solid, label="taskStateSnapshot"];
}
