digraph {
27 [style = filled, label = "sameKeyDifferentCfRowMutations['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "assertNull(row.getCell(metadata.getColumn(bytes(\"c2\"))))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(1,mutatedCFs.size())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "PartitionUpdate cf1 = makeCf(metadata,\"k1\",\"k1v1\",null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "update.metadata().name.equals(\"cf1\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertNull(row.getCell(metadata.getColumn(bytes(\"c2\"))))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNull(row.getCell(metadata.getColumn(bytes(\"c1\"))))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertNull(row.getCell(metadata.getColumn(bytes(\"c1\"))))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Row row = update.iterator().next()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Row row = update.iterator().next()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "sameKeyDifferentCfRowMutations['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Mutation rm1 = new Mutation.PartitionUpdateCollector(\"ks1\",cf1.partitionKey()).add(cf1).build()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "TableMetadata metadata = makeTableMetadata(\"ks1\",\"cf1\",TriggerMetadata.create(\"test\",.getName()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Mutation rm1 = new Mutation(\"ks1\",cf1.partitionKey()).add(cf1)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "mutatedCFs = new ArrayList<>(tmutations.get(1).getPartitionUpdates())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TableMetadata metadata = makeTableMetadata(\"ks1\",\"cf1\",TriggerMetadata.create(\"test\",.getName()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "List<PartitionUpdate> mutatedCFs = new ArrayList<>(tmutations.get(0).getPartitionUpdates())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(1,mutatedCFs.size())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(2,mutatedCFs.size())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(2,mutatedCFs.size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(bytes(\"k2v1\"),row.getCell(metadata.getColumn(bytes(\"c1\"))).value())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "row = mutatedCFs.get(0).iterator().next()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Row row = update.iterator().next()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(4,tmutations.size())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(1,mutatedCFs.size())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "List<? extends IMutation> tmutations = new ArrayList<>(TriggerExecutor.instance.execute(Arrays.asList(rm1,rm2)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertNull(row.getCell(metadata.getColumn(bytes(\"c1\"))))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Collections.sort(tmutations,new RmComparator())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "row = mutatedCFs.get(0).iterator().next()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "row = mutatedCFs.get(0).iterator().next()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "mutatedCFs = new ArrayList<>(tmutations.get(2).getPartitionUpdates())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "update.metadata().name.equals(\"cf1\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Row row = mutatedCFs.get(0).iterator().next()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(bytes(\"trigger\"),row.getCell(metadata.getColumn(bytes(\"c2\"))).value())@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Row row = update.iterator().next()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(1,mutatedCFs.size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(bytes(\"k1v1\"),row.getCell(metadata.getColumn(bytes(\"c1\"))).value())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Mutation rm2 = new Mutation(\"ks1\",cf2.partitionKey()).add(cf2)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "sameKeyDifferentKsRowMutations['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Mutation rm2 = new Mutation.PartitionUpdateCollector(\"ks1\",cf2.partitionKey()).add(cf2).build()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "PartitionUpdate cf2 = makeCf(metadata,\"k2\",\"k2v1\",null)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "mutatedCFs = new ArrayList<>(tmutations.get(3).getPartitionUpdates())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(bytes(\"trigger\"),row.getCell(metadata.getColumn(bytes(\"c2\"))).value())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(bytes(\"trigger\"),row.getCell(metadata.getColumn(bytes(\"c2\"))).value())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(2,tmutations.size())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
21->6 [style = dotted, label="false"];
17->23 [style = solid, label="rm1"];
23->25 [style = bold, label=""];
21->16 [style = dotted, label="false"];
30->13 [style = bold, label=""];
33->20 [style = bold, label=""];
12->7 [style = dotted, label="false"];
8->31 [style = bold, label=""];
21->15 [style = dotted, label="true"];
21->18 [style = dotted, label="true"];
35->42 [style = bold, label=""];
14->17 [style = solid, label="cf1"];
42->9 [style = solid, label="metadata"];
11->34 [style = dashed, label="0"];
21->15 [style = bold, label=""];
0->12 [style = bold, label=""];
11->21 [style = bold, label=""];
3->14 [style = bold, label=""];
27->3 [style = bold, label=""];
4->21 [style = bold, label=""];
12->1 [style = dotted, label="true"];
3->14 [style = solid, label="metadata"];
21->26 [style = dotted, label="false"];
9->17 [style = bold, label=""];
0->4 [style = dashed, label="0"];
38->41 [style = bold, label=""];
4->2 [style = bold, label=""];
7->20 [style = bold, label=""];
1->38 [style = bold, label=""];
16->2 [style = bold, label=""];
26->6 [style = bold, label=""];
17->29 [style = dashed, label="0"];
15->18 [style = bold, label=""];
21->4 [style = dotted, label="true"];
9->24 [style = solid, label="cf2"];
12->7 [style = bold, label=""];
13->1 [style = bold, label=""];
43->30 [style = bold, label=""];
24->28 [style = dashed, label="0"];
42->14 [style = bold, label=""];
12->20 [style = dotted, label="false"];
29->28 [style = bold, label=""];
39->18 [style = bold, label=""];
3->9 [style = solid, label="metadata"];
21->26 [style = bold, label=""];
20->8 [style = bold, label=""];
17->24 [style = bold, label=""];
2->0 [style = bold, label=""];
12->10 [style = bold, label=""];
12->13 [style = dotted, label="true"];
12->8 [style = dotted, label="false"];
18->4 [style = bold, label=""];
12->10 [style = dotted, label="true"];
10->13 [style = bold, label=""];
37->39 [style = bold, label=""];
25->36 [style = dashed, label="0"];
6->16 [style = bold, label=""];
28->23 [style = bold, label=""];
16->21 [style = bold, label=""];
32->40 [style = bold, label=""];
22->34 [style = bold, label=""];
25->19 [style = bold, label=""];
34->44 [style = bold, label=""];
28->23 [style = solid, label="rm2"];
42->14 [style = solid, label="metadata"];
23->19 [style = solid, label="tmutations"];
1->12 [style = bold, label=""];
7->13 [style = dashed, label="0"];
14->9 [style = bold, label=""];
23->36 [style = bold, label=""];
44->37 [style = bold, label=""];
2->32 [style = bold, label=""];
41->33 [style = bold, label=""];
40->43 [style = bold, label=""];
9->29 [style = bold, label=""];
24->23 [style = solid, label="rm2"];
19->22 [style = bold, label=""];
22->11 [style = bold, label=""];
8->12 [style = bold, label=""];
3->42 [style = dashed, label="0"];
29->23 [style = solid, label="rm1"];
36->19 [style = bold, label=""];
24->23 [style = bold, label=""];
}
