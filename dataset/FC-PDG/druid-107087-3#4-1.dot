digraph {
15 [style = filled, label = "Assert.assertTrue(matcherFactory instanceof SingleValueStringVectorValueMatcher)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(selector.getMaxVectorSize()).andReturn(VECTOR_SIZE).anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testSingleValueStringOneCardinalityBooleanMatcherIfNullAndNameLookupPossible['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "EasyMock.expect(selector.getValueCardinality()).andReturn(0).anyTimes()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "VectorValueMatcher anotherBooleanMatcher = matcherFactory.makeMatcher((String)null)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testSingleValueStringZeroCardinalityAlwaysBooleanMatcher['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "VectorValueMatcherFactory matcherFactory = VectorValueMatcherColumnProcessorFactory.instance().makeSingleValueDimensionProcessor(selector)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "EasyMock.verify(selector)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(VECTOR_SIZE,booleanMatcher.getMaxVectorSize())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "VectorValueMatcherFactory matcherFactory = VectorValueMatcherColumnProcessorFactory.instance().makeSingleValueDimensionProcessor(new ColumnCapabilitiesImpl().setType(ValueType.STRING).setHasMultipleValues(false).setHasBitmapIndexes(true).setDictionaryValuesUnique(true).setDictionaryValuesSorted(true).setDictionaryEncoded(true),selector)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(CURRENT_SIZE,matcher.getCurrentVectorSize())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(CURRENT_SIZE,booleanMatcher.getCurrentVectorSize())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(anotherBooleanMatcher instanceof BooleanVectorValueMatcher)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testSingleValueStringZeroCardinalityAlwaysBooleanMatcher['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "EasyMock.expect(selector.getCurrentVectorSize()).andReturn(CURRENT_SIZE).anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "VectorValueMatcherFactory matcherFactory = VectorValueMatcherColumnProcessorFactory.instance().makeSingleValueDimensionProcessor(selector)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EasyMock.expect(selector.getValueCardinality()).andReturn(1).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(VECTOR_SIZE,anotherBooleanMatcher.getMaxVectorSize())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "EasyMock.expect(selector.nameLookupPossibleInAdvance()).andReturn(true).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "SingleValueDimensionVectorSelector selector = EasyMock.createMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher(\"any value\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(CURRENT_SIZE,anotherMatcher.getCurrentVectorSize())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.replay(selector)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expect(selector.lookupName(0)).andReturn(null).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "EasyMock.replay(selector)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "VectorValueMatcher anotherMatcher = matcherFactory.makeMatcher((String)null)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(CURRENT_SIZE,anotherBooleanMatcher.getCurrentVectorSize())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(VECTOR_SIZE,anotherMatcher.getMaxVectorSize())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(VECTOR_SIZE,matcher.getMaxVectorSize())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.verify(selector)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(anotherMatcher instanceof BooleanVectorValueMatcher)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
18->3 [style = bold, label=""];
3->10 [style = solid, label="selector"];
23->20 [style = bold, label=""];
3->4 [style = solid, label="selector"];
15->23 [style = dashed, label="0"];
31->23 [style = bold, label=""];
22->19 [style = solid, label="anotherBooleanMatcher"];
3->1 [style = bold, label=""];
5->9 [style = bold, label=""];
22->19 [style = bold, label=""];
3->11 [style = solid, label="selector"];
0->17 [style = bold, label=""];
12->14 [style = solid, label="anotherMatcher"];
9->28 [style = dashed, label="0"];
20->28 [style = bold, label=""];
3->17 [style = solid, label="selector"];
31->23 [style = solid, label="booleanMatcher"];
7->0 [style = bold, label=""];
13->25 [style = dashed, label="0"];
11->15 [style = solid, label="matcherFactory"];
30->29 [style = bold, label=""];
29->21 [style = bold, label=""];
15->5 [style = bold, label=""];
11->15 [style = bold, label=""];
5->20 [style = dashed, label="0"];
10->4 [style = solid, label="matcherFactory"];
0->10 [style = bold, label=""];
17->4 [style = solid, label="matcherFactory"];
15->31 [style = bold, label=""];
11->31 [style = dashed, label="0"];
11->15 [style = solid, label="matcher"];
19->27 [style = bold, label=""];
7->30 [style = dashed, label="0"];
25->26 [style = bold, label=""];
3->0 [style = solid, label="selector"];
12->14 [style = bold, label=""];
3->26 [style = solid, label="selector"];
10->17 [style = dashed, label="0"];
10->4 [style = bold, label=""];
12->22 [style = dashed, label="0"];
8->27 [style = dashed, label="0"];
14->19 [style = dashed, label="0"];
1->2 [style = bold, label=""];
14->8 [style = bold, label=""];
9->12 [style = bold, label=""];
3->6 [style = solid, label="selector"];
2->7 [style = bold, label=""];
13->6 [style = bold, label=""];
2->30 [style = bold, label=""];
4->11 [style = bold, label=""];
27->25 [style = bold, label=""];
24->3 [style = bold, label=""];
17->4 [style = bold, label=""];
28->22 [style = bold, label=""];
8->13 [style = bold, label=""];
21->4 [style = bold, label=""];
}
