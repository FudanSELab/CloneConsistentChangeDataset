digraph {
8 [style = filled, label = "assertFalse(fetcher.hasCompletedFetches())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(selected.id(),1)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(selected.id(),-1)@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "selected = fetcher.selectReadReplica(tp0,Node.noNode(),time.milliseconds())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "client.prepareResponse(fullFetchResponse(tp0,this.records,Errors.OFFSET_OUT_OF_RANGE,100L,FetchResponse.INVALID_LAST_STABLE_OFFSET,0,Optional.empty()))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testPreferredReadReplica['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "consumerClient.poll(time.timer(0))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "subscriptions.seek(tp0,0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertFalse(fetcher.hasCompletedFetches())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "client.prepareResponse(fullFetchResponse(tp0,this.records,Errors.NONE,100L,FetchResponse.INVALID_LAST_STABLE_OFFSET,0,Optional.of(1)))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "client.updateMetadata(RequestTestUtils.metadataUpdateWith(2,singletonMap(topicName,4),null))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "client.updateMetadata(RequestTestUtils.metadataUpdateWithIds(2,singletonMap(topicName,4),null,topicIds))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "consumerClient.poll(time.timer(0))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Node selected = fetcher.selectReadReplica(tp0,Node.noNode(),time.milliseconds())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(selected.id(),-1)@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(fetcher.hasCompletedFetches())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "selected = fetcher.selectReadReplica(tp0,Node.noNode(),time.milliseconds())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(1,fetcher.sendFetches())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testPreferredReadReplicaOffsetError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "buildFetcher(new MetricConfig(),OffsetResetStrategy.EARLIEST,new BytesDeserializer(),new BytesDeserializer(),Integer.MAX_VALUE,IsolationLevel.READ_COMMITTED,Duration.ofMinutes(5).toMillis())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(selected.id(),-1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "client.prepareResponse(fullFetchResponse(tp0,this.records,Errors.NONE,100L,FetchResponse.INVALID_LAST_STABLE_OFFSET,0,Optional.of(2)))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(fetcher.hasCompletedFetches())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Map<TopicPartition,List<ConsumerRecord<byte((,byte((>>> partitionRecords = fetchedRecords()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testPreferredReadReplica['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "subscriptions.assignFromUser(singleton(tp0))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "fetchedRecords()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Node selected = fetcher.selectReadReplica(tp0,Node.noNode(),time.milliseconds())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(partitionRecords.containsKey(tp0))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "fetchedRecords()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(1,fetcher.sendFetches())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
28->29 [style = bold, label=""];
10->18 [style = bold, label=""];
9->20 [style = dashed, label="0"];
1->8 [style = bold, label=""];
22->2 [style = bold, label=""];
4->17 [style = bold, label=""];
22->25 [style = dashed, label="0"];
20->9 [style = bold, label=""];
6->21 [style = bold, label=""];
26->1 [style = bold, label=""];
18->11 [style = bold, label=""];
27->3 [style = bold, label=""];
14->10 [style = bold, label=""];
16->25 [style = bold, label=""];
3->16 [style = bold, label=""];
11->19 [style = bold, label=""];
16->22 [style = bold, label=""];
30->6 [style = bold, label=""];
23->0 [style = bold, label=""];
25->2 [style = bold, label=""];
0->15 [style = bold, label=""];
12->7 [style = bold, label=""];
2->12 [style = bold, label=""];
9->6 [style = bold, label=""];
29->26 [style = bold, label=""];
7->14 [style = bold, label=""];
8->20 [style = bold, label=""];
19->23 [style = bold, label=""];
2->14 [style = bold, label=""];
17->13 [style = bold, label=""];
19->28 [style = bold, label=""];
20->30 [style = bold, label=""];
24->3 [style = bold, label=""];
21->4 [style = bold, label=""];
15->1 [style = bold, label=""];
}
