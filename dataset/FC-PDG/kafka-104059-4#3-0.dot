digraph {
10 [style = filled, label = "mockClient.prepareResponse(groupCoordinatorResponse(node,Errors.NONE))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(coordinator.hasValidMemberId())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(coordinator.hasMatchingGenerationId(defaultGeneration))@@@11@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "mockClient.prepareResponse(joinGroupFollowerResponse(generation,memberId,JoinGroupResponse.UNKNOWN_MEMBER_ID,Errors.UNKNOWN_MEMBER_ID))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertTrue(consumerClient.poll(future,mockTime.timer(REQUEST_TIMEOUT_MS)))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "future = coordinator.sendJoinGroupRequest()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(coordinator.rejoinNeededOrPending())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "mockClient.prepareResponse(joinGroupFollowerResponse(defaultGeneration,memberId,JoinGroupResponse.UNKNOWN_MEMBER_ID,Errors.UNKNOWN_MEMBER_ID))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertTrue(consumerClient.poll(future,mockTime.timer(REQUEST_TIMEOUT_MS)))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(Errors.UNKNOWN_MEMBER_ID.message(),future.exception().getMessage())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "setupCoordinator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertEquals(Errors.MEMBER_ID_REQUIRED.message(),future.exception().getMessage())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertTrue(consumerClient.poll(future,mockTime.timer(REBALANCE_TIMEOUT_MS)))@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(coordinator.hasMatchingGenerationId(generation))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(coordinator.rejoinNeededOrPending())@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "coordinator.ensureCoordinatorReady(mockTime.timer(0))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testJoinGroupRequestWithMemberIdRequired['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "mockClient.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){if (!(body instanceof JoinGroupRequest)) {return false}JoinGroupRequest joinGroupRequest = (JoinGroupRequest)bodyif (!joinGroupRequest.data().memberId().equals(memberId)) {return false}return true}},joinGroupResponse(Errors.UNKNOWN_MEMBER_ID))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(coordinator.hasMatchingGenerationId(generation))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertTrue(coordinator.rejoinNeededOrPending())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "mockClient.prepareResponse(joinGroupFollowerResponse(generation,memberId,JoinGroupResponse.UNKNOWN_MEMBER_ID,Errors.MEMBER_ID_REQUIRED))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testJoinGroupRequestWithGroupInstanceIdNotFound['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final String memberId = \"memberId\"@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testJoinGroupRequestWithGroupInstanceIdNotFound['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final int generation = -1@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->25 [style = bold, label=""];
8->4 [style = solid, label="memberId"];
23->20 [style = bold, label=""];
15->13 [style = bold, label=""];
2->3 [style = solid, label="future"];
9->18 [style = dashed, label="0"];
2->3 [style = bold, label=""];
8->23 [style = solid, label="memberId"];
11->9 [style = dashed, label="0"];
7->23 [style = solid, label="generation"];
21->24 [style = bold, label=""];
4->2 [style = bold, label=""];
7->4 [style = bold, label=""];
8->14 [style = dashed, label="0"];
16->22 [style = bold, label=""];
12->0 [style = bold, label=""];
24->18 [style = bold, label=""];
10->6 [style = bold, label=""];
8->7 [style = bold, label=""];
1->11 [style = bold, label=""];
20->21 [style = bold, label=""];
6->14 [style = bold, label=""];
3->9 [style = bold, label=""];
7->17 [style = solid, label="generation"];
26->0 [style = bold, label=""];
0->10 [style = bold, label=""];
21->24 [style = solid, label="future"];
25->19 [style = solid, label="future"];
5->0 [style = bold, label=""];
15->13 [style = solid, label="future"];
7->23 [style = bold, label=""];
6->8 [style = bold, label=""];
25->19 [style = bold, label=""];
7->4 [style = solid, label="generation"];
22->17 [style = bold, label=""];
7->11 [style = solid, label="generation"];
14->15 [style = bold, label=""];
9->1 [style = bold, label=""];
4->23 [style = dashed, label="0"];
13->2 [style = bold, label=""];
18->16 [style = bold, label=""];
}
