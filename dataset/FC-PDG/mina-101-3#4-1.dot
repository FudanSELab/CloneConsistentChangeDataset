digraph {
11 [style = filled, label = "final IoFutureListener<Boolean> listener = mock()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "MockAbstractIoFuture<Boolean> future = spy(new MockAbstractIoFuture<Boolean>())@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "future.setResult(true)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertFalse(future.isDone())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertFalse(future.isCancelled())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verify(listener,never()).completed(Matchers.any())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(future.isDone())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "future.setException(new NullPointerException())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertFalse(future.isCancelled())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testExceptionListenersExceptionAlreadySet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testSetListenersAlreadySet['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "verify(listener).completed(true)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "IoFutureListener<Boolean> listener = mock()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final MockAbstractIoFuture<Boolean> future = spy(new MockAbstractIoFuture<Boolean>())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "future.register(listener)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "verify(listener,never()).exception(Matchers.any())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "verify(listener).exception(argThat(matchesExecutionException()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testSetListenersAlreadySet['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9->0 [style = bold, label=""];
4->6 [style = bold, label=""];
7->17 [style = dashed, label="0"];
8->1 [style = solid, label="listener"];
4->15 [style = bold, label=""];
14->17 [style = bold, label=""];
16->2 [style = bold, label=""];
10->7 [style = bold, label=""];
13->11 [style = bold, label=""];
1->9 [style = bold, label=""];
6->1 [style = bold, label=""];
12->13 [style = bold, label=""];
11->5 [style = bold, label=""];
0->10 [style = bold, label=""];
0->14 [style = bold, label=""];
8->5 [style = bold, label=""];
3->2 [style = bold, label=""];
6->15 [style = dashed, label="0"];
2->13 [style = dashed, label="0"];
5->4 [style = bold, label=""];
8->11 [style = dashed, label="0"];
11->1 [style = solid, label="listener"];
10->14 [style = dashed, label="0"];
2->8 [style = bold, label=""];
15->1 [style = bold, label=""];
}
