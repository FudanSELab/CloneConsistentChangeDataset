digraph {
15 [style = filled, label = "subscriptions.assignFromUser(singleton(tp))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "builder.appendWithOffset((long)i * 3 + v,Record.NO_TIMESTAMP,\"key\".getBytes(),String.format(\"value-%d\",v).getBytes())@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricName(\"produce-throttle-time-max\",METRIC_GROUP,\"\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "client.respond(produceResponse(tp,offset,Errors.NONE.code(),100 * i))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<ConsumerRecord<byte((,byte((>> records = fetchRecords(builder.build(),Errors.NONE.code(),100L,100 * i).get(tp)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "v < 3@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Future<RecordMetadata> future = accumulator.append(tp,0L,\"key\".getBytes(),\"value\".getBytes(),null,MAX_BLOCK_TIMEOUT).future@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "int v = 0@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "sender.run(time.milliseconds())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "i < 4@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i <= 3@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricName(\"produce-throttle-time-avg\",METRIC_GROUP,\"\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "int i = 1@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(300,maxMetric.value(),EPS)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "v++@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "builder.appendWithOffset((long)i * 3 + v,Record.NO_TIMESTAMP,\"key\".getBytes(),String.format(\"value-%d\",v).getBytes())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertEquals(300,maxMetric.value(),EPSILON)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "sender.run(time.milliseconds())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final long offset = 0@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(3,records.size())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricName(\"fetch-throttle-time-max\",metricGroup,\"\"))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricName(\"fetch-throttle-time-avg\",metricGroup,\"\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "subscriptions.seek(tp,0)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(200,avgMetric.value(),EPSILON)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(200,avgMetric.value(),EPS)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "i++@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "List<ConsumerRecord<byte((,byte((>> records = fetchRecords(builder.build(),Errors.NONE,100L,100 * i).get(tp)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3->29 [style = dashed, label="0"];
17->10 [style = bold, label=""];
24->28 [style = bold, label=""];
13->0 [style = solid, label="i"];
12->0 [style = solid, label="v"];
6->24 [style = dotted, label="true"];
28->6 [style = bold, label=""];
29->4 [style = bold, label=""];
6->20 [style = solid, label="i"];
10->21 [style = dashed, label="0"];
16->20 [style = solid, label="v"];
25->27 [style = solid, label="offset"];
13->20 [style = solid, label="i"];
2->1 [style = bold, label=""];
6->23 [style = bold, label=""];
0->12 [style = bold, label=""];
6->13 [style = dotted, label="true"];
16->7 [style = bold, label=""];
28->6 [style = solid, label="i"];
22->29 [style = bold, label=""];
4->21 [style = bold, label=""];
11->22 [style = dashed, label="0"];
5->15 [style = bold, label=""];
30->25 [style = bold, label=""];
31->27 [style = solid, label="i"];
28->27 [style = solid, label="i"];
7->0 [style = bold, label=""];
7->20 [style = bold, label=""];
7->0 [style = dotted, label="true"];
2->18 [style = dotted, label="true"];
2->4 [style = bold, label=""];
6->13 [style = solid, label="i"];
12->7 [style = bold, label=""];
16->0 [style = solid, label="v"];
9->6 [style = bold, label=""];
7->12 [style = dotted, label="true"];
25->31 [style = bold, label=""];
7->14 [style = bold, label=""];
6->2 [style = bold, label=""];
6->0 [style = solid, label="i"];
16->12 [style = solid, label="v"];
12->7 [style = solid, label="v"];
7->20 [style = dotted, label="true"];
6->28 [style = dotted, label="true"];
26->27 [style = bold, label=""];
17->4 [style = dashed, label="0"];
6->26 [style = dotted, label="true"];
6->2 [style = solid, label="i"];
23->22 [style = bold, label=""];
13->2 [style = solid, label="i"];
31->6 [style = bold, label=""];
11->3 [style = bold, label=""];
13->26 [style = bold, label=""];
15->9 [style = bold, label=""];
1->16 [style = bold, label=""];
2->1 [style = dotted, label="true"];
2->7 [style = dotted, label="true"];
6->13 [style = bold, label=""];
16->7 [style = solid, label="v"];
20->12 [style = bold, label=""];
2->6 [style = dashed, label="0"];
7->18 [style = bold, label=""];
31->6 [style = solid, label="i"];
3->17 [style = bold, label=""];
2->14 [style = dotted, label="true"];
27->24 [style = bold, label=""];
14->8 [style = bold, label=""];
18->8 [style = bold, label=""];
6->27 [style = dotted, label="true"];
19->15 [style = bold, label=""];
12->20 [style = solid, label="v"];
4->11 [style = bold, label=""];
14->18 [style = dashed, label="0"];
2->13 [style = dotted, label="true"];
2->8 [style = dotted, label="true"];
8->13 [style = bold, label=""];
2->16 [style = dotted, label="true"];
13->2 [style = bold, label=""];
31->28 [style = solid, label="i"];
}
