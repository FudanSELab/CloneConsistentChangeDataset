digraph {
8 [style = filled, label = "Assert.assertEquals(38.0,value.getDoubleMetric(\"sketch_count\"),0.01)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(2.0,value2.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"),0.01)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(38.0,value.getDoubleMetric(\"sketchUnionPostAggEstimate\"),0.01)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(\"product_2\",value3.getDimensionValue(\"product\"))@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(0.0,value.getDoubleMetric(\"sketchAnotBPostAggEstimate\"),0.01)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(39.0,value1.getDoubleMetric(\"sketchUnionPostAggEstimate\"),0.01)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(38.0,value.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"),0.01)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(42.0,value2.getDoubleMetric(\"sketchEstimatePostAgg\"),0.01)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(2.0,value3.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"),0.01)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(\"product_3\",value.getDimensionValue(\"product\"))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(38.0,value1.getDoubleMetric(\"sketch_count\"),0.01)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Result<TopNResultValue> result = (Result<TopNResultValue>)Iterables.getOnlyElement(seq.toList())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(2.0,value2.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"),0.01)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(1.0,value1.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"),0.01)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "DimensionAndMetricValueExtractor value = Iterables.getOnlyElement(result.getValue().getValue())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(42.0,value3.getDoubleMetric(\"sketchEstimatePostAgg\"),0.01)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(38.0,value.getDoubleMetric(\"sketchEstimatePostAgg\"),0.01)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Sequence seq = topNQueryAggregationTestHelper.runQueryOnSegments(ImmutableList.of(s1,s2),(Query)SketchAggregationTest.readQueryFromClasspath(\"topn_query.json\",topNQueryAggregationTestHelper.getObjectMapper(),vectorize))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "Assert.assertEquals(2.0,value1.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"),0.01)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testSimpleDataIngestAndTopNQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "DimensionAndMetricValueExtractor value1 = Iterables.get(result.getValue().getValue(),0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Sequence seq = topNQueryAggregationTestHelper.runQueryOnSegments(ImmutableList.of(s1,s2),readFileFromClasspathAsString(\"topn_query.json\"))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(0.0,value.getDoubleMetric(\"non_existing_col_validation\"),0.01)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(DateTimes.of(\"2014-10-20T00:00:00.000Z\"),result.getTimestamp())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(42.0,value3.getDoubleMetric(\"sketch_count\"),0.01)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(42.0,value2.getDoubleMetric(\"sketch_count\"),0.01)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(42.0,value3.getDoubleMetric(\"sketchUnionPostAggEstimate\"),0.01)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(38.0,value1.getDoubleMetric(\"sketchEstimatePostAgg\"),0.01)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testSimpleDataIngestAndTopNQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(\"product_1\",value2.getDimensionValue(\"product\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(\"product_3\",value1.getDimensionValue(\"product\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "DimensionAndMetricValueExtractor value3 = Iterables.get(result.getValue().getValue(),2)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(42.0,value2.getDoubleMetric(\"sketchUnionPostAggEstimate\"),0.01)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(40.0,value2.getDoubleMetric(\"sketchAnotBPostAggEstimate\"),0.01)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(40.0,value3.getDoubleMetric(\"sketchAnotBPostAggEstimate\"),0.01)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "DimensionAndMetricValueExtractor value2 = Iterables.get(result.getValue().getValue(),1)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Sequence seq = topNQueryAggregationTestHelper.runQueryOnSegments(ImmutableList.of(s1,s2),readFileFromClasspathAsString(\"topn_query_sketch_const.json\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(37.0,value1.getDoubleMetric(\"sketchAnotBPostAggEstimate\"),0.01)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "AggregationTestHelper topNQueryAggregationTestHelper = AggregationTestHelper.createTopNQueryAggregationTestHelper(sm.getJacksonModules(),tempFolder)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(2.0,value3.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"),0.01)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testTopNQueryWithSketchConstant['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
39->37 [style = bold, label=""];
14->3 [style = bold, label=""];
6->3 [style = bold, label=""];
34->29 [style = bold, label=""];
16->3 [style = bold, label=""];
10->20 [style = bold, label=""];
27->36 [style = bold, label=""];
36->40 [style = bold, label=""];
25->28 [style = bold, label=""];
5->9 [style = bold, label=""];
35->15 [style = bold, label=""];
7->12 [style = bold, label=""];
29->39 [style = bold, label=""];
15->21 [style = bold, label=""];
2->1 [style = bold, label=""];
18->34 [style = bold, label=""];
9->18 [style = dashed, label="0"];
40->25 [style = bold, label=""];
21->24 [style = bold, label=""];
37->23 [style = bold, label=""];
3->22 [style = bold, label=""];
0->20 [style = dashed, label="0"];
32->33 [style = bold, label=""];
13->1 [style = bold, label=""];
8->7 [style = bold, label=""];
38->32 [style = bold, label=""];
20->27 [style = bold, label=""];
26->38 [style = bold, label=""];
4->25 [style = dashed, label="0"];
11->28 [style = dashed, label="0"];
24->26 [style = bold, label=""];
11->5 [style = bold, label=""];
5->17 [style = dashed, label="0"];
3->2 [style = bold, label=""];
12->4 [style = bold, label=""];
12->40 [style = dashed, label="0"];
2->13 [style = dashed, label="0"];
23->19 [style = bold, label=""];
19->35 [style = bold, label=""];
10->0 [style = bold, label=""];
31->30 [style = bold, label=""];
0->8 [style = bold, label=""];
3->13 [style = bold, label=""];
28->17 [style = bold, label=""];
33->31 [style = bold, label=""];
8->27 [style = dashed, label="0"];
22->1 [style = bold, label=""];
4->11 [style = bold, label=""];
1->10 [style = bold, label=""];
2->22 [style = dashed, label="0"];
7->36 [style = dashed, label="0"];
17->18 [style = bold, label=""];
}
