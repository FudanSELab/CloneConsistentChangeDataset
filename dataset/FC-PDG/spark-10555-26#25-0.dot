digraph {
15 [style = filled, label = "memoryManager = new TestMemoryManager(new SparkConf().set(\"spark.memory.offHeap.enabled\",\"\" + useOffHeapMemoryAllocator()).set(\"spark.memory.offHeap.size\",\"256mb\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "spillFilesCreated.clear()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(blockManager.wrapForCompression(any(),any())).then(returnsSecondArg())@@@25@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "setUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(blockManager.getDiskWriter(any(),any(),any(),anyInt(),any())).thenAnswer(new Answer<DiskBlockObjectWriter>(){@Override public DiskBlockObjectWriter answer(InvocationOnMock invocationOnMock){Object(( args = invocationOnMock.getArguments()return new DiskBlockObjectWriter((File)args(1(,(SerializerInstance)args(2(,(Integer)args(3(,new CompressStream(),false,(ShuffleWriteMetrics)args(4(,(BlockId)args(0()}})@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "setup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "when(diskBlockManager.createTempLocalBlock()).thenAnswer(new Answer<Tuple2<TempLocalBlockId,File>>(){@Override public Tuple2<TempLocalBlockId,File> answer(InvocationOnMock invocationOnMock){TempLocalBlockId blockId = new TempLocalBlockId(UUID.randomUUID())File file = File.createTempFile(\"spillFile\",\".spill\",tempDir)spillFilesCreated.add(file)return Tuple2$.MODULE$.apply(blockId,file)}})@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "setUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "tempDir = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"),\"unsafe-test\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "tempDir = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"),\"unsafe-test\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "MockitoAnnotations.initMocks(this)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "taskMemoryManager = new TaskMemoryManager(memoryManager,0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(blockManager.diskBlockManager()).thenReturn(diskBlockManager)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(blockManager.diskBlockManager()).thenReturn(diskBlockManager)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "MockitoAnnotations.initMocks(this)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(taskContext.taskMetrics()).thenReturn(new TaskMetrics())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->11 [style = solid, label="memoryManager"];
6->0 [style = bold, label=""];
4->13 [style = bold, label=""];
4->6 [style = bold, label=""];
13->12 [style = bold, label=""];
12->5 [style = bold, label=""];
7->1 [style = bold, label=""];
8->5 [style = solid, label="tempDir"];
11->9 [style = bold, label=""];
0->5 [style = bold, label=""];
5->7 [style = bold, label=""];
8->9 [style = bold, label=""];
15->11 [style = bold, label=""];
14->15 [style = bold, label=""];
9->4 [style = bold, label=""];
3->8 [style = bold, label=""];
10->3 [style = bold, label=""];
9->5 [style = solid, label="tempDir"];
2->3 [style = bold, label=""];
}
