digraph {
13 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),0,0)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "ArrayDeque<Object> expectedOutput = new ArrayDeque<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(testHarness.getOutput(),contains(expectedOutput.toArray()))@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),0,1)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expectedOutput.add(new CancelCheckpointMarker(0))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"1.0\",initialTime))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testOvertakingCheckpointBarriers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(testHarness.getOutput(),contains(expectedOutput.toArray()))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Witam-0-1\",initialTime),0,1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Ciao-0-0\",initialTime),0,0)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),1,1)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),2,0)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,0)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(testHarness.getOutput(),contains(expectedOutput.toArray()))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"42\",initialTime))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testOvertakingCheckpointBarriers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),1,0)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testHarness.processElement(new StreamRecord<>(1.0d,initialTime),2,0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),2,0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Hello-0-0\",initialTime),0,0)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertThat(testHarness.getOutput(),contains(expectedOutput.toArray()))@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Ciao-0-0\",initialTime))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Hello-0-0\",initialTime))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,1)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "long initialTime = 0L@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testHarness.processElement(new StreamRecord<>(11,initialTime),1,1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),0,0)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Ciao-0-0\",initialTime))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"11\",initialTime))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),2,1)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Witam-0-1\",initialTime))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testHarness.waitForTaskCompletion()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Ciao-0-0\",initialTime),0,1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Hello-0-0\",initialTime))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),2,1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testHarness.processElement(new StreamRecord<>(1.0d,initialTime),2,1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testCheckpointBarriers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testHarness.processElement(new StreamRecord<>(42,initialTime),1,1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,1)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31->14 [style = bold, label=""];
0->3 [style = bold, label=""];
29->34 [style = dashed, label="0"];
23->5 [style = bold, label=""];
14->30 [style = bold, label=""];
28->37 [style = dashed, label="0"];
5->33 [style = bold, label=""];
6->22 [style = bold, label=""];
15->21 [style = bold, label=""];
11->6 [style = bold, label=""];
30->23 [style = bold, label=""];
30->5 [style = solid, label="initialTime"];
39->14 [style = bold, label=""];
28->26 [style = bold, label=""];
30->26 [style = solid, label="initialTime"];
5->18 [style = bold, label=""];
38->41 [style = bold, label=""];
41->11 [style = bold, label=""];
26->35 [style = dashed, label="0"];
27->16 [style = bold, label=""];
16->19 [style = bold, label=""];
9->8 [style = bold, label=""];
30->12 [style = solid, label="initialTime"];
8->40 [style = bold, label=""];
10->7 [style = bold, label=""];
30->35 [style = solid, label="initialTime"];
30->40 [style = solid, label="initialTime"];
2->12 [style = bold, label=""];
19->0 [style = bold, label=""];
30->21 [style = solid, label="initialTime"];
20->22 [style = bold, label=""];
24->14 [style = bold, label=""];
30->37 [style = solid, label="initialTime"];
29->28 [style = bold, label=""];
23->29 [style = bold, label=""];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
15->38 [style = dashed, label="0"];
6->27 [style = bold, label=""];
30->28 [style = solid, label="initialTime"];
18->29 [style = bold, label=""];
30->34 [style = solid, label="initialTime"];
13->27 [style = bold, label=""];
17->2 [style = bold, label=""];
12->4 [style = bold, label=""];
21->11 [style = bold, label=""];
34->37 [style = bold, label=""];
40->36 [style = bold, label=""];
30->41 [style = solid, label="initialTime"];
6->13 [style = bold, label=""];
26->15 [style = bold, label=""];
4->20 [style = bold, label=""];
22->10 [style = bold, label=""];
3->17 [style = bold, label=""];
35->38 [style = bold, label=""];
37->35 [style = bold, label=""];
30->18 [style = solid, label="initialTime"];
30->2 [style = solid, label="initialTime"];
30->38 [style = solid, label="initialTime"];
3->32 [style = bold, label=""];
30->29 [style = solid, label="initialTime"];
33->34 [style = bold, label=""];
1->25 [style = bold, label=""];
32->17 [style = bold, label=""];
30->33 [style = solid, label="initialTime"];
17->4 [style = bold, label=""];
18->33 [style = dashed, label="0"];
30->15 [style = solid, label="initialTime"];
30->11 [style = solid, label="initialTime"];
}
