digraph {
6 [style = filled, label = "LongSumAggregator aggr = new LongSumAggregator()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "IterativeDataSet<Integer> iteration = initialSolutionSet.iterate(MAX_ITERATIONS)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expected = \"-3\" + \"-2\" + \"-2\" + \"-1\" + \"-1\" + \"-1\" + \"0\" + \"0\" + \"0\" + \"0\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testAggregatorWithoutParameterForIterate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "DataSet<Integer> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(expected,result)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Collections.sort(result)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "env.execute()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "iteration.registerAggregationConvergenceCriterion(NEGATIVE_ELEMENTS_AGGR,aggr,new NegativeElementsConvergenceCriterion())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "env.setParallelism(parallelism)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testAggregatorWithoutParameterForIterate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "DataSet<Integer> updatedDs = iteration.map(new SubtractOneMap())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "iteration.closeWith(updatedDs).writeAsText(resultPath)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "iteration.registerAggregationConvergenceCriterion(NEGATIVE_ELEMENTS_AGGR,aggr,new NegativeElementsConvergenceCriterionWithParam(3))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "iteration.registerAggregator(NEGATIVE_ELEMENTS_AGGR,aggr)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testConvergenceCriterionWithParameterForIterate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "List<Integer> result = iteration.closeWith(updatedDs).collect()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "List<Integer> expected = Arrays.asList(-3,-2,-2,-1,-1,-1,0,0,0,0,1,1,1,1,1)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4->18 [style = dashed, label="0"];
0->9 [style = bold, label=""];
16->13 [style = bold, label=""];
17->1 [style = bold, label=""];
3->1 [style = bold, label=""];
7->10 [style = bold, label=""];
7->12 [style = bold, label=""];
6->5 [style = solid, label="aggr"];
10->12 [style = dashed, label="0"];
12->16 [style = bold, label=""];
5->18 [style = bold, label=""];
4->7 [style = bold, label=""];
9->6 [style = bold, label=""];
6->5 [style = bold, label=""];
2->0 [style = bold, label=""];
12->16 [style = solid, label="result"];
6->4 [style = solid, label="aggr"];
1->0 [style = solid, label="env"];
10->8 [style = bold, label=""];
12->14 [style = solid, label="result"];
13->14 [style = solid, label="expected"];
5->4 [style = bold, label=""];
6->18 [style = solid, label="aggr"];
1->2 [style = bold, label=""];
18->7 [style = bold, label=""];
8->11 [style = bold, label=""];
13->14 [style = bold, label=""];
15->1 [style = bold, label=""];
}
