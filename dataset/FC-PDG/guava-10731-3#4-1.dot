digraph {
8 [style = filled, label = "assertThat(graph.adjacentNodes(N1)).containsExactly(N1)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "putEdge_allowsSelfLoops['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "putEdge_allowsSelfLoops['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assume().that(graph.allowsSelfLoops()).isTrue()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(graph.predecessors(N1)).containsExactly(N1)@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assume().that(graphIsMutable()).isTrue()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(graph.successors(N1)).containsExactly(N1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "putEdge_allowsSelfLoops['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(graphAsMutableGraph.putEdge(N1,N1)).isTrue()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assume().that(allowsSelfLoops()).isTrue()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
4->8 [style = bold, label=""];
6->4 [style = bold, label=""];
1->6 [style = bold, label=""];
7->1 [style = bold, label=""];
4->2 [style = bold, label=""];
5->6 [style = dashed, label="0"];
9->1 [style = bold, label=""];
2->8 [style = dashed, label="0"];
0->1 [style = bold, label=""];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
}
