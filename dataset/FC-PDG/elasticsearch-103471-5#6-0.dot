digraph {
14 [style = filled, label = "DisjunctionMaxQuery bQuery = (DisjunctionMaxQuery)query@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery)query@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(assertDisjunctionSubQuery(query,,0).getTerm(),equalTo(new Term(STRING_FIELD_NAME,\"test\")))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testToQueryMultipleFieldsDisableDismax['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Query query = multiMatchQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).tieBreaker(1.0f).toQuery(createShardContext())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testToQueryMultipleFieldsDisableDismax['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testToQueryMultipleFieldsBooleanQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(bQuery.getDisjuncts().size(),equalTo(2))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Query query = multiMatchQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).useDisMax(false).toQuery(createShardContext())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertThat(dQuery.getTieBreakerMultiplier(),equalTo(1.0f))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(assertDisjunctionSubQuery(query,,1).getTerm(),equalTo(new Term(STRING_FIELD_NAME_2,\"test\")))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(query,instanceOf())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(assertDisjunctionSubQuery(query,,1).getTerm(),equalTo(new Term(STRING_FIELD_NAME_2,\"test\")))@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Query query = queryStringQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).toQuery(createShardContext())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(dQuery.getDisjuncts().size(),equalTo(2))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->0 [style = solid, label="query"];
11->6 [style = bold, label=""];
0->2 [style = bold, label=""];
7->8 [style = dashed, label="0"];
7->0 [style = bold, label=""];
9->8 [style = bold, label=""];
12->0 [style = bold, label=""];
13->11 [style = bold, label=""];
8->2 [style = solid, label="query"];
8->0 [style = bold, label=""];
12->0 [style = solid, label="query"];
5->1 [style = bold, label=""];
7->2 [style = solid, label="query"];
6->4 [style = bold, label=""];
0->14 [style = bold, label=""];
1->6 [style = bold, label=""];
12->14 [style = solid, label="query"];
2->14 [style = dashed, label="0"];
3->7 [style = bold, label=""];
10->12 [style = bold, label=""];
7->12 [style = dashed, label="0"];
14->13 [style = bold, label=""];
7->0 [style = solid, label="query"];
2->5 [style = bold, label=""];
}
