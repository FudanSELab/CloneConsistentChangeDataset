digraph {
9 [style = filled, label = "Assert.assertNull(result.value())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testNullSearchOnNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "expectException(,\"Function(regexp_extract( pattern must be a string literal\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(ExprEval.ofBoolean(true,ExprType.LONG).value(),result.value())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testNullPatternOnNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final ExprEval<?> result = eval(\"icontains_string(a, null)\",Parser.withSuppliers(ImmutableMap.of(\"a\",null)))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "NullHandling.sqlCompatible()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectException(,\"Function(icontains_string( substring must be a string literal\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final ExprEval<?> result = eval(\"regexp_extract(a, null)\",Parser.withSuppliers(ImmutableMap.of(\"a\",null)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(ExprEval.of(true,ExprType.LONG).value(),result.value())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "final ExprEval<?> result = eval(\"icontains_string(a, null)\",InputBindings.withSuppliers(ImmutableMap.of(\"a\",null)))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testNullSearchOnNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
3->5 [style = dashed, label="0"];
1->8 [style = dashed, label="0"];
6->5 [style = bold, label=""];
2->0 [style = bold, label=""];
2->0 [style = dotted, label="true"];
4->2 [style = bold, label=""];
10->8 [style = bold, label=""];
0->10 [style = dashed, label="0"];
2->10 [style = bold, label=""];
11->2 [style = bold, label=""];
0->6 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
2->1 [style = bold, label=""];
2->6 [style = bold, label=""];
1->6 [style = dashed, label="0"];
2->8 [style = bold, label=""];
2->10 [style = dotted, label="true"];
8->9 [style = bold, label=""];
}
