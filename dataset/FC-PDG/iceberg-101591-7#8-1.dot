digraph {
22 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.EXTERNAL_TABLE_PURGE + \"'='FALSE', \" + \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf(),tableProperties)@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testCreateDropTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(PartitionSpec.unpartitioned(),icebergTable.spec())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA.asStruct(),icebergTable.schema().asStruct())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "fs.exists(hmsTableLocation)@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"', \" + \"'dummy'='test', \" + \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testTables.loadTable(identifier)@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf(),tableProperties)@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testCreateDropTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\",\"customers\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "hmsTable.getParameters().entrySet().stream().filter(null).forEach(null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(0,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TableIdentifier identifier = TableIdentifier.of(\"default\",\"customers\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Properties tableProperties = new Properties()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"', \" + \"'dummy'='test', \" + \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + testTables.catalogName() + \"')\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "testDeleteBackingTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
21->10 [style = bold, label=""];
23->25 [style = bold, label=""];
30->25 [style = solid, label="hmsTableLocation"];
1->22 [style = solid, label="identifier"];
18->16 [style = dotted, label="false"];
30->23 [style = solid, label="hmsTableLocation"];
9->0 [style = bold, label=""];
18->11 [style = dotted, label="false"];
10->30 [style = dotted, label="false"];
10->25 [style = dotted, label="false"];
26->1 [style = bold, label=""];
14->11 [style = solid, label="hmsTableLocation"];
11->4 [style = bold, label=""];
4->8 [style = dotted, label="true"];
4->7 [style = dotted, label="true"];
10->3 [style = dotted, label="true"];
10->3 [style = bold, label=""];
14->4 [style = solid, label="hmsTableLocation"];
5->18 [style = bold, label=""];
24->29 [style = bold, label=""];
20->1 [style = bold, label=""];
16->2 [style = bold, label=""];
7->8 [style = bold, label=""];
12->1 [style = bold, label=""];
10->5 [style = dotted, label="true"];
29->21 [style = bold, label=""];
4->7 [style = bold, label=""];
6->15 [style = bold, label=""];
6->22 [style = dashed, label="0"];
1->22 [style = bold, label=""];
25->27 [style = bold, label=""];
13->17 [style = bold, label=""];
18->4 [style = dotted, label="false"];
3->5 [style = bold, label=""];
0->10 [style = bold, label=""];
1->6 [style = bold, label=""];
1->6 [style = solid, label="identifier"];
18->2 [style = dotted, label="false"];
10->27 [style = dotted, label="false"];
1->19 [style = solid, label="identifier"];
15->9 [style = bold, label=""];
30->31 [style = bold, label=""];
28->23 [style = bold, label=""];
30->27 [style = solid, label="hmsTableLocation"];
10->31 [style = dotted, label="false"];
14->8 [style = solid, label="hmsTableLocation"];
6->19 [style = dashed, label="0"];
18->13 [style = bold, label=""];
8->27 [style = dashed, label="0"];
1->5 [style = solid, label="identifier"];
18->17 [style = dotted, label="true"];
14->7 [style = solid, label="hmsTableLocation"];
22->24 [style = bold, label=""];
31->28 [style = bold, label=""];
19->15 [style = bold, label=""];
1->19 [style = bold, label=""];
1->15 [style = solid, label="identifier"];
18->14 [style = bold, label=""];
2->11 [style = bold, label=""];
10->30 [style = bold, label=""];
18->14 [style = dotted, label="false"];
10->23 [style = dotted, label="false"];
18->13 [style = dotted, label="true"];
10->28 [style = dotted, label="false"];
}
