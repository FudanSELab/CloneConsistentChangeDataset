digraph {
3 [style = filled, label = "int jitterMs = 2500@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(Utils.mkSet(node1,node2),resignedState.unackedVoters())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(election,candidateState.election())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(epoch,resignedState.epoch())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertFalse(state.isLeader())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(Utils.mkSet(localId),candidateState.grantingVoters())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(epoch,candidateState.epoch())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(election,resignedState.election())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Mockito.doReturn(jitterMs).when(random).nextInt(Mockito.anyInt())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ElectionState election = ElectionState.withVotedCandidate(epoch,localId,voters)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testInitializeAsResignedCandidate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Set<Integer> voters = Utils.mkSet(localId,node1,node2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "CandidateState candidateState = state.candidateStateOrThrow()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "store.writeElectionState(election)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testInitializeAsResignedLeader['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "QuorumState state = buildQuorumState(voters)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int node2 = 2@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(state.isCandidate())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int epoch = 5@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(electionTimeoutMs + jitterMs,candidateState.remainingElectionTimeMs(time.milliseconds()))@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testInitializeAsResignedCandidate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertEquals(electionTimeoutMs + jitterMs,resignedState.remainingElectionTimeMs(time.milliseconds()))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(Collections.emptySet(),candidateState.rejectingVoters())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(Utils.mkSet(node1,node2),candidateState.unrecordedVoters())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "state.initialize(new OffsetAndEpoch(0L,logEndEpoch))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(epoch,state.epoch())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "ResignedState resignedState = state.resignedStateOrThrow()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "int node1 = 1@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "random.mockNextInt(jitterMs)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "ElectionState election = ElectionState.withElectedLeader(epoch,localId,voters)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->25 [style = solid, label="voters"];
16->3 [style = bold, label=""];
10->28 [style = solid, label="epoch"];
25->16 [style = solid, label="election"];
22->15 [style = bold, label=""];
6->17 [style = solid, label="node2"];
5->9 [style = bold, label=""];
14->28 [style = dashed, label="0"];
17->24 [style = dashed, label="0"];
0->2 [style = bold, label=""];
12->17 [style = bold, label=""];
29->9 [style = bold, label=""];
2->16 [style = solid, label="election"];
15->19 [style = bold, label=""];
3->23 [style = solid, label="jitterMs"];
25->16 [style = bold, label=""];
25->27 [style = solid, label="election"];
3->4 [style = bold, label=""];
1->13 [style = bold, label=""];
9->17 [style = solid, label="node1"];
8->7 [style = bold, label=""];
9->6 [style = bold, label=""];
8->22 [style = bold, label=""];
15->26 [style = bold, label=""];
10->2 [style = solid, label="epoch"];
10->25 [style = solid, label="epoch"];
3->13 [style = solid, label="jitterMs"];
3->20 [style = bold, label=""];
21->9 [style = bold, label=""];
0->11 [style = solid, label="voters"];
19->14 [style = bold, label=""];
19->26 [style = dashed, label="0"];
18->1 [style = bold, label=""];
0->25 [style = bold, label=""];
0->2 [style = solid, label="voters"];
18->23 [style = dashed, label="0"];
6->24 [style = solid, label="node2"];
6->10 [style = bold, label=""];
14->12 [style = bold, label=""];
10->0 [style = bold, label=""];
12->27 [style = dashed, label="0"];
2->25 [style = dashed, label="0"];
2->12 [style = solid, label="election"];
11->8 [style = bold, label=""];
7->15 [style = bold, label=""];
27->24 [style = bold, label=""];
10->14 [style = solid, label="epoch"];
26->28 [style = bold, label=""];
28->27 [style = bold, label=""];
9->0 [style = solid, label="node1"];
9->24 [style = solid, label="node1"];
4->11 [style = bold, label=""];
6->0 [style = solid, label="node2"];
10->15 [style = solid, label="epoch"];
7->22 [style = dashed, label="0"];
17->18 [style = bold, label=""];
3->20 [style = solid, label="jitterMs"];
20->11 [style = bold, label=""];
24->23 [style = bold, label=""];
2->16 [style = bold, label=""];
}
