digraph {
3 [style = filled, label = "testExpressionInWindowFunction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "hepPlanner.addRule(ProjectToWindowRule.PROJECT)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "builder.addRuleClass()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "sql(sql).with(hepPlanner).check()@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testExpressionInWindowFunction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "HepProgramBuilder builder = new HepProgramBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final String sql = \"select count(*) over (w), count(*) over w\" + \"from emp\" + \"window w as (partition by empno order by empno)\"@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final String sql = \"select\" + \" sum(deptno) over(partition by deptno order by sal) as sum1,\" + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\" + \"from emp\"@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "HepPlanner hepPlanner = new HepPlanner(builder.build())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testWindowInParenthesis['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8->1 [style = bold, label=""];
6->4 [style = bold, label=""];
7->1 [style = bold, label=""];
4->2 [style = bold, label=""];
1->0 [style = bold, label=""];
5->6 [style = bold, label=""];
6->9 [style = bold, label=""];
3->1 [style = bold, label=""];
9->2 [style = bold, label=""];
0->5 [style = bold, label=""];
}
