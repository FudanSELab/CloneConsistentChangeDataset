digraph {
29 [style = filled, label = "((RexCall)a).getOperands()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "return null@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Strong.policy(a.getKind())@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final RexNode simplified = simplifyIsNotNull(operand)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return RexUtil.composeConjunction(rexBuilder,operands,false)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "RexNode operand@@@12@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "a.getKind()@@@25@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "return null@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "simplifyIsNotNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "RexUtil.isNull(a)@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "operands.add(simplified)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "RexNode a@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "simplified == null@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "!a.getType().isNullable()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "RexNode a@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "simplified.isAlwaysFalse()@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "return RexUtil.composeConjunction(rexBuilder,operands)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "RexNode operand@@@12@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL,operand))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "return RexUtil.composeDisjunction(rexBuilder,operands,false)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final RexNode simplified = simplifyIsNull(operand)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final List<RexNode> operands = new ArrayList<>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "simplifyIsNotNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "predicates.pulledUpPredicates.contains(a)@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "simplifyIsNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "throw new AssertionError(\"every CUSTOM policy needs a handler, \" + a.getKind())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "((RexCall)a).getOperands()@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL,operand))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return rexBuilder.makeLiteral(!((RexLiteral)a).isNull())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->32 [style = bold, label=""];
8->33 [style = dashed, label="0"];
15->3 [style = solid, label="simplified"];
0->25 [style = dotted, label="true"];
4->33 [style = dotted, label="true"];
13->1 [style = bold, label=""];
9->6 [style = bold, label=""];
0->31 [style = dotted, label="true"];
22->4 [style = bold, label=""];
32->13 [style = solid, label="simplified"];
0->21 [style = dotted, label="true"];
3->19 [style = bold, label=""];
0->25 [style = bold, label=""];
0->24 [style = dotted, label="true"];
27->17 [style = bold, label=""];
9->14 [style = bold, label=""];
4->8 [style = bold, label=""];
7->1 [style = solid, label="operands"];
0->3 [style = dotted, label="true"];
13->31 [style = bold, label=""];
32->3 [style = bold, label=""];
3->30 [style = bold, label=""];
0->11 [style = dotted, label="true"];
20->15 [style = bold, label=""];
0->7 [style = dotted, label="true"];
12->17 [style = dotted, label="true"];
19->18 [style = bold, label=""];
13->32 [style = bold, label=""];
34->27 [style = solid, label="a"];
27->0 [style = bold, label=""];
0->10 [style = dotted, label="true"];
1->31 [style = dashed, label="0"];
18->15 [style = bold, label=""];
3->30 [style = dotted, label="true"];
0->21 [style = bold, label=""];
25->7 [style = bold, label=""];
2->4 [style = bold, label=""];
33->27 [style = bold, label=""];
5->34 [style = dashed, label="0"];
0->7 [style = bold, label=""];
7->23 [style = solid, label="operands"];
19->13 [style = bold, label=""];
20->23 [style = bold, label=""];
18->1 [style = bold, label=""];
13->15 [style = bold, label=""];
0->26 [style = dotted, label="true"];
28->34 [style = dotted, label="true"];
14->6 [style = bold, label=""];
18->23 [style = bold, label=""];
6->21 [style = bold, label=""];
12->17 [style = bold, label=""];
19->18 [style = dotted, label="true"];
0->11 [style = bold, label=""];
15->32 [style = dashed, label="0"];
30->32 [style = bold, label=""];
20->1 [style = bold, label=""];
4->33 [style = bold, label=""];
15->3 [style = bold, label=""];
1->9 [style = bold, label=""];
7->31 [style = solid, label="operands"];
22->5 [style = dotted, label="true"];
31->26 [style = bold, label=""];
17->0 [style = bold, label=""];
30->31 [style = bold, label=""];
20->30 [style = dashed, label="0"];
11->25 [style = dashed, label="0"];
4->12 [style = bold, label=""];
7->15 [style = bold, label=""];
0->23 [style = dotted, label="true"];
0->16 [style = dotted, label="true"];
0->32 [style = dotted, label="true"];
27->17 [style = dotted, label="true"];
2->5 [style = dotted, label="true"];
0->9 [style = dotted, label="true"];
3->13 [style = dotted, label="false"];
1->23 [style = dashed, label="0"];
8->12 [style = bold, label=""];
32->3 [style = solid, label="simplified"];
0->1 [style = dotted, label="true"];
0->9 [style = bold, label=""];
0->26 [style = bold, label=""];
0->15 [style = dotted, label="true"];
15->13 [style = solid, label="simplified"];
4->8 [style = dotted, label="true"];
19->13 [style = dotted, label="false"];
9->6 [style = dotted, label="true"];
12->0 [style = bold, label=""];
9->14 [style = dotted, label="true"];
0->29 [style = dotted, label="true"];
3->20 [style = bold, label=""];
3->19 [style = dotted, label="false"];
4->27 [style = bold, label=""];
13->23 [style = bold, label=""];
3->13 [style = bold, label=""];
23->9 [style = bold, label=""];
11->7 [style = bold, label=""];
5->12 [style = solid, label="a"];
28->4 [style = bold, label=""];
3->20 [style = dotted, label="true"];
}
