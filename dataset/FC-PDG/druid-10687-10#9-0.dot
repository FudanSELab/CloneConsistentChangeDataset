digraph {
11 [style = filled, label = "Assert.assertTrue(infoDir.delete())@@@47@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "i < COUNT@@@29@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(3L,segmentManager.getDataSourceCounts().get(\"test\" + i).longValue())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"1\",Intervals.of(\"P1d/2011-04-01\")))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"1\",Intervals.of(\"P1d/2011-04-02\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "segments.add(makeSegment(\"test_two\" + i,\"1\",Intervals.of(\"P1d/2011-04-01\")))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"2\",Intervals.of(\"PT1h/2011-04-04T06\")))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(5 * COUNT,announceCount.get())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "deleteSegmentFromCache(segment)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testStartStop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "segments.add(makeSegment(\"test_two\" + i,\"1\",Intervals.of(\"P1d/2011-04-01\")))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(2L,segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "deleteSegmentFromCache(segment)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i < COUNT@@@36@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(2L,segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "segmentLoadDropHandler.start()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"2\",Intervals.of(\"PT1h/2011-04-04T02\")))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "int i = 0@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"2\",Intervals.of(\"PT1h/2011-04-04T03\")))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"1\",Intervals.of(\"P1d/2011-04-02\")))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"2\",Intervals.of(\"PT1h/2011-04-04T01\")))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "i < COUNT@@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "++i@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "int i = 0@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"1\",Intervals.of(\"P1d/2011-04-04\")))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(13 * COUNT,announceCount.get())@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testLoadCache['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"1\",Intervals.of(\"P1d/2011-04-03\")))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testStartStop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "SegmentLoadDropHandler handler = new SegmentLoadDropHandler(jsonMapper,new SegmentLoaderConfig(){@Override public File getInfoDir(){return infoDir}@Override public int getNumLoadingThreads(){return 5}@Override public List<StorageLocationConfig> getLocations(){return locations}@Override public int getAnnounceIntervalMillis(){return 50}},announcer,Mockito.mock(),segmentManager,new ServerTypeConfig(ServerType.HISTORICAL))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(0,infoDir.listFiles().length)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"2\",Intervals.of(\"P1d/2011-04-02\")))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "writeSegmentToCache(segment)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "checkCache(segments)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "segments.add(makeSegment(\"test_two\" + i,\"1\",Intervals.of(\"P1d/2011-04-02\")))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(11L,segmentManager.getDataSourceCounts().get(\"test\" + i).longValue())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "handler.start()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "++i@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "i < COUNT@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(0,infoDir.listFiles().length)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Set<DataSegment> segments = new HashSet<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "segmentLoadDropHandler.stop()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"2\",Intervals.of(\"PT1h/2011-04-04T05\")))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "++i@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "handler.stop()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "++i@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "int i = 0@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(infoDir.delete())@@@40@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"1\",Intervals.of(\"P1d/2011-04-05\")))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51->48 [style = bold, label=""];
46->40 [style = dotted, label="true"];
21->8 [style = solid, label="i"];
15->13 [style = solid, label="i"];
39->5 [style = bold, label=""];
19->8 [style = bold, label=""];
40->28 [style = bold, label=""];
38->41 [style = bold, label=""];
32->12 [style = solid, label="segments"];
0->25 [style = bold, label=""];
12->23 [style = bold, label=""];
7->11 [style = bold, label=""];
24->10 [style = bold, label=""];
21->12 [style = solid, label="i"];
47->21 [style = solid, label="i"];
19->23 [style = dotted, label="true"];
21->1 [style = solid, label="i"];
37->48 [style = dotted, label="true"];
47->33 [style = solid, label="i"];
15->13 [style = bold, label=""];
41->34 [style = bold, label=""];
47->41 [style = solid, label="i"];
47->37 [style = bold, label=""];
4->21 [style = bold, label=""];
19->3 [style = dotted, label="true"];
9->12 [style = bold, label=""];
33->27 [style = bold, label=""];
35->40 [style = bold, label=""];
19->5 [style = bold, label=""];
43->50 [style = bold, label=""];
13->0 [style = bold, label=""];
46->35 [style = dotted, label="true"];
47->43 [style = solid, label="i"];
13->10 [style = dotted, label="true"];
13->24 [style = dotted, label="true"];
46->28 [style = dotted, label="true"];
6->20 [style = bold, label=""];
21->23 [style = solid, label="i"];
45->31 [style = bold, label=""];
1->39 [style = bold, label=""];
44->29 [style = bold, label=""];
37->38 [style = bold, label=""];
37->41 [style = dotted, label="true"];
17->24 [style = bold, label=""];
31->46 [style = solid, label="i"];
47->27 [style = solid, label="i"];
37->27 [style = dotted, label="true"];
12->44 [style = bold, label=""];
46->1 [style = bold, label=""];
48->43 [style = bold, label=""];
47->34 [style = solid, label="i"];
4->2 [style = solid, label="segments"];
21->36 [style = bold, label=""];
37->36 [style = dotted, label="true"];
47->4 [style = solid, label="i"];
37->34 [style = dotted, label="true"];
29->45 [style = bold, label=""];
42->4 [style = bold, label=""];
13->17 [style = bold, label=""];
20->29 [style = dashed, label="0"];
20->22 [style = bold, label=""];
34->33 [style = bold, label=""];
19->9 [style = dotted, label="true"];
25->18 [style = bold, label=""];
13->17 [style = dotted, label="true"];
26->14 [style = bold, label=""];
27->49 [style = bold, label=""];
25->39 [style = dashed, label="0"];
37->38 [style = dotted, label="true"];
21->19 [style = bold, label=""];
31->46 [style = bold, label=""];
10->13 [style = bold, label=""];
37->4 [style = dotted, label="true"];
19->12 [style = dotted, label="true"];
30->32 [style = bold, label=""];
37->42 [style = dotted, label="true"];
3->19 [style = bold, label=""];
37->51 [style = dotted, label="true"];
37->33 [style = dotted, label="true"];
47->51 [style = solid, label="i"];
19->1 [style = dotted, label="true"];
2->6 [style = bold, label=""];
17->35 [style = dashed, label="0"];
47->38 [style = solid, label="i"];
47->37 [style = solid, label="i"];
21->19 [style = solid, label="i"];
37->43 [style = dotted, label="true"];
18->7 [style = bold, label=""];
5->2 [style = bold, label=""];
47->48 [style = solid, label="i"];
8->9 [style = bold, label=""];
36->37 [style = bold, label=""];
8->12 [style = bold, label=""];
37->50 [style = dotted, label="true"];
47->49 [style = solid, label="i"];
23->1 [style = bold, label=""];
49->51 [style = bold, label=""];
21->9 [style = solid, label="i"];
50->42 [style = bold, label=""];
37->49 [style = dotted, label="true"];
22->15 [style = bold, label=""];
37->21 [style = dotted, label="true"];
47->50 [style = solid, label="i"];
19->8 [style = dotted, label="true"];
1->3 [style = bold, label=""];
28->46 [style = bold, label=""];
46->35 [style = bold, label=""];
16->14 [style = bold, label=""];
47->42 [style = solid, label="i"];
14->4 [style = bold, label=""];
32->47 [style = bold, label=""];
37->8 [style = bold, label=""];
0->1 [style = dashed, label="0"];
}
