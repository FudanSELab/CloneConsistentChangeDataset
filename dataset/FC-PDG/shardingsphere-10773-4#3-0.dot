digraph {
21 [style = filled, label = "assertTrue(actualBindingTableGroups.containsAll(Arrays.asList(\"t_order, t_order_item\",\"t_order, t_order_item\")))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Collection<ShardingTableRuleConfiguration> actualBroadcastTableConfigs = broadcastRule.getTables()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Collection<String> broadcastTables = broadcastRule.getBroadcastTables()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(actualBindingTableGroups.size(),is(2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(actualBindingTableGroups.contains(\"t_order, t_order_item\"))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertBindingRule['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(actualIterator.next().getLogicTable(),is(\"t_user_detail\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(actualIterator.next().getLogicTable(),is(\"t_order\"))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(actualBroadcastTableConfigurations.size(),is(2))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertBroadcastRule['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Collection<String> actualBindingTableGroups = broadcastRule.getBindingTableGroups()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(actualBroadcastTableConfigs.size(),is(2))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(actualBindingTableGroups.size(),is(1))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(broadcastTables.containsAll(Arrays.asList(\"t_dict\",\"t_address\")))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Collection<ShardingTableRuleConfiguration> actualBindingTableRuleConfigurations = bindingRule.getTables()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(actualBindingTableGroups.containsAll(Arrays.asList(\"t_order, t_order_item\")))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Iterator<ShardingTableRuleConfiguration> actualIterator = actualBroadcastTableConfigurations.iterator()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertThat(actualIterator.next().getLogicTable(),is(\"t_user\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Collection<String> actualBindingTableGroups = bindingRule.getBindingTableGroups()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Collection<ShardingTableRuleConfiguration> actualBroadcastTableConfigurations = broadcastRule.getTables()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertThat(actualBindingTableRuleConfigurations.size(),is(4))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(broadcastTables.size(),is(2))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Iterator<ShardingTableRuleConfiguration> actualIterator = actualBindingTableRuleConfigurations.iterator()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Iterator<ShardingTableRuleConfiguration> actualIterator = actualBroadcastTableConfigs.iterator()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertThat(actualIterator.next().getLogicTable(),is(\"t_order_item\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertBroadcastRule['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
5->8 [style = bold, label=""];
19->18 [style = bold, label=""];
15->14 [style = bold, label=""];
9->4 [style = bold, label=""];
8->20 [style = dashed, label="0"];
6->17 [style = dashed, label="0"];
6->14 [style = dashed, label="0"];
16->2 [style = bold, label=""];
18->2 [style = bold, label=""];
13->16 [style = bold, label=""];
17->19 [style = bold, label=""];
4->12 [style = dashed, label="0"];
8->0 [style = bold, label=""];
3->9 [style = bold, label=""];
7->22 [style = bold, label=""];
7->5 [style = bold, label=""];
11->13 [style = dashed, label="0"];
1->6 [style = bold, label=""];
22->20 [style = bold, label=""];
11->19 [style = dashed, label="0"];
11->10 [style = bold, label=""];
9->21 [style = dashed, label="0"];
24->25 [style = bold, label=""];
6->11 [style = bold, label=""];
23->17 [style = bold, label=""];
10->2 [style = bold, label=""];
9->12 [style = bold, label=""];
10->16 [style = dashed, label="0"];
2->7 [style = bold, label=""];
14->13 [style = bold, label=""];
20->24 [style = bold, label=""];
10->18 [style = dashed, label="0"];
25->21 [style = bold, label=""];
3->25 [style = dashed, label="0"];
}
