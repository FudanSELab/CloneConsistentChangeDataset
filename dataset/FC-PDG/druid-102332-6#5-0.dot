digraph {
18 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM0.plus(KM2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testPlus['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testMinus['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testMinus['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of()),KM0.minus(KM2))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of()),START2.minus(START2))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(endMetadata(ImmutableMap.of(2,5L)),END1.minus(END2))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of(2,5L)),START2.minus(START1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM2.plus(KM2))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM1.plus(KM2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(endMetadata(ImmutableMap.of(1,4L)),END2.minus(END1))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"3L\",\"2\",\"5L\")),KM1.plus(KM3))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of()),START0.minus(START2))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of()),START1.minus(START2))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of()),KM1.minus(KM2))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of()),KM2.minus(KM2))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(2,5L)),KM2.minus(KM1))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of(1,3L)),START1.minus(START3))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(1,3L)),KM1.minus(KM3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"3L\",\"2\",\"5L\")),KM2.plus(KM1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
14->16 [style = bold, label=""];
5->13 [style = dashed, label="0"];
4->3 [style = bold, label=""];
8->10 [style = bold, label=""];
9->11 [style = bold, label=""];
3->1 [style = bold, label=""];
7->12 [style = bold, label=""];
0->2 [style = bold, label=""];
18->19 [style = bold, label=""];
1->18 [style = dashed, label="0"];
12->6 [style = bold, label=""];
15->18 [style = bold, label=""];
2->10 [style = dashed, label="0"];
0->14 [style = dashed, label="0"];
19->14 [style = bold, label=""];
3->12 [style = dashed, label="0"];
5->0 [style = bold, label=""];
1->6 [style = dashed, label="0"];
2->16 [style = dashed, label="0"];
6->13 [style = bold, label=""];
17->15 [style = bold, label=""];
3->15 [style = dashed, label="0"];
0->8 [style = dashed, label="0"];
10->9 [style = bold, label=""];
13->8 [style = bold, label=""];
5->19 [style = dashed, label="0"];
}
