digraph {
3 [style = filled, label = "scheduler.advanceTimeTo(200,TimeUnit.MILLISECONDS)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "scheduler.advanceTimeTo(300,TimeUnit.MILLISECONDS)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyList())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "inOrder.verify(observer,Mockito.never()).onError(Mockito.any())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Observable<List<String>> buffered = source.buffer(100,TimeUnit.MILLISECONDS,scheduler,2)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "inOrder.verify(subscriber,Mockito.never()).onError(Mockito.any())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "timedAndCount['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "scheduler.advanceTimeTo(100,TimeUnit.MILLISECONDS)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "inOrder.verify(subscriber,Mockito.never()).onNext(Mockito.anyList())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "inOrder.verify(subscriber,Mockito.times(1)).onNext(list(\"five\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "inOrder.verify(subscriber,Mockito.times(1)).onNext(list(\"one\",\"two\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "buffered.subscribe(observer)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Flowable<List<String>> buffered = source.buffer(100,TimeUnit.MILLISECONDS,scheduler,2)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "inOrder.verify(observer,Mockito.times(1)).onNext(list(\"five\"))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\"))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "inOrder.verify(observer,Mockito.times(1)).onComplete()@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "InOrder inOrder = Mockito.inOrder(observer)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "buffered.subscribe(subscriber)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "InOrder inOrder = Mockito.inOrder(subscriber)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "timedAndCount['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>(){@Override public void subscribe(Observer<? super String> observer){observer.onSubscribe(Disposable.empty())push(observer,\"one\",10)push(observer,\"two\",90)push(observer,\"three\",110)push(observer,\"four\",190)push(observer,\"five\",210)complete(observer,250)}})@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "inOrder.verify(subscriber,Mockito.times(1)).onNext(list(\"three\",\"four\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>(){@Override public void subscribe(Subscriber<? super String> subscriber){subscriber.onSubscribe(new BooleanSubscription())push(subscriber,\"one\",10)push(subscriber,\"two\",90)push(subscriber,\"three\",110)push(subscriber,\"four\",190)push(subscriber,\"five\",210)complete(subscriber,250)}})@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "timedAndCount['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "inOrder.verify(subscriber,Mockito.times(1)).onComplete()@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23->3 [style = bold, label=""];
8->16 [style = dashed, label="0"];
14->7 [style = bold, label=""];
16->24 [style = bold, label=""];
7->8 [style = bold, label=""];
4->7 [style = bold, label=""];
7->15 [style = dashed, label="0"];
8->12 [style = bold, label=""];
21->22 [style = bold, label=""];
13->21 [style = dashed, label="0"];
2->13 [style = bold, label=""];
10->17 [style = dashed, label="0"];
20->15 [style = bold, label=""];
2->18 [style = dashed, label="0"];
19->0 [style = bold, label=""];
5->9 [style = bold, label=""];
22->17 [style = bold, label=""];
3->1 [style = bold, label=""];
12->24 [style = dashed, label="0"];
11->22 [style = dashed, label="0"];
9->6 [style = bold, label=""];
1->19 [style = dashed, label="0"];
12->5 [style = bold, label=""];
13->11 [style = bold, label=""];
11->10 [style = bold, label=""];
6->3 [style = bold, label=""];
3->19 [style = bold, label=""];
5->25 [style = dashed, label="0"];
15->16 [style = bold, label=""];
25->9 [style = bold, label=""];
18->21 [style = bold, label=""];
9->23 [style = bold, label=""];
24->25 [style = bold, label=""];
0->2 [style = bold, label=""];
0->18 [style = bold, label=""];
6->23 [style = dashed, label="0"];
1->0 [style = bold, label=""];
}
