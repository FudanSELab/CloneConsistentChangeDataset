digraph {
40 [style = filled, label = "StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2,1L))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Future<AsyncResult> firstPoll = FlinkFuture.supplyAsync(new Callable<AsyncResult>(){@Override public AsyncResult call(){return queue.poll()}},executor)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "record3.collect(Collections.emptyList())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "OperatorActions operatorActions = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "StreamRecordQueueEntry<Integer> entry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2,1L))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertTrue(queue.isEmpty())@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "StreamRecordQueueEntry<Integer> record3 = new StreamRecordQueueEntry<>(new StreamRecord<>(3,3L))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(record2,firstPoll.get())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertFalse(pollOperation.isDone())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "entry2.collect(Collections.emptyList())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "WatermarkQueueEntry watermark2 = new WatermarkQueueEntry(new Watermark(5L))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Assert.assertEquals(record5,thirdPoll.get())@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "List<StreamElementQueueEntry<?>> expected = Arrays.asList(entry1,entry2,entry3,entry4)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "StreamRecordQueueEntry<Integer> record4 = new StreamRecordQueueEntry<>(new StreamRecord<>(4,4L))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "verify(operatorActions,never()).failOperator(any())@@@63@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "actual.add(queue.poll())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "record5.collect(Collections.emptyList())@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "queue.put(entry)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Set<AsyncResult> expected = new HashSet<>(2)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final OrderedStreamElementQueue queue = new OrderedStreamElementQueue(4,executor,operatorActions)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertFalse(thirdPoll.isDone())@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "verify(operatorActions,never()).failOperator(any())@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Future<List<AsyncResult>> pollOperation = FlinkFuture.supplyAsync(new Callable<List<AsyncResult>>(){@Override public List<AsyncResult> call(){List<AsyncResult> result = new ArrayList<>(4)while (!queue.isEmpty()) {result.add(queue.poll())}return result}},executor)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(watermark1,queue.poll())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "testCompletionOrder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "record6.collect(Collections.emptyList())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Thread.sleep(10L)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "Assert.assertTrue(8 == queue.size())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "WatermarkQueueEntry entry3 = new WatermarkQueueEntry(new Watermark(2L))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "record4.collect(Collections.emptyList())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "record1.collect(Collections.emptyList())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "StreamRecordQueueEntry<Integer> entry1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1,0L))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "List<StreamElementQueueEntry<?>> entries = Arrays.asList(record1,record2,watermark1,record3,record4,watermark2,record5,record6)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Future<AsyncResult> thirdPoll = FlinkFuture.supplyAsync(new Callable<AsyncResult>(){@Override public AsyncResult call(){return queue.poll()}},executor)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertFalse(secondPoll.isDone())@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "actual.add(queue.poll())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "StreamRecordQueueEntry<Integer> record5 = new StreamRecordQueueEntry<>(new StreamRecord<>(5,6L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Thread.sleep(10L)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "StreamRecordQueueEntry<Integer> entry4 = new StreamRecordQueueEntry<>(new StreamRecord<>(3,3L))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "expected.add(record3)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final UnorderedStreamElementQueue queue = new UnorderedStreamElementQueue(8,executor,operatorActions)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "queue.put(entry)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Thread.sleep(10L)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Set<AsyncResult> actual = new HashSet<>(2)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(expected,pollOperation.get())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Thread.sleep(10L)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertTrue(1 == queue.size())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testCompletionOrder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
60 [style = filled, label = "StreamRecordQueueEntry<Integer> record6 = new StreamRecordQueueEntry<>(new StreamRecord<>(6,7L))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Future<AsyncResult> secondPoll = FlinkFuture.supplyAsync(new Callable<AsyncResult>(){@Override public AsyncResult call(){return queue.poll()}},executor)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(watermark2,queue.poll())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "entry1.collect(Collections.emptyList())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testCompletionOrder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(record6,queue.poll())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(2L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "record2.collect(Collections.emptyList())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "expected.add(record4)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(expected,actual)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertFalse(firstPoll.isDone())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(4,queue.size())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1,0L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "CompletableFuture<List<AsyncResult>> pollOperation = CompletableFuture.supplyAsync(null,executor)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "Assert.assertEquals(record1,secondPoll.get())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31->37 [style = bold, label=""];
9->7 [style = solid, label="entry4"];
0->19 [style = dashed, label="0"];
58->30 [style = bold, label=""];
24->57 [style = bold, label=""];
59->51 [style = bold, label=""];
30->36 [style = bold, label=""];
8->6 [style = bold, label=""];
9->7 [style = bold, label=""];
3->4 [style = bold, label=""];
4->33 [style = dashed, label="0"];
0->15 [style = bold, label=""];
13->7 [style = solid, label="entry3"];
40->31 [style = solid, label="record2"];
38->62 [style = bold, label=""];
51->26 [style = bold, label=""];
51->39 [style = solid, label="record4"];
16->43 [style = bold, label=""];
5->7 [style = solid, label="entry1"];
19->15 [style = bold, label=""];
62->40 [style = bold, label=""];
53->60 [style = bold, label=""];
45->35 [style = bold, label=""];
10->11 [style = bold, label=""];
12->7 [style = solid, label="entry2"];
16->3 [style = bold, label=""];
32->31 [style = solid, label="watermark1"];
9->59 [style = dashed, label="0"];
35->44 [style = bold, label=""];
32->28 [style = solid, label="watermark1"];
50->3 [style = bold, label=""];
10->11 [style = solid, label="operatorActions"];
14->10 [style = bold, label=""];
34->54 [style = bold, label=""];
4->18 [style = bold, label=""];
62->61 [style = solid, label="record1"];
29->23 [style = bold, label=""];
32->59 [style = bold, label=""];
1->17 [style = bold, label=""];
13->32 [style = dashed, label="0"];
46->36 [style = solid, label="actual"];
53->54 [style = solid, label="record5"];
54->25 [style = bold, label=""];
10->38 [style = solid, label="operatorActions"];
18->1 [style = bold, label=""];
7->2 [style = bold, label=""];
48->16 [style = bold, label=""];
60->31 [style = bold, label=""];
61->28 [style = bold, label=""];
28->29 [style = bold, label=""];
39->46 [style = bold, label=""];
1->54 [style = dashed, label="0"];
26->53 [style = bold, label=""];
52->61 [style = bold, label=""];
25->41 [style = bold, label=""];
22->55 [style = bold, label=""];
44->33 [style = bold, label=""];
29->36 [style = solid, label="expected"];
62->31 [style = solid, label="record1"];
59->23 [style = solid, label="record3"];
56->24 [style = bold, label=""];
6->52 [style = dashed, label="0"];
18->34 [style = dashed, label="0"];
12->13 [style = bold, label=""];
11->5 [style = bold, label=""];
2->0 [style = bold, label=""];
59->31 [style = solid, label="record3"];
60->31 [style = solid, label="record6"];
40->32 [style = bold, label=""];
23->39 [style = bold, label=""];
21->49 [style = bold, label=""];
13->9 [style = bold, label=""];
47->21 [style = bold, label=""];
57->47 [style = bold, label=""];
15->8 [style = bold, label=""];
10->38 [style = bold, label=""];
7->1 [style = solid, label="expected"];
2->19 [style = bold, label=""];
43->50 [style = bold, label=""];
3->52 [style = bold, label=""];
8->3 [style = dashed, label="0"];
26->31 [style = solid, label="watermark2"];
46->58 [style = bold, label=""];
49->27 [style = bold, label=""];
26->22 [style = solid, label="watermark2"];
20->10 [style = bold, label=""];
11->38 [style = dashed, label="0"];
5->12 [style = bold, label=""];
12->40 [style = dashed, label="0"];
6->16 [style = bold, label=""];
42->10 [style = bold, label=""];
27->48 [style = bold, label=""];
53->31 [style = solid, label="record5"];
51->31 [style = solid, label="record4"];
60->55 [style = solid, label="record6"];
5->62 [style = dashed, label="0"];
40->27 [style = solid, label="record2"];
33->34 [style = bold, label=""];
55->45 [style = bold, label=""];
37->56 [style = bold, label=""];
36->22 [style = bold, label=""];
}
