digraph {
29 [style = filled, label = "{}@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "iterator.remove()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "iterator.hasNext()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MapState<Integer,Long> state = backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "IllegalStateException e@@@25@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i < stateSize@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "iterator.hasNext()@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "iterator.remove()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int i = 0@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "IllegalStateException e@@@25@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Iterator<Map.Entry<Integer,Long>> iterator = state.iterator()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "iteratorCount++@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(stateSize,iteratorCount)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "iterator.remove()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "CheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(iteratorCount,(int)entry.getKey())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "AbstractKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "CheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int stateSize = 4096@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "fail()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testMapStateIteratorArbitraryAccess['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "testMapStateIteratorArbitraryAccess['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "MapStateDescriptor<Integer,Long> kvId = new MapStateDescriptor<>(\"id\",,)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i++@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int iteratorCount = 0@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testMapStateIteratorArbitraryAccess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "{backend.dispose()}@@@37@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "IllegalStateException e@@@25@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "backend.setCurrentKey(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Map.Entry<Integer,Long> entry = iterator.next()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "state.put(i,i * 2L)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "MapState<Integer,Long> state = backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "ThreadLocalRandom.current().nextInt() % 3@@@19@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23->16 [style = dotted, label="true"];
17->10 [style = bold, label=""];
23->3 [style = dotted, label="true"];
7->11 [style = bold, label=""];
29->5 [style = bold, label=""];
9->0 [style = bold, label=""];
23->5 [style = bold, label=""];
15->14 [style = bold, label=""];
28->10 [style = bold, label=""];
10->27 [style = bold, label=""];
6->18 [style = bold, label=""];
6->13 [style = dotted, label="true"];
11->21 [style = bold, label=""];
11->12 [style = dotted, label="true"];
12->11 [style = bold, label=""];
22->29 [style = bold, label=""];
14->13 [style = solid, label="iteratorCount"];
5->13 [style = solid, label="iteratorCount"];
6->23 [style = dotted, label="true"];
4->27 [style = dashed, label="0"];
30->32 [style = bold, label=""];
4->30 [style = dashed, label="0"];
23->3 [style = bold, label=""];
8->32 [style = dashed, label="0"];
7->21 [style = solid, label="i"];
3->16 [style = bold, label=""];
22->5 [style = bold, label=""];
23->2 [style = dotted, label="true"];
11->15 [style = bold, label=""];
26->22 [style = bold, label=""];
0->11 [style = solid, label="stateSize"];
0->7 [style = bold, label=""];
21->12 [style = bold, label=""];
1->22 [style = bold, label=""];
6->20 [style = bold, label=""];
7->12 [style = solid, label="i"];
32->9 [style = bold, label=""];
14->5 [style = solid, label="iteratorCount"];
10->8 [style = solid, label="kvId"];
10->32 [style = solid, label="kvId"];
5->6 [style = bold, label=""];
6->18 [style = dotted, label="true"];
31->10 [style = bold, label=""];
24->25 [style = bold, label=""];
8->9 [style = bold, label=""];
18->13 [style = bold, label=""];
13->23 [style = bold, label=""];
10->4 [style = bold, label=""];
16->5 [style = bold, label=""];
0->20 [style = solid, label="stateSize"];
4->8 [style = bold, label=""];
25->5 [style = bold, label=""];
12->21 [style = solid, label="i"];
12->11 [style = solid, label="i"];
5->20 [style = solid, label="iteratorCount"];
14->20 [style = solid, label="iteratorCount"];
23->2 [style = bold, label=""];
11->21 [style = dotted, label="true"];
2->24 [style = bold, label=""];
20->19 [style = bold, label=""];
27->8 [style = bold, label=""];
14->6 [style = bold, label=""];
10->30 [style = bold, label=""];
23->24 [style = dotted, label="true"];
7->11 [style = solid, label="i"];
23->25 [style = dotted, label="true"];
6->5 [style = dotted, label="true"];
}
