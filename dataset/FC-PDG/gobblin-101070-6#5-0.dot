digraph {
8 [style = filled, label = "String dagId = DagManagerUtils.generateDagId(dag)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"),eq(\"group4\"),anyInt())).thenReturn(Collections.singletonList(flowExecutionId))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Long flowExecutionId = System.currentTimeMillis() - TimeUnit.SECONDS.toMillis(10)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "jobConfig = jobConfig.withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME,ConfigValueFactory.fromAnyRef(\"7\")).withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME_UNIT,ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "testOrphanFlowKill['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "dagManager.addDag(dag,true)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Mockito.doReturn(DagManagerTest.getMockJobStatus(\"flow6\",\"group6\",flowExecutionId,\"group6\",\"job0\",String.valueOf(ExecutionStatus.ORCHESTRATED))).when(dagManager.getJobStatusRetriever()).getJobStatusesForFlowExecution(\"flow6\",\"group6\",flowExecutionId,\"job0\",\"group6\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag),ERROR_MESSAGE)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\",flowExecutionId,\"FINISH_RUNNING\",1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "int queue = DagManagerUtils.getDagQueueId(dag,dagNumThreads)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testFlowSlaWithConfig['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testOrphanFlowKill['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\",234567891L,\"FINISH_RUNNING\",1)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "jobConfig = jobConfig.withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME,ConfigValueFactory.fromAnyRef(\"7\")).withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT,ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(dagManager.dagManagerThreads(queue(.dagToSLA.get(dagId).longValue(),TimeUnit.SECONDS.toMillis(7L))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String dagId = DagManagerUtils.generateDagId(dag)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "long flowExecutionId = System.currentTimeMillis()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\",flowExecutionId,\"FINISH_RUNNING\",1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->16 [style = bold, label=""];
17->7 [style = solid, label="dag"];
16->18 [style = solid, label="flowExecutionId"];
17->8 [style = bold, label=""];
25->9 [style = solid, label="dag"];
12->5 [style = bold, label=""];
20->25 [style = solid, label="flowExecutionId"];
0->13 [style = solid, label="dag"];
17->8 [style = solid, label="dag"];
25->8 [style = solid, label="dag"];
0->6 [style = bold, label=""];
20->23 [style = solid, label="flowExecutionId"];
9->2 [style = bold, label=""];
2->3 [style = bold, label=""];
11->4 [style = bold, label=""];
4->13 [style = bold, label=""];
17->5 [style = solid, label="dag"];
0->6 [style = solid, label="dag"];
3->12 [style = bold, label=""];
16->17 [style = bold, label=""];
25->7 [style = solid, label="dag"];
20->25 [style = bold, label=""];
9->23 [style = dashed, label="0"];
11->18 [style = bold, label=""];
21->12 [style = bold, label=""];
24->20 [style = bold, label=""];
9->23 [style = bold, label=""];
17->9 [style = solid, label="dag"];
0->12 [style = solid, label="dag"];
21->12 [style = solid, label="jobConfig"];
2->21 [style = dashed, label="0"];
2->21 [style = bold, label=""];
13->7 [style = bold, label=""];
11->18 [style = dashed, label="0"];
10->0 [style = bold, label=""];
6->8 [style = bold, label=""];
16->17 [style = solid, label="flowExecutionId"];
8->9 [style = bold, label=""];
18->13 [style = bold, label=""];
0->8 [style = solid, label="dag"];
11->22 [style = bold, label=""];
7->15 [style = bold, label=""];
25->8 [style = bold, label=""];
1->2 [style = bold, label=""];
5->11 [style = bold, label=""];
23->2 [style = bold, label=""];
2->3 [style = solid, label="jobConfig"];
9->1 [style = bold, label=""];
25->5 [style = solid, label="dag"];
7->19 [style = bold, label=""];
22->13 [style = bold, label=""];
3->12 [style = solid, label="jobConfig"];
}
