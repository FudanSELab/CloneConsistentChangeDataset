digraph {
23 [style = filled, label = "inOrder.verify(subscriber).onNext(2)@@@86@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "!observerCompleted.await(30,TimeUnit.SECONDS)@@@79@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final TestObserver<Integer> to = new TestObserver<Integer>(o)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "inOrder.verifyNoMoreInteractions()@@@89@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "timeoutSelectorWithTimeoutAndOnNextRaceCondition['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "new Thread(new Runnable(){@Override public void run(){PublishProcessor<Integer> source = PublishProcessor.create()source.timeout(timeoutFunc,Flowable.just(3)).subscribe(ts)source.onNext(1)try {if (!enteredTimeoutOne.await(30,TimeUnit.SECONDS)) {latchTimeout.set(true)}}catch (InterruptedException e) source.onNext(2)try {if (!timeoutEmittedOne.await(30,TimeUnit.SECONDS)) {latchTimeout.set(true)}}catch (InterruptedException e) source.onComplete()}}).start()@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "InOrder inOrder = inOrder(subscriber)@@@83@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "inOrder.verify(o,never()).onNext(3)@@@87@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "inOrder.verify(subscriber).onComplete()@@@88@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "inOrder.verify(o).onNext(2)@@@86@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "inOrder.verify(subscriber).onSubscribe((Subscription)notNull())@@@84@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final AtomicBoolean latchTimeout = new AtomicBoolean(false)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "latchTimeout.set(true)@@@80@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "inOrder.verify(subscriber).onNext(1)@@@85@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "doAnswer(new Answer<Void>(){@Override public Void answer(InvocationOnMock invocation){observerReceivedTwo.countDown()return null}}).when(subscriber).onNext(2)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "inOrder.verify(subscriber,never()).onNext(3)@@@87@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final CountDownLatch timeoutEmittedOne = new CountDownLatch(1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "doAnswer(new Answer<Void>(){@Override public Void answer(InvocationOnMock invocation){observerCompleted.countDown()return null}}).when(subscriber).onComplete()@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "inOrder.verify(o).onComplete()@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final CountDownLatch observerCompleted = new CountDownLatch(1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final CountDownLatch observerReceivedTwo = new CountDownLatch(1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final CountDownLatch enteredTimeoutOne = new CountDownLatch(1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "InOrder inOrder = inOrder(o)@@@83@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "inOrder.verify(o).onNext(1)@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final Observer<Integer> o = TestHelper.mockObserver()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final Subscriber<Integer> subscriber = TestHelper.mockSubscriber()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "timeoutSelectorWithTimeoutAndOnNextRaceCondition['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "inOrder.verify(o).onSubscribe((Disposable)notNull())@@@84@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final TestSubscriber<Integer> ts = new TestSubscriber<Integer>(subscriber)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final Function<Integer,Observable<Integer>> timeoutFunc = new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer t1){if (t1 == 1) {return Observable.unsafeCreate(new ObservableSource<Integer>(){@Override public void subscribe(Observer<? super Integer> observer){observer.onSubscribe(Disposable.empty())enteredTimeoutOne.countDown()while (true) {try {if (!observerReceivedTwo.await(30,TimeUnit.SECONDS)) {latchTimeout.set(true)}break}catch (InterruptedException e) }observer.onNext(1)timeoutEmittedOne.countDown()}}).subscribeOn(Schedulers.newThread())}{return PublishSubject.create()}}}@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final Function<Integer,Flowable<Integer>> timeoutFunc = new Function<Integer,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Integer t1){if (t1 == 1) {return Flowable.unsafeCreate(new Publisher<Integer>(){@Override public void subscribe(Subscriber<? super Integer> subscriber){subscriber.onSubscribe(new BooleanSubscription())enteredTimeoutOne.countDown()while (true) {try {if (!observerReceivedTwo.await(30,TimeUnit.SECONDS)) {latchTimeout.set(true)}break}catch (InterruptedException e) }subscriber.onNext(1)timeoutEmittedOne.countDown()}}).subscribeOn(Schedulers.newThread())}{return PublishProcessor.create()}}}@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertFalse(\"CoundDownLatch timeout\",latchTimeout.get())@@@82@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "timeoutSelectorWithTimeoutAndOnNextRaceCondition['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20->1 [style = dotted, label="true"];
15->30 [style = bold, label=""];
3->10 [style = bold, label=""];
24->31 [style = solid, label="subscriber"];
11->31 [style = dashed, label="0"];
4->29 [style = dashed, label="0"];
12->26 [style = dashed, label="0"];
19->6 [style = bold, label=""];
11->21 [style = bold, label=""];
14->3 [style = bold, label=""];
24->25 [style = solid, label="subscriber"];
2->25 [style = dashed, label="0"];
16->25 [style = bold, label=""];
20->18 [style = bold, label=""];
32->14 [style = bold, label=""];
0->11 [style = solid, label="o"];
1->18 [style = bold, label=""];
0->24 [style = dashed, label="0"];
26->27 [style = bold, label=""];
0->2 [style = solid, label="o"];
20->1 [style = bold, label=""];
17->30 [style = dashed, label="0"];
2->8 [style = bold, label=""];
29->23 [style = bold, label=""];
23->26 [style = bold, label=""];
16->2 [style = bold, label=""];
13->23 [style = dashed, label="0"];
10->7 [style = bold, label=""];
13->12 [style = bold, label=""];
22->14 [style = bold, label=""];
12->19 [style = bold, label=""];
21->28 [style = dashed, label="0"];
9->14 [style = bold, label=""];
18->31 [style = bold, label=""];
4->13 [style = bold, label=""];
25->8 [style = bold, label=""];
27->6 [style = bold, label=""];
7->15 [style = bold, label=""];
19->27 [style = dashed, label="0"];
0->5 [style = bold, label=""];
24->5 [style = bold, label=""];
17->0 [style = bold, label=""];
21->4 [style = bold, label=""];
31->28 [style = bold, label=""];
5->16 [style = bold, label=""];
8->20 [style = bold, label=""];
18->11 [style = bold, label=""];
30->24 [style = bold, label=""];
28->29 [style = bold, label=""];
15->17 [style = bold, label=""];
}
