digraph {
1 [style = filled, label = "testExpression(rexBuilder.makeCall(new RepeatOperatorConversion().calciteOperator(),inputRef(\"s\"),integerLiteral(3)),DruidExpression.fromExpression(\"repeat(\"s\",3)\"),\"foofoofoo\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "testExpression(rexBuilder.makeCall(new RepeatOperatorConversion().calciteOperator(),inputRef(\"s\"),integerLiteral(-1)),DruidExpression.fromExpression(\"repeat(\"s\",-1)\"),null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "testRepeat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "testExpression(rexBuilder.makeCall(new LeftOperatorConversion().calciteOperator(),inputRef(\"s\"),integerLiteral(2)),DruidExpression.fromExpression(\"left(\"s\",2)\"),\"fo\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testExpression(rexBuilder.makeCall(new LeftOperatorConversion().calciteOperator(),inputRef(\"tstr\"),integerLiteral(10)),DruidExpression.fromExpression(\"left(\"tstr\",10)\"),\"2000-02-03\")@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testLeft['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testExpression(rexBuilder.makeCall(new LeftOperatorConversion().calciteOperator(),inputRef(\"s\"),integerLiteral(4)),DruidExpression.fromExpression(\"left(\"s\",4)\"),\"foo\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testHelper.testExpression(new RepeatOperatorConversion().calciteOperator(),ImmutableList.of(testHelper.makeInputRef(\"s\"),testHelper.makeLiteral(-1)),DruidExpression.fromExpression(\"repeat(\"s\",-1)\"),null)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testExpression(rexBuilder.makeCall(new LeftOperatorConversion().calciteOperator(),inputRef(\"s\"),integerLiteral(1)),DruidExpression.fromExpression(\"left(\"s\",1)\"),\"f\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testRepeat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testExpression(rexBuilder.makeCall(new LeftOperatorConversion().calciteOperator(),inputRef(\"s\"),integerLiteral(3)),DruidExpression.fromExpression(\"left(\"s\",3)\"),\"foo\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testHelper.testExpression(new RepeatOperatorConversion().calciteOperator(),ImmutableList.of(testHelper.makeInputRef(\"s\"),testHelper.makeLiteral(1)),DruidExpression.fromExpression(\"repeat(\"s\",1)\"),\"foo\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testHelper.testExpression(new RepeatOperatorConversion().calciteOperator(),ImmutableList.of(testHelper.makeInputRef(\"s\"),testHelper.makeLiteral(3)),DruidExpression.fromExpression(\"repeat(\"s\",3)\"),\"foofoofoo\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testExpression(rexBuilder.makeCall(new RepeatOperatorConversion().calciteOperator(),inputRef(\"s\"),integerLiteral(1)),DruidExpression.fromExpression(\"repeat(\"s\",1)\"),\"foo\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->3 [style = bold, label=""];
3->5 [style = dashed, label="0"];
8->10 [style = bold, label=""];
6->5 [style = bold, label=""];
9->12 [style = bold, label=""];
1->10 [style = dashed, label="0"];
13->8 [style = bold, label=""];
2->7 [style = dashed, label="0"];
11->9 [style = bold, label=""];
2->8 [style = dashed, label="0"];
1->6 [style = dashed, label="0"];
2->1 [style = bold, label=""];
4->7 [style = bold, label=""];
3->11 [style = dashed, label="0"];
7->6 [style = bold, label=""];
0->2 [style = bold, label=""];
10->11 [style = bold, label=""];
}
