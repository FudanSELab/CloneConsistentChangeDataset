digraph {
8 [style = filled, label = "expectedConfigs.put(\"metrics.context.connect.kafka.cluster.id\",CLUSTER_ID)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "expectedConfigs.put(\"client.id\",\"connector-consumer-test-1\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Map<String,String> expectedConfigs = new HashMap<>(defaultConsumerConfigs)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "PowerMock.replayAll()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(expectedConfigs,Worker.producerConfigs(TASK_ID,\"connector-producer-\" + TASK_ID,config,connectorConfig,null,noneConnectorClientConfigOverridePolicy,CLUSTER_ID))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_PRODUCER_OVERRIDES_PREFIX)).andReturn(new HashMap<String,Object>())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(expectedConfigs,Worker.consumerConfigs(new ConnectorTaskId(\"test\",1),config,connectorConfig,null,noneConnectorClientConfigOverridePolicy))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "expectedConfigs.put(\"group.id\",\"connect-test\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Map<String,String> expectedConfigs = new HashMap<>(defaultProducerConfigs)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testProducerConfigsWithoutOverrides['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expectedConfigs.put(\"client.id\",\"connector-producer-job-0\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testConsumerConfigsWithoutOverrides['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "PowerMock.replayAll()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX)).andReturn(new HashMap<>())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testProducerConfigsWithoutOverrides['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8->7 [style = bold, label=""];
3->11 [style = bold, label=""];
13->11 [style = solid, label="expectedConfigs"];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
14->9 [style = bold, label=""];
10->3 [style = bold, label=""];
0->7 [style = solid, label="expectedConfigs"];
1->0 [style = bold, label=""];
9->10 [style = bold, label=""];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
2->3 [style = bold, label=""];
2->8 [style = bold, label=""];
0->2 [style = bold, label=""];
0->3 [style = solid, label="expectedConfigs"];
}
