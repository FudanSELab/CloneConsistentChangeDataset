digraph {
10 [style = filled, label = "requestedRanges = Range.normalize(requestedRanges)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "CassandraOutgoingFile cof = new CassandraOutgoingFile(StreamOperation.BOOTSTRAP,sstable.ref(),sstable.getPositionsForRanges(requestedRanges),requestedRanges,sstable.estimatedKeys())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertTrue(cof.contained(sections,sstable))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "validateFullyContainedIn_SplitRange_Succeeds['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "List<Range<Token>> requestedRanges = Arrays.asList(new Range<>(store.getPartitioner().getMinimumToken(),getTokenAtIndex(4)),new Range<>(getTokenAtIndex(2),getTokenAtIndex(6)),new Range<>(getTokenAtIndex(5),sstable.last.getToken()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "validateFullyContainedIn_SingleContiguousRange_Succeeds['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "CassandraOutgoingFile cof = new CassandraOutgoingFile(StreamOperation.BOOTSTRAP,sstable.ref(),sstable.getPositionsForRanges(requestedRanges),requestedRanges,sstable.estimatedKeys())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "CassandraOutgoingFile cof = new CassandraOutgoingFile(StreamOperation.BOOTSTRAP,sstable.ref(),sections,requestedRanges,sstable.estimatedKeys())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertTrue(cof.contained(requestedRanges,sstable))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "validateFullyContainedIn_SingleContiguousRange_Succeeds['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<SSTableReader.PartitionPositionBounds> sections = sstable.getPositionsForRanges(requestedRanges)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "List<Range<Token>> requestedRanges = Arrays.asList(new Range<>(store.getPartitioner().getMinimumToken(),sstable.last.getToken()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = dashed, label="0"];
4->5 [style = solid, label="sections"];
2->4 [style = solid, label="requestedRanges"];
10->9 [style = solid, label="requestedRanges"];
0->4 [style = dashed, label="0"];
2->4 [style = bold, label=""];
4->7 [style = solid, label="sections"];
1->9 [style = bold, label=""];
6->2 [style = bold, label=""];
2->0 [style = bold, label=""];
2->0 [style = solid, label="requestedRanges"];
3->2 [style = bold, label=""];
11->10 [style = bold, label=""];
0->1 [style = bold, label=""];
11->10 [style = solid, label="requestedRanges"];
2->1 [style = solid, label="requestedRanges"];
5->7 [style = bold, label=""];
2->11 [style = dashed, label="0"];
2->5 [style = solid, label="requestedRanges"];
10->1 [style = bold, label=""];
8->11 [style = bold, label=""];
4->5 [style = bold, label=""];
10->1 [style = solid, label="requestedRanges"];
}
