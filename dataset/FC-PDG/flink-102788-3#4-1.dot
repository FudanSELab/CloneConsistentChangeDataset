digraph {
8 [style = filled, label = "assertEquals(1,timeAdaptor.numTimers(testHarness))@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testNoTimerFiringForPurgedWindow['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,List<Integer>> testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,List<Integer>> testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,intListDescriptor,mockWindowFunction)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Trigger<Integer,TimeWindow> mockTrigger = mockTrigger()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "timeAdaptor.verifyTriggerCallback(mockTrigger,never(),null,null)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(0,testHarness.extractOutputStreamRecords().size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testNoTimerFiringForPurgedWindow['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "verify(mockWindowFunction,never()).apply(anyInt(),anyTimeWindow(),anyIntIterable(),WindowOperatorContractTest.anyCollector())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "timeAdaptor.setIsEventTime(mockAssigner)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "MergingWindowAssigner<Integer,TimeWindow> mockAssigner = mockMergingAssigner()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(2,timeAdaptor.numTimers(testHarness))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "WindowAssigner<Integer,TimeWindow> mockAssigner = mockTimeWindowAssigner()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHarness.open()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "doAnswer(new Answer<TriggerResult>(){@Override public TriggerResult answer(InvocationOnMock invocation){Trigger.TriggerContext context = (Trigger.TriggerContext)invocation.getArguments()(3(timeAdaptor.registerTimer(context,0L)return TriggerResult.PURGE}}).when(mockTrigger).onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "timeAdaptor.advanceTime(testHarness,0L)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testNoTimerFiringForPurgedMergingWindow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(1,testHarness.numKeyedStateEntries())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "timeAdaptor.advanceTime(testHarness,Long.MIN_VALUE)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(2,4)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "@SuppressWarnings(\"unchecked\") InternalWindowFunction<Iterable<Integer>,List<Integer>,Integer,TimeWindow> mockWindowFunction = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->18 [style = solid, label="mockAssigner"];
16->15 [style = bold, label=""];
14->3 [style = bold, label=""];
2->20 [style = solid, label="mockWindowFunction"];
1->4 [style = bold, label=""];
2->20 [style = bold, label=""];
20->17 [style = bold, label=""];
9->0 [style = dotted, label="true"];
18->10 [style = solid, label="testHarness"];
7->5 [style = solid, label="mockTrigger"];
18->13 [style = solid, label="testHarness"];
21->0 [style = dotted, label="true"];
18->17 [style = bold, label=""];
25->4 [style = bold, label=""];
2->18 [style = bold, label=""];
18->19 [style = solid, label="testHarness"];
12->6 [style = bold, label=""];
0->22 [style = dashed, label="0"];
17->19 [style = bold, label=""];
4->7 [style = bold, label=""];
19->16 [style = bold, label=""];
25->4 [style = solid, label="mockAssigner"];
6->14 [style = bold, label=""];
3->23 [style = dashed, label="0"];
3->10 [style = bold, label=""];
7->20 [style = solid, label="mockTrigger"];
14->23 [style = bold, label=""];
10->13 [style = bold, label=""];
20->8 [style = solid, label="testHarness"];
7->2 [style = bold, label=""];
24->25 [style = bold, label=""];
24->22 [style = dotted, label="true"];
18->20 [style = dashed, label="0"];
2->18 [style = solid, label="mockWindowFunction"];
21->1 [style = bold, label=""];
20->10 [style = solid, label="testHarness"];
20->19 [style = solid, label="testHarness"];
7->18 [style = solid, label="mockTrigger"];
13->5 [style = bold, label=""];
23->10 [style = bold, label=""];
11->8 [style = bold, label=""];
15->12 [style = bold, label=""];
5->11 [style = bold, label=""];
1->4 [style = solid, label="mockAssigner"];
20->13 [style = solid, label="testHarness"];
1->18 [style = solid, label="mockAssigner"];
1->20 [style = solid, label="mockAssigner"];
9->1 [style = bold, label=""];
1->25 [style = dashed, label="0"];
18->8 [style = solid, label="testHarness"];
}
