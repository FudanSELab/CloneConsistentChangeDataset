digraph {
3 [style = filled, label = "List<InetAddress> hosts = new ArrayList<InetAddress>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.moving(newToken))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,6)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(keyTokens.get(2)))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "StorageService ss = StorageService.instance@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "newToken = positionToken(8)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(endpointTokens.get(2)))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(Collections.singleton(keyTokens.get(2)),Gossiper.computeExpireTime()))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(4)),hostIds.get(2)))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(keyTokens.get(2),Gossiper.computeExpireTime()))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "List<UUID> hostIds = new ArrayList<UUID>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.moving(newToken))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(newToken,hostIds.get(2)))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testStateJumpToNormal['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertTrue(tmd.getMovingEndpoints().isEmpty())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(endpointTokens.get(2)))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(keyTokens.get(2))))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "Token newToken = positionToken(7)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(newToken,hostIds.get(2)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testStateJumpToNormal['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(tmd.getLeavingEndpoints().isEmpty())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ArrayList<Token> endpointTokens = new ArrayList<Token>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(endpointTokens.get(2))))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(4)))@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(keyTokens.get(4),hostIds.get(2)))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "tmd.clearUnsafe()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertTrue(tmd.getMovingEndpoints().isEmpty())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(2)))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(2)),hostIds.get(2)))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(newToken))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(endpointTokens.get(2)))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ArrayList<Token> keyTokens = new ArrayList<Token>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testStateJumpToNormal['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "IPartitioner partitioner = new RandomPartitioner()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertTrue(tmd.isMoving(hosts.get(2)))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TokenMetadata tmd = ss.getTokenMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(newToken))@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11->32 [style = dashed, label="0"];
23->25 [style = bold, label=""];
16->11 [style = bold, label=""];
28->15 [style = bold, label=""];
36->39 [style = solid, label="newToken"];
36->31 [style = solid, label="newToken"];
21->19 [style = bold, label=""];
9->24 [style = dashed, label="0"];
5->26 [style = dashed, label="0"];
36->38 [style = solid, label="newToken"];
16->35 [style = dashed, label="0"];
29->35 [style = solid, label="newToken"];
11->6 [style = bold, label=""];
22->9 [style = bold, label=""];
35->32 [style = bold, label=""];
2->18 [style = bold, label=""];
14->17 [style = bold, label=""];
31->29 [style = bold, label=""];
20->21 [style = solid, label="hostIds"];
29->33 [style = solid, label="newToken"];
16->23 [style = dashed, label="0"];
29->32 [style = solid, label="newToken"];
25->6 [style = bold, label=""];
24->23 [style = bold, label=""];
5->38 [style = bold, label=""];
4->33 [style = dashed, label="0"];
1->13 [style = bold, label=""];
32->10 [style = bold, label=""];
9->16 [style = bold, label=""];
36->39 [style = bold, label=""];
21->28 [style = bold, label=""];
20->21 [style = bold, label=""];
17->7 [style = bold, label=""];
39->30 [style = bold, label=""];
18->1 [style = solid, label="partitioner"];
12->21 [style = solid, label="keyTokens"];
26->0 [style = bold, label=""];
3->20 [style = bold, label=""];
13->12 [style = bold, label=""];
21->36 [style = bold, label=""];
8->5 [style = bold, label=""];
18->1 [style = bold, label=""];
5->0 [style = bold, label=""];
30->5 [style = bold, label=""];
7->2 [style = bold, label=""];
17->21 [style = solid, label="ss"];
0->22 [style = bold, label=""];
6->10 [style = bold, label=""];
34->17 [style = bold, label=""];
19->28 [style = dashed, label="0"];
27->17 [style = bold, label=""];
11->25 [style = dashed, label="0"];
10->4 [style = bold, label=""];
10->37 [style = dashed, label="0"];
5->38 [style = dashed, label="0"];
12->3 [style = bold, label=""];
40->31 [style = bold, label=""];
29->35 [style = bold, label=""];
22->24 [style = bold, label=""];
15->39 [style = dashed, label="0"];
19->15 [style = bold, label=""];
37->33 [style = bold, label=""];
38->40 [style = bold, label=""];
0->40 [style = dashed, label="0"];
13->21 [style = solid, label="endpointTokens"];
15->8 [style = bold, label=""];
3->21 [style = solid, label="hosts"];
22->31 [style = dashed, label="0"];
18->21 [style = solid, label="partitioner"];
10->37 [style = bold, label=""];
8->26 [style = bold, label=""];
}
