digraph {
0 [style = filled, label = "final Map<TaskId,SortedSet<UUID>> tasksToCaughtUpClients = new HashMap<>()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(client1,hasProperty(\"standbyTasks\",null,mkSet()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final Set<TaskId> allTasks = mkSet(TASK_0_0,TASK_0_1,TASK_0_2)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "verifyClientStateAssignments(expectedActiveTaskAssignment,expectedWarmupTaskAssignment)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final Map<UUID,List<TaskId>> balancedAssignment = mkMap(mkEntry(UUID_1,singletonList(TASK_0_0)),mkEntry(UUID_2,singletonList(TASK_0_1)),mkEntry(UUID_3,singletonList(TASK_0_2)))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "tasksToCaughtUpClients.put(TASK_0_1,mkSortedSet(UUID_3))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "verifyClientStateAssignments(expectedActiveTaskAssignment,expectedWarmupTaskAssignment)@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final Map<UUID,List<TaskId>> expectedActiveTaskAssignment = mkMap(mkEntry(UUID_1,singletonList(TASK_0_0)),mkEntry(UUID_2,singletonList(TASK_0_2)),mkEntry(UUID_3,singletonList(TASK_0_1)))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(client2,hasProperty(\"standbyTasks\",null,mkSet(TASK_0_0)))@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final Map<UUID,List<TaskId>> expectedWarmupTaskAssignment = mkMap(mkEntry(UUID_1,EMPTY_TASK_LIST),mkEntry(UUID_2,singletonList(TASK_0_1)),mkEntry(UUID_3,singletonList(TASK_0_2)))@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "shouldNotCountPreviousStandbyTasksTowardsMaxWarmupReplicas['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final Map<UUID,ClientState> clientStates = getClientStatesMap(client1,client2)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertThat(client1,hasProperty(\"activeTasks\",null,mkSet(TASK_0_0)))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "final ClientState client2 = getClientStateWithActiveAssignment(singletonList(TASK_0_0))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertThat(client2,hasProperty(\"activeTasks\",null,mkSet()))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertThat(\"should have assigned movements\",assignTaskMovements(tasksToCaughtUpClients,clientStates,maxWarmupReplicas),is(true))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertTrue(assignTaskMovements(balancedAssignment,tasksToCaughtUpClients,clientStates,getMapWithNumStandbys(allTasks,1),maxWarmupReplicas))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final ClientState client1 = getClientStateWithActiveAssignment(emptyList())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "shouldNotCountPreviousStandbyTasksTowardsMaxWarmupReplicas['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "final Map<UUID,List<TaskId>> expectedWarmupTaskAssignment = mkMap(mkEntry(UUID_1,EMPTY_TASK_LIST),mkEntry(UUID_2,singletonList(TASK_0_1)),mkEntry(UUID_3,EMPTY_TASK_LIST))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "shouldOnlyGetUpToMaxWarmupReplicasAndReturnTrue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "client3.addPreviousStandbyTasks(singleton(TASK_0_2))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "final Map<TaskId,SortedSet<UUID>> tasksToCaughtUpClients = mkMap(mkEntry(TASK_0_0,mkSortedSet(UUID_1)))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "tasksToCaughtUpClients.put(TASK_0_0,mkSortedSet(UUID_1))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "tasksToCaughtUpClients.put(TASK_0_2,mkSortedSet(UUID_2))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final int maxWarmupReplicas = 0@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final int maxWarmupReplicas = 1@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "client1.assignStandby(TASK_0_0)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15->23 [style = bold, label=""];
14->18 [style = solid, label="client1"];
7->11 [style = bold, label=""];
20->17 [style = bold, label=""];
2->20 [style = dashed, label="0"];
4->25 [style = bold, label=""];
20->17 [style = solid, label="tasksToCaughtUpClients"];
26->3 [style = bold, label=""];
16->24 [style = bold, label=""];
9->4 [style = bold, label=""];
23->13 [style = solid, label="client2"];
11->3 [style = solid, label="balancedAssignment"];
1->3 [style = bold, label=""];
0->3 [style = solid, label="tasksToCaughtUpClients"];
4->3 [style = solid, label="expectedActiveTaskAssignment"];
25->3 [style = solid, label="expectedWarmupTaskAssignment"];
2->9 [style = bold, label=""];
3->12 [style = bold, label=""];
10->22 [style = dashed, label="0"];
10->7 [style = bold, label=""];
23->24 [style = solid, label="client2"];
7->26 [style = solid, label="allTasks"];
8->1 [style = bold, label=""];
8->12 [style = solid, label="expectedWarmupTaskAssignment"];
5->2 [style = bold, label=""];
11->0 [style = bold, label=""];
14->16 [style = solid, label="client1"];
10->26 [style = solid, label="maxWarmupReplicas"];
23->13 [style = bold, label=""];
1->16 [style = dashed, label="0"];
6->10 [style = bold, label=""];
27->10 [style = bold, label=""];
0->26 [style = solid, label="tasksToCaughtUpClients"];
25->26 [style = bold, label=""];
9->17 [style = dashed, label="0"];
21->16 [style = bold, label=""];
23->21 [style = solid, label="client2"];
4->8 [style = bold, label=""];
14->13 [style = solid, label="client1"];
8->25 [style = dashed, label="0"];
14->15 [style = bold, label=""];
7->3 [style = solid, label="allTasks"];
18->21 [style = bold, label=""];
22->17 [style = solid, label="maxWarmupReplicas"];
10->3 [style = solid, label="maxWarmupReplicas"];
22->14 [style = bold, label=""];
4->12 [style = solid, label="expectedActiveTaskAssignment"];
19->22 [style = bold, label=""];
17->18 [style = bold, label=""];
11->26 [style = solid, label="balancedAssignment"];
0->5 [style = bold, label=""];
13->20 [style = bold, label=""];
13->17 [style = solid, label="clientStates"];
}
