digraph {
0 [style = filled, label = "testUnboundedDetection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.FORWARD_EDGES_PIPELINED,ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST,false))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final SourceTransformation<Integer,?,?> bounded = getSourceTransformation(\"Bounded Source\",Boundedness.BOUNDED)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,bounded)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,unbounded)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,ScheduleMode.EAGER,false))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(Boundedness.CONTINUOUS_UNBOUNDED,unbounded.getBoundedness())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(streamingGraph,hasProperties(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,ScheduleMode.EAGER,false))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final StreamGraph streamingGraph = generateStreamGraph(RuntimeExecutionMode.STREAMING,bounded)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,JobType.STREAMING,false))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testExplicitOverridesDetectedMode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final SourceTransformation<Integer,?,?> unbounded = getSourceTransformation(\"Unbounded Source\",Boundedness.CONTINUOUS_UNBOUNDED)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(Boundedness.BOUNDED,bounded.getBoundedness())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testUnboundedDetection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7->13 [style = bold, label=""];
1->5 [style = dashed, label="0"];
4->5 [style = solid, label="graph"];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
1->9 [style = dashed, label="0"];
9->10 [style = bold, label=""];
8->9 [style = solid, label="graph"];
13->8 [style = solid, label="bounded"];
3->4 [style = bold, label=""];
4->1 [style = solid, label="graph"];
6->2 [style = bold, label=""];
10->11 [style = solid, label="streamingGraph"];
2->4 [style = solid, label="unbounded"];
13->12 [style = bold, label=""];
3->12 [style = dashed, label="0"];
12->8 [style = bold, label=""];
2->13 [style = dashed, label="0"];
4->8 [style = dashed, label="0"];
8->9 [style = bold, label=""];
13->10 [style = solid, label="bounded"];
4->1 [style = bold, label=""];
4->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
