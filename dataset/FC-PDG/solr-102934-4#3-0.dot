digraph {
2 [style = filled, label = "SolrInputDocument d = null@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\" string3 \",d.getFieldValue(\"bar_t\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testTrimRegex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "d = processAdd(\"trim-field-regexes\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foozat_s\",\" string2 \"),f(\"bar_t\",\" string3 \"),f(\"bar_s\",\" string4 \")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertNotNull(d)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"string2\",d.getFieldValue(\"foo_s\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testTrimMultipleRules['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "d = processAdd(\"trim-multi\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \")))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(\" string3 \",d.getFieldValue(\"bar_dt\"))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"string4\",d.getFieldValue(\"bar_s\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\" string1 \",d.getFieldValue(\"foo_t\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"string1\",d.getFieldValue(\"foo_t\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testTrimMultipleRules['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"string4\",d.getFieldValue(\"foo_pdt\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "d = processAdd(\"trim-multi\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \"),f(\"foo_pdt\",\" string4 \")))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"string2\",d.getFieldValue(\"foozat_s\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->13 [style = dashed, label="0"];
0->3 [style = bold, label=""];
10->15 [style = bold, label=""];
9->2 [style = bold, label=""];
13->1 [style = solid, label="d"];
3->6 [style = bold, label=""];
1->0 [style = bold, label=""];
11->2 [style = bold, label=""];
13->1 [style = bold, label=""];
6->10 [style = dashed, label="0"];
2->13 [style = bold, label=""];
0->14 [style = dashed, label="0"];
8->1 [style = bold, label=""];
5->1 [style = bold, label=""];
6->4 [style = bold, label=""];
12->10 [style = bold, label=""];
3->12 [style = dashed, label="0"];
7->2 [style = bold, label=""];
4->15 [style = dashed, label="0"];
14->12 [style = bold, label=""];
5->8 [style = dashed, label="0"];
1->14 [style = bold, label=""];
5->1 [style = solid, label="d"];
8->1 [style = solid, label="d"];
2->8 [style = bold, label=""];
2->5 [style = bold, label=""];
}
