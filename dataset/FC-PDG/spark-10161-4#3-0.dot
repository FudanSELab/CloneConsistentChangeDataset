digraph {
22 [style = filled, label = "blocks.put(\"b1\",new NioManagedBuffer(ByteBuffer.wrap(new byte(((()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "LinkedHashMap<String,ManagedBuffer> blocks = Maps.newLinkedHashMap()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int i = 0@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "int i = 0@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "verify(listener,times(1)).onBlockFetchSuccess(\"shuffleChunk_0_0_\" + i,blocks.get(\"shuffleChunk_0_0_\" + i))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "blocks.put(\"b2\",new NettyManagedBuffer(Unpooled.wrappedBuffer(new byte(((()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "BlockFetchingListener listener = fetchBlocks(blocks,blockIds,new FetchShuffleBlockChunks(\"app-id\",\"exec-id\",0,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a83f4d,new int((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a83f51),conf)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "blocks.put(\"shuffleChunk_0_0_0\",new NioManagedBuffer(ByteBuffer.wrap(new byte(((()))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "verify(listener,times(1)).onBlockFetchSuccess(\"b\" + i,blocks.get(\"b\" + i))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "i++@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testShuffleBlockChunksFetch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "String(( blockIds = blocks.keySet().toArray(new String(((()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "i < 3@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "blocks.put(\"b0\",new NioManagedBuffer(ByteBuffer.wrap(new byte(((()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "i < 3@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testFetchThree['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testShuffleBlockChunksFetch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "BlockFetchingListener listener = fetchBlocks(blocks,blockIds,new FetchShuffleBlockChunks(\"app-id\",\"exec-id\",0,0,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a83fc3,new int((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a83fc7),conf)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "i++@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "blocks.put(\"shuffleChunk_0_0_0_0\",new NioManagedBuffer(ByteBuffer.wrap(new byte(((()))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "blocks.put(\"shuffleChunk_0_0_0_1\",new NioManagedBuffer(ByteBuffer.wrap(new byte(((()))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "blocks.put(\"shuffleChunk_0_0_0_2\",new NettyManagedBuffer(Unpooled.wrappedBuffer(new byte(((()))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "blocks.put(\"shuffleChunk_0_0_1\",new NioManagedBuffer(ByteBuffer.wrap(new byte(((()))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "verify(listener,times(1)).onBlockFetchSuccess(\"shuffleChunk_0_0_0_\" + i,blocks.get(\"shuffleChunk_0_0_0_\" + i))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "BlockFetchingListener listener = fetchBlocks(blocks,blockIds,new OpenBlocks(\"app-id\",\"exec-id\",blockIds),conf)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "blocks.put(\"shuffleChunk_0_0_2\",new NettyManagedBuffer(Unpooled.wrappedBuffer(new byte(((()))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9->0 [style = solid, label="i"];
4->9 [style = bold, label=""];
5->10 [style = bold, label=""];
4->18 [style = dashed, label="0"];
1->4 [style = bold, label=""];
1->18 [style = solid, label="blockIds"];
18->24 [style = bold, label=""];
21->17 [style = solid, label="i"];
10->12 [style = dotted, label="true"];
24->21 [style = solid, label="i"];
12->5 [style = bold, label=""];
4->16 [style = dashed, label="0"];
25->22 [style = bold, label=""];
3->25 [style = bold, label=""];
9->5 [style = solid, label="i"];
21->19 [style = solid, label="i"];
7->14 [style = dashed, label="0"];
0->19 [style = dashed, label="0"];
2->3 [style = bold, label=""];
8->15 [style = dashed, label="0"];
8->23 [style = dashed, label="0"];
3->6 [style = bold, label=""];
1->18 [style = bold, label=""];
20->3 [style = bold, label=""];
1->4 [style = solid, label="blockIds"];
9->10 [style = bold, label=""];
0->12 [style = dashed, label="0"];
7->8 [style = bold, label=""];
10->5 [style = dotted, label="true"];
22->23 [style = bold, label=""];
3->16 [style = solid, label="blocks"];
17->19 [style = bold, label=""];
9->10 [style = solid, label="i"];
3->18 [style = solid, label="blocks"];
8->1 [style = bold, label=""];
6->13 [style = dashed, label="0"];
6->25 [style = dashed, label="0"];
11->3 [style = bold, label=""];
1->16 [style = bold, label=""];
10->12 [style = bold, label=""];
24->17 [style = solid, label="i"];
24->19 [style = solid, label="i"];
10->0 [style = bold, label=""];
24->17 [style = bold, label=""];
17->19 [style = dotted, label="true"];
5->0 [style = solid, label="i"];
3->13 [style = bold, label=""];
23->1 [style = bold, label=""];
10->0 [style = dotted, label="true"];
14->15 [style = bold, label=""];
6->7 [style = bold, label=""];
17->21 [style = dotted, label="true"];
5->10 [style = solid, label="i"];
13->14 [style = bold, label=""];
21->17 [style = bold, label=""];
5->12 [style = solid, label="i"];
16->9 [style = bold, label=""];
9->12 [style = solid, label="i"];
7->22 [style = dashed, label="0"];
3->4 [style = solid, label="blocks"];
1->16 [style = solid, label="blockIds"];
0->5 [style = bold, label=""];
15->1 [style = bold, label=""];
19->21 [style = bold, label=""];
}
