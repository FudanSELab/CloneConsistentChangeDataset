digraph {
3 [style = filled, label = "testHeadersSet['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "verify(httpChannel).sendResponse(responseCaptor.capture(),any())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"abc\",headers.get(DefaultRestChannel.X_OPAQUE_ID).get(0))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "channel.sendResponse(resp)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DefaultRestChannel channel = new DefaultRestChannel(httpChannel,httpRequest,request,bigArrays,handlingSettings,threadPool.getThreadContext())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final RestRequest request = RestRequest.request(xContentRegistry(),httpRequest,httpChannel)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "resp.addHeader(customHeader,customHeaderValue)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Settings settings = Settings.builder().put(HttpTransportSettings.SETTING_HTTP_RESET_COOKIES.getKey(),true).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(headers.get(DefaultRestChannel.SET_COOKIE),hasItem(\"cookie2\"))@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestRestResponse resp = new TestRestResponse()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1,RestRequest.Method.GET,\"/\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testHeadersSet['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertEquals(\"abc\",headers.get(Task.X_OPAQUE_ID).get(0))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(resp.contentType(),headers.get(DefaultRestChannel.CONTENT_TYPE).get(0))@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "TestResponse nioResponse = responseCaptor.getValue()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Map<String,List<String>> headers = httpResponse.headers@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(headers.get(DefaultRestChannel.SET_COOKIE),hasItem(\"cookie\"))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final String customHeaderValue = \"xyz\"@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Map<String,List<String>> headers = nioResponse.headers@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(customHeaderValue,headers.get(customHeader).get(0))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "httpRequest.getHeaders().put(Task.X_OPAQUE_ID,Collections.singletonList(\"abc\"))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "channel.sendResponse(new TestRestResponse())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TestResponse httpResponse = responseCaptor.getValue()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Settings settings = Settings.builder().build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertNull(headers.get(\"non-existent-header\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(Integer.toString(resp.content().length()),headers.get(DefaultRestChannel.CONTENT_LENGTH).get(0))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final String customHeader = \"custom-header\"@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "httpRequest.getHeaders().put(DefaultRestChannel.X_OPAQUE_ID,Collections.singletonList(\"abc\"))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testCookiesSet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2->23 [style = dashed, label="0"];
8->15 [style = solid, label="resp"];
28->29 [style = bold, label=""];
17->5 [style = bold, label=""];
5->20 [style = bold, label=""];
11->14 [style = bold, label=""];
11->12 [style = solid, label="customHeaderValue"];
27->28 [style = bold, label=""];
20->7 [style = solid, label="handlingSettings"];
3->6 [style = bold, label=""];
30->25 [style = bold, label=""];
1->18 [style = bold, label=""];
4->14 [style = solid, label="customHeader"];
25->20 [style = solid, label="settings"];
19->17 [style = bold, label=""];
6->19 [style = bold, label=""];
7->8 [style = bold, label=""];
17->21 [style = dashed, label="0"];
2->13 [style = bold, label=""];
7->26 [style = bold, label=""];
19->5 [style = solid, label="httpRequest"];
21->5 [style = bold, label=""];
26->27 [style = bold, label=""];
12->2 [style = bold, label=""];
11->14 [style = solid, label="customHeaderValue"];
18->10 [style = bold, label=""];
10->16 [style = bold, label=""];
6->25 [style = dashed, label="0"];
23->13 [style = bold, label=""];
15->9 [style = bold, label=""];
16->9 [style = dashed, label="0"];
19->7 [style = solid, label="httpRequest"];
5->7 [style = solid, label="request"];
18->29 [style = dashed, label="0"];
25->19 [style = bold, label=""];
22->6 [style = bold, label=""];
14->15 [style = bold, label=""];
12->23 [style = bold, label=""];
8->4 [style = bold, label=""];
20->7 [style = bold, label=""];
9->1 [style = bold, label=""];
4->11 [style = bold, label=""];
29->24 [style = bold, label=""];
16->12 [style = bold, label=""];
10->24 [style = dashed, label="0"];
6->20 [style = solid, label="settings"];
24->9 [style = bold, label=""];
13->0 [style = bold, label=""];
8->26 [style = dashed, label="0"];
19->21 [style = bold, label=""];
}
