digraph {
8 [style = filled, label = "ConfigDriveBuilder.writeVmMetadata(Mockito.anyListOf(),Mockito.anyString(),Mockito.any())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ConfigDriveBuilder.writeVendorAndNetworkEmptyJsonFile(Mockito.any())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ConfigDriveBuilder.buildConfigDrive(new ArrayList<>(),\"teste\",\"C:\")@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "PowerMockito.doReturn(\"mockIsoDataBase64\").when(,generateAndRetrieveIsoAsBase64IsoMethod).withArguments(Mockito.anyString(),Mockito.anyString(),Mockito.anyString())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "PowerMockito.when(,new ArrayList<>(),\"teste\",\"C:\").thenCallRealMethod()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "buildConfigDriveTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Method linkUserDataMethod = ReflectionUtils.getMethods(,ReflectionUtils.withName(\"linkUserData\")).iterator().next()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ConfigDriveBuilder.linkUserData(Mockito.anyString())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "PowerMockito.when(,method).withArguments(Mockito.any()).thenThrow()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "buildConfigDriveTestIoException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Method generateAndRetrieveIsoAsBase64IsoMethod = ReflectionUtils.getMethods(,ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"mockIsoDataBase64\",returnedIsoData)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "PowerMockito.doNothing().when(,writeVendorAndNetworkEmptyJsonFileMethod).withArguments(Mockito.any())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Method writeVmMetadataMethod = getWriteVmMetadataMethod()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "PowerMockito.when(,new ArrayList<>(),\"teste\",\"C:\").thenCallRealMethod()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Method method = ReflectionUtils.getMethods(,ReflectionUtils.withName(\"writeVendorAndNetworkEmptyJsonFile\")).iterator().next()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(Mockito.anyString(),Mockito.anyString(),Mockito.anyString())@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "PowerMockito.verifyStatic()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "PowerMockito.mockStatic()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Method writeVendorAndNetworkEmptyJsonFileMethod = ReflectionUtils.getMethods(,ReflectionUtils.withName(\"writeVendorAndNetworkEmptyJsonFile\")).iterator().next()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "buildConfigDriveTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PowerMockito.doNothing().when(,linkUserDataMethod).withArguments(Mockito.anyString())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String returnedIsoData = ConfigDriveBuilder.buildConfigDrive(new ArrayList<>(),\"teste\",\"C:\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "PowerMockito.verifyStatic()@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "PowerMockito.doNothing().when(,writeVmMetadataMethod).withArguments(Mockito.anyListOf(),Mockito.anyString(),Mockito.any())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
16->13 [style = bold, label=""];
4->14 [style = bold, label=""];
15->10 [style = bold, label=""];
23->20 [style = bold, label=""];
8->15 [style = bold, label=""];
16->24 [style = dashed, label="0"];
9->4 [style = bold, label=""];
11->6 [style = bold, label=""];
18->12 [style = bold, label=""];
6->24 [style = bold, label=""];
1->18 [style = dashed, label="0"];
5->18 [style = bold, label=""];
2->9 [style = bold, label=""];
19->6 [style = bold, label=""];
0->20 [style = dashed, label="0"];
5->1 [style = bold, label=""];
17->0 [style = bold, label=""];
13->21 [style = dashed, label="0"];
24->21 [style = bold, label=""];
6->16 [style = bold, label=""];
7->2 [style = bold, label=""];
13->7 [style = bold, label=""];
12->8 [style = bold, label=""];
1->12 [style = bold, label=""];
3->17 [style = bold, label=""];
22->6 [style = bold, label=""];
0->5 [style = solid, label="returnedIsoData"];
0->5 [style = bold, label=""];
21->23 [style = bold, label=""];
}
