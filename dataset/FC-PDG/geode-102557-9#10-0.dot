digraph {
17 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "byte(( appBytes = new byte((((@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "wrapFails['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "appData.flip()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verify(spyNioSslEngine,times(1)).expandWriteBuffer(any(),any(),any())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Arrays.fill(appBytes,(byte)0x1F)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "wrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(CLOSED,NEED_TASK,appData.remaining(),appData.remaining()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "verify(spyNioSslEngine,times(1)).handleBlockingTasks()@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "appData.put(appBytes)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "wrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "ByteBuffer wrappedBuffer = outputSharing2.getBuffer()@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "byte(( appBytes = new byte((((@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertThatThrownBy(null).isInstanceOf().hasMessageContaining(\"Error encrypting data\")@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "verify(spyBufferPool,times(1)).expandWriteBufferIfNeeded(any(),any(),any())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "verify(spyNioSslEngine,times(1)).handleBlockingTasks()@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "appData.flip()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
10->22 [style = bold, label=""];
0->1 [style = solid, label="appBytes"];
7->10 [style = bold, label=""];
8->19 [style = bold, label=""];
18->17 [style = bold, label=""];
10->3 [style = bold, label=""];
3->22 [style = dashed, label="0"];
15->0 [style = solid, label="appBytes"];
12->6 [style = bold, label=""];
1->7 [style = bold, label=""];
2->6 [style = solid, label="appData"];
20->2 [style = bold, label=""];
22->8 [style = bold, label=""];
0->4 [style = solid, label="appBytes"];
11->5 [style = bold, label=""];
10->8 [style = solid, label="testEngine"];
2->0 [style = bold, label=""];
19->14 [style = bold, label=""];
5->12 [style = bold, label=""];
0->4 [style = bold, label=""];
3->8 [style = bold, label=""];
15->0 [style = bold, label=""];
17->15 [style = bold, label=""];
17->8 [style = solid, label="appData"];
8->21 [style = bold, label=""];
15->4 [style = solid, label="appBytes"];
7->3 [style = solid, label="testEngine"];
4->1 [style = bold, label=""];
17->16 [style = solid, label="appData"];
6->9 [style = bold, label=""];
8->11 [style = bold, label=""];
16->12 [style = bold, label=""];
13->2 [style = bold, label=""];
}
