digraph {
3 [style = filled, label = "byte(( appBytes = new byte((((@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "byte(( netBytes = new byte((((@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "wrapFails['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Arrays.fill(netBytes,(byte)0x1F)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "wrapFails['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "byte(( appBytes = new byte((((@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "appData.put(appBytes)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ByteBuffer unwrappedBuffer = spyNioSslEngine.unwrap(wrappedData)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "wrappedData.put(netBytes)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "unwrapWithBufferUnderflow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW,NEED_TASK,0,0))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Arrays.fill(appBytes,(byte)0x1F)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(unwrappedBuffer.remaining()).isEqualTo(0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "unwrappedBuffer.flip()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(wrappedData.position()).isEqualTo(netBytes.length)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThatThrownBy(null).isInstanceOf().hasMessageContaining(\"Error encrypting data\")@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "wrappedData.flip()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
9->3 [style = solid, label="appBytes"];
9->18 [style = dashed, label="0"];
23->22 [style = bold, label=""];
14->13 [style = solid, label="wrappedData"];
3->19 [style = dashed, label="0"];
1->23 [style = dashed, label="0"];
22->8 [style = bold, label=""];
14->18 [style = bold, label=""];
9->1 [style = solid, label="appBytes"];
7->9 [style = bold, label=""];
3->4 [style = solid, label="appBytes"];
6->0 [style = bold, label=""];
9->3 [style = bold, label=""];
21->17 [style = bold, label=""];
6->13 [style = bold, label=""];
3->1 [style = solid, label="appBytes"];
4->8 [style = bold, label=""];
19->23 [style = bold, label=""];
0->11 [style = bold, label=""];
8->6 [style = solid, label="testEngine"];
10->3 [style = bold, label=""];
3->1 [style = bold, label=""];
20->21 [style = bold, label=""];
12->10 [style = bold, label=""];
2->16 [style = dashed, label="0"];
8->2 [style = bold, label=""];
18->19 [style = solid, label="netBytes"];
18->19 [style = bold, label=""];
15->14 [style = bold, label=""];
16->6 [style = bold, label=""];
1->4 [style = bold, label=""];
2->0 [style = solid, label="testEngine"];
18->23 [style = solid, label="netBytes"];
2->6 [style = bold, label=""];
7->14 [style = dashed, label="0"];
13->20 [style = bold, label=""];
5->7 [style = bold, label=""];
4->22 [style = dashed, label="0"];
}
