digraph {
14 [style = filled, label = "final Function1<TInner,TKey> innerKeySelector@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final Enumerable<TInner> inner@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final Function2<TSource,Enumerable<TInner>,TResult> resultSelector@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "groupJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final Function2<TSource,Enumerable<TInner>,TResult> resultSelector@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Enumerable<TSource> outer@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final Enumerable<TSource> outer@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Function1<TSource,TKey> outerKeySelector@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Function1<TSource,TKey> outerKeySelector@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final Function1<TInner,TKey> innerKeySelector@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "groupJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final Function1<TInner,TKey> innerKeySelector@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final Function2<TSource,Enumerable<TInner>,TResult> resultSelector@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final Function1<TSource,TKey> outerKeySelector@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "return new AbstractEnumerable<TResult>(){@Override public Enumerator<TResult> enumerator(){return new Enumerator<TResult>(){@Override public TResult current(){final Map.Entry<TKey,TSource> entry = entries.current()final Enumerable<TInner> inners = innerLookup.get(entry.getKey())return resultSelector.apply(entry.getValue(),inners == null? Linq4j.emptyEnumerable(): inners)}@Override public boolean moveNext(){return entries.moveNext()}@Override public void reset(){entries.reset()}@Override public void close(){}}}}@@@3@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final EqualityComparer<TKey> comparer@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "groupJoin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final Enumerable<TSource> outer@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final Enumerable<TInner> inner@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10->7 [style = dotted, label="true"];
1->6 [style = dotted, label="true"];
10->8 [style = dotted, label="true"];
10->6 [style = dotted, label="true"];
16->0 [style = bold, label=""];
6->18 [style = dashed, label="0"];
1->4 [style = dotted, label="true"];
16->12 [style = dotted, label="true"];
1->0 [style = bold, label=""];
1->2 [style = dotted, label="true"];
16->13 [style = dotted, label="true"];
10->11 [style = dotted, label="true"];
10->9 [style = dotted, label="true"];
1->5 [style = dotted, label="true"];
10->0 [style = bold, label=""];
16->14 [style = dotted, label="true"];
16->17 [style = dotted, label="true"];
16->15 [style = dotted, label="true"];
1->3 [style = dotted, label="true"];
16->18 [style = dotted, label="true"];
}
