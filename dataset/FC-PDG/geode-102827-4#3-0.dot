digraph {
37 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testGroups['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119dbd),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@42@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "sn.addServer(l1,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119b61,new ServerLoad(1,1,1,1))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "sn.updateLoad(l1,new ServerLoad(200,1,1,1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "sn.addServer(l2,\"\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119cb4,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "sn.removeServer(l1)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ServerLocation l2 = new ServerLocation(\"localhost\",2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119d51),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "sn.addServer(l2,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119b71,new ServerLoad(1,1,1,1))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "sn.addServer(l2,new String((((,new ServerLoad(100,.2f,1,.2f))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119d14),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119d3c),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,-1))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119d66),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testGroups['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ServerLocation l1 = new ServerLocation(\"localhost\",1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "sn.updateLoad(l2,new ServerLoad(100,1,1,1))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "sn.updateLoad(l2,\"\",new ServerLoad(100,1,1,1))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119daa),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119d28),sn.getServersForQueue(\"c\",Collections.EMPTY_SET,-1))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "sn.updateLoad(l1,new ServerLoad(10,1,1,1))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "sn.addServer(l1,\"\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119ca2,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "sn.addServer(l1,new String((((,new ServerLoad(1,1,1,1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertNull(sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testUpdateLoad['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "sn.removeServer(l1,\"\")@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "LocatorLoadSnapshot sn = new LocatorLoadSnapshot()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertNotNull(sn.getServerForConnection(null,Collections.EMPTY_SET))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "sn.updateLoad(l1,\"\",new ServerLoad(10,1,1,1))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->28 [style = solid, label="l2"];
12->31 [style = solid, label="l1"];
13->25 [style = bold, label=""];
8->10 [style = bold, label=""];
18->24 [style = bold, label=""];
12->29 [style = solid, label="l1"];
12->1 [style = solid, label="l1"];
12->22 [style = solid, label="l1"];
6->34 [style = solid, label="l2"];
28->11 [style = bold, label=""];
27->3 [style = bold, label=""];
6->17 [style = solid, label="l2"];
35->33 [style = bold, label=""];
14->19 [style = bold, label=""];
19->11 [style = bold, label=""];
7->0 [style = bold, label=""];
14->28 [style = bold, label=""];
30->9 [style = bold, label=""];
4->2 [style = bold, label=""];
25->14 [style = bold, label=""];
12->2 [style = solid, label="l1"];
12->16 [style = solid, label="l1"];
6->16 [style = solid, label="l2"];
6->14 [style = solid, label="l2"];
15->3 [style = bold, label=""];
12->6 [style = bold, label=""];
26->4 [style = bold, label=""];
12->37 [style = solid, label="l1"];
22->5 [style = bold, label=""];
12->17 [style = solid, label="l1"];
6->29 [style = bold, label=""];
1->17 [style = bold, label=""];
31->34 [style = bold, label=""];
2->13 [style = bold, label=""];
29->26 [style = bold, label=""];
5->16 [style = bold, label=""];
20->18 [style = bold, label=""];
6->19 [style = solid, label="l2"];
32->9 [style = bold, label=""];
12->8 [style = solid, label="l1"];
6->20 [style = solid, label="l2"];
3->20 [style = bold, label=""];
10->26 [style = dashed, label="0"];
12->35 [style = solid, label="l1"];
6->31 [style = bold, label=""];
6->36 [style = solid, label="l2"];
4->36 [style = dashed, label="0"];
34->37 [style = bold, label=""];
16->1 [style = bold, label=""];
6->5 [style = solid, label="l2"];
12->25 [style = solid, label="l1"];
37->38 [style = bold, label=""];
12->27 [style = solid, label="l1"];
12->15 [style = solid, label="l1"];
33->36 [style = bold, label=""];
6->24 [style = solid, label="l2"];
6->8 [style = bold, label=""];
6->26 [style = solid, label="l2"];
19->28 [style = dashed, label="0"];
17->15 [style = bold, label=""];
6->33 [style = solid, label="l2"];
11->22 [style = bold, label=""];
10->4 [style = bold, label=""];
21->25 [style = dashed, label="0"];
6->1 [style = solid, label="l2"];
15->27 [style = dashed, label="0"];
9->12 [style = bold, label=""];
12->11 [style = solid, label="l1"];
6->0 [style = solid, label="l2"];
17->27 [style = bold, label=""];
8->31 [style = dashed, label="0"];
38->35 [style = bold, label=""];
13->21 [style = bold, label=""];
24->7 [style = bold, label=""];
23->9 [style = bold, label=""];
12->38 [style = solid, label="l1"];
6->10 [style = solid, label="l2"];
6->3 [style = solid, label="l2"];
8->29 [style = dashed, label="0"];
6->13 [style = solid, label="l2"];
21->14 [style = bold, label=""];
12->21 [style = solid, label="l1"];
}
