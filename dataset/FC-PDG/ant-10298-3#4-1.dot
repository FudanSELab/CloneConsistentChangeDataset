digraph {
1 [style = filled, label = "String(( l = p.list()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "p = new Path(project,\"SYS:\JAVA/lib/rt.jar:SYS:\JAVA/lib/classes.zip\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(\"test resolved relative to project's basedir\",l(1(,endsWith(\"\test\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "isUnixStyle@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"sys:\test\",l(0(.toLowerCase(Locale.US))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"\sys\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(\"/test\",l(1()@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"no multiple character-length volumes on Windows\",3,l.length)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(\"java/lib/rt.jar resolved relative to project's basedir\",l(1(,endsWith(\"\JAVA\lib\rt.jar\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(\"/JAVA/lib/classes.zip\",l(2()@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"/SYS\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(\"volumes on NetWare\",2,l.length)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"/sys\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "testConstructorNetWareStyleUnixPS['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "p = new Path(project,\"sys:/test\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(\"java/lib/classes.zip resolved relative to project's basedir\",l(2(,endsWith(\"\JAVA\lib\classes.zip\"))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testConstructorNetWareStyleUnixFS['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"no drives on Unix\",3,l.length)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "isNetWare@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"no drives on Unix\",2,l.length)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testConstructorNetWareStyleUnixFS['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "isNetWare@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"/JAVA/lib/rt.jar\",l(1()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(\"test resolved relative to project's basedir\",l(1(,endsWith(\"\test\"))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"/sys\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertEquals(\"sys:\java\lib\classes.zip\",l(1(.toLowerCase(Locale.US))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"sys:\java\lib\rt.jar\",l(0(.toLowerCase(Locale.US))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"\SYS\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(\"sys resolved relative to project's basedir\",l(0(,endsWith(\"\sys\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"no multiple character-length volumes on Windows\",2,l.length)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
2->20 [style = dotted, label="true"];
8->10 [style = bold, label=""];
1->28 [style = solid, label="l"];
12->3 [style = dotted, label="true"];
12->11 [style = dotted, label="false"];
18->24 [style = bold, label=""];
7->21 [style = dashed, label="0"];
1->13 [style = solid, label="l"];
15->7 [style = bold, label=""];
5->9 [style = bold, label=""];
12->10 [style = dotted, label="false"];
1->10 [style = solid, label="l"];
19->29 [style = bold, label=""];
1->21 [style = solid, label="l"];
2->3 [style = bold, label=""];
26->1 [style = bold, label=""];
1->27 [style = solid, label="l"];
1->20 [style = solid, label="l"];
12->11 [style = bold, label=""];
2->17 [style = dotted, label="true"];
23->26 [style = bold, label=""];
2->15 [style = dotted, label="true"];
2->3 [style = dotted, label="false"];
9->27 [style = dashed, label="0"];
5->15 [style = bold, label=""];
3->6 [style = bold, label=""];
10->28 [style = dashed, label="0"];
2->21 [style = dotted, label="true"];
1->29 [style = solid, label="l"];
1->25 [style = solid, label="l"];
4->26 [style = dashed, label="0"];
3->22 [style = dashed, label="0"];
9->7 [style = bold, label=""];
3->22 [style = bold, label=""];
2->12 [style = bold, label=""];
1->14 [style = solid, label="l"];
3->24 [style = dotted, label="true"];
8->13 [style = dashed, label="0"];
6->18 [style = dashed, label="0"];
29->28 [style = bold, label=""];
12->8 [style = dotted, label="false"];
22->18 [style = bold, label=""];
2->12 [style = dotted, label="false"];
21->20 [style = bold, label=""];
2->9 [style = dotted, label="true"];
1->8 [style = solid, label="l"];
3->28 [style = dotted, label="false"];
3->19 [style = bold, label=""];
2->27 [style = dotted, label="true"];
12->6 [style = dotted, label="true"];
0->4 [style = bold, label=""];
9->15 [style = dashed, label="0"];
5->17 [style = dashed, label="0"];
11->19 [style = dashed, label="0"];
2->7 [style = dotted, label="true"];
3->18 [style = dotted, label="true"];
3->19 [style = dotted, label="false"];
11->13 [style = bold, label=""];
3->29 [style = dotted, label="false"];
3->22 [style = dotted, label="true"];
28->25 [style = bold, label=""];
1->7 [style = solid, label="l"];
11->8 [style = bold, label=""];
1->9 [style = solid, label="l"];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
12->3 [style = bold, label=""];
1->15 [style = solid, label="l"];
17->27 [style = bold, label=""];
16->4 [style = bold, label=""];
2->5 [style = dotted, label="true"];
27->21 [style = bold, label=""];
13->14 [style = bold, label=""];
3->25 [style = dotted, label="false"];
12->14 [style = dotted, label="false"];
10->14 [style = dashed, label="0"];
8->29 [style = dashed, label="0"];
2->5 [style = bold, label=""];
12->13 [style = dotted, label="false"];
}
