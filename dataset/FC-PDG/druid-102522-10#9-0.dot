digraph {
11 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L,1,1L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getThrownAway())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "SegmentDescriptor desc1 = SD(task1,\"2010/P1D\",0)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "SegmentDescriptor desc1 = sd(task1,\"2010/P1D\",0)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(1,task2.getRunner().getRowIngestionMeters().getProcessed())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "SegmentDescriptor desc3 = SD(task2,\"2012/P1D\",0)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "final KafkaIndexTask task2 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final KafkaIndexTask task2 = createTask(null,new KafkaIndexTaskIOConfig(1,\"sequence1\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(1,0L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(1,1L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "insertData()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testRunTwoTasksTwoPartitions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3),publishedDescriptors())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(3,task1.getRunner().getRowIngestionMeters().getProcessed())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testRunReplicas['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "SegmentDescriptor desc2 = sd(task1,\"2011/P1D\",0)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "testRunTwoTasksTwoPartitions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "Assert.assertEquals(3,task2.getRunner().getRowIngestionMeters().getProcessed())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc3))@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "SegmentDescriptor desc3 = sd(task2,\"2012/P1D\",0)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "SegmentDescriptor desc2 = SD(task1,\"2011/P1D\",0)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->20 [style = solid, label="desc2"];
25->19 [style = solid, label="desc3"];
22->19 [style = solid, label="desc1"];
3->22 [style = solid, label="task1"];
24->19 [style = solid, label="desc2"];
4->17 [style = bold, label=""];
12->19 [style = solid, label="desc2"];
3->17 [style = solid, label="task1"];
12->27 [style = solid, label="desc2"];
3->24 [style = solid, label="task1"];
17->19 [style = solid, label="desc1"];
29->3 [style = bold, label=""];
12->15 [style = bold, label=""];
17->22 [style = dashed, label="0"];
28->13 [style = bold, label=""];
19->11 [style = bold, label=""];
23->3 [style = bold, label=""];
31->2 [style = bold, label=""];
0->21 [style = bold, label=""];
3->0 [style = solid, label="task1"];
17->13 [style = solid, label="desc1"];
5->14 [style = bold, label=""];
15->19 [style = bold, label=""];
12->13 [style = solid, label="desc2"];
22->13 [style = solid, label="desc1"];
2->4 [style = bold, label=""];
10->21 [style = solid, label="task2"];
10->15 [style = solid, label="task2"];
21->5 [style = bold, label=""];
3->10 [style = bold, label=""];
10->25 [style = solid, label="task2"];
24->20 [style = solid, label="desc2"];
17->12 [style = bold, label=""];
1->6 [style = bold, label=""];
15->25 [style = dashed, label="0"];
6->31 [style = bold, label=""];
27->26 [style = bold, label=""];
10->30 [style = dashed, label="0"];
19->26 [style = dashed, label="0"];
8->2 [style = bold, label=""];
16->1 [style = bold, label=""];
25->7 [style = solid, label="desc3"];
17->27 [style = solid, label="desc1"];
24->25 [style = bold, label=""];
12->24 [style = dashed, label="0"];
11->13 [style = bold, label=""];
10->0 [style = bold, label=""];
6->8 [style = bold, label=""];
25->19 [style = bold, label=""];
9->3 [style = bold, label=""];
15->7 [style = solid, label="desc3"];
14->18 [style = bold, label=""];
30->0 [style = bold, label=""];
26->28 [style = bold, label=""];
22->24 [style = bold, label=""];
3->12 [style = solid, label="task1"];
20->7 [style = bold, label=""];
15->19 [style = solid, label="desc3"];
8->31 [style = dashed, label="0"];
30->21 [style = solid, label="task2"];
3->30 [style = bold, label=""];
17->28 [style = solid, label="desc1"];
12->27 [style = bold, label=""];
4->22 [style = bold, label=""];
13->20 [style = bold, label=""];
18->16 [style = bold, label=""];
}
