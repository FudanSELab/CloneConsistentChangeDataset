digraph {
1 [style = filled, label = "final Subscription s = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "observableWithTimeout.subscribe(subscriber)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "shouldUnsubscribeFromUnderlyingSubscriptionOnTimeout['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "shouldUnsubscribeFromUnderlyingSubscriptionOnTimeout['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "shouldUnsubscribeFromUnderlyingSubscriptionOnTimeout['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testScheduler.advanceTimeBy(2000,TimeUnit.MILLISECONDS)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Observable<String> never = Observable.unsafeCreate(new ObservableSource<String>(){@Override public void subscribe(Observer<? super String> observer){observer.onSubscribe(upstream)}})@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TestObserverEx<String> observer = new TestObserverEx<String>()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Flowable<String> never = Flowable.unsafeCreate(new Publisher<String>(){@Override public void subscribe(Subscriber<? super String> subscriber){subscriber.onSubscribe(s)}})@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Observable<String> observableWithTimeout = never.timeout(1000,TimeUnit.MILLISECONDS,testScheduler)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Flowable<String> observableWithTimeout = never.timeout(1000,TimeUnit.MILLISECONDS,testScheduler)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "observer.assertFailureAndMessage(,timeoutMessage(1000,TimeUnit.MILLISECONDS))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "verify(upstream,times(1)).dispose()@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "subscriber.assertFailureAndMessage(,timeoutMessage(1000,TimeUnit.MILLISECONDS))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "verify(s,times(1)).cancel()@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Disposable upstream = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestScheduler testScheduler = new TestScheduler()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "observableWithTimeout.subscribe(observer)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TestSubscriberEx<String> subscriber = new TestSubscriberEx<String>()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "TestSubscriberEx<String> subscriber = new TestSubscriberEx<>()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
3->8 [style = solid, label="subscriber"];
5->14 [style = dashed, label="0"];
11->1 [style = bold, label=""];
6->18 [style = bold, label=""];
12->17 [style = bold, label=""];
4->15 [style = bold, label=""];
1->5 [style = solid, label="s"];
18->12 [style = bold, label=""];
6->0 [style = bold, label=""];
4->2 [style = bold, label=""];
16->14 [style = solid, label="upstream"];
6->0 [style = solid, label="testScheduler"];
15->19 [style = bold, label=""];
13->16 [style = bold, label=""];
2->15 [style = dashed, label="0"];
0->10 [style = bold, label=""];
3->12 [style = dashed, label="0"];
5->6 [style = bold, label=""];
12->17 [style = solid, label="observer"];
10->8 [style = bold, label=""];
7->19 [style = dashed, label="0"];
3->8 [style = bold, label=""];
10->8 [style = solid, label="subscriber"];
0->18 [style = dashed, label="0"];
16->14 [style = bold, label=""];
8->17 [style = dashed, label="0"];
3->10 [style = dashed, label="0"];
6->18 [style = solid, label="testScheduler"];
8->4 [style = bold, label=""];
2->7 [style = bold, label=""];
9->1 [style = bold, label=""];
14->6 [style = bold, label=""];
17->4 [style = bold, label=""];
}
