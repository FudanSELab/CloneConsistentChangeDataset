digraph {
25 [style = filled, label = "final AndPredicate andPredicate@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "int stopIndex = whereSegment.getStopIndex()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "i < predicates.size()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "ExpressionSegment expression = predicates.get(i)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Collection<SQLToken> result = new LinkedList<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "i == 0@@@22@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "removeTokens.add(isFirstElement(index)? new RemoveToken(each.getStartIndex(),iterator.next().getStartIndex() - 1): new RemoveToken(previousElementStopIndex + 1,each.getStopIndex()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Collection<ColumnSegment> columnSegments = insertColumnsSegment.getColumns()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "final InsertColumnsSegment insertColumnsSegment@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String shadowColumn = getShadowColumn()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int index = 0@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "result.add(new RemoveToken(startIndex,stopIndex))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final Collection<RemoveToken> removeTokens@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "int stopIndex = predicates.get(i).getStopIndex()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "!getShadowRule().getColumn().equals(column.get().getIdentifier().getValue())@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "!column.isPresent()@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "i++@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "return result@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "List<ColumnSegment> columnSegments = (LinkedList<ColumnSegment>)insertColumnsSegment.getColumns()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "result.add(new RemoveToken(startIndex,stopIndex))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Optional<ColumnSegment> column = ColumnExtractor.extract(expression)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "generateSQLTokens['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int previousElementStopIndex = 0@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "iterator.hasNext()@@@8@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "return result@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ColumnSegment each = iterator.next()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "int startIndex = predicates.get(0).getStartIndex()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "final WhereSegment whereSegment@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "shadowColumn.equals(each.getIdentifier().getValue())@@@7@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "previousElementStopIndex = each.getStopIndex()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final Collection<RemoveToken> removeTokens@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "shadowColumn.equals(each.getIdentifier().getValue())@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "1 == predicates.size()@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "return result@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "int startIndex = predicates.get(i - 1).getStopIndex() + 1@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "index++@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "List<ExpressionSegment> predicates = (LinkedList<ExpressionSegment>)andPredicate.getPredicates()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "int i = 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "int startIndex = whereSegment.getStartIndex()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Iterator<ColumnSegment> iterator = columnSegments.iterator()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "int stopIndex = predicates.get(i + 1).getStartIndex() - 1@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "generateRemoveTokenForShadow['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "generateRemoveTokenForShadow['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "return result@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "result.add(new RemoveToken(startIndex,stopIndex))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "removeTokens.add(createShadowColumnRemoveToken(columnSegments,index))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32->22 [style = bold, label=""];
1->5 [style = solid, label="columnSegments"];
4->5 [style = solid, label="index"];
27->28 [style = bold, label=""];
24->34 [style = bold, label=""];
19->36 [style = bold, label=""];
21->24 [style = bold, label=""];
9->10 [style = bold, label=""];
3->4 [style = bold, label=""];
23->29 [style = bold, label=""];
17->8 [style = dotted, label="true"];
21->26 [style = bold, label=""];
3->5 [style = bold, label=""];
21->26 [style = dotted, label="true"];
22->38 [style = dotted, label="true"];
27->28 [style = solid, label="stopIndex"];
17->14 [style = bold, label=""];
10->12 [style = bold, label=""];
22->42 [style = dotted, label="true"];
21->23 [style = dotted, label="true"];
12->18 [style = bold, label=""];
35->37 [style = dotted, label="true"];
6->0 [style = dotted, label="true"];
31->22 [style = solid, label="i"];
7->4 [style = solid, label="index"];
16->9 [style = bold, label=""];
4->16 [style = bold, label=""];
10->16 [style = solid, label="index"];
23->29 [style = solid, label="stopIndex"];
4->3 [style = bold, label=""];
7->16 [style = solid, label="index"];
7->11 [style = bold, label=""];
22->19 [style = dotted, label="true"];
21->20 [style = dotted, label="true"];
28->30 [style = bold, label=""];
1->14 [style = dashed, label="0"];
36->44 [style = bold, label=""];
21->29 [style = dotted, label="true"];
22->43 [style = bold, label=""];
22->33 [style = dotted, label="true"];
12->18 [style = dotted, label="true"];
34->42 [style = bold, label=""];
22->24 [style = dotted, label="true"];
40->20 [style = solid, label="result"];
11->16 [style = solid, label="previousElementStopIndex"];
35->40 [style = bold, label=""];
29->20 [style = bold, label=""];
45->39 [style = solid, label="expression"];
44->28 [style = solid, label="startIndex"];
3->5 [style = dotted, label="true"];
18->4 [style = bold, label=""];
12->10 [style = dotted, label="true"];
36->44 [style = dotted, label="true"];
38->22 [style = solid, label="i"];
12->4 [style = dotted, label="true"];
15->12 [style = bold, label=""];
22->32 [style = dotted, label="true"];
19->22 [style = bold, label=""];
31->21 [style = solid, label="i"];
35->25 [style = dotted, label="true"];
22->21 [style = dotted, label="true"];
4->9 [style = bold, label=""];
7->31 [style = dashed, label="0"];
22->45 [style = bold, label=""];
31->38 [style = solid, label="i"];
34->42 [style = solid, label="stopIndex"];
32->19 [style = bold, label=""];
24->42 [style = solid, label="startIndex"];
36->28 [style = dotted, label="true"];
9->16 [style = solid, label="previousElementStopIndex"];
5->16 [style = dashed, label="0"];
6->1 [style = bold, label=""];
30->21 [style = bold, label=""];
6->8 [style = dotted, label="true"];
39->32 [style = bold, label=""];
5->4 [style = bold, label=""];
22->36 [style = dotted, label="true"];
4->19 [style = dashed, label="0"];
41->31 [style = bold, label=""];
1->2 [style = bold, label=""];
14->2 [style = bold, label=""];
7->5 [style = solid, label="index"];
36->30 [style = dotted, label="true"];
45->39 [style = bold, label=""];
22->34 [style = dotted, label="true"];
36->27 [style = dotted, label="true"];
31->22 [style = bold, label=""];
7->10 [style = solid, label="index"];
22->39 [style = dotted, label="true"];
42->33 [style = bold, label=""];
22->45 [style = dotted, label="true"];
7->3 [style = bold, label=""];
11->15 [style = bold, label=""];
38->21 [style = solid, label="i"];
40->43 [style = solid, label="result"];
36->21 [style = bold, label=""];
26->23 [style = bold, label=""];
40->41 [style = bold, label=""];
38->45 [style = solid, label="i"];
26->29 [style = solid, label="startIndex"];
33->38 [style = bold, label=""];
4->16 [style = dotted, label="true"];
40->30 [style = solid, label="result"];
40->33 [style = solid, label="result"];
2->7 [style = bold, label=""];
38->22 [style = bold, label=""];
44->27 [style = bold, label=""];
20->24 [style = bold, label=""];
17->13 [style = dotted, label="true"];
31->45 [style = solid, label="i"];
12->9 [style = dotted, label="true"];
}
