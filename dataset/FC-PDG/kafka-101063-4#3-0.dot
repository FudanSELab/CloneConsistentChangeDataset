digraph {
10 [style = filled, label = "assertThat(collector.collected().get(0).timestamp(),equalTo(0L))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(collector.collected().get(0).key(),equalTo(key1))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "store = new ChangeLoggingTimestampedWindowBytesStore(inner,true)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(42L,sent.get(WindowKeySchema.toStoreKeyBinary(bytesKey,0,2)).timestamp())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "inner.put(bytesKey,valueAndTimestamp,0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(collector.collected().get(1).value(),equalTo(value))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "store.put(bytesKey,value)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "store.put(bytesKey,value)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "shouldRetainDuplicatesWhenSet['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final Bytes key1 = WindowKeySchema.toStoreKeyBinary(bytesKey,0,1)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "EasyMock.expectLastCall().times(2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertArrayEquals(value,(byte(()sent.get(WindowKeySchema.toStoreKeyBinary(bytesKey,0,2)).value())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final Bytes key2 = WindowKeySchema.toStoreKeyBinary(bytesKey,0,2)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(collector.collected().get(0).value(),equalTo(value))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertArrayEquals(value,(byte(()sent.get(WindowKeySchema.toStoreKeyBinary(bytesKey,0,1)))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "store.put(bytesKey,valueAndTimestamp)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(collector.collected().size(),equalTo(2))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertArrayEquals(value,(byte(()sent.get(WindowKeySchema.toStoreKeyBinary(bytesKey,0,1)).value())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "store.put(bytesKey,valueAndTimestamp)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(collector.collected().get(1).timestamp(),equalTo(0L))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "EasyMock.verify(inner)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "init()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(42L,sent.get(WindowKeySchema.toStoreKeyBinary(bytesKey,0,1)).timestamp())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "shouldRetainDuplicatesWhenSet['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "shouldRetainDuplicatesWhenSet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(collector.collected().get(1).key(),equalTo(key2))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "store = new ChangeLoggingWindowBytesStore(inner,true)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.verify(inner)@@@11@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "inner.put(bytesKey,value,0)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.verify(inner)@@@18@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertArrayEquals(value,(byte(()sent.get(WindowKeySchema.toStoreKeyBinary(bytesKey,0,2)))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3->29 [style = dashed, label="0"];
16->18 [style = bold, label=""];
20->13 [style = bold, label=""];
22->2 [style = bold, label=""];
23->30 [style = bold, label=""];
9->2 [style = bold, label=""];
26->29 [style = bold, label=""];
18->11 [style = bold, label=""];
8->3 [style = bold, label=""];
19->10 [style = bold, label=""];
9->22 [style = dashed, label="0"];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
21->25 [style = bold, label=""];
15->19 [style = bold, label=""];
0->20 [style = dashed, label="0"];
4->21 [style = dashed, label="0"];
3->9 [style = bold, label=""];
6->20 [style = bold, label=""];
25->24 [style = bold, label=""];
13->16 [style = solid, label="key2"];
7->5 [style = bold, label=""];
30->21 [style = bold, label=""];
20->15 [style = solid, label="key1"];
5->28 [style = dashed, label="0"];
5->6 [style = bold, label=""];
10->16 [style = bold, label=""];
7->28 [style = bold, label=""];
0->4 [style = bold, label=""];
28->23 [style = bold, label=""];
0->30 [style = dashed, label="0"];
17->3 [style = bold, label=""];
14->15 [style = bold, label=""];
4->1 [style = bold, label=""];
2->7 [style = bold, label=""];
29->22 [style = bold, label=""];
4->13 [style = dashed, label="0"];
13->14 [style = bold, label=""];
24->27 [style = bold, label=""];
6->23 [style = dashed, label="0"];
}
