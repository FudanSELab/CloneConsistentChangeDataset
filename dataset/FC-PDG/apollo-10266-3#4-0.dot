digraph {
22 [style = filled, label = "String someStringValue = \"someStringValue\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "String someKey = \"someKey\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Integer anotherValue = 3@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Integer someValue = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "someProperties.setProperty(someStringKey,someStringValue)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "defineComponent(,)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "someProperties.setProperty(someKey,String.valueOf(someValue))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "verify(someProperties,times(1)).getProperty(someKey)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "someProperties = mock()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(someProperties.getProperty(anotherKey)).thenReturn(String.valueOf(anotherValue))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Long someValue = 2l@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "String someKey = \"someKey\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "someProperties = new Properties()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "verify(someProperties,times(2)).getProperty(someKey)@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "String someStringKey = \"someStringKey\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(someDefaultValue,defaultConfig.getLongProperty(someStringKey,someDefaultValue))@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(someProperties,times(1)).getProperty(anotherKey)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "MockInjector.setInstance(,new MockConfigUtilWithSmallCache())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testGetLongProperty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(someValue,defaultConfig.getLongProperty(someKey,someDefaultValue))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "when(someProperties.getProperty(someKey)).thenReturn(String.valueOf(someValue))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Long someDefaultValue = -1l@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Integer someDefaultValue = -1@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23->31 [style = bold, label=""];
24->28 [style = bold, label=""];
19->9 [style = solid, label="someKey"];
2->20 [style = bold, label=""];
20->17 [style = bold, label=""];
22->15 [style = bold, label=""];
31->25 [style = bold, label=""];
15->7 [style = solid, label="anotherKey"];
15->32 [style = solid, label="someKey"];
21->19 [style = bold, label=""];
28->30 [style = bold, label=""];
24->10 [style = solid, label="someDefaultValue"];
10->14 [style = bold, label=""];
16->10 [style = bold, label=""];
26->32 [style = solid, label="someValue"];
22->30 [style = solid, label="someStringValue"];
13->20 [style = dashed, label="0"];
26->23 [style = solid, label="someValue"];
30->23 [style = bold, label=""];
25->32 [style = bold, label=""];
15->23 [style = solid, label="someKey"];
19->10 [style = solid, label="someKey"];
17->4 [style = solid, label="someProperties"];
3->12 [style = solid, label="anotherValue"];
2->10 [style = solid, label="someDefaultValue"];
0->26 [style = dashed, label="0"];
2->9 [style = solid, label="someDefaultValue"];
11->19 [style = bold, label=""];
15->3 [style = bold, label=""];
7->8 [style = bold, label=""];
27->22 [style = bold, label=""];
26->24 [style = bold, label=""];
0->10 [style = solid, label="someValue"];
32->10 [style = bold, label=""];
12->7 [style = bold, label=""];
0->15 [style = bold, label=""];
15->12 [style = solid, label="anotherKey"];
19->0 [style = bold, label=""];
2->14 [style = solid, label="someDefaultValue"];
15->26 [style = bold, label=""];
2->13 [style = bold, label=""];
2->12 [style = solid, label="someDefaultValue"];
27->10 [style = solid, label="someStringKey"];
6->4 [style = bold, label=""];
13->17 [style = bold, label=""];
29->27 [style = bold, label=""];
19->5 [style = solid, label="someKey"];
3->7 [style = solid, label="anotherValue"];
0->14 [style = solid, label="someValue"];
3->2 [style = bold, label=""];
10->32 [style = dashed, label="0"];
5->12 [style = bold, label=""];
18->6 [style = bold, label=""];
2->7 [style = solid, label="someDefaultValue"];
15->8 [style = solid, label="anotherKey"];
14->10 [style = dashed, label="0"];
19->1 [style = solid, label="someKey"];
0->18 [style = solid, label="someValue"];
0->9 [style = solid, label="someValue"];
8->9 [style = bold, label=""];
3->6 [style = solid, label="anotherValue"];
28->31 [style = solid, label="someProperties"];
24->32 [style = solid, label="someDefaultValue"];
19->14 [style = solid, label="someKey"];
9->1 [style = bold, label=""];
17->18 [style = bold, label=""];
4->16 [style = bold, label=""];
27->30 [style = solid, label="someStringKey"];
14->5 [style = bold, label=""];
}
