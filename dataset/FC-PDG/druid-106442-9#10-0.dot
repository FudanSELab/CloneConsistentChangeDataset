digraph {
10 [style = filled, label = "testGroupByWithOrderLimit2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query)),\"no-limit\")@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L),makeRow(query,\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L),makeRow(query,\"2011-04-01\",\"alias\",\"travel\",\"rows\",2L,\"idx\",243L),makeRow(query,\"2011-04-01\",\"alias\",\"technology\",\"rows\",2L,\"idx\",177L),makeRow(query,\"2011-04-01\",\"alias\",\"news\",\"rows\",2L,\"idx\",221L),makeRow(query,\"2011-04-01\",\"alias\",\"health\",\"rows\",2L,\"idx\",216L),makeRow(query,\"2011-04-01\",\"alias\",\"entertainment\",\"rows\",2L,\"idx\",319L),makeRow(query,\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),makeRow(query,\"2011-04-01\",\"alias\",\"automotive\",\"rows\",2L,\"idx\",269L))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "QueryRunner<Row> mergeRunner = factory.getToolchest().mergeResults(runner)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(\"rows\",OrderByColumnSpec.Direction.DESCENDING).addOrderByColumn(\"alias\",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build()),context),\"limited\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new DoubleSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(\"idx\",OrderByColumnSpec.Direction.DESCENDING).addOrderByColumn(\"alias\",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ResponseContext context = ResponseContext.createEmpty()@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"travel\",\"rows\",2L,\"idx\",243L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"technology\",\"rows\",2L,\"idx\",177L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news\",\"rows\",2L,\"idx\",221L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health\",\"rows\",2L,\"idx\",216L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"entertainment\",\"rows\",2L,\"idx\",319L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"automotive\",\"rows\",2L,\"idx\",269L))@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ResponseContext context = ResponseContext.createEmpty()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "QueryRunner<ResultRow> mergeRunner = factory.getToolchest().mergeResults(runner)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final GroupByQuery query = builder.build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query),context),\"no-limit\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build()),context),\"limited\")@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "GroupByQuery query = builder.build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "QueryRunner<Row> mergeRunner = factory.getToolchest().mergeResults(runner)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testGroupByWithOrderLimit3['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testGroupByWithOrderLimit2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<Row> expectedResults = GroupByQueryRunnerTestHelper.createExpectedRows(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a56a25,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a56a2c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a56a33,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a56a3a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a56a41,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a56a48,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a56a4f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a56a56,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a56a5d,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a56a64)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query),context),\"no-limit\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->11 [style = solid, label="expectedResults"];
4->18 [style = dashed, label="0"];
1->4 [style = bold, label=""];
7->2 [style = solid, label="expectedResults"];
5->2 [style = solid, label="context"];
15->14 [style = solid, label="expectedResults"];
3->1 [style = bold, label=""];
2->6 [style = bold, label=""];
19->20 [style = bold, label=""];
7->6 [style = solid, label="expectedResults"];
16->20 [style = solid, label="context"];
0->2 [style = bold, label=""];
18->15 [style = bold, label=""];
12->11 [style = bold, label=""];
20->14 [style = bold, label=""];
5->6 [style = solid, label="context"];
8->9 [style = solid, label="expectedResults"];
16->19 [style = bold, label=""];
11->9 [style = bold, label=""];
15->16 [style = bold, label=""];
16->14 [style = solid, label="context"];
4->7 [style = bold, label=""];
4->11 [style = solid, label="query"];
13->17 [style = bold, label=""];
7->5 [style = bold, label=""];
1->17 [style = dashed, label="0"];
5->0 [style = bold, label=""];
2->9 [style = dashed, label="0"];
4->8 [style = bold, label=""];
15->20 [style = solid, label="expectedResults"];
10->1 [style = bold, label=""];
18->20 [style = solid, label="query"];
4->2 [style = solid, label="query"];
8->12 [style = bold, label=""];
17->18 [style = bold, label=""];
4->8 [style = solid, label="query"];
}
