digraph {
19 [style = filled, label = "verifyInEquality(SessionWindows.with(9),SessionWindows.with(1))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertNotEquals(SessionWindows.with(9),SessionWindows.with(1))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "verifyInEquality(SessionWindows.with(1).grace(0).until(7),SessionWindows.with(1).grace(6).until(7))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertNotEquals(TimeWindows.of(3).grace(2),TimeWindows.of(3).grace(1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertNotEquals(SessionWindows.with(9).hashCode(),SessionWindows.with(1).hashCode())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "verifyInEquality(SessionWindows.with(1).grace(9),SessionWindows.with(1).grace(6))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertNotEquals(SessionWindows.with(1).grace(0).until(7),SessionWindows.with(1).grace(6).until(7))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertNotEquals(SessionWindows.with(2).grace(6).until(7),SessionWindows.with(1).grace(6).until(7))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(2).until(9),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertNotEquals(SessionWindows.with(2).grace(6).until(7).hashCode(),SessionWindows.with(1).grace(6).until(7).hashCode())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "verifyInEquality(SessionWindows.with(1).until(9),SessionWindows.with(1).until(7))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertNotEquals(TimeWindows.of(3).until(9),TimeWindows.of(3).until(4))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "verifyInEquality(SessionWindows.with(1).grace(6).until(70),SessionWindows.with(1).grace(6).until(7))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertNotEquals(TimeWindows.of(3).grace(2).hashCode(),TimeWindows.of(3).grace(1).hashCode())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertNotEquals(SessionWindows.with(1).until(9).hashCode(),SessionWindows.with(1).until(7).hashCode())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(1).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertNotEquals(SessionWindows.with(1).grace(9).hashCode(),SessionWindows.with(1).grace(6).hashCode())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "verifyInEquality(SessionWindows.with(2).grace(6).until(7),SessionWindows.with(1).grace(6).until(7))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertNotEquals(SessionWindows.with(1).until(9),SessionWindows.with(1).until(7))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).hashCode(),TimeWindows.of(3).advanceBy(1).hashCode())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertNotEquals(TimeWindows.of(4).advanceBy(2).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertNotEquals(TimeWindows.of(4).advanceBy(2).grace(2).until(4).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2),TimeWindows.of(3).advanceBy(1))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(1).grace(2).until(4).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertNotEquals(SessionWindows.with(1).grace(9),SessionWindows.with(1).grace(6))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(1).until(4).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNotEquals(SessionWindows.with(1).grace(6).until(70),SessionWindows.with(1).grace(6).until(7))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertNotEquals(SessionWindows.with(1).grace(0).until(7).hashCode(),SessionWindows.with(1).grace(6).until(7).hashCode())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "assertNotEquals(TimeWindows.of(3).until(9).hashCode(),TimeWindows.of(3).until(4).hashCode())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(1).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertNotEquals(TimeWindows.of(9).hashCode(),TimeWindows.of(3).hashCode())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(2).until(9).hashCode(),TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode())@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertNotEquals(TimeWindows.of(9),TimeWindows.of(3))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertNotEquals(SessionWindows.with(1).grace(6).until(70).hashCode(),SessionWindows.with(1).grace(6).until(7).hashCode())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10->15 [style = dashed, label="0"];
0->9 [style = bold, label=""];
30->22 [style = bold, label=""];
10->21 [style = dashed, label="0"];
23->30 [style = bold, label=""];
11->16 [style = dashed, label="0"];
3->18 [style = dashed, label="0"];
1->19 [style = dashed, label="0"];
35->33 [style = bold, label=""];
24->34 [style = bold, label=""];
10->3 [style = bold, label=""];
31->36 [style = bold, label=""];
22->28 [style = bold, label=""];
9->10 [style = bold, label=""];
1->32 [style = dashed, label="0"];
3->4 [style = bold, label=""];
15->18 [style = bold, label=""];
17->19 [style = bold, label=""];
12->7 [style = bold, label=""];
36->20 [style = bold, label=""];
2->12 [style = bold, label=""];
1->11 [style = bold, label=""];
19->16 [style = bold, label=""];
20->21 [style = bold, label=""];
0->14 [style = dashed, label="0"];
8->1 [style = bold, label=""];
21->26 [style = bold, label=""];
5->2 [style = bold, label=""];
11->0 [style = bold, label=""];
33->24 [style = bold, label=""];
29->32 [style = bold, label=""];
7->6 [style = bold, label=""];
26->35 [style = bold, label=""];
9->13 [style = dashed, label="0"];
28->25 [style = bold, label=""];
16->14 [style = bold, label=""];
27->23 [style = bold, label=""];
13->15 [style = bold, label=""];
14->13 [style = bold, label=""];
0->36 [style = dashed, label="0"];
4->5 [style = bold, label=""];
32->31 [style = bold, label=""];
34->27 [style = bold, label=""];
}
