digraph {
20 [style = filled, label = "assertThat(m1.equals(m2)).isFalse()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "m2 = b2.build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TestMap m1 = b1.build()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertThat(m1.equals(m2)).isFalse()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertFalse(m2.equals(m1))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertThat(m2).isEqualTo(m1)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "TestMap m1 = TestMap.newBuilder().putInt32ToInt32Field(1,2).putInt32ToInt32Field(3,4).putInt32ToInt32Field(5,6).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(m2.equals(m1)).isFalse()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertFalse(m1.equals(m2))@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertFalse(m1.equals(m2))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(m1,m2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testEqualsAndHashCode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "b2.removeInt32ToInt32Field(1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testEqualsAndHashCode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "TestMap.Builder b2 = TestMap.newBuilder().putInt32ToInt32Field(5,6).putInt32ToInt32Field(1,2).putInt32ToInt32Field(3,4)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "m2 = b2.build()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestMap m1 = b1@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "TestMap.Builder b1 = TestMap.newBuilder().putInt32ToInt32Field(1,2).putInt32ToInt32Field(3,4).putInt32ToInt32Field(5,6)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "TestMap m2 = b2.build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TestMap b1 = TestMap.newBuilder().putInt32ToInt32Field(1,2).putInt32ToInt32Field(3,4).putInt32ToInt32Field(5,6).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testEqualsAndHashCode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(m1.hashCode(),m2.hashCode())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "b2.putInt32ToInt32Field(1,0)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertFalse(m1.equals(m2))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(m2.hashCode()).isEqualTo(m1.hashCode())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10->15 [style = dashed, label="0"];
4->10 [style = bold, label=""];
1->4 [style = bold, label=""];
11->3 [style = solid, label="m1"];
12->20 [style = dashed, label="0"];
11->13 [style = solid, label="m1"];
17->1 [style = bold, label=""];
15->7 [style = bold, label=""];
2->1 [style = bold, label=""];
5->13 [style = solid, label="m2"];
4->15 [style = bold, label=""];
0->16 [style = dashed, label="0"];
8->5 [style = solid, label="m2"];
18->17 [style = bold, label=""];
0->11 [style = bold, label=""];
9->20 [style = bold, label=""];
6->0 [style = bold, label=""];
5->18 [style = bold, label=""];
9->12 [style = solid, label="m2"];
23->8 [style = bold, label=""];
24->22 [style = bold, label=""];
2->17 [style = dashed, label="0"];
10->7 [style = bold, label=""];
22->23 [style = bold, label=""];
0->22 [style = dashed, label="0"];
16->14 [style = solid, label="b1"];
3->19 [style = dashed, label="0"];
7->9 [style = bold, label=""];
1->4 [style = solid, label="m2"];
8->5 [style = bold, label=""];
11->14 [style = dashed, label="0"];
5->13 [style = bold, label=""];
22->5 [style = solid, label="m1"];
14->18 [style = solid, label="m1"];
21->16 [style = bold, label=""];
11->8 [style = bold, label=""];
16->14 [style = bold, label=""];
14->8 [style = bold, label=""];
12->3 [style = bold, label=""];
9->12 [style = bold, label=""];
13->18 [style = dashed, label="0"];
20->19 [style = bold, label=""];
4->10 [style = solid, label="m2"];
13->2 [style = bold, label=""];
}
