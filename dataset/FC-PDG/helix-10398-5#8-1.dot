digraph {
19 [style = filled, label = "String instance = _participants.get(i).getInstanceName()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "i++@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "checkForRebalanceError(false)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "admin.enableInstance(CLUSTER_NAME,instance,true)@@@34@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "i < 2 + _maxOfflineInstancesAllowed@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "i < 2 + _maxOfflineInstancesAllowed + 1@@@25@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "checkForRebalanceError(true)@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Assert.assertNotNull(maintenanceSignal)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertNotNull(maintenanceSignal.getReason())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i = 2@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "HelixAdmin admin = new ZKHelixAdmin(_gZkClient)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "i = 2@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "i++@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "checkForRebalanceError(true)@@@20@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "boolean result = TestHelper.verify(null,TestHelper.WAIT_DURATION)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "i < 2 + _maxOfflineInstancesAllowed + 1@@@31@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "admin.enableInstance(CLUSTER_NAME,instance,false)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int i@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Thread.sleep(500)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertTrue(clusterVerifier.verifyByPolling())@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "Assert.assertTrue(result)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "testWithDisabledInstancesLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "admin.enableInstance(CLUSTER_NAME,instance,false)@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "instance = _participants.get(i).getInstanceName()@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "ZkHelixClusterVerifier clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME).build()@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Assert.assertNotNull(maintenanceSignal.getReason())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "checkForRebalanceError(true)@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertTrue(clusterVerifier.verifyByPolling())@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertNull(maintenanceSignal)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "_participants.get(i).syncStop()@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "result = TestHelper.verify(null,TestHelper.WAIT_DURATION)@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "admin.enableInstance(CLUSTER_NAME,instance,true)@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "admin.enableMaintenanceMode(CLUSTER_NAME,false)@@@36@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "i = 2@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testWithDisabledInstancesLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testWithOfflineInstancesLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Thread.sleep(500)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "_participants.get(i).syncStop()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "i++@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String instance = _participants.get(i).getInstanceName()@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "instance = _participants.get(i).getInstanceName()@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertNull(maintenanceSignal)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32->35 [style = bold, label=""];
16->0 [style = bold, label=""];
9->11 [style = bold, label=""];
0->13 [style = bold, label=""];
12->5 [style = bold, label=""];
16->13 [style = dotted, label="true"];
20->26 [style = bold, label=""];
15->21 [style = bold, label=""];
16->17 [style = dotted, label="true"];
0->13 [style = solid, label="instance"];
11->29 [style = bold, label=""];
11->40 [style = dotted, label="true"];
7->8 [style = bold, label=""];
43->4 [style = bold, label=""];
13->17 [style = bold, label=""];
35->37 [style = bold, label=""];
24->11 [style = bold, label=""];
26->15 [style = bold, label=""];
42->3 [style = bold, label=""];
40->24 [style = bold, label=""];
35->37 [style = dotted, label="true"];
17->16 [style = bold, label=""];
6->16 [style = solid, label="i"];
14->1 [style = dashed, label="0"];
37->36 [style = bold, label=""];
1->44 [style = bold, label=""];
10->1 [style = solid, label="maintenanceSignal"];
2->4 [style = bold, label=""];
5->25 [style = solid, label="maintenanceSignal"];
5->25 [style = bold, label=""];
3->10 [style = bold, label=""];
29->27 [style = bold, label=""];
20->26 [style = solid, label="maintenanceSignal"];
9->24 [style = solid, label="i"];
33->30 [style = bold, label=""];
3->10 [style = solid, label="maintenanceSignal"];
11->19 [style = dotted, label="true"];
31->28 [style = bold, label=""];
34->38 [style = bold, label=""];
18->7 [style = bold, label=""];
35->34 [style = bold, label=""];
10->1 [style = bold, label=""];
27->20 [style = bold, label=""];
11->24 [style = dotted, label="true"];
39->5 [style = bold, label=""];
22->32 [style = solid, label="i"];
25->18 [style = bold, label=""];
22->35 [style = solid, label="i"];
32->35 [style = solid, label="i"];
11->3 [style = bold, label=""];
30->31 [style = bold, label=""];
4->20 [style = bold, label=""];
14->2 [style = bold, label=""];
18->8 [style = bold, label=""];
22->35 [style = bold, label=""];
19->40 [style = dashed, label="0"];
28->22 [style = bold, label=""];
21->6 [style = bold, label=""];
24->11 [style = solid, label="i"];
35->36 [style = dotted, label="true"];
29->27 [style = solid, label="result"];
19->23 [style = solid, label="instance"];
11->23 [style = dotted, label="true"];
14->2 [style = solid, label="instance"];
37->36 [style = solid, label="instance"];
36->32 [style = bold, label=""];
11->42 [style = bold, label=""];
11->19 [style = bold, label=""];
16->22 [style = bold, label=""];
11->40 [style = bold, label=""];
44->43 [style = bold, label=""];
9->11 [style = solid, label="i"];
23->24 [style = bold, label=""];
17->16 [style = solid, label="i"];
16->0 [style = dotted, label="true"];
6->17 [style = solid, label="i"];
6->16 [style = bold, label=""];
19->23 [style = bold, label=""];
8->9 [style = bold, label=""];
20->26 [style = solid, label="instance"];
1->14 [style = bold, label=""];
26->33 [style = bold, label=""];
43->4 [style = solid, label="maintenanceSignal"];
41->5 [style = bold, label=""];
35->32 [style = dotted, label="true"];
}
