digraph {
16 [style = filled, label = "when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Map<String,Integer> outputTagMap = ImmutableMap.of(\"one\",1,\"two\",2,\"three\",3)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "outputsAreTaggedCorrectly['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Iterable<RawUnionValue> iterable = null@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "StageBundleFactory stageBundleFactory = new StageBundleFactory(){@Override public RemoteBundle getBundle(OutputReceiverFactory receiverFactory,StateRequestHandler stateRequestHandler,BundleProgressHandler progressHandler){return new RemoteBundle(){@Override public String getId(){return \"bundle-id\"}@Override public Map<String,FnDataReceiver<WindowedValue<?>>> getInputReceivers(){return ImmutableMap.of(\"input\",null)}@Override public void close(){if (once) {return}receiverFactory.create(\"one\").accept(three)receiverFactory.create(\"two\").accept(four)receiverFactory.create(\"three\").accept(five)once = true}}}@Override public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor getProcessBundleDescriptor(){return processBundleDescriptor}@Override public void close(){}}@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "function.open(new Configuration())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "isStateful@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(iterable,contains(new RawUnionValue(1,three),new RawUnionValue(2,four),new RawUnionValue(3,five)))@@@42@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verify(collector).collect(new RawUnionValue(1,three))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "outputsAreTaggedCorrectly['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "verifyNoMoreInteractions(collector)@@@50@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "function.mapPartition(Collections.emptyList(),collector)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "function.reduce(Collections.emptyList(),collector)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "verify(collector).collect(new RawUnionValue(3,five))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "verify(collector).collect(new RawUnionValue(2,four))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "outputsAreTaggedCorrectly['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory)@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "when(jobBundleFactory.forStage(any())).thenReturn(stageBundleFactory)@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "SparkExecutableStageFunction<Integer,?> function = getFunction(outputTagMap)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->23 [style = bold, label=""];
1->4 [style = bold, label=""];
8->1 [style = solid, label="three"];
10->6 [style = solid, label="outputTagMap"];
1->12 [style = solid, label="stageBundleFactory"];
4->16 [style = dashed, label="0"];
22->19 [style = bold, label=""];
4->6 [style = bold, label=""];
3->7 [style = solid, label="four"];
21->17 [style = dotted, label="false"];
2->7 [style = solid, label="five"];
1->16 [style = solid, label="stageBundleFactory"];
8->3 [style = bold, label=""];
6->0 [style = bold, label=""];
3->1 [style = solid, label="four"];
2->15 [style = solid, label="five"];
16->22 [style = bold, label=""];
2->10 [style = bold, label=""];
9->8 [style = bold, label=""];
12->6 [style = bold, label=""];
3->14 [style = solid, label="four"];
6->22 [style = dashed, label="0"];
8->18 [style = solid, label="three"];
4->12 [style = dashed, label="0"];
20->8 [style = bold, label=""];
3->2 [style = bold, label=""];
1->16 [style = bold, label=""];
0->5 [style = bold, label=""];
1->12 [style = bold, label=""];
5->7 [style = bold, label=""];
11->8 [style = bold, label=""];
14->15 [style = bold, label=""];
21->13 [style = dotted, label="true"];
2->1 [style = solid, label="five"];
10->1 [style = bold, label=""];
5->7 [style = solid, label="iterable"];
21->17 [style = bold, label=""];
18->14 [style = bold, label=""];
8->7 [style = solid, label="three"];
10->22 [style = solid, label="outputTagMap"];
17->18 [style = bold, label=""];
1->4 [style = solid, label="stageBundleFactory"];
13->18 [style = bold, label=""];
21->13 [style = bold, label=""];
19->21 [style = bold, label=""];
}
