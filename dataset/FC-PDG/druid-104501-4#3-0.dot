digraph {
13 [style = filled, label = "testCreateIngestionSchema['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final List<IndexIngestionSpec> ingestionSpecs = CompactionTask.createIngestionSchema(toolbox,new SegmentProvider(DATA_SOURCE,COMPACTION_INTERVAL),new PartitionConfigurationManager(null,TUNING_CONFIG),null,keepSegmentGranularity,objectMapper)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "keepSegmentGranularity@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(5,ingestionSpecs.size())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,Collections.singletonList(COMPACTION_INTERVAL))@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final List<IndexIngestionSpec> ingestionSpecs = CompactionTask.createIngestionSchema(toolbox,new SegmentProvider(DATA_SOURCE,COMPACTION_INTERVAL),new PartitionConfigurationManager(null,tuningConfig),null,keepSegmentGranularity,objectMapper)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,SEGMENT_INTERVALS)@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testCreateIngestionSchemaWithMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(1,ingestionSpecs.size())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,Collections.singletonList(COMPACTION_INTERVAL),tuningConfig)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ingestionSpecs.sort(null)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final List<DimensionsSpec> expectedDimensionsSpec = getExpectedDimensionsSpecForAutoGeneration(keepSegmentGranularity)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final IndexTuningConfig tuningConfig = new IndexTuningConfig(null,500000,1000000L,5L,null,null,null,new IndexSpec(new RoaringBitmapSerdeFactory(true),CompressionStrategy.LZ4,CompressionStrategy.LZF,LongEncodingStrategy.LONGS),5000,true,false,true,false,null,100L,null,null,null,null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final IndexTuningConfig tuningConfig = new IndexTuningConfig(null,500000,1000000L,5L,null,null,new IndexSpec(new RoaringBitmapSerdeFactory(true),CompressionStrategy.LZ4,CompressionStrategy.LZF,LongEncodingStrategy.LONGS),5000,true,false,true,false,null,100L,null,null,null,null)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,SEGMENT_INTERVALS,tuningConfig)@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testCreateIngestionSchemaWithMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
14->5 [style = solid, label="expectedDimensionsSpec"];
5->8 [style = bold, label=""];
7->1 [style = bold, label=""];
10->9 [style = solid, label="tuningConfig"];
6->3 [style = dotted, label="false"];
15->14 [style = bold, label=""];
4->6 [style = bold, label=""];
0->4 [style = solid, label="tuningConfig"];
7->3 [style = dotted, label="false"];
6->1 [style = dotted, label="true"];
10->4 [style = solid, label="tuningConfig"];
0->9 [style = solid, label="tuningConfig"];
7->9 [style = dotted, label="false"];
14->3 [style = solid, label="expectedDimensionsSpec"];
8->5 [style = dashed, label="0"];
7->3 [style = bold, label=""];
0->10 [style = dashed, label="0"];
0->8 [style = solid, label="tuningConfig"];
7->5 [style = dotted, label="true"];
6->12 [style = dotted, label="false"];
3->9 [style = bold, label=""];
2->0 [style = bold, label=""];
15->3 [style = solid, label="ingestionSpecs"];
10->8 [style = solid, label="tuningConfig"];
0->4 [style = bold, label=""];
11->10 [style = bold, label=""];
4->8 [style = solid, label="ingestionSpecs"];
6->9 [style = solid, label="expectedDimensionsSpec"];
10->4 [style = bold, label=""];
6->7 [style = dotted, label="true"];
12->3 [style = bold, label=""];
13->15 [style = bold, label=""];
6->7 [style = bold, label=""];
4->9 [style = solid, label="ingestionSpecs"];
6->8 [style = solid, label="expectedDimensionsSpec"];
7->1 [style = dotted, label="true"];
7->8 [style = dotted, label="true"];
15->5 [style = solid, label="ingestionSpecs"];
14->6 [style = bold, label=""];
9->3 [style = dashed, label="0"];
6->5 [style = dotted, label="true"];
6->12 [style = bold, label=""];
}
