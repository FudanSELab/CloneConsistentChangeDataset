digraph {
62 [style = filled, label = "unlockAppenderatorBasePersistDirForTask(task1)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2008/P1D\",1)@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "SegmentDescriptor desc1 = sd(task1,\"2008/P1D\",0)@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L)),consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@51@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "SegmentDescriptor desc1 = sd(task1,\"2010/P1D\",0)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Thread.sleep(25)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(2,countEvents(task1))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "task1.getRunner().setEndOffsets(ImmutableMap.of(0,5L),false)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "kafkaProducer.beginTransaction()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "SegmentDescriptor desc3 = sd(task1,\"2009/P1D\",0)@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "kafkaProducer.commitTransaction()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "SegmentDescriptor desc4 = sd(task1,\"2009/P1D\",1)@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "kafkaProducer.initTransactions()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "SegmentDescriptor desc6 = sd(\"2011/P1D\",0)@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "final KafkaIndexTask task2 = createTask(task1.getId(),new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(),currentOffsets)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final KafkaIndexTask task2 = createTask(task1.getId(),new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L)),consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "kafkaProducer.commitTransaction()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testRestoreAfterPersistingSequences['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "kafkaProducer.initTransactions()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@42@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "task1.getRunner().getStatus() != Status.PAUSED@@@18@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(2,task1.getRunner().getRowIngestionMeters().getProcessed())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@51@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2009/P1D\",0)@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "countEvents(task1) != 2@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> checkpoint = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,5L),ImmutableSet.of(0))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task1.getRunner().getCurrentOffsets())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testRestoreAfterPersistingSequences['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(5,task1.getRunner().getRowIngestionMeters().getProcessed())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "SegmentDescriptor desc7 = sd(\"2012/P1D\",0)@@@50@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@52@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Thread.sleep(10)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "kafkaProducer.send(record).get()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "SegmentDescriptor desc2 = sd(task1,\"2008/P1D\",1)@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "kafkaProducer.beginTransaction()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "SegmentDescriptor desc7 = sd(task1,\"2012/P1D\",0)@@@50@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
63 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "SegmentDescriptor desc2 = sd(task1,\"2011/P1D\",0)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "SegmentDescriptor desc6 = sd(task1,\"2011/P1D\",0)@@@49@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "records = generateSinglePartitionRecords(topic)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "kafkaProducer.send(record).get()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(1,task2.getRunner().getRowIngestionMeters().getProcessed())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "testRestore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "kafkaProducer.beginTransaction()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "task1.stopGracefully(toolboxFactory.build(task1).getConfig())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "SegmentDescriptor desc5 = sd(\"2010/P1D\",0)@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "SegmentDescriptor desc4 = sd(\"2009/P1D\",1)@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "unlockAppenderatorBasePersistDirForTask(task1)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getThrownAway())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "SegmentDescriptor desc5 = sd(task1,\"2010/P1D\",0)@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(4,task2.getRunner().getRowIngestionMeters().getProcessed())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->13 [style = bold, label=""];
56->29 [style = bold, label=""];
12->53 [style = bold, label=""];
8->10 [style = dashed, label="0"];
31->56 [style = bold, label=""];
13->50 [style = dashed, label="0"];
6->22 [style = bold, label=""];
2->6 [style = bold, label=""];
55->62 [style = bold, label=""];
1->27 [style = bold, label=""];
44->19 [style = bold, label=""];
38->17 [style = solid, label="task1"];
32->34 [style = bold, label=""];
59->58 [style = bold, label=""];
18->49 [style = dashed, label="0"];
46->48 [style = bold, label=""];
35->7 [style = solid, label="desc2"];
53->39 [style = bold, label=""];
26->11 [style = bold, label=""];
7->9 [style = bold, label=""];
26->65 [style = bold, label=""];
61->3 [style = bold, label=""];
38->30 [style = bold, label=""];
16->23 [style = solid, label="task2"];
38->13 [style = solid, label="task1"];
15->20 [style = bold, label=""];
51->17 [style = bold, label=""];
66->36 [style = bold, label=""];
38->18 [style = solid, label="task1"];
67->57 [style = bold, label=""];
38->35 [style = solid, label="task1"];
19->28 [style = bold, label=""];
41->43 [style = dashed, label="0"];
2->26 [style = dashed, label="0"];
67->11 [style = solid, label="task1"];
21->61 [style = bold, label=""];
50->45 [style = solid, label="desc5"];
21->3 [style = bold, label=""];
60->51 [style = bold, label=""];
14->16 [style = bold, label=""];
5->10 [style = bold, label=""];
22->25 [style = bold, label=""];
48->45 [style = solid, label="desc4"];
16->58 [style = dashed, label="0"];
50->43 [style = bold, label=""];
24->19 [style = bold, label=""];
67->31 [style = solid, label="task1"];
31->29 [style = solid, label="desc1"];
15->16 [style = solid, label="consumerProps"];
48->50 [style = bold, label=""];
38->34 [style = solid, label="task1"];
57->60 [style = bold, label=""];
54->66 [style = bold, label=""];
35->56 [style = dashed, label="0"];
10->21 [style = bold, label=""];
20->38 [style = bold, label=""];
36->14 [style = bold, label=""];
58->54 [style = bold, label=""];
0->36 [style = bold, label=""];
6->2 [style = bold, label=""];
65->26 [style = dotted, label="true"];
1->46 [style = dashed, label="0"];
56->29 [style = solid, label="desc2"];
36->37 [style = bold, label=""];
34->35 [style = bold, label=""];
18->7 [style = bold, label=""];
40->65 [style = bold, label=""];
32->42 [style = bold, label=""];
43->45 [style = solid, label="desc6"];
38->27 [style = solid, label="task1"];
25->0 [style = bold, label=""];
49->45 [style = bold, label=""];
65->26 [style = bold, label=""];
30->17 [style = bold, label=""];
23->5 [style = bold, label=""];
18->7 [style = solid, label="desc7"];
4->39 [style = bold, label=""];
22->25 [style = solid, label="currentOffsets"];
42->47 [style = bold, label=""];
17->40 [style = bold, label=""];
65->11 [style = bold, label=""];
16->23 [style = bold, label=""];
33->26 [style = bold, label=""];
13->41 [style = bold, label=""];
38->41 [style = solid, label="task1"];
38->1 [style = solid, label="task1"];
40->33 [style = bold, label=""];
6->2 [style = dotted, label="true"];
35->1 [style = bold, label=""];
27->7 [style = solid, label="desc4"];
14->23 [style = bold, label=""];
41->7 [style = solid, label="desc6"];
38->37 [style = solid, label="task1"];
7->45 [style = dashed, label="0"];
58->54 [style = solid, label="task2"];
39->32 [style = bold, label=""];
34->31 [style = dashed, label="0"];
11->55 [style = bold, label=""];
64->67 [style = bold, label=""];
63->21 [style = bold, label=""];
27->48 [style = dashed, label="0"];
31->8 [style = bold, label=""];
41->18 [style = bold, label=""];
45->9 [style = bold, label=""];
1->7 [style = solid, label="desc3"];
67->56 [style = solid, label="task1"];
34->42 [style = dashed, label="0"];
46->45 [style = solid, label="desc3"];
49->45 [style = solid, label="desc7"];
15->38 [style = solid, label="consumerProps"];
62->59 [style = bold, label=""];
4->61 [style = dashed, label="0"];
28->15 [style = bold, label=""];
3->52 [style = bold, label=""];
3->31 [style = bold, label=""];
47->45 [style = solid, label="desc2"];
35->47 [style = dashed, label="0"];
11->6 [style = bold, label=""];
13->7 [style = solid, label="desc5"];
10->63 [style = bold, label=""];
47->46 [style = bold, label=""];
67->62 [style = solid, label="task1"];
37->14 [style = bold, label=""];
29->12 [style = bold, label=""];
12->4 [style = bold, label=""];
67->65 [style = solid, label="task1"];
31->53 [style = solid, label="desc1"];
52->31 [style = bold, label=""];
67->57 [style = solid, label="task1"];
43->49 [style = bold, label=""];
42->45 [style = solid, label="desc1"];
56->39 [style = solid, label="desc2"];
8->29 [style = bold, label=""];
34->7 [style = solid, label="desc1"];
}
