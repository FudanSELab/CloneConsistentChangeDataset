digraph {
20 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TableIdentifier identifier = TableIdentifier.of(\"default\",\"customers\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testCreateTableWithoutSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"', \" + \"'dummy'='test')\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(PartitionSpec.unpartitioned(),icebergTable.spec())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "fs.exists(hmsTableLocation)@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\",\"customers\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA.asStruct(),icebergTable.schema().asStruct())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"')\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(0,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testCreateDropTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"','\" + InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf())@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testCreateTableWithoutSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
15->2 [style = bold, label=""];
16->18 [style = bold, label=""];
20->13 [style = bold, label=""];
12->10 [style = dotted, label="false"];
0->6 [style = bold, label=""];
0->3 [style = solid, label="identifier"];
10->19 [style = bold, label=""];
9->19 [style = solid, label="hmsTableLocation"];
1->3 [style = bold, label=""];
12->20 [style = bold, label=""];
14->10 [style = bold, label=""];
3->15 [style = bold, label=""];
19->17 [style = bold, label=""];
9->10 [style = solid, label="hmsTableLocation"];
9->14 [style = solid, label="hmsTableLocation"];
9->16 [style = bold, label=""];
7->3 [style = bold, label=""];
2->12 [style = bold, label=""];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
10->17 [style = dotted, label="true"];
12->16 [style = dotted, label="false"];
9->17 [style = solid, label="hmsTableLocation"];
12->8 [style = dotted, label="false"];
11->0 [style = bold, label=""];
12->13 [style = dotted, label="true"];
12->9 [style = dotted, label="false"];
12->20 [style = dotted, label="true"];
0->6 [style = solid, label="identifier"];
3->2 [style = bold, label=""];
5->0 [style = bold, label=""];
12->8 [style = bold, label=""];
0->1 [style = bold, label=""];
10->19 [style = dotted, label="true"];
1->6 [style = dashed, label="0"];
8->9 [style = bold, label=""];
0->1 [style = solid, label="identifier"];
1->7 [style = dashed, label="0"];
18->14 [style = bold, label=""];
12->14 [style = dotted, label="false"];
0->7 [style = solid, label="identifier"];
12->18 [style = dotted, label="false"];
}
