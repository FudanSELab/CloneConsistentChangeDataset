digraph {
17 [style = filled, label = "testExpressions(expressions)@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Double intTest = (Double)calculateNumberStat(intTestStart,\"sumOfSquares\")@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "sumOfSquaresTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(getRawResponse(),dateResult,dateTest)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "expressions.put(\"single\",new ETP(\"sumofsquares(int_i)\",237.0))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Long doubleResult = (Long)getStatResult(\"cr\",\"double_dd\",VAL_TYPE.LONG)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Long dateTest = (Long)calculateStat(dateTestStart,\"count\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "sumOfSquaresTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertEquals(getRawResponse(),stringResult,stringTest)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Long longResult = (Long)getStatResult(\"cr\",\"long_ld\",VAL_TYPE.LONG)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Double longResult = (Double)getStatResult(\"sosr\",\"long_ld\",VAL_TYPE.DOUBLE)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"sosr\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Double floatTest = (Double)calculateNumberStat(floatTestStart,\"sumOfSquares\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Double floatResult = (Double)getStatResult(\"sosr\",\"float_fd\",VAL_TYPE.DOUBLE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertEquals(getRawResponse(),intResult,intTest)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Long dateResult = (Long)getStatResult(\"cr\",\"date_dtd\",VAL_TYPE.LONG)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Long floatTest = (Long)calculateStat(floatTestStart,\"count\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(getRawResponse(),longResult,longTest)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Long longTest = (Long)calculateStat(longTestStart,\"count\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Long stringResult = (Long)getStatResult(\"cr\",\"string_sd\",VAL_TYPE.LONG)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Double longTest = (Double)calculateNumberStat(longTestStart,\"sumOfSquares\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertEquals(getRawResponse(),floatResult,floatTest)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Long doubleTest = (Long)calculateStat(doubleTestStart,\"count\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Map<String,ETP> expressions = new HashMap<>()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Long intResult = (Long)getStatResult(\"cr\",\"int_id\",VAL_TYPE.LONG)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "countTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(getRawResponse(),doubleResult,doubleTest)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Double intResult = (Double)getStatResult(\"sosr\",\"int_id\",VAL_TYPE.DOUBLE)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Double doubleTest = (Double)calculateNumberStat(doubleTestStart,\"sumOfSquares\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Long floatResult = (Long)getStatResult(\"cr\",\"float_fd\",VAL_TYPE.LONG)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Long stringTest = (Long)calculateStat(stringTestStart,\"count\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "expressions.put(\"multi\",new ETP(\"sumofsquares(long_lm)\",1220.0))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Long intTest = (Long)calculateStat(intTestStart,\"count\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->23 [style = dashed, label="0"];
24->28 [style = bold, label=""];
19->0 [style = solid, label="intResult"];
5->10 [style = solid, label="longResult"];
24->7 [style = solid, label="floatResult"];
16->13 [style = bold, label=""];
32->21 [style = bold, label=""];
11->20 [style = dashed, label="0"];
0->26 [style = bold, label=""];
9->11 [style = bold, label=""];
22->19 [style = bold, label=""];
21->27 [style = bold, label=""];
5->26 [style = dashed, label="0"];
10->24 [style = bold, label=""];
1->10 [style = solid, label="longTest"];
19->20 [style = bold, label=""];
26->25 [style = bold, label=""];
20->0 [style = bold, label=""];
3->24 [style = dashed, label="0"];
31->32 [style = solid, label="dateResult"];
28->7 [style = bold, label=""];
10->3 [style = bold, label=""];
30->32 [style = bold, label=""];
3->7 [style = solid, label="floatResult"];
12->4 [style = solid, label="doubleTest"];
9->0 [style = solid, label="intResult"];
21->29 [style = solid, label="stringResult"];
11->0 [style = solid, label="intTest"];
8->28 [style = dashed, label="0"];
2->12 [style = bold, label=""];
8->7 [style = bold, label=""];
2->4 [style = solid, label="doubleResult"];
27->29 [style = solid, label="stringTest"];
9->19 [style = dashed, label="0"];
4->31 [style = bold, label=""];
5->1 [style = bold, label=""];
15->17 [style = bold, label=""];
11->0 [style = bold, label=""];
13->17 [style = solid, label="expressions"];
18->4 [style = bold, label=""];
8->7 [style = solid, label="floatTest"];
12->4 [style = bold, label=""];
7->2 [style = bold, label=""];
3->8 [style = bold, label=""];
7->23 [style = bold, label=""];
31->30 [style = bold, label=""];
23->4 [style = solid, label="doubleResult"];
26->10 [style = solid, label="longResult"];
12->18 [style = dashed, label="0"];
25->10 [style = bold, label=""];
14->15 [style = bold, label=""];
27->29 [style = bold, label=""];
6->9 [style = bold, label=""];
20->0 [style = solid, label="intTest"];
30->32 [style = solid, label="dateTest"];
1->25 [style = dashed, label="0"];
1->10 [style = bold, label=""];
25->10 [style = solid, label="longTest"];
13->14 [style = bold, label=""];
18->4 [style = solid, label="doubleTest"];
23->18 [style = bold, label=""];
0->5 [style = bold, label=""];
28->7 [style = solid, label="floatTest"];
}
