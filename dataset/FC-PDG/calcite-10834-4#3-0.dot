digraph {
7 [style = filled, label = "assertEquals(6,dataType.getPrecision())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "RelDataType operand2 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL,10,2)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testCustomDecimalMultiplyReturnTypeInference['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(20,dataType.getScale())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(2,dataType.getScale())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(12,dataType.getPrecision())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(6,dataType.getPrecision())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "RelDataType operand1 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL,10,1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "RelDataType operand1 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL,2,4)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(SqlTypeName.DECIMAL,dataType.getSqlTypeName())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(20,dataType.getScale())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testCustomDecimalMultiplyReturnTypeInference['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "testDecimalAdditionReturnTypeInference['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "RelDataType operand2 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL,3,5)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(SqlTypeName.DECIMAL,dataType.getSqlTypeName())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "RelDataType dataType = SqlStdOperatorTable.MULTIPLY.inferReturnType(CUSTOM_FACTORY,Lists.newArrayList(operand1,operand2))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "RelDataType dataType = SqlStdOperatorTable.MINUS.inferReturnType(TYPE_FACTORY,Lists.newArrayList(operand1,operand2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11->16 [style = bold, label=""];
16->15 [style = bold, label=""];
0->4 [style = solid, label="operand2"];
6->8 [style = dashed, label="0"];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
13->11 [style = solid, label="operand1"];
12->11 [style = bold, label=""];
1->3 [style = bold, label=""];
3->4 [style = solid, label="operand1"];
0->12 [style = dashed, label="0"];
2->7 [style = dashed, label="0"];
3->13 [style = dashed, label="0"];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
6->2 [style = bold, label=""];
2->15 [style = dashed, label="0"];
6->16 [style = dashed, label="0"];
13->12 [style = bold, label=""];
5->10 [style = dashed, label="0"];
0->4 [style = bold, label=""];
9->3 [style = bold, label=""];
4->8 [style = bold, label=""];
14->13 [style = bold, label=""];
4->11 [style = dashed, label="0"];
12->11 [style = solid, label="operand2"];
2->5 [style = bold, label=""];
}
