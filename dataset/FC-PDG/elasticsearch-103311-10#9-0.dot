digraph {
20 [style = filled, label = "QueryShardContext context = createShardContext()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "query = new SimpleQueryStringBuilder(\"hello\").toQuery(context)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(expected,query)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(expected,query)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "query = qb.toQuery(context)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "IllegalArgumentException exc = expectThrows(,null)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertQueryWithAllFieldsWildcard(query)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "expected = new DisjunctionMaxQuery(Arrays.asList(new MatchNoDocsQuery(\"failed (mapped_int( query, caused by number_format_exception:(For input string: \"hello\"(\"),new TermQuery(new Term(STRING_FIELD_NAME,\"hello\")),new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2,\"hello\")),5.0f)),0.0f)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Query query = builder.toQuery(context)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "query = qb.toQuery(context)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "context.getIndexSettings().updateIndexMetaData(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",STRING_FIELD_NAME,STRING_FIELD_NAME_2 + \"^5\").build()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testDefaultField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "{context.getIndexSettings().updateIndexMetaData(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putNull(\"index.query.default_field\").build()))}@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "qb.lenient(true)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "{context.getIndexSettings().updateIndexMetaData(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",\"*\").build()))}@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Query query = new SimpleQueryStringBuilder(\"hello\").toQuery(context)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "context.getIndexSettings().updateIndexMetaData(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",STRING_FIELD_NAME,STRING_FIELD_NAME_2 + \"^5\",INT_FIELD_NAME).build()))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "expected = new DisjunctionMaxQuery(Arrays.asList(new TermQuery(new Term(STRING_FIELD_NAME,\"hello\")),new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2,\"hello\")),5.0f),new MatchNoDocsQuery(\"failed (mapped_int( query, caused by number_format_exception:(For input string: \"hello\"(\")),0.0f)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertQueryWithAllFieldsWildcard(query)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "context.getIndexSettings().updateIndexMetaData(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",STRING_FIELD_NAME,\"*\",STRING_FIELD_NAME_2).build()))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "context.getIndexSettings().updateIndexMetaData(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",STRING_FIELD_NAME,STRING_FIELD_NAME_2 + \"^5\").build()))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(exc.getMessage(),equalTo(\"For input string: \"hello\"\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "query = new SimpleQueryStringBuilder(\"hello\").toQuery(context)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "query = new MultiMatchQueryBuilder(\"hello\").toQuery(context)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "DisjunctionMaxQuery expected = new DisjunctionMaxQuery(Arrays.asList(new TermQuery(new Term(STRING_FIELD_NAME,\"hello\")),new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2,\"hello\")),5.0f)),0.0f)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testDefaultField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertQueryWithAllFieldsWildcard(query)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(exc,instanceOf())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testDefaultField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Query expected = new DisjunctionMaxQuery(Arrays.asList(new TermQuery(new Term(STRING_FIELD_NAME,\"hello\")),new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2,\"hello\")),5.0f)),1.0f)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11->16 [style = bold, label=""];
8->10 [style = bold, label=""];
30->24 [style = bold, label=""];
24->12 [style = bold, label=""];
16->13 [style = bold, label=""];
2->20 [style = bold, label=""];
23->20 [style = bold, label=""];
20->12 [style = solid, label="context"];
9->11 [style = bold, label=""];
9->11 [style = solid, label="exc"];
3->26 [style = dashed, label="0"];
28->30 [style = bold, label=""];
6->22 [style = bold, label=""];
6->21 [style = bold, label=""];
22->17 [style = solid, label="expected"];
20->28 [style = bold, label=""];
4->19 [style = bold, label=""];
1->29 [style = dashed, label="0"];
1->3 [style = bold, label=""];
18->12 [style = bold, label=""];
8->10 [style = solid, label="query"];
28->30 [style = solid, label="query"];
31->4 [style = bold, label=""];
20->8 [style = solid, label="context"];
26->31 [style = solid, label="expected"];
8->12 [style = dashed, label="0"];
3->15 [style = bold, label=""];
20->28 [style = solid, label="context"];
5->14 [style = bold, label=""];
14->18 [style = solid, label="query"];
21->22 [style = dashed, label="0"];
29->31 [style = solid, label="query"];
3->4 [style = solid, label="query"];
0->10 [style = dashed, label="0"];
20->5 [style = bold, label=""];
29->26 [style = bold, label=""];
15->4 [style = solid, label="expected"];
20->6 [style = solid, label="context"];
17->7 [style = bold, label=""];
12->25 [style = solid, label="query"];
20->14 [style = solid, label="context"];
6->17 [style = solid, label="query"];
26->31 [style = bold, label=""];
5->28 [style = dashed, label="0"];
21->17 [style = solid, label="expected"];
10->29 [style = bold, label=""];
19->9 [style = bold, label=""];
12->8 [style = bold, label=""];
0->1 [style = bold, label=""];
12->25 [style = bold, label=""];
10->0 [style = bold, label=""];
15->4 [style = bold, label=""];
22->17 [style = bold, label=""];
14->18 [style = bold, label=""];
25->10 [style = bold, label=""];
13->6 [style = bold, label=""];
20->3 [style = solid, label="context"];
21->17 [style = bold, label=""];
27->20 [style = bold, label=""];
20->29 [style = solid, label="context"];
}
