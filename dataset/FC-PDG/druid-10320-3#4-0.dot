digraph {
3 [style = filled, label = "createDataSegment['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "holdersOfLargeSegments2.add(new ServerHolder(new DruidServer(\"serverHot3\",\"hostHot3\",null,1000,ServerType.HISTORICAL,\"hot\",0).addDataSegment(largeSegments2.get(0)).toImmutableDruidServer(),new LoadQueuePeonTester()))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "largeSegments2.add(new DataSegment(\"large_source2\",Intervals.of((i * 1000) + \"/\" + ((i + 1) * 1000)),DateTimes.nowUtc().toString(),Maps.newHashMap(),Lists.newArrayList(),Lists.newArrayList(),NoneShardSpec.instance(),0,100))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "return new DataSegment(dataSource,Intervals.of(\"0/3000\"),DateTimes.nowUtc().toString(),Maps.newHashMap(),Lists.newArrayList(),Lists.newArrayList(),NoneShardSpec.instance(),0,0)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "largeSegments.add(new DataSegment(\"large_source\",Intervals.of((i * 1000) + \"/\" + ((i + 1) * 1000)),DateTimes.nowUtc().toString(),Maps.newHashMap(),Lists.newArrayList(),Lists.newArrayList(),NoneShardSpec.instance(),0,100))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "holdersOfLargeSegments.add(new ServerHolder(new DruidServer(\"serverHot1\",\"hostHot1\",null,1000,ServerType.HISTORICAL,\"hot\",0).addDataSegment(largeSegments.get(0)).toImmutableDruidServer(),new LoadQueuePeonTester()))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "i++@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "int i = 0@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "holdersOfLargeSegments.add(new ServerHolder(new DruidServer(\"serverNorm1\",\"hostNorm1\",null,1000,ServerType.HISTORICAL,DruidServer.DEFAULT_TIER,0).addDataSegment(largeSegments.get(1)).toImmutableDruidServer(),new LoadQueuePeonTester()))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "i++@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "i < 3@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "holderOfSmallSegment = new ServerHolder(new DruidServer(\"serverHot2\",\"hostHot2\",null,1000,ServerType.HISTORICAL,\"hot\",0).addDataSegment(smallSegment).toImmutableDruidServer(),new LoadQueuePeonTester())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "i < 2@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "setUp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "return new DataSegment(dataSource,Intervals.of(\"0/3000\"),DateTimes.nowUtc().toString(),new HashMap<>(),new ArrayList<>(),new ArrayList<>(),NoneShardSpec.instance(),0,0)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "String dataSource@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "smallSegment = new DataSegment(\"small_source\",Intervals.of(\"0/1000\"),DateTimes.nowUtc().toString(),Maps.newHashMap(),Lists.newArrayList(),Lists.newArrayList(),NoneShardSpec.instance(),0,0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "createDataSegment['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "druidCluster = new DruidCluster(null,ImmutableMap.of(\"hot\",Stream.of(holdersOfLargeSegments.get(0),holderOfSmallSegment,holdersOfLargeSegments2.get(0)).collect(Collectors.toCollection(null)),DruidServer.DEFAULT_TIER,Stream.of(holdersOfLargeSegments.get(1),holdersOfLargeSegments.get(2),holdersOfLargeSegments2.get(1)).collect(Collectors.toCollection(null))))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "holdersOfLargeSegments.add(new ServerHolder(new DruidServer(\"serverNorm2\",\"hostNorm2\",null,100,ServerType.HISTORICAL,DruidServer.DEFAULT_TIER,0).addDataSegment(largeSegments.get(2)).toImmutableDruidServer(),new LoadQueuePeonTester()))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "int i = 0@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "holdersOfLargeSegments2.add(new ServerHolder(new DruidServer(\"serverNorm3\",\"hostNorm3\",null,100,ServerType.HISTORICAL,DruidServer.DEFAULT_TIER,0).addDataSegment(largeSegments2.get(1)).toImmutableDruidServer(),new LoadQueuePeonTester()))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18->9 [style = solid, label="i"];
18->12 [style = solid, label="i"];
12->9 [style = solid, label="i"];
20->8 [style = solid, label="i"];
9->12 [style = dotted, label="true"];
10->15 [style = bold, label=""];
2->0 [style = solid, label="dataSource"];
8->21 [style = dotted, label="true"];
20->21 [style = solid, label="i"];
16->6 [style = bold, label=""];
0->4 [style = dashed, label="0"];
1->0 [style = bold, label=""];
12->9 [style = bold, label=""];
5->17 [style = bold, label=""];
3->4 [style = bold, label=""];
19->8 [style = bold, label=""];
14->7 [style = bold, label=""];
18->13 [style = solid, label="i"];
19->20 [style = solid, label="i"];
20->8 [style = bold, label=""];
13->12 [style = bold, label=""];
21->20 [style = bold, label=""];
2->4 [style = solid, label="dataSource"];
19->21 [style = solid, label="i"];
8->5 [style = bold, label=""];
11->10 [style = bold, label=""];
6->11 [style = bold, label=""];
9->13 [style = dotted, label="true"];
12->13 [style = solid, label="i"];
18->9 [style = bold, label=""];
7->18 [style = bold, label=""];
19->8 [style = solid, label="i"];
9->19 [style = bold, label=""];
8->21 [style = bold, label=""];
8->20 [style = dotted, label="true"];
1->2 [style = dotted, label="true"];
0->7 [style = dashed, label="0"];
17->16 [style = bold, label=""];
3->2 [style = dotted, label="true"];
9->13 [style = bold, label=""];
}
