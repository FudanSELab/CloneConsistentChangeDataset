digraph {
48 [style = filled, label = "i++@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "Assert.assertTrue(\"bytes are set\",st.getBytes() == 2404L)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertTrue(\"bytes are set\",st.getBytes() == 1204L)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "byte(( data = zk.getData(absolutePath,false,new Stat())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "zk.create(\"/a\",\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(\"bytes are set\",qst.getBytes() == 8L)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertTrue(\"count is set\",qst.getCount() == 2)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "data = zk.getData(statPath,false,new Stat())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "StatsTrack st = new StatsTrack(new String(data))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ZooKeeper zk = createClient()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(\"bytes are set\",st.getBytes() == 5L)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "Assert.assertTrue(\"num count is set\",st.getCount() == 301)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "startServer()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testQuotaWithQuorum['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ZooKeeperServer server = serverFactory.getZooKeeperServer()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "String statPath = Quotas.quotaZookeeper + \"/a\" + \"/\" + Quotas.statNode@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "i < 600@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "byte(( qdata = zk.getData(statPath,false,new Stat())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testQuota['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertTrue(\"bytes are set\",qst.getBytes() == 8L)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "st = new StatsTrack(new String(data))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertNotNull(\"Quota is still set\",server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "i = 0@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "StatsTrack st = new StatsTrack(new String(data))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final String path = \"/a/b/v\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "zk.setData(\"/\",\"some\".getBytes(),-1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "i < 300@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(\"num count is set\",st.getCount() == 10)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "zk.create(\"/a/b/v/d\",\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "i = 300@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "ZooKeeper zk = createClient()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "i++@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "SetQuotaCommand.createQuota(zk,path,5L,10)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "StatsTrack qst = new StatsTrack(new String(qdata))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "stopServer()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(\"count is set\",qst.getCount() == 2)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertTrue(\"num count is set\",st.getCount() == 601)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "stopServer()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "SetQuotaCommand.createQuota(zk,\"/a\",1000L,5000)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertNotNull(\"Quota is still set\",server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "zk.create(\"/a/b/v\",\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testQuota['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "zk.create(\"/a/b\",\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertTrue(\"num count is set\",st.getCount() == 10)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "zk.create(\"/a/\" + i,\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "startServer()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "zk.create(\"/a/\" + i,\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertTrue(\"bytes are set\",st.getBytes() == 5L)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "byte(( data = zk.getData(statPath,false,new Stat())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9->11 [style = bold, label=""];
20->9 [style = bold, label=""];
31->40 [style = solid, label="i"];
40->32 [style = solid, label="i"];
2->13 [style = solid, label="absolutePath"];
33->0 [style = bold, label=""];
30->11 [style = bold, label=""];
37->43 [style = bold, label=""];
35->50 [style = bold, label=""];
17->14 [style = bold, label=""];
48->43 [style = bold, label=""];
37->48 [style = solid, label="i"];
48->38 [style = solid, label="i"];
21->1 [style = bold, label=""];
0->8 [style = bold, label=""];
37->43 [style = solid, label="i"];
23->17 [style = bold, label=""];
45->35 [style = bold, label=""];
19->3 [style = bold, label=""];
24->27 [style = bold, label=""];
9->30 [style = dashed, label="0"];
5->29 [style = bold, label=""];
31->36 [style = solid, label="i"];
31->32 [style = solid, label="i"];
22->25 [style = dashed, label="0"];
5->23 [style = bold, label=""];
39->34 [style = bold, label=""];
11->44 [style = bold, label=""];
27->30 [style = bold, label=""];
12->2 [style = solid, label="path"];
37->38 [style = solid, label="i"];
26->14 [style = bold, label=""];
46->39 [style = bold, label=""];
32->36 [style = dotted, label="true"];
39->34 [style = solid, label="data"];
29->26 [style = bold, label=""];
24->20 [style = bold, label=""];
12->11 [style = solid, label="path"];
12->1 [style = solid, label="path"];
49->46 [style = bold, label=""];
32->36 [style = bold, label=""];
48->43 [style = solid, label="i"];
20->11 [style = dashed, label="0"];
50->41 [style = bold, label=""];
14->6 [style = bold, label=""];
43->38 [style = dotted, label="true"];
13->24 [style = solid, label="data"];
36->40 [style = bold, label=""];
13->24 [style = bold, label=""];
47->42 [style = bold, label=""];
10->5 [style = solid, label="qdata"];
11->10 [style = solid, label="statPath"];
31->32 [style = bold, label=""];
12->22 [style = solid, label="path"];
7->4 [style = bold, label=""];
38->48 [style = bold, label=""];
6->15 [style = bold, label=""];
12->25 [style = solid, label="path"];
43->38 [style = bold, label=""];
10->5 [style = bold, label=""];
9->44 [style = dashed, label="0"];
11->10 [style = bold, label=""];
43->48 [style = dotted, label="true"];
40->32 [style = bold, label=""];
4->12 [style = bold, label=""];
3->21 [style = bold, label=""];
1->2 [style = bold, label=""];
8->37 [style = bold, label=""];
42->49 [style = solid, label="zk"];
44->31 [style = bold, label=""];
45->35 [style = solid, label="data"];
18->16 [style = bold, label=""];
32->45 [style = bold, label=""];
8->19 [style = bold, label=""];
20->27 [style = dashed, label="0"];
42->33 [style = bold, label=""];
16->25 [style = bold, label=""];
46->45 [style = solid, label="statPath"];
32->40 [style = dotted, label="true"];
16->22 [style = bold, label=""];
23->29 [style = dashed, label="0"];
12->0 [style = bold, label=""];
15->18 [style = bold, label=""];
34->11 [style = bold, label=""];
2->13 [style = bold, label=""];
4->42 [style = dashed, label="0"];
40->36 [style = solid, label="i"];
43->49 [style = bold, label=""];
17->26 [style = dashed, label="0"];
46->39 [style = solid, label="statPath"];
28->4 [style = bold, label=""];
4->1 [style = solid, label="zk"];
}
