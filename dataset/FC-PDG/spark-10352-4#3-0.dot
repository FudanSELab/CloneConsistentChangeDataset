digraph {
2 [style = filled, label = "PlatformDependent.copyMemory(baseObject,baseOffset + offset,bytes,PlatformDependent.BYTE_ARRAY_OFFSET,size)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return UTF8String.fromBytes(strBytes)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final long offsetToStringSize = getLong(i)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "return null@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "final int stringSizeInBytes = (int)PlatformDependent.UNSAFE.getLong(baseObject,baseOffset + offsetToStringSize)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "int i@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "isNullAt(i)@@@3@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "PlatformDependent.copyMemory(baseObject,baseOffset + offsetToStringSize + 8,strBytes,PlatformDependent.BYTE_ARRAY_OFFSET,stringSizeInBytes)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertIndexIsValid(i)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "return bytes@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int i@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final byte(( bytes = new byte((((@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final byte(( strBytes = new byte((((@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "getBinary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "getBinary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final long offsetAndSize = getLong(i)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "getUTF8String['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
5->3 [style = bold, label=""];
13->10 [style = bold, label=""];
6->17 [style = bold, label=""];
14->16 [style = bold, label=""];
0->4 [style = solid, label="bytes"];
5->13 [style = dashed, label="0"];
5->2 [style = solid, label="offset"];
7->3 [style = solid, label="offsetAndSize"];
1->6 [style = solid, label="i"];
15->14 [style = bold, label=""];
12->7 [style = dotted, label="false"];
12->10 [style = dotted, label="false"];
7->17 [style = dashed, label="0"];
12->2 [style = dotted, label="false"];
12->4 [style = dotted, label="false"];
11->1 [style = dotted, label="true"];
19->20 [style = dotted, label="true"];
0->2 [style = bold, label=""];
12->6 [style = dotted, label="false"];
18->15 [style = bold, label=""];
12->0 [style = dotted, label="false"];
7->5 [style = solid, label="offsetAndSize"];
8->6 [style = bold, label=""];
11->12 [style = bold, label=""];
1->7 [style = solid, label="i"];
5->18 [style = dashed, label="0"];
15->16 [style = solid, label="strBytes"];
12->9 [style = bold, label=""];
2->4 [style = bold, label=""];
12->6 [style = bold, label=""];
19->6 [style = bold, label=""];
3->0 [style = bold, label=""];
20->17 [style = solid, label="i"];
1->20 [style = dashed, label="0"];
8->1 [style = dotted, label="true"];
15->14 [style = solid, label="strBytes"];
7->5 [style = bold, label=""];
18->14 [style = solid, label="stringSizeInBytes"];
7->13 [style = solid, label="offsetAndSize"];
7->10 [style = solid, label="offsetAndSize"];
1->12 [style = solid, label="i"];
10->2 [style = solid, label="size"];
10->0 [style = bold, label=""];
0->2 [style = solid, label="bytes"];
17->18 [style = solid, label="offsetToStringSize"];
3->10 [style = dashed, label="0"];
13->2 [style = solid, label="offset"];
6->7 [style = bold, label=""];
17->14 [style = solid, label="offsetToStringSize"];
17->18 [style = bold, label=""];
3->2 [style = solid, label="size"];
20->6 [style = solid, label="i"];
12->9 [style = dotted, label="true"];
12->13 [style = dotted, label="false"];
}
