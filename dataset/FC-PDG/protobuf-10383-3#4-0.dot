digraph {
4 [style = filled, label = "input.skipRawBytes(1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "input.popLimit(limit)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(inputType.name(),2,input.readRawByte())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "byte(( rawBytes = new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@383326@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "input.skipRawBytes(3)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "input.popLimit(limit)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testSkipRawBytesBug['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(input.isAtEnd())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(5,input.readRawByte())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "CodedInputStream input = inputType.newDecoder(rawBytes)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "int limit = input.pushLimit(4)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "CodedInputStream input = CodedInputStream.newInstance(rawBytes)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "CodedInputStream input = CodedInputStream.newInstance(new SmallBlockInputStream(rawBytes,3))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "int limit = input.pushLimit(1)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testSkipRawBytesBug['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "testSkipRawBytesPastEndOfBufferWithLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(1,input.readRawByte())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int limit = input.pushLimit(1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
0->16 [style = bold, label=""];
15->10 [style = bold, label=""];
16->11 [style = bold, label=""];
0->6 [style = bold, label=""];
12->17 [style = bold, label=""];
2->3 [style = solid, label="limit"];
7->0 [style = bold, label=""];
1->4 [style = solid, label="limit"];
9->8 [style = bold, label=""];
2->4 [style = bold, label=""];
11->15 [style = solid, label="limit"];
3->9 [style = bold, label=""];
0->16 [style = solid, label="rawBytes"];
6->1 [style = bold, label=""];
6->16 [style = dashed, label="0"];
13->12 [style = bold, label=""];
0->8 [style = solid, label="rawBytes"];
14->0 [style = bold, label=""];
5->0 [style = bold, label=""];
8->2 [style = bold, label=""];
3->9 [style = dashed, label="0"];
1->11 [style = dashed, label="0"];
2->13 [style = dashed, label="0"];
11->13 [style = bold, label=""];
0->6 [style = solid, label="rawBytes"];
0->8 [style = bold, label=""];
17->15 [style = bold, label=""];
1->2 [style = bold, label=""];
3->10 [style = dashed, label="0"];
}
