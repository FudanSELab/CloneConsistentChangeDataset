digraph {
22 [style = filled, label = "List<Tuple2<Long,Long>> edgesInput = Arrays.asList(new Tuple2<>(1l,2l),new Tuple2<>(1l,3l),new Tuple2<>(2l,3l),new Tuple2<>(2l,4l),new Tuple2<>(2l,1l),new Tuple2<>(3l,1l),new Tuple2<>(3l,2l),new Tuple2<>(4l,2l),new Tuple2<>(4l,6l),new Tuple2<>(5l,6l),new Tuple2<>(6l,4l),new Tuple2<>(6l,5l),new Tuple2<>(7l,8l),new Tuple2<>(7l,9l),new Tuple2<>(8l,7l),new Tuple2<>(8l,9l),new Tuple2<>(9l,7l),new Tuple2<>(9l,8l))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testConnectedComponentsWithParametrizableConvergence['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "assertEquals(3,aggr_values(0()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "IterativeDataSet<Tuple2<Long,Long>> iteration = initialSolutionSet.iterate(10)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(expectedResult,result)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testConnectedComponentsWithParametrizableConvergence['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "final String UPDATED_ELEMENTS = \"updated.elements.aggr\"@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "DataSet<Tuple2<Long,Long>> edges = env.fromCollection(edgesInput)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<Tuple2<Long,Long>> result = iteration.closeWith(updatedComponentId).collect()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(5,aggr_values(2()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Collections.sort(result,new JavaProgramTestBase.TupleComparator<Tuple2<Long,Long>>())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "iteration.registerAggregator(AGGREGATOR_NAME,new LongSumAggregatorWithParameter(componentId))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "DataSet<Tuple2<Long,Long>> updatedComponentId = verticesWithNewComponents.join(iteration).where(0).equalTo(0).flatMap(new MinimumIdFilterCounting(AGGREGATOR_NAME))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final long componentId = 1l@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "DataSet<Tuple2<Long,Long>> initialSolutionSet = env.fromCollection(verticesInput)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<Tuple2<Long,Long>> result = iteration.closeWith(updatedComponentId).collect()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "IterativeDataSet<Tuple2<Long,Long>> iteration = initialSolutionSet.iterate(MAX_ITERATIONS)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "DataSet<Tuple2<Long,Long>> edges = env.fromCollection(edgesInput)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Collections.sort(result,new JavaProgramTestBase.TupleComparator<Tuple2<Long,Long>>())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<Tuple2<Long,Long>> verticesInput = Arrays.asList(new Tuple2<Long,Long>(1l,1l),new Tuple2<Long,Long>(2l,2l),new Tuple2<Long,Long>(3l,3l),new Tuple2<Long,Long>(4l,4l),new Tuple2<Long,Long>(5l,5l),new Tuple2<Long,Long>(6l,6l),new Tuple2<Long,Long>(7l,7l),new Tuple2<Long,Long>(8l,8l),new Tuple2<Long,Long>(9l,9l))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final String AGGREGATOR_NAME = \"elements.in.component.aggregator\"@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(6,aggr_values(3()@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final int MAX_ITERATIONS = 5@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "DataSet<Tuple2<Long,Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0).with(new NeighborWithComponentIDJoin()).groupBy(0).min(1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final long convergence_threshold = 3@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "testParameterizableAggregator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(expectedResult,result)@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DataSet<Tuple2<Long,Long>> initialSolutionSet = env.fromCollection(verticesInput)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<Tuple2<Long,Long>> expectedResult = Arrays.asList(new Tuple2<>(1L,1L),new Tuple2<>(2L,1L),new Tuple2<>(3L,1L),new Tuple2<>(4L,1L),new Tuple2<>(5L,1L),new Tuple2<>(6L,1L),new Tuple2<>(7L,7L),new Tuple2<>(8L,7L),new Tuple2<>(9L,7L))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(4,aggr_values(1()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<Tuple2<Long,Long>> result = iteration.closeWith(updatedComponentId).collect()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Tuple2<Long,Long>> edgesInput = Arrays.asList(new Tuple2<Long,Long>(1l,2l),new Tuple2<Long,Long>(1l,3l),new Tuple2<Long,Long>(2l,3l),new Tuple2<Long,Long>(2l,4l),new Tuple2<Long,Long>(2l,1l),new Tuple2<Long,Long>(3l,1l),new Tuple2<Long,Long>(3l,2l),new Tuple2<Long,Long>(4l,2l),new Tuple2<Long,Long>(4l,6l),new Tuple2<Long,Long>(5l,6l),new Tuple2<Long,Long>(6l,4l),new Tuple2<Long,Long>(6l,5l),new Tuple2<Long,Long>(7l,8l),new Tuple2<Long,Long>(7l,9l),new Tuple2<Long,Long>(8l,7l),new Tuple2<Long,Long>(8l,9l),new Tuple2<Long,Long>(9l,7l),new Tuple2<Long,Long>(9l,8l))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "long(( aggr_values = MinimumIdFilterCounting.aggr_value@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
19->18 [style = bold, label=""];
27->32 [style = bold, label=""];
25->30 [style = solid, label="AGGREGATOR_NAME"];
30->13 [style = bold, label=""];
10->15 [style = bold, label=""];
27->29 [style = solid, label="aggr_values"];
20->30 [style = solid, label="componentId"];
2->6 [style = bold, label=""];
15->21 [style = bold, label=""];
26->29 [style = bold, label=""];
31->5 [style = bold, label=""];
27->32 [style = solid, label="aggr_values"];
14->3 [style = solid, label="verticesInput"];
1->7 [style = solid, label="expectedResult"];
14->22 [style = bold, label=""];
27->24 [style = solid, label="aggr_values"];
15->21 [style = dashed, label="0"];
22->28 [style = bold, label=""];
19->3 [style = solid, label="convergence_threshold"];
20->3 [style = bold, label=""];
21->30 [style = bold, label=""];
16->19 [style = bold, label=""];
27->26 [style = solid, label="aggr_values"];
1->7 [style = bold, label=""];
33->27 [style = bold, label=""];
8->4 [style = solid, label="UPDATED_ELEMENTS"];
2->4 [style = solid, label="convergence_threshold"];
16->3 [style = solid, label="UPDATED_ELEMENTS"];
1->23 [style = bold, label=""];
25->31 [style = solid, label="AGGREGATOR_NAME"];
14->10 [style = solid, label="verticesInput"];
4->11 [style = solid, label="result"];
8->13 [style = solid, label="UPDATED_ELEMENTS"];
3->10 [style = bold, label=""];
5->1 [style = bold, label=""];
24->26 [style = bold, label=""];
25->20 [style = bold, label=""];
23->33 [style = bold, label=""];
14->0 [style = bold, label=""];
8->2 [style = bold, label=""];
0->10 [style = solid, label="edgesInput"];
13->31 [style = dashed, label="0"];
5->33 [style = solid, label="result"];
23->33 [style = solid, label="expectedResult"];
16->15 [style = solid, label="UPDATED_ELEMENTS"];
11->13 [style = bold, label=""];
12->14 [style = bold, label=""];
15->4 [style = bold, label=""];
0->8 [style = bold, label=""];
5->1 [style = solid, label="result"];
9->5 [style = bold, label=""];
28->25 [style = bold, label=""];
22->15 [style = solid, label="edgesInput"];
18->8 [style = bold, label=""];
13->9 [style = bold, label=""];
34->14 [style = bold, label=""];
13->31 [style = bold, label=""];
4->13 [style = solid, label="result"];
4->11 [style = bold, label=""];
32->24 [style = bold, label=""];
1->23 [style = dashed, label="0"];
28->21 [style = solid, label="MAX_ITERATIONS"];
9->7 [style = solid, label="result"];
9->5 [style = solid, label="result"];
17->16 [style = bold, label=""];
}
