digraph {
29 [style = filled, label = "sampleByKeyExact['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(2,worCounts.size())@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(wrExactCounts.get(0) == 2)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "sampleByKey['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "JavaPairRDD<Integer,Integer> wrExact = rdd2.sampleByKeyExact(true,fractions,1L)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(worCounts.get(0) > 0)@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Map<Integer,Long> worCounts = wor.countByKey()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(2,wrExactCounts.size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(worCounts.get(1) > 0)@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(worCounts.get(1) > 0)@@@22@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "fractions.put(0,0.5)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertTrue(worExactCounts.get(1) == 4)@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(worCounts.get(0) > 0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Map<Integer,Double> fractions = new HashMap<>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "JavaPairRDD<Integer,Integer> wor = rdd2.sampleByKey(false,fractions,1L)@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(worExactCounts.get(0) == 2)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(2,worExactCounts.size())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "fractions.put(1,1.0)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "JavaPairRDD<Integer,Integer> rdd2 = rdd1.mapToPair(null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "fractions.put(1,1.0)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "JavaPairRDD<Integer,Integer> rdd2 = rdd1.mapToPair(new PairFunction<Integer,Integer,Integer>(){@Override public Tuple2<Integer,Integer> call(Integer i){return new Tuple2<>(i % 2,1)}})@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "fractions.put(0,0.5)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "sampleByKey['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Map<Integer,Long> worExactCounts = worExact.countByKey()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertTrue(wrExactCounts.get(1) == 4)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "JavaPairRDD<Integer,Integer> wr = rdd2.sampleByKey(true,fractions,1L)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "Map<Integer,Long> wrExactCounts = wrExact.countByKey()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(2,worCounts.size())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "JavaPairRDD<Integer,Integer> worExact = rdd2.sampleByKeyExact(false,fractions,1L)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "JavaRDD<Integer> rdd1 = sc.parallelize(Arrays.asList(1,2,3,4,5,6,7,8),3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Map<Integer,Long> wrCounts = wr.countByKey()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "JavaPairRDD<Integer,Integer> wor = rdd2.sampleByKey(false,fractions,1L)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Map<Integer,Long> worCounts = wor.countByKey()@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Map<Integer,Double> fractions = new HashMap<>()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2->23 [style = dashed, label="0"];
18->4 [style = solid, label="fractions"];
4->14 [style = bold, label=""];
31->25 [style = bold, label=""];
15->7 [style = bold, label=""];
25->30 [style = bold, label=""];
27->28 [style = bold, label=""];
9->28 [style = dashed, label="0"];
24->32 [style = bold, label=""];
30->23 [style = bold, label=""];
18->21 [style = solid, label="fractions"];
23->26 [style = bold, label=""];
6->33 [style = solid, label="fractions"];
18->17 [style = bold, label=""];
0->32 [style = dashed, label="0"];
3->6 [style = bold, label=""];
1->0 [style = bold, label=""];
7->4 [style = bold, label=""];
14->27 [style = dashed, label="0"];
33->27 [style = bold, label=""];
4->33 [style = dashed, label="0"];
6->15 [style = bold, label=""];
6->4 [style = solid, label="fractions"];
20->18 [style = bold, label=""];
12->13 [style = bold, label=""];
7->33 [style = bold, label=""];
10->30 [style = dashed, label="0"];
19->13 [style = bold, label=""];
13->3 [style = bold, label=""];
21->22 [style = bold, label=""];
11->10 [style = bold, label=""];
6->5 [style = solid, label="fractions"];
16->21 [style = bold, label=""];
1->24 [style = dashed, label="0"];
3->20 [style = dashed, label="0"];
11->25 [style = dashed, label="0"];
5->31 [style = dashed, label="0"];
28->24 [style = bold, label=""];
22->6 [style = bold, label=""];
14->9 [style = bold, label=""];
10->2 [style = bold, label=""];
5->11 [style = bold, label=""];
6->31 [style = solid, label="fractions"];
9->1 [style = bold, label=""];
8->26 [style = dashed, label="0"];
32->31 [style = bold, label=""];
17->16 [style = bold, label=""];
2->8 [style = bold, label=""];
0->5 [style = bold, label=""];
13->20 [style = bold, label=""];
29->13 [style = bold, label=""];
}
