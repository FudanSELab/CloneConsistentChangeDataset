digraph {
3 [style = filled, label = "Assert.assertEquals(score,(_constraint.getMaxScore() + _constraint.getMinScore()) / 2)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "float score = _constraint.getAssignmentScore(_testNode,_testReplica,_clusterContext)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testGetAssignmentScoreWhenReplicaNotTopState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(_testReplica.isReplicaTopState()).thenReturn(true)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testGetAssignmentScoreWhenReplicaNotTopState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(score,0.5f)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testGetAssignmentScoreWhenReplicaIsTopStateLightLoad['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "float score = _constraint.getAssignmentScore(_testNode,_testReplica,_clusterContext)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(normalizedScore,0.5f)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "verifyZeroInteractions(_clusterContext)@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "float normalizedScore = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "when(_testNode.getAssignedTopStatePartitionsCount()).thenReturn(0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "when(_clusterContext.getEstimatedMaxTopStateCount()).thenReturn(20)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(score,1f)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(_testReplica.isReplicaTopState()).thenReturn(false)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "verifyZeroInteractions(_testNode)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "verifyZeroInteractions(_clusterContext)@@@7@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4->6 [style = solid, label="score"];
10->6 [style = bold, label=""];
7->9 [style = bold, label=""];
12->14 [style = bold, label=""];
5->1 [style = bold, label=""];
10->7 [style = solid, label="normalizedScore"];
11->1 [style = bold, label=""];
14->0 [style = bold, label=""];
16->12 [style = bold, label=""];
0->15 [style = bold, label=""];
0->15 [style = solid, label="score"];
4->3 [style = solid, label="score"];
13->16 [style = bold, label=""];
3->0 [style = bold, label=""];
3->15 [style = dashed, label="0"];
1->4 [style = bold, label=""];
1->16 [style = dashed, label="0"];
4->10 [style = bold, label=""];
0->2 [style = bold, label=""];
6->7 [style = bold, label=""];
9->8 [style = bold, label=""];
4->3 [style = bold, label=""];
}
