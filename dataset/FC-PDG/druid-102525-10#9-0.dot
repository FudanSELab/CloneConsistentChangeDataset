digraph {
18 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testRunConflicting['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertEquals(3,task1.getRunner().getRowIngestionMeters().getProcessed())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "SegmentDescriptor desc2 = SD(task1,\"2011/P1D\",0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L,1,1L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final KafkaIndexTask task2 = createTask(null,new KafkaIndexTaskIOConfig(1,\"sequence1\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final KafkaIndexTask task2 = createTask(null,new KafkaIndexTaskIOConfig(1,\"sequence1\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(1,0L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(1,1L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testRunTwoTasksTwoPartitions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getThrownAway())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "insertData()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(1,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "SegmentDescriptor desc1 = SD(task1,\"2010/P1D\",0)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "testRunTwoTasksTwoPartitions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "SegmentDescriptor desc2 = sd(task1,\"2011/P1D\",0)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(3,task1.getRunner().getRowIngestionMeters().getProcessed())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(TaskState.FAILED,future2.get().getStatusCode())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "SegmentDescriptor desc1 = sd(task1,\"2010/P1D\",0)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(3,task2.getRunner().getRowIngestionMeters().getProcessed())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3),publishedDescriptors())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "SegmentDescriptor desc3 = sd(task2,\"2012/P1D\",0)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(3,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc3))@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "SegmentDescriptor desc1 = SD(task1,\"2010/P1D\",0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33->30 [style = solid, label="desc1"];
14->3 [style = bold, label=""];
5->10 [style = bold, label=""];
28->29 [style = bold, label=""];
8->29 [style = solid, label="task1"];
14->18 [style = solid, label="task2"];
16->37 [style = bold, label=""];
33->35 [style = bold, label=""];
33->5 [style = solid, label="desc1"];
9->16 [style = dashed, label="0"];
15->7 [style = bold, label=""];
25->22 [style = bold, label=""];
27->0 [style = bold, label=""];
8->22 [style = solid, label="task1"];
16->19 [style = dashed, label="0"];
0->19 [style = bold, label=""];
12->21 [style = bold, label=""];
32->12 [style = bold, label=""];
6->25 [style = bold, label=""];
5->17 [style = solid, label="desc2"];
5->15 [style = solid, label="desc2"];
18->11 [style = bold, label=""];
4->15 [style = bold, label=""];
8->14 [style = bold, label=""];
25->4 [style = solid, label="desc1"];
8->26 [style = bold, label=""];
12->34 [style = bold, label=""];
11->12 [style = bold, label=""];
10->17 [style = bold, label=""];
11->32 [style = bold, label=""];
1->0 [style = bold, label=""];
23->7 [style = solid, label="desc3"];
35->5 [style = solid, label="desc2"];
8->3 [style = solid, label="task1"];
10->7 [style = solid, label="desc3"];
6->37 [style = dashed, label="0"];
8->5 [style = solid, label="task1"];
22->23 [style = bold, label=""];
35->31 [style = solid, label="desc2"];
8->25 [style = solid, label="task1"];
14->26 [style = dashed, label="0"];
9->6 [style = bold, label=""];
20->5 [style = bold, label=""];
19->16 [style = bold, label=""];
3->18 [style = bold, label=""];
14->10 [style = solid, label="task2"];
6->20 [style = bold, label=""];
35->5 [style = bold, label=""];
29->11 [style = bold, label=""];
8->33 [style = solid, label="task1"];
26->32 [style = solid, label="task2"];
20->25 [style = dashed, label="0"];
30->31 [style = bold, label=""];
21->1 [style = bold, label=""];
8->20 [style = solid, label="task1"];
25->17 [style = solid, label="desc1"];
23->17 [style = solid, label="desc3"];
36->8 [style = bold, label=""];
8->35 [style = solid, label="task1"];
23->17 [style = bold, label=""];
17->13 [style = bold, label=""];
17->10 [style = dashed, label="0"];
26->28 [style = bold, label=""];
20->17 [style = solid, label="desc1"];
24->8 [style = bold, label=""];
10->17 [style = solid, label="desc3"];
37->33 [style = bold, label=""];
22->15 [style = solid, label="desc2"];
14->23 [style = solid, label="task2"];
22->17 [style = solid, label="desc2"];
10->23 [style = dashed, label="0"];
10->30 [style = bold, label=""];
16->9 [style = bold, label=""];
20->4 [style = solid, label="desc1"];
2->8 [style = bold, label=""];
34->27 [style = bold, label=""];
13->4 [style = bold, label=""];
5->22 [style = dashed, label="0"];
}
