digraph {
13 [style = filled, label = "given(this.securityService.getAccessLevel(accessToken,\"my-app-id\")).willReturn(AccessLevel.FULL)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "SecurityResponse response = this.interceptor.preHandle(this.request,\"/a\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "this.request.addHeader(\"Authorization\",\"Bearer \" + accessToken)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(token.toString()).isEqualTo(accessToken)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "verify(this.tokenValidator).validate(tokenArgumentCaptor.capture())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "given(this.securityService.getAccessLevel(accessToken,\"my-app-id\")).willReturn(AccessLevel.RESTRICTED)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "SecurityResponse response = this.interceptor.preHandle(this.request,EndpointId.of(\"info\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "preHandleSuccessfulWithFullAccess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Token token = tokenArgumentCaptor.getValue()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String accessToken = mockAccessToken()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "preHandleSuccessfulWithRestrictedAccess['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "SecurityResponse response = this.interceptor.preHandle(this.request,\"info\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertThat(this.request.getAttribute(\"cloudFoundryAccessLevel\")).isEqualTo(AccessLevel.RESTRICTED)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ArgumentCaptor<Token> tokenArgumentCaptor = ArgumentCaptor.forClass()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(response.getStatus()).isEqualTo(HttpStatus.OK)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(this.request.getAttribute(\"cloudFoundryAccessLevel\")).isEqualTo(AccessLevel.FULL)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "preHandleSuccessfulWithRestrictedAccess['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->13 [style = dashed, label="0"];
4->9 [style = bold, label=""];
8->16 [style = bold, label=""];
15->10 [style = bold, label=""];
0->13 [style = bold, label=""];
1->14 [style = dashed, label="0"];
7->16 [style = dashed, label="0"];
11->6 [style = bold, label=""];
2->10 [style = bold, label=""];
8->7 [style = bold, label=""];
5->1 [style = bold, label=""];
6->4 [style = bold, label=""];
12->10 [style = bold, label=""];
1->6 [style = bold, label=""];
10->3 [style = solid, label="accessToken"];
1->11 [style = dashed, label="0"];
3->8 [style = bold, label=""];
10->0 [style = bold, label=""];
9->3 [style = bold, label=""];
10->0 [style = solid, label="accessToken"];
5->11 [style = bold, label=""];
13->14 [style = bold, label=""];
14->6 [style = bold, label=""];
0->5 [style = bold, label=""];
}
