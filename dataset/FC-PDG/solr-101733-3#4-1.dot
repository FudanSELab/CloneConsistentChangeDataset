digraph {
19 [style = filled, label = "medianTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Double intResult = (Double)getStatResult(\"mr\",\"int_id\",VAL_TYPE.DOUBLE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Double doubleTest = (Double)calculateNumberStat(doubleTestStart,\"median\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Double floatResult = (Double)getStatResult(\"medr\",\"float_fd\",VAL_TYPE.DOUBLE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Double longTest = (Double)calculateNumberStat(longTestStart,\"median\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "meanTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Double intTest = (Double)calculateNumberStat(intTestStart,\"mean\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertEquals(getRawResponse(),floatResult,floatTest)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Double doubleTest = (Double)calculateNumberStat(doubleTestStart,\"mean\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Double longTest = (Double)calculateNumberStat(longTestStart,\"mean\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Double doubleTest = calculateNumberStat(doubleTestStart,\"mean\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"mr\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Double intResult = (Double)getStatResult(\"medr\",\"int_id\",VAL_TYPE.DOUBLE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Double intTest = calculateNumberStat(intTestStart,\"mean\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Double longResult = (Double)getStatResult(\"mr\",\"long_ld\",VAL_TYPE.DOUBLE)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Double floatTest = (Double)calculateNumberStat(floatTestStart,\"mean\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Double floatTest = calculateNumberStat(floatTestStart,\"mean\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(getRawResponse(),intResult,intTest)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "meanTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(getRawResponse(),doubleResult,doubleTest)@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Double longTest = calculateNumberStat(longTestStart,\"mean\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"medr\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Double longResult = (Double)getStatResult(\"medr\",\"long_ld\",VAL_TYPE.DOUBLE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Double floatTest = (Double)calculateNumberStat(floatTestStart,\"median\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(getRawResponse(),longResult,longTest)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Double intTest = (Double)calculateNumberStat(intTestStart,\"median\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Double floatResult = (Double)getStatResult(\"mr\",\"float_fd\",VAL_TYPE.DOUBLE)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->9 [style = solid, label="longResult"];
4->9 [style = bold, label=""];
14->3 [style = bold, label=""];
8->10 [style = bold, label=""];
21->3 [style = solid, label="intResult"];
26->6 [style = solid, label="floatResult"];
16->0 [style = bold, label=""];
12->0 [style = solid, label="doubleResult"];
23->3 [style = solid, label="intTest"];
12->5 [style = bold, label=""];
7->18 [style = dashed, label="0"];
6->22 [style = bold, label=""];
11->3 [style = solid, label="intTest"];
16->0 [style = solid, label="doubleTest"];
15->9 [style = solid, label="longTest"];
25->9 [style = bold, label=""];
20->0 [style = bold, label=""];
20->0 [style = solid, label="doubleTest"];
11->23 [style = dashed, label="0"];
23->3 [style = bold, label=""];
12->16 [style = bold, label=""];
7->4 [style = bold, label=""];
10->13 [style = dashed, label="0"];
10->6 [style = solid, label="floatTest"];
9->8 [style = bold, label=""];
26->24 [style = bold, label=""];
10->6 [style = bold, label=""];
14->3 [style = solid, label="intTest"];
2->3 [style = solid, label="intResult"];
5->0 [style = solid, label="doubleTest"];
5->20 [style = dashed, label="0"];
3->18 [style = bold, label=""];
9->26 [style = bold, label=""];
5->16 [style = dashed, label="0"];
4->25 [style = dashed, label="0"];
24->6 [style = solid, label="floatTest"];
17->2 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
11->3 [style = bold, label=""];
22->20 [style = bold, label=""];
15->9 [style = bold, label=""];
25->9 [style = solid, label="longTest"];
4->15 [style = dashed, label="0"];
11->14 [style = dashed, label="0"];
2->21 [style = dashed, label="0"];
2->14 [style = bold, label=""];
12->22 [style = dashed, label="0"];
18->25 [style = bold, label=""];
7->9 [style = solid, label="longResult"];
22->0 [style = solid, label="doubleResult"];
7->15 [style = bold, label=""];
8->6 [style = solid, label="floatResult"];
4->9 [style = solid, label="longTest"];
1->2 [style = bold, label=""];
19->21 [style = bold, label=""];
13->6 [style = bold, label=""];
24->6 [style = bold, label=""];
8->26 [style = dashed, label="0"];
10->24 [style = dashed, label="0"];
2->11 [style = bold, label=""];
13->6 [style = solid, label="floatTest"];
8->13 [style = bold, label=""];
21->23 [style = bold, label=""];
6->12 [style = bold, label=""];
}
