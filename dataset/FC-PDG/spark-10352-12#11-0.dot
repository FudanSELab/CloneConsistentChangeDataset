digraph {
3 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "return null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "getBinary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "return bytes@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PlatformDependent.copyMemory(baseObject,baseOffset + offset,bytes,PlatformDependent.BYTE_ARRAY_OFFSET,size)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "final byte(( bytes = new byte((((@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Platform.copyMemory(baseObject,baseOffset + offset,bytes,Platform.BYTE_ARRAY_OFFSET,size)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "getBinary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "getUTF8String['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "return UTF8String.fromAddress(baseObject,baseOffset + offset,size)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return null@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "isNullAt(ordinal)@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2->10 [style = solid, label="size"];
8->7 [style = dotted, label="false"];
5->10 [style = bold, label=""];
8->3 [style = dotted, label="false"];
0->8 [style = solid, label="ordinal"];
16->13 [style = solid, label="ordinal"];
9->3 [style = solid, label="offsetAndSize"];
12->15 [style = bold, label=""];
0->16 [style = dashed, label="0"];
3->4 [style = solid, label="offset"];
18->12 [style = bold, label=""];
8->4 [style = dotted, label="false"];
5->7 [style = solid, label="bytes"];
8->14 [style = dashed, label="0"];
8->10 [style = dotted, label="false"];
10->7 [style = bold, label=""];
2->4 [style = solid, label="size"];
8->2 [style = dotted, label="false"];
4->7 [style = bold, label=""];
8->9 [style = dotted, label="false"];
17->16 [style = dotted, label="true"];
8->1 [style = dotted, label="true"];
9->2 [style = solid, label="offsetAndSize"];
8->1 [style = bold, label=""];
15->9 [style = solid, label="size"];
3->2 [style = bold, label=""];
15->9 [style = bold, label=""];
11->0 [style = dotted, label="true"];
18->12 [style = solid, label="offsetAndSize"];
5->4 [style = bold, label=""];
6->8 [style = bold, label=""];
5->4 [style = solid, label="bytes"];
8->9 [style = bold, label=""];
18->15 [style = solid, label="offsetAndSize"];
9->3 [style = bold, label=""];
11->8 [style = bold, label=""];
3->10 [style = solid, label="offset"];
12->9 [style = solid, label="offset"];
8->5 [style = dotted, label="false"];
14->18 [style = bold, label=""];
17->13 [style = bold, label=""];
6->0 [style = dotted, label="true"];
4->10 [style = dashed, label="0"];
13->14 [style = dotted, label="true"];
16->18 [style = solid, label="ordinal"];
13->14 [style = bold, label=""];
0->9 [style = solid, label="ordinal"];
5->10 [style = solid, label="bytes"];
13->18 [style = bold, label=""];
2->5 [style = bold, label=""];
}
