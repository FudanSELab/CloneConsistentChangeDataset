digraph {
6 [style = filled, label = "List<QueryRunner<ResultRow>> singleSegmentRunners = new ArrayList<>()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ExecutorService exec = Executors.newCachedThreadPool()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int i = 0@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = 0@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testBySegmentResults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "QueryRunner theRunner = toolChest.postMergeQueryDecoration(new FinalizeResultsQueryRunner<>(toolChest.mergeResults(factory.mergeRunners(Executors.newCachedThreadPool(),singleSegmentRunners)),toolChest))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<Result> bySegmentResults = new ArrayList<>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "QueryToolChest toolChest = factory.getToolchest()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestHelper.assertExpectedObjects(bySegmentResults,theRunner.run(QueryPlus.wrap(fullQuery)),\"bySegment\")@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "exec.shutdownNow()@@@23@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Result<BySegmentResultValue> singleSegmentResult = new Result<>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new BySegmentResultValueClass<>(Collections.singletonList(makeRow(fullQuery,\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L)),QueryRunnerTestHelper.SEGMENT_ID.toString(),Intervals.of(\"2011-04-02T00:00:00.000Z/2011-04-04T00:00:00.000Z\")))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "i < segmentCount@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testBySegmentResults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "i++@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testBySegmentResultsUnOptimizedDimextraction['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "singleSegmentRunners.add(toolChest.preMergeQueryDecoration(runner))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Result<BySegmentResultValue> singleSegmentResult = new Result<>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new BySegmentResultValueClass<>(Collections.singletonList(makeRow(fullQuery,\"2011-04-01\",\"alias\",\"mezzanine0\",\"rows\",6L,\"idx\",4420L)),QueryRunnerTestHelper.SEGMENT_ID.toString(),Intervals.of(\"2011-04-02T00:00:00.000Z/2011-04-04T00:00:00.000Z\")))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "i++@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final GroupByQuery fullQuery = builder.build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i < segmentCount@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "bySegmentResults.add(singleSegmentResult)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setDimFilter(new SelectorDimFilter(\"quality\",\"mezzanine\",null)).setContext(ImmutableMap.of(QueryContexts.BY_SEGMENT_KEY,true))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(ImmutableMap.of(\"mezzanine\",\"mezzanine0\"),false),false,null,false,false))).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setDimFilter(new SelectorDimFilter(\"quality\",\"mezzanine\",null)).setContext(ImmutableMap.of(\"bySegment\",true))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setDimFilter(new SelectorDimFilter(\"quality\",\"mezzanine\",null)).setContext(ImmutableMap.of(\"bySegment\",true))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "int segmentCount = 32@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
16->15 [style = bold, label=""];
1->17 [style = solid, label="i"];
4->14 [style = bold, label=""];
15->10 [style = bold, label=""];
9->2 [style = solid, label="toolChest"];
3->21 [style = dashed, label="0"];
11->1 [style = bold, label=""];
24->11 [style = solid, label="singleSegmentResult"];
17->1 [style = dotted, label="true"];
17->9 [style = bold, label=""];
15->18 [style = dotted, label="true"];
18->15 [style = bold, label=""];
21->8 [style = bold, label=""];
0->17 [style = solid, label="segmentCount"];
17->11 [style = dotted, label="true"];
3->22 [style = dashed, label="0"];
16->15 [style = solid, label="i"];
0->15 [style = solid, label="segmentCount"];
16->18 [style = solid, label="i"];
5->1 [style = solid, label="i"];
5->17 [style = bold, label=""];
6->2 [style = solid, label="singleSegmentRunners"];
9->6 [style = bold, label=""];
1->17 [style = bold, label=""];
24->14 [style = bold, label=""];
8->7 [style = solid, label="fullQuery"];
20->21 [style = bold, label=""];
8->0 [style = bold, label=""];
22->8 [style = bold, label=""];
8->4 [style = solid, label="fullQuery"];
5->17 [style = solid, label="i"];
18->15 [style = solid, label="i"];
23->22 [style = bold, label=""];
0->4 [style = bold, label=""];
6->16 [style = bold, label=""];
8->24 [style = solid, label="fullQuery"];
3->8 [style = bold, label=""];
0->24 [style = bold, label=""];
12->18 [style = bold, label=""];
15->12 [style = dotted, label="true"];
10->2 [style = bold, label=""];
15->12 [style = bold, label=""];
4->11 [style = solid, label="singleSegmentResult"];
2->7 [style = bold, label=""];
4->24 [style = dashed, label="0"];
14->7 [style = solid, label="bySegmentResults"];
19->3 [style = bold, label=""];
14->5 [style = bold, label=""];
17->11 [style = bold, label=""];
}
