digraph {
8 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ByteBuffer unwrappedBuffer = inputSharing.getBuffer()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final int individualRead = 60@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "readAtLeast['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "SocketChannel mockChannel = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "readAtLeast['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "unwrappedBuffer.limit(unwrappedBuffer.position() + preexistingBytes)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final ByteBufferVendor inputSharingImpl = (ByteBufferVendor)inputSharing@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(inputSharing.getBuffer().capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "unwrappedBuffer.position(unwrappedBuffer.capacity() - individualRead)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
7->4 [style = solid, label="individualRead"];
6->4 [style = bold, label=""];
7->10 [style = bold, label=""];
25->21 [style = solid, label="initialFreeSpace"];
24->20 [style = bold, label=""];
4->25 [style = bold, label=""];
16->18 [style = bold, label=""];
1->12 [style = bold, label=""];
1->20 [style = dashed, label="0"];
11->0 [style = bold, label=""];
23->26 [style = solid, label="initialUnwrappedBufferSize"];
9->13 [style = bold, label=""];
13->6 [style = bold, label=""];
7->1 [style = solid, label="individualRead"];
10->12 [style = solid, label="preexistingBytes"];
20->8 [style = bold, label=""];
0->24 [style = dashed, label="0"];
14->9 [style = bold, label=""];
23->25 [style = solid, label="initialUnwrappedBufferSize"];
2->18 [style = dashed, label="0"];
19->24 [style = bold, label=""];
22->15 [style = bold, label=""];
15->7 [style = bold, label=""];
7->8 [style = solid, label="individualRead"];
0->1 [style = bold, label=""];
10->4 [style = solid, label="preexistingBytes"];
23->26 [style = bold, label=""];
16->2 [style = bold, label=""];
26->19 [style = bold, label=""];
25->21 [style = bold, label=""];
5->11 [style = bold, label=""];
17->15 [style = bold, label=""];
16->14 [style = solid, label="testSSLEngine"];
10->19 [style = solid, label="preexistingBytes"];
11->23 [style = bold, label=""];
10->21 [style = solid, label="preexistingBytes"];
3->15 [style = bold, label=""];
10->25 [style = solid, label="preexistingBytes"];
2->14 [style = bold, label=""];
26->20 [style = solid, label="unwrappedBuffer"];
18->14 [style = bold, label=""];
12->8 [style = bold, label=""];
10->5 [style = bold, label=""];
}
