digraph {
16 [style = filled, label = "credFile.exists()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "parseNetworkHandlerConfig['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "boolean refresh@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String configJson = loadConfigFile(configFile,decryptProject)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "IFolder mdFolder = registry.getProject().getMetadataFolder(false)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DBPDataSourceConfigurationStorage configurationStorage@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "curNetworkHandler.setUserName(creds.getUserName())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "IFile configFile@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "boolean refresh@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "@Nullable DBWNetworkProfile profile@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "DataSourceRegistry.ParseResults parseResults@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "properties != null@@@28@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "String handlerId = handlerObject.getKey()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "!CommonUtils.isEmpty(userName)@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg,RegistryConstants.ATTR_SAVE_PASSWORD))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "{Map<String,Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON,new StringReader(configJson))for (Map.Entry<String,Map<String,Object>> folderMap : JSONUtils.getNestedObjects(jsonMap,\"folders\")){String name = folderMap.getKey()String description = JSONUtils.getObjectProperty(folderMap.getValue(),RegistryConstants.ATTR_DESCRIPTION)String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(),RegistryConstants.ATTR_PARENT)DataSourceFolder parent = parentFolder == null? null: registry.findFolderByPath(parentFolder,true)DataSourceFolder folder = parent == null? registry.findFolderByPath(name,true): parent.getChild(name)if (folder == null) {folder = new DataSourceFolder(registry,parent,name,description)registry.addDataSourceFolder(folder)}{folder.setDescription(description)}}for (Map.Entry<String,Map<String,Object>> ctMap : JSONUtils.getNestedObjects(jsonMap,\"connection-types\")){String id = ctMap.getKey()Map<String,Object> ctConfig = ctMap.getValue()String name = JSONUtils.getObjectProperty(ctConfig,RegistryConstants.ATTR_NAME)String description = JSONUtils.getObjectProperty(ctConfig,RegistryConstants.ATTR_DESCRIPTION)String color = JSONUtils.getObjectProperty(ctConfig,RegistryConstants.ATTR_COLOR)Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig,\"auto-commit\")Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig,\"confirm-execute\")Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig,\"confirm-data-change\")DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id,null)if (ct == null) {ct = new DBPConnectionType(id,name,color,description,CommonUtils.toBoolean(autoCommit),CommonUtils.toBoolean(confirmExecute),CommonUtils.toBoolean(confirmDataChange))DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct)}deserializeModifyPermissions(ctConfig,ct)}Map<String,DBVModel> modelMap = new LinkedHashMap<>()for (Map.Entry<String,Map<String,Object>> vmMap : JSONUtils.getNestedObjects(jsonMap,\"virtual-models\")){String id = vmMap.getKey()DBVModel model = new DBVModel(id,vmMap.getValue())modelMap.put(id,model)}for (Map.Entry<String,Map<String,Object>> vmMap : JSONUtils.getNestedObjects(jsonMap,\"network-profiles\")){String profileId = vmMap.getKey()Map<String,Object> profileMap = vmMap.getValue()DBWNetworkProfile profile = new DBWNetworkProfile()profile.setProfileName(profileId)profile.setProfileName(profileId)profile.setProperties(JSONUtils.deserializeStringMap(profileMap,\"properties\"))for (Map.Entry<String,Map<String,Object>> handlerMap : JSONUtils.getNestedObjects(profileMap,\"handlers\")){DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null,profile,handlerMap)if (configuration != null) {profile.updateConfiguration(configuration)}}registry.updateNetworkProfile(profile)}for (Map.Entry<String,Map<String,Object>> vmMap : JSONUtils.getNestedObjects(jsonMap,\"auth-profiles\")){String profileId = vmMap.getKey()Map<String,Object> profileMap = vmMap.getValue()DBAAuthProfile profile = new DBAAuthProfile()profile.setProfileId(profileId)profile.setProfileName(JSONUtils.getString(profileMap,RegistryConstants.ATTR_NAME))profile.setAuthModelId(JSONUtils.getString(profileMap,RegistryConstants.ATTR_AUTH_MODEL))profile.setSavePassword(JSONUtils.getBoolean(profileMap,RegistryConstants.ATTR_SAVE_PASSWORD))SecureCredentials authCreds = readSecuredCredentials(null,profile,null)profile.setUserName(authCreds.getUserName())profile.setUserPassword(authCreds.getUserPassword())profile.setProperties(authCreds.getProperties())registry.updateAuthProfile(profile)}for (Map.Entry<String,Map<String,Object>> conMap : JSONUtils.getNestedObjects(jsonMap,\"connections\")){Map<String,Object> conObject = conMap.getValue()String id = conMap.getKey()String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER))if (CommonUtils.isEmpty(dsProviderID)) {log.warn(\"Empty datasource provider for datasource '\" + id + \"'\")continue}DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(dsProviderID)if (provider == null) {log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\")provider = (DataSourceProviderDescriptor)DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID)}String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER))DriverDescriptor driver = provider.getDriver(driverId)if (driver == null) {log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\")driver = provider.createDriver(driverId)driver.setName(driverId)driver.setDescription(\"Missing driver \" + driverId)driver.setDriverClassName(\"java.sql.Driver\")driver.setTemporary(true)provider.addDriver(driver)}DataSourceDescriptor dataSource = registry.getDataSource(id)boolean newDataSource = (dataSource == null)if (newDataSource) {dataSource = new DataSourceDescriptor(registry,configurationStorage,id,driver,new DBPConnectionConfiguration())}{dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap())dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList())dataSource.clearFilters()}dataSource.setName(JSONUtils.getString(conObject,RegistryConstants.ATTR_NAME))dataSource.setDescription(JSONUtils.getString(conObject,RegistryConstants.TAG_DESCRIPTION))dataSource.setSavePassword(JSONUtils.getBoolean(conObject,RegistryConstants.ATTR_SAVE_PASSWORD))DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings()navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject,DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS))navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject,DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS))navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject,DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES))navSettings.setHideFolders(JSONUtils.getBoolean(conObject,DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS))navSettings.setHideSchemas(JSONUtils.getBoolean(conObject,DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS))navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject,DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL))navSettings.setMergeEntities(JSONUtils.getBoolean(conObject,DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES))dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject,RegistryConstants.ATTR_READ_ONLY))final String folderPath = JSONUtils.getString(conObject,RegistryConstants.ATTR_FOLDER)if (folderPath != null) {dataSource.setFolder(registry.findFolderByPath(folderPath,true))}dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD))){Map<String,Object> cfgObject = JSONUtils.getObject(conObject,\"configuration\")DBPConnectionConfiguration config = dataSource.getConnectionConfiguration()config.setHostName(JSONUtils.getString(cfgObject,RegistryConstants.ATTR_HOST))config.setHostPort(JSONUtils.getString(cfgObject,RegistryConstants.ATTR_PORT))config.setServerName(JSONUtils.getString(cfgObject,RegistryConstants.ATTR_SERVER))config.setDatabaseName(JSONUtils.getString(cfgObject,RegistryConstants.ATTR_DATABASE))config.setUrl(JSONUtils.getString(cfgObject,RegistryConstants.ATTR_URL))if (!passwordReadCanceled) {final SecureCredentials creds = readSecuredCredentials(dataSource,null,null)config.setUserName(creds.getUserName())if (dataSource.isSavePassword()) {config.setUserPassword(creds.getUserPassword())}}{String userName = JSONUtils.getString(cfgObject,RegistryConstants.ATTR_USER)if (!CommonUtils.isEmpty(userName)) config.setUserName(userName)String userPassword = JSONUtils.getString(cfgObject,RegistryConstants.ATTR_PASSWORD)if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword)}config.setClientHomeId(JSONUtils.getString(cfgObject,RegistryConstants.ATTR_HOME))config.setConfigProfileName(JSONUtils.getString(cfgObject,\"config-profile\"))config.setConnectionType(DataSourceProviderRegistry.getInstance().getConnectionType(JSONUtils.getString(cfgObject,RegistryConstants.ATTR_TYPE),DBPConnectionType.DEFAULT_TYPE))String colorValue = JSONUtils.getString(cfgObject,RegistryConstants.ATTR_COLOR)if (!CommonUtils.isEmpty(colorValue)) {config.setConnectionColor(colorValue)}int keepAlive = JSONUtils.getInteger(cfgObject,RegistryConstants.ATTR_KEEP_ALIVE)if (keepAlive > 0) {config.setKeepAliveInterval(keepAlive)}config.setProperties(JSONUtils.deserializeStringMap(cfgObject,RegistryConstants.TAG_PROPERTIES))config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject,RegistryConstants.TAG_PROVIDER_PROPERTIES))config.setAuthModelId(JSONUtils.getString(cfgObject,RegistryConstants.ATTR_AUTH_MODEL))config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject,\"auth-properties\"))for (Map.Entry<String,Map<String,Object>> eventObject : JSONUtils.getNestedObjects(cfgObject,RegistryConstants.TAG_EVENTS)){DBPConnectionEventType eventType = CommonUtils.valueOf(,eventObject.getKey(),DBPConnectionEventType.BEFORE_CONNECT)Map<String,Object> eventCfg = eventObject.getValue()DBRShellCommand command = new DBRShellCommand(\"\")command.setEnabled(JSONUtils.getBoolean(eventCfg,RegistryConstants.ATTR_ENABLED))command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg,RegistryConstants.ATTR_SHOW_PANEL))command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg,RegistryConstants.ATTR_WAIT_PROCESS))if (command.isWaitProcessFinish()) {command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg,RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT))}command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg,RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT))command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg,RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE))command.setWorkingDirectory(JSONUtils.getString(eventCfg,RegistryConstants.ATTR_WORKING_DIRECTORY))command.setCommand(JSONUtils.getString(eventCfg,RegistryConstants.ATTR_COMMAND))config.setEvent(eventType,command)}for (Map.Entry<String,Map<String,Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject,RegistryConstants.TAG_HANDLERS)){DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource,null,handlerObject)if (configuration != null) {dataSource.getConnectionConfiguration().updateHandler(configuration)}}Map<String,Object> bootstrapCfg = JSONUtils.getObject(cfgObject,RegistryConstants.TAG_BOOTSTRAP)DBPConnectionBootstrap bootstrap = config.getBootstrap()if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg,RegistryConstants.ATTR_AUTOCOMMIT))}if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg,RegistryConstants.ATTR_TXN_ISOLATION))}bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg,RegistryConstants.ATTR_DEFAULT_CATALOG))bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg,RegistryConstants.ATTR_DEFAULT_SCHEMA))String defObjectName = JSONUtils.getString(bootstrapCfg,RegistryConstants.ATTR_DEFAULT_OBJECT)if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg,defObjectName))}if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg,RegistryConstants.ATTR_IGNORE_ERRORS))}bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg,RegistryConstants.TAG_QUERY))}{deserializeModifyPermissions(conObject,dataSource)}for (Map<String,Object> filterCfg : JSONUtils.getObjectList(conObject,RegistryConstants.TAG_FILTERS)){String typeName = JSONUtils.getString(filterCfg,RegistryConstants.ATTR_TYPE)String objectID = JSONUtils.getString(filterCfg,RegistryConstants.ATTR_ID)if (!CommonUtils.isEmpty(typeName)) {DBSObjectFilter filter = readObjectFiler(filterCfg)dataSource.updateObjectFilter(typeName,objectID,filter)}}dataSource.getPreferenceStore().getProperties().putAll(JSONUtils.deserializeStringMap(conObject,RegistryConstants.TAG_CUSTOM_PROPERTIES))String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"),id)DBVModel dbvModel = modelMap.get(vmID)if (dbvModel != null) {dataSource.setVirtualModel(dbvModel)}if (newDataSource) {registry.addDataSourceToList(dataSource)parseResults.addedDataSources.add(dataSource)}{parseResults.updatedDataSources.add(dataSource)}}for (Map<String,Object> ctMap : JSONUtils.getObjectList(jsonMap,\"saved-filters\")){DBSObjectFilter filter = readObjectFiler(ctMap)registry.addSavedFilter(filter)}}@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "handlerDescriptor == null@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "curNetworkHandler.isSavePassword()@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Map<String,Object> handlerCfg = handlerObject.getValue()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "!CommonUtils.isEmpty(userPassword)@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String credJson = loadConfigFile(credFile,true)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "DataSourceRegistry.ParseResults parseResults@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "log.error(\"Error decrypting secure credentials\",e)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "curNetworkHandler.setPassword(creds.getUserPassword())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "secureProperties.putAll(res)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + \"-\" + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg,RegistryConstants.ATTR_ENABLED))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final SecureCredentials creds = readSecuredCredentials(dataSource,profile,\"network/\" + handlerId + (profile == null? \"\": \"/profile/\" + profile.getProfileName()))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "parseDataSources['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "mdFolder.exists()@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "curNetworkHandler.setProperties(properties)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "DBPDataSourceConfigurationStorage configurationStorage@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "parseDataSources['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "return curNetworkHandler@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Exception e@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "{String userName = JSONUtils.getString(handlerCfg,RegistryConstants.ATTR_USER)if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName)String userPassword = JSONUtils.getString(handlerCfg,RegistryConstants.ATTR_PASSWORD)if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword)}@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "!passwordReadCanceled@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor,dataSource)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Map<String,Object> properties = JSONUtils.deserializeProperties(handlerCfg,RegistryConstants.TAG_PROPERTIES)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Map<String,Map<String,Map<String,String>>> res = CONFIG_GSON.fromJson(credJson,new TypeToken<Map<String,Map<String,Map<String,String>>>>(){}.getType())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "@NotNull Map.Entry<String,Map<String,Object>> handlerObject@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "@Nullable DataSourceDescriptor dataSource@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "log.warn(\"Can't find network handler '\" + handlerId + \"'\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "return null@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31->37 [style = bold, label=""];
21->11 [style = dotted, label="true"];
21->18 [style = dotted, label="true"];
23->31 [style = solid, label="handlerCfg"];
42->36 [style = dotted, label="false"];
23->45 [style = solid, label="handlerCfg"];
12->17 [style = dashed, label="0"];
25->43 [style = bold, label=""];
13->5 [style = dotted, label="true"];
45->31 [style = bold, label=""];
40->38 [style = bold, label=""];
26->22 [style = solid, label="dataSource"];
23->39 [style = solid, label="handlerCfg"];
12->6 [style = solid, label="credFile"];
42->35 [style = dotted, label="false"];
15->17 [style = bold, label=""];
8->14 [style = solid, label="res"];
6->8 [style = solid, label="credJson"];
29->22 [style = solid, label="profile"];
11->4 [style = solid, label="configFile"];
0->2 [style = solid, label="configurationStorage"];
33->46 [style = bold, label=""];
42->37 [style = dotted, label="false"];
35->45 [style = bold, label=""];
17->16 [style = bold, label=""];
21->3 [style = bold, label=""];
26->35 [style = solid, label="dataSource"];
39->33 [style = solid, label="properties"];
22->25 [style = bold, label=""];
1->4 [style = bold, label=""];
21->20 [style = dotted, label="true"];
40->26 [style = dotted, label="true"];
16->6 [style = bold, label=""];
43->32 [style = bold, label=""];
46->36 [style = bold, label=""];
17->6 [style = solid, label="credFile"];
4->2 [style = bold, label=""];
43->32 [style = dotted, label="true"];
15->16 [style = dotted, label="true"];
27->35 [style = solid, label="handlerDescriptor"];
40->29 [style = dotted, label="true"];
15->17 [style = dotted, label="true"];
5->1 [style = bold, label=""];
33->36 [style = bold, label=""];
16->14 [style = dotted, label="true"];
13->5 [style = bold, label=""];
38->27 [style = solid, label="handlerId"];
15->12 [style = dotted, label="true"];
42->45 [style = dotted, label="false"];
10->0 [style = dotted, label="true"];
42->30 [style = dotted, label="true"];
15->12 [style = bold, label=""];
16->8 [style = dotted, label="true"];
42->44 [style = dotted, label="true"];
37->41 [style = bold, label=""];
16->42 [style = dashed, label="0"];
8->14 [style = bold, label=""];
42->28 [style = dotted, label="true"];
10->9 [style = dotted, label="true"];
37->25 [style = dotted, label="true"];
39->33 [style = bold, label=""];
1->4 [style = solid, label="decryptProject"];
34->28 [style = bold, label=""];
37->22 [style = bold, label=""];
37->43 [style = dotted, label="true"];
20->2 [style = solid, label="configurationStorage"];
16->1 [style = bold, label=""];
10->11 [style = dotted, label="true"];
39->46 [style = solid, label="properties"];
37->22 [style = dotted, label="true"];
43->41 [style = bold, label=""];
32->41 [style = bold, label=""];
33->46 [style = dotted, label="true"];
42->33 [style = dotted, label="false"];
42->34 [style = dotted, label="true"];
15->1 [style = bold, label=""];
42->34 [style = bold, label=""];
23->27 [style = bold, label=""];
40->24 [style = dotted, label="true"];
10->3 [style = bold, label=""];
38->23 [style = bold, label=""];
3->15 [style = bold, label=""];
12->16 [style = bold, label=""];
4->2 [style = solid, label="configJson"];
14->1 [style = bold, label=""];
27->42 [style = bold, label=""];
42->35 [style = bold, label=""];
27->42 [style = solid, label="handlerDescriptor"];
38->34 [style = solid, label="handlerId"];
21->19 [style = dotted, label="true"];
6->8 [style = bold, label=""];
42->31 [style = dotted, label="false"];
42->39 [style = dotted, label="false"];
41->39 [style = bold, label=""];
38->22 [style = solid, label="handlerId"];
35->36 [style = solid, label="curNetworkHandler"];
10->7 [style = dotted, label="true"];
23->41 [style = solid, label="handlerCfg"];
16->6 [style = dotted, label="true"];
}
