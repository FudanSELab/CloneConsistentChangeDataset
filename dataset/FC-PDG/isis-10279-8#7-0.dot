digraph {
0 [style = filled, label = "Assertions.assertThat(userMemento.getAvatarUrl()).isNull()@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "val userMemento2 = userMemento.withImpersonating(true)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assertions.assertThat(userMemento2.getRoles().size()).isEqualTo(2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "val userMemento2 = userMemento.withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\",\"CAVEMAN\",\"HUSBAND\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assertions.assertThat(userMemento2).isNotSameAs(userMemento)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "happy_case['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assertions.assertThat(userMemento.isImpersonating()).isFalse()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assertions.assertThat(userMemento2.getMultiTenancyToken()).isEqualTo(\"/USA/Bedrock\")@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "user_and_roles_preserved_and_avatarUrl_set['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assertions.assertThat(userMemento.isImpersonating()).isFalse()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\")@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(null)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "val userMemento = UserMemento.ofName(\"fredflintstone\").withRoleAdded(\"CAVEMAN\").withRoleAdded(\"HUSBAND\").withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\")).withRealName(\"Fred Flintstone\").withMultiTenancyToken(\"/USA/Bedrock\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "val userMemento = UserMemento.ofName(\"fredflintstone\").withRoleAdded(\"CAVEMAN\").withRoleAdded(\"HUSBAND\").withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\")).withRealName(\"Fred Flintstone\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assertions.assertThat(userMemento2.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assertions.assertThat(userMemento2.isImpersonating()).isTrue()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assertions.assertThat(userMemento.getMultiTenancyToken()).isEqualTo(\"/USA/Bedrock\")@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "Assertions.assertThat(userMemento2.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "happy_case['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
14->24 [style = bold, label=""];
6->3 [style = bold, label=""];
15->2 [style = bold, label=""];
35->29 [style = bold, label=""];
30->33 [style = bold, label=""];
21->0 [style = bold, label=""];
29->30 [style = bold, label=""];
5->26 [style = dashed, label="0"];
22->16 [style = bold, label=""];
0->17 [style = bold, label=""];
17->9 [style = bold, label=""];
28->11 [style = bold, label=""];
20->0 [style = dashed, label="0"];
8->14 [style = bold, label=""];
38->36 [style = bold, label=""];
31->38 [style = bold, label=""];
5->18 [style = bold, label=""];
32->34 [style = bold, label=""];
20->6 [style = bold, label=""];
5->10 [style = solid, label="userMemento"];
7->8 [style = bold, label=""];
34->10 [style = bold, label=""];
3->27 [style = bold, label=""];
13->12 [style = bold, label=""];
23->22 [style = bold, label=""];
1->21 [style = bold, label=""];
9->15 [style = bold, label=""];
25->26 [style = bold, label=""];
38->37 [style = solid, label="userMemento"];
18->13 [style = bold, label=""];
26->10 [style = solid, label="userMemento"];
33->32 [style = bold, label=""];
36->37 [style = bold, label=""];
37->35 [style = bold, label=""];
12->19 [style = bold, label=""];
10->1 [style = bold, label=""];
16->20 [style = bold, label=""];
11->23 [style = bold, label=""];
19->7 [style = bold, label=""];
4->5 [style = bold, label=""];
2->11 [style = bold, label=""];
2->28 [style = bold, label=""];
26->18 [style = bold, label=""];
}
