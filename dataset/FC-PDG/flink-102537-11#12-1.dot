digraph {
0 [style = filled, label = "input.map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"First: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink1Results.add(value)}})@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "headOperator.processElement(new StreamRecord<>(2))@@@80@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "sink2Results = new ArrayList<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DataStream<Integer> input = env.fromElements(1,2,3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "operator != null@@@49@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertThat(sink1Results,contains(\"First 1: 1\"))@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "input = input.map(new MapFunction<Integer,Integer>(){@Override public Integer map(Integer value){return value}})@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "operator.open()@@@51@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "testMultiChaining['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "operator.open()@@@76@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)@@@66@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "headOperator.processElement(new StreamRecord<>(3))@@@81@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "sink3Results = new ArrayList<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)@@@67@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "input.map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"Second: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink2Results.add(value)}})@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testMultiChainingWithSplit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "OperatorChain<Integer,StreamMap<Integer,Integer>> operatorChain = new OperatorChain<>(mockTask)@@@72@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getChainEntryPoint())@@@48@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertThat(sink2Results,contains(\"First 2: 1\"))@@@83@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "split.select(\"one\").map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"First 2: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink2Results.add(value)}})@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "input = input.map(new MapFunction<Integer,Integer>(){@Override public Integer map(Integer value){return value}})@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(sink2Results,contains(\"Second: 1\",\"Second: 2\",\"Second: 3\"))@@@58@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "operator != null@@@75@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@70@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testMultiChaining['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "StreamConfig streamConfig = new StreamConfig(configuration)@@@69@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@53@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "split.select(\"other\").map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"Second: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink3Results.add(value)}})@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "split.select(\"one\").map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"First 1: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink1Results.add(value)}})@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(sink3Results,contains(\"Second: 2\",\"Second: 3\"))@@@84@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@65@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "sink1Results = new ArrayList<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(sink1Results,contains(\"First: 1\",\"First: 2\",\"First: 3\"))@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@79@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "SplitStream<Integer> split = input.split(new OutputSelector<Integer>(){@Override public Iterable<String> select(Integer value){if (value.equals(1)) {return Collections.singletonList(\"one\")}{return Collections.singletonList(\"other\")}}})@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getChainEntryPoint())@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,chainedVertex.getName())@@@71@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Configuration configuration = chainedVertex.getConfiguration()@@@68@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->38 [style = bold, label=""];
1->6 [style = solid, label="mockTask"];
23->16 [style = bold, label=""];
15->13 [style = bold, label=""];
30->41 [style = bold, label=""];
20->24 [style = solid, label="streamConfig"];
15->29 [style = solid, label="sink2Results"];
28->10 [style = bold, label=""];
15->25 [style = solid, label="sink2Results"];
3->1 [style = bold, label=""];
32->35 [style = dotted, label="true"];
3->24 [style = bold, label=""];
26->10 [style = bold, label=""];
12->37 [style = dashed, label="0"];
37->29 [style = bold, label=""];
5->15 [style = bold, label=""];
5->37 [style = solid, label="sink1Results"];
10->26 [style = bold, label=""];
20->3 [style = bold, label=""];
10->21 [style = bold, label=""];
9->10 [style = bold, label=""];
27->16 [style = bold, label=""];
32->16 [style = bold, label=""];
23->19 [style = dotted, label="true"];
34->10 [style = bold, label=""];
27->19 [style = dotted, label="true"];
36->11 [style = bold, label=""];
26->11 [style = bold, label=""];
12->37 [style = bold, label=""];
10->36 [style = bold, label=""];
8->22 [style = bold, label=""];
39->30 [style = bold, label=""];
7->9 [style = bold, label=""];
10->36 [style = dotted, label="true"];
12->2 [style = bold, label=""];
17->12 [style = bold, label=""];
1->6 [style = bold, label=""];
7->34 [style = bold, label=""];
29->33 [style = bold, label=""];
15->2 [style = solid, label="sink2Results"];
18->4 [style = bold, label=""];
7->28 [style = bold, label=""];
4->20 [style = solid, label="configuration"];
21->11 [style = bold, label=""];
24->7 [style = solid, label="mockTask"];
3->34 [style = solid, label="streamConfig"];
20->28 [style = solid, label="streamConfig"];
2->29 [style = dashed, label="0"];
0->31 [style = dashed, label="0"];
4->20 [style = bold, label=""];
9->21 [style = bold, label=""];
0->8 [style = bold, label=""];
5->12 [style = solid, label="sink1Results"];
16->5 [style = bold, label=""];
20->7 [style = solid, label="streamConfig"];
38->33 [style = solid, label="sink3Results"];
11->17 [style = bold, label=""];
20->3 [style = solid, label="configuration"];
14->18 [style = bold, label=""];
24->28 [style = solid, label="mockTask"];
10->9 [style = bold, label=""];
6->7 [style = solid, label="mockTask"];
40->31 [style = bold, label=""];
31->39 [style = bold, label=""];
1->7 [style = solid, label="mockTask"];
10->26 [style = dotted, label="true"];
19->35 [style = dashed, label="0"];
22->14 [style = bold, label=""];
6->7 [style = bold, label=""];
24->7 [style = bold, label=""];
2->25 [style = bold, label=""];
38->40 [style = bold, label=""];
20->1 [style = solid, label="streamConfig"];
6->34 [style = solid, label="mockTask"];
5->2 [style = solid, label="sink1Results"];
9->10 [style = dotted, label="true"];
8->30 [style = dashed, label="0"];
41->14 [style = bold, label=""];
3->6 [style = solid, label="streamConfig"];
13->0 [style = bold, label=""];
36->10 [style = bold, label=""];
10->11 [style = bold, label=""];
}
