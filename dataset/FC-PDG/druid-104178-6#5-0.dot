digraph {
0 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorState(\"id2\")).andReturn(Optional.of(state2)).times(1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorIds()).andReturn(SUPERVISOR_IDS).atLeastOnce()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(SPEC1)).times(2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "SupervisorStateManager.State state2 = SupervisorStateManager.BasicState.SUSPENDED@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(200,response.getStatus())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(SPEC2)).times(2)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(specs.stream().allMatch(null))@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(new AuthenticationResult(\"druid\",\"druid\",null,null)).atLeastOnce()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(SPEC1)).times(1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "verifyAll()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Response response = supervisorResource.specGetAll(\"\",null,request)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED,true)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testSpecGetState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "testSpecGetAllFull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Response response = supervisorResource.specGetAll(null,true,request)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "SupervisorStateManager.State state1 = SupervisorStateManager.BasicState.RUNNING@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testSpecGetState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "List<SupervisorStatus> states = (List<SupervisorStatus>)response.getEntity()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(SPEC2)).times(1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorState(\"id1\")).andReturn(Optional.of(state1)).times(1)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<Map<String,Object>> states = (List<Map<String,Object>>)response.getEntity()@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Response response = supervisorResource.specGetAll(null,true,null,request)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "replayAll()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(states.stream().allMatch(null))@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "List<Map<String,Object>> specs = (List<Map<String,Object>>)response.getEntity()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->21 [style = dashed, label="0"];
8->10 [style = bold, label=""];
1->4 [style = bold, label=""];
7->17 [style = bold, label=""];
0->13 [style = bold, label=""];
19->12 [style = bold, label=""];
20->9 [style = bold, label=""];
11->1 [style = bold, label=""];
25->23 [style = bold, label=""];
18->11 [style = bold, label=""];
12->15 [style = bold, label=""];
28->9 [style = bold, label=""];
23->3 [style = bold, label=""];
10->7 [style = bold, label=""];
4->28 [style = bold, label=""];
3->0 [style = bold, label=""];
21->2 [style = bold, label=""];
6->2 [style = bold, label=""];
5->21 [style = bold, label=""];
26->12 [style = bold, label=""];
5->6 [style = bold, label=""];
10->25 [style = bold, label=""];
6->27 [style = dashed, label="0"];
22->12 [style = bold, label=""];
4->20 [style = bold, label=""];
17->3 [style = bold, label=""];
9->5 [style = bold, label=""];
7->25 [style = dashed, label="0"];
14->18 [style = bold, label=""];
27->24 [style = bold, label=""];
5->27 [style = bold, label=""];
17->23 [style = dashed, label="0"];
2->24 [style = dashed, label="0"];
16->28 [style = dashed, label="0"];
13->14 [style = bold, label=""];
15->8 [style = bold, label=""];
16->9 [style = bold, label=""];
4->16 [style = bold, label=""];
16->20 [style = dashed, label="0"];
}
