digraph {
18 [style = filled, label = "List<AggregatorFactory> aggregatorSpecs2 = Arrays.asList(QueryRunnerTestHelper.ROWS_COUNT,new DoubleSumAggregatorFactory(\"idx\",\"expr\"))@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "QueryRunner<ResultRow> mergeRunner = factory.getToolchest().mergeResults(runner)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(builder.build())),\"no-limit\")@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "builder.setLimit(Integer.MAX_VALUE).setVirtualColumns(expressionVirtualColumn).setAggregatorSpecs(aggregatorSpecs2)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"alias\",\"travel\",\"rows\",2L,\"idx\",243L),makeRow(query,\"2011-04-01\",\"alias\",\"technology\",\"rows\",2L,\"idx\",177L),makeRow(query,\"2011-04-01\",\"alias\",\"news\",\"rows\",2L,\"idx\",221L),makeRow(query,\"2011-04-01\",\"alias\",\"health\",\"rows\",2L,\"idx\",216L),makeRow(query,\"2011-04-01\",\"alias\",\"entertainment\",\"rows\",2L,\"idx\",319L),makeRow(query,\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),makeRow(query,\"2011-04-01\",\"alias\",\"automotive\",\"rows\",2L,\"idx\",269L),makeRow(query,\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L),makeRow(query,\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "GroupByQuery query = builder.build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "builder.setLimit(Integer.MAX_VALUE).setAggregatorSpecs(aggregatorSpecs)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "List<AggregatorFactory> aggregatorSpecs = Arrays.asList(QueryRunnerTestHelper.ROWS_COUNT,new DoubleSumAggregatorFactory(\"idx\",null,\"index / 2 + indexMin\",TestExprMacroTable.INSTANCE))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(\"rows\").addOrderByColumn(\"alias\",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query)),\"no-limit\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<AggregatorFactory> aggregatorSpecs = Arrays.asList(QueryRunnerTestHelper.rowsCount,new DoubleSumAggregatorFactory(\"idx\",null,\"index / 2 + indexMin\",TestExprMacroTable.INSTANCE))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query)),\"no-limit\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@39@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testGroupByOrderLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "List<ResultRow> expectedResults = makeRows(query,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ae11,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ae18,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ae1f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ae26,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ae2d,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ae34,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ae3b,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ae42,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ae49,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ae50)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testGroupByWithOrderLimit3['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ExpressionVirtualColumn expressionVirtualColumn = new ExpressionVirtualColumn(\"expr\",\"index / 2 + indexMin\",ValueType.FLOAT,TestExprMacroTable.INSTANCE)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testGroupByOrderLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<AggregatorFactory> aggregatorSpecs2 = Arrays.asList(QueryRunnerTestHelper.rowsCount,new DoubleSumAggregatorFactory(\"idx\",\"expr\"))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "final GroupByQuery query = builder.build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "cannotVectorize()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new DoubleSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(\"idx\",OrderByColumnSpec.Direction.DESCENDING).addOrderByColumn(\"alias\",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "expectedResults = makeRows(builder.build(),new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ad10,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ad17,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ad1e,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ad25,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ad2c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ad33,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ad3a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ad41,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ad48,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ad4f)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(builder.build())),\"no-limit\")@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(\"rows\").addOrderByColumn(\"alias\",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "QueryRunner<ResultRow> mergeRunner = factory.getToolchest().mergeResults(runner)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->12 [style = solid, label="expectedResults"];
8->10 [style = bold, label=""];
16->13 [style = bold, label=""];
2->19 [style = dashed, label="0"];
20->13 [style = bold, label=""];
1->8 [style = bold, label=""];
7->18 [style = dashed, label="0"];
15->7 [style = bold, label=""];
10->4 [style = solid, label="expectedResults"];
24->27 [style = solid, label="expectedResults"];
2->6 [style = bold, label=""];
3->14 [style = bold, label=""];
11->4 [style = bold, label=""];
19->6 [style = solid, label="aggregatorSpecs"];
18->9 [style = solid, label="aggregatorSpecs2"];
21->8 [style = bold, label=""];
8->10 [style = solid, label="query"];
2->6 [style = solid, label="aggregatorSpecs"];
28->26 [style = bold, label=""];
6->0 [style = bold, label=""];
0->5 [style = solid, label="expectedResults"];
1->21 [style = dashed, label="0"];
19->6 [style = bold, label=""];
5->17 [style = bold, label=""];
15->18 [style = bold, label=""];
0->3 [style = solid, label="expectedResults"];
13->26 [style = dashed, label="0"];
13->1 [style = bold, label=""];
26->22 [style = bold, label=""];
8->4 [style = solid, label="query"];
7->9 [style = bold, label=""];
25->27 [style = bold, label=""];
0->17 [style = solid, label="expectedResults"];
12->2 [style = bold, label=""];
24->25 [style = bold, label=""];
0->14 [style = solid, label="expectedResults"];
17->15 [style = bold, label=""];
18->9 [style = bold, label=""];
22->24 [style = solid, label="query"];
4->12 [style = bold, label=""];
9->3 [style = bold, label=""];
22->27 [style = solid, label="query"];
27->23 [style = bold, label=""];
7->9 [style = solid, label="aggregatorSpecs2"];
24->23 [style = solid, label="expectedResults"];
22->24 [style = bold, label=""];
12->19 [style = bold, label=""];
13->21 [style = bold, label=""];
0->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
