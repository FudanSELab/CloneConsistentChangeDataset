digraph {
14 [style = filled, label = "List<Class<?>> curr@@@11@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "i < 2@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "allSignatures['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ImmutableSet.Builder<ImmutableList<Class<?>>> allOverloads = ImmutableSet.builder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "typesLists.add(possibleParamTypes)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "allOverloads.add(ImmutableList.builder().add(predicateType).add().addAll(curr).build())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<List<Class<?>>> typesLists = new ArrayList<List<Class<?>>>()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "allOverloads.add(ImmutableList.of(predicateType))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<List<Class<?>>> typesLists = new ArrayList<>()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "allOverloads.add(ImmutableList.of(predicateType,))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "allSignatures['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "allSignatures['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Class<?> predicateType@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<Class<?>> curr@@@11@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i++@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int i = 0@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Lists.cartesianProduct(typesLists)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "return allOverloads.build().asList()@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Lists.cartesianProduct(typesLists)@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->3 [style = dotted, label="true"];
4->9 [style = bold, label=""];
5->9 [style = solid, label="predicateType"];
7->11 [style = bold, label=""];
2->0 [style = dotted, label="true"];
2->8 [style = dotted, label="true"];
11->1 [style = bold, label=""];
11->15 [style = dashed, label="0"];
2->3 [style = bold, label=""];
2->17 [style = dotted, label="true"];
13->5 [style = dotted, label="true"];
1->8 [style = solid, label="i"];
9->7 [style = bold, label=""];
2->12 [style = bold, label=""];
3->10 [style = bold, label=""];
5->7 [style = solid, label="predicateType"];
18->4 [style = bold, label=""];
10->8 [style = bold, label=""];
8->2 [style = bold, label=""];
2->6 [style = dotted, label="true"];
1->2 [style = solid, label="i"];
16->5 [style = dotted, label="true"];
7->15 [style = bold, label=""];
2->14 [style = dotted, label="true"];
1->2 [style = bold, label=""];
18->5 [style = dotted, label="true"];
16->4 [style = bold, label=""];
13->4 [style = bold, label=""];
8->2 [style = solid, label="i"];
2->10 [style = dotted, label="true"];
15->1 [style = bold, label=""];
}
