digraph {
17 [style = filled, label = "verifyEquality(JoinWindows.of(3),JoinWindows.of(3))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "equalsAndHashcodeShouldBeValidForPositiveCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(JoinWindows.of(3).grace(2),JoinWindows.of(3).grace(2))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertEquals(JoinWindows.of(3).until(60).hashCode(),JoinWindows.of(3).until(60).hashCode())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(SessionWindows.with(1).grace(6).until(7),SessionWindows.with(1).grace(6).until(7))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(SessionWindows.with(1).until(7).hashCode(),SessionWindows.with(1).until(7).hashCode())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(JoinWindows.of(3).before(2).hashCode(),JoinWindows.of(3).before(2).hashCode())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "verifyEquality(JoinWindows.of(3).until(60),JoinWindows.of(3).until(60))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(JoinWindows.of(9).before(1).after(2).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "equalsAndHashcodeShouldBeValidForPositiveCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "verifyEquality(JoinWindows.of(3).grace(2),JoinWindows.of(3).grace(2))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "verifyEquality(JoinWindows.of(3).after(2),JoinWindows.of(3).after(2))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(JoinWindows.of(3).hashCode(),JoinWindows.of(3).hashCode())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "verifyEquality(JoinWindows.of(3).before(2),JoinWindows.of(3).before(2))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "verifyEquality(JoinWindows.of(3).before(1).after(2).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertEquals(SessionWindows.with(1),SessionWindows.with(1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(JoinWindows.of(9).before(1).after(2).grace(3).until(60).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertEquals(JoinWindows.of(3),JoinWindows.of(3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(JoinWindows.of(3).after(2),JoinWindows.of(3).after(2))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "verifyEquality(JoinWindows.of(9).before(1).after(2).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(SessionWindows.with(1).grace(6).until(7).hashCode(),SessionWindows.with(1).grace(6).until(7).hashCode())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(SessionWindows.with(1).grace(6),SessionWindows.with(1).grace(6))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(JoinWindows.of(3).before(1).after(2).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertEquals(JoinWindows.of(3).after(2).hashCode(),JoinWindows.of(3).after(2).hashCode())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "assertEquals(SessionWindows.with(1).until(7),SessionWindows.with(1).until(7))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(JoinWindows.of(3).before(2),JoinWindows.of(3).before(2))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertEquals(SessionWindows.with(1).grace(6).hashCode(),SessionWindows.with(1).grace(6).hashCode())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(SessionWindows.with(1).hashCode(),SessionWindows.with(1).hashCode())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(JoinWindows.of(3).grace(2).hashCode(),JoinWindows.of(3).grace(2).hashCode())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "equalsAndHashcodeShouldBeValidForPositiveCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(JoinWindows.of(3).until(60),JoinWindows.of(3).until(60))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14->3 [style = bold, label=""];
7->1 [style = bold, label=""];
23->30 [style = bold, label=""];
5->9 [style = bold, label=""];
22->19 [style = bold, label=""];
25->23 [style = bold, label=""];
10->19 [style = dashed, label="0"];
21->15 [style = bold, label=""];
19->20 [style = bold, label=""];
9->4 [style = bold, label=""];
3->27 [style = dashed, label="0"];
0->23 [style = dashed, label="0"];
12->11 [style = bold, label=""];
13->17 [style = dashed, label="0"];
29->25 [style = bold, label=""];
3->6 [style = bold, label=""];
24->29 [style = bold, label=""];
16->17 [style = bold, label=""];
2->10 [style = bold, label=""];
0->20 [style = dashed, label="0"];
15->18 [style = bold, label=""];
13->26 [style = dashed, label="0"];
6->18 [style = dashed, label="0"];
6->2 [style = bold, label=""];
31->26 [style = bold, label=""];
18->22 [style = bold, label=""];
10->0 [style = bold, label=""];
4->12 [style = bold, label=""];
3->15 [style = dashed, label="0"];
14->21 [style = dashed, label="0"];
27->24 [style = bold, label=""];
26->28 [style = bold, label=""];
28->27 [style = bold, label=""];
2->22 [style = dashed, label="0"];
13->14 [style = bold, label=""];
17->21 [style = bold, label=""];
11->7 [style = bold, label=""];
8->13 [style = bold, label=""];
0->5 [style = bold, label=""];
}
