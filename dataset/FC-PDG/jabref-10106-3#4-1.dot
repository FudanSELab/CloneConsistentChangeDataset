digraph {
6 [style = filled, label = "fetcherResultsPersistedCorrectly['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertEquals(expected,getTestStudyRepository().getQueryResultEntries(\"Quantum\").getEntries())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "studyRepository.persist(mockResults)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(getSpringerCloudComputingMockResults(),getTestStudyRepository().getQueryResultEntries(\"Cloud Computing\").getEntries())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<BibEntry> expected = new ArrayList<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "expected.add(getSpringerQuantumMockResults().get(1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expected.add(getSpringerQuantumMockResults().get(2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<QueryResult> mockResults = getMockResults()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expected.addAll(getArXivQuantumMockResults())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "getTestStudyRepository().persist(mockResults)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "fetcherResultsPersistedCorrectly['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(getArXivQuantumMockResults(),getTestStudyRepository().getFetcherResultEntries(\"Quantum\",\"ArXiv\").getEntries())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "mergedResultsPersistedCorrectly['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(getSpringerQuantumMockResults(),getTestStudyRepository().getFetcherResultEntries(\"Quantum\",\"Springer\").getEntries())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(getSpringerCloudComputingMockResults(),getTestStudyRepository().getFetcherResultEntries(\"Cloud Computing\",\"Springer\").getEntries())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
7->1 [style = bold, label=""];
10->14 [style = bold, label=""];
11->4 [style = bold, label=""];
9->8 [style = solid, label="expected"];
9->10 [style = bold, label=""];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
4->7 [style = bold, label=""];
4->0 [style = bold, label=""];
6->4 [style = bold, label=""];
4->0 [style = solid, label="mockResults"];
2->13 [style = dashed, label="0"];
0->1 [style = bold, label=""];
14->12 [style = bold, label=""];
0->8 [style = bold, label=""];
1->8 [style = dashed, label="0"];
1->2 [style = bold, label=""];
4->7 [style = solid, label="mockResults"];
0->7 [style = dashed, label="0"];
8->13 [style = bold, label=""];
2->5 [style = bold, label=""];
}
