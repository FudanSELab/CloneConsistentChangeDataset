digraph {
9 [style = filled, label = "List<Row> results = CollectionUtil.iteratorToList(tableEnv.sqlQuery(\"select regexp_replace('foobar','oo|ar','')\").execute().collect())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "List<Row> results = Lists.newArrayList(tableEnv.sqlQuery(\"select regexp_replace('foobar','oo|ar','')\").execute().collect())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"(fb(\",results.toString())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<Row> results = Lists.newArrayList(tableEnv.sqlQuery(\"select mod(-1,2),pmod(-1,2)\").execute().collect())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "results = Lists.newArrayList(tableEnv.sqlQuery(\"select length('')\").execute().collect())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"(0(\",results.toString())@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testEmptyStringLiteralParameters['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testFunctionsNeedSessionState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "tableEnv.loadModule(\"hive\",new HiveModule())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "tableEnv.unloadModule(\"core\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testEmptyStringLiteralParameters['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "TableEnvironment tableEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "results = CollectionUtil.iteratorToList(tableEnv.sqlQuery(\"select length('')\").execute().collect())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(\"(-1,1(\",results.toString())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "tableEnv.loadModule(\"core\",CoreModule.INSTANCE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "tableEnv.sqlQuery(\"select current_timestamp,current_date\").execute().collect()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3->1 [style = bold, label=""];
1->14 [style = dashed, label="0"];
4->6 [style = bold, label=""];
6->0 [style = bold, label=""];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
3->13 [style = dashed, label="0"];
2->4 [style = bold, label=""];
7->3 [style = bold, label=""];
6->15 [style = bold, label=""];
0->7 [style = bold, label=""];
8->1 [style = bold, label=""];
5->2 [style = bold, label=""];
12->2 [style = bold, label=""];
15->11 [style = bold, label=""];
11->13 [style = bold, label=""];
3->8 [style = dashed, label="0"];
10->2 [style = bold, label=""];
0->9 [style = dashed, label="0"];
6->9 [style = bold, label=""];
13->14 [style = bold, label=""];
}
