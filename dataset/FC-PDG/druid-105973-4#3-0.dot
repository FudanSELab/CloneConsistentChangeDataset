digraph {
5 [style = filled, label = "List<Filter> expected = Collections.singletonList(filter)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Filter filter = FilterTestUtils.or(FilterTestUtils.selector(\"col1\",\"val1\"),FilterTestUtils.selector(\"col2\",\"val2\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testPushDownNotLeafNot['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testToNormalizedOrClausesNonAndFilterShouldReturnSingleton['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Set<Filter> expected = Collections.singleton(filter)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "final Filter filter = FilterTestUtils.and(FilterTestUtils.selector(\"col1\",\"1\"),FilterTestUtils.selector(\"col2\",\"2\"),FilterTestUtils.not(FilterTestUtils.selector(\"col3\",\"3\")))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Set<Filter> normalizedOrClauses = Filters.toNormalizedOrClauses(filter)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(expected,normalizedOrClauses)@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertFilter(filter,filter,pushedDown)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testToNormalizedOrClausesNonAndFilterShouldReturnSingleton['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final Filter pushedDown = HiveCnfHelper.pushDownNot(filter)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<Filter> normalizedOrClauses = Filters.toNormalizedOrClauses(filter)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3->0 [style = solid, label="filter"];
10->8 [style = solid, label="filter"];
3->6 [style = solid, label="filter"];
0->5 [style = dashed, label="0"];
2->3 [style = bold, label=""];
6->1 [style = solid, label="normalizedOrClauses"];
4->1 [style = solid, label="normalizedOrClauses"];
9->10 [style = bold, label=""];
4->6 [style = dashed, label="0"];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
3->5 [style = solid, label="filter"];
5->1 [style = solid, label="expected"];
6->1 [style = bold, label=""];
3->5 [style = bold, label=""];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
0->4 [style = bold, label=""];
0->1 [style = solid, label="expected"];
4->1 [style = bold, label=""];
10->11 [style = solid, label="filter"];
3->10 [style = dashed, label="0"];
8->11 [style = bold, label=""];
8->11 [style = solid, label="pushedDown"];
3->4 [style = solid, label="filter"];
}
