digraph {
3 [style = filled, label = "IndexableField storedField = fields(2(@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testStore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertEquals(DocValuesType.SORTED_SET,dvField.fieldType().docValuesType())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"ip\").field(\"store\",true).endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(1,pointField.fieldType().pointIndexDimensionCount())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(mapping,mapper.mappingSource().toString())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testStore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"::1\").endObject()),XContentType.JSON))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testStore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(3,fields.length)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertEquals(3,fields.length)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"date\").field(\"store\",true).endObject().endObject().endObject().endObject())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEquals(new BytesRef(InetAddressPoint.encode(InetAddress.getByName(\"::1\"))),storedField.binaryValue())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"2016-03-11\").endObject()),XContentType.JSON))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "IndexableField dvField = fields(1(@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertTrue(storedField.fieldType().stored())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ParsedDocument doc = mapper.parse(source(null))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(1457654400000L,storedField.numericValue().longValue())@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(storedField.fieldType().stored())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "IndexableField pointField = fields(0(@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
4->3 [style = bold, label=""];
15->8 [style = solid, label="fields"];
23->10 [style = solid, label="mapping"];
2->20 [style = bold, label=""];
1->3 [style = solid, label="fields"];
11->20 [style = dashed, label="0"];
0->23 [style = dashed, label="0"];
4->22 [style = dashed, label="0"];
16->17 [style = bold, label=""];
9->8 [style = bold, label=""];
12->0 [style = bold, label=""];
1->7 [style = bold, label=""];
15->18 [style = bold, label=""];
0->10 [style = solid, label="mapping"];
8->22 [style = bold, label=""];
23->5 [style = solid, label="mapping"];
5->19 [style = bold, label=""];
6->1 [style = bold, label=""];
22->3 [style = bold, label=""];
19->1 [style = bold, label=""];
0->10 [style = bold, label=""];
0->5 [style = solid, label="mapping"];
10->5 [style = bold, label=""];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
18->1 [style = bold, label=""];
17->14 [style = bold, label=""];
6->19 [style = dashed, label="0"];
1->13 [style = solid, label="fields"];
23->10 [style = bold, label=""];
14->15 [style = bold, label=""];
15->1 [style = solid, label="fields"];
1->8 [style = solid, label="fields"];
15->13 [style = solid, label="fields"];
13->9 [style = bold, label=""];
8->4 [style = bold, label=""];
2->11 [style = bold, label=""];
21->23 [style = bold, label=""];
}
