digraph {
2 [style = filled, label = "assertThat(acceptor.isGatewayReceiver()).isFalse()@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(cache.getMeterRegistry()).thenReturn(new SimpleMeterRegistry())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Acceptor acceptor = new AcceptorImpl(0,null,false,DEFAULT_SOCKET_BUFFER_SIZE,DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS,cache,MINIMUM_MAX_CONNECTIONS,0,CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT,CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE,null,null,DEFAULT_TCP_NO_DELAY,serverConnectionFactory,1000,securityService,null,null,null,false,emptyList(),disabledClock())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "when(system.getStatisticsManager()).thenReturn(statisticsManager)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Acceptor acceptor = new AcceptorImpl(0,null,false,DEFAULT_SOCKET_BUFFER_SIZE,DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS,cache,MINIMUM_MAX_CONNECTIONS,0,CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT,CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE,null,null,DEFAULT_TCP_NO_DELAY,serverConnectionFactory,1000,securityService,null,null,null,true,emptyList(),disabledClock())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "when(statisticsManager.createType(any(),any(),any())).thenReturn(mock())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(statisticsManager.createAtomicStatistics(any(),any())).thenReturn(mock())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(acceptor.isGatewayReceiver()).isTrue()@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "constructorWithGatewayReceiverCreatesAcceptorImplForGatewayReceiver['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Acceptor acceptor = new AcceptorImpl(0,null,false,DEFAULT_SOCKET_BUFFER_SIZE,DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS,cache,MINIMUM_MAX_CONNECTIONS,0,CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT,CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE,null,null,DEFAULT_TCP_NO_DELAY,serverConnectionFactory,1000,securityService,null,null,null,false,emptyList(),disabledClock())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->3 [style = bold, label=""];
11->5 [style = bold, label=""];
0->3 [style = dashed, label="0"];
1->0 [style = bold, label=""];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
8->11 [style = bold, label=""];
6->10 [style = bold, label=""];
0->2 [style = bold, label=""];
}
