digraph {
17 [style = filled, label = "assertThat(contents,containsString(\"dog Cat dog\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testContainsRegex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(contents,not(containsString(\"this is the moon\")))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(contents,not(containsString(\"This is a line with digits\")))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(contents,containsString(\"hello world\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testReplaceRegex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "buildRule.executeTarget(\"hasregex\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(contents,containsString(\"World here\"))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(\"Regex not present\",getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\"),containsString(\"bye world\"))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testContainsRegex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(contents,containsString(\"world world world world\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(contents,containsString(\"Found digits (1234(\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "buildRule.executeTarget(\"replaceregex\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(contents,containsString(\"moon Sun Sun\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(contents,containsString(\"found WhiteSpace\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assumeTrue(\"Regex not present\",getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "buildRule.executeTarget(\"containsregex\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->14 [style = solid, label="contents"];
3->17 [style = dashed, label="0"];
1->9 [style = bold, label=""];
14->18 [style = bold, label=""];
4->9 [style = dashed, label="0"];
11->18 [style = solid, label="contents"];
5->1 [style = bold, label=""];
6->0 [style = solid, label="contents"];
6->0 [style = bold, label=""];
9->2 [style = bold, label=""];
17->14 [style = bold, label=""];
0->3 [style = bold, label=""];
11->16 [style = bold, label=""];
2->15 [style = dashed, label="0"];
3->7 [style = bold, label=""];
4->2 [style = bold, label=""];
11->16 [style = solid, label="contents"];
10->12 [style = bold, label=""];
8->1 [style = bold, label=""];
0->16 [style = dashed, label="0"];
11->17 [style = solid, label="contents"];
15->11 [style = bold, label=""];
18->10 [style = bold, label=""];
11->12 [style = solid, label="contents"];
1->4 [style = bold, label=""];
2->6 [style = bold, label=""];
13->1 [style = bold, label=""];
16->17 [style = bold, label=""];
7->14 [style = dashed, label="0"];
6->11 [style = dashed, label="0"];
6->7 [style = solid, label="contents"];
6->3 [style = solid, label="contents"];
4->15 [style = bold, label=""];
11->10 [style = solid, label="contents"];
}
