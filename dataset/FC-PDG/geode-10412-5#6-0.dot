digraph {
1 [style = filled, label = "assertThat(gatewaySenderOverflowMonitor.computeDelta(statsMap,StatsKey.GATEWAYSENDER_BYTES_OVERFLOWED_TO_DISK,2100)).isEqualTo(52L)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "statsMap.put(StatsKey.GATEWAYSENDER_LRU_EVICTIONS,50)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(memberLevelDiskMonitor.computeDelta(statsMap,StatsKey.DISK_WRITEN_BYTES,8193)).isEqualTo(1L)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "statsMap.put(StatsKey.DISK_RECOVERED_BYTES,512)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "statsMap.put(StatsKey.BACKUPS_COMPLETED,5)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "statsMap.put(StatsKey.FLUSHED_BYTES,2048)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(memberLevelDiskMonitor.computeDelta(statsMap,StatsKey.NUM_FLUSHES,16)).isEqualTo(6L)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Map<String,Number> statsMap = new HashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "statsMap.put(StatsKey.GATEWAYSENDER_ENTRIES_OVERFLOWED_TO_DISK,100)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "computeDeltaShouldOperateForHandledStatistics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(memberLevelDiskMonitor.computeDelta(statsMap,StatsKey.BACKUPS_IN_PROGRESS,1)).isEqualTo(-1)@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "statsMap.put(StatsKey.DISK_READ_BYTES,1024)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(memberLevelDiskMonitor.computeDelta(statsMap,StatsKey.TOTAL_FLUSH_TIME,10000)).isEqualTo(0L)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "statsMap.put(StatsKey.GATEWAYSENDER_BYTES_IN_MEMORY,1024)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertThat(memberLevelDiskMonitor.computeDelta(statsMap,StatsKey.DISK_RECOVERED_BYTES,1024)).isEqualTo(512L)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(memberLevelDiskMonitor.computeDelta(statsMap,StatsKey.DISK_QUEUE_SIZE,150)).isEqualTo(2)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "statsMap.put(StatsKey.GATEWAYSENDER_BYTES_OVERFLOWED_TO_DISK,2048)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(gatewaySenderOverflowMonitor.computeDelta(statsMap,StatsKey.GATEWAYSENDER_LRU_EVICTIONS,60)).isEqualTo(10L)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "statsMap.put(StatsKey.BACKUPS_IN_PROGRESS,2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "computeDeltaShouldOperateForHandledStatistics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "statsMap.put(StatsKey.DISK_QUEUE_SIZE,148)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "statsMap.put(StatsKey.NUM_FLUSHES,10)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "statsMap.put(StatsKey.TOTAL_FLUSH_TIME,10000)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "statsMap.put(StatsKey.DISK_WRITEN_BYTES,8192)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(gatewaySenderOverflowMonitor.computeDelta(statsMap,StatsKey.GATEWAYSENDER_BYTES_IN_MEMORY,2048)).isEqualTo(1024L)@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(memberLevelDiskMonitor.computeDelta(statsMap,StatsKey.BACKUPS_COMPLETED,6)).isEqualTo(1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(gatewaySenderOverflowMonitor.computeDelta(statsMap,StatsKey.GATEWAYSENDER_ENTRIES_OVERFLOWED_TO_DISK,150)).isEqualTo(50L)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "computeDeltaShouldOperateForHandledStatistics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertThat(memberLevelDiskMonitor.computeDelta(statsMap,StatsKey.DISK_READ_BYTES,2048)).isEqualTo(1024L)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(memberLevelDiskMonitor.computeDelta(statsMap,StatsKey.FLUSHED_BYTES,3000)).isEqualTo(952L)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12->26 [style = bold, label=""];
29->21 [style = bold, label=""];
3->20 [style = dashed, label="0"];
24->23 [style = bold, label=""];
15->18 [style = bold, label=""];
18->24 [style = bold, label=""];
2->5 [style = bold, label=""];
20->22 [style = bold, label=""];
22->16 [style = bold, label=""];
16->15 [style = bold, label=""];
17->20 [style = bold, label=""];
1->6 [style = bold, label=""];
26->27 [style = bold, label=""];
0->1 [style = bold, label=""];
11->14 [style = bold, label=""];
21->12 [style = bold, label=""];
2->17 [style = bold, label=""];
6->9 [style = bold, label=""];
14->29 [style = bold, label=""];
13->11 [style = bold, label=""];
8->2 [style = bold, label=""];
4->22 [style = dashed, label="0"];
25->13 [style = bold, label=""];
4->10 [style = bold, label=""];
23->28 [style = bold, label=""];
5->3 [style = bold, label=""];
19->2 [style = bold, label=""];
5->17 [style = dashed, label="0"];
28->25 [style = bold, label=""];
3->4 [style = bold, label=""];
10->0 [style = bold, label=""];
4->0 [style = bold, label=""];
7->2 [style = bold, label=""];
}
