digraph {
11 [style = filled, label = "assertTrue((child instanceof AltTraitConverter) || (child instanceof PhysToIteratorConverter))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "NoneSingleRel noneRel = RelOptUtil.addTrait(new NoneSingleRel(cluster,noneLeafRel),ALT_TRAIT2)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "planner.addRule(new PhysLeafRule())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "child = child.getInputs().get(0)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "planner.addRelTraitDef(ConventionTraitDef.INSTANCE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(ALT_TRAIT2,result.getTraitSet().getTrait(ALT_TRAIT_DEF))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "planner.addRule(new IterSinglePhysMergeRule())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "VolcanoPlanner planner = new VolcanoPlanner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "planner.addRelTraitDef(ALT_TRAIT_DEF)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testDoubleConversion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "NoneSingleRel noneRel = RelOptUtil.addTrait(new NoneSingleRel(cluster,noneLeafRel),ALT_EMPTY_TRAIT)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(result instanceof IterSingleRel)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "RelNode convertedRel = planner.changeTraits(noneRel,cluster.traitSetOf(EnumerableConvention.INSTANCE).replace(ALT_EMPTY_TRAIT))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(result instanceof IterMergedRel)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "RelNode child = result.getInputs().get(0)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "planner.addRule(new PhysToIteratorConverterRule())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "RelNode result = planner.chooseDelegate().findBestExp()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "RelNode convertedRel = planner.changeTraits(noneRel,cluster.traitSetOf(EnumerableConvention.INSTANCE).replace(ALT_TRAIT2))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "RelOptCluster cluster = newCluster(planner)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testDoubleConversion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(child instanceof PhysLeafRel)@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testRuleMatchAfterConversion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "NoneLeafRel noneLeafRel = RelOptUtil.addTrait(new NoneLeafRel(cluster,\"noneLeafRel\"),ALT_TRAIT)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "child = child.getInputs().get(0)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "planner.addRule(new AltTraitConverterRule(ALT_TRAIT,ALT_TRAIT2,\"AltToAlt2ConverterRule\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(EnumerableConvention.INSTANCE,result.getTraitSet().getTrait(ConventionTraitDef.INSTANCE))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "planner.setRoot(convertedRel)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue((child instanceof AltTraitConverter) || (child instanceof PhysToIteratorConverter))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "planner.addRule(new IterSingleRule())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
3->22 [style = solid, label="noneRel"];
23->20 [style = bold, label=""];
3->26 [style = dashed, label="0"];
10->4 [style = solid, label="result"];
20->9 [style = bold, label=""];
7->10 [style = bold, label=""];
4->6 [style = bold, label=""];
11->14 [style = bold, label=""];
10->27 [style = bold, label=""];
5->3 [style = solid, label="noneLeafRel"];
2->11 [style = solid, label="child"];
1->15 [style = bold, label=""];
21->15 [style = bold, label=""];
14->8 [style = solid, label="child"];
28->7 [style = solid, label="convertedRel"];
28->7 [style = bold, label=""];
5->26 [style = bold, label=""];
4->27 [style = dashed, label="0"];
6->19 [style = bold, label=""];
19->17 [style = bold, label=""];
12->24 [style = bold, label=""];
18->2 [style = bold, label=""];
3->22 [style = bold, label=""];
22->7 [style = bold, label=""];
9->16 [style = bold, label=""];
26->28 [style = solid, label="noneRel"];
12->13 [style = bold, label=""];
25->20 [style = bold, label=""];
13->3 [style = solid, label="cluster"];
22->28 [style = dashed, label="0"];
16->21 [style = bold, label=""];
10->27 [style = solid, label="result"];
21->1 [style = bold, label=""];
20->13 [style = solid, label="planner"];
13->26 [style = solid, label="cluster"];
17->18 [style = solid, label="child"];
10->4 [style = bold, label=""];
13->5 [style = bold, label=""];
13->5 [style = solid, label="cluster"];
0->20 [style = bold, label=""];
15->12 [style = bold, label=""];
14->8 [style = bold, label=""];
26->28 [style = bold, label=""];
5->26 [style = solid, label="noneLeafRel"];
2->11 [style = bold, label=""];
17->18 [style = bold, label=""];
22->7 [style = solid, label="convertedRel"];
24->13 [style = bold, label=""];
}
