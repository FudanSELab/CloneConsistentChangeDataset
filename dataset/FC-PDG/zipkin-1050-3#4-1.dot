digraph {
4 [style = filled, label = "ClientRequestContext ctx = spy(ClientRequestContext.of(req))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Client<HttpRequest,HttpResponse> decorated = factory.options.decoration().decorate(,,delegate)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "verify(ctx).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION),any())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "HttpRequest req = HttpRequest.of(HttpMethod.GET,\"/\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "verify(ctx,never()).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION),any())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Client<HttpRequest,HttpResponse> delegate = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Client<HttpRequest,HttpResponse> decorated = factory.options.decoration().decorate(,,delegate)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TestPropertyValues.of(\"zipkin.storage.type:elasticsearch\",\"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\").applyTo(context)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Access.registerElasticsearchHttp(context)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "context.refresh()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "HttpClientFactory factory = context.getBean()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TestPropertyValues.of(\"zipkin.storage.type:elasticsearch\",\"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\"zipkin.storage.elasticsearch.username:somename\",\"zipkin.storage.elasticsearch.password:pass\").applyTo(context)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "decorated.execute(ctx,req)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Access.registerElasticsearch(context)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "when(delegate.execute(any(),any())).thenReturn(HttpResponse.of(HttpStatus.OK))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
5->4 [style = solid, label="req"];
10->14 [style = bold, label=""];
7->10 [style = bold, label=""];
5->10 [style = solid, label="req"];
8->6 [style = bold, label=""];
6->16 [style = solid, label="delegate"];
11->9 [style = bold, label=""];
12->9 [style = bold, label=""];
4->7 [style = bold, label=""];
1->13 [style = dashed, label="0"];
0->14 [style = dashed, label="0"];
3->5 [style = bold, label=""];
6->16 [style = bold, label=""];
10->0 [style = bold, label=""];
5->4 [style = bold, label=""];
17->15 [style = bold, label=""];
16->5 [style = bold, label=""];
9->13 [style = bold, label=""];
1->2 [style = bold, label=""];
9->1 [style = bold, label=""];
6->3 [style = solid, label="delegate"];
4->10 [style = solid, label="ctx"];
3->16 [style = dashed, label="0"];
2->8 [style = bold, label=""];
9->15 [style = dashed, label="0"];
13->2 [style = bold, label=""];
15->1 [style = bold, label=""];
}
