digraph {
0 [style = filled, label = "assertEquals(expected,builder.build().getExtension(UnittestProto.optionalNestedMessageExtension).getBb())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "TestAllExtensions.Builder builder = TestAllExtensions.newBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(builder.build().getExtension(UnittestProto.optionalNestedMessageExtension).getBb()).isEqualTo(expected)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testGetFieldBuilderWithExistingMessage['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testGetFieldBuilderWithExistingMessage['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Message.Builder fieldBuilder = builder.newBuilderForField(UnittestProto.optionalNestedMessageExtension.getDescriptor())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(builder.build().getExtension(UnittestProto.optionalNestedMessageExtension).getBb()).isEqualTo(expected)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "FieldDescriptor field = NestedMessage.getDescriptor().findFieldByNumber(NestedMessage.BB_FIELD_NUMBER)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Message.Builder fieldBuilder = builder.getFieldBuilder(UnittestProto.optionalNestedMessageExtension.getDescriptor())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final int expected = 7432@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(expected,fieldBuilder.build().getField(field))@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int expected = 7432@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "fieldBuilder.setField(field,expected)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "DynamicMessage.Builder builder = DynamicMessage.newBuilder(TestAllExtensions.getDescriptor())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "builder.setExtension(UnittestProto.optionalNestedMessageExtension,NestedMessage.newBuilder().setBb(123).build())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "fieldBuilder.setField(field,expected)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(expected,builder.build().getExtension(UnittestProto.optionalNestedMessageExtension).getBb())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testGetBuilderForExtensionField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expected += 100@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->2 [style = solid, label="expected"];
9->0 [style = bold, label=""];
9->11 [style = bold, label=""];
17->1 [style = bold, label=""];
1->2 [style = solid, label="field"];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
5->7 [style = solid, label="expected"];
5->2 [style = solid, label="expected"];
18->15 [style = bold, label=""];
17->1 [style = solid, label="field"];
0->11 [style = dashed, label="0"];
17->2 [style = solid, label="field"];
10->9 [style = solid, label="expected"];
3->4 [style = bold, label=""];
2->12 [style = bold, label=""];
6->18 [style = dashed, label="0"];
5->1 [style = bold, label=""];
15->17 [style = bold, label=""];
5->12 [style = solid, label="expected"];
12->10 [style = bold, label=""];
8->5 [style = bold, label=""];
6->8 [style = bold, label=""];
7->12 [style = dashed, label="0"];
16->14 [style = bold, label=""];
14->18 [style = bold, label=""];
4->14 [style = dashed, label="0"];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
10->0 [style = solid, label="expected"];
2->7 [style = bold, label=""];
1->9 [style = solid, label="field"];
15->1 [style = solid, label="expected"];
10->11 [style = solid, label="expected"];
13->4 [style = bold, label=""];
}
