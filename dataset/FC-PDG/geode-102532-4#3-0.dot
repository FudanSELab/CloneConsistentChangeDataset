digraph {
14 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final OutputStream streamOne = mockContext.mock(,\"streamOne\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@168467,2,3)@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16850e,2,3)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "verifyZeroInteractions(streamOne)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertFalse(cos.isEmpty())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "cos.write(9)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertEquals(0,cos.size())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1684ca,2,3)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "cos.close()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@168521)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16847a)@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(0,cos.size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "cos.write(9)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "mockContext.checking(new Expectations(){})@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "cos.removeOutputStream(streamOne)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "assertTrue(cos.isEmpty())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "cos.removeOutputStream(streamOne)@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(cos.size()).isEqualTo(0)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "cos.close()@@@32@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "cos.close()@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(1,cos.size())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1684dd)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "testNewCompositeOutputStreamWithNoStreams['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "cos.flush()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testRemoveOutputStreamWithOneStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "cos.flush()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testRemoveOutputStreamWithOneStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "cos.flush()@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "cos.write(9)@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(cos.isEmpty()).isTrue()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertTrue(cos.isEmpty())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35->27 [style = bold, label=""];
28->30 [style = bold, label=""];
9->4 [style = bold, label=""];
27->28 [style = bold, label=""];
17->22 [style = solid, label="streamOne"];
1->3 [style = bold, label=""];
3->11 [style = bold, label=""];
31->29 [style = bold, label=""];
16->25 [style = bold, label=""];
19->11 [style = bold, label=""];
17->24 [style = solid, label="streamOne"];
0->26 [style = dashed, label="0"];
4->2 [style = bold, label=""];
8->14 [style = dashed, label="0"];
1->10 [style = solid, label="streamOne"];
17->22 [style = bold, label=""];
26->24 [style = bold, label=""];
24->18 [style = bold, label=""];
10->6 [style = bold, label=""];
12->7 [style = bold, label=""];
13->1 [style = bold, label=""];
32->33 [style = bold, label=""];
6->18 [style = dashed, label="0"];
8->0 [style = bold, label=""];
7->9 [style = bold, label=""];
14->26 [style = bold, label=""];
6->5 [style = bold, label=""];
15->17 [style = bold, label=""];
0->10 [style = bold, label=""];
1->17 [style = dashed, label="0"];
21->20 [style = bold, label=""];
20->16 [style = bold, label=""];
5->12 [style = bold, label=""];
30->31 [style = bold, label=""];
29->32 [style = bold, label=""];
25->19 [style = bold, label=""];
5->21 [style = dashed, label="0"];
11->8 [style = bold, label=""];
1->11 [style = solid, label="streamOne"];
34->35 [style = bold, label=""];
18->21 [style = bold, label=""];
17->23 [style = solid, label="streamOne"];
22->14 [style = bold, label=""];
11->23 [style = bold, label=""];
}
