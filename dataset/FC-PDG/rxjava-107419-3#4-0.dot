digraph {
8 [style = filled, label = "assertTrue(d.isDisposed())@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "drainMaxLoopDontAccept['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ts.assertFailure()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "drainMaxLoopMissingBackpressureWithResource['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "ts.onSubscribe(new BooleanSubscription())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Disposable d = Disposables.empty()@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Disposable d = Disposable.empty()@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "QueueDrain<Integer,Integer> qd = new QueueDrain<Integer,Integer>(){@Override public boolean cancelled(){return false}@Override public boolean done(){return false}@Override public Throwable error(){return null}@Override public boolean enter(){return true}@Override public long requested(){return 1}@Override public long produced(long n){return 0}@Override public int leave(int m){return 0}@Override public boolean accept(Subscriber<? super Integer> a,Integer v){return false}}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ts.assertEmpty()@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "q.offer(1)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "SpscArrayQueue<Integer> q = new SpscArrayQueue<Integer>(32)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "drainMaxLoopMissingBackpressureWithResource['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "QueueDrainHelper.drainMaxLoop(q,ts,false,null,qd)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "QueueDrainHelper.drainMaxLoop(q,ts,false,d,qd)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<Integer>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
1->14 [style = solid, label="ts"];
1->7 [style = solid, label="ts"];
0->6 [style = bold, label=""];
2->3 [style = bold, label=""];
0->14 [style = solid, label="q"];
4->7 [style = solid, label="d"];
13->1 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
6->14 [style = bold, label=""];
6->4 [style = bold, label=""];
11->7 [style = solid, label="d"];
7->5 [style = bold, label=""];
0->7 [style = solid, label="q"];
6->11 [style = bold, label=""];
14->12 [style = bold, label=""];
3->14 [style = solid, label="qd"];
1->2 [style = bold, label=""];
4->11 [style = dashed, label="0"];
9->1 [style = bold, label=""];
10->1 [style = bold, label=""];
11->7 [style = bold, label=""];
3->7 [style = solid, label="qd"];
}
