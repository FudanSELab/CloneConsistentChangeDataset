digraph {
6 [style = filled, label = "List<Throwable> errors = TestHelper.trackPluginErrors()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Flowable<Integer> emptyFlowable = Flowable.timer(10,TimeUnit.MILLISECONDS,testScheduler).flatMap(new Function<Long,Publisher<Integer>>(){@Override public Publisher<Integer> apply(Long aLong){return Flowable.error(new Exception())}})@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "combine2Flowable2Errors['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Observable<Object> errorObservable = Observable.timer(100,TimeUnit.MILLISECONDS,testScheduler).map(new Function<Long,Object>(){@Override public Object apply(Long aLong){throw new Exception()}})@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testScheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS)@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(errors.toString(),errors.isEmpty())@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Flowable.combineLatestDelayError(Arrays.asList(emptyFlowable.doOnEach(new Consumer<Notification<Integer>>(){@Override public void accept(Notification<Integer> integerNotification){System.out.println(\"emptyFlowable: \" + integerNotification)}}).doFinally(new Action(){@Override public void run(){System.out.println(\"emptyFlowable: doFinally\")}}),errorFlowable.doOnEach(new Consumer<Notification<Object>>(){@Override public void accept(Notification<Object> integerNotification){System.out.println(\"errorFlowable: \" + integerNotification)}}).doFinally(new Action(){@Override public void run(){System.out.println(\"errorFlowable: doFinally\")}})),new Function<Object((,Object>(){@Override public Object apply(Object(( objects){return 0}}).doOnEach(new Consumer<Notification<Object>>(){@Override public void accept(Notification<Object> integerNotification){System.out.println(\"combineLatestDelayError: \" + integerNotification)}}).doFinally(new Action(){@Override public void run(){System.out.println(\"combineLatestDelayError: doFinally\")}}).subscribe(testSubscriber)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestScheduler testScheduler = new TestScheduler()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "{RxJavaPlugins.reset()}@@@59@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Flowable<Object> errorFlowable = Flowable.timer(100,TimeUnit.MILLISECONDS,testScheduler).map(new Function<Long,Object>(){@Override public Object apply(Long aLong){throw new Exception()}})@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Observable<Integer> emptyObservable = Observable.timer(10,TimeUnit.MILLISECONDS,testScheduler).flatMap(new Function<Long,ObservableSource<Integer>>(){@Override public ObservableSource<Integer> apply(Long aLong){return Observable.error(new Exception())}})@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "combine2Flowable2Errors['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "testSubscriber.awaitDone(5,TimeUnit.SECONDS)@@@56@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testObserver.awaitDone(5,TimeUnit.SECONDS)@@@56@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestSubscriber<Object> testObserver = TestSubscriber.create()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Observable.combineLatestDelayError(Arrays.asList(emptyObservable.doOnEach(new Consumer<Notification<Integer>>(){@Override public void accept(Notification<Integer> integerNotification){System.out.println(\"emptyObservable: \" + integerNotification)}}).doFinally(new Action(){@Override public void run(){System.out.println(\"emptyObservable: doFinally\")}}),errorObservable.doOnEach(new Consumer<Notification<Object>>(){@Override public void accept(Notification<Object> integerNotification){System.out.println(\"errorObservable: \" + integerNotification)}}).doFinally(new Action(){@Override public void run(){System.out.println(\"errorObservable: doFinally\")}})),new Function<Object((,Object>(){@Override public Object apply(Object(( objects){return 0}}).doOnEach(new Consumer<Notification<Object>>(){@Override public void accept(Notification<Object> integerNotification){System.out.println(\"combineLatestDelayError: \" + integerNotification)}}).doFinally(new Action(){@Override public void run(){System.out.println(\"combineLatestDelayError: doFinally\")}}).subscribe(testObserver)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "TestSubscriber<Object> testSubscriber = TestSubscriber.create()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "TestObserver<Object> testObserver = TestObserver.create()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "combine2Observable2Errors['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
6->17 [style = bold, label=""];
5->12 [style = dashed, label="0"];
16->6 [style = bold, label=""];
17->9 [style = bold, label=""];
11->6 [style = bold, label=""];
17->15 [style = solid, label="testObserver"];
8->6 [style = bold, label=""];
7->4 [style = bold, label=""];
9->10 [style = bold, label=""];
12->0 [style = bold, label=""];
1->9 [style = bold, label=""];
13->7 [style = solid, label="testSubscriber"];
1->13 [style = dashed, label="0"];
6->1 [style = bold, label=""];
1->17 [style = dashed, label="0"];
9->18 [style = bold, label=""];
2->14 [style = dashed, label="0"];
5->0 [style = bold, label=""];
6->13 [style = bold, label=""];
15->4 [style = bold, label=""];
7->15 [style = dashed, label="0"];
4->12 [style = bold, label=""];
10->2 [style = bold, label=""];
14->15 [style = bold, label=""];
13->9 [style = bold, label=""];
2->7 [style = bold, label=""];
4->5 [style = bold, label=""];
18->14 [style = bold, label=""];
10->18 [style = dashed, label="0"];
1->7 [style = solid, label="testObserver"];
}
