digraph {
18 [style = filled, label = "assertFalse(pager.isExhausted())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "partition = query(pager,3,2)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "page = pager.fetchPage(3)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(toString(page),1,page.size())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(pager.isExhausted())@@@17@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertRow(partition.get(0),\"k0\",\"c7\",\"c8\")@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "reversedSliceQueryTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "page = pager.fetchPage(3)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertFalse(pager.isExhausted())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertFalse(pager.isExhausted())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertRow(page.get(0),\"k0\",\"c6\",\"c7\",\"c8\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "QueryPager pager = QueryPagers.localPager(sliceQuery(\"k0\",\"c8\",\"c1\",true,10))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<Row> page@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertRow(page.get(0),\"k0\",\"c4\",\"c5\",\"c6\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertRow(page.get(0),\"k0\",\"c7\",\"c8\")@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "QueryPager pager = sliceQuery(\"k0\",\"c1\",\"c8\",10).getPager(null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertRow(page.get(0),\"k0\",\"c3\",\"c4\",\"c5\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(toString(page),1,page.size())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "page = pager.fetchPage(3)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertRow(page.get(0),\"k0\",\"c1\",\"c2\",\"c3\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertEquals(toString(page),1,page.size())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertRow(partition.get(0),\"k0\",\"c1\",\"c2\",\"c3\")@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "QueryPager pager = QueryPagers.localPager(sliceQuery(\"k0\",\"c1\",\"c8\",10))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertFalse(pager.isExhausted())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertFalse(pager.isExhausted())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "partition = query(pager,3)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "sliceQueryTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertFalse(pager.isExhausted())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "sliceQueryTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "assertRow(page.get(0),\"k0\",\"c1\",\"c2\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
1->5 [style = bold, label=""];
4->10 [style = bold, label=""];
10->18 [style = bold, label=""];
6->26 [style = bold, label=""];
8->15 [style = bold, label=""];
12->28 [style = bold, label=""];
5->9 [style = bold, label=""];
22->19 [style = bold, label=""];
2->6 [style = solid, label="page"];
2->6 [style = bold, label=""];
24->7 [style = solid, label="pager"];
11->4 [style = bold, label=""];
25->9 [style = bold, label=""];
5->24 [style = dashed, label="0"];
11->29 [style = bold, label=""];
19->10 [style = bold, label=""];
5->25 [style = dashed, label="0"];
3->12 [style = bold, label=""];
9->7 [style = bold, label=""];
15->3 [style = bold, label=""];
16->22 [style = bold, label=""];
12->0 [style = bold, label=""];
13->11 [style = bold, label=""];
24->21 [style = solid, label="pager"];
0->28 [style = dashed, label="0"];
28->14 [style = bold, label=""];
17->7 [style = bold, label=""];
24->19 [style = solid, label="pager"];
0->14 [style = bold, label=""];
23->24 [style = bold, label=""];
21->20 [style = bold, label=""];
7->16 [style = bold, label=""];
6->8 [style = bold, label=""];
24->17 [style = bold, label=""];
26->15 [style = bold, label=""];
29->10 [style = bold, label=""];
13->11 [style = solid, label="page"];
10->2 [style = bold, label=""];
3->12 [style = solid, label="page"];
18->21 [style = bold, label=""];
4->29 [style = dashed, label="0"];
20->15 [style = bold, label=""];
27->25 [style = bold, label=""];
8->26 [style = dashed, label="0"];
}
