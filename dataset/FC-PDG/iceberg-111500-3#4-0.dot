digraph {
15 [style = filled, label = "ValidationException.check(pred.term() instanceof BoundReference,\"Visitor %s does not support expression: %s\",this,pred.term())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "return lt(pred.term(),literalPred.literal())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "return notEq((BoundReference<T>)pred.term(),literalPred.literal())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "return notIn(pred.term(),pred.asSetPredicate().literalSet())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "pred.isSetPredicate()@@@23@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "return isNull((BoundReference<T>)pred.term())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "return gtEq(pred.term(),literalPred.literal())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "return in(pred.term(),pred.asSetPredicate().literalSet())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "predicate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "return gt(pred.term(),literalPred.literal())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "BoundPredicate<T> pred@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "pred.op()@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "BoundLiteralPredicate<T> literalPred = pred.asLiteralPredicate()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "throw new IllegalStateException(\"Invalid operation for BoundUnaryPredicate: \" + pred.op())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "return eq((BoundReference<T>)pred.term(),literalPred.literal())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "return ltEq((BoundReference<T>)pred.term(),literalPred.literal())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "pred.isUnaryPredicate()@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "predicate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "return isNull(pred.term())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "throw new IllegalStateException(\"Unsupported bound predicate: \" + pred.getClass().getName())@@@30@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "pred.op()@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "return notNaN((BoundReference<T>)pred.term())@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "pred.isLiteralPredicate()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "return ltEq(pred.term(),literalPred.literal())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "return gt((BoundReference<T>)pred.term(),literalPred.literal())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "return in((BoundReference<T>)pred.term(),pred.asSetPredicate().literalSet())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "predicate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "return eq(pred.term(),literalPred.literal())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "return notEq(pred.term(),literalPred.literal())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "return notIn((BoundReference<T>)pred.term(),pred.asSetPredicate().literalSet())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "return notNull(pred.term())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "throw new IllegalStateException(\"Invalid operation for BoundSetPredicate: \" + pred.op())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "pred.op()@@@24@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "return startsWith(pred.term(),literalPred.literal())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "return gtEq((BoundReference<T>)pred.term(),literalPred.literal())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "return isNaN((BoundReference<T>)pred.term())@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "throw new IllegalStateException(\"Invalid operation for BoundLiteralPredicate: \" + pred.op())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return startsWith((BoundReference<T>)pred.term(),literalPred.literal())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "return lt((BoundReference<T>)pred.term(),literalPred.literal())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "return notNull((BoundReference<T>)pred.term())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->23 [style = dotted, label="true"];
3->10 [style = bold, label=""];
18->20 [style = bold, label=""];
11->12 [style = bold, label=""];
17->0 [style = dotted, label="true"];
1->11 [style = dotted, label="true"];
21->22 [style = bold, label=""];
18->37 [style = dotted, label="true"];
33->34 [style = bold, label=""];
30->38 [style = bold, label=""];
19->0 [style = bold, label=""];
0->8 [style = bold, label=""];
18->28 [style = bold, label=""];
1->11 [style = bold, label=""];
3->6 [style = bold, label=""];
18->14 [style = dotted, label="true"];
4->24 [style = bold, label=""];
26->25 [style = bold, label=""];
29->32 [style = bold, label=""];
17->25 [style = dotted, label="true"];
16->28 [style = dashed, label="0"];
17->13 [style = bold, label=""];
37->28 [style = bold, label=""];
3->6 [style = dotted, label="true"];
11->23 [style = bold, label=""];
18->24 [style = dotted, label="true"];
18->21 [style = bold, label=""];
11->36 [style = bold, label=""];
17->38 [style = dotted, label="true"];
31->29 [style = bold, label=""];
24->14 [style = bold, label=""];
14->37 [style = dashed, label="0"];
18->20 [style = dotted, label="true"];
10->17 [style = bold, label=""];
11->12 [style = dotted, label="true"];
18->33 [style = dotted, label="true"];
1->8 [style = bold, label=""];
17->13 [style = dotted, label="true"];
18->29 [style = dotted, label="true"];
22->9 [style = bold, label=""];
18->32 [style = bold, label=""];
11->36 [style = dotted, label="true"];
18->21 [style = dotted, label="true"];
3->18 [style = dotted, label="true"];
23->36 [style = dashed, label="0"];
19->26 [style = bold, label=""];
11->35 [style = bold, label=""];
35->36 [style = bold, label=""];
4->33 [style = dashed, label="0"];
15->3 [style = bold, label=""];
10->1 [style = dotted, label="false"];
18->31 [style = bold, label=""];
17->30 [style = dotted, label="true"];
38->0 [style = bold, label=""];
32->33 [style = bold, label=""];
36->12 [style = bold, label=""];
39->7 [style = dotted, label="true"];
18->9 [style = dotted, label="true"];
13->30 [style = dashed, label="0"];
18->29 [style = bold, label=""];
11->35 [style = dotted, label="true"];
6->18 [style = bold, label=""];
17->26 [style = bold, label=""];
11->2 [style = dotted, label="true"];
18->34 [style = dotted, label="true"];
14->16 [style = bold, label=""];
13->19 [style = bold, label=""];
9->4 [style = bold, label=""];
18->4 [style = bold, label=""];
18->22 [style = bold, label=""];
28->20 [style = bold, label=""];
17->19 [style = bold, label=""];
18->33 [style = bold, label=""];
20->8 [style = bold, label=""];
27->15 [style = bold, label=""];
19->38 [style = dashed, label="0"];
11->2 [style = bold, label=""];
24->34 [style = dashed, label="0"];
10->1 [style = bold, label=""];
18->9 [style = bold, label=""];
18->4 [style = dotted, label="true"];
23->12 [style = bold, label=""];
18->28 [style = dotted, label="true"];
18->16 [style = bold, label=""];
18->32 [style = dotted, label="true"];
18->34 [style = bold, label=""];
25->0 [style = bold, label=""];
17->26 [style = dotted, label="true"];
18->14 [style = bold, label=""];
17->30 [style = bold, label=""];
12->8 [style = bold, label=""];
18->22 [style = dotted, label="true"];
17->0 [style = bold, label=""];
17->19 [style = dotted, label="true"];
27->7 [style = dotted, label="true"];
18->24 [style = bold, label=""];
17->38 [style = bold, label=""];
22->29 [style = dashed, label="0"];
5->7 [style = dotted, label="true"];
18->16 [style = dotted, label="true"];
9->32 [style = dashed, label="0"];
3->10 [style = dotted, label="false"];
16->20 [style = bold, label=""];
18->37 [style = bold, label=""];
39->3 [style = bold, label=""];
10->17 [style = dotted, label="true"];
34->37 [style = bold, label=""];
2->35 [style = dashed, label="0"];
18->31 [style = dotted, label="true"];
2->23 [style = bold, label=""];
17->25 [style = bold, label=""];
5->15 [style = bold, label=""];
21->31 [style = dashed, label="0"];
}
