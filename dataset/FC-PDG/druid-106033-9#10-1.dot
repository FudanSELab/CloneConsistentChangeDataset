digraph {
0 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(new SelectorFilter(\"channel\",\"#en.wikipedia\"),null,ImmutableList.of())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "test_filterPushDown_factToRegionToCountryLeftFilterOnChannel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(new SelectorFilter(\"v1\",\"virtual-column-#en.wikipedia\"),null,ImmutableList.of())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(adapter,adapter.determineBaseColumnsWithPreAndPostJoinVirtualColumns(VirtualColumns.EMPTY,null,null),originalFilter,true,true)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(expectedFilterSplit,actualFilterSplit)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(adapter,adapter.determineBaseColumnsWithPreAndPostJoinVirtualColumns(VirtualColumns.EMPTY,null,null),originalFilter,true)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Filter originalFilter = new AndFilter(ImmutableList.of(new SelectorFilter(\"v1\",\"virtual-column-#en.wikipedia\")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(originalFilter,Intervals.ETERNITY,virtualColumns,Granularities.ALL,false,null),ImmutableList.of(\"page\",FACT_TO_REGION_PREFIX + \"regionName\",REGION_TO_COUNTRY_PREFIX + \"countryName\"),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c7fc6,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c7fcc,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c7fd2,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c7fd8,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c7fde,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c7fe4,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c7fea,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c7ff0,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c7ff6,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c7ffc,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c8002,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c8008,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c800e,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c8014))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(expectedFilterSplit,actualFilterSplit)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Filter originalFilter = new SelectorFilter(\"channel\",\"#en.wikipedia\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "test_filterPushDown_factToRegionToCountryLeftFilterOnChannelVirtualColumn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(adapter,adapter.determineBaseColumnsWithPreAndPostJoinVirtualColumns(virtualColumns,null,null),originalFilter,true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "test_filterPushDown_factToRegionToCountryLeftFilterOnChannel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),ImmutableList.of(factToRegion(JoinType.LEFT),regionToCountry(JoinType.LEFT)))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "VirtualColumns virtualColumns = VirtualColumns.create(ImmutableList.of(new ExpressionVirtualColumn(\"v1\",\"concat('virtual-column-', \"channel\")\",ValueType.STRING,TestExprMacroTable.INSTANCE)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
1->13 [style = solid, label="adapter"];
7->1 [style = bold, label=""];
8->3 [style = solid, label="actualFilterSplit"];
8->3 [style = bold, label=""];
12->11 [style = bold, label=""];
0->3 [style = solid, label="expectedFilterSplit"];
11->13 [style = solid, label="virtualColumns"];
1->5 [style = solid, label="adapter"];
6->0 [style = bold, label=""];
11->14 [style = solid, label="virtualColumns"];
12->14 [style = solid, label="originalFilter"];
6->2 [style = solid, label="originalFilter"];
6->12 [style = dashed, label="0"];
1->8 [style = solid, label="adapter"];
1->6 [style = bold, label=""];
10->2 [style = solid, label="expectedFilterSplit"];
2->14 [style = dashed, label="0"];
3->2 [style = bold, label=""];
10->13 [style = bold, label=""];
11->10 [style = bold, label=""];
2->14 [style = bold, label=""];
0->8 [style = bold, label=""];
1->12 [style = bold, label=""];
5->8 [style = dashed, label="0"];
6->8 [style = solid, label="originalFilter"];
4->1 [style = bold, label=""];
9->1 [style = bold, label=""];
5->3 [style = solid, label="actualFilterSplit"];
6->5 [style = solid, label="originalFilter"];
12->13 [style = solid, label="originalFilter"];
13->2 [style = solid, label="actualFilterSplit"];
0->5 [style = bold, label=""];
13->2 [style = bold, label=""];
}
