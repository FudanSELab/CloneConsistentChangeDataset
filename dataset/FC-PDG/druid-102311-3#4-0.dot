digraph {
44 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(task.getId())).andReturn(Optional.of(TaskStatus.running(task.getId()))).anyTimes()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "Map<Integer,Map<String,String>> expectedPartitionGroups = ImmutableMap.of(0,ImmutableMap.of(SHARD_ID1,\"-1\"),1,ImmutableMap.of(SHARD_ID2,\"-1\"))@@@71@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group1ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID3,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@61@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
98 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpointsGroup0)).times(1)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group0ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verifyAll()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.END_OF_SHARD_MARKER,SHARD_ID1,\"100\",SHARD_ID2,\"100\")))).anyTimes()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "checkpointsGroup0.put(0,ImmutableMap.of(SHARD_ID2,\"100\"))@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "SeekableStreamStartSequenceNumbers<String,String> group1ExpectedStartSequenceNumbers = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID3,\"100\"),ImmutableSet.of(SHARD_ID3))@@@60@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "EasyMock.replay(taskClient)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "Assert.assertEquals(group0ExpectedEndSequenceNumbers,group0Config.getEndSequenceNumbers())@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID1))).andReturn(\"200\").anyTimes()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "KinesisIndexTaskIOConfig group0Config = ((KinesisIndexTask)postSplitTasks.get(0)).getIOConfig()@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "EasyMock.expect(taskStorage.getTask(successfulTask1.getId())).andReturn(Optional.of(successfulTask1)).anyTimes()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "verifyAll()@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals((Integer)1,group1Config.getTaskGroupId())@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Task successfulTask0 = phaseTwoTasks.get(0)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED)).anyTimes()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpointsGroup0 = new TreeMap<>()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertEquals(2,postSplitTasks.size())@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "EasyMock.replay(taskStorage)@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(expectedPartitionGroups,supervisor.getPartitionGroups())@@@59@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(successfulTask0.getId())).andReturn(Optional.of(TaskStatus.success(successfulTask0.getId())))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID1,SHARD_ID3)).anyTimes()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(1,postSplitTasks.size())@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "EasyMock.reset(taskStorage)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "replayAll()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group0ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(DATASOURCE,new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID1,\"100\",SHARD_ID3,\"100\"))))).andReturn(true).anyTimes()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
59 [style = filled, label = "EasyMock.expect(taskStorage.getTask(task.getId())).andReturn(Optional.of(task)).anyTimes()@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "testShardSplitPhaseThree['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Assert.assertEquals(group1ExpectedStartSequenceNumbers,group1Config.getStartSequenceNumbers())@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expect(taskStorage.getTask(successfulTask0.getId())).andReturn(Optional.of(successfulTask0)).anyTimes()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(postSplitCaptured))).andReturn(true).times(2)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.END_OF_SHARD_MARKER,SHARD_ID1,KinesisSequenceNumber.END_OF_SHARD_MARKER,SHARD_ID2,\"100\")))).anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals((Integer)0,group0Config.getTaskGroupId())@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(postSplitCaptured))).andReturn(true).times(1)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "EasyMock.reset(taskClient)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "SeekableStreamStartSequenceNumbers<String,String> group0ExpectedStartSequenceNumbers = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"100\"),ImmutableSet.of(SHARD_ID1))@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "List<Task> phaseTwoTasks@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(DATASOURCE,new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.EXPIRED_MARKER,SHARD_ID1,\"100\",SHARD_ID2,\"100\"))))).andReturn(true).anyTimes()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
91 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(postSplitTasks).anyTimes()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "checkpointsGroup0.put(0,ImmutableMap.of(SHARD_ID2,\"100\"))@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Assert.assertEquals(group0ExpectedStartSequenceNumbers,group0Config.getStartSequenceNumbers())@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Capture<Task> postSplitCaptured = Capture.newInstance(CaptureType.ALL)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "EasyMock.reset(supervisorRecordSupplier)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "SeekableStreamStartSequenceNumbers<String,String> group1ExpectedStartSequenceNumbers = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,\"100\"),ImmutableSet.of(SHARD_ID2))@@@60@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
82 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID2))).andReturn(\"200\").anyTimes()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
97 [style = filled, label = "List<Task> postSplitTasks = postSplitCaptured.getValues()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "EasyMock.reset(taskRunner)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD1_PARTITION,SHARD3_PARTITION)).anyTimes()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "testShardMergePhaseThree['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpointsGroup0)).times(1)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD1_PARTITION,SHARD2_PARTITION)).anyTimes()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.END_OF_SHARD_MARKER,SHARD_ID1,\"100\",SHARD_ID3,\"100\")))).anyTimes()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "KinesisIndexTaskIOConfig group1Config = ((KinesisIndexTask)postSplitTasks.get(1)).getIOConfig()@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(group1ExpectedEndSequenceNumbers,group1Config.getEndSequenceNumbers())@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD2_PARTITION)).anyTimes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "supervisor.runInternal()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED)).anyTimes()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Map<Integer,Map<String,String>> expectedPartitionGroups = ImmutableMap.of(0,ImmutableMap.of(SHARD_ID1,\"-1\"),1,ImmutableMap.of(SHARD_ID3,\"-1\"))@@@71@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "checkpointsGroup1.put(1,ImmutableMap.of(SHARD_ID3,\"100\"))@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "checkpointsGroup0.put(0,ImmutableMap.of(SHARD_ID1,\"100\"))@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
68 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID2))).andReturn(\"200\").anyTimes()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75 [style = filled, label = "checkpointsGroup1.put(1,ImmutableMap.of(SHARD_ID1,\"100\"))@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "EasyMock.reset(taskMaster)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "SeekableStreamEndSequenceNumbers<String,String> group1ExpectedEndSequenceNumbers = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER))@@@61@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "testShardSplitPhaseThree['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
73 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID1,SHARD_ID2)).anyTimes()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
92 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "EasyMock.reset(taskStorage)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.reset(taskClient)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "Assert.assertEquals(group0ExpectedStartSequenceNumbers,group0Config.getStartSequenceNumbers())@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<Task> phaseTwoTasks@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(new StreamPartition<>(STREAM,SHARD_ID3))).andReturn(\"200\").anyTimes()@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpointsGroup1 = new TreeMap<>()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "supervisor.runInternal()@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(successfulTask1.getId())).andReturn(Optional.of(TaskStatus.success(successfulTask1.getId())))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(expectedPartitionGroups,supervisor.getPartitionGroups())@@@72@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "EasyMock.reset(indexerMetadataStorageCoordinator)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "EasyMock.reset(taskQueue)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID2)).anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(group0ExpectedEndSequenceNumbers,group0Config.getEndSequenceNumbers())@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "Assert.assertEquals((Integer)0,group0Config.getTaskGroupId())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
90 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(DATASOURCE,new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<String,String>(STREAM,ImmutableMap.of(SHARD_ID2,\"100\"))))).andReturn(true).anyTimes()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpointsGroup1)).times(1)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Task successfulTask1 = phaseTwoTasks.get(1)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "SeekableStreamStartSequenceNumbers<String,String> group0ExpectedStartSequenceNumbers = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID2,\"100\"),ImmutableSet.of(SHARD_ID2))@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "Map<Integer,Map<String,String>> expectedPartitionGroups = ImmutableMap.of(0,ImmutableMap.of(SHARD_ID2,\"-1\"),1,ImmutableMap.of())@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55->72 [style = bold, label=""];
3->68 [style = bold, label=""];
14->25 [style = bold, label=""];
59->49 [style = bold, label=""];
5->63 [style = bold, label=""];
40->6 [style = bold, label=""];
52->27 [style = bold, label=""];
7->30 [style = bold, label=""];
13->16 [style = solid, label="group0ExpectedEndSequenceNumbers"];
73->74 [style = bold, label=""];
84->3 [style = bold, label=""];
24->57 [style = bold, label=""];
87->62 [style = bold, label=""];
15->80 [style = bold, label=""];
18->57 [style = dashed, label="0"];
31->21 [style = bold, label=""];
48->29 [style = solid, label="group0ExpectedStartSequenceNumbers"];
32->34 [style = bold, label=""];
91->44 [style = bold, label=""];
16->60 [style = bold, label=""];
11->78 [style = dashed, label="0"];
70->0 [style = dotted, label="true"];
17->80 [style = dashed, label="0"];
41->71 [style = dashed, label="0"];
15->17 [style = bold, label=""];
75->21 [style = bold, label=""];
4->72 [style = dashed, label="0"];
50->45 [style = bold, label=""];
20->37 [style = bold, label=""];
9->14 [style = bold, label=""];
66->29 [style = bold, label=""];
9->79 [style = dashed, label="0"];
76->34 [style = solid, label="expectedPartitionGroups"];
2->69 [style = bold, label=""];
56->7 [style = bold, label=""];
12->60 [style = solid, label="group1ExpectedStartSequenceNumbers"];
32->76 [style = dashed, label="0"];
83->86 [style = bold, label=""];
82->92 [style = bold, label=""];
27->95 [style = bold, label=""];
76->34 [style = bold, label=""];
12->77 [style = dashed, label="0"];
86->61 [style = solid, label="expectedPartitionGroups"];
55->85 [style = bold, label=""];
37->1 [style = bold, label=""];
98->97 [style = bold, label=""];
85->90 [style = bold, label=""];
25->3 [style = bold, label=""];
12->11 [style = bold, label=""];
77->60 [style = solid, label="group1ExpectedStartSequenceNumbers"];
1->35 [style = bold, label=""];
90->96 [style = bold, label=""];
30->58 [style = bold, label=""];
97->91 [style = bold, label=""];
17->65 [style = bold, label=""];
51->75 [style = bold, label=""];
77->78 [style = bold, label=""];
8->38 [style = bold, label=""];
89->45 [style = bold, label=""];
35->57 [style = bold, label=""];
13->12 [style = bold, label=""];
43->66 [style = bold, label=""];
64->15 [style = bold, label=""];
89->94 [style = dotted, label="true"];
21->22 [style = bold, label=""];
65->39 [style = bold, label=""];
13->52 [style = dashed, label="0"];
47->2 [style = bold, label=""];
74->3 [style = bold, label=""];
60->19 [style = bold, label=""];
48->13 [style = bold, label=""];
59->44 [style = bold, label=""];
54->61 [style = bold, label=""];
78->19 [style = solid, label="group1ExpectedEndSequenceNumbers"];
93->83 [style = bold, label=""];
29->16 [style = bold, label=""];
62->36 [style = bold, label=""];
22->44 [style = bold, label=""];
19->76 [style = bold, label=""];
38->5 [style = bold, label=""];
4->9 [style = bold, label=""];
64->82 [style = bold, label=""];
25->84 [style = dashed, label="0"];
18->47 [style = bold, label=""];
25->74 [style = dashed, label="0"];
41->26 [style = dashed, label="0"];
36->52 [style = bold, label=""];
23->43 [style = bold, label=""];
6->42 [style = bold, label=""];
9->90 [style = dashed, label="0"];
14->73 [style = dashed, label="0"];
14->96 [style = dashed, label="0"];
88->47 [style = bold, label=""];
69->56 [style = bold, label=""];
26->41 [style = bold, label=""];
57->88 [style = bold, label=""];
63->46 [style = bold, label=""];
19->32 [style = bold, label=""];
61->23 [style = bold, label=""];
45->8 [style = bold, label=""];
32->34 [style = solid, label="expectedPartitionGroups"];
26->71 [style = bold, label=""];
48->36 [style = dashed, label="0"];
58->26 [style = bold, label=""];
33->49 [style = bold, label=""];
53->67 [style = bold, label=""];
70->45 [style = bold, label=""];
11->54 [style = bold, label=""];
35->53 [style = bold, label=""];
52->83 [style = solid, label="group0ExpectedEndSequenceNumbers"];
68->64 [style = bold, label=""];
46->55 [style = bold, label=""];
11->19 [style = solid, label="group1ExpectedEndSequenceNumbers"];
95->81 [style = bold, label=""];
4->85 [style = dashed, label="0"];
71->51 [style = bold, label=""];
10->20 [style = bold, label=""];
33->62 [style = bold, label=""];
86->61 [style = bold, label=""];
28->40 [style = bold, label=""];
80->65 [style = bold, label=""];
36->93 [style = solid, label="group0ExpectedStartSequenceNumbers"];
57->18 [style = bold, label=""];
81->93 [style = bold, label=""];
78->54 [style = bold, label=""];
79->73 [style = bold, label=""];
39->28 [style = bold, label=""];
26->98 [style = bold, label=""];
50->0 [style = dotted, label="true"];
55->4 [style = bold, label=""];
41->51 [style = bold, label=""];
96->84 [style = bold, label=""];
42->10 [style = bold, label=""];
49->33 [style = bold, label=""];
92->65 [style = bold, label=""];
27->48 [style = bold, label=""];
72->79 [style = bold, label=""];
67->24 [style = bold, label=""];
51->31 [style = bold, label=""];
13->77 [style = bold, label=""];
33->87 [style = bold, label=""];
15->82 [style = dashed, label="0"];
31->75 [style = dashed, label="0"];
44->59 [style = bold, label=""];
0->94 [style = dashed, label="0"];
}
