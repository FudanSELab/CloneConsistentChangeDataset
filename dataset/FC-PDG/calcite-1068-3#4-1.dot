digraph {
13 [style = filled, label = "testSequenceEqualWithoutCollection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertFalse(enumerable1.skip(1).sequenceEqual(enumerable2))@@@34@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "final EqualityComparer<String> equalityComparer = new EqualityComparer<String>(){public boolean equal(String v1,String v2){return !Objects.equals(v1,v2)}public int hashCode(String s){return Objects.hashCode(s)}}@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "{}@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "EnumerableDefaults.sequenceEqual(null,enumerable2)@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final Enumerable<String> enumerable2 = Linq4j.asEnumerable(new Iterable<String>(){public Iterator<String> iterator(){return Arrays.asList(\"ming\",\"foo\",\"bar\").iterator()}})@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "NullPointerException ignored@@@17@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "assertFalse(enumerable1.sequenceEqual(enumerable2.skip(1)))@@@44@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "fail()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "{}@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "fail()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertFalse(enumerable1.skip(1).sequenceEqual(enumerable2))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "NullPointerException ignored@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "NullPointerException ignored@@@32@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertFalse(enumerable1.sequenceEqual(Linq4j.asEnumerable(new Iterable<String>(){public Iterator<String> iterator(){return Arrays.asList(\"ming\",\"foo\",\"far\").iterator()}})))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "{}@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "fail()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "EnumerableDefaults.sequenceEqual(enumerable1,null)@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "fail()@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "fail()@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final Enumerable<String> enumerable1 = Linq4j.asEnumerable(null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "NullPointerException ignored@@@11@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "fail()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "testSequenceEqualWithoutCollection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "EnumerableDefaults.sequenceEqual(enumerable1,null)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "testSequenceEqualWithComparerWithoutCollection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final Enumerable<String> enumerable1 = Linq4j.asEnumerable(new Iterable<String>(){public Iterator<String> iterator(){return Arrays.asList(\"ming\",\"foo\",\"bar\").iterator()}})@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "{}@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "EnumerableDefaults.sequenceEqual(null,enumerable2)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "assertFalse(enumerable1.sequenceEqual(enumerable2,equalityComparer))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final Enumerable<String> enumerable2 = Linq4j.asEnumerable(null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "EnumerableDefaults.sequenceEqual(enumerable1,null)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "EnumerableDefaults.sequenceEqual(null,enumerable2)@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "{}@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(enumerable1.sequenceEqual(enumerable2))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertFalse(enumerable1.sequenceEqual(enumerable2.skip(1)))@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "assertTrue(enumerable1.sequenceEqual(Linq4j.asEnumerable(new Iterable<String>(){public Iterator<String> iterator(){return Arrays.asList(\"fun\",\"lol\",\"far\").iterator()}}),equalityComparer))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "NullPointerException ignored@@@26@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "NullPointerException ignored@@@35@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertFalse(enumerable1.sequenceEqual(Linq4j.asEnumerable(null)))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertFalse(enumerable1.skip(1).sequenceEqual(enumerable2))@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33->7 [style = bold, label=""];
22->26 [style = bold, label=""];
2->32 [style = solid, label="enumerable1"];
38->33 [style = solid, label="equalityComparer"];
5->9 [style = bold, label=""];
10->14 [style = bold, label=""];
11->1 [style = bold, label=""];
2->3 [style = bold, label=""];
14->5 [style = bold, label=""];
23->15 [style = bold, label=""];
35->33 [style = bold, label=""];
26->18 [style = bold, label=""];
37->29 [style = bold, label=""];
3->35 [style = solid, label="enumerable2"];
36->32 [style = bold, label=""];
31->29 [style = bold, label=""];
21->18 [style = solid, label="enumerable1"];
8->6 [style = bold, label=""];
30->37 [style = bold, label=""];
3->38 [style = bold, label=""];
15->19 [style = bold, label=""];
3->8 [style = solid, label="enumerable2"];
24->18 [style = bold, label=""];
3->7 [style = solid, label="enumerable2"];
19->24 [style = bold, label=""];
0->7 [style = bold, label=""];
20->23 [style = solid, label="enumerable2"];
38->35 [style = solid, label="equalityComparer"];
7->5 [style = bold, label=""];
12->10 [style = bold, label=""];
21->20 [style = bold, label=""];
3->11 [style = solid, label="enumerable2"];
20->23 [style = bold, label=""];
16->28 [style = bold, label=""];
20->27 [style = solid, label="enumerable2"];
2->21 [style = dashed, label="0"];
6->15 [style = dashed, label="0"];
20->19 [style = solid, label="enumerable2"];
3->8 [style = bold, label=""];
6->11 [style = bold, label=""];
39->2 [style = bold, label=""];
27->17 [style = bold, label=""];
4->12 [style = bold, label=""];
29->40 [style = bold, label=""];
34->32 [style = bold, label=""];
18->8 [style = bold, label=""];
28->27 [style = bold, label=""];
3->29 [style = solid, label="enumerable2"];
38->35 [style = bold, label=""];
2->10 [style = solid, label="enumerable1"];
1->10 [style = bold, label=""];
8->27 [style = bold, label=""];
32->31 [style = bold, label=""];
7->36 [style = bold, label=""];
25->21 [style = bold, label=""];
3->5 [style = solid, label="enumerable2"];
13->2 [style = bold, label=""];
9->34 [style = bold, label=""];
}
