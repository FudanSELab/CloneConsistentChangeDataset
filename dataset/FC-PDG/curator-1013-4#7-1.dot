digraph {
5 [style = filled, label = "Throwable e@@@15@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Throwable e@@@16@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "CompletionStage<Void> first = manager.migrate(migrationSet)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"),\"first\".getBytes())@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "MigrationManager manager2 = new MigrationManager(client,LOCK_PATH,META_DATA_PATH,executor,Duration.ofMillis(timing.forSleepingABit().milliseconds()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "latch.countDown()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testConcurrency2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Migration migration = null@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "CuratorOp op1 = client.transactionOp().create().forPath(\"/test\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "CompletionStage<Void> second = manager.migrate(migrationSet)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(Throwables.getRootCause(e) instanceof TimeoutException,\"Should throw TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.fail(\"Should throw\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "second.toCompletableFuture().get(timing.forSleepingABit().milliseconds(),TimeUnit.MILLISECONDS)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "complete(manager2.migrate(migrationSet))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testConcurrency1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.fail(\"Should throw\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "MigrationSet migrationSet = MigrationSet.build(\"1\",Collections.singletonList(migration))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(Throwables.getRootCause(e) instanceof AsyncWrappers.TimeoutException)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertTrue(timing.awaitLatch(filterIsSetLatch))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "latch.countDown()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "filterLatch.set(latch)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testConcurrency2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(manager.debugCount.get(),1)@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "complete(first)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\",\"first\".getBytes())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->22 [style = solid, label="migrationSet"];
8->10 [style = bold, label=""];
22->25 [style = bold, label=""];
16->13 [style = bold, label=""];
0->16 [style = solid, label="migrationSet"];
7->17 [style = bold, label=""];
5->18 [style = dotted, label="true"];
20->9 [style = bold, label=""];
17->3 [style = solid, label="first"];
25->3 [style = bold, label=""];
4->7 [style = solid, label="latch"];
1->3 [style = bold, label=""];
17->8 [style = solid, label="first"];
5->18 [style = bold, label=""];
2->9 [style = bold, label=""];
12->24 [style = bold, label=""];
5->12 [style = dotted, label="true"];
12->1 [style = bold, label=""];
10->6 [style = bold, label=""];
4->7 [style = bold, label=""];
11->0 [style = bold, label=""];
23->22 [style = bold, label=""];
11->0 [style = solid, label="migration"];
18->1 [style = bold, label=""];
5->12 [style = bold, label=""];
19->9 [style = bold, label=""];
0->4 [style = bold, label=""];
3->8 [style = bold, label=""];
12->24 [style = dashed, label="0"];
16->10 [style = solid, label="second"];
9->14 [style = bold, label=""];
12->24 [style = dotted, label="true"];
12->18 [style = dashed, label="0"];
13->15 [style = bold, label=""];
14->11 [style = bold, label=""];
17->21 [style = bold, label=""];
21->23 [style = bold, label=""];
24->3 [style = bold, label=""];
17->16 [style = bold, label=""];
0->17 [style = solid, label="migrationSet"];
15->1 [style = bold, label=""];
}
