digraph {
9 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1-3-\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertThat(result,failedWith(3))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "dummyRangeRangeSingleShouldFailIfBuildRangeIsInvalid['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"-1,2,3\" is not a valid option\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,-3', expected string with a range M-N\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "dummyRangeRangeSingleShouldFailIfBuildRangeIsInvalid['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(result,failedWith(3))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,-2,3', expected string with a range M-N\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1-3-\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,-2,3\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1-3-', expected correct notation M,N or M-N\"))@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsNegative['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,-3\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(result,failedWith(2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(result,failedWith(3))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"-1,2,3\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3->6 [style = dashed, label="0"];
7->11 [style = bold, label=""];
3->1 [style = bold, label=""];
10->17 [style = solid, label="result"];
11->8 [style = solid, label="result"];
2->3 [style = bold, label=""];
6->1 [style = solid, label="result"];
12->15 [style = bold, label=""];
6->0 [style = solid, label="result"];
19->10 [style = bold, label=""];
3->1 [style = solid, label="result"];
10->17 [style = bold, label=""];
1->0 [style = bold, label=""];
15->16 [style = bold, label=""];
11->13 [style = solid, label="result"];
15->9 [style = solid, label="result"];
6->1 [style = bold, label=""];
13->12 [style = bold, label=""];
5->6 [style = bold, label=""];
3->0 [style = solid, label="result"];
0->4 [style = bold, label=""];
9->19 [style = bold, label=""];
11->8 [style = bold, label=""];
4->19 [style = dashed, label="0"];
10->18 [style = solid, label="result"];
15->16 [style = solid, label="result"];
18->14 [style = bold, label=""];
16->9 [style = bold, label=""];
17->18 [style = bold, label=""];
3->11 [style = dashed, label="0"];
8->13 [style = bold, label=""];
}
