digraph {
12 [style = filled, label = "assertEquals(\"runtime classpath should have 4 entries\",4,res.getClasspath().size())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testCompileClasspathTransform['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ClasspathContainer res@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ArtifactMetadata md = res.getClasspath().get(3)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNotNull(res,\"null classpath container after compile transform\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testTestClasspathTransform['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertNotNull(\"null classpath container after runtime transform\",res)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "res = transform.transform(graph,ArtifactScopeEnum.compile,false)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(3,res.getClasspath().size(),\"compile classpath should have 3 entries\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(\"test artifact version should be 1.2\",\"1.2\",md.getVersion())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "res = transform.transform(graph,ArtifactScopeEnum.test,false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertNotNull(\"null classpath container after compile transform\",res)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertNotNull(\"null classpath after runtime transform\",res.getClasspath())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"compile classpath should have 3 entries\",3,res.getClasspath().size())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testCompileClasspathTransform['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertNotNull(res.getClasspath(),\"null classpath after compile transform\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertNotNull(\"null classpath after compile transform\",res.getClasspath())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4->2 [style = solid, label="res"];
16->3 [style = bold, label=""];
15->14 [style = bold, label=""];
0->6 [style = dashed, label="0"];
8->3 [style = bold, label=""];
1->3 [style = bold, label=""];
14->10 [style = bold, label=""];
5->9 [style = dashed, label="0"];
3->15 [style = bold, label=""];
4->2 [style = bold, label=""];
0->12 [style = dashed, label="0"];
2->7 [style = dashed, label="0"];
3->4 [style = bold, label=""];
13->11 [style = bold, label=""];
4->7 [style = bold, label=""];
9->6 [style = bold, label=""];
4->7 [style = solid, label="res"];
7->9 [style = bold, label=""];
12->13 [style = bold, label=""];
2->14 [style = dashed, label="0"];
5->0 [style = bold, label=""];
5->10 [style = dashed, label="0"];
10->12 [style = bold, label=""];
4->15 [style = dashed, label="0"];
15->14 [style = solid, label="res"];
2->5 [style = bold, label=""];
}
