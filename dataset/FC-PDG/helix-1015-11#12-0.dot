digraph {
30 [style = filled, label = "System.out.println(\"Verify resource: \" + resource)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "_admin.enablePartition(false,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Thread.sleep(1000)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "_participants(0( = new MockParticipantManager(ZK_ADDR,_clusterName,_participants(0(.getInstanceName())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testDisablePartitionAndStopInstance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "testSleepTransition['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Thread.sleep(1000)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertFalse(strictMatchVerifier.verify(3000))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testDisablePartitionAndStopInstance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "HelixClusterVerifier strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(10000))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Thread.sleep(1000)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(3000))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(FULL_AUTO_RESOURCES)).setDeactivatedNodeAwareness(true).build()@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Thread.sleep(1000)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(resource)).build()@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Thread.sleep(1000)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "HelixClusterVerifier bestPossibleVerifier = new BestPossibleExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "_admin.enablePartition(false,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "System.out.println(\"Un-verify resource: \" + resource)@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "_admin.enablePartition(true,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "_participants(0(.syncStart()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(resource)).setDeactivatedNodeAwareness(true).build()@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(10000))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(3000))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "_participants(0( = new MockParticipantManager(ZK_ADDR,_clusterName,id)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "_admin.enablePartition(true,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "_participants(0(.setTransition(new SleepTransition(99999999))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Thread.sleep(1000)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertFalse(strictMatchVerifier.verify(3000))@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(3000))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "_participants(0(.syncStop()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(10000))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(FULL_AUTO_RESOURCES)).build()@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "_participants(0(.syncStart()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "_participants(0(.syncStop()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Thread.sleep(1000)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "HelixClusterVerifier strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setResources(Sets.newHashSet(RESOURCES)).setZkClient(_gZkClient).build()@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "String id = _participants(0(.getInstanceName()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "HelixClusterVerifier strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setResources(Sets.newHashSet(RESOURCES)).setZkClient(_gZkClient).setDeactivatedNodeAwareness(true).build()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29->15 [style = bold, label=""];
33->35 [style = bold, label=""];
6->26 [style = bold, label=""];
42->43 [style = bold, label=""];
13->24 [style = bold, label=""];
1->40 [style = bold, label=""];
22->16 [style = bold, label=""];
37->10 [style = bold, label=""];
27->28 [style = bold, label=""];
2->25 [style = solid, label="id"];
17->35 [style = dashed, label="0"];
38->12 [style = bold, label=""];
31->18 [style = bold, label=""];
30->32 [style = bold, label=""];
26->8 [style = bold, label=""];
22->32 [style = dashed, label="0"];
19->2 [style = bold, label=""];
25->14 [style = bold, label=""];
16->17 [style = bold, label=""];
34->12 [style = bold, label=""];
12->9 [style = bold, label=""];
17->23 [style = bold, label=""];
32->33 [style = bold, label=""];
7->3 [style = bold, label=""];
11->18 [style = bold, label=""];
24->5 [style = bold, label=""];
9->6 [style = bold, label=""];
20->22 [style = bold, label=""];
21->12 [style = bold, label=""];
9->41 [style = bold, label=""];
28->0 [style = bold, label=""];
35->23 [style = bold, label=""];
0->10 [style = bold, label=""];
4->30 [style = bold, label=""];
11->31 [style = dashed, label="0"];
2->37 [style = dashed, label="0"];
20->30 [style = dashed, label="0"];
14->31 [style = bold, label=""];
15->4 [style = bold, label=""];
4->20 [style = bold, label=""];
18->13 [style = bold, label=""];
33->30 [style = bold, label=""];
5->7 [style = bold, label=""];
36->37 [style = bold, label=""];
16->33 [style = dashed, label="0"];
26->42 [style = dashed, label="0"];
1->19 [style = bold, label=""];
10->1 [style = bold, label=""];
8->27 [style = bold, label=""];
2->25 [style = bold, label=""];
14->11 [style = bold, label=""];
16->20 [style = bold, label=""];
43->39 [style = bold, label=""];
3->29 [style = bold, label=""];
39->36 [style = bold, label=""];
41->42 [style = bold, label=""];
}
