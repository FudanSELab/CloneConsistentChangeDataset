digraph {
8 [style = filled, label = "final Map<TaskId,SortedSet<UUID>> tasksToCaughtUpClients = mkMap(mkEntry(TASK_0_0,mkSortedSet(UUID_1)),mkEntry(TASK_0_1,mkSortedSet(UUID_3)),mkEntry(TASK_0_2,mkSortedSet(UUID_2)))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(\"should have assigned movements\",assignActiveTaskMovements(tasksToCaughtUpClients,clientStates,new TreeMap<>(),new AtomicInteger(maxWarmupReplicas)),is(2))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "shouldNotCountPreviousStandbyTasksTowardsMaxWarmupReplicas['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "shouldOnlyGetUpToMaxWarmupReplicasAndReturnTrue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(\"should have assigned movements\",assignTaskMovements(tasksToCaughtUpClients,clientStates,maxWarmupReplicas),is(true))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "client1.assignStandby(TASK_0_0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final ClientState client2 = getClientStateWithActiveAssignment(singletonList(TASK_0_0))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "shouldOnlyGetUpToMaxWarmupReplicasAndReturnTrue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "final Map<UUID,ClientState> clientStates = getClientStatesMap(client1,client2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final ClientState client1 = getClientStateWithActiveAssignment(singletonList(TASK_0_0))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(client2,hasProperty(\"standbyTasks\",null,mkSet(TASK_0_0)))@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(client2,hasProperty(\"activeTasks\",null,mkSet(TASK_0_2)))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final int maxWarmupReplicas = 0@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final ClientState client2 = getClientStateWithActiveAssignment(singletonList(TASK_0_1))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Map<UUID,ClientState> clientStates = getClientStatesMap(client1,client2,client3)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(client1,hasProperty(\"activeTasks\",null,mkSet(TASK_0_0)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final Map<TaskId,SortedSet<UUID>> tasksToCaughtUpClients = mkMap(mkEntry(TASK_0_0,mkSortedSet(UUID_1)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(client3,hasProperty(\"standbyTasks\",null,mkSet()))@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final ClientState client3 = getClientStateWithActiveAssignment(singletonList(TASK_0_2))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final int maxWarmupReplicas = 1@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(client1,hasProperty(\"standbyTasks\",null,mkSet()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final ClientState client1 = getClientStateWithActiveAssignment(emptyList())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(client3,hasProperty(\"activeTasks\",null,mkSet(TASK_0_1)))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(client2,hasProperty(\"standbyTasks\",null,mkSet(TASK_0_1)))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(client2,hasProperty(\"activeTasks\",null,mkSet()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->10 [style = bold, label=""];
6->14 [style = solid, label="maxWarmupReplicas"];
16->18 [style = bold, label=""];
12->7 [style = solid, label="client1"];
0->3 [style = solid, label="client3"];
5->14 [style = dashed, label="0"];
7->18 [style = dashed, label="0"];
5->9 [style = bold, label=""];
21->19 [style = bold, label=""];
7->14 [style = solid, label="clientStates"];
16->18 [style = solid, label="client2"];
4->17 [style = dashed, label="0"];
12->9 [style = solid, label="client1"];
12->13 [style = solid, label="client1"];
9->4 [style = bold, label=""];
12->11 [style = bold, label=""];
0->16 [style = dashed, label="0"];
6->5 [style = solid, label="maxWarmupReplicas"];
24->5 [style = solid, label="maxWarmupReplicas"];
8->14 [style = bold, label=""];
10->3 [style = bold, label=""];
9->17 [style = bold, label=""];
15->6 [style = bold, label=""];
4->2 [style = bold, label=""];
11->4 [style = solid, label="client2"];
7->8 [style = bold, label=""];
11->7 [style = solid, label="client2"];
21->18 [style = solid, label="client1"];
22->5 [style = bold, label=""];
17->23 [style = bold, label=""];
12->21 [style = dashed, label="0"];
19->16 [style = bold, label=""];
2->13 [style = bold, label=""];
0->7 [style = bold, label=""];
16->13 [style = solid, label="client2"];
8->22 [style = dashed, label="0"];
18->5 [style = solid, label="clientStates"];
11->0 [style = bold, label=""];
1->6 [style = bold, label=""];
18->22 [style = bold, label=""];
16->17 [style = solid, label="client2"];
0->2 [style = solid, label="client3"];
8->5 [style = bold, label=""];
24->21 [style = bold, label=""];
11->10 [style = solid, label="client2"];
23->13 [style = bold, label=""];
21->9 [style = solid, label="client1"];
6->24 [style = dashed, label="0"];
8->5 [style = solid, label="tasksToCaughtUpClients"];
14->9 [style = bold, label=""];
7->5 [style = solid, label="clientStates"];
8->14 [style = solid, label="tasksToCaughtUpClients"];
20->24 [style = bold, label=""];
0->7 [style = solid, label="client3"];
21->23 [style = solid, label="client1"];
22->5 [style = solid, label="tasksToCaughtUpClients"];
6->12 [style = bold, label=""];
}
