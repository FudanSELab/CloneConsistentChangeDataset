digraph {
2 [style = filled, label = "i++@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int appends = 1024 / msgSize@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(1024,10 * 1024,10L,100L,false,metrics,time,metricTags)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),entry.record().key())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testFull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i < appends@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "time.sleep(10)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testLinger['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testFull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "List<RecordBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),entry.record().value())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(1024,10 * 1024,lingerMs,100L,false,metrics,time,metricTags)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Iterator<LogEntry> iter = batch.records.iterator()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(1,batches.size())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@17@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int i = 0@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "batch.records.flip()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "RecordBatch batch = batches.get(0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "LogEntry entry = iter.next()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Iterator<LogEntry> iter = batch.records.iterator()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i++@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "batch.records.rewind()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\"No partitions should be ready\",0,accum.ready(cluster,time.milliseconds()).readyNodes.size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),entry.record().key())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i < appends@@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "accum.append(tp1,key,value,CompressionType.NONE,null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(\"No partitions should be ready.\",0,accum.ready(cluster,now).readyNodes.size())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "long lingerMs = 10L@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "long now = time.milliseconds()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int i = 0@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "LogEntry entry = iter.next()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),entry.record().value())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "accum.append(tp1,key,value,CompressionType.NONE,null)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->22 [style = bold, label=""];
20->11 [style = solid, label="i"];
19->18 [style = bold, label=""];
0->10 [style = solid, label="appends"];
15->28 [style = dashed, label="0"];
17->1 [style = bold, label=""];
5->9 [style = bold, label=""];
25->34 [style = bold, label=""];
29->30 [style = bold, label=""];
11->4 [style = solid, label="i"];
0->6 [style = bold, label=""];
10->19 [style = bold, label=""];
11->4 [style = bold, label=""];
4->21 [style = bold, label=""];
4->11 [style = dotted, label="true"];
1->20 [style = bold, label=""];
4->8 [style = dotted, label="true"];
9->17 [style = bold, label=""];
34->31 [style = bold, label=""];
22->32 [style = bold, label=""];
3->15 [style = bold, label=""];
2->10 [style = solid, label="i"];
4->14 [style = dotted, label="true"];
2->10 [style = bold, label=""];
27->22 [style = bold, label=""];
32->26 [style = bold, label=""];
7->3 [style = bold, label=""];
20->4 [style = bold, label=""];
9->23 [style = bold, label=""];
4->21 [style = dotted, label="true"];
6->2 [style = solid, label="i"];
30->28 [style = bold, label=""];
31->27 [style = bold, label=""];
33->18 [style = bold, label=""];
10->2 [style = dotted, label="true"];
10->13 [style = dotted, label="true"];
15->0 [style = bold, label=""];
6->10 [style = bold, label=""];
6->10 [style = solid, label="i"];
13->2 [style = bold, label=""];
16->5 [style = bold, label=""];
4->12 [style = bold, label=""];
23->1 [style = bold, label=""];
28->25 [style = bold, label=""];
0->4 [style = solid, label="appends"];
30->28 [style = solid, label="lingerMs"];
10->22 [style = dotted, label="true"];
14->8 [style = bold, label=""];
20->4 [style = solid, label="i"];
17->23 [style = dashed, label="0"];
8->11 [style = bold, label=""];
26->33 [style = bold, label=""];
13->34 [style = dashed, label="0"];
24->3 [style = bold, label=""];
22->13 [style = bold, label=""];
21->14 [style = bold, label=""];
18->16 [style = bold, label=""];
}
