digraph {
7 [style = filled, label = "mostAvailableUsage.put(\"node_0\",new DiskUsage(\"node_0\",\"node_0\",\"_na_\",100,randomIntBetween(20,100)))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testCanAllocateUsesMaxAvailableSpace['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "final long shardSize = randomIntBetween(110,1000)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "RoutingAllocation allocation = new RoutingAllocation(new AllocationDeciders(Settings.EMPTY,Collections.singleton(decider)),clusterState.getRoutingNodes(),clusterState,clusterInfo,System.nanoTime())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ShardRouting test_0 = ShardRouting.newUnassigned(new ShardId(index,0),true,EmptyStoreRecoverySource.INSTANCE,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,\"foo\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Decision decision = decider.canAllocate(test_0,new RoutingNode(\"node_0\",node_0),allocation)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ImmutableOpenMap.Builder<String,DiskUsage> leastAvailableUsages = ImmutableOpenMap.builder()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(node_0).add(node_1)).build()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(decision.getExplanation(),containsString(\"allocating the shard to this node will bring the node above the high watermark cluster setting \" + \"(cluster.routing.allocation.disk.watermark.high=90%( \" + \"and cause it to have less than the minimum required (0b( of free space \" + \"(free: (\" + freeBytes + \"b(, estimated shard size: (\" + shardSize + \"b()\"))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "allocation.debugDecision(true)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(((Decision.Single)decision).getExplanation(),containsString(\"enough disk for shard on node\"))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ImmutableOpenMap.Builder<String,DiskUsage> mostAvailableUsage = ImmutableOpenMap.builder()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "DiscoveryNode node_1 = new DiscoveryNode(\"node_1\",buildNewFakeTransportAddress(),Collections.emptyMap(),new HashSet<>(Arrays.asList(DiscoveryNode.Role.values())),Version.CURRENT)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "mostAvailableUsage.put(\"node_0\",new DiskUsage(\"node_0\",\"node_0\",\"_na_\",100,freeBytes))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "mostAvailableUsage.put(\"node_1\",new DiskUsage(\"node_1\",\"node_1\",\"_na_\",100,randomIntBetween(0,10)))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "shardSizes.put(\"(test((0((p(\",shardSize)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "shardSizes.put(\"(test((0((p(\",10L)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "DiscoveryNode node_0 = new DiscoveryNode(\"node_0\",buildNewFakeTransportAddress(),Collections.emptyMap(),new HashSet<>(Arrays.asList(DiscoveryNode.Role.values())),Version.CURRENT)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ClusterInfo clusterInfo = new ClusterInfo(leastAvailableUsages.build(),mostAvailableUsage.build(),shardSizes.build(),ImmutableOpenMap.of())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(((Decision.Single)decision).getExplanation(),containsString(\"the node is above the high watermark cluster \" + \"setting (cluster.routing.allocation.disk.watermark.high=90%(, using more disk space than the maximum allowed (90.0%(\"))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "RoutingAllocation allocation = new RoutingAllocation(new AllocationDeciders(Settings.EMPTY,Collections.singleton(decider)),clusterState.getRoutingNodes(),clusterState,clusterInfo,System.nanoTime())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ClusterSettings nss = new ClusterSettings(Settings.EMPTY,ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final Index index = metaData.index(\"test\").getIndex()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ImmutableOpenMap.Builder<String,Long> shardSizes = ImmutableOpenMap.builder()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final int freeBytes = randomIntBetween(20,100)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "DiskThresholdDecider decider = new DiskThresholdDecider(Settings.EMPTY,nss)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "leastAvailableUsages.put(\"node_0\",new DiskUsage(\"node_0\",\"node_0\",\"_na_\",100,0))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(Decision.Type.NO,decision.type())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(mostAvailableUsage.toString(),Decision.Type.NO,decision.type())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testCannotAllocateDueToLackOfDiskResources['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "leastAvailableUsages.put(\"node_1\",new DiskUsage(\"node_1\",\"node_1\",\"_na_\",100,0))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "MetaData metaData = MetaData.builder().put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(((Decision.Single)decision).getExplanation(),containsString(\"the node is above the high watermark cluster setting (cluster.routing.allocation.disk.watermark.high=90%(, using more \" + \"disk space than the maximum allowed (90.0%(\"))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "decision = decider.canAllocate(test_0,new RoutingNode(\"node_1\",node_1),allocation)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final ClusterInfo clusterInfo = new ClusterInfo(leastAvailableUsages.build(),mostAvailableUsage.build(),shardSizes.build(),ImmutableOpenMap.of())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testCanAllocateUsesMaxAvailableSpace['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17->10 [style = bold, label=""];
19->21 [style = solid, label="allocation"];
1->37 [style = dashed, label="0"];
1->4 [style = bold, label=""];
34->35 [style = solid, label="shardSize"];
7->1 [style = bold, label=""];
0->27 [style = bold, label=""];
9->31 [style = bold, label=""];
17->25 [style = solid, label="decider"];
8->3 [style = bold, label=""];
14->22 [style = bold, label=""];
0->21 [style = solid, label="test_0"];
27->9 [style = solid, label="node_0"];
36->35 [style = solid, label="freeBytes"];
2->18 [style = bold, label=""];
30->25 [style = bold, label=""];
8->34 [style = dashed, label="0"];
19->6 [style = solid, label="allocation"];
36->37 [style = solid, label="freeBytes"];
26->35 [style = dashed, label="0"];
26->6 [style = bold, label=""];
32->30 [style = bold, label=""];
23->29 [style = dashed, label="0"];
27->21 [style = solid, label="node_0"];
0->6 [style = solid, label="test_0"];
25->9 [style = solid, label="allocation"];
27->15 [style = bold, label=""];
34->32 [style = solid, label="shardSize"];
11->2 [style = bold, label=""];
19->25 [style = bold, label=""];
24->5 [style = bold, label=""];
0->9 [style = solid, label="test_0"];
37->4 [style = bold, label=""];
9->26 [style = bold, label=""];
24->16 [style = bold, label=""];
18->20 [style = bold, label=""];
22->17 [style = solid, label="nss"];
18->19 [style = solid, label="clusterState"];
30->25 [style = solid, label="clusterInfo"];
21->9 [style = bold, label=""];
12->29 [style = bold, label=""];
9->31 [style = dashed, label="0"];
15->11 [style = bold, label=""];
31->35 [style = bold, label=""];
10->13 [style = bold, label=""];
13->0 [style = solid, label="index"];
3->19 [style = bold, label=""];
33->22 [style = bold, label=""];
17->19 [style = solid, label="decider"];
16->5 [style = bold, label=""];
15->6 [style = solid, label="node_1"];
22->17 [style = bold, label=""];
5->7 [style = bold, label=""];
4->8 [style = bold, label=""];
4->34 [style = bold, label=""];
34->32 [style = bold, label=""];
12->23 [style = bold, label=""];
36->37 [style = bold, label=""];
20->24 [style = bold, label=""];
5->36 [style = bold, label=""];
7->36 [style = dashed, label="0"];
6->12 [style = bold, label=""];
28->22 [style = bold, label=""];
25->21 [style = bold, label=""];
18->25 [style = solid, label="clusterState"];
13->0 [style = bold, label=""];
3->19 [style = solid, label="clusterInfo"];
}
