digraph {
11 [style = filled, label = "Assert.assertEquals(expression,expected,parsedRoundTrip.eval(InputBindings.withMap(ImmutableMap.of())).value())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final Expr parsedNoFlatten = Parser.parse(expression,ExprMacroTable.nil(),false)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "String expression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "validateConstantExpression['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String expression@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(expression,expected,parsed.eval(InputBindings.withMap(ImmutableMap.of())).value())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(expression,expected,parsed.eval(Parser.withMap(ImmutableMap.of())).value())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "Assert.assertArrayEquals(expression,expected,(Object(()roundTrip.eval(Parser.withMap(ImmutableMap.of())).value())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Expr parsedRoundTrip = Parser.parse(parsedNoFlatten.stringify(),ExprMacroTable.nil())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(parsed.stringify(),parsedRoundTrip.stringify())@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Object evaluated = parsed.eval(Parser.withMap(ImmutableMap.of())).value()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Object(( expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertArrayEquals(expression,expected,(Object(()evaluated)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Expr roundTrip = Parser.parse(parsedNoFlatten.stringify(),ExprMacroTable.nil())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String expression@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "validateConstantExpression['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(parsed.stringify(),roundTrip.stringify())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final Expr parsedNoFlatten = Parser.parse(expression,ExprMacroTable.nil(),false)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "validateConstantExpression['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(expected.getClass(),evaluated.getClass())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Expr parsed = Parser.parse(expression,ExprMacroTable.nil())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Object expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
13->18 [style = solid, label="expected"];
16->18 [style = bold, label=""];
7->1 [style = bold, label=""];
21->20 [style = dotted, label="true"];
20->6 [style = solid, label="expression"];
4->1 [style = solid, label="expression"];
8->3 [style = bold, label=""];
18->15 [style = bold, label=""];
0->6 [style = solid, label="expression"];
3->11 [style = bold, label=""];
4->2 [style = solid, label="expected"];
6->11 [style = dashed, label="0"];
3->6 [style = bold, label=""];
20->18 [style = solid, label="expression"];
14->17 [style = bold, label=""];
9->11 [style = solid, label="expected"];
4->8 [style = solid, label="expression"];
0->2 [style = solid, label="expression"];
20->17 [style = solid, label="expression"];
7->0 [style = dotted, label="true"];
19->6 [style = bold, label=""];
10->9 [style = dotted, label="true"];
17->19 [style = bold, label=""];
4->11 [style = solid, label="expression"];
6->18 [style = dashed, label="0"];
2->12 [style = dashed, label="0"];
6->5 [style = bold, label=""];
11->5 [style = bold, label=""];
4->6 [style = solid, label="expected"];
2->14 [style = dashed, label="0"];
0->1 [style = solid, label="expression"];
6->16 [style = bold, label=""];
12->8 [style = bold, label=""];
4->20 [style = dashed, label="0"];
0->8 [style = solid, label="expression"];
21->1 [style = bold, label=""];
7->4 [style = dotted, label="true"];
13->17 [style = solid, label="expected"];
1->12 [style = bold, label=""];
20->1 [style = solid, label="expression"];
9->12 [style = solid, label="expected"];
1->14 [style = bold, label=""];
1->2 [style = bold, label=""];
21->13 [style = dotted, label="true"];
10->4 [style = dotted, label="true"];
10->1 [style = bold, label=""];
14->17 [style = solid, label="evaluated"];
4->12 [style = solid, label="expression"];
5->15 [style = dashed, label="0"];
3->16 [style = dashed, label="0"];
2->8 [style = bold, label=""];
}
