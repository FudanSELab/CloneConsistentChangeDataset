digraph {
1 [style = filled, label = "final Map<String,String> expectedLabels = getCommonLabels()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(KubernetesConfigOptions.ServiceExposedType.LoadBalancer.name(),restService.getSpec().getType())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(expectedServicePorts,internalService.getSpec().getPorts())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(expectedLabels,internalService.getMetadata().getLabels())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final Service internalService = (Service)resources.get(0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testBuildAccompanyingKubernetesResources['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Service restService = (Service)resources.get(0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"None\",internalService.getSpec().getClusterIP())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(expectedLabels,internalService.getSpec().getSelector())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expectedLabels.putAll(userLabels)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expectedLabels.putAll(userLabels)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "List<ServicePort> expectedServicePorts = Arrays.asList(new ServicePortBuilder().withName(Constants.JOB_MANAGER_RPC_PORT_NAME).withPort(RPC_PORT).build(),new ServicePortBuilder().withName(Constants.BLOB_SERVER_PORT_NAME).withPort(BLOB_SERVER_PORT).build())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(resultAnnotations,is(equalTo(customizedAnnotations)))@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(KubernetesUtils.getInternalServiceName(CLUSTER_ID),internalService.getMetadata().getName())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(Constants.API_VERSION,restService.getApiVersion())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testBuildAccompanyingKubernetesResources['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(ExternalServiceDecorator.getExternalServiceName(CLUSTER_ID),restService.getMetadata().getName())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(KubernetesUtils.getInternalServiceName(CLUSTER_ID) + \".\" + NAMESPACE,this.flinkConfig.getString(JobManagerOptions.ADDRESS))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final List<HasMetadata> resources = this.externalServiceDecorator.buildAccompanyingKubernetesResources()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertNull(internalService.getSpec().getType())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expectedLabels.put(Constants.LABEL_COMPONENT_KEY,Constants.LABEL_COMPONENT_JOB_MANAGER)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expectedLabels.put(Constants.LABEL_COMPONENT_KEY,Constants.LABEL_COMPONENT_JOB_MANAGER)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(Constants.API_VERSION,internalService.getApiVersion())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(expectedServicePorts,restService.getSpec().getPorts())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final List<ServicePort> expectedServicePorts = Collections.singletonList(new ServicePortBuilder().withName(Constants.REST_PORT_NAME).withPort(REST_PORT).withNewTargetPort(Integer.valueOf(REST_BIND_PORT)).build())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testBuildAccompanyingKubernetesResources['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final Map<String,String> expectedLabels = getCommonLabels()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final List<HasMetadata> resources = this.internalServiceDecorator.buildAccompanyingKubernetesResources()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(1,resources.size())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(KubernetesUtils.getRestServiceName(CLUSTER_ID),restService.getMetadata().getName())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2->14 [style = solid, label="expectedServicePorts"];
0->3 [style = bold, label=""];
11->28 [style = bold, label=""];
23->25 [style = bold, label=""];
11->28 [style = solid, label="expectedLabels"];
26->18 [style = bold, label=""];
1->11 [style = solid, label="expectedLabels"];
12->0 [style = bold, label=""];
9->16 [style = bold, label=""];
14->26 [style = dashed, label="0"];
1->11 [style = bold, label=""];
9->6 [style = bold, label=""];
11->28 [style = dashed, label="0"];
6->1 [style = bold, label=""];
6->16 [style = dashed, label="0"];
17->0 [style = bold, label=""];
3->19 [style = bold, label=""];
16->1 [style = bold, label=""];
21->22 [style = bold, label=""];
11->10 [style = bold, label=""];
13->7 [style = bold, label=""];
28->23 [style = bold, label=""];
3->8 [style = bold, label=""];
19->27 [style = bold, label=""];
5->13 [style = bold, label=""];
2->14 [style = bold, label=""];
25->26 [style = bold, label=""];
15->4 [style = solid, label="resultAnnotations"];
15->4 [style = bold, label=""];
8->9 [style = bold, label=""];
1->7 [style = solid, label="expectedLabels"];
11->29 [style = solid, label="expectedLabels"];
0->24 [style = dashed, label="0"];
7->15 [style = bold, label=""];
10->2 [style = bold, label=""];
7->29 [style = dashed, label="0"];
18->7 [style = bold, label=""];
20->24 [style = bold, label=""];
10->23 [style = dashed, label="0"];
27->21 [style = bold, label=""];
26->18 [style = solid, label="expectedServicePorts"];
24->3 [style = bold, label=""];
22->11 [style = bold, label=""];
15->29 [style = bold, label=""];
14->5 [style = bold, label=""];
}
