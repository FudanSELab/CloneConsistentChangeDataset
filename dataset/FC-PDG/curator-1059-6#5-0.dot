digraph {
20 [style = filled, label = "testRetry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "client.getCuratorListenable().addListener(new CuratorListener(){@Override public void eventReceived(CuratorFramework client,CuratorEvent event){if (event.getType() == CuratorEventType.EXISTS) {Stat stat = client.checkExists().forPath(\"/yo/yo/yo\")Assert.assertNull(stat)client.create().inBackground(event.getContext()).forPath(\"/what\")}if (event.getType() == CuratorEventType.CREATE) {((CountDownLatch)event.getContext()).countDown()}}})@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "server.stop()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.fail(\"Error\",e)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final int serverPort = server.getPort()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testNestedCalls['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final Semaphore semaphore = new Semaphore(0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES,10,TimeUnit.SECONDS))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "testRetry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final AtomicInteger retries = new AtomicInteger(0)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES,10,TimeUnit.SECONDS))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES,timing.forWaiting().seconds(),TimeUnit.SECONDS))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "server.stop()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(new RetryPolicy(){@Override public boolean allowRetry(int retryCount,long elapsedTimeMs,RetrySleeper sleeper){semaphore.release()if (retries.incrementAndGet() == MAX_RETRIES) {try {server = new TestingServer(serverPort)}catch (Exception e) }return true}})@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "client.checkExists().inBackground(latch).forPath(\"/hey\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "retries.set(0)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "client.checkExists().forPath(\"/hey\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Throwable e@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertTrue(latch.await(10,TimeUnit.SECONDS))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES,timing.forWaiting().seconds(),TimeUnit.SECONDS))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(10))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "client.start()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),1000,1000,new RetryOneTime(10))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "semaphore.drainPermits()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final int MAX_RETRIES = 3@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "client.checkExists().inBackground().forPath(\"/hey\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
16->3 [style = bold, label=""];
28->29 [style = bold, label=""];
7->10 [style = solid, label="client"];
19->18 [style = bold, label=""];
7->21 [style = dashed, label="0"];
12->1 [style = solid, label="MAX_RETRIES"];
13->24 [style = bold, label=""];
26->29 [style = solid, label="client"];
27->28 [style = bold, label=""];
12->17 [style = bold, label=""];
17->15 [style = solid, label="serverPort"];
1->19 [style = dashed, label="0"];
8->14 [style = bold, label=""];
14->10 [style = bold, label=""];
9->27 [style = dashed, label="0"];
1->18 [style = bold, label=""];
15->6 [style = bold, label=""];
3->22 [style = dashed, label="0"];
12->15 [style = solid, label="MAX_RETRIES"];
16->22 [style = bold, label=""];
1->28 [style = dashed, label="0"];
11->15 [style = bold, label=""];
2->12 [style = bold, label=""];
17->7 [style = bold, label=""];
5->16 [style = bold, label=""];
3->10 [style = bold, label=""];
12->19 [style = solid, label="MAX_RETRIES"];
23->13 [style = bold, label=""];
26->23 [style = bold, label=""];
8->14 [style = dotted, label="true"];
25->26 [style = bold, label=""];
20->12 [style = bold, label=""];
22->10 [style = bold, label=""];
9->19 [style = bold, label=""];
21->10 [style = solid, label="client"];
12->3 [style = solid, label="MAX_RETRIES"];
6->9 [style = bold, label=""];
9->1 [style = bold, label=""];
4->11 [style = bold, label=""];
12->22 [style = solid, label="MAX_RETRIES"];
17->21 [style = bold, label=""];
24->27 [style = bold, label=""];
18->0 [style = bold, label=""];
0->5 [style = bold, label=""];
21->13 [style = bold, label=""];
13->4 [style = bold, label=""];
}
