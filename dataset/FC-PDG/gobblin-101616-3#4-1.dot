digraph {
27 [style = filled, label = "byte(( decryptedContent = new byte((((@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "byte(( expectedContents = new byte((((@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY,\"insecure_shift\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "byte(( encryptedContent = IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString()))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state,1,0)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "CopySource.serializeCopyEntity(state,cf)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "FileAwareInputStream fileAwareInputStream = new FileAwareInputStream(cf,StreamUtils.convertStream(new ByteArrayInputStream(streamString)))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testWriteWithEncryption['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "state.setProp(ConfigurationKeys.WRITER_FILE_PATH,RandomStringUtils.randomAlphabetic(5))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString())),expectedContents)@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testWriteWithEncryption['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "FileAwareInputStream fileAwareInputStream = FileAwareInputStream.builder().file(cf).inputStream(StreamUtils.convertStream(new ByteArrayInputStream(streamString))).build()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "state.setProp(ConfigurationKeys.WRITER_STAGING_DIR,new Path(testTempPath,\"staging\").toString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "OwnerAndPermission ownerAndPermission = new OwnerAndPermission(status.getOwner(),status.getGroup(),new FsPermission(FsAction.ALL,FsAction.ALL,FsAction.ALL))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "byte(( streamString = \"testEncryptedContents\".getBytes(\"UTF-8\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testWriteWithGPGSymmetricEncryption['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR,new Path(testTempPath,\"output\").toString())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "CopySource.serializeCopyableDataset(state,metadata)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i++@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertNotEquals(encryptedContent,streamString)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "CopySource.serializeCopyEntity(state,cf)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertTrue(writtenFilePath.getName().endsWith(\"gpg\"),\"Expected encryption name to be appended to destination\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "WorkUnitState state = TestUtils.createTestWorkUnitState()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = 0@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expectedContents(i( = (byte)((streamString(i( + 1) % 256)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "dataWriter.commit()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "dataWriter.write(fileAwareInputStream)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "FileStatus status = fs.getFileStatus(testTempPath)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(decryptedContent,streamString)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),cf.getDatasetAndPartition(metadata).identifier()),cf.getDestination())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "IOUtils.readFully(GPGFileDecryptor.decryptFile(new FileInputStream(writtenFilePath.toString()),\"testPassword\"),decryptedContent)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY,\"gpg\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\"testPassword\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "i < streamString.length@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
14->3 [style = bold, label=""];
15->14 [style = solid, label="i"];
23->16 [style = bold, label=""];
12->8 [style = solid, label="streamString"];
8->23 [style = bold, label=""];
15->14 [style = bold, label=""];
21->0 [style = bold, label=""];
17->1 [style = bold, label=""];
5->3 [style = solid, label="i"];
15->1 [style = solid, label="expectedContents"];
22->4 [style = solid, label="metadata"];
18->8 [style = solid, label="cf"];
0->2 [style = bold, label=""];
11->26 [style = dashed, label="0"];
4->26 [style = bold, label=""];
12->20 [style = bold, label=""];
27->31 [style = bold, label=""];
32->27 [style = bold, label=""];
26->8 [style = bold, label=""];
3->15 [style = bold, label=""];
30->34 [style = bold, label=""];
10->21 [style = bold, label=""];
16->17 [style = bold, label=""];
18->24 [style = solid, label="cf"];
33->12 [style = bold, label=""];
8->23 [style = solid, label="fileAwareInputStream"];
27->31 [style = solid, label="decryptedContent"];
17->29 [style = dashed, label="0"];
1->32 [style = dashed, label="0"];
14->3 [style = solid, label="i"];
12->15 [style = solid, label="streamString"];
27->34 [style = solid, label="decryptedContent"];
19->1 [style = solid, label="expectedContents"];
12->34 [style = solid, label="streamString"];
3->14 [style = dotted, label="true"];
18->11 [style = solid, label="cf"];
12->11 [style = solid, label="streamString"];
35->28 [style = bold, label=""];
19->5 [style = bold, label=""];
13->24 [style = solid, label="state"];
26->8 [style = solid, label="fileAwareInputStream"];
22->24 [style = solid, label="metadata"];
32->30 [style = solid, label="encryptedContent"];
3->20 [style = bold, label=""];
18->22 [style = bold, label=""];
24->4 [style = bold, label=""];
13->2 [style = solid, label="state"];
13->4 [style = solid, label="state"];
25->12 [style = bold, label=""];
5->15 [style = solid, label="i"];
12->30 [style = solid, label="streamString"];
29->32 [style = bold, label=""];
6->10 [style = bold, label=""];
3->15 [style = dotted, label="true"];
18->2 [style = solid, label="cf"];
31->30 [style = bold, label=""];
7->18 [style = bold, label=""];
28->24 [style = bold, label=""];
11->8 [style = solid, label="fileAwareInputStream"];
11->8 [style = bold, label=""];
9->12 [style = bold, label=""];
14->15 [style = solid, label="i"];
0->35 [style = dashed, label="0"];
13->6 [style = bold, label=""];
20->7 [style = bold, label=""];
12->19 [style = bold, label=""];
2->24 [style = bold, label=""];
4->11 [style = bold, label=""];
21->35 [style = bold, label=""];
17->29 [style = bold, label=""];
7->18 [style = solid, label="ownerAndPermission"];
22->13 [style = bold, label=""];
13->11 [style = solid, label="state"];
}
