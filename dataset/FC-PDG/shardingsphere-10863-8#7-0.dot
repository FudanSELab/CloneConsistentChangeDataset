digraph {
12 [style = filled, label = "assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "QueryResponseHeader queryResponseHeader = mock()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertFalse(executor.next())@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "verify(queryResponseHeader).getQueryHeaders()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertThat(actual.size(),is(1))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "verify(portal).execute()@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertExecuteEmptyBindPacket['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "setMockFieldIntoExecutor(executor)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.UPDATE))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.QUERY))@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(connectionContext.getDescribeExecutor()).thenReturn(Optional.of(describeExecutor))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Collection<DatabasePacket<?>> actual = executor.execute()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "when(databaseCommunicationEngine.execute()).thenReturn(queryResponseHeader)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(connectionContext,bindPacket,backendConnection)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
9->5 [style = bold, label=""];
16->14 [style = bold, label=""];
9->1 [style = solid, label="executor"];
0->10 [style = bold, label=""];
2->8 [style = solid, label="queryResponseHeader"];
6->0 [style = bold, label=""];
13->15 [style = bold, label=""];
14->13 [style = bold, label=""];
9->1 [style = bold, label=""];
0->5 [style = dashed, label="0"];
3->7 [style = bold, label=""];
12->9 [style = bold, label=""];
4->6 [style = bold, label=""];
7->2 [style = bold, label=""];
15->9 [style = bold, label=""];
6->11 [style = bold, label=""];
5->4 [style = bold, label=""];
2->8 [style = bold, label=""];
8->9 [style = bold, label=""];
}
