digraph {
5 [style = filled, label = "setupGetExistingSensorTest(metrics,THREAD_ID + \".task.\" + TASK_ID + SENSOR_PREFIX_DELIMITER + \"cache\" + SENSOR_PREFIX_DELIMITER + processorCacheName)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Sensor actualSensor = streamsMetrics.cacheLevelSensor(THREAD_ID1,TASK_ID1,processorCacheName,SENSOR_NAME_1,recordingLevel)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final String processorCacheName = \"processorNodeName\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Metrics metrics = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "verify(metrics)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(actualSensor,is(equalToObject(sensor)))@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(actualSensor,is(equalToObject(sensor)))@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "setupGetExistingSensorTest(metrics)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "shouldGetExistingCacheLevelSensor['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final RecordingLevel recordingLevel = RecordingLevel.INFO@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "shouldGetExistingCacheLevelSensor['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "setupGetExistingSensorTest(metrics,THREAD_ID + \".task.\" + TASK_ID)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics,CLIENT_ID,VERSION,time)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "shouldGetExistingTaskLevelSensor['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final Sensor actualSensor = streamsMetrics.cacheLevelSensor(THREAD_ID,TASK_ID,processorCacheName,sensorName1,recordingLevel)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "final Sensor actualSensor = streamsMetrics.taskLevelSensor(THREAD_ID,TASK_ID,sensorName1,recordingLevel)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->9 [style = bold, label=""];
1->5 [style = solid, label="processorCacheName"];
8->0 [style = solid, label="recordingLevel"];
0->12 [style = bold, label=""];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
7->13 [style = solid, label="metrics"];
3->6 [style = bold, label=""];
7->5 [style = solid, label="metrics"];
7->8 [style = bold, label=""];
7->3 [style = solid, label="metrics"];
10->7 [style = bold, label=""];
1->9 [style = solid, label="processorCacheName"];
7->0 [style = solid, label="metrics"];
4->7 [style = bold, label=""];
1->11 [style = bold, label=""];
14->7 [style = bold, label=""];
7->12 [style = solid, label="metrics"];
8->1 [style = bold, label=""];
9->6 [style = solid, label="actualSensor"];
11->0 [style = bold, label=""];
2->6 [style = solid, label="actualSensor"];
2->0 [style = dashed, label="0"];
5->0 [style = bold, label=""];
2->9 [style = dashed, label="0"];
15->0 [style = bold, label=""];
7->15 [style = solid, label="metrics"];
9->3 [style = bold, label=""];
12->3 [style = bold, label=""];
13->15 [style = bold, label=""];
1->2 [style = solid, label="processorCacheName"];
7->11 [style = solid, label="metrics"];
8->9 [style = solid, label="recordingLevel"];
0->3 [style = solid, label="actualSensor"];
8->13 [style = bold, label=""];
8->2 [style = solid, label="recordingLevel"];
}
