digraph {
9 [style = filled, label = "MockAbstractIoFuture<Boolean> future = spy(new MockAbstractIoFuture<Boolean>())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertFalse(future.isCancelled())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "future.register(listener)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertFalse(future.isCancelled())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final MockAbstractIoFuture<Boolean> future = spy(new MockAbstractIoFuture<Boolean>())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "ExecutionException ee@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "TimeoutException e@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(future.isDone())@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testSetListeners['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "{}@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "fail(\"This future was not interrupted\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(future.get(1,TimeUnit.DAYS))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(future.isDone())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final MockAbstractIoFuture<Boolean> future = spy(new MockAbstractIoFuture<Boolean>())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertFalse(future.isDone())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertFalse(future.isCancelled())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "IoFutureListener<Boolean> listener = mock()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "future.setResult(true)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testTimedExceptionForTimedGet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertFalse(future.isDone())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final IoFutureListener<Boolean> listener = mock()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "new Thread(new Runnable(){@Override public void run(){try {Thread.sleep(1000)future.setException(new NullPointerException())}catch (InterruptedException ignored) }}).start()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testSetListeners['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "fail(\"This future was not interrupted\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "verify(listener,never()).exception(Matchers.any())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "InterruptedException e@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "verify(listener).completed(true)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->25 [style = bold, label=""];
23->25 [style = bold, label=""];
14->25 [style = bold, label=""];
7->1 [style = bold, label=""];
25->22 [style = bold, label=""];
4->6 [style = bold, label=""];
19->17 [style = dotted, label="true"];
2->3 [style = bold, label=""];
10->5 [style = solid, label="listener"];
0->2 [style = bold, label=""];
16->26 [style = bold, label=""];
15->20 [style = dotted, label="true"];
1->0 [style = bold, label=""];
19->17 [style = bold, label=""];
9->10 [style = bold, label=""];
20->25 [style = bold, label=""];
13->11 [style = bold, label=""];
24->14 [style = bold, label=""];
10->11 [style = dashed, label="0"];
12->13 [style = bold, label=""];
11->5 [style = bold, label=""];
10->5 [style = bold, label=""];
15->20 [style = bold, label=""];
5->4 [style = bold, label=""];
9->26 [style = dashed, label="0"];
9->13 [style = dashed, label="0"];
8->9 [style = bold, label=""];
21->4 [style = bold, label=""];
18->21 [style = bold, label=""];
6->7 [style = bold, label=""];
4->23 [style = bold, label=""];
11->5 [style = solid, label="listener"];
26->18 [style = bold, label=""];
}
