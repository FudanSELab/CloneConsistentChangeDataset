digraph {
4 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentAssignmentCount(),4)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
101 [style = filled, label = "testAssignDuplicateReplica['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expectedAssignment.put(\"Resource1\",expectedAssignmentSet1)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Map<String,Integer> expectedCapacityMap = new HashMap<>()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "expectedCapacityMap.put(\"item1\",9)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "Iterator<AssignableReplica> iter = assignmentSet.iterator()@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),16.0 / 20.0,0.005)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Set<String> expectedTopStateAssignmentSet1 = new HashSet<>(_partitionNames.subList(0,1))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),16.0 / 20.0,0.005)@@@45@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "replica.equals(removingReplica)@@@39@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertTrue(assignableNode.getDisabledPartitionsMap().equals(_disabledPartitionsMap))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
73 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
59 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@71@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
79 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@70@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "Assert.assertTrue(assignableNode.getMaxCapacity().equals(_capacityDataMap))@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "AssignableReplica replica = iter.next()@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "Assert.assertTrue(assignableNode.getDisabledPartitionsMap().equals(_disabledPartitionsMap))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
85 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),16.0 / 20.0,0.005)@@@68@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "Set<AssignableReplica> assignmentSet = generateReplicas(testCache)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@76@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "expectedCapacityMap.put(\"item3\",30)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "AssignableReplica removingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"MASTER\",1)@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assignableNode.release(removingReplica)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@58@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Map<String,Set<String>> expectedAssignment = new HashMap<>()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentAssignmentsMap().equals(expectedAssignment))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).remove(_partitionNames.get(2))@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
86 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "iter.remove()@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
91 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@79@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
81 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@55@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "expectedCapacityMap.put(\"item1\",4)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentCapacity(),expectedCapacityMap)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "AssignableReplica addingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"SLAVE\",2)@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expectedAssignment.put(\"Resource2\",expectedAssignmentSet2)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Set<String> expectedTopStateAssignmentSet2 = new HashSet<>(_partitionNames.subList(2,3))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
76 [style = filled, label = "assignmentSet.add(addingReplica)@@@64@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
87 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentCapacity(),expectedCapacityMap)@@@74@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@48@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@73@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
72 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentAssignmentsMap().equals(expectedAssignment))@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).remove(_partitionNames.get(2))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).add(_partitionNames.get(2))@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentAssignmentCount(),4)@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "Assert.assertTrue(assignableNode.getMaxCapacity().equals(_capacityDataMap))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
99 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@77@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@69@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
98 [style = filled, label = "expectedCapacityMap.put(\"item2\",8)@@@63@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
92 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@52@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "AssignableNode assignableNode = new AssignableNode(testCache.getClusterConfig(),testCache.getInstanceConfigMap().get(_testInstanceId),_testInstanceId,assignmentSet)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@56@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Set<String> expectedAssignmentSet1 = new HashSet<>(_partitionNames.subList(0,2))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),11.0 / 20.0,0.005)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expectedCapacityMap.put(\"item2\",18)@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expectedCapacityMap.put(\"item2\",18)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "assignableNode.assign(duplicateReplica)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
96 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "AssignableReplica removingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"MASTER\",1)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),4)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
83 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@72@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
94 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@75@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
64 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@54@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assignableNode.assign(addingReplica)@@@42@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@57@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
78 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Set<String> expectedAssignmentSet2 = new HashSet<>(_partitionNames.subList(2,4))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
90 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@59@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "expectedCapacityMap.put(\"item2\",8)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),4)@@@67@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
69 [style = filled, label = "assignableNode.assign(addingReplica)@@@65@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "expectedCapacityMap.put(\"item1\",9)@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@35@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@66@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "expectedCapacityMap.put(\"item1\",4)@@@62@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@49@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assignableNode.release(removingReplica)@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@78@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@80@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
77 [style = filled, label = "iter.hasNext()@@@37@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "testNormalUsage['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "AssignableReplica addingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"SLAVE\",2)@@@38@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "ResourceControllerDataProvider testCache = setupClusterDataCache()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "AssignableReplica duplicateReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(0)),_partitionNames.get(0),\"SLAVE\",2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testNormalUsage['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@47@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentCapacity(),expectedCapacityMap)@@@53@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentCapacity().equals(expectedCapacityMap))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
71 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
97 [style = filled, label = "expectedTopStateAssignmentSet2.remove(_partitionNames.get(2))@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),3)@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentAssignmentsMap().equals(expectedAssignment))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
77->97 [style = bold, label=""];
32->22 [style = bold, label=""];
77->66 [style = dotted, label="true"];
3->24 [style = solid, label="expectedAssignmentSet2"];
11->14 [style = solid, label="expectedCapacityMap"];
8->69 [style = solid, label="addingReplica"];
15->21 [style = bold, label=""];
10->24 [style = bold, label=""];
87->94 [style = bold, label=""];
62->70 [style = solid, label="expectedTopStateAssignmentSet2"];
20->0 [style = bold, label=""];
56->85 [style = bold, label=""];
28->9 [style = bold, label=""];
88->77 [style = bold, label=""];
17->56 [style = dashed, label="0"];
73->75 [style = bold, label=""];
62->61 [style = solid, label="expectedTopStateAssignmentSet2"];
25->78 [style = dashed, label="0"];
21->18 [style = bold, label=""];
74->51 [style = bold, label=""];
13->17 [style = bold, label=""];
28->100 [style = bold, label=""];
30->64 [style = solid, label="assignmentSet"];
38->30 [style = bold, label=""];
30->28 [style = bold, label=""];
99->84 [style = bold, label=""];
24->11 [style = bold, label=""];
49->63 [style = dashed, label="0"];
39->49 [style = bold, label=""];
25->19 [style = bold, label=""];
18->46 [style = bold, label=""];
3->80 [style = solid, label="expectedAssignmentSet2"];
84->91 [style = bold, label=""];
62->91 [style = solid, label="expectedTopStateAssignmentSet2"];
62->2 [style = bold, label=""];
5->37 [style = bold, label=""];
36->75 [style = dashed, label="0"];
80->93 [style = bold, label=""];
33->46 [style = solid, label="removingReplica"];
19->42 [style = bold, label=""];
30->28 [style = solid, label="assignmentSet"];
2->58 [style = solid, label="expectedAssignmentSet1"];
30->94 [style = solid, label="assignmentSet"];
33->15 [style = bold, label=""];
67->87 [style = bold, label=""];
0->73 [style = dashed, label="0"];
60->62 [style = bold, label=""];
38->30 [style = solid, label="testCache"];
2->81 [style = solid, label="expectedAssignmentSet1"];
12->35 [style = bold, label=""];
34->8 [style = bold, label=""];
33->51 [style = dashed, label="0"];
75->65 [style = bold, label=""];
33->53 [style = solid, label="removingReplica"];
30->65 [style = solid, label="assignmentSet"];
22->5 [style = bold, label=""];
97->46 [style = bold, label=""];
72->50 [style = bold, label=""];
0->36 [style = bold, label=""];
86->71 [style = bold, label=""];
71->55 [style = bold, label=""];
26->16 [style = bold, label=""];
18->88 [style = bold, label=""];
11->63 [style = solid, label="expectedCapacityMap"];
81->80 [style = bold, label=""];
11->87 [style = solid, label="expectedCapacityMap"];
11->36 [style = solid, label="expectedCapacityMap"];
47->25 [style = bold, label=""];
82->38 [style = bold, label=""];
79->59 [style = bold, label=""];
4->102 [style = dashed, label="0"];
29->9 [style = solid, label="expectedAssignment"];
11->49 [style = solid, label="expectedCapacityMap"];
4->50 [style = dashed, label="0"];
53->68 [style = bold, label=""];
49->41 [style = bold, label=""];
83->67 [style = bold, label=""];
2->86 [style = solid, label="expectedAssignmentSet1"];
13->95 [style = dashed, label="0"];
4->47 [style = bold, label=""];
43->34 [style = bold, label=""];
95->56 [style = bold, label=""];
29->72 [style = solid, label="expectedAssignment"];
54->98 [style = bold, label=""];
3->29 [style = bold, label=""];
98->76 [style = bold, label=""];
52->79 [style = bold, label=""];
28->72 [style = bold, label=""];
93->61 [style = bold, label=""];
14->87 [style = dashed, label="0"];
16->13 [style = bold, label=""];
60->55 [style = solid, label="expectedTopStateAssignmentSet1"];
32->12 [style = solid, label="removingReplica"];
53->68 [style = dotted, label="true"];
2->3 [style = bold, label=""];
47->78 [style = bold, label=""];
23->43 [style = bold, label=""];
29->35 [style = solid, label="expectedAssignment"];
8->14 [style = bold, label=""];
3->71 [style = solid, label="expectedAssignmentSet2"];
31->38 [style = bold, label=""];
8->67 [style = dashed, label="0"];
29->74 [style = solid, label="expectedAssignment"];
37->12 [style = bold, label=""];
48->26 [style = bold, label=""];
92->63 [style = bold, label=""];
90->8 [style = bold, label=""];
77->66 [style = bold, label=""];
6->1 [style = bold, label=""];
55->70 [style = bold, label=""];
3->99 [style = solid, label="expectedAssignmentSet2"];
29->95 [style = solid, label="expectedAssignment"];
8->76 [style = solid, label="addingReplica"];
41->16 [style = solid, label="addingReplica"];
9->72 [style = dashed, label="0"];
29->10 [style = bold, label=""];
89->44 [style = bold, label=""];
59->83 [style = bold, label=""];
78->19 [style = bold, label=""];
60->84 [style = solid, label="expectedTopStateAssignmentSet1"];
49->89 [style = bold, label=""];
61->90 [style = bold, label=""];
100->102 [style = bold, label=""];
70->96 [style = bold, label=""];
91->57 [style = bold, label=""];
46->74 [style = bold, label=""];
77->53 [style = dotted, label="true"];
2->10 [style = solid, label="expectedAssignmentSet1"];
45->39 [style = bold, label=""];
11->75 [style = solid, label="expectedCapacityMap"];
53->77 [style = bold, label=""];
35->74 [style = dashed, label="0"];
65->86 [style = bold, label=""];
58->99 [style = bold, label=""];
96->33 [style = bold, label=""];
66->53 [style = bold, label=""];
1->40 [style = bold, label=""];
63->64 [style = bold, label=""];
9->4 [style = bold, label=""];
11->6 [style = bold, label=""];
21->89 [style = dashed, label="0"];
42->20 [style = bold, label=""];
35->33 [style = bold, label=""];
64->81 [style = bold, label=""];
36->32 [style = bold, label=""];
20->73 [style = bold, label=""];
51->49 [style = bold, label=""];
40->28 [style = bold, label=""];
68->77 [style = bold, label=""];
26->92 [style = bold, label=""];
17->7 [style = bold, label=""];
14->54 [style = bold, label=""];
85->52 [style = bold, label=""];
69->95 [style = bold, label=""];
39->92 [style = dashed, label="0"];
101->38 [style = bold, label=""];
44->48 [style = bold, label=""];
50->47 [style = bold, label=""];
60->93 [style = solid, label="expectedTopStateAssignmentSet1"];
76->69 [style = bold, label=""];
100->102 [style = solid, label="duplicateReplica"];
7->27 [style = bold, label=""];
46->45 [style = bold, label=""];
27->23 [style = bold, label=""];
29->13 [style = solid, label="expectedAssignment"];
27->52 [style = dashed, label="0"];
30->2 [style = bold, label=""];
94->58 [style = bold, label=""];
41->44 [style = bold, label=""];
30->60 [style = bold, label=""];
}
