digraph {
7 [style = filled, label = "ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\"expr_agg_name\",ImmutableSet.of(\"some_column\",\"some_other_column\"),null,\"0.0\",null,\"__acc + some_column + some_other_column\",\"__acc + expr_agg_name\",null,null,new HumanReadableBytes(2048),TestExprMacroTable.INSTANCE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\"expr_agg_name\",ImmutableSet.of(\"some_column\",\"some_other_column\"),null,\"0\",null,null,\"__acc + some_column + some_other_column\",\"__acc + expr_agg_name\",null,null,new HumanReadableBytes(2048),TestExprMacroTable.INSTANCE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\"expr_agg_name\",ImmutableSet.of(\"some_column\",\"some_other_column\"),null,\"0\",null,\"__acc + some_column + some_other_column\",\"__acc + expr_agg_name\",null,null,new HumanReadableBytes(2048),TestExprMacroTable.INSTANCE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(ValueType.DOUBLE,agg.getType())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(ValueType.LONG,agg.getFinalizedType())@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(ValueType.LONG,agg.getCombiningFactory().getType())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testDoubleType['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testLongType['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(ValueType.LONG,agg.getType())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testLongType['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(ValueType.DOUBLE,agg.getFinalizedType())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(ValueType.DOUBLE,agg.getCombiningFactory().getType())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->8 [style = dashed, label="0"];
2->11 [style = dashed, label="0"];
1->4 [style = bold, label=""];
6->0 [style = bold, label=""];
5->6 [style = bold, label=""];
4->6 [style = dashed, label="0"];
7->8 [style = bold, label=""];
8->11 [style = bold, label=""];
11->9 [style = bold, label=""];
10->7 [style = bold, label=""];
4->7 [style = dashed, label="0"];
3->9 [style = dashed, label="0"];
2->3 [style = bold, label=""];
4->0 [style = bold, label=""];
0->2 [style = bold, label=""];
}
