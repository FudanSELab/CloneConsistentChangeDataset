digraph {
14 [style = filled, label = "checkNotImplies(node1,node5)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "f.checkImplies(node1,node2)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "RexNode node1 = rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "checkImplies(node1,node1)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Fixture f = new Fixture()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "checkNotImplies(node4,node6)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "RexNode node4 = rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN_OR_EQUAL,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "RexNode node2 = rexBuilder.makeCall(SqlStdOperatorTable.NOT_EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "checkNotImplies(node2,node1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testSimpleEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "checkImplies(node5,node2)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "checkImplies(node1,node2)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "RexNode node3 = rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN_OR_EQUAL,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "RexNode node1 = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "checkNotImplies(node2,node5)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "checkImplies(node1,node2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testSimpleEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "RexNode node6 = rexBuilder.makeCall(SqlStdOperatorTable.NOT_EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testSimpleLesserCond['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "f.checkImplies(node1,node1)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final RexNode node1 = f.eq(f.i,f.literal(30))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "f.checkNotImplies(node2,node1)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final RexNode node2 = f.ne(f.i,f.literal(10))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "checkNotImplies(node2,node1)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "checkNotImplies(node3,node1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "checkImplies(node1,node3)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "RexNode node5 = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "RexNode node2 = rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "checkNotImplies(node1,node6)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22->23 [style = solid, label="node5"];
19->28 [style = solid, label="node4"];
15->13 [style = bold, label=""];
20->17 [style = bold, label=""];
24->19 [style = bold, label=""];
9->11 [style = bold, label=""];
16->27 [style = bold, label=""];
3->1 [style = bold, label=""];
18->23 [style = bold, label=""];
1->0 [style = solid, label="node1"];
11->10 [style = solid, label="node1"];
7->10 [style = bold, label=""];
22->16 [style = bold, label=""];
11->12 [style = solid, label="node1"];
13->20 [style = solid, label="node1"];
13->21 [style = solid, label="node1"];
2->5 [style = solid, label="node2"];
13->17 [style = solid, label="node1"];
22->14 [style = solid, label="node5"];
16->21 [style = solid, label="node6"];
7->12 [style = solid, label="node2"];
26->24 [style = bold, label=""];
10->6 [style = bold, label=""];
21->28 [style = bold, label=""];
13->25 [style = solid, label="node1"];
26->25 [style = solid, label="node2"];
23->14 [style = bold, label=""];
1->13 [style = dashed, label="0"];
26->27 [style = solid, label="node2"];
25->20 [style = bold, label=""];
1->5 [style = solid, label="node1"];
2->0 [style = bold, label=""];
5->6 [style = dashed, label="0"];
0->4 [style = bold, label=""];
13->26 [style = bold, label=""];
24->20 [style = solid, label="node3"];
11->7 [style = bold, label=""];
26->23 [style = solid, label="node2"];
13->27 [style = solid, label="node1"];
22->18 [style = solid, label="node5"];
8->9 [style = bold, label=""];
2->4 [style = solid, label="node2"];
16->28 [style = solid, label="node6"];
11->6 [style = solid, label="node1"];
1->2 [style = bold, label=""];
1->4 [style = solid, label="node1"];
26->18 [style = solid, label="node2"];
2->26 [style = dashed, label="0"];
4->10 [style = dashed, label="0"];
13->14 [style = solid, label="node1"];
24->17 [style = solid, label="node3"];
19->22 [style = bold, label=""];
4->5 [style = bold, label=""];
27->25 [style = bold, label=""];
7->6 [style = solid, label="node2"];
14->21 [style = bold, label=""];
17->18 [style = bold, label=""];
6->12 [style = bold, label=""];
}
