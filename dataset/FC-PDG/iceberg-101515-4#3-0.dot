digraph {
14 [style = filled, label = "T upper = Conversions.fromByteBuffer(ref.type(),upperBounds.get(id))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Literal<T> lit@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "notEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "cmp < 0@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "T upper = Conversions.fromByteBuffer(field.type(),upperBounds.get(id))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "upperBounds != null && upperBounds.containsKey(id)@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return ROWS_MIGHT_NOT_MATCH@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "gtEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Types.NestedField field = struct.field(id)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "lowerBounds != null && lowerBounds.containsKey(id)@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "cmp > 0@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "BoundReference<T> ref@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "T lower = Conversions.fromByteBuffer(struct.field(id).type(),lowerBounds.get(id))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Integer id = ref.fieldId()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "gtEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "return ROWS_MUST_MATCH@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "return ROWS_MUST_MATCH@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Literal<T> lit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Preconditions.checkNotNull(field,\"Cannot filter by nested column: %s\",schema.findField(id))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return ROWS_CANNOT_MATCH@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return ROWS_MIGHT_MATCH@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int cmp = lit.comparator().compare(upper,lit.value())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int cmp = lit.comparator().compare(lower,lit.value())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->8 [style = dotted, label="true"];
5->14 [style = dotted, label="true"];
5->14 [style = bold, label=""];
7->3 [style = solid, label="field"];
0->21 [style = solid, label="id"];
0->7 [style = solid, label="id"];
8->11 [style = dotted, label="true"];
5->10 [style = dotted, label="true"];
10->1 [style = solid, label="upper"];
6->18 [style = dashed, label="0"];
19->5 [style = bold, label=""];
13->0 [style = bold, label=""];
10->14 [style = dashed, label="0"];
0->7 [style = bold, label=""];
0->3 [style = solid, label="id"];
20->5 [style = bold, label=""];
3->21 [style = bold, label=""];
1->8 [style = bold, label=""];
21->17 [style = bold, label=""];
21->17 [style = dotted, label="true"];
0->17 [style = solid, label="id"];
17->16 [style = solid, label="lower"];
8->6 [style = bold, label=""];
11->6 [style = bold, label=""];
13->9 [style = dotted, label="true"];
14->1 [style = solid, label="upper"];
5->10 [style = bold, label=""];
21->20 [style = dotted, label="true"];
8->22 [style = dotted, label="true"];
3->5 [style = bold, label=""];
11->22 [style = dashed, label="0"];
20->19 [style = bold, label=""];
14->1 [style = bold, label=""];
7->3 [style = bold, label=""];
8->18 [style = bold, label=""];
10->1 [style = bold, label=""];
8->11 [style = bold, label=""];
15->0 [style = bold, label=""];
8->22 [style = bold, label=""];
21->5 [style = bold, label=""];
0->14 [style = solid, label="id"];
1->8 [style = solid, label="cmp"];
22->18 [style = bold, label=""];
5->18 [style = bold, label=""];
16->20 [style = bold, label=""];
4->9 [style = dotted, label="true"];
5->1 [style = dotted, label="true"];
20->19 [style = dotted, label="true"];
0->5 [style = bold, label=""];
21->16 [style = dotted, label="true"];
4->0 [style = bold, label=""];
4->2 [style = dotted, label="true"];
13->12 [style = dotted, label="true"];
17->16 [style = bold, label=""];
9->24 [style = dashed, label="0"];
15->24 [style = dotted, label="true"];
15->23 [style = dotted, label="true"];
5->6 [style = bold, label=""];
0->5 [style = solid, label="id"];
16->20 [style = solid, label="cmp"];
0->10 [style = solid, label="id"];
}
