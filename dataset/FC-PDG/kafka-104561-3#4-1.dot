digraph {
14 [style = filled, label = "state.updateReplicaState(node1,time.milliseconds(),new LogOffsetMetadata(10L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "state.addAcknowledgementFrom(node2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(emptySet(),state.nonAcknowledgingVoters())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "LeaderState<?> state = newLeaderState(mkSet(localId,node1,node2),0L)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(mkSet(node1,node2),state.nonAcknowledgingVoters())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "MockTime time = new MockTime()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(Optional.of(new LogOffsetMetadata(10L)),state.highWatermark())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "LeaderState state = newLeaderState(mkSet(localId,node1,node2),0L)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertEquals(singleton(node2),state.nonAcknowledgingVoters())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int node1 = 1@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testFollowerAcknowledgement['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "testNonMonotonicHighWatermarkUpdate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "state.addAcknowledgementFrom(node1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(Optional.of(new LogOffsetMetadata(10L)),state.highWatermark())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "state.updateLocalState(time.milliseconds(),new LogOffsetMetadata(10L))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "LeaderState state = newLeaderState(mkSet(localId,node1),0L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertFalse(state.updateReplicaState(node1,time.milliseconds(),new LogOffsetMetadata(5L)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "int node1 = 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(5L,state.getVoterEndOffsets().get(node1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testFollowerAcknowledgement['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
7->1 [style = bold, label=""];
8->4 [style = solid, label="node1"];
8->7 [style = solid, label="node1"];
3->11 [style = solid, label="node1"];
9->4 [style = bold, label=""];
3->1 [style = solid, label="node2"];
12->17 [style = bold, label=""];
8->3 [style = bold, label=""];
8->2 [style = solid, label="node1"];
18->19 [style = bold, label=""];
0->15 [style = dashed, label="0"];
19->11 [style = bold, label=""];
6->0 [style = bold, label=""];
3->2 [style = solid, label="node2"];
3->14 [style = solid, label="node1"];
3->13 [style = dashed, label="0"];
2->4 [style = bold, label=""];
13->16 [style = bold, label=""];
4->7 [style = bold, label=""];
11->15 [style = bold, label=""];
3->4 [style = solid, label="node2"];
3->9 [style = bold, label=""];
1->6 [style = bold, label=""];
3->2 [style = bold, label=""];
10->8 [style = bold, label=""];
3->6 [style = solid, label="node2"];
2->9 [style = dashed, label="0"];
17->3 [style = bold, label=""];
3->13 [style = bold, label=""];
16->14 [style = bold, label=""];
14->18 [style = bold, label=""];
3->13 [style = solid, label="node1"];
8->9 [style = solid, label="node1"];
3->9 [style = solid, label="node2"];
3->19 [style = solid, label="node1"];
}
