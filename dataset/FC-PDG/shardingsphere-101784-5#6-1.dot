digraph {
5 [style = filled, label = "InsertStatement insertStatement = new MySQLInsertStatement()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(actual.getOnDuplicateKeyUpdateParameters().size(),is(1))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "insertStatement.setTable(new SimpleTableSegment(0,0,new IdentifierValue(\"tbl\")))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertGetGroupedParametersWithoutOnDuplicateParameter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(actual.getOnDuplicateKeyUpdateParameters().size(),is(0))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(actual.getGroupedParameters().size(),is(2))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(schema.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\",\"name\",\"status\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(actual.getOnDuplicateKeyUpdateValueContext().getColumns().size(),is(2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "MySQLInsertStatement insertStatement = new MySQLInsertStatement()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ShardingSphereSchema schema = mock()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertGetGroupedParametersWithoutOnDuplicateParameter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "when(schemaMetaData.getAllColumnNames(\"tbl\")).thenReturn(Arrays.asList(\"id\",\"name\",\"status\"))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(actual.getGroupedParameters().size(),is(2))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertGetGroupedParametersWithOnDuplicateParameters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "InsertStatementContext actual = new InsertStatementContext(schemaMetaData,Arrays.asList(1,\"Tom\",2,\"Jerry\"),insertStatement)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "InsertStatementContext actual = new InsertStatementContext(schema,Arrays.asList(1,\"Tom\",2,\"Jerry\"),insertStatement)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "PhysicalSchemaMetaData schemaMetaData = mock()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "setUpInsertValues(insertStatement)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "setUpOnDuplicateValues(insertStatement)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "InsertStatementContext actual = new InsertStatementContext(schemaMetaData,Arrays.asList(1,\"Tom\",2,\"Jerry\",\"onDuplicateKeyUpdateColumnValue\"),insertStatement)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->16 [style = bold, label=""];
5->8 [style = bold, label=""];
19->18 [style = bold, label=""];
5->12 [style = solid, label="insertStatement"];
0->6 [style = bold, label=""];
3->18 [style = dashed, label="0"];
0->12 [style = bold, label=""];
4->15 [style = bold, label=""];
1->19 [style = dashed, label="0"];
5->0 [style = solid, label="insertStatement"];
1->3 [style = bold, label=""];
12->9 [style = bold, label=""];
2->4 [style = bold, label=""];
6->12 [style = dashed, label="0"];
8->0 [style = bold, label=""];
0->14 [style = bold, label=""];
11->12 [style = solid, label="schema"];
17->2 [style = bold, label=""];
16->1 [style = bold, label=""];
15->14 [style = solid, label="insertStatement"];
7->2 [style = bold, label=""];
11->13 [style = bold, label=""];
15->0 [style = solid, label="insertStatement"];
13->5 [style = bold, label=""];
15->16 [style = solid, label="insertStatement"];
2->16 [style = solid, label="schemaMetaData"];
6->9 [style = bold, label=""];
9->1 [style = bold, label=""];
1->19 [style = bold, label=""];
4->13 [style = dashed, label="0"];
5->15 [style = dashed, label="0"];
4->5 [style = bold, label=""];
5->6 [style = solid, label="insertStatement"];
15->8 [style = bold, label=""];
2->6 [style = solid, label="schemaMetaData"];
10->11 [style = bold, label=""];
}
