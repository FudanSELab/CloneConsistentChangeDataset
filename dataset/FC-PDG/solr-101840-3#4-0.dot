digraph {
10 [style = filled, label = "Long longResult = (Long)getStatResult(\"mir\",\"long_ld\",VAL_TYPE.LONG)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Double doubleTest = (Double)calculateStat(doubleTestStart,\"min\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(getRawResponse(),doubleResult,doubleTest)@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Double floatResult = (Double)getStatResult(\"medr\",\"float_fd\",VAL_TYPE.DOUBLE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(getRawResponse(),longResult,longTest)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Long longTest = (Long)calculateStat(longTestStart,\"min\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Double longResult = (Double)getStatResult(\"medr\",\"long_ld\",VAL_TYPE.DOUBLE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "minTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertEquals(getRawResponse(),floatResult,floatTest)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "minTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Double doubleTest = (Double)calculateNumberStat(doubleTestStart,\"median\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"medr\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Integer intResult = ((Integer)getStatResult(\"mir\",\"int_id\",VAL_TYPE.INTEGER))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Integer intResult = (Integer)getStatResult(\"mir\",\"int_id\",VAL_TYPE.INTEGER)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "String stringTest = (String)calculateStat(stringTestStart,\"min\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Long longResult = ((Long)getStatResult(\"mir\",\"long_ld\",VAL_TYPE.LONG))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "medianTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(getRawResponse(),dateResult,dateTest)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Float floatResult = ((Float)getStatResult(\"mir\",\"float_fd\",VAL_TYPE.FLOAT))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Double longTest = (Double)calculateNumberStat(longTestStart,\"median\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Float floatTest = (Float)calculateStat(floatTestStart,\"min\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(getRawResponse(),stringResult,stringTest)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String dateTest = (String)calculateStat(dateTestStart,\"min\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Double intResult = (Double)getStatResult(\"medr\",\"int_id\",VAL_TYPE.DOUBLE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "String stringResult = (String)getStatResult(\"mir\",\"string_sd\",VAL_TYPE.STRING)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Float floatResult = (Float)getStatResult(\"mir\",\"float_fd\",VAL_TYPE.FLOAT)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertEquals(getRawResponse(),intResult,intTest)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String dateResult = (String)getStatResult(\"mir\",\"date_dtd\",VAL_TYPE.DATE)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Double floatTest = (Double)calculateNumberStat(floatTestStart,\"median\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Double intTest = (Double)calculateNumberStat(intTestStart,\"median\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"mir\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Integer intTest = (Integer)calculateStat(intTestStart,\"min\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->10 [style = bold, label=""];
22->2 [style = solid, label="longResult"];
30->12 [style = solid, label="doubleResult"];
24->15 [style = solid, label="intResult"];
16->8 [style = bold, label=""];
20->15 [style = solid, label="intResult"];
20->9 [style = bold, label=""];
1->26 [style = dashed, label="0"];
6->18 [style = bold, label=""];
11->0 [style = solid, label="dateResult"];
19->20 [style = bold, label=""];
31->24 [style = bold, label=""];
12->11 [style = bold, label=""];
23->15 [style = bold, label=""];
17->0 [style = solid, label="dateTest"];
26->2 [style = solid, label="longTest"];
8->14 [style = bold, label=""];
10->28 [style = dashed, label="0"];
4->27 [style = dashed, label="0"];
28->26 [style = bold, label=""];
23->15 [style = solid, label="intTest"];
1->2 [style = solid, label="longTest"];
10->22 [style = dashed, label="0"];
4->21 [style = dashed, label="0"];
25->16 [style = bold, label=""];
2->4 [style = bold, label=""];
7->16 [style = solid, label="floatTest"];
27->16 [style = solid, label="floatResult"];
30->29 [style = bold, label=""];
9->23 [style = dashed, label="0"];
4->7 [style = bold, label=""];
15->22 [style = bold, label=""];
14->12 [style = solid, label="doubleTest"];
25->16 [style = solid, label="floatTest"];
26->2 [style = bold, label=""];
29->12 [style = bold, label=""];
28->2 [style = solid, label="longResult"];
17->0 [style = bold, label=""];
13->3 [style = bold, label=""];
15->28 [style = bold, label=""];
21->16 [style = solid, label="floatResult"];
2->21 [style = bold, label=""];
9->15 [style = bold, label=""];
5->13 [style = bold, label=""];
14->12 [style = bold, label=""];
16->30 [style = bold, label=""];
7->16 [style = bold, label=""];
9->15 [style = solid, label="intTest"];
5->3 [style = solid, label="stringResult"];
18->9 [style = bold, label=""];
18->20 [style = dashed, label="0"];
7->25 [style = dashed, label="0"];
2->27 [style = bold, label=""];
21->7 [style = bold, label=""];
11->17 [style = bold, label=""];
18->24 [style = dashed, label="0"];
8->30 [style = dashed, label="0"];
1->2 [style = bold, label=""];
29->12 [style = solid, label="doubleTest"];
22->1 [style = bold, label=""];
18->15 [style = solid, label="intResult"];
4->16 [style = solid, label="floatResult"];
10->1 [style = bold, label=""];
14->29 [style = dashed, label="0"];
8->12 [style = solid, label="doubleResult"];
27->25 [style = bold, label=""];
13->3 [style = solid, label="stringTest"];
10->2 [style = solid, label="longResult"];
0->5 [style = bold, label=""];
24->23 [style = bold, label=""];
}
