digraph {
18 [style = filled, label = "assertEquals(-1,htmlEscaped.indexOf('\'))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "PackagedProgram prg = PackagedProgram.newBuilder().setEntryPointClassName(.getName()).setArguments(\"/dev/random\",\"/tmp\").build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertNotNull(op)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Plan plan = (Plan)PackagedProgramUtils.getPipelineFromProgram(prg,new Configuration(),1,true)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "OptimizedPlan op = optimizer.compile(plan)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Configuration config = new Configuration()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "InetAddress mockAddress = InetAddress.getLocalHost()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Optimizer optimizer = new Optimizer(new DataStatistics(),new DefaultCostEstimator(),config)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testGetExecutionPlan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "config.setString(JobManagerOptions.ADDRESS,mockJmAddress.getHostName())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "OptimizedPlan op = optimizer.compile(plan)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testGetExecutionPlan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "InetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress,12345)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "PackagedProgram prg = PackagedProgram.newBuilder().setEntryPointClassName(.getName()).setArguments(\"/dev/random\",\"/tmp\").build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String htmlEscaped = dumper2.getOptimizerPlanAsJSON(op)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Plan plan = (Plan)PackagedProgramUtils.getPipelineFromProgram(prg,-1,true)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "PlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "dumper2.setEncodeForHTML(true)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "config.setInteger(JobManagerOptions.PORT,mockJmAddress.getPort())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertNotNull(dumper.getOptimizerPlanAsJSON(op))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testGetExecutionPlan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12->0 [style = bold, label=""];
4->6 [style = bold, label=""];
14->7 [style = bold, label=""];
11->12 [style = bold, label=""];
17->15 [style = solid, label="mockAddress"];
6->2 [style = solid, label="prg"];
20->2 [style = solid, label="config"];
0->7 [style = bold, label=""];
7->9 [style = bold, label=""];
5->1 [style = bold, label=""];
6->11 [style = bold, label=""];
7->10 [style = solid, label="op"];
9->3 [style = bold, label=""];
1->8 [style = bold, label=""];
13->6 [style = bold, label=""];
11->17 [style = bold, label=""];
3->5 [style = bold, label=""];
11->2 [style = bold, label=""];
0->7 [style = solid, label="op"];
10->18 [style = bold, label=""];
2->0 [style = solid, label="plan"];
7->9 [style = solid, label="op"];
0->8 [style = solid, label="op"];
20->21 [style = bold, label=""];
21->19 [style = bold, label=""];
12->0 [style = solid, label="plan"];
17->15 [style = bold, label=""];
2->14 [style = dashed, label="0"];
15->20 [style = bold, label=""];
2->14 [style = bold, label=""];
2->0 [style = bold, label=""];
19->2 [style = bold, label=""];
14->7 [style = solid, label="plan"];
7->5 [style = solid, label="op"];
11->14 [style = solid, label="prg"];
16->11 [style = bold, label=""];
0->3 [style = solid, label="op"];
8->10 [style = bold, label=""];
2->12 [style = dashed, label="0"];
6->12 [style = solid, label="prg"];
}
