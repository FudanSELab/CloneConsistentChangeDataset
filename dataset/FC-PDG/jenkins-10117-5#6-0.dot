digraph {
10 [style = filled, label = "j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().toAuthenticated())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final CLICommandInvoker.Result result = command.invoke()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "createViewShouldFailIfViewAlreadyExists['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.CREATE,Jenkins.READ).everywhere().toAuthenticated())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "reloadConfigurationShouldFailWithoutAdministerPermission['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: View 'ViewFromXML' already exists\"))@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertThat(result.stderr(),containsString(\"user is missing the Overall/Administer permission\"))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "j.jenkins.addView(new ListView(\"ViewFromXML\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(View.CREATE,Jenkins.READ).withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/view.xml\")).invoke()@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(result,failedWith(6))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final CLICommandInvoker.Result result = command.withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/view.xml\")).invoke()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "createViewShouldFailIfViewAlreadyExists['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertThat(result,failedWith(4))@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
0->12 [style = dashed, label="0"];
4->14 [style = dashed, label="0"];
5->13 [style = dashed, label="0"];
2->4 [style = bold, label=""];
7->4 [style = solid, label="result"];
1->8 [style = bold, label=""];
12->2 [style = solid, label="result"];
7->2 [style = solid, label="result"];
0->5 [style = solid, label="result"];
3->1 [style = bold, label=""];
12->13 [style = bold, label=""];
10->12 [style = bold, label=""];
11->10 [style = bold, label=""];
0->2 [style = solid, label="result"];
4->9 [style = bold, label=""];
1->10 [style = dashed, label="0"];
12->13 [style = solid, label="result"];
8->7 [style = bold, label=""];
2->14 [style = bold, label=""];
0->5 [style = bold, label=""];
13->2 [style = bold, label=""];
6->1 [style = bold, label=""];
1->0 [style = bold, label=""];
7->2 [style = bold, label=""];
}
