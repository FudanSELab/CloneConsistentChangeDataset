digraph {
35 [style = filled, label = "assertNotEquals(SessionWindows.with(1).until(9).hashCode(),SessionWindows.with(1).until(7).hashCode())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertNotEquals(SessionWindows.with(1).grace(9).hashCode(),SessionWindows.with(1).grace(6).hashCode())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(1).after(2).grace(9).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertNotEquals(JoinWindows.of(3).until(90).hashCode(),JoinWindows.of(3).until(60).hashCode())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(2).grace(3).until(90).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertNotEquals(JoinWindows.of(9),JoinWindows.of(3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(1).after(9).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(1).after(2).grace(3).until(90),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(9).after(2).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "assertNotEquals(SessionWindows.with(1).grace(6).until(70).hashCode(),SessionWindows.with(1).grace(6).until(7).hashCode())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertNotEquals(JoinWindows.of(3).until(90),JoinWindows.of(3).until(60))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "verifyInEquality(JoinWindows.of(3).after(9),JoinWindows.of(3).after(2))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertNotEquals(JoinWindows.of(3).after(9).hashCode(),JoinWindows.of(3).after(2).hashCode())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertNotEquals(SessionWindows.with(1).grace(6).until(70),SessionWindows.with(1).grace(6).until(7))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertNotEquals(JoinWindows.of(3).after(9),JoinWindows.of(3).after(2))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(9),JoinWindows.of(3).before(2))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(9).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(9).hashCode(),JoinWindows.of(3).before(2).hashCode())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(2).grace(3).until(90),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertNotEquals(SessionWindows.with(1).grace(0).until(7).hashCode(),SessionWindows.with(1).grace(6).until(7).hashCode())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(2).grace(9).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "verifyInEquality(JoinWindows.of(3).grace(9),JoinWindows.of(3).grace(2))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(9).grace(3).until(60).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "verifyInEquality(JoinWindows.of(3).until(90),JoinWindows.of(3).until(60))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertNotEquals(SessionWindows.with(1).grace(9),SessionWindows.with(1).grace(6))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNotEquals(JoinWindows.of(3).grace(9),JoinWindows.of(3).grace(2))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(9).after(2).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertNotEquals(SessionWindows.with(2).grace(6).until(7).hashCode(),SessionWindows.with(1).grace(6).until(7).hashCode())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertNotEquals(SessionWindows.with(2).grace(6).until(7),SessionWindows.with(1).grace(6).until(7))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(9),JoinWindows.of(3).before(2))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(9).after(2).grace(3).until(60).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "assertNotEquals(SessionWindows.with(9).hashCode(),SessionWindows.with(1).hashCode())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNotEquals(JoinWindows.of(3).grace(9).hashCode(),JoinWindows.of(3).grace(2).hashCode())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(2).grace(9).until(60).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "assertNotEquals(SessionWindows.with(1).grace(0).until(7),SessionWindows.with(1).grace(6).until(7))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertNotEquals(JoinWindows.of(9).hashCode(),JoinWindows.of(3).hashCode())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "verifyInEquality(JoinWindows.of(9),JoinWindows.of(3))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertNotEquals(SessionWindows.with(9),SessionWindows.with(1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertNotEquals(SessionWindows.with(1).until(9),SessionWindows.with(1).until(7))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->3 [style = bold, label=""];
8->16 [style = bold, label=""];
8->19 [style = dashed, label="0"];
15->2 [style = bold, label=""];
23->20 [style = bold, label=""];
24->19 [style = bold, label=""];
12->20 [style = dashed, label="0"];
12->5 [style = bold, label=""];
30->33 [style = bold, label=""];
16->32 [style = dashed, label="0"];
26->25 [style = bold, label=""];
37->29 [style = bold, label=""];
9->27 [style = dashed, label="0"];
3->6 [style = bold, label=""];
14->17 [style = bold, label=""];
28->26 [style = bold, label=""];
31->36 [style = bold, label=""];
0->26 [style = dashed, label="0"];
7->8 [style = bold, label=""];
13->23 [style = dashed, label="0"];
16->21 [style = dashed, label="0"];
11->18 [style = bold, label=""];
6->15 [style = bold, label=""];
1->9 [style = bold, label=""];
4->0 [style = bold, label=""];
20->22 [style = bold, label=""];
25->27 [style = bold, label=""];
38->30 [style = bold, label=""];
13->12 [style = bold, label=""];
18->10 [style = bold, label=""];
35->37 [style = bold, label=""];
7->24 [style = dashed, label="0"];
0->1 [style = bold, label=""];
29->32 [style = bold, label=""];
39->40 [style = bold, label=""];
2->14 [style = bold, label=""];
5->7 [style = bold, label=""];
1->38 [style = dashed, label="0"];
7->37 [style = dashed, label="0"];
27->23 [style = bold, label=""];
32->41 [style = bold, label=""];
5->22 [style = dashed, label="0"];
36->38 [style = bold, label=""];
22->24 [style = bold, label=""];
34->35 [style = bold, label=""];
41->39 [style = bold, label=""];
0->36 [style = dashed, label="0"];
1->25 [style = dashed, label="0"];
33->34 [style = bold, label=""];
12->34 [style = dashed, label="0"];
9->30 [style = dashed, label="0"];
9->13 [style = bold, label=""];
17->11 [style = bold, label=""];
19->21 [style = bold, label=""];
}
