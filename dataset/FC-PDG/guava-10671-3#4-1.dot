digraph {
5 [style = filled, label = "removeNode_queryAfterRemoval['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "removeNode_queryAfterRemoval['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "network.adjacentNodes(N1)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "@SuppressWarnings(\"unused\") Set<Integer> unused = network.adjacentNodes(N1)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "fail(ERROR_NODE_NOT_IN_GRAPH)@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "networkAsMutableNetwork.adjacentNodes(N1)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assume().that(graphIsMutable()).isTrue()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "@SuppressWarnings(\"unused\") Set<Integer> unused = networkAsMutableNetwork.adjacentNodes(N1)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "addNode(N1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "removeNode_queryAfterRemoval['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertTrue(network.removeNode(N1))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(networkAsMutableNetwork.removeNode(N1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->3 [style = bold, label=""];
8->7 [style = bold, label=""];
4->10 [style = bold, label=""];
3->8 [style = dashed, label="0"];
11->4 [style = bold, label=""];
4->1 [style = bold, label=""];
5->4 [style = bold, label=""];
1->10 [style = dashed, label="0"];
6->9 [style = bold, label=""];
10->8 [style = bold, label=""];
0->7 [style = dashed, label="0"];
7->2 [style = bold, label=""];
3->0 [style = bold, label=""];
9->4 [style = bold, label=""];
0->2 [style = bold, label=""];
}
