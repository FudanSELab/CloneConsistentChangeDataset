digraph {
1 [style = filled, label = "Assert.assertNotNull(block.getBaseObject())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(0,block.getBaseOffset())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "freeingOffHeapMemoryBlockResetsOffset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(MemoryBlock.FREED_IN_ALLOCATOR_PAGE_NUMBER,block.getPageNumber())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "MemoryBlock block = MemoryAllocator.HEAP.allocate(1024)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNotEquals(0,block.getBaseOffset())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "MemoryBlock block = MemoryAllocator.UNSAFE.allocate(1024)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "freeingOnHeapMemoryBlockResetsBaseObjectAndOffset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(0,block.getBaseOffset())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "freeingOnHeapMemoryBlockResetsBaseObjectAndOffset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertNull(block.getBaseObject())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "MemoryAllocator.UNSAFE.free(block)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertNull(block.getBaseObject())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(MemoryBlock.FREED_IN_ALLOCATOR_PAGE_NUMBER,block.pageNumber)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "MemoryAllocator.HEAP.free(block)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(MemoryBlock.FREED_IN_ALLOCATOR_PAGE_NUMBER,block.getPageNumber())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->3 [style = bold, label=""];
4->14 [style = dashed, label="0"];
4->1 [style = bold, label=""];
5->4 [style = bold, label=""];
13->9 [style = bold, label=""];
15->12 [style = bold, label=""];
2->7 [style = bold, label=""];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
9->0 [style = bold, label=""];
14->0 [style = solid, label="block"];
4->3 [style = solid, label="block"];
10->14 [style = bold, label=""];
2->6 [style = bold, label=""];
6->7 [style = dashed, label="0"];
0->15 [style = bold, label=""];
3->0 [style = bold, label=""];
0->2 [style = bold, label=""];
12->11 [style = bold, label=""];
}
