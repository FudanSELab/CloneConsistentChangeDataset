digraph {
10 [style = filled, label = "Assert.assertEquals(\"Should project entire list\",values,projected.get(\"values\"))@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(10,\"values\",Types.ListType.ofOptional(11,Types.LongType.get())))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Schema elementOnly = writeSchema.select(\"values.element\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "record.put(\"id\",34L)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"values\")@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "List<Long> values = ImmutableList.of(56L,57L,58L)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertNull(\"Should not project values list\",projected.get(\"values\"))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testListProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Record projected = writeAndRead(\"id_only\",writeSchema,idOnly,record)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testListProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "projected = writeAndRead(\"list_only\",writeSchema,listOnly,record)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"Should project entire list\",values,projected.get(\"values\"))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "record.put(\"values\",values)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testListProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Schema idOnly = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Schema listOnly = writeSchema.select(\"values\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"id\")@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"id\")@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "projected = writeAndRead(\"element_only\",writeSchema,elementOnly,record)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->21 [style = solid, label="projected"];
17->15 [style = solid, label="writeSchema"];
6->0 [style = solid, label="record"];
5->7 [style = bold, label=""];
11->21 [style = bold, label=""];
15->9 [style = bold, label=""];
9->4 [style = bold, label=""];
12->5 [style = solid, label="values"];
15->19 [style = bold, label=""];
17->12 [style = bold, label=""];
6->13 [style = bold, label=""];
4->8 [style = bold, label=""];
22->17 [style = bold, label=""];
1->15 [style = solid, label="elementOnly"];
17->6 [style = solid, label="writeSchema"];
11->14 [style = bold, label=""];
20->1 [style = bold, label=""];
21->10 [style = bold, label=""];
3->1 [style = bold, label=""];
2->17 [style = bold, label=""];
12->4 [style = solid, label="values"];
8->11 [style = bold, label=""];
17->11 [style = solid, label="writeSchema"];
6->11 [style = solid, label="record"];
12->10 [style = solid, label="values"];
16->3 [style = bold, label=""];
17->0 [style = solid, label="writeSchema"];
7->0 [style = bold, label=""];
1->15 [style = bold, label=""];
19->4 [style = bold, label=""];
16->20 [style = bold, label=""];
6->15 [style = solid, label="record"];
0->20 [style = solid, label="projected"];
18->17 [style = bold, label=""];
15->19 [style = solid, label="projected"];
7->0 [style = solid, label="idOnly"];
14->10 [style = bold, label=""];
13->5 [style = bold, label=""];
12->6 [style = bold, label=""];
8->11 [style = solid, label="listOnly"];
0->16 [style = bold, label=""];
}
