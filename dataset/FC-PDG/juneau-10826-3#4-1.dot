digraph {
2 [style = filled, label = "t.produces(ASet.of())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertObject(t.produces()).isNull()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertOptional(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "a07_produces['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "t.addProduces(ASet.of(MediaType.of(\"text/foo\")))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertOptional(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "t.addProduces(ASet.of())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertOptional(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertOptional(t.produces()).isNull()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "a07_produces['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "t.produces((Collection<MediaType>)null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "t.produces(ASet.of(MediaType.of(\"text/foo\")))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Swagger t = new Swagger()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "a07_produces['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Operation t = new Operation()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertOptional(t.produces()).isType().asJson().is(\"((\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "t.addProduces(null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertOptional(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"((\")@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
11->20 [style = bold, label=""];
4->3 [style = bold, label=""];
5->14 [style = dashed, label="0"];
12->16 [style = dashed, label="0"];
6->20 [style = dashed, label="0"];
3->18 [style = dashed, label="0"];
11->6 [style = bold, label=""];
18->11 [style = bold, label=""];
20->0 [style = bold, label=""];
22->9 [style = bold, label=""];
3->11 [style = bold, label=""];
4->18 [style = bold, label=""];
6->0 [style = bold, label=""];
16->2 [style = bold, label=""];
9->16 [style = bold, label=""];
0->15 [style = bold, label=""];
1->9 [style = bold, label=""];
1->22 [style = dashed, label="0"];
0->7 [style = bold, label=""];
8->1 [style = bold, label=""];
13->17 [style = bold, label=""];
12->2 [style = bold, label=""];
19->1 [style = bold, label=""];
21->22 [style = bold, label=""];
5->13 [style = bold, label=""];
2->14 [style = bold, label=""];
10->17 [style = dashed, label="0"];
10->4 [style = bold, label=""];
7->15 [style = dashed, label="0"];
9->12 [style = bold, label=""];
14->13 [style = bold, label=""];
17->4 [style = bold, label=""];
2->5 [style = bold, label=""];
}
