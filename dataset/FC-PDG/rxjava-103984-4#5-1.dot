digraph {
9 [style = filled, label = "Flowable<Object> futureObservable = Flowable.fromFuture(future)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "futureObservable.subscribeOn(Schedulers.computation()).subscribe(ts)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "cancellationDuringFutureGet['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "cancellationDuringFutureGet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Subscriber<Object> subscriber = TestHelper.mockSubscriber()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "to.assertNoErrors()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "TestSubscriber<Object> ts = new TestSubscriber<>(subscriber)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "cancellationDuringFutureGet['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Observable<Object> futureObservable = Observable.fromFuture(future)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "to.assertNotComplete()@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "to.dispose()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ts.assertNoValues()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestSubscriber<Object> ts = new TestSubscriber<Object>(subscriber)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Thread.sleep(100)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Observer<Object> o = TestHelper.mockObserver()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Future<Object> future = new Future<Object>(){@Override public boolean cancel(boolean mayInterruptIfRunning){isCancelled.compareAndSet(false,true)return true}@Override public boolean isCancelled(){return isCancelled.get()}@Override public boolean isDone(){return isCancelled() || isDone.get()}@Override public Object get(){Thread.sleep(500)isDone.compareAndSet(false,true)return \"foo\"}@Override public Object get(long timeout,TimeUnit unit){return get()}}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "to.assertNoValues()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "futureObservable.subscribeOn(Schedulers.computation()).subscribe(to)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "TestObserver<Object> to = new TestObserver<Object>(o)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ts.assertNoErrors()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ts.assertNotComplete()@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ts.cancel()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
9->20 [style = dashed, label="0"];
4->18 [style = dashed, label="0"];
17->5 [style = bold, label=""];
16->18 [style = bold, label=""];
20->13 [style = bold, label=""];
1->8 [style = bold, label=""];
12->5 [style = bold, label=""];
5->20 [style = solid, label="future"];
21->15 [style = solid, label="o"];
21->15 [style = bold, label=""];
1->19 [style = dashed, label="0"];
18->19 [style = bold, label=""];
0->11 [style = bold, label=""];
9->10 [style = bold, label=""];
10->13 [style = dashed, label="0"];
8->14 [style = dashed, label="0"];
3->10 [style = solid, label="ts"];
11->9 [style = bold, label=""];
2->4 [style = bold, label=""];
10->6 [style = bold, label=""];
6->2 [style = bold, label=""];
11->10 [style = solid, label="ts"];
0->3 [style = solid, label="subscriber"];
3->9 [style = bold, label=""];
5->21 [style = bold, label=""];
7->5 [style = bold, label=""];
15->13 [style = solid, label="to"];
19->14 [style = bold, label=""];
5->0 [style = bold, label=""];
6->16 [style = bold, label=""];
0->21 [style = dashed, label="0"];
15->20 [style = bold, label=""];
2->16 [style = dashed, label="0"];
0->11 [style = solid, label="subscriber"];
3->15 [style = dashed, label="0"];
4->1 [style = bold, label=""];
13->6 [style = bold, label=""];
5->9 [style = solid, label="future"];
3->11 [style = dashed, label="0"];
}
