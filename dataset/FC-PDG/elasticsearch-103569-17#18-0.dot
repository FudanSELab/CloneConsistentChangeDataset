digraph {
19 [style = filled, label = "action.shardOperationOnReplica(request,indexShard,listener)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final IndicesService indicesService = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(indexService.getShard(id)).thenReturn(indexShard)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final RetentionLeaseBackgroundSyncAction.Request request = new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(),retentionLeases)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertNull(action.indexBlockLevel())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final ShardId shardId = new ShardId(index,id)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final PlainActionFuture<TransportReplicationAction.ReplicaResult> listener = PlainActionFuture.newFuture()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final Index index = new Index(\"index\",\"uuid\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testBlocks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(success.get())@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final AtomicBoolean success = new AtomicBoolean()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final IndexService indexService = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "result.runPostReplicaActions(ActionListener.wrap(null,null))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final RetentionLeases retentionLeases = mock()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testRetentionLeaseBackgroundSyncActionOnReplica['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final TransportReplicationAction.ReplicaResult result = listener.actionGet()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testBlocks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final int id = randomIntBetween(0,4)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()),new IndexingPressure(Settings.EMPTY),new SystemIndices(Map.of()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()),new IndexingPressure(Settings.EMPTY))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "final IndexShard indexShard = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(indicesService.indexServiceSafe(index)).thenReturn(indexService)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(indexShard.shardId()).thenReturn(shardId)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "verify(indexShard).persistRetentionLeases()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25->14 [style = solid, label="retentionLeases"];
9->11 [style = bold, label=""];
5->9 [style = bold, label=""];
8->3 [style = solid, label="shardId"];
8->3 [style = bold, label=""];
9->8 [style = solid, label="index"];
3->6 [style = bold, label=""];
16->25 [style = bold, label=""];
25->14 [style = bold, label=""];
8->14 [style = solid, label="shardId"];
3->12 [style = bold, label=""];
3->16 [style = bold, label=""];
5->12 [style = solid, label="indicesService"];
15->19 [style = bold, label=""];
12->1 [style = bold, label=""];
2->4 [style = bold, label=""];
2->19 [style = solid, label="indexShard"];
21->18 [style = bold, label=""];
2->4 [style = solid, label="indexShard"];
20->5 [style = bold, label=""];
0->7 [style = bold, label=""];
6->12 [style = dashed, label="0"];
25->18 [style = solid, label="retentionLeases"];
6->1 [style = bold, label=""];
5->6 [style = solid, label="indicesService"];
11->0 [style = bold, label=""];
18->22 [style = bold, label=""];
6->16 [style = dashed, label="0"];
10->5 [style = bold, label=""];
7->8 [style = solid, label="id"];
15->19 [style = solid, label="listener"];
7->2 [style = bold, label=""];
13->5 [style = bold, label=""];
4->8 [style = bold, label=""];
23->17 [style = bold, label=""];
14->15 [style = bold, label=""];
11->0 [style = solid, label="indexService"];
5->16 [style = solid, label="indicesService"];
22->24 [style = bold, label=""];
14->19 [style = solid, label="request"];
24->23 [style = bold, label=""];
19->21 [style = bold, label=""];
}
