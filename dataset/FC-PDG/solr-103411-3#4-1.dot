digraph {
8 [style = filled, label = "i++@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String sliceName = sliceNames.get(i)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"http://baseUrl1:8983/slice1_replica3/\",cloudReplicaSource.getReplicasBySlice(i).get(0))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "testSimple_UsingClusterState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testMultipleCollections['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(2,cloudReplicaSource.getSliceCount())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "int i = 0@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "sliceName@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder().collection(\"collection1\").onlyNrt(false).zkStateReader(zkStateReader).replicaListTransformer(replicaListTransformer).whitelistHostChecker(whitelistHostChecker).params(params).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "i < cloudReplicaSource.getSliceCount()@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"http://baseUrl1/slice1_replica3/\",cloudReplicaSource.getReplicasBySlice(i).get(0))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertEquals(3,sliceNames.size())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(3,cloudReplicaSource.getSliceCount())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"http://baseUrl1:8983/slice1_replica1/\",cloudReplicaSource.getReplicasBySlice(i).get(0))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"http://baseUrl2:8984/slice2_replica2/\",cloudReplicaSource.getReplicasBySlice(i).get(0))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"http://baseUrl1/slice1_replica1/\",cloudReplicaSource.getReplicasBySlice(i).get(0))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertEquals(2,sliceNames.size())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "params.set(\"collection\",\"collection1,collection2\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(\"http://baseUrl2/slice2_replica2/\",cloudReplicaSource.getReplicasBySlice(i).get(0))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testMultipleCollections['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "ReplicaListTransformer replicaListTransformer = Mockito.mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"http://baseUrl2/slice2_replica2/\",cloudReplicaSource.getReplicasBySlice(i).get(0))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"http://baseUrl1/slice1_replica1/\",cloudReplicaSource.getReplicasBySlice(i).get(0))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(1,cloudReplicaSource.getReplicasBySlice(i).size())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "HttpShardHandlerFactory.WhitelistHostChecker whitelistHostChecker = Mockito.mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "List<String> sliceNames = cloudReplicaSource.getSliceNames()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->17 [style = bold, label=""];
25->0 [style = bold, label=""];
17->8 [style = bold, label=""];
17->20 [style = dotted, label="true"];
5->8 [style = bold, label=""];
4->18 [style = dashed, label="0"];
15->20 [style = dashed, label="0"];
2->26 [style = bold, label=""];
9->14 [style = solid, label="i"];
3->26 [style = dashed, label="0"];
21->0 [style = bold, label=""];
17->18 [style = dotted, label="true"];
4->17 [style = dashed, label="0"];
0->6 [style = bold, label=""];
9->5 [style = solid, label="i"];
17->4 [style = dotted, label="true"];
8->2 [style = dotted, label="true"];
2->17 [style = dotted, label="true"];
8->17 [style = dotted, label="true"];
12->11 [style = bold, label=""];
17->4 [style = bold, label=""];
5->2 [style = solid, label="sliceName"];
8->14 [style = bold, label=""];
5->14 [style = solid, label="i"];
24->5 [style = solid, label="i"];
26->8 [style = bold, label=""];
24->8 [style = solid, label="i"];
5->14 [style = bold, label=""];
9->8 [style = bold, label=""];
8->9 [style = solid, label="i"];
17->19 [style = bold, label=""];
22->7 [style = bold, label=""];
17->3 [style = dotted, label="true"];
15->5 [style = bold, label=""];
1->23 [style = bold, label=""];
9->14 [style = dotted, label="true"];
20->5 [style = bold, label=""];
3->19 [style = dashed, label="0"];
9->8 [style = dotted, label="true"];
19->5 [style = bold, label=""];
6->1 [style = bold, label=""];
7->24 [style = bold, label=""];
3->5 [style = bold, label=""];
9->5 [style = dotted, label="true"];
17->15 [style = dotted, label="true"];
14->17 [style = solid, label="sliceName"];
24->9 [style = solid, label="i"];
8->5 [style = dotted, label="true"];
13->7 [style = bold, label=""];
8->5 [style = solid, label="i"];
18->5 [style = bold, label=""];
9->2 [style = dotted, label="true"];
8->14 [style = dotted, label="true"];
10->0 [style = bold, label=""];
11->13 [style = bold, label=""];
7->16 [style = bold, label=""];
17->19 [style = dotted, label="true"];
17->15 [style = bold, label=""];
1->12 [style = bold, label=""];
17->3 [style = bold, label=""];
11->22 [style = bold, label=""];
9->5 [style = bold, label=""];
8->9 [style = bold, label=""];
2->26 [style = dotted, label="true"];
9->8 [style = solid, label="i"];
14->2 [style = bold, label=""];
23->11 [style = bold, label=""];
16->7 [style = dashed, label="0"];
13->11 [style = dashed, label="0"];
4->5 [style = bold, label=""];
16->9 [style = bold, label=""];
17->18 [style = bold, label=""];
24->9 [style = bold, label=""];
17->20 [style = bold, label=""];
5->8 [style = solid, label="i"];
}
