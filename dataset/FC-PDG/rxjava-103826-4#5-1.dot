digraph {
1 [style = filled, label = "shouldNotEmitUntilAfterSubscription['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestObserver<Integer> to = new TestObserver<Integer>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<Integer>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "shouldNotEmitUntilAfterSubscription['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(100,ts.values().size())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "shouldNotEmitUntilAfterSubscription['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertEquals(100,to.values().size())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Flowable.range(1,100).scan(0,new BiFunction<Integer,Integer,Integer>(){@Override public Integer apply(Integer t1,Integer t2){return t1 + t2}}).filter(new Predicate<Integer>(){@Override public boolean test(Integer t1){return t1 > 0}}).subscribe(ts)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Observable.range(1,100).scan(0,new BiFunction<Integer,Integer,Integer>(){@Override public Integer apply(Integer t1,Integer t2){return t1 + t2}}).filter(new Predicate<Integer>(){@Override public boolean test(Integer t1){return t1 > 0}}).subscribe(to)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
0->8 [style = dashed, label="0"];
2->0 [style = solid, label="ts"];
4->0 [style = solid, label="ts"];
1->2 [style = bold, label=""];
2->0 [style = bold, label=""];
6->9 [style = bold, label=""];
9->8 [style = bold, label=""];
2->9 [style = dashed, label="0"];
3->7 [style = dashed, label="0"];
9->8 [style = solid, label="to"];
5->4 [style = bold, label=""];
8->7 [style = bold, label=""];
4->0 [style = bold, label=""];
2->4 [style = dashed, label="0"];
}
