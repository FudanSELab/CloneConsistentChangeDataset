digraph {
1 [style = filled, label = "containerManager.checkContainers()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testCreateSequential['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertNotNull(\"Ttl node should not have been deleted yet\",zk.exists(\"/foo\",false))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertNull(\"Ttl node should have been deleted\",zk.exists(\"/foo\",false))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "final AtomicLong fakeElapsed = new AtomicLong(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNotNull(\"Ttl node should not have been deleted yet\",zk.exists(\"/foo\",false))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(0,stat.getEphemeralOwner())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertNull(\"Ttl node should have been deleted\",zk.exists(\"/foo\",false))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "Assert.assertNull(\"Ttl node should have been deleted\",zk.exists(path,false))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "containerManager.checkContainers()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "zk.create(\"/foo\",new byte((((,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_WITH_TTL,stat,100)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testCreate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertEquals(0,stat.getEphemeralOwner())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "String path = zk.create(\"/foo\",new byte((((,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL_WITH_TTL,stat,100)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "fakeElapsed.set(1000)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testCreate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Stat stat = new Stat()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ContainerManager containerManager = newContainerManager(fakeElapsed)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertNotNull(\"Ttl node should not have been deleted yet\",zk.exists(path,false))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->18 [style = dashed, label="0"];
1->4 [style = bold, label=""];
16->0 [style = bold, label=""];
7->11 [style = bold, label=""];
5->9 [style = bold, label=""];
15->18 [style = solid, label="path"];
7->10 [style = bold, label=""];
2->3 [style = bold, label=""];
8->6 [style = solid, label="fakeElapsed"];
1->18 [style = bold, label=""];
8->6 [style = bold, label=""];
3->15 [style = bold, label=""];
3->15 [style = solid, label="stat"];
15->16 [style = solid, label="path"];
5->14 [style = bold, label=""];
9->8 [style = bold, label=""];
3->5 [style = solid, label="stat"];
4->12 [style = dashed, label="0"];
10->11 [style = dashed, label="0"];
3->5 [style = bold, label=""];
11->0 [style = bold, label=""];
9->14 [style = dashed, label="0"];
13->3 [style = bold, label=""];
15->9 [style = bold, label=""];
0->1 [style = bold, label=""];
10->0 [style = bold, label=""];
7->16 [style = bold, label=""];
1->12 [style = bold, label=""];
17->3 [style = bold, label=""];
14->8 [style = bold, label=""];
10->16 [style = dashed, label="0"];
6->7 [style = bold, label=""];
5->15 [style = dashed, label="0"];
}
