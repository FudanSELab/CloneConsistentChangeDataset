digraph {
12 [style = filled, label = "tool.assertOnCleanExit()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assertions.assertThat(tool.getStdout()).contains(\"Pre-scrub sstables snapshotted into\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "fillCF(cfs,1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testHeaderFixFixOnlyWithTool['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertOrderedAll(cfs,1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testHeaderFixWithTool['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "ToolResult tool = ToolRunner.invokeClass(,\"-e\",\"fix-only\",ksName,CF)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testHeaderFixWithTool['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertOrderedAll(cfs,1)@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ToolResult tool = ToolRunner.invokeClass(,\"-e\",\"fix\",ksName,CF)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assertions.assertThat(tool.getStdout()).contains(\"1 rows in new sstable and 0 empty\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assertions.assertThat(tool.getStdout()).contains(\"1 partitions in new sstable and 0 empty\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assertions.assertThat(tool.getStdout()).contains(\"Not continuing with scrub, since '--header-fix fix-only' was specified.\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertOrderedAll(cfs,1)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
6->4 [style = solid, label="cfs"];
5->14 [style = dashed, label="0"];
1->8 [style = bold, label=""];
9->0 [style = bold, label=""];
6->3 [style = solid, label="cfs"];
3->1 [style = bold, label=""];
5->9 [style = bold, label=""];
6->0 [style = solid, label="cfs"];
11->6 [style = bold, label=""];
12->0 [style = bold, label=""];
10->6 [style = bold, label=""];
1->13 [style = bold, label=""];
6->1 [style = solid, label="cfs"];
8->13 [style = dashed, label="0"];
5->2 [style = bold, label=""];
2->0 [style = bold, label=""];
8->5 [style = bold, label=""];
2->9 [style = dashed, label="0"];
0->4 [style = bold, label=""];
14->12 [style = bold, label=""];
7->6 [style = bold, label=""];
13->14 [style = bold, label=""];
}
