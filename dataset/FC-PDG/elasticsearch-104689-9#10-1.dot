digraph {
0 [style = filled, label = "Mapper fieldMapper = defaultMapper.mappers().getMapper(\"completion\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"completion\").field(\"type\",\"completion\").startArray(\"contexts\").startObject().field(\"name\",\"ctx\").field(\"type\",\"category\").endObject().endArray().endObject().endObject().endObject().endObject())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertContextSuggestFields(fields,3)@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testIndexingWithSimpleContexts['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "IndexableField(( fields = parsedDocument.rootDoc().getFields(fieldMapper.name())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testIndexingWithSimpleContexts['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testIndexingWithSimpleBooleanContexts['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DocumentMapper defaultMapper = createIndex(\"test\").mapperService().parse(\"type1\",new CompressedXContent(mapping))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "ParsedDocument parsedDocument = defaultMapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(jsonBuilder().startObject().startArray(\"completion\").startObject().array(\"input\",\"suggestion5\",\"suggestion6\",\"suggestion7\").startObject(\"contexts\").field(\"ctx\",\"ctx1\").endObject().field(\"weight\",5).endObject().endArray().endObject()),XContentType.JSON))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ParsedDocument parsedDocument = defaultMapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(jsonBuilder().startObject().startArray(\"completion\").startObject().array(\"input\",\"suggestion5\",\"suggestion6\",\"suggestion7\").startObject(\"contexts\").field(\"ctx\",true).endObject().field(\"weight\",5).endObject().endArray().endObject()),XContentType.JSON))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
0->10 [style = bold, label=""];
7->0 [style = bold, label=""];
4->3 [style = solid, label="fields"];
2->7 [style = bold, label=""];
1->10 [style = dashed, label="0"];
5->7 [style = dashed, label="0"];
5->0 [style = bold, label=""];
2->5 [style = solid, label="mapping"];
8->2 [style = bold, label=""];
9->2 [style = bold, label=""];
0->1 [style = bold, label=""];
2->7 [style = solid, label="mapping"];
2->5 [style = bold, label=""];
6->2 [style = bold, label=""];
10->4 [style = bold, label=""];
}
