digraph {
11 [style = filled, label = "!(first instanceof List)@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return numbers@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory),first.getClass().getSimpleName()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "null == second@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "@SuppressWarnings({\"unchecked\"}) double(( result = MathArrays.ebeDivide(((List)first).stream().mapToDouble(null).toArray(),((List)second).stream().mapToDouble(null).toArray())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "List<Number> numbers = new ArrayList<>()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Object second@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Object first@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "doWork['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "double(( result = MathArrays.ebeMultiply(((List<?>)first).stream().mapToDouble(null).toArray(),((List<?>)second).stream().mapToDouble(null).toArray())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Object second@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "!(second instanceof List)@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "doWork['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "null == first@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory),first.getClass().getSimpleName()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "doWork['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Object second@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "double(( result = MathArrays.ebeMultiply(((List)first).stream().mapToDouble(null).toArray(),((List)second).stream().mapToDouble(null).toArray())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "List<Number> numbers = new ArrayList<>()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "numbers.add(d)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21->10 [style = bold, label=""];
12->5 [style = bold, label=""];
9->0 [style = bold, label=""];
19->12 [style = bold, label=""];
11->14 [style = bold, label=""];
7->10 [style = bold, label=""];
20->2 [style = solid, label="second"];
19->20 [style = dotted, label="true"];
6->21 [style = bold, label=""];
0->16 [style = dashed, label="0"];
11->14 [style = dotted, label="true"];
3->12 [style = solid, label="first"];
16->7 [style = bold, label=""];
6->0 [style = bold, label=""];
15->2 [style = solid, label="second"];
9->6 [style = dotted, label="true"];
2->4 [style = bold, label=""];
10->18 [style = solid, label="numbers"];
11->9 [style = bold, label=""];
17->3 [style = dotted, label="true"];
1->2 [style = solid, label="second"];
8->3 [style = dotted, label="true"];
9->16 [style = bold, label=""];
9->6 [style = bold, label=""];
0->7 [style = bold, label=""];
8->1 [style = dotted, label="true"];
12->2 [style = bold, label=""];
5->2 [style = bold, label=""];
17->12 [style = bold, label=""];
17->15 [style = dotted, label="true"];
10->13 [style = bold, label=""];
12->5 [style = dotted, label="true"];
19->3 [style = dotted, label="true"];
6->16 [style = bold, label=""];
2->4 [style = dotted, label="true"];
9->21 [style = bold, label=""];
7->13 [style = solid, label="numbers"];
14->9 [style = bold, label=""];
4->11 [style = bold, label=""];
2->11 [style = bold, label=""];
8->12 [style = bold, label=""];
13->18 [style = bold, label=""];
}
