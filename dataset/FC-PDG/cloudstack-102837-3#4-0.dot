digraph {
3 [style = filled, label = "PowerMockito.when(SR.introduce(Mockito.eq(connectionMock),Mockito.eq(srUuid),Mockito.eq(pathMock),Mockito.eq(pathMock),Mockito.eq(\"file\"),Mockito.eq(\"file\"),Mockito.eq(false),Mockito.anyMapOf(,))).thenThrow(Mockito.mock(exceptionClass))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Host hostMock = Mockito.mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "SR.introduce(Mockito.eq(connectionMock),Mockito.eq(srUuid),Mockito.eq(pathMock),Mockito.eq(pathMock),Mockito.eq(\"file\"),Mockito.eq(\"file\"),Mockito.eq(false),Mockito.anyMapOf(,))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "SR srMock = Mockito.mock()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "createNewFileSrTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Mockito.doNothing().when(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock),Mockito.any(),Mockito.any())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Mockito.verify(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock),nullable(),nullable())@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Class<? extends Throwable> exceptionClass@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Mockito.when(citrixResourceBase._host.getUuid()).thenReturn(uuid)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "PowerMockito.when(SR.introduce(Mockito.eq(connectionMock),Mockito.eq(srUuid),Mockito.eq(pathMock),Mockito.eq(pathMock),Mockito.eq(\"file\"),Mockito.eq(\"file\"),Mockito.eq(false),Mockito.anyMapOf(,))).thenReturn(srMock)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Mockito.doNothing().when(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock),Mockito.any(),Mockito.any())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "PowerMockito.mockStatic()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Mockito.verify(pbdMock).plug(connectionMock)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "SR sr = xenserver625StorageProcessor.createNewFileSr(connectionMock,pathMock)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "PowerMockito.mockStatic()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PowerMockito.mockStatic()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(srMock,sr)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Mockito.verify(xenserver625StorageProcessor,times(0)).removeSrAndPbdIfPossible(Mockito.eq(connectionMock),Mockito.any(),Mockito.any())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Mockito.verify(srMock).scan(connectionMock)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "prepareAndExecuteTestcreateNewFileSrTestThrowingException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "String srUuid = UUID.nameUUIDFromBytes(pathMock.getBytes()).toString()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "PowerMockito.when(PBD.create(Mockito.eq(connectionMock),Mockito.any())).thenReturn(pbdMock)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "PowerMockito.when(Host.getByUuid(connectionMock,uuid)).thenReturn(hostMock)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "PBD pbdMock = Mockito.mock()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "PowerMockito.verifyStatic()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "PBD.create(Mockito.eq(connectionMock),Mockito.any())@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "String uuid = \"hostUuid\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Mockito.doReturn(srMock).when(xenserver625StorageProcessor).retrieveAlreadyConfiguredSrWithoutException(connectionMock,pathMock)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertNull(sr)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Mockito.verify(xenserver625StorageProcessor,times(0)).retrieveAlreadyConfiguredSrWithoutException(connectionMock,pathMock)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "SR sr = xenserver625StorageProcessor.createNewFileSr(connectionMock,pathMock)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "prepareAndExecuteTestcreateNewFileSrTestThrowingException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12->26 [style = bold, label=""];
14->0 [style = dotted, label="true"];
0->3 [style = solid, label="exceptionClass"];
10->6 [style = bold, label=""];
26->23 [style = solid, label="srMock"];
16->4 [style = bold, label=""];
26->16 [style = bold, label=""];
19->30 [style = bold, label=""];
12->4 [style = bold, label=""];
4->5 [style = bold, label=""];
9->3 [style = bold, label=""];
24->17 [style = bold, label=""];
14->13 [style = bold, label=""];
4->21 [style = solid, label="srUuid"];
27->23 [style = bold, label=""];
20->22 [style = bold, label=""];
5->6 [style = solid, label="hostMock"];
2->18 [style = dashed, label="0"];
13->12 [style = solid, label="uuid"];
11->15 [style = bold, label=""];
2->15 [style = dashed, label="0"];
5->10 [style = bold, label=""];
11->23 [style = dashed, label="0"];
11->2 [style = bold, label=""];
1->11 [style = bold, label=""];
6->9 [style = bold, label=""];
7->13 [style = bold, label=""];
8->1 [style = bold, label=""];
21->25 [style = bold, label=""];
30->20 [style = bold, label=""];
13->12 [style = bold, label=""];
18->19 [style = bold, label=""];
3->28 [style = dashed, label="0"];
1->11 [style = solid, label="sr"];
3->8 [style = bold, label=""];
26->28 [style = solid, label="srMock"];
24->17 [style = solid, label="pbdMock"];
2->27 [style = bold, label=""];
23->18 [style = bold, label=""];
7->0 [style = dotted, label="true"];
9->28 [style = bold, label=""];
22->21 [style = bold, label=""];
29->24 [style = bold, label=""];
31->13 [style = bold, label=""];
27->23 [style = solid, label="sr"];
28->29 [style = bold, label=""];
17->2 [style = bold, label=""];
}
