digraph {
22 [style = filled, label = "final Task task = NoopTask.create()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final TaskLock lock = tryTimeChunkLock(TaskLockType.EXCLUSIVE,highPriorityTask,interval).getTaskLock()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "lockbox.add(highPriorityTask)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testPreemptionAndDoInCriticalSection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Assert.assertTrue(lockbox.tryLock(TaskLockType.SHARED,task,interval).isOk())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "i++@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int i = 0@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(lockbox.doInCriticalSection(task,Collections.singletonList(smallInterval),CriticalAction.builder().onValidLocks(null).onInvalidLocks(null).build()))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertNotNull(lock)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertNotNull(lock)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testDoInCriticalSectionWithSmallerInterval['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertTrue(lockbox.doInCriticalSection(highPriorityTask,Collections.singletonList(interval),CriticalAction.builder().onValidLocks(null).onInvalidLocks(null).build()))@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final TaskLock lock = lockbox.tryLock(TaskLockType.EXCLUSIVE,highPriorityTask,interval).getTaskLock()@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "final Interval smallInterval = Intervals.of(\"2017-01-10/2017-01-11\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final TaskLock lock = lockbox.tryLock(TaskLockType.EXCLUSIVE,task,interval).getTaskLock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "taskStorage.insert(task,TaskStatus.running(task.getId()))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "i < 5@@@5@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(tryTimeChunkLock(TaskLockType.SHARED,task,interval).isOk())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "final Interval interval = Intervals.of(\"2017-01-01/2017-02-01\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final Task highPriorityTask = NoopTask.create(100)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final Interval interval = Intervals.of(\"2017-01-01/2017-01-02\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testPreemptionAndDoInCriticalSection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "lockbox.add(task)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "taskStorage.insert(highPriorityTask,TaskStatus.running(highPriorityTask.getId()))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->20 [style = solid, label="task"];
11->20 [style = bold, label=""];
0->4 [style = solid, label="interval"];
9->12 [style = dotted, label="true"];
12->11 [style = solid, label="task"];
10->5 [style = solid, label="i"];
22->19 [style = solid, label="task"];
18->23 [style = bold, label=""];
5->9 [style = bold, label=""];
15->14 [style = bold, label=""];
22->19 [style = bold, label=""];
19->12 [style = bold, label=""];
11->1 [style = bold, label=""];
15->14 [style = solid, label="lock"];
12->11 [style = solid, label="lock"];
6->13 [style = solid, label="highPriorityTask"];
7->16 [style = dashed, label="0"];
0->23 [style = dashed, label="0"];
9->11 [style = dotted, label="true"];
8->15 [style = dashed, label="0"];
12->11 [style = bold, label=""];
8->14 [style = bold, label=""];
21->20 [style = solid, label="smallInterval"];
3->15 [style = bold, label=""];
6->3 [style = solid, label="highPriorityTask"];
1->7 [style = bold, label=""];
9->6 [style = bold, label=""];
12->1 [style = solid, label="task"];
0->10 [style = bold, label=""];
7->5 [style = bold, label=""];
2->0 [style = bold, label=""];
17->0 [style = bold, label=""];
13->3 [style = bold, label=""];
23->21 [style = bold, label=""];
21->22 [style = bold, label=""];
1->16 [style = bold, label=""];
4->20 [style = dashed, label="0"];
3->8 [style = bold, label=""];
6->13 [style = bold, label=""];
8->14 [style = solid, label="lock"];
9->1 [style = dotted, label="true"];
16->5 [style = bold, label=""];
10->9 [style = solid, label="i"];
10->9 [style = bold, label=""];
9->12 [style = bold, label=""];
9->16 [style = dotted, label="true"];
9->7 [style = dotted, label="true"];
6->4 [style = solid, label="highPriorityTask"];
14->4 [style = bold, label=""];
5->9 [style = solid, label="i"];
9->5 [style = dotted, label="true"];
}
