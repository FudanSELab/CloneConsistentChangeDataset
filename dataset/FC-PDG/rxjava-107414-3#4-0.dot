digraph {
20 [style = filled, label = "ts.onSubscribe(new BooleanSubscription())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "BooleanSupplier isCancelled = new BooleanSupplier(){@Override public boolean getAsBoolean(){return ts.isCancelled()}}@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ArrayDeque<Integer> queue = new ArrayDeque<Integer>()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "AtomicLong state = new AtomicLong()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "AtomicLong state = new AtomicLong()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "queue.offer(1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "postCompleteCancelledAfterOne['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ts.cancel()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "state.getAndIncrement()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "ArrayDeque<Integer> queue = new ArrayDeque<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "postCompleteCancelled['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "ts.assertValue(1).assertNoErrors().assertNotComplete()@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "state.getAndIncrement()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final TestSubscriber<Integer> ts = new TestSubscriber<Integer>(){@Override public void onNext(Integer t){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@177fccftcancel()}}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ArrayDeque<Integer> queue = new ArrayDeque<Integer>()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final TestSubscriber<Integer> ts = new TestSubscriber<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final TestSubscriber<Integer> ts = new TestSubscriber<Integer>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "postCompleteCancelled['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "QueueDrainHelper.postComplete(ts,queue,state,isCancelled)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ts.assertEmpty()@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "BooleanSupplier isCancelled = new BooleanSupplier(){@Override public boolean getAsBoolean(){return ts.isCancelled()}}@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "queue.offer(1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "QueueDrainHelper.postComplete(ts,queue,state,isCancelled)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->9 [style = bold, label=""];
10->20 [style = bold, label=""];
6->11 [style = dashed, label="0"];
12->11 [style = bold, label=""];
14->10 [style = bold, label=""];
3->6 [style = bold, label=""];
13->0 [style = solid, label="queue"];
16->17 [style = bold, label=""];
10->18 [style = solid, label="isCancelled"];
2->10 [style = bold, label=""];
7->8 [style = bold, label=""];
15->16 [style = bold, label=""];
10->7 [style = bold, label=""];
1->0 [style = solid, label="state"];
13->1 [style = bold, label=""];
6->4 [style = bold, label=""];
22->18 [style = bold, label=""];
6->16 [style = dashed, label="0"];
11->0 [style = solid, label="ts"];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
4->0 [style = solid, label="queue"];
17->14 [style = bold, label=""];
9->21 [style = dashed, label="0"];
11->13 [style = bold, label=""];
17->18 [style = solid, label="queue"];
16->18 [style = solid, label="ts"];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
18->21 [style = bold, label=""];
4->13 [style = dashed, label="0"];
20->19 [style = bold, label=""];
19->22 [style = bold, label=""];
2->0 [style = solid, label="isCancelled"];
14->18 [style = solid, label="state"];
6->0 [style = solid, label="ts"];
}
