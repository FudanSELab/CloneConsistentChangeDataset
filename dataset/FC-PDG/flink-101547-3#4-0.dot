digraph {
16 [style = filled, label = "Assert.assertEquals(set0,neighborsJoin.getKeysForInput2())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,edgesSource.getDriverStrategy())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,map.getInput().getShipStrategy())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "PRINT_PLAN@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(set0,cogroup.getKeysForInput1())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "combiner != null@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertTrue(TempMode.CACHED == neighborsJoin.getInput2().getTempMode())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(set0,iter.getInitialSolutionSetInput().getShipStrategyKeys())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(DriverStrategy.MERGE,neighborsJoin.getDriverStrategy())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "plan.setExecutionConfig(new ExecutionConfig())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(DriverStrategy.SORTED_GROUP_COMBINE,combiner.getDriverStrategy())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "JobGraphGenerator jgg = new JobGraphGenerator()@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Assert.assertEquals(DriverStrategy.INNER_MERGE,neighborsJoin.getDriverStrategy())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "testWorksetConnectedComponents['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,iter.getInitialSolutionSetInput().getLocalStrategy())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,combiner.getInput().getLocalStrategy())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "DualInputPlanNode join@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(set0,cogroup.getKeysForInput2())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "SinkPlanNode sink@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "SourcePlanNode vertexSource = or.getNode(VERTEX_SOURCE)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,iter.getInitialSolutionSetInput().getShipStrategy())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(set0,iter.getInitialWorksetInput().getShipStrategyKeys())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(DriverStrategy.SORTED_GROUP_REDUCE,reducer.getDriverStrategy())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "testWorksetConnectedComponents['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "checkStandardStrategies['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,cogroup.getInput1().getShipStrategy())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,cogroup.getInput1().getLocalStrategy())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "jgg.compileJobGraph(optPlan)@@@48@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(DriverStrategy.COLLECTOR_MAP,map.getDriverStrategy())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,neighborsJoin.getInput2().getLocalStrategy())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "OptimizedPlan optPlan = compileNoStats(plan)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,sink.getDriverStrategy())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "DualInputPlanNode neighborsJoin = or.getNode(JOIN_NEIGHBORS_MATCH)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "ConnectedComponentsWithCoGroup cc = new ConnectedComponentsWithCoGroup()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,iter.getInitialWorksetInput().getShipStrategy())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,sink.getDriverStrategy())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,neighborsJoin.getInput2().getShipStrategy())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "WorksetIterationPlanNode iter = or.getNode(ITERATION_NAME)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "OptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(optPlan)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "System.out.println(json)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(set0,neighborsJoin.getInput2().getShipStrategyKeys())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "SinkPlanNode sink = or.getNode(SINK)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Plan plan = cc.getPlan(String.valueOf(DEFAULT_PARALLELISM),IN_FILE,IN_FILE,OUT_FILE,String.valueOf(100))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertTrue(neighborsJoin.getInput2().getTempMode().isCached())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,vertexSource.getDriverStrategy())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,cogroup.getInput2().getLocalStrategy())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "SingleInputPlanNode map@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "SingleInputPlanNode reducer@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,neighborsJoin.getInput1().getShipStrategy())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(set0,neighborsJoin.getKeysForInput1())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "SourcePlanNode edgesSource = or.getNode(EDGES_SOURCE)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "SingleInputPlanNode combiner@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "DualInputPlanNode cogroup = or.getNode(MIN_ID_AND_UPDATE)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(DriverStrategy.CO_GROUP,cogroup.getDriverStrategy())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,sink.getInput().getLocalStrategy())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,iter.getInitialWorksetInput().getLocalStrategy())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,cogroup.getInput2().getShipStrategy())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,neighborsJoin.getInput1().getLocalStrategy())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String json = dumper.getOptimizerPlanAsJSON(optPlan)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53->55 [style = bold, label=""];
19->42 [style = bold, label=""];
24->28 [style = bold, label=""];
29->9 [style = dotted, label="true"];
46->38 [style = bold, label=""];
15->13 [style = bold, label=""];
2->19 [style = bold, label=""];
29->11 [style = dotted, label="true"];
41->50 [style = dashed, label="0"];
26->32 [style = bold, label=""];
9->11 [style = bold, label=""];
35->18 [style = bold, label=""];
6->34 [style = bold, label=""];
1->41 [style = bold, label=""];
18->47 [style = bold, label=""];
3->40 [style = bold, label=""];
52->49 [style = bold, label=""];
0->9 [style = solid, label="optPlan"];
9->11 [style = solid, label="json"];
0->17 [style = bold, label=""];
27->30 [style = bold, label=""];
29->7 [style = dotted, label="true"];
41->4 [style = bold, label=""];
55->51 [style = bold, label=""];
60->50 [style = dotted, label="true"];
52->56 [style = dotted, label="true"];
48->60 [style = bold, label=""];
40->20 [style = bold, label=""];
20->1 [style = bold, label=""];
21->3 [style = bold, label=""];
38->15 [style = bold, label=""];
22->23 [style = bold, label=""];
14->44 [style = bold, label=""];
52->59 [style = dotted, label="true"];
42->14 [style = bold, label=""];
3->51 [style = dashed, label="0"];
40->48 [style = dashed, label="0"];
49->53 [style = bold, label=""];
7->9 [style = bold, label=""];
28->2 [style = bold, label=""];
31->26 [style = bold, label=""];
23->24 [style = bold, label=""];
29->33 [style = bold, label=""];
32->8 [style = bold, label=""];
51->48 [style = bold, label=""];
60->61 [style = bold, label=""];
30->35 [style = bold, label=""];
5->12 [style = bold, label=""];
18->6 [style = bold, label=""];
10->25 [style = bold, label=""];
0->37 [style = solid, label="optPlan"];
52->58 [style = dotted, label="true"];
34->16 [style = bold, label=""];
45->38 [style = bold, label=""];
0->17 [style = solid, label="optPlan"];
39->10 [style = bold, label=""];
61->50 [style = bold, label=""];
11->33 [style = bold, label=""];
16->43 [style = bold, label=""];
33->31 [style = bold, label=""];
29->7 [style = bold, label=""];
1->61 [style = dashed, label="0"];
36->5 [style = bold, label=""];
4->36 [style = bold, label=""];
44->37 [style = bold, label=""];
47->34 [style = bold, label=""];
60->61 [style = dotted, label="true"];
52->54 [style = dotted, label="true"];
17->29 [style = bold, label=""];
8->27 [style = bold, label=""];
43->39 [style = bold, label=""];
56->60 [style = solid, label="combiner"];
15->0 [style = solid, label="plan"];
12->22 [style = bold, label=""];
25->21 [style = bold, label=""];
13->0 [style = bold, label=""];
6->47 [style = dashed, label="0"];
52->57 [style = dotted, label="true"];
}
