digraph {
29 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp2\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "String edgeName@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Config config2 = ConfigFactory.empty().withValue(\"specStore.fs.dir\",ConfigValueFactory.fromAnyRef(\"/tmp2\")).withValue(\"specExecInstance.capabilities\",ConfigValueFactory.fromAnyRef(\"s2:d2\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Properties properties = new Properties()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String node1@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String edgeName@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testCreateFlowEdge['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testIfEdgeSuccessfullyAdded['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Set<FlowEdge> edgeSet = this.flowGraph.getEdges(node1)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(flowEdge.getSrc(),node1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testIfEdgeSuccessfullyAdded['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "Config templateCatalogCfg = config.withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(flowEdge.getDest(),node2)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String node2@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(flowEdge.getDest(),\"node2\")@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "specExecutorList.add(new InMemorySpecExecutor(config1))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(flowEdge.getConfig().getString(\"key1\"),value)@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Config config1 = ConfigFactory.empty().withValue(\"specStore.fs.dir\",ConfigValueFactory.fromAnyRef(\"/tmp1\")).withValue(\"specExecInstance.capabilities\",ConfigValueFactory.fromAnyRef(\"s1:d1\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp2\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "FlowEdge flowEdge = edgeSet.iterator().next()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Properties props = new Properties()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s2:d2\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "FSFlowTemplateCatalog catalog = new FSFlowTemplateCatalog(templateCatalogCfg)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(),\"InMemorySpecExecutor\")@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(),\"InMemorySpecExecutor\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<SpecExecutor> specExecutorList = new ArrayList<>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "String value@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_NAME_KEY,\"edge1\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(flowEdge.getId(),Joiner.on(\"_\").join(node1,node2,edgeName))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY,\"node2\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(),\"InMemorySpecExecutor\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_TEMPLATE_DIR_URI_KEY,\"FS:///flowEdgeTemplate\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "specExecutorList.add(new InMemorySpecExecutor(config2))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "String node2@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "Config edgeProps = ConfigUtils.propertiesToConfig(properties)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Config config = ConfigFactory.parseProperties(props)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s2:d2\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "FlowEdgeFactory flowEdgeFactory = new BaseFlowEdge.Factory()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "props.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY,flowTemplateCatalogUri.toString())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY,\"node1:node2:edge1\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(edgeSet.size(),1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(),\"InMemorySpecExecutor\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp1\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "String node1@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s1:d1\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertEquals(flowEdge.getSrc(),\"node1\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY,\"node1\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp1\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s1:d1\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "FlowEdge flowEdge = flowEdgeFactory.createFlowEdge(edgeProps,catalog,specExecutorList)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(flowEdge.getId(),Joiner.on(\":\").join(node1,node2,edgeName))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->5 [style = bold, label=""];
1->33 [style = dashed, label="0"];
14->3 [style = bold, label=""];
4->9 [style = bold, label=""];
42->23 [style = bold, label=""];
14->21 [style = dashed, label="0"];
18->21 [style = solid, label="node1"];
44->35 [style = solid, label="properties"];
17->1 [style = bold, label=""];
46->31 [style = solid, label="props"];
50->27 [style = bold, label=""];
0->14 [style = solid, label="node1"];
16->10 [style = bold, label=""];
0->7 [style = solid, label="node1"];
26->25 [style = bold, label=""];
38->29 [style = bold, label=""];
11->12 [style = dotted, label="true"];
43->32 [style = bold, label=""];
18->7 [style = solid, label="node1"];
48->34 [style = solid, label="templateCatalogCfg"];
8->14 [style = solid, label="edgeName"];
3->15 [style = bold, label=""];
40->28 [style = bold, label=""];
13->10 [style = solid, label="value"];
47->39 [style = bold, label=""];
25->46 [style = bold, label=""];
30->49 [style = bold, label=""];
11->13 [style = dotted, label="true"];
13->21 [style = solid, label="edgeName"];
12->14 [style = solid, label="node2"];
9->16 [style = bold, label=""];
39->26 [style = bold, label=""];
6->2 [style = bold, label=""];
20->18 [style = dotted, label="true"];
44->51 [style = bold, label=""];
39->26 [style = solid, label="config2"];
51->40 [style = bold, label=""];
15->17 [style = bold, label=""];
23->33 [style = bold, label=""];
46->30 [style = bold, label=""];
19->10 [style = solid, label="value"];
45->43 [style = bold, label=""];
33->47 [style = bold, label=""];
49->31 [style = bold, label=""];
2->21 [style = bold, label=""];
29->50 [style = bold, label=""];
35->45 [style = solid, label="edgeProps"];
11->7 [style = bold, label=""];
2->14 [style = bold, label=""];
7->6 [style = bold, label=""];
5->4 [style = bold, label=""];
31->48 [style = bold, label=""];
27->41 [style = bold, label=""];
23->45 [style = solid, label="specExecutorList"];
37->44 [style = bold, label=""];
35->45 [style = bold, label=""];
28->24 [style = bold, label=""];
18->3 [style = solid, label="node1"];
12->15 [style = solid, label="node2"];
22->21 [style = solid, label="node2"];
32->36 [style = bold, label=""];
11->0 [style = dotted, label="true"];
11->8 [style = dotted, label="true"];
33->47 [style = solid, label="config1"];
20->22 [style = dotted, label="true"];
34->35 [style = bold, label=""];
36->38 [style = bold, label=""];
20->13 [style = dotted, label="true"];
20->7 [style = bold, label=""];
20->19 [style = dotted, label="true"];
48->34 [style = bold, label=""];
0->3 [style = solid, label="node1"];
22->15 [style = solid, label="node2"];
34->45 [style = solid, label="catalog"];
21->3 [style = bold, label=""];
24->42 [style = bold, label=""];
}
