digraph {
17 [style = filled, label = "testCoerceParsing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(coerce,equalTo(false))@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_shape\").field(\"tree\",\"quadtree\").field(\"coerce\",\"false\").endObject().endObject().endObject().endObject())@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Mapper fieldMapper = mapper.mappers().getMapper(\"field\")@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testIgnoreZValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertFieldWarnings(\"tree\")@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(ignoreZValue,equalTo(true))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_point\").field(IGNORE_Z_VALUE.getPreferredName(),\"true\").endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_point\").field(IGNORE_Z_VALUE.getPreferredName(),\"false\").endObject().endObject().endObject().endObject())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_shape\").field(\"tree\",\"quadtree\").field(\"coerce\",\"true\").endObject().endObject().endObject().endObject())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(ignoreZValue,equalTo(false))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "fieldMapper = mapper.mappers().getMapper(\"field\")@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertFieldWarnings(\"tree\",\"strategy\")@@@13@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "boolean coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "mapper = createDocumentMapper(fieldMapping(null))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(coerce,equalTo(true))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testCoerceParsing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertThat(coerce,equalTo(false))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "fieldMapper = defaultMapper.mappers().getMapper(\"location\")@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
5->3 [style = bold, label=""];
24->28 [style = bold, label=""];
22->1 [style = solid, label="mapping"];
19->18 [style = bold, label=""];
2->20 [style = bold, label=""];
27->24 [style = solid, label="ignoreZValue"];
15->7 [style = bold, label=""];
3->1 [style = bold, label=""];
28->30 [style = bold, label=""];
2->6 [style = bold, label=""];
6->8 [style = solid, label="mapping"];
0->2 [style = bold, label=""];
10->0 [style = solid, label="coerce"];
13->11 [style = solid, label="coerce"];
11->4 [style = bold, label=""];
9->10 [style = solid, label="fieldMapper"];
11->23 [style = dashed, label="0"];
20->14 [style = bold, label=""];
20->14 [style = solid, label="fieldMapper"];
3->1 [style = solid, label="mapping"];
3->22 [style = dashed, label="0"];
0->27 [style = dashed, label="0"];
9->10 [style = bold, label=""];
16->19 [style = bold, label=""];
9->26 [style = solid, label="fieldMapper"];
13->11 [style = bold, label=""];
12->7 [style = bold, label=""];
1->9 [style = bold, label=""];
28->30 [style = solid, label="mapping"];
9->26 [style = bold, label=""];
6->28 [style = dashed, label="0"];
26->27 [style = bold, label=""];
30->12 [style = bold, label=""];
10->26 [style = dashed, label="0"];
13->21 [style = dashed, label="0"];
18->10 [style = bold, label=""];
12->25 [style = bold, label=""];
10->0 [style = bold, label=""];
6->8 [style = bold, label=""];
8->12 [style = bold, label=""];
7->25 [style = dashed, label="0"];
12->7 [style = solid, label="fieldMapper"];
21->23 [style = solid, label="ignoreZValue"];
14->15 [style = bold, label=""];
27->24 [style = bold, label=""];
8->30 [style = dashed, label="0"];
22->1 [style = bold, label=""];
15->7 [style = solid, label="coerce"];
12->25 [style = solid, label="fieldMapper"];
29->22 [style = bold, label=""];
4->13 [style = dashed, label="0"];
2->24 [style = dashed, label="0"];
19->18 [style = solid, label="fieldMapper"];
17->16 [style = bold, label=""];
25->21 [style = bold, label=""];
0->2 [style = solid, label="coerce"];
21->23 [style = bold, label=""];
}
