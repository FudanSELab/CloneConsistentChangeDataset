digraph {
32 [style = filled, label = "awaitDelayedExecutorThreadTerminated()@@@35@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(i + 1,firehose.getCurrentBufferSize())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(SERVICE_NAME,entry.getKey())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "firehose.close()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(0,Iterables.size(register.getMetrics()))@@@34@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "setUpRequestExpectations(\"producer\",String.valueOf(i))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "firehose.addAll(inputStream,req)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(CAPACITY,firehose.getCapacity())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "i < NUM_EVENTS@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testSingleThread['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "EasyMock.verify(req)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i >= 0@@@22@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(CAPACITY,firehose.getCapacity())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNotNull(firehose.nextRow())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(NUM_EVENTS,entry.getValue().getCurrentBufferSize())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(i,firehose.getCurrentBufferSize())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final InputStream inputStream = IOUtils.toInputStream(inputRow,StandardCharsets.UTF_8)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "++i@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final Iterable<Map.Entry<String,EventReceiverFirehoseMetric>> metrics = register.getMetrics()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(CAPACITY,entry.getValue().getCapacity())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final Map.Entry<String,EventReceiverFirehoseMetric> entry = Iterables.getLast(metrics)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "inputStream.close()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(0,entry.getValue().getCurrentBufferSize())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testProducerSequence['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "int i = 0@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int i = NUM_EVENTS - 1@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(CAPACITY,entry.getValue().getCapacity())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(0,firehose.getCurrentBufferSize())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(NUM_EVENTS,firehose.getCurrentBufferSize())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testSingleThread['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(1,Iterables.size(metrics))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertFalse(firehose.hasMore())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(firehose.hasMore())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "setUpRequestExpectations(null,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "--i@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26->22 [style = bold, label=""];
11->3 [style = bold, label=""];
5->19 [style = bold, label=""];
3->14 [style = bold, label=""];
0->4 [style = bold, label=""];
25->30 [style = solid, label="metrics"];
9->11 [style = bold, label=""];
26->28 [style = dotted, label="true"];
8->12 [style = bold, label=""];
16->26 [style = bold, label=""];
14->3 [style = dotted, label="true"];
25->0 [style = solid, label="metrics"];
10->9 [style = bold, label=""];
26->8 [style = dotted, label="true"];
4->27 [style = bold, label=""];
34->23 [style = bold, label=""];
14->13 [style = bold, label=""];
28->8 [style = bold, label=""];
26->33 [style = bold, label=""];
23->8 [style = solid, label="i"];
26->18 [style = dotted, label="true"];
23->26 [style = solid, label="i"];
23->33 [style = solid, label="i"];
33->18 [style = bold, label=""];
18->28 [style = solid, label="inputStream"];
18->28 [style = bold, label=""];
29->25 [style = bold, label=""];
23->26 [style = bold, label=""];
12->16 [style = bold, label=""];
26->16 [style = dotted, label="true"];
2->20 [style = bold, label=""];
30->0 [style = bold, label=""];
22->18 [style = bold, label=""];
14->10 [style = dotted, label="true"];
17->23 [style = bold, label=""];
19->14 [style = solid, label="i"];
20->24 [style = bold, label=""];
26->33 [style = dotted, label="true"];
22->33 [style = dashed, label="0"];
7->15 [style = bold, label=""];
21->1 [style = bold, label=""];
19->14 [style = bold, label=""];
15->32 [style = bold, label=""];
24->6 [style = bold, label=""];
6->7 [style = bold, label=""];
19->11 [style = solid, label="i"];
26->12 [style = dotted, label="true"];
14->10 [style = bold, label=""];
13->2 [style = bold, label=""];
14->11 [style = dotted, label="true"];
25->30 [style = bold, label=""];
26->22 [style = dotted, label="true"];
26->29 [style = bold, label=""];
31->23 [style = bold, label=""];
27->21 [style = bold, label=""];
1->5 [style = bold, label=""];
14->9 [style = dotted, label="true"];
}
