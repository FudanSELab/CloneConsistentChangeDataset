digraph {
11 [style = filled, label = "return incompleteStateFor(byte1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "return incompleteStateFor(byte1,UnsafeUtil.getByte(bytes,offset))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "unsafeIncompleteStateFor['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "int remaining@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "int byte1@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "{return incompleteStateFor(byte1,UnsafeUtil.getByte(bytes,offset))}@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "{throw new AssertionError()}@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "final int byte1@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final ByteBuffer buffer@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "incompleteStateFor['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "throw new AssertionError()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "unsafeIncompleteStateFor['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "remaining@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int byte1@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "{return incompleteStateFor(byte1,UnsafeUtil.getByte(bytes,offset),UnsafeUtil.getByte(bytes,offset + 1))}@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "byte(( bytes@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "{return incompleteStateFor(byte1)}@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "long offset@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "int remaining@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "return incompleteStateFor(byte1,buffer.get(index))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "long offset@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "byte(( bytes@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "return incompleteStateFor(byte1,buffer.get(index),buffer.get(index + 1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "return incompleteStateFor(byte1,UnsafeUtil.getByte(bytes,offset),UnsafeUtil.getByte(bytes,offset + 1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "return incompleteStateFor(byte1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "throw new AssertionError()@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final int index@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final int remaining@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
22->26 [style = bold, label=""];
15->13 [style = bold, label=""];
8->9 [style = solid, label="byte1"];
5->9 [style = bold, label=""];
5->23 [style = bold, label=""];
20->24 [style = solid, label="byte1"];
10->15 [style = solid, label="byte1"];
5->23 [style = dotted, label="true"];
12->15 [style = bold, label=""];
4->9 [style = solid, label="bytes"];
20->26 [style = solid, label="byte1"];
5->26 [style = bold, label=""];
7->11 [style = dashed, label="0"];
5->15 [style = bold, label=""];
11->12 [style = bold, label=""];
1->4 [style = dotted, label="true"];
17->5 [style = solid, label="remaining"];
5->12 [style = dotted, label="true"];
26->24 [style = bold, label=""];
21->24 [style = solid, label="index"];
5->15 [style = dotted, label="true"];
14->10 [style = dotted, label="true"];
7->3 [style = bold, label=""];
16->15 [style = solid, label="bytes"];
9->6 [style = bold, label=""];
10->11 [style = solid, label="byte1"];
10->12 [style = solid, label="byte1"];
3->9 [style = bold, label=""];
14->16 [style = dotted, label="true"];
8->7 [style = solid, label="byte1"];
5->13 [style = dotted, label="true"];
14->17 [style = dotted, label="true"];
5->24 [style = dotted, label="true"];
5->11 [style = dotted, label="true"];
8->3 [style = solid, label="byte1"];
5->6 [style = bold, label=""];
5->12 [style = bold, label=""];
5->22 [style = dotted, label="true"];
2->9 [style = solid, label="offset"];
5->24 [style = bold, label=""];
5->13 [style = bold, label=""];
16->12 [style = solid, label="bytes"];
25->20 [style = dotted, label="true"];
1->8 [style = dotted, label="true"];
5->7 [style = bold, label=""];
25->5 [style = bold, label=""];
5->26 [style = dotted, label="true"];
8->18 [style = dashed, label="0"];
5->11 [style = bold, label=""];
8->27 [style = dashed, label="0"];
27->5 [style = solid, label="remaining"];
1->0 [style = dotted, label="true"];
21->26 [style = solid, label="index"];
1->2 [style = dotted, label="true"];
25->27 [style = dotted, label="true"];
2->3 [style = solid, label="offset"];
0->5 [style = solid, label="remaining"];
20->22 [style = solid, label="byte1"];
5->22 [style = bold, label=""];
4->3 [style = solid, label="bytes"];
14->18 [style = dotted, label="true"];
18->12 [style = solid, label="offset"];
18->15 [style = solid, label="offset"];
25->19 [style = dotted, label="true"];
7->22 [style = dashed, label="0"];
25->21 [style = dotted, label="true"];
14->5 [style = bold, label=""];
24->23 [style = bold, label=""];
}
