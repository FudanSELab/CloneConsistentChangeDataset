digraph {
0 [style = filled, label = "testDataStreamAliases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-eu\"))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(mdBuilder.put(\"logs-postgres\",\"logs-postgres-au\",null),is(true))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertThat(mdBuilder.put(\"logs-postgres\",\"logs-postgres-au\"),is(false))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "mdBuilder.put(\"logs-postgres\",\"logs-postgres-eu\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-au\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testDataStreamAliases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertThat(e.getMessage(),equalTo(\"alias (logs-postgres( refers to a non existing data stream (logs-postgres-eu(\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Metadata.Builder mdBuilder = Metadata.builder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-us\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testDataStreamReferToNonExistingDataStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(mdBuilder.put(\"logs-postgres\",\"logs-postgres-eu\"),is(true))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(),containsInAnyOrder(\"logs-postgres-eu\"))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(mdBuilder.put(\"logs-postgres\",\"logs-postgres-au\",null),is(false))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(),containsInAnyOrder(\"logs-postgres-eu\",\"logs-postgres-us\",\"logs-postgres-au\"))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(mdBuilder.put(\"logs-postgres\",\"logs-postgres-us\",null),is(true))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"),notNullValue())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Metadata metadata = mdBuilder.build()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(mdBuilder.put(\"logs-postgres\",\"logs-postgres-eu\",null),is(true))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Metadata metadata = mdBuilder.build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Exception e = expectThrows(,null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"),notNullValue())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(mdBuilder.put(\"logs-postgres\",\"logs-postgres-us\"),is(true))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertThat(mdBuilder.put(\"logs-postgres\",\"logs-postgres-au\"),is(true))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13->10 [style = bold, label=""];
8->16 [style = bold, label=""];
6->21 [style = dashed, label="0"];
1->4 [style = bold, label=""];
15->13 [style = bold, label=""];
22->2 [style = bold, label=""];
18->23 [style = bold, label=""];
7->12 [style = bold, label=""];
1->15 [style = bold, label=""];
0->2 [style = bold, label=""];
10->3 [style = bold, label=""];
3->6 [style = bold, label=""];
2->18 [style = bold, label=""];
19->17 [style = bold, label=""];
9->8 [style = bold, label=""];
20->21 [style = bold, label=""];
5->16 [style = dashed, label="0"];
7->9 [style = bold, label=""];
9->19 [style = dashed, label="0"];
5->1 [style = bold, label=""];
11->13 [style = dashed, label="0"];
8->5 [style = bold, label=""];
16->1 [style = bold, label=""];
11->10 [style = bold, label=""];
12->8 [style = bold, label=""];
4->15 [style = dashed, label="0"];
14->2 [style = bold, label=""];
23->7 [style = bold, label=""];
9->12 [style = dashed, label="0"];
2->7 [style = bold, label=""];
4->11 [style = bold, label=""];
7->19 [style = bold, label=""];
17->20 [style = bold, label=""];
}
