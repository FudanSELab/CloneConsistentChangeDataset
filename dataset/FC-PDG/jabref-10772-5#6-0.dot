digraph {
0 [style = filled, label = "Assert.assertEquals(\"J. P. von Neumann\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Peter von Neumann\",true,false))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,true))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(\"J. P. von Neumann\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Peter von Neumann\",true,true))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false).equals(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false)))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testFixAuthorFirstNameFirstCommas['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Assert.assertEquals(\"J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",true,false))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "assertEquals(\"John Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",false,true))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(\"John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",false,true))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",true,true))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "Assert.assertEquals(\"von Neumann, Smith, and Black Brown\",AuthorList.fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertEquals(\"Smith\",AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\",false))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",true,false))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"J. Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",true,true))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(\"Smith\",AuthorList.fixAuthorLastNameOnlyCommas(\"John Smith\",true))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "testFixAuthorLastNameOnlyCommas['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertEquals(\"von Neumann, Smith and Black Brown\",AuthorList.fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(\"John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",false,false))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(\"J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",true,true))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(\"J. Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",true,false))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",true,true))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",true,true))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",false,true))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorLastNameOnlyCommas(\"\",false))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false).equals(AuthorList.fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Assert.assertEquals(\"Smith\",AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\",false))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",false,false))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testFixAuthorFirstNameFirstCommas['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,true))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "assertEquals(\"J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",true,false))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",true,false))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "Assert.assertEquals(\"Smith\",AuthorList.fixAuthorLastNameOnlyCommas(\"Smith, Jr, John\",true))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(\"John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",false,true))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertEquals(\"J. Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",true,true))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true).equals(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true)))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"J. P. von Neumann\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Peter von Neumann\",true,false))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "assertEquals(\"J. P. von Neumann\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Peter von Neumann\",true,true))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(\"J. von Neumann, J. Smith, and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false).equals(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false)))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",false,false))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "assertEquals(\"John von Neumann, John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,false))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertEquals(\"John Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",false,false))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(\"John Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",false,true))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true).equals(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true)))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",false,true))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorLastNameOnlyCommas(\"\",true))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Assert.assertTrue(AuthorList.fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true).equals(AuthorList.fixAuthorLastNameOnlyCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(\"John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",false,false))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"John von Neumann, John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,false))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertEquals(\"J. Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",true,false))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertEquals(\"J. von Neumann, J. Smith, and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(\"John Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",false,false))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->10 [style = bold, label=""];
49->45 [style = bold, label=""];
46->42 [style = bold, label=""];
52->44 [style = bold, label=""];
48->49 [style = bold, label=""];
32->21 [style = bold, label=""];
42->50 [style = bold, label=""];
7->17 [style = bold, label=""];
37->28 [style = bold, label=""];
9->11 [style = bold, label=""];
25->34 [style = bold, label=""];
16->8 [style = bold, label=""];
16->31 [style = dashed, label="0"];
13->35 [style = dashed, label="0"];
20->40 [style = dashed, label="0"];
0->19 [style = bold, label=""];
22->37 [style = bold, label=""];
2->1 [style = bold, label=""];
8->33 [style = dashed, label="0"];
35->22 [style = bold, label=""];
29->31 [style = bold, label=""];
28->38 [style = bold, label=""];
43->48 [style = bold, label=""];
11->26 [style = dashed, label="0"];
5->24 [style = dashed, label="0"];
2->27 [style = dashed, label="0"];
1->18 [style = bold, label=""];
8->6 [style = bold, label=""];
47->43 [style = bold, label=""];
24->29 [style = bold, label=""];
4->39 [style = dashed, label="0"];
51->52 [style = bold, label=""];
10->29 [style = dashed, label="0"];
8->46 [style = dashed, label="0"];
15->3 [style = bold, label=""];
17->38 [style = dashed, label="0"];
0->22 [style = dashed, label="0"];
11->2 [style = bold, label=""];
12->41 [style = dashed, label="0"];
38->32 [style = bold, label=""];
6->20 [style = bold, label=""];
3->23 [style = dashed, label="0"];
12->13 [style = bold, label=""];
18->34 [style = dashed, label="0"];
21->26 [style = bold, label=""];
26->27 [style = bold, label=""];
3->5 [style = bold, label=""];
23->24 [style = bold, label=""];
14->32 [style = dashed, label="0"];
5->48 [style = dashed, label="0"];
18->4 [style = bold, label=""];
10->16 [style = bold, label=""];
36->23 [style = bold, label=""];
7->28 [style = dashed, label="0"];
17->14 [style = bold, label=""];
9->21 [style = dashed, label="0"];
31->33 [style = bold, label=""];
50->51 [style = bold, label=""];
3->43 [style = dashed, label="0"];
34->39 [style = bold, label=""];
13->52 [style = dashed, label="0"];
20->12 [style = bold, label=""];
40->41 [style = bold, label=""];
33->30 [style = bold, label=""];
10->49 [style = dashed, label="0"];
30->40 [style = bold, label=""];
14->9 [style = bold, label=""];
6->30 [style = dashed, label="0"];
45->46 [style = bold, label=""];
1->25 [style = dashed, label="0"];
19->7 [style = bold, label=""];
27->25 [style = bold, label=""];
19->37 [style = dashed, label="0"];
13->0 [style = bold, label=""];
41->35 [style = bold, label=""];
}
