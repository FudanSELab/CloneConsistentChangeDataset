digraph {
18 [style = filled, label = "condition.setImplicitThis(false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "condition = new MethodCallExpression(logVariable,\"isEnabledFor\",args)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return new TernaryExpression(new BooleanExpression(condition),originalExpression,nullX())@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "String methodName@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "condition = new MethodCallExpression(logVariable,\"is\" + methodName.substring(0,1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",ArgumentListExpression.EMPTY_ARGUMENTS)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "condition.setImplicitThis(false)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final MethodCallExpression condition@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "AttributeExpression logLevelExpression = new AttributeExpression(new ClassExpression(classNode(PRIORITY_NAME)),new ConstantExpression(methodName.toUpperCase(Locale.ENGLISH)))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Expression originalExpression@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Expression originalExpression@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Expression logVariable@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "!\"trace\".equals(methodName)@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "wrapLoggingMethodCall['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "wrapLoggingMethodCall['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "wrapLoggingMethodCall['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return new TernaryExpression(new BooleanExpression(condition),originalExpression,nullX())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "MethodCallExpression condition = new MethodCallExpression(logVariable,\"is\" + methodName.substring(0,1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",ArgumentListExpression.EMPTY_ARGUMENTS)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ArgumentListExpression args = new ArgumentListExpression()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Expression logVariable@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "args.addExpression(logLevelExpression)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "return ternaryX(condition,originalExpression,nullX())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "String methodName@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Expression originalExpression@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
8->10 [style = bold, label=""];
20->17 [style = solid, label="condition"];
14->12 [style = dotted, label="true"];
0->3 [style = solid, label="condition"];
19->20 [style = bold, label=""];
12->17 [style = solid, label="originalExpression"];
1->3 [style = bold, label=""];
18->17 [style = bold, label=""];
6->0 [style = solid, label="logVariable"];
8->7 [style = dotted, label="true"];
19->12 [style = dotted, label="true"];
6->10 [style = solid, label="logVariable"];
19->21 [style = dotted, label="true"];
7->4 [style = bold, label=""];
8->10 [style = dotted, label="false"];
3->13 [style = dashed, label="0"];
12->10 [style = solid, label="logVariable"];
1->13 [style = bold, label=""];
8->4 [style = dotted, label="true"];
0->13 [style = solid, label="condition"];
8->7 [style = bold, label=""];
7->11 [style = solid, label="logLevelExpression"];
5->20 [style = dashed, label="0"];
12->0 [style = solid, label="logVariable"];
20->18 [style = bold, label=""];
14->16 [style = dotted, label="true"];
14->15 [style = dotted, label="true"];
10->13 [style = solid, label="condition"];
11->0 [style = bold, label=""];
2->9 [style = dotted, label="true"];
15->13 [style = solid, label="originalExpression"];
2->6 [style = dotted, label="true"];
0->1 [style = bold, label=""];
10->3 [style = solid, label="condition"];
19->22 [style = dotted, label="true"];
2->12 [style = dotted, label="true"];
4->0 [style = solid, label="args"];
8->11 [style = dotted, label="true"];
8->0 [style = dotted, label="true"];
4->11 [style = bold, label=""];
10->1 [style = bold, label=""];
2->5 [style = bold, label=""];
14->5 [style = bold, label=""];
9->3 [style = solid, label="originalExpression"];
21->20 [style = solid, label="logVariable"];
}
