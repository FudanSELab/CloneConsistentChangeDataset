digraph {
14 [style = filled, label = "long expectedRepairedAt = ActiveRepairService.instance.getParentRepairSession(repairID).repairedAt@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertTrue(pendingContains(sstable))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "long expectedRepairedAt = ActiveRepairService.instance.getParentRepairSession(repairID).repairedAt@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SSTableReader sstable = makeSSTable(true)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertFalse(sstable.isPendingRepair())@@@22@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertFalse(pendingContains(sstable))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "AbstractCompactionTask compactionTask = csm.getNextBackgroundTask(FBUtilities.nowInSeconds())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "mutateRepaired(sstable,repairID)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertFalse(pendingContains(repairID,sstable))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(sstable.isPendingRepair())@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "LocalSessionAccessor.prepareUnsafe(repairID,COORDINATOR,PARTICIPANTS)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertNotNull(pendingContains(repairID,sstable))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(sstable.isPendingRepair())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "compactionTask.execute(null)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertFalse(repairedContains(sstable))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertFalse(unrepairedContains(sstable))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertTrue(hasPendingStrategiesFor(repairID))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "mutateRepaired(sstable,repairID,false)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "Assert.assertTrue(pendingContains(repairID,sstable))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertFalse(hasTransientStrategiesFor(repairID))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertTrue(sstable.isRepaired())@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertNotNull(compactionTask)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertFalse(hasPendingStrategiesFor(repairID))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "SSTableDeletingNotification notification = new SSTableDeletingNotification(sstable)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertFalse(unrepairedContains(sstable))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "UUID repairID = registerSession(cfs,true,true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertFalse(sstable.isRepaired())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "csm.getForPendingRepair(repairID).forEach(null)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(repairedContains(sstable))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "sstableDeleted['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "cleanupCompactionFinalized['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertFalse(sstable.isPendingRepair())@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "csm.handleNotification(notification,cfs.getTracker())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertFalse(hasTransientStrategiesFor(repairID))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Assert.assertEquals(expectedRepairedAt,sstable.getSSTableMetadata().repairedAt)@@@27@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "cfs.getCompactionStrategyManager().enable()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "LocalSessionAccessor.finalizeUnsafe(repairID)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertSame(,compactionTask.getClass())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "csm.handleNotification(new SSTableAddedNotification(Collections.singleton(sstable),null),cfs.getTracker())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertTrue(sstable.isRepaired())@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "cleanupCompactionFinalized['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9->40 [style = dashed, label="0"];
17->8 [style = bold, label=""];
5->10 [style = bold, label=""];
0->16 [style = bold, label=""];
25->28 [style = bold, label=""];
36->40 [style = bold, label=""];
20->13 [style = bold, label=""];
13->32 [style = bold, label=""];
32->23 [style = bold, label=""];
9->0 [style = bold, label=""];
1->13 [style = solid, label="sstable"];
7->12 [style = bold, label=""];
39->5 [style = bold, label=""];
26->5 [style = bold, label=""];
1->22 [style = solid, label="sstable"];
1->40 [style = solid, label="sstable"];
1->6 [style = solid, label="sstable"];
2->18 [style = bold, label=""];
31->29 [style = bold, label=""];
38->36 [style = bold, label=""];
16->17 [style = bold, label=""];
8->7 [style = solid, label="compactionTask"];
15->19 [style = bold, label=""];
1->30 [style = bold, label=""];
5->22 [style = solid, label="repairID"];
1->35 [style = solid, label="sstable"];
11->2 [style = bold, label=""];
5->25 [style = solid, label="repairID"];
8->7 [style = bold, label=""];
5->30 [style = solid, label="repairID"];
1->3 [style = solid, label="sstable"];
1->22 [style = bold, label=""];
5->24 [style = solid, label="repairID"];
28->0 [style = bold, label=""];
5->40 [style = solid, label="repairID"];
30->11 [style = bold, label=""];
23->24 [style = bold, label=""];
1->34 [style = solid, label="sstable"];
5->21 [style = solid, label="repairID"];
1->28 [style = solid, label="sstable"];
5->27 [style = solid, label="repairID"];
3->20 [style = bold, label=""];
21->31 [style = bold, label=""];
5->6 [style = solid, label="repairID"];
29->33 [style = bold, label=""];
24->21 [style = bold, label=""];
18->6 [style = bold, label=""];
14->21 [style = solid, label="expectedRepairedAt"];
1->32 [style = solid, label="sstable"];
1->37 [style = solid, label="sstable"];
6->25 [style = dashed, label="0"];
5->10 [style = solid, label="repairID"];
38->36 [style = solid, label="notification"];
22->30 [style = dashed, label="0"];
1->30 [style = solid, label="sstable"];
17->8 [style = solid, label="compactionTask"];
5->14 [style = solid, label="repairID"];
1->38 [style = solid, label="sstable"];
2->27 [style = bold, label=""];
5->34 [style = solid, label="repairID"];
14->15 [style = bold, label=""];
12->3 [style = bold, label=""];
34->38 [style = bold, label=""];
37->35 [style = bold, label=""];
6->9 [style = bold, label=""];
21->33 [style = solid, label="expectedRepairedAt"];
10->1 [style = bold, label=""];
11->34 [style = bold, label=""];
5->23 [style = solid, label="repairID"];
13->14 [style = bold, label=""];
4->5 [style = bold, label=""];
5->2 [style = solid, label="repairID"];
22->11 [style = bold, label=""];
1->11 [style = solid, label="sstable"];
27->25 [style = bold, label=""];
40->37 [style = bold, label=""];
1->20 [style = solid, label="sstable"];
19->21 [style = bold, label=""];
}
