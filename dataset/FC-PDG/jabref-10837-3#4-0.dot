digraph {
18 [style = filled, label = "root.sortChildren(null,true)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "root.addChild(child3)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TreeNodeMock root = new TreeNodeMock()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "root.addChild(child1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TreeNodeTestData.TreeNodeMock child3 = new TreeNodeTestData.TreeNodeMock(\"c\")@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "sortChildrenSortsInFirstLevel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "node.addChild(child2)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(Arrays.asList(child1,child2,child3),node.getChildren())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "root.sortChildren(null,false)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "node.addChild(child3)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TreeNodeMock child3 = new TreeNodeMock(\"c\")@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "sortChildrenSortsInFirstLevel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TreeNodeTestData.TreeNodeMock child1 = new TreeNodeTestData.TreeNodeMock(\"a\")@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "node.addChild(child1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "sortChildrenRecursiveSortsInDeeperLevel['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TreeNodeTestData.TreeNodeMock root = new TreeNodeTestData.TreeNodeMock()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "root.addChild(child2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TreeNodeMock node = getNodeInSimpleTree(root)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(Arrays.asList(child1,child2,child3),root.getChildren())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TreeNodeTestData.TreeNodeMock child2 = new TreeNodeTestData.TreeNodeMock(\"b\")@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "TreeNodeMock child2 = new TreeNodeMock(\"b\")@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TreeNodeMock child1 = new TreeNodeMock(\"a\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->20 [style = solid, label="root"];
4->8 [style = solid, label="child1"];
4->14 [style = dashed, label="0"];
7->8 [style = bold, label=""];
3->9 [style = solid, label="child2"];
6->15 [style = solid, label="child3"];
6->2 [style = solid, label="child3"];
0->7 [style = bold, label=""];
17->18 [style = bold, label=""];
20->4 [style = bold, label=""];
21->17 [style = bold, label=""];
11->2 [style = solid, label="child3"];
9->2 [style = bold, label=""];
14->13 [style = bold, label=""];
4->0 [style = solid, label="child1"];
6->21 [style = solid, label="child3"];
11->9 [style = bold, label=""];
6->8 [style = solid, label="child3"];
6->19 [style = bold, label=""];
3->13 [style = dashed, label="0"];
5->4 [style = bold, label=""];
11->8 [style = solid, label="child3"];
3->15 [style = solid, label="child2"];
3->6 [style = bold, label=""];
6->9 [style = bold, label=""];
19->21 [style = bold, label=""];
12->10 [style = bold, label=""];
9->19 [style = dashed, label="0"];
13->11 [style = bold, label=""];
3->8 [style = solid, label="child2"];
8->15 [style = dashed, label="0"];
5->20 [style = bold, label=""];
13->9 [style = solid, label="child2"];
0->17 [style = dashed, label="0"];
16->5 [style = bold, label=""];
2->21 [style = dashed, label="0"];
5->10 [style = dashed, label="0"];
2->0 [style = bold, label=""];
14->0 [style = solid, label="child1"];
4->15 [style = solid, label="child1"];
6->11 [style = dashed, label="0"];
13->8 [style = solid, label="child2"];
4->17 [style = solid, label="child1"];
14->8 [style = solid, label="child1"];
4->3 [style = bold, label=""];
10->14 [style = bold, label=""];
3->19 [style = solid, label="child2"];
7->18 [style = dashed, label="0"];
1->5 [style = bold, label=""];
18->15 [style = bold, label=""];
}
