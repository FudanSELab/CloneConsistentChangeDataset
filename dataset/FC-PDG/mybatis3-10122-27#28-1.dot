digraph {
56 [style = filled, label = "assertThat(config.isAggressiveLazyLoading()).isTrue()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior()).isEqualTo(AutoMappingUnknownColumnBehavior.WARNING)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "assertThat(config.getTypeAliasRegistry().getTypeAliases().get(\"blogauthor\")).isEqualTo()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertThat(config.getAutoMappingBehavior()).isEqualTo(AutoMappingBehavior.NONE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase()).isTrue()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertThat(environment.getTransactionFactory()).isInstanceOf()@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled()).isFalse()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertNull(config.getDefaultFetchSize())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertThat(config.getProxyFactory()).isInstanceOf()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.STATEMENT)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled()).isTrue()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertThat(config.getTypeAliasRegistry().getTypeAliases().get(\"blog\")).isEqualTo()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertThat(config.getDefaultResultSetType()).isEqualTo(ResultSetType.SCROLL_INSENSITIVE)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Configuration config = builder.parse()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertNull(config.getLogImpl())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "String resource = \"org/apache/ibatis/builder/CustomizedSettingsMapperConfig.xml\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertThat(config.getDefaultScriptingLanuageInstance()).isInstanceOf()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "assertThat(config.getTypeAliasRegistry().getTypeAliases().get(\"cart\")).isEqualTo()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods()).isEqualTo(new HashSet<>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\",\"xxx\")))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.SIMPLE)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.BATCH)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertNotNull(config)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods()).isEqualTo(new HashSet<>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\")))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(config.isCacheEnabled()).isTrue()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(config.isCallSettersOnNulls()).isFalse()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(config.isShrinkWhitespacesInSql()).isFalse()@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "assertThat(config.getObjectWrapperFactory()).isInstanceOf()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(config.getJdbcTypeForNull()).isEqualTo(JdbcType.OTHER)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "ExampleObjectFactory objectFactory = (ExampleObjectFactory)config.getObjectFactory()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertThat(objectFactory.getProperties().size()).isEqualTo(1)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "String resource = \"org/apache/ibatis/builder/MinimalMapperConfig.xml\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(config.getDefaultStatementTimeout()).isEqualTo(10)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "assertThat(objectFactory.getProperties().getProperty(\"objectFactoryProperty\")).isEqualTo(\"100\")@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "Properties props = new Properties()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertThat(environment.getId()).isEqualTo(\"development\")@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertThat(config.isCacheEnabled()).isFalse()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "shouldSuccessfullyLoadMinimalXMLConfigFile['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.SESSION)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(config.isUseGeneratedKeys()).isFalse()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(config.isLazyLoadingEnabled()).isFalse()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(config.getProxyFactory()).isInstanceOf()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled()).isFalse()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled()).isTrue()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled()).isTrue()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "ExamplePlugin plugin = (ExamplePlugin)config.getInterceptors().get(0)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "shouldSuccessfullyLoadXMLConfigFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "assertThat(config.isLazyLoadingEnabled()).isTrue()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "XMLConfigBuilder builder = new XMLConfigBuilder(inputStream,null,props)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "assertThat(config.getDatabaseId()).isEqualTo(\"derby\")@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior()).isEqualTo(AutoMappingUnknownColumnBehavior.NONE)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertNull(config.getConfigurationFactory())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertThat(config.isUseGeneratedKeys()).isTrue()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled()).isFalse()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "assertThat(config.getLogPrefix()).isEqualTo(\"mybatis_\")@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "shouldSuccessfullyLoadMinimalXMLConfigFile['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "assertThat(config.getVfsImpl().getName()).isEqualTo(.getName())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(config.isUseColumnLabel()).isTrue()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertThat(config.getConfigurationFactory().getName()).isEqualTo(.getName())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase()).isFalse()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertThat(config.getReflectorFactory()).isInstanceOf()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertNull(config.getDefaultResultSetType())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@59@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "assertThat(config.getLogImpl().getName()).isEqualTo(.getName())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "assertThat(plugin.getProperties().getProperty(\"pluginProperty\")).isEqualTo(\"100\")@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "Environment environment = config.getEnvironment()@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "XMLConfigBuilder builder = new XMLConfigBuilder(inputStream)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertThat(plugin.getProperties().size()).isEqualTo(1)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertNull(config.getLogPrefix())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "assertThat(environment.getDataSource()).isInstanceOf()@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(config.getDefaultScriptingLanuageInstance()).isInstanceOf()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertNull(config.getDefaultStatementTimeout())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertThat(config.getJdbcTypeForNull()).isEqualTo(JdbcType.NULL)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "assertThat(config.isCallSettersOnNulls()).isTrue()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "props.put(\"prop2\",\"cccc\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(,JdbcType.VARCHAR)).isInstanceOf()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertThat(config.getMapperRegistry().getMappers().size()).isEqualTo(4)@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "assertThat(config.getDefaultFetchSize()).isEqualTo(100)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertThat(config.isUseColumnLabel()).isFalse()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(config.isAggressiveLazyLoading()).isFalse()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Configuration config = builder.parse()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->39 [style = dashed, label="0"];
36->59 [style = bold, label=""];
8->16 [style = bold, label=""];
29->15 [style = bold, label=""];
65->60 [style = bold, label=""];
53->69 [style = bold, label=""];
32->52 [style = bold, label=""];
78->70 [style = bold, label=""];
55->2 [style = bold, label=""];
61->57 [style = bold, label=""];
23->49 [style = dashed, label="0"];
40->38 [style = bold, label=""];
43->78 [style = bold, label=""];
13->1 [style = bold, label=""];
15->17 [style = bold, label=""];
76->73 [style = bold, label=""];
80->82 [style = bold, label=""];
39->77 [style = bold, label=""];
20->71 [style = dashed, label="0"];
27->79 [style = dashed, label="0"];
14->58 [style = dashed, label="0"];
66->50 [style = bold, label=""];
9->21 [style = bold, label=""];
62->49 [style = bold, label=""];
86->46 [style = bold, label=""];
37->75 [style = bold, label=""];
47->53 [style = bold, label=""];
1->4 [style = bold, label=""];
35->61 [style = bold, label=""];
27->30 [style = bold, label=""];
34->47 [style = bold, label=""];
56->71 [style = bold, label=""];
60->81 [style = bold, label=""];
42->68 [style = bold, label=""];
77->74 [style = bold, label=""];
71->35 [style = bold, label=""];
72->39 [style = bold, label=""];
15->36 [style = dashed, label="0"];
20->25 [style = bold, label=""];
13->67 [style = dashed, label="0"];
7->74 [style = dashed, label="0"];
4->0 [style = bold, label=""];
54->85 [style = bold, label=""];
26->27 [style = bold, label=""];
7->5 [style = bold, label=""];
45->86 [style = bold, label=""];
44->55 [style = bold, label=""];
22->69 [style = dashed, label="0"];
19->26 [style = bold, label=""];
73->48 [style = bold, label=""];
79->54 [style = bold, label=""];
21->7 [style = bold, label=""];
58->34 [style = bold, label=""];
10->56 [style = dashed, label="0"];
4->52 [style = dashed, label="0"];
24->57 [style = dashed, label="0"];
24->3 [style = bold, label=""];
3->29 [style = bold, label=""];
83->40 [style = bold, label=""];
68->36 [style = bold, label=""];
85->65 [style = bold, label=""];
46->83 [style = bold, label=""];
6->14 [style = solid, label="config"];
28->87 [style = dashed, label="0"];
12->24 [style = bold, label=""];
1->32 [style = dashed, label="0"];
16->53 [style = dashed, label="0"];
84->55 [style = solid, label="props"];
49->84 [style = bold, label=""];
5->19 [style = bold, label=""];
69->56 [style = bold, label=""];
38->66 [style = bold, label=""];
84->44 [style = bold, label=""];
18->6 [style = bold, label=""];
21->77 [style = dashed, label="0"];
33->43 [style = bold, label=""];
87->67 [style = bold, label=""];
82->37 [style = bold, label=""];
22->10 [style = bold, label=""];
50->64 [style = bold, label=""];
67->32 [style = bold, label=""];
14->2 [style = bold, label=""];
59->87 [style = bold, label=""];
63->80 [style = bold, label=""];
23->18 [style = bold, label=""];
70->45 [style = bold, label=""];
26->48 [style = dashed, label="0"];
19->73 [style = dashed, label="0"];
29->68 [style = dashed, label="0"];
0->9 [style = bold, label=""];
10->20 [style = bold, label=""];
57->42 [style = bold, label=""];
31->23 [style = bold, label=""];
52->72 [style = bold, label=""];
28->13 [style = bold, label=""];
2->58 [style = bold, label=""];
25->35 [style = dashed, label="0"];
16->22 [style = bold, label=""];
5->76 [style = dashed, label="0"];
81->63 [style = bold, label=""];
6->14 [style = bold, label=""];
17->28 [style = bold, label=""];
25->12 [style = bold, label=""];
41->51 [style = bold, label=""];
12->61 [style = dashed, label="0"];
2->34 [style = dashed, label="0"];
11->23 [style = bold, label=""];
48->79 [style = bold, label=""];
75->41 [style = bold, label=""];
3->42 [style = dashed, label="0"];
2->8 [style = bold, label=""];
74->76 [style = bold, label=""];
51->33 [style = bold, label=""];
}
