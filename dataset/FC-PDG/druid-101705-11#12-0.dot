digraph {
5 [style = filled, label = "testExpressionFilteringAndGroupingOnStringCastToNumber['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testExpressionFilteringAndGrouping['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testExpressionFilteringAndGrouping['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "cannotVectorize()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testQuery(\"SELECT\" + \" FLOOR(m1 / 2) * 2,\" + \" COUNT(*)\" + \"FROM druid.foo\" + \"WHERE FLOOR(m1 / 2) * 2 > -1\" + \"GROUP BY FLOOR(m1 / 2) * 2\" + \"ORDER BY 1 DESC\",ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setVirtualColumns(expressionVirtualColumn(\"v0\",\"(floor((\"m1\" / 2)) * 2)\",ValueType.FLOAT)).setDimFilter(bound(\"v0\",\"-1\",null,true,false,null,StringComparators.NUMERIC)).setDimensions(dimensions(new DefaultDimensionSpec(\"v0\",\"d0\",ValueType.FLOAT))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setLimitSpec(DefaultLimitSpec.builder().orderBy(new OrderByColumnSpec(\"d0\",OrderByColumnSpec.Direction.DESCENDING,StringComparators.NUMERIC)).build()).setContext(QUERY_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a728fe,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a72903,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a72908,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a7290d))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testQuery(\"SELECT\" + \" FLOOR(CAST(dim1 AS FLOAT) / 2) * 2,\" + \" COUNT(*)\" + \"FROM druid.foo\" + \"WHERE FLOOR(CAST(dim1 AS FLOAT) / 2) * 2 > -1\" + \"GROUP BY FLOOR(CAST(dim1 AS FLOAT) / 2) * 2\" + \"ORDER BY 1 DESC\",ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setVirtualColumns(expressionVirtualColumn(\"v0\",\"(floor((CAST(\"dim1\", 'DOUBLE') / 2)) * 2)\",ValueType.FLOAT)).setDimFilter(bound(\"v0\",\"-1\",null,true,false,null,StringComparators.NUMERIC)).setDimensions(dimensions(new DefaultDimensionSpec(\"v0\",\"d0\",ValueType.FLOAT))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"d0\",OrderByColumnSpec.Direction.DESCENDING,StringComparators.NUMERIC)),Integer.MAX_VALUE)).setContext(QUERY_CONTEXT_DEFAULT).build()),NullHandling.replaceWithDefault()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a72985,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a7298a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a7298f): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a72997,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a7299c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a729a1))@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testQuery(\"SELECT\" + \" FLOOR(m1 / 2) * 2,\" + \" COUNT(*)\" + \"FROM druid.foo\" + \"WHERE FLOOR(m1 / 2) * 2 > -1\" + \"GROUP BY FLOOR(m1 / 2) * 2\" + \"ORDER BY 1 DESC\",ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setVirtualColumns(expressionVirtualColumn(\"v0\",\"(floor((\"m1\" / 2)) * 2)\",ValueType.FLOAT)).setDimFilter(bound(\"v0\",\"-1\",null,true,false,null,StringComparators.NUMERIC)).setDimensions(dimensions(new DefaultDimensionSpec(\"v0\",\"d0\",ValueType.FLOAT))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"d0\",OrderByColumnSpec.Direction.DESCENDING,StringComparators.NUMERIC)),Integer.MAX_VALUE)).setContext(QUERY_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a7287c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a72881,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a72886,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a7288b))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->3 [style = bold, label=""];
5->1 [style = bold, label=""];
4->1 [style = bold, label=""];
1->6 [style = bold, label=""];
0->3 [style = dashed, label="0"];
1->0 [style = bold, label=""];
2->1 [style = bold, label=""];
0->6 [style = dashed, label="0"];
}
