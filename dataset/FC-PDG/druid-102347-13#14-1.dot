digraph {
10 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,currentOffsets)))))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Thread.sleep(10)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(2)))@@@45@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
72 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "verifyAll()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"9\",SHARD_ID0,\"1\"))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@43@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"0\",SHARD_ID0,\"0\"),ImmutableSet.of())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@50@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@41@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2009/P1D\",0)@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(5)))@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
77 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc5))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "SegmentDescriptor desc4 = sd(\"2011/P1D\",0)@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc7),publishedDescriptors())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2049/P1D\",0)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"9\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "recordSupplier.assign(EasyMock.anyObject())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "task.getRunner().getStatus() != SeekableStreamIndexTaskRunner.Status.PAUSED@@@21@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "SegmentDescriptor desc7 = sd(\"2013/P1D\",0)@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
70 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"10\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(STREAM,currentOffsets,currentOffsets.keySet())),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,nextOffsets)))))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@42@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\",SHARD_ID0,\"0\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@51@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Thread.sleep(10)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(0,3)).once().andReturn(records.subList(2,10)).once().andReturn(records.subList(9,11))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@42@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "recordSupplier.close()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@40@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "recordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "replayAll()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "SegmentDescriptor desc5 = sd(\"2011/P1D\",1)@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"2\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "task.getRunner().getStatus() != SeekableStreamIndexTaskRunner.Status.PAUSED@@@27@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"10\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "EasyMock.expectLastCall().once()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"0\"),ImmutableSet.of())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2010/P1D\",0)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@42@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
74 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "EasyMock.expect(recordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@44@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "SegmentDescriptor desc6 = sd(\"2012/P1D\",0)@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
60 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))))@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(0,5)).once().andReturn(records.subList(4,records.size())).once()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Assert.assertEquals(checkpoint2.getPartitionSequenceNumberMap(),nextOffsets)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(6)))@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
81 [style = filled, label = "Assert.assertEquals(6,task.getRunner().getRowIngestionMeters().getProcessed())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,currentOffsets)))))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc4))@@@52@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@39@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "maxTotalRows = 3L@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "maxRecordsPerPoll = 1@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "final Map<String,String> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
79 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@54@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2->35 [style = bold, label=""];
1->42 [style = dashed, label="0"];
57->53 [style = solid, label="desc4"];
74->26 [style = bold, label=""];
15->68 [style = solid, label="task"];
42->41 [style = bold, label=""];
12->82 [style = dashed, label="0"];
20->76 [style = solid, label="currentOffsets"];
28->1 [style = solid, label="desc6"];
45->53 [style = solid, label="desc3"];
3->33 [style = solid, label="desc4"];
62->61 [style = bold, label=""];
60->50 [style = bold, label=""];
15->39 [style = solid, label="task"];
52->59 [style = bold, label=""];
78->42 [style = bold, label=""];
46->48 [style = bold, label=""];
25->44 [style = bold, label=""];
15->31 [style = solid, label="task"];
7->26 [style = bold, label=""];
45->57 [style = bold, label=""];
17->38 [style = bold, label=""];
21->1 [style = solid, label="desc1"];
12->10 [style = bold, label=""];
10->31 [style = solid, label="task"];
20->16 [style = bold, label=""];
3->1 [style = solid, label="desc4"];
28->46 [style = dashed, label="0"];
35->2 [style = dotted, label="true"];
48->53 [style = solid, label="desc7"];
70->15 [style = bold, label=""];
76->81 [style = bold, label=""];
65->69 [style = bold, label=""];
39->24 [style = solid, label="desc3"];
31->33 [style = solid, label="desc3"];
8->74 [style = dashed, label="0"];
30->40 [style = bold, label=""];
68->78 [style = bold, label=""];
3->24 [style = solid, label="desc2"];
39->45 [style = dashed, label="0"];
70->15 [style = solid, label="endPartitions"];
10->27 [style = solid, label="task"];
1->53 [style = dashed, label="0"];
2->66 [style = bold, label=""];
31->33 [style = solid, label="desc5"];
27->1 [style = solid, label="desc7"];
55->60 [style = bold, label=""];
14->10 [style = solid, label="startPartitions"];
10->39 [style = solid, label="task"];
30->69 [style = bold, label=""];
2->20 [style = bold, label=""];
9->39 [style = bold, label=""];
24->59 [style = dashed, label="0"];
61->82 [style = bold, label=""];
15->28 [style = solid, label="task"];
1->42 [style = bold, label=""];
69->64 [style = bold, label=""];
2->66 [style = dotted, label="true"];
9->1 [style = solid, label="desc2"];
15->35 [style = solid, label="task"];
15->35 [style = bold, label=""];
11->18 [style = bold, label=""];
67->22 [style = bold, label=""];
19->37 [style = bold, label=""];
29->71 [style = bold, label=""];
19->60 [style = dashed, label="0"];
34->61 [style = dashed, label="0"];
28->42 [style = solid, label="desc4"];
75->4 [style = bold, label=""];
6->4 [style = bold, label=""];
35->0 [style = bold, label=""];
21->9 [style = bold, label=""];
66->2 [style = bold, label=""];
32->71 [style = dashed, label="0"];
8->74 [style = bold, label=""];
29->32 [style = bold, label=""];
37->50 [style = dashed, label="0"];
59->55 [style = bold, label=""];
4->10 [style = solid, label="baseSequenceName"];
42->73 [style = dashed, label="0"];
0->20 [style = bold, label=""];
10->15 [style = solid, label="task"];
5->52 [style = dashed, label="0"];
83->67 [style = bold, label=""];
31->28 [style = bold, label=""];
21->56 [style = dashed, label="0"];
78->79 [style = solid, label="desc7"];
26->76 [style = bold, label=""];
0->16 [style = solid, label="currentOffsets"];
22->11 [style = bold, label=""];
0->7 [style = solid, label="currentOffsets"];
31->1 [style = solid, label="desc5"];
49->45 [style = bold, label=""];
80->40 [style = bold, label=""];
62->15 [style = solid, label="startPartitions"];
14->7 [style = solid, label="startPartitions"];
44->62 [style = bold, label=""];
4->17 [style = bold, label=""];
64->80 [style = solid, label="nextOffsets"];
3->57 [style = dashed, label="0"];
9->5 [style = solid, label="desc2"];
10->9 [style = solid, label="task"];
35->2 [style = bold, label=""];
53->42 [style = bold, label=""];
12->10 [style = solid, label="endPartitions"];
44->14 [style = bold, label=""];
56->53 [style = solid, label="desc1"];
24->33 [style = bold, label=""];
4->15 [style = solid, label="baseSequenceName"];
81->21 [style = bold, label=""];
19->77 [style = dashed, label="0"];
20->26 [style = solid, label="currentOffsets"];
27->37 [style = solid, label="desc7"];
42->58 [style = bold, label=""];
68->77 [style = solid, label="desc5"];
5->24 [style = bold, label=""];
72->24 [style = bold, label=""];
16->30 [style = bold, label=""];
73->72 [style = bold, label=""];
82->70 [style = bold, label=""];
68->42 [style = solid, label="desc5"];
33->19 [style = bold, label=""];
57->47 [style = bold, label=""];
63->80 [style = bold, label=""];
39->72 [style = solid, label="desc1"];
27->48 [style = dashed, label="0"];
19->77 [style = bold, label=""];
15->3 [style = solid, label="task"];
69->65 [style = dotted, label="true"];
69->65 [style = bold, label=""];
31->47 [style = dashed, label="0"];
23->56 [style = bold, label=""];
27->1 [style = bold, label=""];
56->49 [style = bold, label=""];
10->15 [style = bold, label=""];
20->16 [style = solid, label="currentOffsets"];
0->20 [style = solid, label="currentOffsets"];
3->31 [style = bold, label=""];
14->62 [style = dashed, label="0"];
26->36 [style = bold, label=""];
20->30 [style = solid, label="currentOffsets"];
64->63 [style = bold, label=""];
28->68 [style = bold, label=""];
46->53 [style = solid, label="desc6"];
39->3 [style = bold, label=""];
14->34 [style = bold, label=""];
47->46 [style = bold, label=""];
48->53 [style = bold, label=""];
32->43 [style = bold, label=""];
9->49 [style = dashed, label="0"];
34->12 [style = bold, label=""];
54->4 [style = bold, label=""];
21->41 [style = solid, label="desc1"];
64->63 [style = solid, label="nextOffsets"];
8->7 [style = bold, label=""];
77->79 [style = bold, label=""];
4->83 [style = bold, label=""];
10->21 [style = solid, label="task"];
13->29 [style = bold, label=""];
39->42 [style = solid, label="desc1"];
17->83 [style = dashed, label="0"];
64->76 [style = solid, label="nextOffsets"];
36->23 [style = bold, label=""];
23->21 [style = bold, label=""];
71->43 [style = bold, label=""];
10->3 [style = solid, label="task"];
10->28 [style = solid, label="task"];
50->51 [style = bold, label=""];
28->19 [style = solid, label="desc4"];
18->13 [style = bold, label=""];
39->1 [style = solid, label="desc3"];
49->53 [style = solid, label="desc2"];
58->52 [style = bold, label=""];
28->27 [style = bold, label=""];
78->42 [style = solid, label="desc7"];
38->22 [style = bold, label=""];
43->25 [style = bold, label=""];
28->19 [style = solid, label="desc6"];
31->68 [style = dashed, label="0"];
42->73 [style = bold, label=""];
15->78 [style = solid, label="task"];
3->42 [style = solid, label="desc2"];
47->53 [style = solid, label="desc5"];
62->26 [style = solid, label="startPartitions"];
40->8 [style = bold, label=""];
31->42 [style = solid, label="desc3"];
41->5 [style = bold, label=""];
}
