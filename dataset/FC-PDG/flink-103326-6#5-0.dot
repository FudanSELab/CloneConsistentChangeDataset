digraph {
24 [style = filled, label = "verify(mock).close()@@@36@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "TimeWindow w = mock()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "InternalSingleValueWindowFunction<Long,String,Long,TimeWindow> windowFunction = new InternalSingleValueWindowFunction<>(mock)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "execConf.setParallelism(42)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "StreamingFunctionUtils.setOutputType(windowFunction,stringType,execConf)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testInternalSingleValueProcessWindowFunction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "windowFunction.process(42L,w,ctx,23L,c)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "windowFunction.close()@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "verify(mock).setRuntimeContext(rCtx)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "doAnswer(new Answer(){@Override public Object answer(InvocationOnMock invocationOnMock){ProcessWindowFunctionMock.Context c = (ProcessWindowFunction.Context)invocationOnMock.getArguments()(1(c.currentProcessingTime()c.currentWatermark()c.windowState()c.globalState()return null}}).when(mock).process(eq(42L),(ProcessWindowFunctionMock.Context)anyObject(),(Iterable<Long>)argThat(IsIterableContainingInOrder.contains(23L)),eq(c))@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Configuration config = new Configuration()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "verify(ctx).currentProcessingTime()@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "WindowFunctionMock mock = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "verify(ctx).currentWatermark()@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "InternalSingleValueProcessWindowFunction<Long,String,Long,TimeWindow> windowFunction = new InternalSingleValueProcessWindowFunction<>(mock)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ExecutionConfig execConf = new ExecutionConfig()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "verify(mock).apply(eq(42L),eq(w),(Iterable<Long>)argThat(IsIterableContainingInOrder.contains(23L)),eq(c))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "InternalWindowFunction.InternalWindowContext ctx = mock()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "windowFunction.close()@@@35@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "ProcessWindowFunctionMock mock = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "verify(ctx).windowState()@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "verify(mock).setOutputType(stringType,execConf)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verify(mock).close()@@@22@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Collector<String> c = (Collector<String>)mock()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "verify(ctx).globalState()@@@34@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "windowFunction.open(config)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testInternalSingleValueProcessWindowFunction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "testInternalSingleValueWindowFunction['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "verify(mock).process(eq(42L),(ProcessWindowFunctionMock.Context)anyObject(),(Iterable<Long>)argThat(IsIterableContainingInOrder.contains(23L)),eq(c))@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "verify(mock).open(config)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "RuntimeContext rCtx = mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "windowFunction.setRuntimeContext(rCtx)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "windowFunction.process(42L,w,ctx,23L,c)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->32 [style = dashed, label="0"];
26->24 [style = bold, label=""];
9->6 [style = solid, label="mock"];
23->9 [style = bold, label=""];
14->15 [style = solid, label="config"];
17->12 [style = solid, label="rCtx"];
5->8 [style = bold, label=""];
6->31 [style = solid, label="ctx"];
3->19 [style = solid, label="w"];
1->19 [style = solid, label="c"];
19->28 [style = bold, label=""];
32->5 [style = bold, label=""];
8->20 [style = solid, label="execConf"];
9->33 [style = dashed, label="0"];
14->4 [style = solid, label="config"];
15->4 [style = bold, label=""];
1->21 [style = solid, label="c"];
7->30 [style = dashed, label="0"];
33->32 [style = solid, label="mock"];
3->31 [style = solid, label="w"];
11->9 [style = bold, label=""];
4->17 [style = bold, label=""];
5->20 [style = solid, label="stringType"];
33->32 [style = bold, label=""];
33->1 [style = solid, label="mock"];
6->19 [style = bold, label=""];
1->6 [style = bold, label=""];
10->20 [style = solid, label="windowFunction"];
1->31 [style = solid, label="c"];
3->1 [style = bold, label=""];
27->22 [style = bold, label=""];
19->31 [style = dashed, label="0"];
1->7 [style = solid, label="c"];
1->30 [style = solid, label="c"];
6->21 [style = bold, label=""];
9->1 [style = solid, label="mock"];
9->10 [style = solid, label="mock"];
9->3 [style = solid, label="mock"];
32->20 [style = solid, label="windowFunction"];
8->2 [style = bold, label=""];
33->6 [style = solid, label="mock"];
20->13 [style = bold, label=""];
0->16 [style = bold, label=""];
21->19 [style = bold, label=""];
22->26 [style = bold, label=""];
6->31 [style = bold, label=""];
12->3 [style = bold, label=""];
2->20 [style = bold, label=""];
6->19 [style = solid, label="ctx"];
7->0 [style = bold, label=""];
33->17 [style = solid, label="mock"];
3->30 [style = solid, label="w"];
30->0 [style = bold, label=""];
33->3 [style = solid, label="mock"];
31->30 [style = bold, label=""];
18->12 [style = bold, label=""];
19->7 [style = bold, label=""];
8->13 [style = solid, label="execConf"];
13->14 [style = bold, label=""];
5->13 [style = solid, label="stringType"];
9->17 [style = solid, label="mock"];
17->18 [style = solid, label="rCtx"];
14->15 [style = bold, label=""];
25->27 [style = bold, label=""];
29->33 [style = bold, label=""];
10->5 [style = bold, label=""];
28->25 [style = bold, label=""];
9->10 [style = bold, label=""];
17->18 [style = bold, label=""];
}
