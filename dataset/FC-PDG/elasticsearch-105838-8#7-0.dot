digraph {
6 [style = filled, label = "SearchScrollRequest request = new SearchScrollRequest()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(1,shardSearchFailures.length)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action = new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId,logger,discoveryNodes,dummyListener(),null,request,null){@Override protected void executeInitialPhase(Transport.Connection connection,InternalScrollSearchRequest internalRequest,SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener){try {assertNotEquals(\"node2 is not available\",\"node2\",connection.getNode().getId())}catch (NullPointerException e) new Thread(null).start()}@Override protected Transport.Connection getConnection(String clusterAlias,DiscoveryNode node){return new SearchAsyncActionTests.MockConnection(node)}@Override protected SearchPhase moveToNextPhase(BiFunction<String,String,DiscoveryNode> clusterNodeLookup){assertEquals(1,movedCounter.incrementAndGet())return new SearchPhase(\"test\"){@Override public void run(){latch.countDown()}}}@Override protected void onFirstPhaseResult(int shardId,SearchAsyncActionTests.TestSearchPhaseResult result){results.setOnce(shardId,result)}}@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "action.run()@@@59@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(context(i(.getNode(),results.get(i).node.getId())@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ParsedScrollId scrollId = getParsedScrollId(new ScrollIdForNode(null,\"node1\",1),new ScrollIdForNode(null,\"node2\",2),new ScrollIdForNode(null,\"node3\",17),new ScrollIdForNode(null,\"node1\",0),new ScrollIdForNode(null,\"node3\",0))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testNodeNotAvailable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertNotNull(results.get(i))@@@67@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action = new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId,logger,discoveryNodes,listener,null,request,null){@Override protected void executeInitialPhase(Transport.Connection connection,InternalScrollSearchRequest internalRequest,SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener){new Thread(null).start()}@Override protected Transport.Connection getConnection(String clusterAlias,DiscoveryNode node){return new SearchAsyncActionTests.MockConnection(node)}@Override protected SearchPhase moveToNextPhase(BiFunction<String,String,DiscoveryNode> clusterNodeLookup){assertEquals(1,movedCounter.incrementAndGet())return new SearchPhase(\"TEST_PHASE\"){@Override public void run(){throw new IllegalArgumentException(\"BOOM\")}}}@Override protected void onFirstPhaseResult(int shardId,SearchAsyncActionTests.TestSearchPhaseResult result){results.setOnce(shardId,result)}}@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testNodeNotAvailable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().add(new DiscoveryNode(\"node1\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node3\",buildNewFakeTransportAddress(),Version.CURRENT)).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(0,shardSearchFailures.length)@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "int i = 0@@@64@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "context(i(.getNode().equals(\"node2\")@@@51@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testFailNextPhase['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "i++@@@66@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertNull(results.get(i))@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(context(i(.getNode(),results.get(i).node.getId())@@@69@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().add(new DiscoveryNode(\"node1\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node2\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node3\",buildNewFakeTransportAddress(),Version.CURRENT)).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ShardSearchFailure(( shardSearchFailures = action.buildShardFailures()@@@61@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ActionListener<SearchResponse> listener = new ActionListener<SearchResponse>(){@Override public void onResponse(SearchResponse o){try {fail(\"got a result\")}{latch.countDown()}}@Override public void onFailure(Exception e){try {assertTrue(e instanceof SearchPhaseExecutionException)SearchPhaseExecutionException ex = (SearchPhaseExecutionException)eassertEquals(\"BOOM\",ex.getCause().getMessage())assertEquals(\"TEST_PHASE\",ex.getPhaseName())assertEquals(\"Phase failed\",ex.getMessage())}{latch.countDown()}}}@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "AtomicInteger movedCounter = new AtomicInteger(0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(shardSearchFailures(0(.reason(),startsWith(\"java.lang.IllegalStateException: node (node2( is not available\"))@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "request.scroll(new Scroll(TimeValue.timeValueMinutes(1)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ScrollIdForNode(( context = scrollId.getContext()@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "latch.await()@@@60@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "i < results.length()@@@65@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"IllegalStateException(node (node2( is not available(\",shardSearchFailures(0(.reason())@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertEquals(context(i(.getScrollId(),results.get(i).getRequestId())@@@68@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
28->27 [style = solid, label="listener"];
5->17 [style = dotted, label="true"];
0->30 [style = bold, label=""];
1->17 [style = solid, label="i"];
17->5 [style = bold, label=""];
2->5 [style = bold, label=""];
6->7 [style = solid, label="request"];
22->18 [style = dotted, label="true"];
15->14 [style = bold, label=""];
26->10 [style = bold, label=""];
16->10 [style = bold, label=""];
0->19 [style = bold, label=""];
1->22 [style = solid, label="i"];
19->20 [style = bold, label=""];
27->9 [style = bold, label=""];
1->5 [style = solid, label="i"];
4->18 [style = dotted, label="false"];
4->21 [style = bold, label=""];
10->3 [style = bold, label=""];
14->28 [style = bold, label=""];
4->18 [style = bold, label=""];
22->2 [style = dotted, label="true"];
3->12 [style = bold, label=""];
20->1 [style = bold, label=""];
18->2 [style = bold, label=""];
22->18 [style = solid, label="i"];
12->6 [style = bold, label=""];
22->5 [style = solid, label="i"];
4->8 [style = dotted, label="false"];
22->5 [style = bold, label=""];
30->29 [style = bold, label=""];
3->7 [style = solid, label="discoveryNodes"];
11->15 [style = bold, label=""];
17->21 [style = solid, label="i"];
17->18 [style = solid, label="i"];
14->7 [style = bold, label=""];
6->27 [style = solid, label="request"];
1->22 [style = bold, label=""];
17->5 [style = solid, label="i"];
25->27 [style = solid, label="discoveryNodes"];
7->9 [style = bold, label=""];
8->17 [style = bold, label=""];
5->17 [style = solid, label="i"];
4->21 [style = dotted, label="true"];
22->5 [style = dotted, label="true"];
4->2 [style = dotted, label="false"];
5->22 [style = solid, label="i"];
19->30 [style = dashed, label="0"];
10->25 [style = bold, label=""];
25->12 [style = bold, label=""];
10->27 [style = solid, label="scrollId"];
19->23 [style = bold, label=""];
6->11 [style = bold, label=""];
5->4 [style = bold, label=""];
20->23 [style = dashed, label="0"];
23->1 [style = bold, label=""];
22->17 [style = bold, label=""];
5->4 [style = dotted, label="true"];
22->17 [style = dotted, label="true"];
28->27 [style = bold, label=""];
29->1 [style = bold, label=""];
10->7 [style = solid, label="scrollId"];
22->21 [style = solid, label="i"];
5->22 [style = bold, label=""];
21->17 [style = bold, label=""];
17->18 [style = bold, label=""];
2->8 [style = bold, label=""];
13->0 [style = bold, label=""];
9->13 [style = bold, label=""];
22->17 [style = solid, label="i"];
3->25 [style = dashed, label="0"];
}
