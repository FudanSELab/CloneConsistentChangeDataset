digraph {
9 [style = filled, label = "List<Path> result = fileFinder.findAssociatedFiles(localEntry,List.of(directory),PDF_EXTENSION)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testFindFiles['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "BibEntry localEntry = new BibEntry(StandardEntryType.Article).withCitationKey(\"pdfInDatabase\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "localEntry.setCitationKey(\"pdfInDatabase\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "List<Path> result = fileFinder.findAssociatedFiles(entry,dirs,extensions)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<Path> expected = List.of(directory.resolve(\"pdfInDatabase.pdf\"))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertEquals(Collections.singletonList(Path.of(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/pdfInDatabase.pdf\")),result)@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(expected,result)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "localEntry.setField(StandardField.YEAR,\"2001\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testYearAuthFirstPageFindFiles['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "List<String> extensions = Collections.singletonList(\"pdf\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/(year(_(auth(_(firstpage(.*\\.(extension(\",',')@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(Collections.singletonList(Path.of(\"src/test/resources/org/jabref/logic/importer/unlinkedFilesTestFolder/directory/subdirectory/2003_Hippel_209.pdf\")),result)@@@7@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testFindFiles['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<Path> result = fileFinder.findAssociatedFiles(localEntry,dirs,extensions)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/(citationkey(.*\\.(extension(\",',')@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<Path> dirs = Collections.singletonList(Path.of(FILES_DIRECTORY))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "RegExpBasedFileFinder fileFinder = new RegExpBasedFileFinder(\"**/(citationkey(.*\\.(extension(\",',')@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "BibEntry localEntry = new BibEntry(StandardEntryType.Article)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->5 [style = bold, label=""];
13->10 [style = bold, label=""];
4->1 [style = dashed, label="0"];
17->1 [style = solid, label="extensions"];
9->11 [style = bold, label=""];
9->12 [style = solid, label="result"];
1->5 [style = solid, label="result"];
2->3 [style = bold, label=""];
18->15 [style = bold, label=""];
11->12 [style = bold, label=""];
16->17 [style = bold, label=""];
11->12 [style = solid, label="expected"];
3->0 [style = bold, label=""];
6->4 [style = bold, label=""];
4->9 [style = dashed, label="0"];
5->6 [style = bold, label=""];
6->15 [style = dashed, label="0"];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
2->13 [style = dashed, label="0"];
18->1 [style = solid, label="dirs"];
1->4 [style = solid, label="extensions"];
4->8 [style = bold, label=""];
5->4 [style = solid, label="dirs"];
10->9 [style = bold, label=""];
14->13 [style = bold, label=""];
4->8 [style = solid, label="result"];
13->9 [style = solid, label="localEntry"];
17->18 [style = bold, label=""];
2->4 [style = solid, label="localEntry"];
15->1 [style = bold, label=""];
8->5 [style = dashed, label="0"];
}
