digraph {
3 [style = filled, label = "cqDUnitTest.createCQ(client,poolName,cqName,cqDUnitTest.cqs(0()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "cqDUnitTest.closeServer(server)@@@105@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "cqDUnitTest.closeClient(client)@@@92@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "ThreadUtils.join(processCqs,60 * 1000)@@@91@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "server.invokeAsync(new CacheSerializableRunnable(\"Update Region\"){public void run2(){try {Thread.sleep(1000)}catch (InterruptedException e) Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions(0()for (int i = numObjects + 1 i <= totalObjects i++){Portfolio p = new Portfolio(i)region.put(\"\" + i,p)}}})@@@73@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testEventsDuringQueryExecution['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AsyncInvocation executeCq = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ AsyncInvoke\"){@Override public void run2(){QueryService cqService = getCache().getQueryService()CqQuery cq1 = cqService.getCq(cqName)if (cq1 == null) {fail(\"Failed to get CQ \" + cqName)}SelectResults cqResults = nulltry {cqResults = cq1.executeWithInitialResults()}catch (Exception ex) final TestHook testHook = CqQueryImpl.testHookGeodeAwaitility.await().untilAsserted(new WaitCriterion(){@Override public boolean done(){return testHook.numQueuedEvents() > 0}@Override public String description(){return \"No queued events found.\"}})getCache().getLogger().fine(\"Queued Events Size\" + testHook.numQueuedEvents())CqQueryTestListener cqListener = (CqQueryTestListener)cq1.getCqAttributes().getCqListener()cqListener.waitForCreated(\"\" + totalObjects)int oldId = 0for (Object cqEvent : cqListener.events.toArray()){int newId = new Integer(cqEvent.toString()).intValue()if (oldId > newId) {fail(\"Queued events for CQ Listener during execution with \" + \"Initial results is not in the order in which they are created.\")}oldId = newId}HashSet ids = new HashSet(cqListener.events)for (Object o : cqResults.asList()){Struct s = (Struct)oids.add(s.get(\"key\"))}HashSet missingIds = new HashSet()String key = \"\"for (int i = 1 i <= totalObjects i++){key = \"\" + iif (!(ids.contains(key))) {missingIds.add(key)}}if (!missingIds.isEmpty()) {fail(\"Missing Keys in either ResultSet or the Cq Event list. \" + \" Missing keys : (size : \" + missingIds.size() + \"(\" + missingIds + \" Ids in ResultSet and CQ Events :\" + ids)}}})@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "VM client = host.getVM(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "server.invoke(new CacheSerializableRunnable(\"Update Region\"){@Override public void run2(){Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions(0()for (int i = 1 i <= numObjects i++){Portfolio p = new Portfolio(i)region.put(\"\" + i,p)}}})@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testEventsDuringQueryExecution['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "server.invoke(new CacheSerializableRunnable(\"Update Region\"){public void run2(){Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions(0()for (int i = 1 i <= numObjects i++){Portfolio p = new Portfolio(i)region.put(\"\" + i,p)}}})@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "cqDUnitTest.closeServer(server)@@@93@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final Host host = Host.getHost(0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "VM server = host.getVM(0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final int totalObjects = 500@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final int port = server.invoke(null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String poolName = \"testEventsDuringQueryExecution\"@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "cqDUnitTest.closeClient(client)@@@104@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "client.invoke(setTestHook())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "cqDUnitTest.createCQ(client,cqName,cqDUnitTest.cqs(0()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final VM client = host.getVM(1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final String host0 = NetworkUtils.getServerHostName(server.getHost())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final int numObjects = 200@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final int port = server.invoke(null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testEventsDuringQueryExecution['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\"){public void run2(){QueryService cqService = getCache().getQueryService()CqQuery cq1 = cqService.getCq(cqName)if (cq1 == null) {fail(\"Failed to get CQ \" + cqName)}SelectResults cqResults = nulltry {cqResults = cq1.executeWithInitialResults()}catch (Exception ex) CqQueryTestListener cqListener = (CqQueryTestListener)cq1.getCqAttributes().getCqListener()cqListener.waitForCreated(\"\" + totalObjects)int oldId = 0for (Object cqEvent : cqListener.events.toArray()){int newId = new Integer(cqEvent.toString()).intValue()if (oldId > newId) {fail(\"Queued events for CQ Listener during execution with \" + \"Initial results is not in the order in which they are created.\")}oldId = newId}HashSet ids = new HashSet(cqListener.events)for (Object o : cqResults.asList()){Struct s = (Struct)oids.add(s.get(\"key\"))}HashSet missingIds = new HashSet()String key = \"\"for (int i = 1 i <= totalObjects i++){key = \"\" + iif (!(ids.contains(key))) {missingIds.add(key)}}if (!missingIds.isEmpty()) {fail(\"Missing Keys in either ResultSet or the Cq Event list. \" + \" Missing keys : (size : \" + missingIds.size() + \"(\" + missingIds + \" Ids in ResultSet and CQ Events :\" + ids)}}})@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "cqDUnitTest.createPool(client,poolName,host0,port)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "cqDUnitTest.createServer(server)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final String cqName = \"testEventsDuringQueryExecution_0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "cqDUnitTest.createClient(client,port,host0)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->10 [style = solid, label="server"];
4->9 [style = solid, label="i"];
8->12 [style = solid, label="cqName"];
16->1 [style = solid, label="host0"];
1->24 [style = dashed, label="0"];
29->27 [style = bold, label=""];
4->12 [style = solid, label="i"];
28->16 [style = bold, label=""];
11->12 [style = bold, label=""];
27->25 [style = bold, label=""];
16->22 [style = solid, label="host0"];
14->26 [style = solid, label="i"];
11->26 [style = dashed, label="0"];
24->23 [style = bold, label=""];
14->9 [style = solid, label="totalObjects"];
22->24 [style = bold, label=""];
8->26 [style = solid, label="cqName"];
0->21 [style = dashed, label="0"];
6->25 [style = solid, label="server"];
2->13 [style = bold, label=""];
5->1 [style = bold, label=""];
4->11 [style = bold, label=""];
6->0 [style = bold, label=""];
5->3 [style = solid, label="poolName"];
21->24 [style = solid, label="client"];
9->15 [style = bold, label=""];
28->22 [style = solid, label="port"];
21->8 [style = bold, label=""];
7->9 [style = solid, label="totalObjects"];
0->8 [style = bold, label=""];
16->22 [style = bold, label=""];
23->9 [style = solid, label="numObjects"];
26->9 [style = bold, label=""];
3->7 [style = bold, label=""];
14->26 [style = bold, label=""];
2->28 [style = bold, label=""];
7->9 [style = solid, label="numObjects"];
7->14 [style = bold, label=""];
0->1 [style = solid, label="client"];
12->9 [style = bold, label=""];
6->21 [style = bold, label=""];
8->2 [style = bold, label=""];
1->3 [style = bold, label=""];
14->12 [style = solid, label="totalObjects"];
17->6 [style = bold, label=""];
13->16 [style = bold, label=""];
0->3 [style = solid, label="client"];
19->17 [style = bold, label=""];
8->3 [style = solid, label="cqName"];
7->4 [style = solid, label="numObjects"];
14->9 [style = solid, label="i"];
21->27 [style = solid, label="client"];
21->22 [style = solid, label="client"];
23->7 [style = bold, label=""];
8->24 [style = solid, label="cqName"];
16->5 [style = bold, label=""];
20->17 [style = bold, label=""];
18->17 [style = bold, label=""];
9->29 [style = bold, label=""];
14->4 [style = bold, label=""];
0->15 [style = solid, label="client"];
7->26 [style = solid, label="totalObjects"];
26->29 [style = solid, label="processCqs"];
23->14 [style = solid, label="numObjects"];
15->10 [style = bold, label=""];
5->1 [style = solid, label="poolName"];
13->28 [style = dashed, label="0"];
13->1 [style = solid, label="port"];
6->2 [style = solid, label="server"];
}
