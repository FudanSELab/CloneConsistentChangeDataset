digraph {
8 [style = filled, label = "final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Mockito.verify(mockIndexingServiceClient).compactSegments(ArgumentMatchers.anyString(),segmentsCaptor.capture(),ArgumentMatchers.anyInt(),ArgumentMatchers.any(),granularitySpecArgumentCaptor.capture(),ArgumentMatchers.any(),ArgumentMatchers.any())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "final String dataSource = DATA_SOURCE_PREFIX + 0@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final String dataSource = DATA_SOURCE_PREFIX + 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "compactionConfigs.add(new DataSourceCompactionConfig(dataSource,0,500L,null,new Period(\"PT0H\"),new UserCompactionTaskQueryTuningConfig(null,null,null,null,partitionsSpec,null,null,null,null,null,3,null,null,null,null,null,null),new UserCompactionTaskGranularityConfig(Granularities.YEAR,null),null,null))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "final String conflictTaskId = \"taskIdDummy\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Mockito.when(mockIndexingServiceClient.getActiveTasks()).thenReturn(ImmutableList.of(runningConflictCompactionTask))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ClientCompactionTaskGranularitySpec expected = new ClientCompactionTaskGranularitySpec(Granularities.YEAR,null)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Mockito.verify(mockIndexingServiceClient).cancelTask(conflictTaskId)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ClientCompactionTaskGranularitySpec actual = granularitySpecArgumentCaptor.getValue()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "doCompactSegments(compactSegments,compactionConfigs)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "TaskPayloadResponse runningConflictCompactionTaskPayload = new TaskPayloadResponse(conflictTaskId,new ClientCompactionTaskQuery(conflictTaskId,dataSource,new ClientCompactionIOConfig(new ClientCompactionIntervalSpec(Intervals.of(\"2000/2099\"),\"testSha256OfSortedSegmentIds\")),null,new ClientCompactionTaskGranularitySpec(Granularities.DAY,null),null))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(expected,actual)@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testCompactWithGranularitySpecConflictWithActiveCompactionTask['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testCompactWithGranularitySpecConflictWithActiveCompactionTask['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER,mockIndexingServiceClient)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ArgumentCaptor<ClientCompactionTaskGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertNotNull(actual)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ClientCompactionTaskGranularitySpec expected = new ClientCompactionTaskGranularitySpec(Granularities.YEAR,null)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "compactionConfigs.add(new DataSourceCompactionConfig(dataSource,0,500L,null,new Period(\"PT0H\"),new UserCompactionTaskQueryTuningConfig(null,null,null,null,partitionsSpec,null,null,null,null,null,3,null,null,null,null,null,null),new UserCompactionTaskGranularityConfig(Granularities.YEAR,null),null))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(datasourceToSegments.get(dataSource).size(),segmentsCaptor.getValue().size())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(expected,actual)@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Mockito.verify(mockIndexingServiceClient).compactSegments(ArgumentMatchers.anyString(),segmentsCaptor.capture(),ArgumentMatchers.anyInt(),ArgumentMatchers.any(),granularitySpecArgumentCaptor.capture(),ArgumentMatchers.any())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testCompactWithGranularitySpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "TaskPayloadResponse runningConflictCompactionTaskPayload = new TaskPayloadResponse(conflictTaskId,new ClientCompactionTaskQuery(conflictTaskId,dataSource,new ClientCompactionIOConfig(new ClientCompactionIntervalSpec(Intervals.of(\"2000/2099\"),\"testSha256OfSortedSegmentIds\"),null),null,new ClientCompactionTaskGranularitySpec(Granularities.DAY,null),null))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "TaskStatusPlus runningConflictCompactionTask = new TaskStatusPlus(conflictTaskId,\"groupId\",\"compact\",DateTimes.EPOCH,DateTimes.EPOCH,TaskState.RUNNING,RunnerTaskState.RUNNING,-1L,TaskLocation.unknown(),dataSource,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Mockito.when(mockIndexingServiceClient.getTaskPayload(ArgumentMatchers.eq(conflictTaskId))).thenReturn(runningConflictCompactionTaskPayload)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->17 [style = solid, label="compactSegments"];
17->10 [style = bold, label=""];
2->10 [style = solid, label="conflictTaskId"];
20->12 [style = solid, label="expected"];
9->11 [style = bold, label=""];
4->17 [style = bold, label=""];
1->18 [style = solid, label="actual"];
8->28 [style = solid, label="compactionConfigs"];
14->6 [style = solid, label="runningConflictCompactionTask"];
11->1 [style = solid, label="compactSegments"];
16->15 [style = solid, label="dataSource"];
26->3 [style = solid, label="compactSegments"];
14->22 [style = bold, label=""];
15->9 [style = solid, label="runningConflictCompactionTaskPayload"];
8->14 [style = bold, label=""];
10->3 [style = bold, label=""];
1->18 [style = bold, label=""];
15->6 [style = bold, label=""];
26->8 [style = bold, label=""];
22->9 [style = solid, label="runningConflictCompactionTaskPayload"];
7->4 [style = bold, label=""];
8->11 [style = solid, label="mockIndexingServiceClient"];
27->26 [style = solid, label="mockIndexingServiceClient"];
16->2 [style = bold, label=""];
12->0 [style = bold, label=""];
13->16 [style = bold, label=""];
2->15 [style = solid, label="conflictTaskId"];
15->22 [style = dashed, label="0"];
26->28 [style = solid, label="compactSegments"];
25->27 [style = bold, label=""];
19->1 [style = bold, label=""];
18->20 [style = bold, label=""];
7->24 [style = bold, label=""];
28->4 [style = bold, label=""];
16->14 [style = solid, label="dataSource"];
11->7 [style = solid, label="dataSource"];
7->28 [style = bold, label=""];
3->19 [style = bold, label=""];
20->5 [style = solid, label="actual"];
2->14 [style = solid, label="conflictTaskId"];
19->23 [style = bold, label=""];
16->22 [style = solid, label="dataSource"];
20->12 [style = bold, label=""];
24->17 [style = bold, label=""];
17->3 [style = bold, label=""];
21->16 [style = bold, label=""];
16->4 [style = solid, label="dataSource"];
16->24 [style = solid, label="dataSource"];
22->6 [style = bold, label=""];
1->12 [style = solid, label="actual"];
14->15 [style = bold, label=""];
7->17 [style = solid, label="compactionConfigs"];
0->5 [style = solid, label="expected"];
2->22 [style = solid, label="conflictTaskId"];
4->24 [style = dashed, label="0"];
6->9 [style = bold, label=""];
20->12 [style = solid, label="actual"];
8->11 [style = bold, label=""];
1->23 [style = dashed, label="0"];
11->23 [style = solid, label="compactSegments"];
23->18 [style = bold, label=""];
11->7 [style = bold, label=""];
2->8 [style = bold, label=""];
0->5 [style = bold, label=""];
27->26 [style = bold, label=""];
}
