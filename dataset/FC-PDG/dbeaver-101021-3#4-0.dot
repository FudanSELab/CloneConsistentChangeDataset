digraph {
12 [style = filled, label = "JsonObject jo = new JsonParser().parse(planData).getAsJsonObject()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ExecutionPlanDeserializer<OceanbasePlanNodeJSON> loader = new ExecutionPlanDeserializer<>()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<OceanbasePlanNodeJSON> rootNodes = loader.loadRoot(dataSource,jo,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "@NotNull Reader planData@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "@NotNull Reader planData@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "deserialize['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "return new OceanbasePlanJSON(dataSource,query,rootNodes)@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "JsonObject jo = new JsonParser().parse(planData).getAsJsonObject()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "deserialize['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Reader planData@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "String query = getQuery(jo)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "deserialize['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "{ExecutionPlanDeserializer<OcientPlanNodeJson> loader = new ExecutionPlanDeserializer<>()List<OcientPlanNodeJson> rootNodes = loader.loadRoot(dataSource,jo,null)return new OcientExecutionPlan(query,rootNodes)}@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "JsonObject jo = JsonParser.parseReader(planData).getAsJsonObject()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12->5 [style = solid, label="jo"];
12->5 [style = bold, label=""];
12->11 [style = solid, label="jo"];
6->7 [style = dashed, label="0"];
5->11 [style = solid, label="query"];
6->4 [style = solid, label="jo"];
4->2 [style = bold, label=""];
9->7 [style = bold, label=""];
13->10 [style = dotted, label="true"];
6->5 [style = solid, label="jo"];
7->4 [style = solid, label="jo"];
9->8 [style = dotted, label="true"];
1->3 [style = dotted, label="true"];
6->12 [style = dashed, label="0"];
6->5 [style = bold, label=""];
7->5 [style = bold, label=""];
1->6 [style = bold, label=""];
13->12 [style = bold, label=""];
5->0 [style = bold, label=""];
7->5 [style = solid, label="jo"];
0->4 [style = bold, label=""];
5->2 [style = solid, label="query"];
3->8 [style = dashed, label="0"];
5->11 [style = bold, label=""];
3->10 [style = dashed, label="0"];
4->2 [style = solid, label="rootNodes"];
}
