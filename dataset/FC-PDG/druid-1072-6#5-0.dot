digraph {
18 [style = filled, label = "index = JoinTestHelper.createFactIndexBuilder(tmpDir,rows).buildMMappedIndex(columnConfig)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "lookupVirtualColumns = VirtualColumns.create(ImmutableList.of(new ExpressionVirtualColumn(LOOKUP_COUNTRY_CODE_TO_NAME,\"lookup(countryIsoCode, '\" + LOOKUP_COUNTRY_CODE_TO_NAME + \"')\",ValueType.STRING,exprMacroTable),new ExpressionVirtualColumn(LOOKUP_COUNTRY_NUMBER_TO_NAME,\"lookup(countryNumber, '\" + LOOKUP_COUNTRY_NUMBER_TO_NAME + \"')\",ValueType.STRING,exprMacroTable)))@@@39@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "return Optional.of(new LookupExtractorFactoryContainer(\"v0\",LookupSegmentTest.LOOKUP_EXTRACTOR_FACTORY))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<JoinableClause> joinableClausesLookupLongKey = ImmutableList.of(new JoinableClause(prefix,LookupJoinable.wrap(JoinTestHelper.createCountryIsoCodeToNameLookup()),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"countryIsoCode == \"%sk\"\",prefix),prefix,ExprMacroTable.nil())))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "JoinFilterPreAnalysis preAnalysisIndexedTableStringKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(JoinableClauses.fromList(joinableClausesIndexedTableStringKey),VirtualColumns.EMPTY,null,false,false,false,0)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "hashJoinLookupLongKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),joinableClausesLookupLongKey,preAnalysisLookupLongKey)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "setup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "List<JoinableClause> joinableClausesIndexedTableStringKey = ImmutableList.of(new JoinableClause(prefix,new IndexedTableJoinable(JoinTestHelper.createCountriesIndexedTable()),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"countryIsoCode == \"%scountryIsoCode\"\",prefix),prefix,ExprMacroTable.nil())))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Map<String,String> countryCodeToNameMap = JoinTestHelper.createCountryIsoCodeToNameLookup().getMap()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "hashJoinIndexedTableLongKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),joinableClausesIndexedTableLonggKey,preAnalysisIndexedTableLongKey)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "JoinFilterPreAnalysis preAnalysisIndexedTableLongKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(JoinableClauses.fromList(joinableClausesIndexedTableLonggKey),VirtualColumns.EMPTY,null,false,false,false,0)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final String prefix = \"c.\"@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<JoinableClause> joinableClausesLookupStringKey = ImmutableList.of(new JoinableClause(prefix,LookupJoinable.wrap(JoinTestHelper.createCountryIsoCodeToNameLookup()),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"countryIsoCode == \"%sk\"\",prefix),prefix,ExprMacroTable.nil())))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final Map<String,String> countryNumberToNameMap = JoinTestHelper.createCountryNumberToNameLookup().getMap()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "hashJoinLookupStringKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),joinableClausesLookupStringKey,preAnalysisLookupStringKey)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "tmpDir = FileUtils.createTempDir()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final ExprMacroTable exprMacroTable = new ExprMacroTable(ImmutableList.of(new LookupExprMacro(new LookupExtractorFactoryContainerProvider(){@Override public Set<String> getAllLookupNames(){return ImmutableSet.of(LOOKUP_COUNTRY_CODE_TO_NAME,LOOKUP_COUNTRY_NUMBER_TO_NAME)}@Override public Optional<LookupExtractorFactoryContainer> get(String lookupName){if (LOOKUP_COUNTRY_CODE_TO_NAME.equals(lookupName)) {return Optional.of(new LookupExtractorFactoryContainer(\"0\",new MapLookupExtractorFactory(countryCodeToNameMap,false)))}if (LOOKUP_COUNTRY_NUMBER_TO_NAME.equals(lookupName)) {return Optional.of(new LookupExtractorFactoryContainer(\"0\",new MapLookupExtractorFactory(countryNumberToNameMap,false)))}{return Optional.empty()}}})))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<JoinableClause> joinableClausesIndexedTableLonggKey = ImmutableList.of(new JoinableClause(prefix,new IndexedTableJoinable(JoinTestHelper.createCountriesIndexedTable()),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"countryNumber == \"%scountryNumber\"\",prefix),prefix,ExprMacroTable.nil())))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "hashJoinLookupStringKeySegment = new HashJoinSegment(baseSegment,joinableClausesLookupStringKey,preAnalysisLookupStringKey)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "hashJoinIndexedTableLongKeySegment = new HashJoinSegment(baseSegment,joinableClausesIndexedTableLonggKey,preAnalysisIndexedTableLongKey)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "hashJoinLookupLongKeySegment = new HashJoinSegment(baseSegment,joinableClausesLookupLongKey,preAnalysisLookupLongKey)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "hashJoinIndexedTableStringKeySegment = new HashJoinSegment(baseSegment,joinableClausesIndexedTableStringKey,preAnalysisIndexedTableStringKey)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "LookupSegmentTest.LOOKUP_NAME.equals(lookupName)@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "JoinFilterPreAnalysis preAnalysisLookupLongKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(JoinableClauses.fromList(joinableClausesLookupLongKey),VirtualColumns.EMPTY,null,false,false,false,0)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final String lookupName@@@6@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "JoinFilterPreAnalysis preAnalysisLookupStringKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(JoinableClauses.fromList(joinableClausesLookupStringKey),VirtualColumns.EMPTY,null,false,false,false,0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "return Optional.empty()@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "get['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "setup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "hashJoinIndexedTableStringKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),joinableClausesIndexedTableStringKey,preAnalysisIndexedTableStringKey)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "ColumnConfig columnConfig = null@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "baseSegment = new QueryableIndexSegment(index,SegmentId.dummy(\"join\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->23 [style = solid, label="baseSegment"];
28->29 [style = bold, label=""];
5->8 [style = bold, label=""];
15->23 [style = bold, label=""];
12->1 [style = solid, label="prefix"];
16->0 [style = bold, label=""];
1->10 [style = solid, label="joinableClausesIndexedTableLonggKey"];
9->19 [style = solid, label="exprMacroTable"];
28->29 [style = dotted, label="false"];
15->14 [style = bold, label=""];
28->30 [style = bold, label=""];
7->4 [style = solid, label="joinableClausesIndexedTableStringKey"];
3->9 [style = solid, label="countryNumberToNameMap"];
6->14 [style = solid, label="joinableClausesLookupLongKey"];
17->8 [style = solid, label="baseSegment"];
17->25 [style = solid, label="baseSegment"];
2->3 [style = bold, label=""];
11->10 [style = solid, label="preAnalysisIndexedTableLongKey"];
12->17 [style = bold, label=""];
18->12 [style = bold, label=""];
4->21 [style = bold, label=""];
4->21 [style = solid, label="preAnalysisIndexedTableStringKey"];
8->6 [style = bold, label=""];
6->15 [style = solid, label="joinableClausesLookupLongKey"];
7->4 [style = bold, label=""];
4->22 [style = solid, label="preAnalysisIndexedTableStringKey"];
27->28 [style = solid, label="lookupName"];
8->24 [style = dashed, label="0"];
21->22 [style = dashed, label="0"];
5->24 [style = solid, label="preAnalysisLookupStringKey"];
15->23 [style = solid, label="preAnalysisLookupLongKey"];
6->23 [style = solid, label="joinableClausesLookupLongKey"];
25->2 [style = bold, label=""];
6->15 [style = bold, label=""];
1->11 [style = bold, label=""];
14->7 [style = bold, label=""];
7->21 [style = solid, label="joinableClausesIndexedTableStringKey"];
13->8 [style = solid, label="joinableClausesLookupStringKey"];
20->18 [style = bold, label=""];
3->9 [style = bold, label=""];
12->7 [style = solid, label="prefix"];
13->24 [style = solid, label="joinableClausesLookupStringKey"];
28->30 [style = dotted, label="true"];
26->0 [style = bold, label=""];
12->6 [style = solid, label="prefix"];
1->11 [style = solid, label="joinableClausesIndexedTableLonggKey"];
2->9 [style = solid, label="countryCodeToNameMap"];
14->23 [style = dashed, label="0"];
18->17 [style = solid, label="index"];
1->25 [style = solid, label="joinableClausesIndexedTableLonggKey"];
11->25 [style = solid, label="preAnalysisIndexedTableLongKey"];
11->10 [style = bold, label=""];
5->24 [style = bold, label=""];
21->1 [style = bold, label=""];
17->21 [style = solid, label="baseSegment"];
31->27 [style = dotted, label="true"];
13->5 [style = bold, label=""];
12->13 [style = solid, label="prefix"];
9->19 [style = bold, label=""];
17->10 [style = solid, label="baseSegment"];
0->20 [style = bold, label=""];
10->2 [style = bold, label=""];
17->13 [style = bold, label=""];
23->7 [style = bold, label=""];
17->22 [style = solid, label="baseSegment"];
22->1 [style = bold, label=""];
28->27 [style = bold, label=""];
31->28 [style = bold, label=""];
24->6 [style = bold, label=""];
20->18 [style = solid, label="columnConfig"];
15->14 [style = solid, label="preAnalysisLookupLongKey"];
4->22 [style = bold, label=""];
7->22 [style = solid, label="joinableClausesIndexedTableStringKey"];
5->8 [style = solid, label="preAnalysisLookupStringKey"];
17->14 [style = solid, label="baseSegment"];
10->25 [style = dashed, label="0"];
11->25 [style = bold, label=""];
17->24 [style = solid, label="baseSegment"];
13->5 [style = solid, label="joinableClausesLookupStringKey"];
}
