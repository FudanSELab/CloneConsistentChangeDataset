digraph {
16 [style = filled, label = "ValidatingCheckpointHandler validator = new ValidatingCheckpointHandler(-1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(validator.triggeredCheckpoints,contains(2L))@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(0,validator.getTriggeredCheckpointCounter())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "BufferOrEvent(( sequence = {createBarrier(2,0),createBarrier(2,1),createEndOfPartition(1),createBarrier(2,2)}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(sequence(i(,inputGate.pollNext().get())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ValidatingCheckpointHandler validator = new ValidatingCheckpointHandler(-1L)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "inputGate.getCheckpointBarrierHandler().setEnableCheckpointAfterTasksFinished(true)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "inputGate = createCheckpointedInputGate(3,sequence,validator)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(0,validator.getTriggeredCheckpointCounter())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "CheckpointBarrierTracker checkpointBarrierTracker = (CheckpointBarrierTracker)inputGate.getCheckpointBarrierHandler()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "++i@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testDeduplicateChannelsWithBothBarrierAndEndOfPartition['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int i = 0@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(sequence(3(,inputGate.pollNext().get())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testDeduplicateChannelsWithBothBarrierAndEndOfPartition['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "i <= 2@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int i = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "checkpointBarrierTracker.setEnableCheckpointAfterTasksFinished(true)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testDeduplicateChannelsWithBothBarrierAndEndOfPartition['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(0,validator.getAbortedCheckpointCounter())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
1->5 [style = bold, label=""];
17->10 [style = bold, label=""];
13->0 [style = solid, label="i"];
5->8 [style = bold, label=""];
16->11 [style = bold, label=""];
5->18 [style = dotted, label="true"];
12->16 [style = dashed, label="0"];
13->1 [style = solid, label="i"];
2->3 [style = bold, label=""];
1->5 [style = solid, label="i"];
12->11 [style = bold, label=""];
10->3 [style = solid, label="sequence"];
14->10 [style = bold, label=""];
16->11 [style = solid, label="validator"];
5->18 [style = bold, label=""];
1->0 [style = bold, label=""];
5->0 [style = dotted, label="true"];
9->10 [style = bold, label=""];
15->19 [style = bold, label=""];
3->4 [style = bold, label=""];
13->1 [style = bold, label=""];
11->15 [style = bold, label=""];
10->0 [style = solid, label="sequence"];
1->18 [style = solid, label="i"];
5->1 [style = bold, label=""];
19->1 [style = bold, label=""];
1->6 [style = bold, label=""];
10->16 [style = bold, label=""];
8->2 [style = bold, label=""];
10->18 [style = solid, label="sequence"];
10->12 [style = bold, label=""];
11->13 [style = bold, label=""];
6->8 [style = bold, label=""];
7->15 [style = dashed, label="0"];
12->11 [style = solid, label="validator"];
0->18 [style = dashed, label="0"];
10->2 [style = solid, label="sequence"];
1->0 [style = dotted, label="true"];
18->0 [style = bold, label=""];
1->5 [style = dotted, label="true"];
11->7 [style = bold, label=""];
10->11 [style = solid, label="sequence"];
0->5 [style = bold, label=""];
}
