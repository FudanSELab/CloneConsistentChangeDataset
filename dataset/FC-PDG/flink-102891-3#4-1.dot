digraph {
5 [style = filled, label = "CheckpointBarrierTracker checkpointBarrierTracker = (CheckpointBarrierTracker)inputGate.getCheckpointBarrierHandler()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(checkpointBarrierTracker.getPendingCheckpointIds(),contains(5L))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(checkpointBarrierTracker.getPendingCheckpointIds(),contains(5L))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(1,validator.getAbortedCheckpointCounter())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(boe,inputGate.pollNext().get())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "checkpointBarrierTracker.setEnableCheckpointAfterTasksFinished(true)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "inputGate = createCheckpointedInputGate(3,sequence,validator)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testTriggerCheckpointsWithEndOfPartition['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertEquals(0,validator.getAbortedCheckpointCounter())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "BufferOrEvent(( sequence = {createCancellationBarrier(4,0),createBarrier(4,1),createBarrier(5,1),createEndOfPartition(2)}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testCompleteAndRemoveAbortedCheckpointWithEndOfPartition['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(2,checkpointBarrierTracker.getNumOpenChannels())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ValidatingCheckpointHandler validator = new ValidatingCheckpointHandler(4)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(4L,validator.getLastCanceledCheckpointId())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(0,validator.getTriggeredCheckpointCounter())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ValidatingCheckpointHandler validator = new ValidatingCheckpointHandler(-1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(validator.triggeredCheckpoints,contains(4L))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testTriggerCheckpointsWithEndOfPartition['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
0->3 [style = bold, label=""];
5->10 [style = bold, label=""];
9->0 [style = bold, label=""];
2->4 [style = solid, label="sequence"];
16->8 [style = bold, label=""];
2->6 [style = bold, label=""];
12->15 [style = bold, label=""];
8->14 [style = bold, label=""];
0->15 [style = dashed, label="0"];
6->17 [style = dashed, label="0"];
15->16 [style = bold, label=""];
11->2 [style = bold, label=""];
17->4 [style = solid, label="validator"];
5->1 [style = bold, label=""];
6->4 [style = bold, label=""];
10->12 [style = bold, label=""];
7->2 [style = bold, label=""];
6->4 [style = solid, label="validator"];
3->8 [style = bold, label=""];
10->9 [style = bold, label=""];
9->12 [style = dashed, label="0"];
1->10 [style = bold, label=""];
4->5 [style = bold, label=""];
17->4 [style = bold, label=""];
13->2 [style = bold, label=""];
}
