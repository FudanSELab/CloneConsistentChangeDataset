digraph {
0 [style = filled, label = "assertEquals(expectedLabels,internalService.getMetadata().getLabels())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expectedLabels.put(Constants.LABEL_COMPONENT_KEY,Constants.LABEL_COMPONENT_JOB_MANAGER)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(expectedContainerPorts,this.resultMainContainer.getPorts())@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(1,resources.size())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(Constants.API_VERSION,internalService.getApiVersion())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Map<String,String> expectedLabels = getCommonLabels()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final Service internalService = (Service)resources.get(0)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(expectedServicePorts,internalService.getSpec().getPorts())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(InternalServiceDecorator.getNamespacedInternalServiceName(CLUSTER_ID,NAMESPACE),this.flinkConfig.getString(JobManagerOptions.ADDRESS))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "expectedLabels.putAll(userLabels)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "List<ServicePort> expectedServicePorts = Arrays.asList(new ServicePortBuilder().withName(Constants.JOB_MANAGER_RPC_PORT_NAME).withPort(RPC_PORT).build(),new ServicePortBuilder().withName(Constants.BLOB_SERVER_PORT_NAME).withPort(BLOB_SERVER_PORT).build())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testBuildAccompanyingKubernetesResources['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "testBuildAccompanyingKubernetesResources['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final List<HasMetadata> resources = this.internalServiceDecorator.buildAccompanyingKubernetesResources()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testMainContainerPorts['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNull(internalService.getSpec().getType())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(KubernetesUtils.getInternalServiceName(CLUSTER_ID),internalService.getMetadata().getName())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "final List<ContainerPort> expectedContainerPorts = Arrays.asList(new ContainerPortBuilder().withName(Constants.REST_PORT_NAME).withContainerPort(REST_PORT).build(),new ContainerPortBuilder().withName(Constants.JOB_MANAGER_RPC_PORT_NAME).withContainerPort(RPC_PORT).build(),new ContainerPortBuilder().withName(Constants.BLOB_SERVER_PORT_NAME).withContainerPort(BLOB_SERVER_PORT).build())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(InternalServiceDecorator.getInternalServiceName(CLUSTER_ID),internalService.getMetadata().getName())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(\"None\",internalService.getSpec().getClusterIP())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(expectedLabels,internalService.getSpec().getSelector())@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(KubernetesUtils.getInternalServiceName(CLUSTER_ID) + \".\" + NAMESPACE,this.flinkConfig.getString(JobManagerOptions.ADDRESS))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->5 [style = bold, label=""];
18->3 [style = bold, label=""];
9->11 [style = bold, label=""];
21->19 [style = bold, label=""];
17->6 [style = bold, label=""];
11->16 [style = dashed, label="0"];
19->20 [style = bold, label=""];
8->20 [style = dashed, label="0"];
13->17 [style = dashed, label="0"];
10->3 [style = bold, label=""];
16->2 [style = bold, label=""];
9->16 [style = bold, label=""];
11->2 [style = bold, label=""];
14->1 [style = bold, label=""];
0->7 [style = bold, label=""];
2->0 [style = solid, label="expectedLabels"];
8->17 [style = bold, label=""];
2->4 [style = solid, label="expectedLabels"];
2->0 [style = bold, label=""];
3->8 [style = bold, label=""];
5->4 [style = bold, label=""];
12->14 [style = bold, label=""];
12->14 [style = solid, label="expectedServicePorts"];
7->15 [style = bold, label=""];
15->12 [style = bold, label=""];
13->6 [style = bold, label=""];
6->9 [style = bold, label=""];
19->20 [style = solid, label="expectedContainerPorts"];
8->13 [style = bold, label=""];
}
