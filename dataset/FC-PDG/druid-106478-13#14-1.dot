digraph {
25 [style = filled, label = "List<QueryRunner<ResultRow>> singleSegmentRunners = new ArrayList<>()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "i < segmentCount@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int i = 0@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "i++@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i++@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "ExecutorService exec = Executors.newCachedThreadPool()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testBySegmentResultsUnOptimizedDimextraction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final GroupByQuery fullQuery = builder.build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "testBySegmentResultsOptimizedDimextraction['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "i < segmentCount@@@16@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(ImmutableMap.of(\"mezzanine\",\"mezzanine0\"),false),false,null,false,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setDimFilter(new SelectorDimFilter(\"quality\",\"mezzanine\",null)).setContext(ImmutableMap.of(\"bySegment\",true))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "i++@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "QueryToolChest toolChest = factory.getToolchest()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "singleSegmentRunners.add(toolChest.preMergeQueryDecoration(runner))@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "final GroupByQuery fullQuery = builder.build()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Result<BySegmentResultValue> singleSegmentResult = new Result<>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new BySegmentResultValueClass<>(Collections.singletonList(makeRow(fullQuery,\"2011-04-01\",\"alias\",\"mezzanine0\",\"rows\",6L,\"idx\",4420L)),QueryRunnerTestHelper.segmentId.toString(),Intervals.of(\"2011-04-02T00:00:00.000Z/2011-04-04T00:00:00.000Z\")))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "TestHelper.assertExpectedObjects(bySegmentResults,theRunner.run(QueryPlus.wrap(fullQuery)),\"bySegment\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Result<BySegmentResultValue> singleSegmentResult = new Result<>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new BySegmentResultValueClass<>(Collections.singletonList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine0\",\"rows\",6L,\"idx\",4420L)),QueryRunnerTestHelper.segmentId.toString(),Intervals.of(\"2011-04-02T00:00:00.000Z/2011-04-04T00:00:00.000Z\")))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int i = 0@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "int segmentCount = 32@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<Result> bySegmentResults = new ArrayList<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "bySegmentResults.add(singleSegmentResult)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "exec.shutdownNow()@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "cannotVectorize()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "bySegmentResults.add(singleSegmentResult)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "exec.shutdownNow()@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "singleSegmentRunners.add(toolChest.preMergeQueryDecoration(runner))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i++@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestHelper.assertExpectedObjects(bySegmentResults,theRunner.run(QueryPlus.wrap(fullQuery)),\"bySegment-dim-extraction\")@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<QueryRunner<Row>> singleSegmentRunners = new ArrayList<>()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "QueryRunner theRunner = toolChest.postMergeQueryDecoration(new FinalizeResultsQueryRunner<>(toolChest.mergeResults(factory.mergeRunners(Executors.newCachedThreadPool(),singleSegmentRunners)),toolChest))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(ImmutableMap.of(\"mezzanine\",\"mezzanine0\"),false),false,null,true,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setDimFilter(new SelectorDimFilter(\"quality\",\"mezzanine\",null)).overrideContext(ImmutableMap.of(\"bySegment\",true))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testBySegmentResultsUnOptimizedDimextraction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(ImmutableMap.of(\"mezzanine\",\"mezzanine0\"),false),false,null,false,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setDimFilter(new SelectorDimFilter(\"quality\",\"mezzanine\",null)).overrideContext(ImmutableMap.of(\"bySegment\",true))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "QueryRunner theRunner = toolChest.postMergeQueryDecoration(new FinalizeResultsQueryRunner<>(toolChest.mergeResults(factory.mergeRunners(Executors.newCachedThreadPool(),singleSegmentRunners)),toolChest))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->10 [style = solid, label="toolChest"];
6->9 [style = solid, label="i"];
14->10 [style = solid, label="singleSegmentRunners"];
29->30 [style = bold, label=""];
7->3 [style = solid, label="i"];
17->9 [style = bold, label=""];
19->17 [style = solid, label="i"];
12->15 [style = dotted, label="true"];
27->15 [style = bold, label=""];
12->7 [style = bold, label=""];
3->27 [style = bold, label=""];
3->27 [style = dotted, label="true"];
12->10 [style = bold, label=""];
10->8 [style = bold, label=""];
24->21 [style = bold, label=""];
20->25 [style = dashed, label="0"];
9->5 [style = bold, label=""];
20->12 [style = solid, label="i"];
8->4 [style = bold, label=""];
4->16 [style = bold, label=""];
14->20 [style = bold, label=""];
17->20 [style = bold, label=""];
18->9 [style = solid, label="i"];
8->34 [style = bold, label=""];
20->8 [style = solid, label="singleSegmentRunners"];
12->3 [style = dotted, label="true"];
17->26 [style = dotted, label="true"];
21->0 [style = bold, label=""];
1->4 [style = solid, label="fullQuery"];
0->23 [style = dashed, label="0"];
18->17 [style = solid, label="i"];
0->17 [style = solid, label="segmentCount"];
6->4 [style = solid, label="bySegmentResults"];
21->23 [style = solid, label="fullQuery"];
9->17 [style = bold, label=""];
31->2 [style = bold, label=""];
20->25 [style = bold, label=""];
13->11 [style = bold, label=""];
7->12 [style = dotted, label="true"];
7->12 [style = solid, label="i"];
7->33 [style = bold, label=""];
5->1 [style = bold, label=""];
0->23 [style = bold, label=""];
0->3 [style = solid, label="segmentCount"];
18->9 [style = bold, label=""];
18->17 [style = dotted, label="true"];
20->7 [style = bold, label=""];
32->31 [style = bold, label=""];
9->18 [style = solid, label="i"];
20->7 [style = solid, label="i"];
6->18 [style = bold, label=""];
12->15 [style = solid, label="i"];
31->7 [style = solid, label="segmentCount"];
19->17 [style = bold, label=""];
5->29 [style = dashed, label="0"];
3->12 [style = bold, label=""];
26->19 [style = bold, label=""];
15->3 [style = bold, label=""];
6->18 [style = solid, label="i"];
30->8 [style = solid, label="fullQuery"];
3->12 [style = solid, label="i"];
2->12 [style = solid, label="segmentCount"];
2->0 [style = bold, label=""];
9->19 [style = dotted, label="true"];
9->18 [style = bold, label=""];
9->19 [style = solid, label="i"];
3->8 [style = bold, label=""];
3->15 [style = dotted, label="true"];
18->9 [style = dotted, label="true"];
17->19 [style = dotted, label="true"];
2->9 [style = solid, label="segmentCount"];
9->19 [style = bold, label=""];
12->3 [style = bold, label=""];
0->8 [style = solid, label="bySegmentResults"];
12->7 [style = solid, label="i"];
23->18 [style = bold, label=""];
25->4 [style = solid, label="singleSegmentRunners"];
0->19 [style = solid, label="singleSegmentResult"];
17->26 [style = bold, label=""];
30->1 [style = bold, label=""];
21->16 [style = solid, label="fullQuery"];
0->6 [style = bold, label=""];
7->12 [style = bold, label=""];
31->18 [style = solid, label="segmentCount"];
9->17 [style = dotted, label="true"];
12->15 [style = bold, label=""];
9->17 [style = solid, label="i"];
18->17 [style = bold, label=""];
33->10 [style = bold, label=""];
17->9 [style = solid, label="i"];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
18->16 [style = solid, label="bySegmentResults"];
15->3 [style = solid, label="i"];
18->29 [style = bold, label=""];
20->4 [style = solid, label="toolChest"];
16->28 [style = bold, label=""];
25->12 [style = bold, label=""];
7->3 [style = dotted, label="true"];
23->26 [style = solid, label="singleSegmentResult"];
2->17 [style = solid, label="singleSegmentResult"];
11->24 [style = dashed, label="0"];
4->8 [style = dashed, label="0"];
1->14 [style = bold, label=""];
22->24 [style = bold, label=""];
12->3 [style = solid, label="i"];
14->8 [style = solid, label="toolChest"];
}
