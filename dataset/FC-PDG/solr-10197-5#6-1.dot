digraph {
10 [style = filled, label = "Object first@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "maxValue = abs@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "double indexOfMaxValue = -1@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "doWork['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory),first.getClass().getSimpleName()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "@SuppressWarnings({\"unchecked\"}) double(( d1 = ((List)first).stream().mapToDouble(null).toArray()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "!(first instanceof List)@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "double maxValue = -Double.MAX_VALUE@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "indexOfMaxValue = idx@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "@SuppressWarnings({\"unchecked\"}) double(( d2 = ((List)second).stream().mapToDouble(null).toArray()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "return (indexOfMaxValue + 1) - secondArray.length@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "doWork['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Object first@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "double(( secondArray = StreamSupport.stream(Spliterators.spliteratorUnknownSize(((LinkedList)((List)second).stream().collect(Collectors.toCollection(null))).descendingIterator(),Spliterator.ORDERED),false).mapToDouble(null).toArray()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "double(( d2 = ((List)second).stream().mapToDouble(null).toArray()@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Object second@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "null == second@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "null == first@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "double(( d1 = ((List)first).stream().mapToDouble(null).toArray()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "double(( firstArray = ((List)first).stream().mapToDouble(null).toArray()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "++idx@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "!(second instanceof List)@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "return cosineSimilarity(d1,d2)@@@17@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "double abs = Math.abs(convolution(idx()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "doWork['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "idx < convolution.length@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Object first@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return cosineSimilarity(d1,d2)@@@21@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "int idx = 0@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "double(( convolution = MathArrays.convolve(firstArray,secondArray)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "abs > maxValue@@@24@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory),first.getClass().getSimpleName()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->17 [style = solid, label="d2"];
0->13 [style = dotted, label="true"];
0->13 [style = bold, label=""];
23->27 [style = bold, label=""];
7->12 [style = bold, label=""];
4->10 [style = dotted, label="true"];
18->17 [style = solid, label="d1"];
15->7 [style = solid, label="first"];
26->25 [style = dotted, label="true"];
27->28 [style = bold, label=""];
26->25 [style = bold, label=""];
11->7 [style = solid, label="first"];
10->7 [style = solid, label="first"];
1->3 [style = bold, label=""];
4->11 [style = dotted, label="true"];
24->25 [style = solid, label="idx"];
24->33 [style = solid, label="idx"];
21->32 [style = dotted, label="true"];
6->0 [style = bold, label=""];
29->27 [style = solid, label="firstArray"];
24->26 [style = solid, label="idx"];
2->9 [style = bold, label=""];
1->18 [style = bold, label=""];
16->17 [style = bold, label=""];
29->23 [style = bold, label=""];
9->8 [style = bold, label=""];
12->6 [style = bold, label=""];
11->6 [style = solid, label="second"];
25->21 [style = solid, label="abs"];
9->23 [style = dashed, label="0"];
32->33 [style = bold, label=""];
13->1 [style = bold, label=""];
4->7 [style = bold, label=""];
26->22 [style = bold, label=""];
7->12 [style = dotted, label="true"];
14->7 [style = bold, label=""];
19->24 [style = bold, label=""];
1->3 [style = dotted, label="true"];
3->18 [style = bold, label=""];
21->33 [style = dotted, label="true"];
24->26 [style = bold, label=""];
14->15 [style = dotted, label="true"];
26->31 [style = dotted, label="true"];
6->5 [style = bold, label=""];
31->26 [style = bold, label=""];
21->31 [style = bold, label=""];
33->22 [style = solid, label="indexOfMaxValue"];
3->2 [style = bold, label=""];
5->0 [style = bold, label=""];
28->21 [style = solid, label="maxValue"];
26->21 [style = dotted, label="true"];
30->20 [style = dotted, label="true"];
0->1 [style = bold, label=""];
30->7 [style = bold, label=""];
2->29 [style = dashed, label="0"];
27->25 [style = solid, label="convolution"];
2->8 [style = solid, label="d1"];
7->6 [style = bold, label=""];
28->19 [style = bold, label=""];
21->32 [style = bold, label=""];
20->6 [style = solid, label="second"];
33->31 [style = bold, label=""];
14->11 [style = dotted, label="true"];
23->27 [style = solid, label="secondArray"];
1->2 [style = bold, label=""];
9->8 [style = solid, label="d2"];
32->21 [style = solid, label="maxValue"];
25->32 [style = solid, label="abs"];
1->29 [style = bold, label=""];
19->22 [style = solid, label="indexOfMaxValue"];
30->11 [style = dotted, label="true"];
3->29 [style = bold, label=""];
25->21 [style = bold, label=""];
6->5 [style = dotted, label="true"];
18->16 [style = bold, label=""];
}
