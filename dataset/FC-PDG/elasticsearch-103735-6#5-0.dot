digraph {
9 [style = filled, label = "testAllocator.addData(node1,\"allocId1\",randomBoolean())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testRestoreThrottle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(allocation.routingNodes().unassigned().ignored().isEmpty(),equalTo(false))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(allocation.routingNodesChanged(),equalTo(true))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testRestoreThrottle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testAllocator.addData(node1,\"some allocId\",randomBoolean())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).allocationId().getId(),equalTo(\"allocId1\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "RoutingAllocation allocation = getRestoreRoutingAllocation(throttleAllocationDeciders(),\"allocId\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertThat(allocation.routingNodes().unassigned().ignored().isEmpty(),equalTo(true))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final RoutingAllocation allocation = routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders(),randomFrom(CLUSTER_RECOVERED,INDEX_REOPENED),\"allocId1\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testFoundAllocationAndAllocating['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(),equalTo(1))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertClusterHealthStatus(allocation,ClusterHealthStatus.YELLOW)@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(),equalTo(node1.getId()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertClusterHealthStatus(allocation,ClusterHealthStatus.YELLOW)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "allocateAllUnassigned(allocation)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "RoutingAllocation allocation = getRestoreRoutingAllocation(throttleAllocationDeciders(),randomLong(),\"allocId\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14->16 [style = bold, label=""];
15->10 [style = bold, label=""];
6->0 [style = solid, label="allocation"];
9->0 [style = bold, label=""];
6->7 [style = dashed, label="0"];
2->3 [style = bold, label=""];
10->11 [style = solid, label="allocation"];
7->4 [style = bold, label=""];
13->11 [style = bold, label=""];
7->0 [style = solid, label="allocation"];
8->7 [style = bold, label=""];
4->0 [style = bold, label=""];
6->10 [style = dashed, label="0"];
12->13 [style = bold, label=""];
6->4 [style = bold, label=""];
4->9 [style = dashed, label="0"];
5->6 [style = bold, label=""];
6->3 [style = solid, label="allocation"];
2->14 [style = dashed, label="0"];
0->1 [style = bold, label=""];
1->14 [style = bold, label=""];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
16->12 [style = bold, label=""];
7->3 [style = solid, label="allocation"];
10->0 [style = solid, label="allocation"];
}
