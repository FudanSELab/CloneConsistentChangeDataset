digraph {
48 [style = filled, label = "shouldRequireCopartitionedStreams['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final TestInputTopic<Integer,String> inputTopic1 = driver.createInputTopic(topic1,new IntegerSerializer(),new StringSerializer(),Instant.ofEpochMilli(0L),Duration.ZERO)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final KStream<Integer,String> stream2@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "i < 2@@@47@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"B0+a0\",0),new KeyValueTimestamp<>(1,\"B1+a1\",0))@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "inputTopic1.pipeInput(expectedKey,\"C\" + expectedKey)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+b0\",0L),new KeyValueTimestamp<>(0,\"B0+b0\",0L),new KeyValueTimestamp<>(1,\"A1+b1\",0L),new KeyValueTimestamp<>(1,\"B1+b1\",0L),new KeyValueTimestamp<>(2,\"B2+b2\",0L),new KeyValueTimestamp<>(3,\"B3+b3\",0L))@@@41@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final KStream<Integer,String> joined@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "joined = stream1.outerJoin(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.ofTimeDifferenceAndGrace(ofMillis(100L),ofHours(24L)),StreamJoined.with(Serdes.Integer(),Serdes.String(),Serdes.String()))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(streamTopic,tableTopic)),copartitionGroups.iterator().next())@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+b0\",0),new KeyValueTimestamp<>(0,\"B0+b0\",0),new KeyValueTimestamp<>(1,\"A1+b1\",0),new KeyValueTimestamp<>(1,\"B1+b1\",0),new KeyValueTimestamp<>(2,\"B2+b2\",0),new KeyValueTimestamp<>(3,\"B3+b3\",0))@@@41@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final MockProcessor<Integer,String> processor = supplier.theCapturedProcessor()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "inputTopic2.pipeInput(expectedKey,\"b\" + expectedKey)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "stream1 = builder.stream(topic1,consumed)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "inputTopic1.pipeInput(expectedKeys(i(,\"A\" + expectedKeys(i()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+a0\",0),new KeyValueTimestamp<>(1,\"A1+a1\",0))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+c0\",0L),new KeyValueTimestamp<>(0,\"B0+c0\",0L),new KeyValueTimestamp<>(0,\"C0+c0\",0L),new KeyValueTimestamp<>(1,\"A1+c1\",0L),new KeyValueTimestamp<>(1,\"B1+c1\",0L),new KeyValueTimestamp<>(1,\"C1+c1\",0L))@@@51@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "final KStream<Integer,String> stream1@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i < 2@@@29@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i++@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "int i = 0@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testOuterJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "int i = 0@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"C0+a0\",0),new KeyValueTimestamp<>(0,\"C0+b0\",0),new KeyValueTimestamp<>(1,\"C1+a1\",0),new KeyValueTimestamp<>(1,\"C1+b1\",0),new KeyValueTimestamp<>(2,\"C2+b2\",0),new KeyValueTimestamp<>(3,\"C3+b3\",0))@@@45@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "joined = stream1.outerJoin(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.of(ofMillis(100)),StreamJoined.with(Serdes.Integer(),Serdes.String(),Serdes.String()))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testOuterJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final MockProcessorSupplier<Integer,String> supplier = new MockProcessorSupplier<>()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "i++@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int i = 0@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"C0+a0\",0L),new KeyValueTimestamp<>(0,\"C0+b0\",0L),new KeyValueTimestamp<>(1,\"C1+a1\",0L),new KeyValueTimestamp<>(1,\"C1+b1\",0L),new KeyValueTimestamp<>(2,\"C2+b2\",0L),new KeyValueTimestamp<>(3,\"C3+b3\",0L))@@@45@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "stream2 = builder.stream(topic2,consumed)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "processor.checkAndClearProcessResult()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final TestInputTopic<Integer,String> inputTopic2 = driver.createInputTopic(topic2,new IntegerSerializer(),new StringSerializer(),Instant.ofEpochMilli(0L),Duration.ZERO)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "inputTopic1.pipeInput(expectedKey,\"B\" + expectedKey)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+c0\",0),new KeyValueTimestamp<>(0,\"B0+c0\",0),new KeyValueTimestamp<>(0,\"C0+c0\",0),new KeyValueTimestamp<>(1,\"A1+c1\",0),new KeyValueTimestamp<>(1,\"B1+c1\",0),new KeyValueTimestamp<>(1,\"C1+c1\",0))@@@51@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "i < 2@@@23@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final int(( expectedKeys = new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@cb6036@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"B0+a0\",0L),new KeyValueTimestamp<>(1,\"B1+a1\",0L))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+a0\",0L),new KeyValueTimestamp<>(1,\"A1+a1\",0L))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "i++@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "inputTopic2.pipeInput(expectedKeys(i(,\"a\" + expectedKeys(i()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "inputTopic2.pipeInput(expectedKeys(i(,\"c\" + expectedKeys(i()@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "joined.process(supplier)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
9->0 [style = solid, label="i"];
7->32 [style = bold, label=""];
8->26 [style = solid, label="i"];
32->23 [style = bold, label=""];
29->30 [style = bold, label=""];
21->8 [style = bold, label=""];
28->9 [style = bold, label=""];
37->15 [style = bold, label=""];
12->37 [style = solid, label="expectedKeys"];
25->31 [style = bold, label=""];
16->42 [style = solid, label="stream2"];
0->14 [style = bold, label=""];
33->25 [style = solid, label="i"];
34->24 [style = bold, label=""];
15->0 [style = bold, label=""];
36->18 [style = bold, label=""];
32->17 [style = solid, label="supplier"];
16->42 [style = bold, label=""];
13->22 [style = bold, label=""];
27->33 [style = bold, label=""];
31->3 [style = dotted, label="true"];
33->31 [style = solid, label="i"];
31->25 [style = dotted, label="true"];
8->18 [style = bold, label=""];
39->34 [style = bold, label=""];
8->36 [style = solid, label="i"];
16->11 [style = solid, label="stream2"];
12->1 [style = bold, label=""];
35->21 [style = bold, label=""];
35->40 [style = bold, label=""];
9->37 [style = solid, label="i"];
18->4 [style = bold, label=""];
17->2 [style = bold, label=""];
22->20 [style = bold, label=""];
18->26 [style = dotted, label="true"];
0->37 [style = dotted, label="true"];
5->7 [style = bold, label=""];
11->17 [style = bold, label=""];
29->38 [style = bold, label=""];
11->42 [style = dashed, label="0"];
18->41 [style = bold, label=""];
31->28 [style = bold, label=""];
31->3 [style = bold, label=""];
20->19 [style = bold, label=""];
38->35 [style = bold, label=""];
15->37 [style = solid, label="i"];
0->39 [style = bold, label=""];
36->18 [style = solid, label="i"];
44->29 [style = bold, label=""];
22->45 [style = dashed, label="0"];
18->36 [style = dotted, label="true"];
18->26 [style = bold, label=""];
14->39 [style = dashed, label="0"];
24->44 [style = dashed, label="0"];
25->31 [style = solid, label="i"];
10->6 [style = bold, label=""];
9->15 [style = solid, label="i"];
30->35 [style = bold, label=""];
34->44 [style = bold, label=""];
12->26 [style = solid, label="expectedKeys"];
36->26 [style = solid, label="i"];
33->3 [style = solid, label="i"];
6->12 [style = bold, label=""];
23->16 [style = bold, label=""];
16->11 [style = bold, label=""];
9->0 [style = bold, label=""];
0->37 [style = bold, label=""];
3->25 [style = bold, label=""];
8->18 [style = solid, label="i"];
0->15 [style = dotted, label="true"];
26->36 [style = bold, label=""];
42->17 [style = bold, label=""];
14->34 [style = bold, label=""];
47->46 [style = bold, label=""];
24->29 [style = bold, label=""];
15->0 [style = solid, label="i"];
43->6 [style = bold, label=""];
2->13 [style = bold, label=""];
48->47 [style = bold, label=""];
19->27 [style = bold, label=""];
33->31 [style = bold, label=""];
46->45 [style = bold, label=""];
25->3 [style = solid, label="i"];
40->8 [style = bold, label=""];
12->3 [style = solid, label="expectedKeys"];
}
