digraph {
8 [style = filled, label = "Assert.assertEquals(score,0.0)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "when(_testNode.getAssignedTopStatePartitionsCount()).thenReturn(20)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "double normalizedScore = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(_testNode.getAssignedTopStatePartitionsCount()).thenReturn(0)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "double score = _constraint.getAssignmentScore(_testNode,_testReplica,_clusterContext)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(score,0.5)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(normalizedScore,0.5)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "when(_clusterContext.getEstimatedMaxTopStateCount()).thenReturn(20)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(score,1.0)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "testGetAssignmentScoreWhenReplicaIsTopStateLightLoad['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(_testReplica.isReplicaTopState()).thenReturn(true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testGetAssignmentScoreWhenReplicaIsTopStateLightLoad['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(normalizedScore,1.0)@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testGetAssignmentScoreWhenReplicaIsTopStateHeavyLoad['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
3->1 [style = bold, label=""];
4->6 [style = bold, label=""];
1->10 [style = dashed, label="0"];
2->8 [style = dashed, label="0"];
6->0 [style = solid, label="normalizedScore"];
7->3 [style = bold, label=""];
6->2 [style = bold, label=""];
8->0 [style = bold, label=""];
3->10 [style = bold, label=""];
12->13 [style = bold, label=""];
2->12 [style = dashed, label="0"];
4->8 [style = solid, label="score"];
2->0 [style = bold, label=""];
10->5 [style = bold, label=""];
11->3 [style = bold, label=""];
6->13 [style = solid, label="normalizedScore"];
5->4 [style = bold, label=""];
6->8 [style = bold, label=""];
0->13 [style = dashed, label="0"];
9->3 [style = bold, label=""];
4->2 [style = solid, label="score"];
4->12 [style = solid, label="score"];
6->12 [style = bold, label=""];
}
