digraph {
6 [style = filled, label = "assertThat(Pair.adjacents(ImmutableList.of(\"a\")).iterator().hasNext(),is(false))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(Pair.firstAnd(ImmutableList.of(\"a\")).iterator().hasNext(),is(false))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(result.toString(),equalTo(\"(<a, b>, <a, c>(\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<String> result = new ArrayList<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "result.add(pair.toString())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testPairFirstAnd['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(Pair.firstAnd(ImmutableList.of()).iterator().hasNext(),is(false))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "List<String> result = new ArrayList<String>()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<String> strings = Arrays.asList(\"a\",\"b\",\"c\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(Pair.adjacents(ImmutableList.of()).iterator().hasNext(),is(false))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testPairAdjacents['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "testPairAdjacents['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(result.toString(),equalTo(\"(<a, b>, <b, c>(\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(Iterables.size(Pair.adjacents(Collections.nCopies(100,null))),equalTo(99))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(Iterables.size(Pair.firstAnd(Collections.nCopies(100,null))),equalTo(99))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0->14 [style = dashed, label="0"];
6->1 [style = bold, label=""];
4->3 [style = bold, label=""];
14->10 [style = bold, label=""];
5->2 [style = bold, label=""];
12->2 [style = bold, label=""];
6->10 [style = dashed, label="0"];
2->7 [style = bold, label=""];
7->4 [style = bold, label=""];
2->9 [style = bold, label=""];
8->2 [style = bold, label=""];
3->13 [style = dashed, label="0"];
0->6 [style = bold, label=""];
13->14 [style = bold, label=""];
7->9 [style = dashed, label="0"];
1->11 [style = dashed, label="0"];
3->0 [style = bold, label=""];
9->4 [style = bold, label=""];
4->13 [style = bold, label=""];
10->11 [style = bold, label=""];
}
