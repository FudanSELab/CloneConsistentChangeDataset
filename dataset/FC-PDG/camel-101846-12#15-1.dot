digraph {
41 [style = filled, label = "refInternal.getName().equals(\"refs/heads/\" + branchTest)@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "git.add().addFilepattern(filenameBranchToAdd).call()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "boolean tagCreated = false@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "File fileToAddDifferent = new File(gitLocalRepo,filenameBranchToAdd)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "git.close()@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(gitDir.exists(),true)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "MockEndpoint mockResultTag = getMockEndpoint(\"mock:result-tag\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"refs/tags/\" + tagTest,exchange.getMessage().getBody().getName())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(true,tagCreated)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "git.branchCreate().setName(branchTest).call()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "File gitDir = new File(gitLocalRepo,\".git\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "mockResultTag.expectedMessageCount(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(branchCreated,true)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "git.tag().setName(tagTest).call()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<Ref> ref = git.tagList().call()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "fileToAddDifferent.createNewFile()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Iterable<RevCommit> revCommits = template.requestBody(\"direct:log-branch\",\"\",)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "git.commit().setMessage(commitMessage).call()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "tagConsumerTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(status.getAdded().contains(filenameToAdd))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "mockResultTag.assertIsSatisfied()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "tagConsumerTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "fileToAdd.createNewFile()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<Ref> ref = git.branchList().call()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(gitRevCommit.getName(),rev.getName())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "logBranchTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Iterator<RevCommit> gitLogs = git.log().call().iterator()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "branchCreated = true@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(gitRevCommit.getShortMessage(),rev.getShortMessage())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "File fileToAdd = new File(gitLocalRepo,filenameToAdd)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "boolean branchCreated = false@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "git.close()@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "git.commit().setMessage(commitMessageAll).call()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "tagCreated = true@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(tagCreated,true)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Status status = git.status().call()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "RevCommit gitRevCommit = gitLogs.next()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "git.add().addFilepattern(filenameToAdd).call()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(true,gitDir.exists())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Exchange exchange = mockResultTag.getExchanges().get(0)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "refInternal.getName().equals(\"refs/tags/\" + tagTest)@@@18@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Git git = getGitTestRepository()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17->8 [style = bold, label=""];
4->9 [style = bold, label=""];
8->10 [style = bold, label=""];
31->37 [style = bold, label=""];
15->34 [style = dashed, label="0"];
7->23 [style = dashed, label="0"];
10->15 [style = bold, label=""];
22->2 [style = bold, label=""];
21->0 [style = bold, label=""];
5->23 [style = bold, label=""];
6->22 [style = bold, label=""];
18->22 [style = dashed, label="0"];
2->1 [style = bold, label=""];
6->18 [style = bold, label=""];
28->39 [style = bold, label=""];
26->35 [style = solid, label="branchCreated"];
29->31 [style = bold, label=""];
11->26 [style = dashed, label="0"];
30->27 [style = bold, label=""];
23->4 [style = bold, label=""];
3->6 [style = bold, label=""];
34->41 [style = bold, label=""];
7->4 [style = bold, label=""];
25->29 [style = bold, label=""];
18->2 [style = bold, label=""];
8->1 [style = dashed, label="0"];
15->5 [style = bold, label=""];
15->7 [style = solid, label="tagCreated"];
1->17 [style = bold, label=""];
20->21 [style = bold, label=""];
24->20 [style = bold, label=""];
41->26 [style = dotted, label="true"];
11->7 [style = solid, label="tagCreated"];
11->5 [style = bold, label=""];
17->34 [style = bold, label=""];
0->14 [style = bold, label=""];
13->19 [style = bold, label=""];
26->41 [style = bold, label=""];
39->0 [style = bold, label=""];
40->33 [style = bold, label=""];
15->23 [style = solid, label="tagCreated"];
5->11 [style = dotted, label="true"];
40->36 [style = bold, label=""];
14->12 [style = bold, label=""];
7->35 [style = dashed, label="0"];
26->35 [style = bold, label=""];
10->17 [style = dashed, label="0"];
5->7 [style = bold, label=""];
33->38 [style = bold, label=""];
5->11 [style = bold, label=""];
12->3 [style = bold, label=""];
41->26 [style = bold, label=""];
37->33 [style = bold, label=""];
11->23 [style = solid, label="tagCreated"];
38->40 [style = bold, label=""];
16->20 [style = bold, label=""];
35->30 [style = bold, label=""];
11->23 [style = bold, label=""];
32->28 [style = bold, label=""];
27->25 [style = bold, label=""];
5->41 [style = dashed, label="0"];
11->7 [style = bold, label=""];
34->35 [style = solid, label="branchCreated"];
9->13 [style = bold, label=""];
41->35 [style = bold, label=""];
}
