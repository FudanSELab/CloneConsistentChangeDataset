digraph {
35 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * testSSLEngine.getNumberOfUnwraps() + preexistingBytes)@@@26@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "verify(mockChannel,times(1)).read(isA())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "readAtLeastUsingSmallAppBufferAtWriteLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(inputSharing.getBuffer().capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "nioSslEngine.peerAppData = unwrappedBuffer@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final ByteBufferSharingImpl inputSharingImpl = (ByteBufferSharingImpl)inputSharing@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final int individualRead = 150@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final int individualRead = 60@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final int preexistingBytes = initialUnwrappedBufferSize - 7@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "verify(mockChannel,times(1)).read(isA())@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * testSSLEngine.getNumberOfUnwraps() + preexistingBytes)@@@30@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "SocketChannel mockChannel = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "readAtLeastUsingSmallAppBufferAtWriteLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16->15 [style = dashed, label="0"];
6->3 [style = bold, label=""];
15->38 [style = bold, label=""];
30->8 [style = solid, label="individualRead"];
18->24 [style = bold, label=""];
35->29 [style = bold, label=""];
28->10 [style = bold, label=""];
16->8 [style = bold, label=""];
22->19 [style = bold, label=""];
13->4 [style = solid, label="individualRead"];
7->12 [style = bold, label=""];
31->9 [style = bold, label=""];
2->1 [style = bold, label=""];
30->33 [style = solid, label="individualRead"];
2->1 [style = solid, label="initialUnwrappedBufferSize"];
37->17 [style = bold, label=""];
12->15 [style = bold, label=""];
2->17 [style = solid, label="initialUnwrappedBufferSize"];
17->5 [style = solid, label="unwrappedBuffer"];
12->20 [style = bold, label=""];
14->37 [style = solid, label="initialUnwrappedBufferSize"];
0->11 [style = bold, label=""];
14->3 [style = solid, label="mockChannel"];
14->17 [style = bold, label=""];
34->31 [style = bold, label=""];
13->23 [style = solid, label="individualRead"];
30->34 [style = bold, label=""];
34->35 [style = solid, label="preexistingBytes"];
36->3 [style = bold, label=""];
1->20 [style = solid, label="preexistingBytes"];
1->18 [style = solid, label="preexistingBytes"];
4->8 [style = dashed, label="0"];
15->16 [style = bold, label=""];
8->35 [style = bold, label=""];
1->9 [style = bold, label=""];
3->27 [style = bold, label=""];
17->28 [style = bold, label=""];
23->22 [style = bold, label=""];
27->26 [style = bold, label=""];
10->5 [style = bold, label=""];
5->6 [style = bold, label=""];
18->10 [style = bold, label=""];
3->12 [style = solid, label="testSSLEngine"];
3->7 [style = bold, label=""];
13->6 [style = solid, label="individualRead"];
25->11 [style = bold, label=""];
33->36 [style = bold, label=""];
11->13 [style = bold, label=""];
14->37 [style = bold, label=""];
26->15 [style = bold, label=""];
11->3 [style = solid, label="amountToRead"];
9->3 [style = solid, label="wrappedBuffer"];
9->14 [style = bold, label=""];
34->29 [style = solid, label="preexistingBytes"];
14->35 [style = solid, label="initialUnwrappedBufferSize"];
17->24 [style = solid, label="unwrappedBuffer"];
37->10 [style = solid, label="unwrappedBuffer"];
34->17 [style = solid, label="preexistingBytes"];
22->21 [style = solid, label="testSSLEngine"];
35->29 [style = solid, label="initialFreeSpace"];
7->3 [style = dashed, label="0"];
10->33 [style = bold, label=""];
36->27 [style = solid, label="testSSLEngine"];
38->8 [style = bold, label=""];
8->4 [style = bold, label=""];
34->8 [style = solid, label="preexistingBytes"];
1->4 [style = solid, label="preexistingBytes"];
32->11 [style = bold, label=""];
13->30 [style = dashed, label="0"];
11->30 [style = bold, label=""];
17->18 [style = bold, label=""];
13->20 [style = solid, label="individualRead"];
21->3 [style = bold, label=""];
13->2 [style = bold, label=""];
24->23 [style = bold, label=""];
19->21 [style = bold, label=""];
}
