digraph {
9 [style = filled, label = "to.assertNoErrors()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Flowable<Integer> just = Flowable.just(1)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestSubscriber<List<Integer>> ts = new TestSubscriber<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "TestObserver<List<Integer>> to = new TestObserver<List<Integer>>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "with3Others['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Observable<Integer> just = Observable.just(1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "with3Others['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "just.withLatestFrom(just,just,just,new Function4<Integer,Integer,Integer,Integer,List<Integer>>(){@Override public List<Integer> apply(Integer a,Integer b,Integer c,Integer d){return Arrays.asList(a,b,c,d)}}).subscribe(to)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestSubscriber<List<Integer>> ts = new TestSubscriber<List<Integer>>()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "ts.assertNoErrors()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "to.assertValue(Arrays.asList(1,1,1,1))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ts.assertValue(Arrays.asList(1,1,1,1))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "to.assertComplete()@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ts.assertComplete()@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "with3Others['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
6->3 [style = bold, label=""];
9->11 [style = bold, label=""];
3->1 [style = bold, label=""];
4->6 [style = bold, label=""];
1->9 [style = dashed, label="0"];
8->6 [style = bold, label=""];
7->0 [style = bold, label=""];
0->14 [style = dashed, label="0"];
13->6 [style = solid, label="to"];
2->0 [style = bold, label=""];
5->11 [style = dashed, label="0"];
0->4 [style = bold, label=""];
6->10 [style = bold, label=""];
8->6 [style = solid, label="ts"];
12->14 [style = bold, label=""];
4->8 [style = dashed, label="0"];
0->8 [style = bold, label=""];
10->9 [style = bold, label=""];
3->10 [style = dashed, label="0"];
14->13 [style = bold, label=""];
13->6 [style = bold, label=""];
4->13 [style = dashed, label="0"];
4->6 [style = solid, label="ts"];
}
