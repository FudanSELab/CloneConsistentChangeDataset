digraph {
3 [style = filled, label = "server.expect(requestTo(\"/hello\")).andRespond(withSuccess())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "MockRestServiceServer server = MockRestServiceServer.bindTo(restTemplate).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "boundRestTemplateWhenUrlIncludesDomainShouldNotPrefixRootUri['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "boundRestTemplateWhenUrlIncludesDomainShouldNotPrefixRootUri['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "MockRestServiceServer server = RootUriRequestExpectationManager.bindTo(restTemplate)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "rootUriShouldApply['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "server.verify()@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThatExceptionOfType().isThrownBy(null).withMessageContaining(\"expected:<https://example.com/hello> but was:<https://spring.io/hello>\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "restTemplate.getForEntity(\"/hello\",)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "RestTemplate restTemplate = this.builder.rootUri(\"http://example.com\").build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "RestTemplate restTemplate = new RestTemplateBuilder().rootUri(\"https://example.com\").build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThatExceptionOfType().isThrownBy(null).withMessageContaining(\"expected:<http://example.com/hello> but was:<http://spring.io/hello>\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "server.expect(requestTo(\"http://example.com/hello\")).andRespond(withSuccess())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "RestTemplate restTemplate = new RestTemplateBuilder().rootUri(\"http://example.com\").build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4->1 [style = solid, label="restTemplate"];
1->3 [style = bold, label=""];
3->8 [style = dashed, label="0"];
1->12 [style = dashed, label="0"];
7->1 [style = solid, label="restTemplate"];
4->1 [style = bold, label=""];
3->5 [style = bold, label=""];
11->12 [style = bold, label=""];
7->1 [style = bold, label=""];
13->9 [style = bold, label=""];
4->11 [style = dashed, label="0"];
6->7 [style = bold, label=""];
0->5 [style = dashed, label="0"];
2->4 [style = bold, label=""];
12->8 [style = bold, label=""];
4->7 [style = dashed, label="0"];
3->0 [style = bold, label=""];
8->13 [style = bold, label=""];
10->11 [style = bold, label=""];
}
