digraph {
33 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),4)@@@68@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
90 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@49@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
101 [style = filled, label = "AssignableReplica removingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"MASTER\",1)@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
54 [style = filled, label = "Assert.assertEquals(assignableNode.getProjectedHighestUtilization(Collections.EMPTY_MAP),16.0 / 20.0,0.005)@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@73@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@76@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
91 [style = filled, label = "Assert.assertTrue(assignableNode.getDisabledPartitionsMap().equals(_disabledPartitionsMap))@@@50@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assignmentSet.add(addingReplica)@@@65@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "Map<String,Integer> expectedCapacityMap = new HashMap<>()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "AssignableReplica duplicateReplica = new AssignableReplica(testCache.getClusterConfig(),testCache.getResourceConfig(_resourceNames.get(0)),_partitionNames.get(0),\"SLAVE\",2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).remove(_partitionNames.get(2))@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@58@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "expectedCapacityMap.put(\"item2\",8)@@@64@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentAssignmentsMap().equals(expectedAssignment))@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
102 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentAssignmentsMap().equals(expectedAssignment))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@78@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@59@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(assignableNode.getDisabledPartitionsMap().equals(_disabledPartitionsMap))@@@22@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(assignableNode.getRemainingCapacity(),expectedCapacityMap)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
105 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@47@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
77 [style = filled, label = "assignableNode.assign(addingReplica)@@@66@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expectedAssignment.put(\"Resource2\",expectedAssignmentSet2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "Assert.assertTrue(assignableNode.getMaxCapacity().equals(_capacityDataMap))@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
99 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@48@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
93 [style = filled, label = "Assert.assertTrue(assignableNode.getDisabledPartitionsMap().equals(_disabledPartitionsMap))@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
104 [style = filled, label = "expectedCapacityMap.put(\"item2\",18)@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
75 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
64 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@53@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@72@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "Assert.assertTrue(assignableNode.getMaxCapacity().equals(_capacityDataMap))@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@55@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentAssignmentsMap().equals(expectedAssignment))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "assignableNode.assignInitBatch(assignmentSet)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentAssignmentCount(),3)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
109 [style = filled, label = "testAssignDuplicateReplica['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Set<String> expectedAssignmentSet2 = new HashSet<>(_partitionNames.subList(2,4))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testNormalUsage['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
73 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
80 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentCapacity().equals(expectedCapacityMap))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
63 [style = filled, label = "expectedCapacityMap.put(\"item3\",30)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentCapacity().equals(expectedCapacityMap))@@@51@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
60 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@60@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
70 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@67@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@79@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
97 [style = filled, label = "AssignableReplica addingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"SLAVE\",2)@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
62 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@77@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),4)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(assignableNode.getMaxCapacity().equals(_capacityDataMap))@@@32@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "Set<String> expectedTopStateAssignmentSet1 = new HashSet<>(_partitionNames.subList(0,1))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "expectedCapacityMap.put(\"item2\",8)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(assignableNode.getRemainingCapacity(),expectedCapacityMap)@@@75@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
84 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),16.0 / 20.0,0.005)@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "expectedTopStateAssignmentSet2.remove(_partitionNames.get(2))@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "expectedCapacityMap.put(\"item1\",4)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "testNormalUsage['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Map<String,Set<String>> expectedAssignment = new HashMap<>()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "assignableNode.assign(duplicateReplica)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),16.0 / 20.0,0.005)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "expectedCapacityMap.put(\"item1\",4)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(assignableNode.getRemainingCapacity(),expectedCapacityMap)@@@54@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "ResourceControllerDataProvider testCache = setupClusterDataCache()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "AssignableNode assignableNode = new AssignableNode(testCache.getClusterConfig(),testCache.getInstanceConfigMap().get(_testInstanceId),_testInstanceId,assignmentSet)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).add(_partitionNames.get(2))@@@62@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentCapacity().equals(expectedCapacityMap))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
71 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "replica.equals(removingReplica)@@@40@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "AssignableNode assignableNode = new AssignableNode(testCache.getClusterConfig(),testCache.getInstanceConfigMap().get(_testInstanceId),_testInstanceId)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@71@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(assignableNode.getProjectedHighestUtilization(Collections.EMPTY_MAP),16.0 / 20.0,0.005)@@@69@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
100 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "AssignableReplica addingReplica = new AssignableReplica(testCache.getClusterConfig(),testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"SLAVE\",2)@@@61@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
67 [style = filled, label = "Set<String> expectedAssignmentSet1 = new HashSet<>(_partitionNames.subList(0,2))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),11.0 / 20.0,0.005)@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
86 [style = filled, label = "expectedCapacityMap.put(\"item1\",9)@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@57@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
98 [style = filled, label = "assignableNode.release(removingReplica)@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "Set<AssignableReplica> assignmentSet = generateReplicas(testCache)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@81@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@49@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),3)@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "iter.remove()@@@41@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
106 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentAssignmentCount(),4)@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "AssignableReplica removingReplica = new AssignableReplica(testCache.getClusterConfig(),testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"MASTER\",1)@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
69 [style = filled, label = "assignableNode.assign(addingReplica)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).add(_partitionNames.get(2))@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
74 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@80@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "Iterator<AssignableReplica> iter = assignmentSet.iterator()@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@56@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
76 [style = filled, label = "Set<String> expectedTopStateAssignmentSet2 = new HashSet<>(_partitionNames.subList(2,3))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "AssignableReplica replica = iter.next()@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
61 [style = filled, label = "expectedCapacityMap.put(\"item2\",8)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(assignableNode.getProjectedHighestUtilization(Collections.EMPTY_MAP),11.0 / 20.0,0.005)@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@70@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
103 [style = filled, label = "Assert.assertEquals(assignableNode.getCurrentAssignmentCount(),4)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "expectedAssignment.put(\"Resource1\",expectedAssignmentSet1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
56 [style = filled, label = "expectedCapacityMap.put(\"item1\",4)@@@63@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@74@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "iter.hasNext()@@@38@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
86->104 [style = bold, label=""];
76->73 [style = solid, label="expectedTopStateAssignmentSet2"];
0->12 [style = dotted, label="true"];
53->17 [style = solid, label="expectedCapacityMap"];
19->55 [style = bold, label=""];
67->6 [style = solid, label="expectedAssignmentSet1"];
14->35 [style = bold, label=""];
73->58 [style = bold, label=""];
16->7 [style = bold, label=""];
57->1 [style = bold, label=""];
74->31 [style = bold, label=""];
40->15 [style = bold, label=""];
59->71 [style = bold, label=""];
49->0 [style = bold, label=""];
3->65 [style = bold, label=""];
91->94 [style = bold, label=""];
109->7 [style = bold, label=""];
21->18 [style = bold, label=""];
77->70 [style = bold, label=""];
92->100 [style = bold, label=""];
1->68 [style = bold, label=""];
17->80 [style = dashed, label="0"];
55->74 [style = bold, label=""];
37->53 [style = bold, label=""];
102->103 [style = bold, label=""];
56->72 [style = bold, label=""];
48->91 [style = dashed, label="0"];
24->49 [style = bold, label=""];
70->81 [style = dashed, label="0"];
104->98 [style = bold, label=""];
76->66 [style = solid, label="expectedTopStateAssignmentSet2"];
101->95 [style = bold, label=""];
22->87 [style = solid, label="assignmentSet"];
43->88 [style = dashed, label="0"];
78->105 [style = bold, label=""];
0->24 [style = bold, label=""];
11->13 [style = bold, label=""];
82->14 [style = bold, label=""];
22->67 [style = bold, label=""];
53->50 [style = solid, label="expectedCapacityMap"];
76->74 [style = solid, label="expectedTopStateAssignmentSet2"];
29->44 [style = bold, label=""];
66->60 [style = bold, label=""];
26->77 [style = solid, label="addingReplica"];
23->36 [style = bold, label=""];
35->10 [style = bold, label=""];
32->87 [style = dashed, label="0"];
28->42 [style = bold, label=""];
44->78 [style = dashed, label="0"];
8->27 [style = bold, label=""];
33->106 [style = dashed, label="0"];
25->36 [style = solid, label="expectedTopStateAssignmentSet1"];
107->108 [style = solid, label="duplicateReplica"];
54->52 [style = bold, label=""];
24->28 [style = bold, label=""];
22->25 [style = bold, label=""];
11->81 [style = solid, label="expectedAssignment"];
47->6 [style = bold, label=""];
45->18 [style = solid, label="expectedAssignmentSet2"];
52->9 [style = bold, label=""];
25->76 [style = bold, label=""];
5->0 [style = solid, label="removingReplica"];
25->55 [style = solid, label="expectedTopStateAssignmentSet1"];
67->62 [style = solid, label="expectedAssignmentSet1"];
11->70 [style = solid, label="expectedAssignment"];
48->50 [style = bold, label=""];
70->33 [style = bold, label=""];
85->79 [style = bold, label=""];
69->64 [style = bold, label=""];
22->32 [style = bold, label=""];
84->78 [style = bold, label=""];
68->1 [style = dashed, label="0"];
2->73 [style = bold, label=""];
26->4 [style = bold, label=""];
59->89 [style = dashed, label="0"];
97->69 [style = solid, label="addingReplica"];
45->11 [style = bold, label=""];
33->29 [style = bold, label=""];
13->37 [style = bold, label=""];
4->56 [style = bold, label=""];
22->71 [style = solid, label="assignmentSet"];
71->21 [style = bold, label=""];
41->102 [style = dashed, label="0"];
34->62 [style = bold, label=""];
24->0 [style = dotted, label="true"];
41->107 [style = bold, label=""];
89->101 [style = bold, label=""];
20->39 [style = bold, label=""];
45->23 [style = solid, label="expectedAssignmentSet2"];
65->61 [style = bold, label=""];
22->34 [style = solid, label="assignmentSet"];
5->42 [style = solid, label="removingReplica"];
36->66 [style = bold, label=""];
22->47 [style = solid, label="assignmentSet"];
98->85 [style = bold, label=""];
67->45 [style = bold, label=""];
90->91 [style = bold, label=""];
51->85 [style = dashed, label="0"];
11->51 [style = solid, label="expectedAssignment"];
50->34 [style = bold, label=""];
20->79 [style = dashed, label="0"];
75->103 [style = dashed, label="0"];
11->75 [style = solid, label="expectedAssignment"];
45->37 [style = solid, label="expectedAssignmentSet2"];
87->102 [style = bold, label=""];
64->17 [style = bold, label=""];
24->49 [style = dotted, label="true"];
38->24 [style = bold, label=""];
46->77 [style = bold, label=""];
69->81 [style = bold, label=""];
29->84 [style = dashed, label="0"];
6->23 [style = bold, label=""];
0->12 [style = bold, label=""];
22->41 [style = solid, label="assignmentSet"];
61->69 [style = bold, label=""];
93->80 [style = bold, label=""];
96->65 [style = bold, label=""];
62->19 [style = bold, label=""];
83->7 [style = bold, label=""];
12->24 [style = bold, label=""];
79->82 [style = bold, label=""];
106->84 [style = bold, label=""];
51->20 [style = bold, label=""];
42->51 [style = bold, label=""];
63->87 [style = bold, label=""];
80->97 [style = bold, label=""];
81->106 [style = bold, label=""];
45->19 [style = solid, label="expectedAssignmentSet2"];
7->22 [style = bold, label=""];
53->59 [style = solid, label="expectedCapacityMap"];
76->67 [style = bold, label=""];
25->2 [style = solid, label="expectedTopStateAssignmentSet1"];
97->96 [style = bold, label=""];
63->32 [style = bold, label=""];
64->93 [style = dashed, label="0"];
53->8 [style = bold, label=""];
67->21 [style = solid, label="expectedAssignmentSet1"];
11->85 [style = solid, label="expectedAssignment"];
32->41 [style = bold, label=""];
53->94 [style = solid, label="expectedCapacityMap"];
99->90 [style = bold, label=""];
39->82 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
43->54 [style = bold, label=""];
101->98 [style = solid, label="removingReplica"];
43->108 [style = dashed, label="0"];
10->38 [style = bold, label=""];
103->88 [style = bold, label=""];
95->86 [style = bold, label=""];
41->75 [style = bold, label=""];
72->46 [style = bold, label=""];
1->89 [style = bold, label=""];
107->108 [style = bold, label=""];
9->57 [style = bold, label=""];
60->26 [style = bold, label=""];
17->47 [style = bold, label=""];
53->80 [style = solid, label="expectedCapacityMap"];
44->40 [style = bold, label=""];
67->13 [style = solid, label="expectedAssignmentSet1"];
39->3 [style = bold, label=""];
7->22 [style = solid, label="testCache"];
26->46 [style = solid, label="addingReplica"];
27->63 [style = bold, label=""];
15->30 [style = bold, label=""];
5->14 [style = bold, label=""];
18->2 [style = bold, label=""];
88->92 [style = bold, label=""];
50->94 [style = dashed, label="0"];
100->9 [style = bold, label=""];
42->93 [style = bold, label=""];
75->43 [style = bold, label=""];
10->42 [style = bold, label=""];
105->99 [style = bold, label=""];
68->59 [style = bold, label=""];
58->5 [style = bold, label=""];
30->48 [style = bold, label=""];
11->102 [style = solid, label="expectedAssignment"];
53->89 [style = solid, label="expectedCapacityMap"];
}
