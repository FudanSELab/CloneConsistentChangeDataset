digraph {
62 [style = filled, label = "assertOutputType(\"map((x)  x + x, y)\",inputTypes,ExprType.LONG_ARRAY)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "assertOutputType(\"all((x)  x > 1.2, c)\",inputTypes,ExprType.LONG)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertOutputType(\"if(y, 'foo', 'bar')\",inputTypes,ExprType.STRING)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
63 [style = filled, label = "assertOutputType(\"cartesian_map((x, y)  concat(x, y), ('foo', 'bar', 'baz', 'foobar'(, ('bar', 'baz'()\",inputTypes,ExprType.STRING_ARRAY)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1,z==2.0,2,null)\",inputTypes,ExprType.LONG)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertOutputType(\"isnull(y)\",inputTypes,ExprType.LONG)@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertOutputType(\"case_searched(y==1,1,y==2,2.0,0)\",inputTypes,ExprType.DOUBLE)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "assertOutputType(\"if(y, 'foo', 'bar')\",inspector,ExprType.STRING)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1.0,z==2.0,2.0,null)\",inspector,ExprType.DOUBLE)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "assertOutputType(\"case_searched(x=='baz','is baz',x=='foo','is foo','is other')\",inspector,ExprType.STRING)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
67 [style = filled, label = "assertOutputType(\"filter((x)  x == 'foo', a)\",inputTypes,ExprType.STRING_ARRAY)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertOutputType(\"case_searched(y==1,1,y==2,2,0)\",inputTypes,ExprType.LONG)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "assertOutputType(\"case_simple(x,'baz','is baz','foo','is foo','is other')\",inspector,ExprType.STRING)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertOutputType(\"case_simple(z,2.0,2.0,3.0,3.0,4.0)\",inspector,ExprType.DOUBLE)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1.0,z==2.0,2.0,0.0)\",inspector,ExprType.DOUBLE)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
53 [style = filled, label = "assertOutputType(\"map((x)  concat(x, 'foo'), a)\",inputTypes,ExprType.STRING_ARRAY)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertOutputType(\"if(y,2,3)\",inspector,ExprType.LONG)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "assertOutputType(\"notnull(z)\",inspector,ExprType.LONG)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertOutputType(\"isnull(z)\",inspector,ExprType.LONG)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertOutputType(\"notnull(y)\",inspector,ExprType.LONG)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
71 [style = filled, label = "assertOutputType(\"fold((x, acc)  x + acc, y, z)\",inputTypes,ExprType.DOUBLE)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertOutputType(\"case_searched(y==1,1,y==2,2.0,0)\",inspector,ExprType.DOUBLE)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "assertOutputType(\"filter((x)  x > 1, b)\",inputTypes,ExprType.LONG_ARRAY)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertOutputType(\"cartesian_fold((x, y, acc)  x + y + acc, y, z, 0)\",inputTypes,ExprType.LONG)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "assertOutputType(\"map((x)  x + x, c)\",inputTypes,ExprType.DOUBLE_ARRAY)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "assertOutputType(\"any((x)  x > 1, b)\",inputTypes,ExprType.LONG)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "assertOutputType(\"cartesian_fold((x, y, acc)  x + y + acc, y, z, y)\",inputTypes,ExprType.LONG)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertOutputType(\"notnull(z)\",inputTypes,ExprType.LONG)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1,z==2.0,2,null)\",inspector,ExprType.LONG)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertOutputType(\"nvl(y, 1)\",inputTypes,ExprType.LONG)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertOutputType(\"case_simple(z,2.0,2.0,3.0,3.0,null)\",inspector,ExprType.DOUBLE)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75 [style = filled, label = "assertOutputType(\"map((x)  x + x, z)\",inputTypes,ExprType.DOUBLE_ARRAY)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "assertOutputType(\"all((x)  x == 'foo', a)\",inputTypes,ExprType.LONG)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertOutputType(\"nvl(z, 2.0)\",inspector,ExprType.DOUBLE)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "assertOutputType(\"fold((x, acc)  x + acc, y, 1.0)\",inputTypes,ExprType.DOUBLE)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "testApplyFunctions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertOutputType(\"case_simple(z,2.0,2.0,3.0,3.0,null)\",inputTypes,ExprType.DOUBLE)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertOutputType(\"case_simple(y,2,2,3,3.0,4)\",inspector,ExprType.DOUBLE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "assertOutputType(\"fold((x, acc)  x + acc, y, 0)\",inputTypes,ExprType.LONG)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertOutputType(\"notnull(y)\",inputTypes,ExprType.LONG)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertOutputType(\"isnull(x)\",inputTypes,ExprType.LONG)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "assertOutputType(\"notnull(x)\",inspector,ExprType.LONG)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "assertOutputType(\"map((x)  concat(x, 'foo'), x)\",inputTypes,ExprType.STRING_ARRAY)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertOutputType(\"if(y,2,3.0)\",inspector,ExprType.DOUBLE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertOutputType(\"if(y,2,3)\",inputTypes,ExprType.LONG)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "assertOutputType(\"nvl(y, 1.1)\",inspector,ExprType.DOUBLE)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertOutputType(\"case_simple(y,2,2,3,3,4)\",inputTypes,ExprType.LONG)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertOutputType(\"if(y,2,3.0)\",inputTypes,ExprType.DOUBLE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertOutputType(\"case_simple(x,'baz','is baz','foo','is foo','is other')\",inputTypes,ExprType.STRING)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertOutputType(\"nvl(y, 1.1)\",inputTypes,ExprType.DOUBLE)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "assertOutputType(\"nvl(y, 2.0)\",inspector,ExprType.DOUBLE)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "assertOutputType(\"case_searched(y==1,1,y==2,2,0)\",inspector,ExprType.LONG)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertOutputType(\"notnull(x)\",inputTypes,ExprType.LONG)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "assertOutputType(\"isnull(x)\",inspector,ExprType.LONG)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "assertOutputType(\"any((x)  x == 'foo', a)\",inputTypes,ExprType.LONG)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertOutputType(\"isnull(z)\",inputTypes,ExprType.LONG)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1.0,z==2.0,2.0,0.0)\",inputTypes,ExprType.DOUBLE)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
59 [style = filled, label = "assertOutputType(\"any((x)  x > 1.2, c)\",inputTypes,ExprType.LONG)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertOutputType(\"nvl(z, 2.0)\",inputTypes,ExprType.DOUBLE)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
66 [style = filled, label = "assertOutputType(\"fold((x, acc)  x + acc, y, y)\",inputTypes,ExprType.LONG)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "assertOutputType(\"cartesian_fold((x, y, acc)  x + y + acc, y, z, z)\",inputTypes,ExprType.DOUBLE)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "assertOutputType(\"cartesian_fold((x, y, acc)  x + y + acc, y, z, 1.0)\",inputTypes,ExprType.DOUBLE)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "assertOutputType(\"filter((x)  x > 1, c)\",inputTypes,ExprType.DOUBLE_ARRAY)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "testConditionalFunctions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testConditionalFunctions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertOutputType(\"nvl(x, 'foo')\",inspector,ExprType.STRING)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "assertOutputType(\"nvl(y, 1)\",inspector,ExprType.LONG)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1.0,z==2.0,2.0,null)\",inputTypes,ExprType.DOUBLE)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertOutputType(\"case_simple(z,2.0,2.0,3.0,3.0,4.0)\",inputTypes,ExprType.DOUBLE)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertOutputType(\"nvl(x, 'foo')\",inputTypes,ExprType.STRING)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertOutputType(\"nvl(y, 2.0)\",inputTypes,ExprType.DOUBLE)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "assertOutputType(\"isnull(y)\",inspector,ExprType.LONG)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "assertOutputType(\"case_simple(y,2,2,3,3,4)\",inspector,ExprType.LONG)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertOutputType(\"case_simple(y,2,2,3,3.0,4)\",inputTypes,ExprType.DOUBLE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
58 [style = filled, label = "assertOutputType(\"all((x)  x > 1, b)\",inputTypes,ExprType.LONG)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertOutputType(\"map((x)  x + x, b)\",inputTypes,ExprType.LONG_ARRAY)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertOutputType(\"case_searched(x=='baz','is baz',x=='foo','is foo','is other')\",inputTypes,ExprType.STRING)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->3 [style = bold, label=""];
14->25 [style = bold, label=""];
24->27 [style = dashed, label="0"];
46->34 [style = bold, label=""];
70->69 [style = bold, label=""];
17->74 [style = dashed, label="0"];
22->29 [style = dashed, label="0"];
15->60 [style = dashed, label="0"];
0->59 [style = dashed, label="0"];
71->60 [style = bold, label=""];
26->51 [style = bold, label=""];
23->58 [style = dashed, label="0"];
9->6 [style = bold, label=""];
22->70 [style = dashed, label="0"];
52->68 [style = bold, label=""];
63->55 [style = bold, label=""];
56->72 [style = bold, label=""];
38->30 [style = bold, label=""];
10->51 [style = dashed, label="0"];
37->38 [style = bold, label=""];
6->50 [style = dashed, label="0"];
9->56 [style = dashed, label="0"];
39->49 [style = bold, label=""];
15->31 [style = dashed, label="0"];
29->43 [style = bold, label=""];
30->40 [style = bold, label=""];
2->41 [style = dashed, label="0"];
18->66 [style = dashed, label="0"];
25->55 [style = dashed, label="0"];
28->42 [style = bold, label=""];
54->71 [style = bold, label=""];
5->10 [style = bold, label=""];
42->46 [style = bold, label=""];
57->61 [style = bold, label=""];
6->72 [style = dashed, label="0"];
5->26 [style = dashed, label="0"];
0->17 [style = bold, label=""];
3->36 [style = dashed, label="0"];
14->63 [style = dashed, label="0"];
72->52 [style = bold, label=""];
34->31 [style = bold, label=""];
2->9 [style = bold, label=""];
19->45 [style = dashed, label="0"];
16->43 [style = dashed, label="0"];
45->29 [style = bold, label=""];
67->56 [style = bold, label=""];
1->11 [style = bold, label=""];
66->54 [style = bold, label=""];
18->42 [style = dashed, label="0"];
35->28 [style = bold, label=""];
11->71 [style = dashed, label="0"];
2->67 [style = dashed, label="0"];
20->8 [style = bold, label=""];
18->1 [style = bold, label=""];
58->76 [style = bold, label=""];
16->69 [style = dashed, label="0"];
1->46 [style = dashed, label="0"];
0->33 [style = dashed, label="0"];
7->38 [style = dashed, label="0"];
48->33 [style = bold, label=""];
14->35 [style = dashed, label="0"];
53->64 [style = bold, label=""];
19->22 [style = bold, label=""];
55->66 [style = bold, label=""];
13->0 [style = bold, label=""];
8->40 [style = dashed, label="0"];
1->54 [style = dashed, label="0"];
23->5 [style = bold, label=""];
22->16 [style = bold, label=""];
20->62 [style = dashed, label="0"];
62->75 [style = bold, label=""];
11->34 [style = dashed, label="0"];
25->18 [style = bold, label=""];
7->20 [style = bold, label=""];
12->24 [style = bold, label=""];
73->70 [style = bold, label=""];
15->19 [style = bold, label=""];
13->48 [style = dashed, label="0"];
17->23 [style = bold, label=""];
4->7 [style = bold, label=""];
27->35 [style = bold, label=""];
47->50 [style = bold, label=""];
21->39 [style = dashed, label="0"];
21->12 [style = bold, label=""];
12->64 [style = dashed, label="0"];
13->68 [style = dashed, label="0"];
40->39 [style = bold, label=""];
64->65 [style = bold, label=""];
20->30 [style = dashed, label="0"];
32->44 [style = bold, label=""];
43->41 [style = bold, label=""];
33->32 [style = bold, label=""];
41->47 [style = bold, label=""];
24->65 [style = dashed, label="0"];
65->63 [style = bold, label=""];
61->62 [style = bold, label=""];
74->58 [style = bold, label=""];
19->73 [style = dashed, label="0"];
3->52 [style = dashed, label="0"];
7->61 [style = dashed, label="0"];
69->67 [style = bold, label=""];
17->32 [style = dashed, label="0"];
49->27 [style = bold, label=""];
16->2 [style = bold, label=""];
59->74 [style = bold, label=""];
5->76 [style = dashed, label="0"];
11->15 [style = bold, label=""];
24->14 [style = bold, label=""];
9->47 [style = dashed, label="0"];
23->44 [style = dashed, label="0"];
44->26 [style = bold, label=""];
60->73 [style = bold, label=""];
50->36 [style = bold, label=""];
21->53 [style = dashed, label="0"];
36->48 [style = bold, label=""];
68->59 [style = bold, label=""];
3->13 [style = bold, label=""];
8->21 [style = bold, label=""];
8->75 [style = dashed, label="0"];
25->28 [style = dashed, label="0"];
75->53 [style = bold, label=""];
31->45 [style = bold, label=""];
12->49 [style = dashed, label="0"];
}
