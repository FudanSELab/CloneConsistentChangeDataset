digraph {
22 [style = filled, label = "Snapshot start = table.currentSnapshot()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Schema schema = table.schema()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "table.refresh()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Transaction replace = TestTables.beginReplace(tableDir,\"test\",table.schema(),newSpec)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "validateSnapshot(null,table.currentSnapshot(),FILE_B,FILE_C,FILE_D)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Transaction replace = TestTables.beginReplace(tableDir,\"test\",table.schema(),table.spec())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"Table should have new unpartitioned spec\",0,table.spec().fields().size())@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"Version should be 2\",2L,(long)version())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "((TestTables.TestTableOperations)((BaseTransaction)replace).ops()).failCommits(1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "table.refresh()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(\"Schema should use new schema, not compatible with previous\",schema.asStruct(),table.schema().asStruct())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "replace.commitTransaction()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "PartitionSpec v2Expected = PartitionSpec.builderFor(table.schema()).withSpecId(1).build()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "validateSnapshot(start,table.currentSnapshot(),FILE_A)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "replace.commitTransaction()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertNotNull(\"Table should have a current snapshot\",table.currentSnapshot())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "PartitionSpec v1Expected = PartitionSpec.builderFor(table.schema()).alwaysNull(\"data\",\"data_bucket\").withSpecId(1).build()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testReplaceWithNewPartitionSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "V2Assert.assertEquals(\"Table should have an unpartitioned spec\",v2Expected,table.spec())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "PartitionSpec newSpec = PartitionSpec.unpartitioned()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testReplaceTransactionRetry['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(\"Version should be 1\",1L,(long)version())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "replace.newAppend().appendFile(FILE_B).appendFile(FILE_C).appendFile(FILE_D).commit()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "table.newAppend().appendFile(FILE_A).commit()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testReplaceWithNewPartitionSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "V1Assert.assertEquals(\"Table should have a spec with one void field\",v1Expected,table.spec())@@@18@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
3->24 [style = bold, label=""];
17->14 [style = solid, label="v2Expected"];
8->9 [style = bold, label=""];
22->8 [style = bold, label=""];
5->3 [style = dashed, label="0"];
14->18 [style = bold, label=""];
8->3 [style = solid, label="start"];
2->13 [style = bold, label=""];
1->12 [style = bold, label=""];
18->16 [style = solid, label="v1Expected"];
4->11 [style = bold, label=""];
13->6 [style = bold, label=""];
6->17 [style = bold, label=""];
17->14 [style = bold, label=""];
5->10 [style = bold, label=""];
3->5 [style = bold, label=""];
8->3 [style = solid, label="schema"];
21->2 [style = bold, label=""];
19->21 [style = bold, label=""];
22->12 [style = solid, label="start"];
15->11 [style = bold, label=""];
11->8 [style = bold, label=""];
12->3 [style = bold, label=""];
23->20 [style = bold, label=""];
18->16 [style = bold, label=""];
11->5 [style = solid, label="newSpec"];
24->19 [style = bold, label=""];
9->5 [style = solid, label="schema"];
0->2 [style = bold, label=""];
6->7 [style = bold, label=""];
6->23 [style = bold, label=""];
25->22 [style = bold, label=""];
9->1 [style = bold, label=""];
10->0 [style = bold, label=""];
13->6 [style = dashed, label="0"];
}
