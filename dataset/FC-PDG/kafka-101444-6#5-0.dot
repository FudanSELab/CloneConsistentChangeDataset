digraph {
11 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKeys(i(,\"X\" + expectedKeys(i())@@@23@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKey,\"YY\" + expectedKey))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "shouldRequireCopartitionedStreams['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "joined = stream1.outerJoin(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.of(100),Joined.with(intSerde,stringSerde,stringSerde))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testOuterJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final KStream<Integer,String> joined@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "int i = 0@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "i < 2@@@45@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+null\",\"1:X1+null\")@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"XX\" + expectedKey))@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "joined.process(processor)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final MockProcessorSupplier<Integer,String> processor@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testOuterJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "processor.checkAndClearProcessResult(\"0:XX0+Y0\",\"0:XX0+YY0\",\"1:XX1+Y1\",\"1:XX1+YY1\",\"2:XX2+YY2\",\"3:XX3+YY3\")@@@43@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "processor = new MockProcessorSupplier<>()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i < 2@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final int(( expectedKeys = new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@cb3ea8@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i++@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"Y\" + expectedKeys(i())@@@29@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "driver.process(topic1,expectedKey,\"XX\" + expectedKey)@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0\",\"1:X1+Y1\")@@@32@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "i++@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "driver = new TopologyTestDriver(builder.build(),props,0L)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "int i = 0@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(streamTopic,tableTopic)),copartitionGroups.iterator().next())@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "i++@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "driver.process(topic2,expectedKeys(i(,\"YYY\" + expectedKeys(i()@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "driver.process(topic1,expectedKey,\"X\" + expectedKey)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "driver.setUp(builder,stateDir)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YY0\",\"0:X0+YY0\",\"1:X1+YY1\",\"1:X1+YY1\",\"2:X2+YY2\",\"3:X3+YY3\")@@@40@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"YYY\" + expectedKeys(i())@@@47@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YY0\",\"0:X0+YY0\",\"1:X1+YY1\",\"1:X1+YY1\",\"2:X2+YY2\",\"3:X3+YY3\")@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "final KStream<Integer,String> stream2@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YYY0\",\"0:X0+YYY0\",\"0:XX0+YYY0\",\"1:X1+YYY1\",\"1:X1+YYY1\",\"1:XX1+YYY1\")@@@50@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0\",\"1:X1+Y1\",\"2:X2+null\",\"3:X3+null\")@@@35@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0\",\"1:X1+Y1\")@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0\",\"1:X1+Y1\",\"2:X2+null\",\"3:X3+null\")@@@36@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "stream2 = builder.stream(topic2,consumed)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "driver.process(topic2,expectedKey,\"YY\" + expectedKey)@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "final KStream<Integer,String> stream1@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int i = 0@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "driver.process(topic2,expectedKeys(i(,\"Y\" + expectedKeys(i()@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "driver.process(topic1,expectedKeys(i(,\"X\" + expectedKeys(i()@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "driver.setTime(0L)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "stream1 = builder.stream(topic1,consumed)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YYY0\",\"0:X0+YYY0\",\"0:XX0+YYY0\",\"1:X1+YYY1\",\"1:X1+YYY1\",\"1:XX1+YYY1\")@@@49@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "i < 2@@@27@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"X\" + expectedKey))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
53 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->32 [style = dotted, label="true"];
27->32 [style = bold, label=""];
29->5 [style = bold, label=""];
18->35 [style = solid, label="i"];
11->17 [style = solid, label="i"];
24->17 [style = dotted, label="true"];
0->4 [style = solid, label="i"];
9->7 [style = bold, label=""];
38->39 [style = bold, label=""];
26->43 [style = dashed, label="0"];
3->35 [style = bold, label=""];
22->8 [style = bold, label=""];
32->4 [style = solid, label="i"];
19->5 [style = solid, label="expectedKeys"];
1->33 [style = bold, label=""];
30->28 [style = bold, label=""];
23->22 [style = bold, label=""];
31->6 [style = bold, label=""];
19->12 [style = solid, label="expectedKeys"];
6->11 [style = bold, label=""];
21->1 [style = bold, label=""];
24->17 [style = bold, label=""];
25->15 [style = bold, label=""];
18->35 [style = bold, label=""];
32->4 [style = bold, label=""];
6->11 [style = dotted, label="true"];
1->36 [style = solid, label="processor"];
32->12 [style = solid, label="i"];
8->34 [style = bold, label=""];
48->49 [style = bold, label=""];
35->18 [style = bold, label=""];
10->31 [style = bold, label=""];
19->17 [style = solid, label="expectedKeys"];
35->5 [style = solid, label="i"];
37->26 [style = bold, label=""];
35->44 [style = bold, label=""];
24->0 [style = bold, label=""];
49->6 [style = solid, label="i"];
40->0 [style = bold, label=""];
0->27 [style = solid, label="i"];
43->46 [style = bold, label=""];
11->24 [style = solid, label="i"];
17->11 [style = dashed, label="0"];
35->5 [style = bold, label=""];
2->21 [style = bold, label=""];
39->41 [style = bold, label=""];
5->29 [style = solid, label="i"];
18->5 [style = dotted, label="true"];
35->18 [style = dotted, label="true"];
4->32 [style = solid, label="i"];
27->4 [style = solid, label="i"];
4->32 [style = dotted, label="true"];
19->29 [style = solid, label="expectedKeys"];
16->20 [style = bold, label=""];
49->11 [style = solid, label="i"];
41->43 [style = bold, label=""];
4->23 [style = bold, label=""];
18->29 [style = dotted, label="true"];
6->24 [style = dotted, label="true"];
19->32 [style = solid, label="expectedKeys"];
45->15 [style = bold, label=""];
19->11 [style = solid, label="expectedKeys"];
15->10 [style = solid, label="builder"];
3->5 [style = solid, label="i"];
26->3 [style = bold, label=""];
12->32 [style = dashed, label="0"];
0->32 [style = solid, label="i"];
12->32 [style = bold, label=""];
42->47 [style = bold, label=""];
6->24 [style = bold, label=""];
5->18 [style = bold, label=""];
15->19 [style = bold, label=""];
11->24 [style = bold, label=""];
27->4 [style = dotted, label="true"];
28->51 [style = dashed, label="0"];
3->18 [style = solid, label="i"];
19->16 [style = bold, label=""];
18->5 [style = solid, label="i"];
24->11 [style = dotted, label="true"];
36->13 [style = bold, label=""];
34->39 [style = dashed, label="0"];
5->18 [style = solid, label="i"];
35->29 [style = solid, label="i"];
4->12 [style = bold, label=""];
52->50 [style = bold, label=""];
15->13 [style = solid, label="builder"];
3->35 [style = solid, label="i"];
4->12 [style = dotted, label="true"];
49->6 [style = bold, label=""];
7->36 [style = bold, label=""];
46->3 [style = bold, label=""];
22->47 [style = dashed, label="0"];
28->10 [style = bold, label=""];
53->51 [style = bold, label=""];
49->24 [style = solid, label="i"];
24->11 [style = solid, label="i"];
35->5 [style = dotted, label="true"];
0->27 [style = bold, label=""];
29->5 [style = dashed, label="0"];
4->27 [style = solid, label="i"];
13->30 [style = bold, label=""];
33->9 [style = bold, label=""];
47->38 [style = bold, label=""];
6->24 [style = solid, label="i"];
27->42 [style = bold, label=""];
20->2 [style = bold, label=""];
9->7 [style = solid, label="stream2"];
27->4 [style = bold, label=""];
18->29 [style = bold, label=""];
34->37 [style = bold, label=""];
6->11 [style = solid, label="i"];
6->17 [style = solid, label="i"];
27->32 [style = solid, label="i"];
6->40 [style = bold, label=""];
35->18 [style = solid, label="i"];
4->27 [style = bold, label=""];
10->48 [style = dashed, label="0"];
28->48 [style = bold, label=""];
24->6 [style = bold, label=""];
24->6 [style = solid, label="i"];
18->14 [style = bold, label=""];
50->53 [style = bold, label=""];
27->12 [style = solid, label="i"];
17->11 [style = bold, label=""];
}
