digraph {
108 [style = filled, label = "Assert.assertTrue(supervisor.isLifecycleStarted())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "replayAll()@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "final KafkaSupervisorTuningConfig tuningConfig = supervisor.getTuningConfig()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
114 [style = filled, label = "Assert.assertEquals(\"myCustomValue\",taskConfig.getConsumerProperties().get(\"myCustomKey\"))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "Assert.assertFalse(supervisor.isStarted())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "Assert.assertFalse(\"maximumMessageTime\",taskConfig.getMaximumMessageTime().isPresent())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "autoScalerConfig.put(\"scaleOutStep\",2)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "autoScalerConfig.put(\"scaleActionPeriodMillis\",100)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"sequenceName-0\",taskConfig.getBaseSequenceName())@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(2))@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
115 [style = filled, label = "Assert.assertFalse(\"minimumMessageTime\",taskConfig.getMinimumMessageTime().isPresent())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final KafkaSupervisorTuningConfig tuningConfigOri = new KafkaSupervisorTuningConfig(null,1000,null,null,50000,null,new Period(\"P1Y\"),new File(\"/test\"),null,null,null,true,false,null,false,null,numThreads,TEST_CHAT_THREADS,TEST_CHAT_RETRIES,TEST_HTTP_TIMEOUT,TEST_SHUTDOWN_TIMEOUT,null,null,null,null,null)@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
85 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertTrue(\"isUseTransaction\",taskConfig.isUseTransaction())@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "consumerProperties.put(\"bootstrap.servers\",kafkaHost)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Thread.sleep(1 * 1000)@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "replayAll()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
103 [style = filled, label = "resetAll()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
96 [style = filled, label = "testFailedInitializationAndRecovery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertFalse(\"maximumMessageTime\",taskConfig.getMaximumMessageTime().isPresent())@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(0))@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "testNoInitialStateWithAutoscaler['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "autoScalerConfig.put(\"scaleActionStartDelayMillis\",0)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EasyMock.expect(ingestionSchema.getIOConfig()).andReturn(kafkaSupervisorIOConfig).anyTimes()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "autoScalerConfig.put(\"triggerScaleOutFractionThreshold\",0.0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "KafkaIndexTask task = captured.getValue()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes()@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(\"myCustomValue\",taskConfig.getConsumerProperties().get(\"myCustomKey\"))@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "autoScalerConfig.put(\"lagCollectionIntervalMillis\",500)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
100 [style = filled, label = "supervisor.tryInit()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
104 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getStartSequenceNumbers().getStream())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
110 [style = filled, label = "supervisor.getIoConfig().getConsumerProperties().put(\"bootstrap.servers\",kafkaHost)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "autoScalerConfig.put(\"minTriggerScaleActionFrequencyMillis\",1200000)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent()).anyTimes()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "consumerProperties.put(\"myCustomKey\",\"myCustomValue\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "supervisor = new TestableKafkaSupervisor(taskStorage,taskMaster,indexerMetadataStorageCoordinator,taskClientFactory,OBJECT_MAPPER,(KafkaSupervisorSpec)testableSupervisorSpec,rowIngestionMetersFactory)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getStartSequenceNumbers().getStream())@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "Assert.assertEquals(dataSchema,task.getDataSchema())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "KafkaIndexTaskIOConfig taskConfig = task.getIOConfig()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getEndSequenceNumbers().getStream())@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "final KafkaSupervisorTuningConfig tuningConfigOri = new KafkaSupervisorTuningConfig(null,1000,null,null,50000,null,new Period(\"P1Y\"),new File(\"/test\"),null,null,null,false,null,false,null,numThreads,TEST_CHAT_THREADS,TEST_CHAT_RETRIES,TEST_HTTP_TIMEOUT,TEST_SHUTDOWN_TIMEOUT,null,null,null,null,null)@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "EasyMock.expect(ingestionSchema.getDataSchema()).andReturn(dataSchema).anyTimes()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Assert.assertEquals(1,taskCountBeforeScale)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "autoScalerConfig.put(\"triggerScaleInFractionThreshold\",0.8)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "HashMap<String,Object> autoScalerConfig = new HashMap<>()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getEndSequenceNumbers().getStream())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "Assert.assertTrue(supervisor.isStarted())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "KafkaSupervisorIOConfig kafkaSupervisorIOConfig = new KafkaSupervisorIOConfig(topic,INPUT_FORMAT,1,1,new Period(\"PT1H\"),consumerProperties,OBJECT_MAPPER.convertValue(autoScalerConfig,),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,new Period(\"P1D\"),new Period(\"PT30S\"),true,new Period(\"PT30M\"),null,null,null)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "addSomeEvents(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "Assert.assertEquals(tuningConfig.convertToTaskTuningConfig(),task.getTuningConfig())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(0))@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "supervisor.getInitRetryCounter() < 3@@@15@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "autoScalerConfig.put(\"scaleOutThreshold\",0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(1))@@@75@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "Capture<KafkaIndexTask> captured = Capture.newInstance()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "Assert.assertEquals(0L,taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(0).longValue())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
116 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "autoScalerConfig.put(\"scaleInStep\",1)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "KafkaIndexTaskIOConfig taskConfig = task.getIOConfig()@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "int taskCountBeforeScale = supervisor.getIoConfig().getTaskCount()@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
111 [style = filled, label = "Assert.assertEquals(kafkaHost,taskConfig.getConsumerProperties().get(\"bootstrap.servers\"))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "autoscaler.stop()@@@78@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(2).longValue())@@@50@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "int taskCountAfterScale = supervisor.getIoConfig().getTaskCount()@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "autoScalerConfig.put(\"lagCollectionRangeMillis\",500)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "Assert.assertEquals(0L,taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(1).longValue())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(1))@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(2))@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "autoScalerConfig.put(\"taskCountMin\",1)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(1).longValue())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
89 [style = filled, label = "Assert.assertTrue(supervisor.isLifecycleStarted())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.replay(ingestionSchema)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Capture<KafkaIndexTask> captured = Capture.newInstance()@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "autoScalerConfig.put(\"scaleInThreshold\",1000000)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Assert.assertTrue(\"isUseTransaction\",taskConfig.isUseTransaction())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertFalse(\"minimumMessageTime\",taskConfig.getMinimumMessageTime().isPresent())@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "autoScalerConfig.put(\"enableTaskAutoScaler\",true)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "EasyMock.expect(ingestionSchema.getTuningConfig()).andReturn(tuningConfigOri).anyTimes()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "verifyAll()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "Assert.assertEquals(KafkaSupervisorTest.dataSchema,task.getDataSchema())@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "autoScalerConfig.put(\"taskCountMax\",2)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
113 [style = filled, label = "supervisor = getTestableSupervisor(1,1,true,\"PT1H\",null,null,false,StringUtils.format(\"badhostname:%d\",kafkaServer.getPort()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testNoInitialStateWithAutoscaler['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "Thread.sleep(1000)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "KafkaIndexTask task = captured.getValue()@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "SeekableStreamSupervisorSpec testableSupervisorSpec = new KafkaSupervisorSpec(ingestionSchema,dataSchema,tuningConfigOri,kafkaSupervisorIOConfig,null,false,taskStorage,taskMaster,indexerMetadataStorageCoordinator,taskClientFactory,OBJECT_MAPPER,new NoopServiceEmitter(),new DruidMonitorSchedulerConfig(),rowIngestionMetersFactory,new SupervisorStateManagerConfig())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final Map<String,Object> consumerProperties = KafkaConsumerConfigs.getConsumerProperties()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "supervisor.start()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
105 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(0).longValue())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
91 [style = filled, label = "supervisor.runInternal()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "autoscaler.reset()@@@77@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
99 [style = filled, label = "verifyAll()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "autoscaler.start()@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Assert.assertEquals(tuningConfig.convertToTaskTuningConfig(),task.getTuningConfig())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
107 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "KafkaIndexTaskClientFactory taskClientFactory = new KafkaIndexTaskClientFactory(null,null){@Override public KafkaIndexTaskClient build(TaskInfoProvider taskInfoProvider,String dataSource,int numThreads,Duration httpTimeout,long numRetries){Assert.assertEquals(TEST_CHAT_THREADS,numThreads)Assert.assertEquals(TEST_HTTP_TIMEOUT.toStandardDuration(),httpTimeout)Assert.assertEquals(TEST_CHAT_RETRIES,numRetries)return taskClient}}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "Assert.assertEquals(0L,taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(2).longValue())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "verifyAll()@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "supervisor.start()@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "SupervisorTaskAutoScaler autoscaler = testableSupervisorSpec.createAutoscaler(supervisor)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Assert.assertEquals(2,taskCountAfterScale)@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "replayAll()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(kafkaHost,taskConfig.getConsumerProperties().get(\"bootstrap.servers\"))@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertEquals(\"sequenceName-0\",taskConfig.getBaseSequenceName())@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "supervisor.runInternal()@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77->86 [style = bold, label=""];
25->22 [style = bold, label=""];
15->61 [style = bold, label=""];
84->116 [style = bold, label=""];
70->65 [style = bold, label=""];
26->34 [style = bold, label=""];
89->109 [style = bold, label=""];
37->15 [style = bold, label=""];
85->107 [style = bold, label=""];
9->43 [style = bold, label=""];
47->115 [style = bold, label=""];
51->10 [style = bold, label=""];
58->9 [style = bold, label=""];
69->30 [style = bold, label=""];
20->27 [style = bold, label=""];
108->74 [style = bold, label=""];
55->63 [style = bold, label=""];
40->12 [style = solid, label="supervisor"];
54->110 [style = dashed, label="0"];
55->63 [style = solid, label="taskCountAfterScale"];
61->68 [style = bold, label=""];
38->49 [style = bold, label=""];
42->78 [style = dashed, label="0"];
65->37 [style = bold, label=""];
24->11 [style = bold, label=""];
2->44 [style = bold, label=""];
31->48 [style = bold, label=""];
115->88 [style = bold, label=""];
104->95 [style = bold, label=""];
80->83 [style = bold, label=""];
67->29 [style = bold, label=""];
73->71 [style = bold, label=""];
94->72 [style = bold, label=""];
57->93 [style = dashed, label="0"];
91->75 [style = bold, label=""];
59->67 [style = bold, label=""];
103->84 [style = bold, label=""];
22->40 [style = solid, label="testableSupervisorSpec"];
46->38 [style = bold, label=""];
13->32 [style = bold, label=""];
48->41 [style = bold, label=""];
110->100 [style = bold, label=""];
72->97 [style = bold, label=""];
65->22 [style = solid, label="taskClientFactory"];
0->42 [style = bold, label=""];
109->99 [style = bold, label=""];
82->112 [style = bold, label=""];
65->40 [style = solid, label="taskClientFactory"];
29->66 [style = bold, label=""];
34->8 [style = bold, label=""];
11->69 [style = dashed, label="0"];
66->35 [style = bold, label=""];
19->74 [style = dashed, label="0"];
36->58 [style = bold, label=""];
62->20 [style = bold, label=""];
64->6 [style = bold, label=""];
101->102 [style = dotted, label="true"];
114->17 [style = bold, label=""];
86->105 [style = bold, label=""];
92->110 [style = bold, label=""];
21->65 [style = bold, label=""];
101->102 [style = bold, label=""];
18->77 [style = dashed, label="0"];
42->56 [style = bold, label=""];
33->36 [style = bold, label=""];
90->82 [style = bold, label=""];
16->39 [style = bold, label=""];
60->19 [style = bold, label=""];
39->25 [style = bold, label=""];
87->79 [style = bold, label=""];
23->59 [style = bold, label=""];
11->30 [style = bold, label=""];
27->18 [style = bold, label=""];
4->24 [style = bold, label=""];
101->103 [style = bold, label=""];
24->69 [style = bold, label=""];
6->23 [style = bold, label=""];
95->76 [style = bold, label=""];
12->17 [style = bold, label=""];
83->106 [style = bold, label=""];
7->54 [style = bold, label=""];
32->33 [style = bold, label=""];
68->51 [style = bold, label=""];
106->87 [style = bold, label=""];
43->7 [style = bold, label=""];
40->12 [style = bold, label=""];
56->45 [style = bold, label=""];
102->101 [style = bold, label=""];
99->101 [style = bold, label=""];
50->60 [style = bold, label=""];
8->2 [style = bold, label=""];
11->22 [style = solid, label="tuningConfigOri"];
111->114 [style = bold, label=""];
44->24 [style = solid, label="consumerProperties"];
5->13 [style = bold, label=""];
63->52 [style = bold, label=""];
47->5 [style = bold, label=""];
71->111 [style = bold, label=""];
53->1 [style = bold, label=""];
107->94 [style = bold, label=""];
79->90 [style = bold, label=""];
75->81 [style = bold, label=""];
88->104 [style = bold, label=""];
69->22 [style = solid, label="tuningConfigOri"];
24->22 [style = solid, label="kafkaSupervisorIOConfig"];
74->91 [style = bold, label=""];
22->40 [style = bold, label=""];
0->105 [style = dashed, label="0"];
96->113 [style = bold, label=""];
57->64 [style = bold, label=""];
20->95 [style = dashed, label="0"];
50->60 [style = solid, label="taskCountBeforeScale"];
78->98 [style = bold, label=""];
45->3 [style = bold, label=""];
19->31 [style = bold, label=""];
41->55 [style = bold, label=""];
97->92 [style = bold, label=""];
17->47 [style = bold, label=""];
76->77 [style = bold, label=""];
10->46 [style = bold, label=""];
1->26 [style = bold, label=""];
81->93 [style = bold, label=""];
105->78 [style = bold, label=""];
60->108 [style = dashed, label="0"];
54->50 [style = bold, label=""];
49->53 [style = bold, label=""];
112->89 [style = bold, label=""];
14->0 [style = bold, label=""];
37->24 [style = solid, label="autoScalerConfig"];
100->108 [style = bold, label=""];
113->80 [style = bold, label=""];
44->28 [style = bold, label=""];
35->62 [style = bold, label=""];
52->57 [style = bold, label=""];
30->16 [style = bold, label=""];
18->14 [style = bold, label=""];
27->76 [style = dashed, label="0"];
93->73 [style = bold, label=""];
28->4 [style = bold, label=""];
56->98 [style = dashed, label="0"];
116->85 [style = bold, label=""];
}
