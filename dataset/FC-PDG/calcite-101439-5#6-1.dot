digraph {
1 [style = filled, label = "planner.addRule(new AltTraitConverterRule(ALT_TRAIT,ALT_TRAIT2,\"AltToAlt2ConverterRule\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testDoubleConversion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue((child instanceof AltTraitConverter) || (child instanceof PhysToIteratorConverter))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "child = child.getInputs().get(0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(EnumerableConvention.INSTANCE,result.getTraitSet().getTrait(ConventionTraitDef.INSTANCE))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "planner.addRule(new IterSingleRule2())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "VolcanoPlanner planner = new VolcanoPlanner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "planner.addRelTraitDef(ConventionTraitDef.INSTANCE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "RelNode child = result.getInputs().get(0)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "planner.setRoot(convertedRel)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "RelOptCluster cluster = newCluster(planner)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertTrue((child instanceof AltTraitConverter) || (child instanceof PhysToIteratorConverter))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testDoubleConversion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "RelNode result = planner.chooseDelegate().findBestExp()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "RelNode convertedRel = planner.changeTraits(noneRel,cluster.traitSetOf(EnumerableConvention.INSTANCE).replace(ALT_TRAIT2))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "NoneLeafRel noneLeafRel = RelOptUtil.addTrait(new NoneLeafRel(cluster,\"noneLeafRel\"),ALT_TRAIT)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testTraitPropagation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(child instanceof IterSingleRel)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "planner.addRelTraitDef(ALT_TRAIT_DEF)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "child = child.getInputs().get(0)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(EnumerableConvention.INSTANCE,child.getTraitSet().getTrait(ConventionTraitDef.INSTANCE))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "planner.addRule(new IterSingleRule())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(ALT_TRAIT2,child.getTraitSet().getTrait(ALT_TRAIT_DEF))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(ALT_TRAIT2,result.getTraitSet().getTrait(ALT_TRAIT_DEF))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "planner.addRule(new PhysLeafRule())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(child instanceof PhysLeafRel)@@@28@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "planner.addRule(new PhysToIteratorConverterRule())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "RelOptCluster cluster = VolcanoPlannerTest.newCluster(planner)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(result instanceof IterSingleRel)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "NoneSingleRel noneRel = RelOptUtil.addTrait(new NoneSingleRel(cluster,noneLeafRel),ALT_TRAIT2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "child = child.getInputs().get(0)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
29->8 [style = bold, label=""];
0->9 [style = bold, label=""];
24->13 [style = solid, label="cluster"];
25->22 [style = bold, label=""];
16->10 [style = bold, label=""];
30->16 [style = solid, label="child"];
27->28 [style = bold, label=""];
8->3 [style = bold, label=""];
15->5 [style = solid, label="child"];
18->19 [style = bold, label=""];
1->20 [style = bold, label=""];
22->7 [style = solid, label="cluster"];
28->26 [style = bold, label=""];
22->13 [style = solid, label="cluster"];
4->18 [style = bold, label=""];
21->24 [style = bold, label=""];
4->18 [style = solid, label="convertedRel"];
7->4 [style = bold, label=""];
23->8 [style = bold, label=""];
20->25 [style = bold, label=""];
10->11 [style = solid, label="child"];
11->15 [style = bold, label=""];
15->5 [style = bold, label=""];
3->0 [style = bold, label=""];
22->24 [style = dashed, label="0"];
26->30 [style = bold, label=""];
17->16 [style = solid, label="child"];
20->21 [style = bold, label=""];
13->7 [style = solid, label="noneLeafRel"];
19->14 [style = solid, label="result"];
12->2 [style = bold, label=""];
19->14 [style = bold, label=""];
24->7 [style = solid, label="cluster"];
21->22 [style = bold, label=""];
13->7 [style = bold, label=""];
14->12 [style = bold, label=""];
6->8 [style = bold, label=""];
8->22 [style = solid, label="planner"];
7->4 [style = solid, label="noneRel"];
21->25 [style = dashed, label="0"];
17->27 [style = bold, label=""];
8->24 [style = solid, label="planner"];
9->1 [style = bold, label=""];
30->16 [style = bold, label=""];
17->27 [style = solid, label="child"];
22->13 [style = bold, label=""];
17->16 [style = bold, label=""];
24->13 [style = bold, label=""];
10->11 [style = bold, label=""];
}
