digraph {
5 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment2).getBytes(StandardCharsets.UTF_8),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment2.getId().toString()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(2,metadataUpdateCounter.get())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final AtomicLong attemptCounter = new AtomicLong()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment).getBytes(StandardCharsets.UTF_8),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment.getId().toString()))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final SegmentPublishResult result1 = coordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment),new ObjectMetadata(null),new ObjectMetadata(ImmutableMap.of(\"foo\",\"bar\")))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")),coordinator.getDataSourceMetadata(\"fooDataSource\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(new SegmentPublishResult(ImmutableSet.of(defaultSegment),true),result1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")),failOnceCoordinator.getDataSourceMetadata(\"fooDataSource\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final SegmentPublishResult result2 = coordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment2),new ObjectMetadata(ImmutableMap.of(\"foo\",\"bar\")),new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testTransactionalAnnounceSuccess['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "testTransactionalAnnounceRetryAndSuccess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(new SegmentPublishResult(ImmutableSet.of(defaultSegment),true),result1)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(SegmentPublishResult.ok(ImmutableSet.of(defaultSegment2)),result2)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testTransactionalAnnounceSuccess['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment).getBytes(StandardCharsets.UTF_8),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment.getId().toString()))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(new SegmentPublishResult(ImmutableSet.of(defaultSegment2),true),result2)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "final SegmentPublishResult result1 = failOnceCoordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment),new ObjectMetadata(null),new ObjectMetadata(ImmutableMap.of(\"foo\",\"bar\")))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "attemptCounter.set(0)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final SegmentPublishResult result2 = failOnceCoordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment2),new ObjectMetadata(ImmutableMap.of(\"foo\",\"bar\")),new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(SegmentPublishResult.ok(ImmutableSet.of(defaultSegment)),result1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(new SegmentPublishResult(ImmutableSet.of(defaultSegment2),true),result2)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final IndexerSQLMetadataStorageCoordinator failOnceCoordinator = new IndexerSQLMetadataStorageCoordinator(mapper,derbyConnectorRule.metadataTablesConfigSupplier().get(),derbyConnector){@Override protected DataSourceMetadataUpdateResult updateDataSourceMetadataWithHandle(Handle handle,String dataSource,DataSourceMetadata startMetadata,DataSourceMetadata endMetadata){metadataUpdateCounter.getAndIncrement()if (attemptCounter.getAndIncrement() == 0) {return DataSourceMetadataUpdateResult.TRY_AGAIN}{return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8fe8c1handledataSourcestartMetadataendMetadata}}}@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment2).getBytes(StandardCharsets.UTF_8),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment2.getId().toString()))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(4,metadataUpdateCounter.get())@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
5->8 [style = bold, label=""];
22->15 [style = bold, label=""];
2->20 [style = dashed, label="0"];
6->1 [style = solid, label="result2"];
19->14 [style = solid, label="result1"];
12->21 [style = bold, label=""];
8->15 [style = dashed, label="0"];
4->0 [style = solid, label="result1"];
1->9 [style = dashed, label="0"];
0->11 [style = dashed, label="0"];
4->11 [style = solid, label="result1"];
16->22 [style = bold, label=""];
3->4 [style = bold, label=""];
21->18 [style = bold, label=""];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
6->1 [style = bold, label=""];
13->19 [style = bold, label=""];
19->14 [style = bold, label=""];
8->2 [style = bold, label=""];
15->20 [style = bold, label=""];
14->12 [style = bold, label=""];
7->6 [style = bold, label=""];
10->4 [style = bold, label=""];
9->5 [style = bold, label=""];
18->16 [style = solid, label="result2"];
23->17 [style = bold, label=""];
17->13 [style = bold, label=""];
6->9 [style = bold, label=""];
4->11 [style = bold, label=""];
6->9 [style = solid, label="result2"];
11->7 [style = bold, label=""];
18->16 [style = bold, label=""];
}
