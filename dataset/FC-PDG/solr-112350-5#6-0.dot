digraph {
19 [style = filled, label = "call.op.kind == SqlKind.EQUALS || call.op.kind == SqlKind.NOT_EQUALS@@@13@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "final RexCall cast = ((RexCall)right)@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "List<RexNode> operands = call.getOperands()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Pair<String,RexLiteral> b = translateBinary2(right,left)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "left.getKind() == SqlKind.CAST && right.getKind() == SqlKind.CAST@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "return a@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "throw new AssertionError(\"Invalid number of arguments - \" + operands.size())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final Pair<String,RexLiteral> a = translateBinary2(left,right)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "return new Pair<>(reverseAggMappings.get(a.getKey()),a.getValue())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "translateBinary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "return translateBinary2(left,cast.operands.get(0))@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "reverseAggMappings.containsKey(a.getKey())@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "return b@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "operands.size() != 2@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "left.getKind() == SqlKind.INPUT_REF && right.getKind() == SqlKind.CAST@@@22@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "translateBinary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final RexNode left = operands.get(0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "RexCall call@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "b != null@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "translateBinary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "throw new AssertionError(\"cannot translate call \" + call)@@@20@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final RexNode right = operands.get(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "cast.operands.size() == 1 && cast.operands.get(0).getKind() == SqlKind.LITERAL@@@24@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "return translateBinary2(((RexCall)left).operands.get(0),((RexCall)right).operands.get(0))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "a != null@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12->8 [style = solid, label="a"];
17->18 [style = dotted, label="true"];
5->14 [style = bold, label=""];
21->14 [style = bold, label=""];
3->11 [style = bold, label=""];
1->8 [style = dotted, label="true"];
10->12 [style = solid, label="right"];
1->9 [style = bold, label=""];
8->9 [style = bold, label=""];
19->9 [style = bold, label=""];
11->12 [style = solid, label="left"];
9->4 [style = bold, label=""];
19->5 [style = bold, label=""];
24->23 [style = bold, label=""];
2->5 [style = bold, label=""];
13->17 [style = bold, label=""];
20->18 [style = bold, label=""];
4->5 [style = bold, label=""];
1->8 [style = bold, label=""];
0->3 [style = dotted, label="true"];
12->1 [style = bold, label=""];
5->13 [style = dotted, label="true"];
9->4 [style = solid, label="b"];
17->14 [style = bold, label=""];
0->3 [style = bold, label=""];
12->1 [style = solid, label="a"];
11->21 [style = solid, label="left"];
17->20 [style = bold, label=""];
19->9 [style = dotted, label="true"];
15->7 [style = bold, label=""];
1->24 [style = bold, label=""];
0->11 [style = bold, label=""];
15->6 [style = dotted, label="true"];
5->13 [style = bold, label=""];
4->2 [style = bold, label=""];
19->4 [style = dotted, label="true"];
16->6 [style = dotted, label="true"];
10->12 [style = bold, label=""];
5->17 [style = bold, label=""];
11->9 [style = solid, label="left"];
11->10 [style = bold, label=""];
10->9 [style = solid, label="right"];
18->21 [style = dotted, label="true"];
24->23 [style = dotted, label="true"];
9->2 [style = solid, label="b"];
17->20 [style = dotted, label="true"];
23->8 [style = bold, label=""];
22->7 [style = bold, label=""];
7->0 [style = bold, label=""];
1->24 [style = dotted, label="true"];
22->6 [style = dotted, label="true"];
1->19 [style = bold, label=""];
4->14 [style = bold, label=""];
18->21 [style = bold, label=""];
16->7 [style = bold, label=""];
6->14 [style = solid, label="call"];
2->14 [style = bold, label=""];
10->20 [style = solid, label="right"];
13->14 [style = bold, label=""];
18->14 [style = bold, label=""];
24->8 [style = bold, label=""];
8->19 [style = bold, label=""];
4->2 [style = dotted, label="true"];
}
