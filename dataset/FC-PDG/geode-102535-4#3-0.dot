digraph {
14 [style = filled, label = "cos.write(9)@@@40@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "assertFalse(cos.isEmpty())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "final OutputStream streamTwo = mockContext.mock(,\"streamTwo\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final OutputStream streamOne = mockContext.mock(,\"streamOne\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "inOrderStreams.verify(streamOne,times(2)).flush()@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "cos.close()@@@64@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1226ba,2,3)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "cos.flush()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertFalse(cos.isEmpty())@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "cos.addOutputStream(streamOne)@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@122658,2,3)@@@34@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "cos.addOutputStream(streamOne)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "cos.flush()@@@41@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "cos.flush()@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testAddOneOutputStreamWhenEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertTrue(cos.isEmpty())@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "testNewCompositeOutputStreamWithTwoStreams['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(1)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "cos.close()@@@42@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "assertEquals(2,cos.size())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(4)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "mockContext.checking(new Expectations(){})@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(0,cos.size())@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final Sequence seqStreamOne = mockContext.sequence(\"seqStreamOne\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "cos.write(9)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "assertThat(cos.isEmpty()).isTrue()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testAddOneOutputStreamWhenEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "cos.write(9)@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(1,cos.size())@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertThat(cos.size()).isEqualTo(0)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "final Sequence seqStreamTwo = mockContext.sequence(\"seqStreamTwo\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@122789,2,3)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "mockContext.checking(new Expectations(){})@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@12266b)@@@37@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "cos.close()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@12279c)@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(0)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1226cd)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12->33 [style = dashed, label="0"];
30->17 [style = bold, label=""];
25->22 [style = bold, label=""];
47->48 [style = bold, label=""];
22->16 [style = bold, label=""];
5->40 [style = solid, label="streamOne"];
36->29 [style = bold, label=""];
18->34 [style = bold, label=""];
19->20 [style = bold, label=""];
2->3 [style = bold, label=""];
16->24 [style = bold, label=""];
3->14 [style = bold, label=""];
26->18 [style = bold, label=""];
0->15 [style = dashed, label="0"];
10->28 [style = dashed, label="0"];
11->12 [style = bold, label=""];
31->21 [style = bold, label=""];
1->0 [style = bold, label=""];
17->32 [style = bold, label=""];
21->26 [style = solid, label="streamOne"];
10->42 [style = dashed, label="0"];
12->6 [style = bold, label=""];
13->11 [style = bold, label=""];
34->30 [style = bold, label=""];
5->1 [style = solid, label="streamOne"];
4->7 [style = bold, label=""];
44->38 [style = bold, label=""];
21->20 [style = solid, label="streamOne"];
37->9 [style = bold, label=""];
35->25 [style = bold, label=""];
48->46 [style = bold, label=""];
6->1 [style = bold, label=""];
24->26 [style = bold, label=""];
29->27 [style = bold, label=""];
28->35 [style = bold, label=""];
0->10 [style = bold, label=""];
23->33 [style = bold, label=""];
42->44 [style = bold, label=""];
15->28 [style = bold, label=""];
9->21 [style = dashed, label="0"];
39->40 [style = bold, label=""];
13->43 [style = bold, label=""];
5->13 [style = bold, label=""];
6->19 [style = dashed, label="0"];
8->9 [style = bold, label=""];
45->42 [style = bold, label=""];
9->5 [style = bold, label=""];
38->47 [style = bold, label=""];
32->36 [style = bold, label=""];
43->41 [style = bold, label=""];
10->2 [style = bold, label=""];
40->45 [style = bold, label=""];
33->19 [style = bold, label=""];
41->39 [style = bold, label=""];
41->40 [style = solid, label="streamTwo"];
20->15 [style = bold, label=""];
14->4 [style = bold, label=""];
21->23 [style = bold, label=""];
}
