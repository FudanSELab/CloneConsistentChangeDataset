digraph {
5 [style = filled, label = "Assert.assertEquals(1L,values.get(\"cnt_write_final_proc_time_ms\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(0L,values.get(\"cnt_write_final_proc_time_ms\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Map<String,Object> values = MetricsUtils.currentServerMetrics()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Request req1 = createWriteRequest(1L,2)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "setupProcessors(0,1000)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "checkTimeMetric((long)values.get(\"max_write_final_proc_time_ms\"),1000L,2000L)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "checkTimeMetric((long)values.get(\"max_write_final_proc_time_ms\"),1000L,2000L)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "values = MetricsUtils.currentServerMetrics()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "commitWithWait(createWriteRequest(1L,1))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "checkTimeMetric((long)values.get(\"max_server_write_committed_time_ms\"),0L,1000L)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "processRequestWithWait(req1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testServerWriteCommittedTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "commitWithWait(req1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "setupProcessors(0,0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(1L,values.get(\"cnt_write_final_proc_time_ms\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testWriteFinalProcTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Request req1 = createWriteRequest(1l,2)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "testWriteFinalProcTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(1L,values.get(\"cnt_server_write_committed_time_ms\"))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(0L,values.get(\"cnt_write_final_proc_time_ms\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14->3 [style = bold, label=""];
6->3 [style = bold, label=""];
5->8 [style = bold, label=""];
16->18 [style = bold, label=""];
7->1 [style = bold, label=""];
0->6 [style = bold, label=""];
11->1 [style = bold, label=""];
0->19 [style = bold, label=""];
12->4 [style = solid, label="req1"];
6->0 [style = dashed, label="0"];
18->17 [style = bold, label=""];
1->18 [style = dashed, label="0"];
9->10 [style = bold, label=""];
2->3 [style = solid, label="req1"];
6->14 [style = dashed, label="0"];
2->17 [style = dashed, label="0"];
2->4 [style = bold, label=""];
12->3 [style = solid, label="req1"];
4->0 [style = bold, label=""];
8->13 [style = dashed, label="0"];
3->19 [style = dashed, label="0"];
3->9 [style = bold, label=""];
2->12 [style = dashed, label="0"];
0->14 [style = bold, label=""];
12->4 [style = bold, label=""];
10->13 [style = bold, label=""];
5->10 [style = dashed, label="0"];
15->0 [style = bold, label=""];
17->15 [style = bold, label=""];
1->12 [style = bold, label=""];
9->5 [style = bold, label=""];
1->2 [style = bold, label=""];
2->4 [style = solid, label="req1"];
}
