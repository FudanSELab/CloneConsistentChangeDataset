digraph {
23 [style = filled, label = "assertThat(message.hashCode()).isNotEqualTo(message2.hashCode())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(builder.getInt32ToEnumFieldValueMap().get(2).intValue()).isEqualTo(1000)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertThat(message.getInt32ToEnumFieldMap()).isEqualTo(message2.getInt32ToEnumFieldMap())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(TestMap.EnumValue.UNRECOGNIZED,message.getInt32ToEnumFieldMap().get(2))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "message = builder.build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(TestMap.EnumValue.UNRECOGNIZED,message.getInt32ToEnumFieldMap().get(2))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(1000,message.getInt32ToEnumFieldValueMap().get(2).intValue())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "testUnknownEnumValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertEquals(TestMap.EnumValue.FOO,message.getInt32ToEnumFieldMap().get(0))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "builder.putAllInt32ToEnumFieldValue(newMap(2,1000))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(message.getInt32ToEnumFieldMap()).containsEntry(0,TestMap.EnumValue.FOO)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertThat(builder.getInt32ToEnumFieldValueMap().get(2).intValue()).isEqualTo(1000)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "TestMap.Builder builder = TestMap.newBuilder().putInt32ToEnumFieldValue(0,0).putInt32ToEnumFieldValue(1,1).putInt32ToEnumFieldValue(2,1000)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "builder = message.toBuilder()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(1000,builder.getInt32ToEnumFieldValueMap().get(2).intValue())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "message = TestMap.parseFrom(message.toByteString(),ExtensionRegistry.getEmptyRegistry())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(1000,message.getInt32ToEnumFieldValueMap().get(2).intValue())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertThat(message.getInt32ToEnumFieldMap()).containsEntry(2,TestMap.EnumValue.UNRECOGNIZED)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(1000,message.getInt32ToEnumFieldValueMap().get(2).intValue())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "builder.putAllInt32ToEnumFieldValue(newMap(2,1001))@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertFalse(message.hashCode() == message2.hashCode())@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(TestMap.EnumValue.BAR,message.getInt32ToEnumFieldMap().get(1))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "message = TestMap.parseFrom(message.toByteString())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(message.getInt32ToEnumFieldMap()).containsEntry(1,TestMap.EnumValue.BAR)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "TestMap message2 = builder.build()@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestMap message = builder.build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testUnknownEnumValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TestMap.Builder builder = TestMap.newBuilder().putAllInt32ToEnumFieldValue(newMap(0,0,1,1,2,1000))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(message.getInt32ToEnumFieldValueMap().get(2).intValue()).isEqualTo(1000)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertFalse(message.equals(message2))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(1000,builder.getInt32ToEnumFieldValueMap().get(2).intValue())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "message = TestMap.parseFrom(message.toByteString())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertThat(message.equals(message2)).isFalse()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "testUnknownEnumValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(message.getInt32ToEnumFieldValueMap().get(2).intValue()).isEqualTo(1000)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertEquals(message2.getInt32ToEnumFieldMap(),message.getInt32ToEnumFieldMap())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "builder = TestMap.newBuilder().mergeFrom(message)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->20 [style = dashed, label="0"];
8->34 [style = bold, label=""];
23->25 [style = bold, label=""];
1->4 [style = bold, label=""];
25->28 [style = bold, label=""];
7->21 [style = dashed, label="0"];
21->17 [style = solid, label="message"];
16->11 [style = bold, label=""];
8->15 [style = bold, label=""];
10->31 [style = bold, label=""];
15->7 [style = bold, label=""];
15->34 [style = dashed, label="0"];
19->29 [style = bold, label=""];
13->29 [style = dashed, label="0"];
2->3 [style = bold, label=""];
11->6 [style = bold, label=""];
26->1 [style = bold, label=""];
4->19 [style = bold, label=""];
35->32 [style = bold, label=""];
14->22 [style = dashed, label="0"];
14->17 [style = bold, label=""];
11->23 [style = dashed, label="0"];
10->28 [style = dashed, label="0"];
16->23 [style = bold, label=""];
5->14 [style = bold, label=""];
3->16 [style = bold, label=""];
1->32 [style = dashed, label="0"];
29->18 [style = bold, label=""];
20->5 [style = bold, label=""];
7->9 [style = bold, label=""];
12->13 [style = bold, label=""];
36->30 [style = bold, label=""];
17->24 [style = bold, label=""];
21->20 [style = bold, label=""];
16->6 [style = solid, label="message2"];
12->19 [style = dashed, label="0"];
17->2 [style = bold, label=""];
6->25 [style = dashed, label="0"];
18->27 [style = bold, label=""];
30->5 [style = bold, label=""];
0->1 [style = bold, label=""];
31->33 [style = bold, label=""];
6->10 [style = bold, label=""];
34->36 [style = bold, label=""];
9->5 [style = bold, label=""];
4->12 [style = bold, label=""];
22->17 [style = bold, label=""];
6->31 [style = solid, label="message2"];
8->18 [style = dashed, label="0"];
32->4 [style = bold, label=""];
15->27 [style = dashed, label="0"];
2->24 [style = dashed, label="0"];
13->8 [style = bold, label=""];
5->3 [style = solid, label="message"];
27->21 [style = bold, label=""];
5->22 [style = bold, label=""];
24->3 [style = bold, label=""];
7->17 [style = solid, label="message"];
}
