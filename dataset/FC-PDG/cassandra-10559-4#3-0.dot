digraph {
6 [style = filled, label = "validateFullyContainedIn_SingleContiguousRange_Succeeds['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<Range<Token>> requestedRanges = Arrays.asList(new Range<>(store.getPartitioner().getMinimumToken(),getTokenAtIndex(4)),new Range<>(getTokenAtIndex(2),getTokenAtIndex(6)),new Range<>(getTokenAtIndex(5),sstable.last.getToken()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(cof.contained(requestedRanges,sstable))@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "validateFullyContainedIn_SplitRange_Succeeds['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "CassandraOutgoingFile cof = new CassandraOutgoingFile(StreamOperation.BOOTSTRAP,sstable.ref(),sstable.getPositionsForRanges(requestedRanges),requestedRanges,sstable.estimatedKeys())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "validateFullyContainedIn_SplitRange_Succeeds['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<Range<Token>> requestedRanges = Arrays.asList(new Range<>(store.getPartitioner().getMinimumToken(),sstable.last.getToken()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "requestedRanges = Range.normalize(requestedRanges)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7->3 [style = solid, label="requestedRanges"];
5->2 [style = bold, label=""];
2->0 [style = solid, label="requestedRanges"];
2->4 [style = solid, label="requestedRanges"];
2->7 [style = dashed, label="0"];
2->3 [style = solid, label="requestedRanges"];
4->3 [style = solid, label="requestedRanges"];
6->7 [style = bold, label=""];
2->4 [style = bold, label=""];
3->0 [style = bold, label=""];
4->3 [style = bold, label=""];
1->2 [style = bold, label=""];
2->3 [style = bold, label=""];
4->0 [style = solid, label="requestedRanges"];
7->0 [style = solid, label="requestedRanges"];
7->3 [style = bold, label=""];
}
