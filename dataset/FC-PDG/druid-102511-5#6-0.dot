digraph {
74 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new KafkaPartitions(topic,checkpoint.getPartitionOffsetMap())))))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "kafkaProducer.send(record).get()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getProcessed())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final KafkaPartitions checkpoint = new KafkaPartitions(topic,ImmutableMap.of(0,1L,1,0L))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionOffsetMap().equals(currentOffsets))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "final KafkaPartitions endPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,2L,1,0L))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "final KafkaPartitions startPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,0L,1,0L))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@30@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "final KafkaPartitions checkpoint1 = new KafkaPartitions(topic,ImmutableMap.of(0,3L,1,0L))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
70 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new KafkaPartitions(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,nextOffsets)))))@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
78 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertTrue(checkpoint.getPartitionOffsetMap().equals(currentOffsets))@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@24@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
84 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "i++@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "task.getRunner().getStatus() != KafkaIndexTask.Status.PAUSED@@@30@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "i++@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionOffsetMap().equals(nextOffsets))@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@62@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testIncrementalHandOffMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@38@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new KafkaPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new KafkaPartitions(topic,nextOffsets)))))@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
75 [style = filled, label = "Thread.sleep(10)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@56@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
83 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "i < numToAdd@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final KafkaPartitions endPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,2L))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "maxTotalRows = 3L@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final KafkaPartitions checkpoint2 = new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,0L))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new KafkaPartitions(topic,currentOffsets)))))@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
76 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Thread.sleep(10)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int i = numToAdd@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "i < records.size()@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "task.getRunner().getStatus() != KafkaIndexTask.Status.PAUSED@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "int i = 0@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@56@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
69->22 [style = solid, label="desc2"];
76->0 [style = solid, label="consumerProps"];
34->67 [style = bold, label=""];
20->9 [style = bold, label=""];
43->52 [style = solid, label="desc4"];
45->25 [style = solid, label="currentOffsets"];
49->74 [style = dashed, label="0"];
69->83 [style = solid, label="desc2"];
58->60 [style = bold, label=""];
64->42 [style = solid, label="task"];
3->53 [style = dotted, label="true"];
59->64 [style = solid, label="endPartitions"];
79->76 [style = bold, label=""];
64->33 [style = solid, label="task"];
51->2 [style = solid, label="nextOffsets"];
22->30 [style = bold, label=""];
60->24 [style = bold, label=""];
33->52 [style = solid, label="desc5"];
1->59 [style = dashed, label="0"];
39->57 [style = bold, label=""];
24->23 [style = dashed, label="0"];
70->73 [style = bold, label=""];
30->11 [style = bold, label=""];
34->3 [style = solid, label="currentOffsets"];
18->48 [style = solid, label="i"];
82->68 [style = bold, label=""];
31->64 [style = dashed, label="0"];
45->49 [style = solid, label="currentOffsets"];
46->54 [style = bold, label=""];
11->36 [style = solid, label="desc3"];
33->42 [style = bold, label=""];
78->80 [style = bold, label=""];
45->62 [style = bold, label=""];
40->47 [style = bold, label=""];
31->42 [style = solid, label="task"];
0->31 [style = solid, label="startPartitions"];
31->33 [style = solid, label="task"];
12->46 [style = solid, label="i"];
64->34 [style = bold, label=""];
56->7 [style = bold, label=""];
1->31 [style = bold, label=""];
9->38 [style = bold, label=""];
12->54 [style = bold, label=""];
45->74 [style = bold, label=""];
30->36 [style = solid, label="desc2"];
48->18 [style = dotted, label="true"];
45->10 [style = bold, label=""];
44->61 [style = dashed, label="0"];
72->35 [style = bold, label=""];
59->64 [style = bold, label=""];
45->10 [style = solid, label="currentOffsets"];
80->83 [style = solid, label="desc1"];
24->19 [style = bold, label=""];
57->61 [style = bold, label=""];
36->41 [style = bold, label=""];
55->59 [style = bold, label=""];
52->37 [style = bold, label=""];
77->45 [style = bold, label=""];
71->79 [style = bold, label=""];
13->64 [style = solid, label="consumerProps"];
14->22 [style = bold, label=""];
37->21 [style = bold, label=""];
66->38 [style = dotted, label="true"];
67->53 [style = dotted, label="true"];
0->57 [style = dashed, label="0"];
64->11 [style = solid, label="task"];
45->62 [style = solid, label="currentOffsets"];
3->67 [style = dashed, label="0"];
11->43 [style = bold, label=""];
12->54 [style = solid, label="i"];
2->56 [style = dashed, label="0"];
49->58 [style = dashed, label="0"];
80->73 [style = solid, label="desc1"];
5->17 [style = bold, label=""];
67->53 [style = bold, label=""];
0->80 [style = solid, label="task"];
5->48 [style = solid, label="numToAdd"];
9->38 [style = dotted, label="true"];
3->53 [style = bold, label=""];
29->52 [style = bold, label=""];
39->0 [style = solid, label="endPartitions"];
62->20 [style = bold, label=""];
5->12 [style = solid, label="numToAdd"];
35->40 [style = bold, label=""];
49->25 [style = bold, label=""];
25->24 [style = bold, label=""];
61->55 [style = bold, label=""];
20->23 [style = bold, label=""];
11->29 [style = solid, label="desc3"];
9->66 [style = dashed, label="0"];
7->23 [style = bold, label=""];
68->0 [style = solid, label="startPartitions"];
42->32 [style = bold, label=""];
43->33 [style = bold, label=""];
32->36 [style = bold, label=""];
66->38 [style = bold, label=""];
47->0 [style = solid, label="baseSequenceName"];
0->44 [style = bold, label=""];
47->64 [style = solid, label="baseSequenceName"];
48->13 [style = bold, label=""];
76->82 [style = bold, label=""];
10->62 [style = dashed, label="0"];
67->45 [style = bold, label=""];
64->32 [style = solid, label="task"];
32->36 [style = solid, label="desc7"];
27->55 [style = dashed, label="0"];
44->13 [style = dashed, label="0"];
22->26 [style = solid, label="desc1"];
51->25 [style = solid, label="nextOffsets"];
47->31 [style = solid, label="baseSequenceName"];
65->26 [style = bold, label=""];
22->36 [style = solid, label="desc1"];
81->34 [style = bold, label=""];
35->40 [style = dotted, label="true"];
0->84 [style = solid, label="task"];
31->30 [style = solid, label="task"];
51->7 [style = solid, label="nextOffsets"];
6->18 [style = bold, label=""];
25->60 [style = dashed, label="0"];
3->45 [style = bold, label=""];
45->60 [style = solid, label="currentOffsets"];
10->3 [style = dashed, label="0"];
38->9 [style = bold, label=""];
51->56 [style = solid, label="nextOffsets"];
41->65 [style = dashed, label="0"];
0->69 [style = solid, label="task"];
13->39 [style = bold, label=""];
26->8 [style = bold, label=""];
68->74 [style = solid, label="startPartitions"];
83->70 [style = bold, label=""];
48->6 [style = bold, label=""];
47->50 [style = bold, label=""];
31->34 [style = bold, label=""];
4->45 [style = dashed, label="0"];
66->12 [style = bold, label=""];
38->66 [style = bold, label=""];
18->48 [style = bold, label=""];
4->58 [style = bold, label=""];
19->14 [style = bold, label=""];
0->84 [style = bold, label=""];
54->28 [style = dotted, label="true"];
27->39 [style = dashed, label="0"];
51->2 [style = bold, label=""];
1->31 [style = solid, label="endPartitions"];
69->83 [style = bold, label=""];
81->75 [style = bold, label=""];
31->32 [style = solid, label="task"];
64->22 [style = solid, label="task"];
51->60 [style = solid, label="nextOffsets"];
20->66 [style = bold, label=""];
64->30 [style = solid, label="task"];
45->58 [style = solid, label="currentOffsets"];
50->15 [style = bold, label=""];
9->12 [style = bold, label=""];
50->71 [style = bold, label=""];
75->81 [style = bold, label=""];
42->36 [style = solid, label="desc6"];
54->28 [style = bold, label=""];
23->78 [style = bold, label=""];
33->36 [style = solid, label="desc5"];
53->67 [style = bold, label=""];
34->53 [style = solid, label="currentOffsets"];
53->77 [style = bold, label=""];
0->49 [style = solid, label="startPartitions"];
31->34 [style = solid, label="task"];
54->51 [style = bold, label=""];
43->36 [style = solid, label="desc4"];
27->1 [style = bold, label=""];
10->20 [style = bold, label=""];
32->21 [style = solid, label="desc7"];
57->58 [style = solid, label="startPartitions"];
54->46 [style = dotted, label="true"];
31->43 [style = solid, label="task"];
31->22 [style = solid, label="task"];
46->54 [style = solid, label="i"];
19->78 [style = dashed, label="0"];
53->3 [style = bold, label=""];
42->37 [style = solid, label="desc6"];
23->4 [style = bold, label=""];
57->64 [style = solid, label="startPartitions"];
51->56 [style = bold, label=""];
74->20 [style = bold, label=""];
31->11 [style = solid, label="task"];
81->75 [style = dotted, label="true"];
73->22 [style = bold, label=""];
15->5 [style = bold, label=""];
17->18 [style = solid, label="i"];
17->48 [style = solid, label="i"];
48->6 [style = dotted, label="true"];
28->46 [style = bold, label=""];
39->0 [style = bold, label=""];
4->49 [style = bold, label=""];
34->3 [style = bold, label=""];
64->34 [style = solid, label="task"];
17->48 [style = bold, label=""];
35->47 [style = bold, label=""];
80->69 [style = bold, label=""];
41->26 [style = bold, label=""];
84->81 [style = bold, label=""];
2->7 [style = bold, label=""];
16->35 [style = bold, label=""];
68->13 [style = bold, label=""];
44->27 [style = bold, label=""];
13->31 [style = solid, label="consumerProps"];
45->20 [style = solid, label="currentOffsets"];
36->65 [style = bold, label=""];
30->8 [style = solid, label="desc2"];
8->29 [style = bold, label=""];
64->43 [style = solid, label="task"];
63->35 [style = bold, label=""];
}
