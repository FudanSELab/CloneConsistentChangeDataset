digraph {
10 [style = filled, label = "assertValuePredicateMatchButMore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertValueAtInvalidIndex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "to.assertValueAt(2,new Predicate<Integer>(){@Override public boolean test(final Integer o){return o == 1}})@@@7@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "thrown.expectMessage(\"Value present but other values as well\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "thrown.expectMessage(\"Invalid index: 2 (latch = 0, values = 2, errors = 0, completions = 1)\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Observable.just(1,2).subscribe(to)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "thrown.expect()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThrows(\"Invalid index: 2 (latch = 0, values = 2, errors = 0, completions = 1)\",,null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "TestObserverEx<Integer> to = new TestObserverEx<>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "to.assertValue(new Predicate<Integer>(){@Override public boolean test(final Integer o){return o == 1}})@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertValueAtInvalidIndex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
5->9 [style = dashed, label="0"];
1->0 [style = bold, label=""];
6->7 [style = bold, label=""];
1->0 [style = solid, label="to"];
10->1 [style = bold, label=""];
4->5 [style = bold, label=""];
3->4 [style = bold, label=""];
2->1 [style = bold, label=""];
3->8 [style = bold, label=""];
4->8 [style = dashed, label="0"];
8->9 [style = bold, label=""];
}
