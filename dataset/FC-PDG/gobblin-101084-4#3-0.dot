digraph {
16 [style = filled, label = "i = 0@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(((List)(sei.getProducer().get().listSpecs().get())).size() == 0,\"SpecProducer should contain 0 \" + \"Spec after addition\")@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "i = 0@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertTrue(specs.size() == 1,\"Spec store should contain 1 Spec after addition\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "IdentityFlowToJobSpecCompiler specCompiler = (IdentityFlowToJobSpecCompiler)this.orchestrator.getSpecCompiler()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "topologySpec = (TopologySpec)spec@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "logger.info(\"(Before Create( Spec \" + i++ + \": \" + gson.toJson(topologySpec))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "TopologySpec topologySpec = (TopologySpec)spec@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "logger.info(\"(Before Create( Spec \" + i++ + \": \" + gson.toJson(flowSpec))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(specCompiler.getTopologySpecMap().size() == 1,\"SpecCompiler should contain 1 Spec after addition\")@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(specCompiler.getTopologySpecMap().size() == 0,\"SpecCompiler should not know about any Topology \" + \"before addition\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Collection<Spec> specs = flowCatalog.getSpecs()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "FlowSpec flowSpec = (FlowSpec)spec@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "logger.info(\"(After Create( Spec \" + i++ + \": \" + gson.toJson(flowSpec))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "specs = topologyCatalog.getSpecs()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "this.topologyCatalog.put(topologySpec)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "createFlowSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "logger.info(\"(After Create( Spec \" + i++ + \": \" + gson.toJson(topologySpec))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(((List)(sei.listSpecs().get())).size() == 0,\"SpecExecutorInstanceProducer should not know about \" + \"any Flow before addition\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "createTopologySpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Collection<Spec> specs = topologyCatalog.getSpecs()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "specs = flowCatalog.getSpecs()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(((List)(sei.getProducer().get().listSpecs().get())).size() == 0,\"SpecProducer should not know about \" + \"any Flow before addition\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "this.flowCatalog.put(flowSpec)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "SpecExecutorInstanceProducer sei = specCompiler.getTopologySpecMap().values().iterator().next().getSpecExecutorInstanceProducer()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "logger.info(\"(Before Create( Number of specs: \" + specs.size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "createFlowSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "logger.info(\"(After Create( Number of specs: \" + specs.size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertTrue(specs.size() == 0,\"Spec store should be empty before addition\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertTrue(((List)(sei.listSpecs().get())).size() == 0,\"SpecExecutorInstanceProducer should contain 0 \" + \"Spec after addition\")@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "SpecExecutor sei = specCompiler.getTopologySpecMap().values().iterator().next().getSpecExecutor()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "flowSpec = (FlowSpec)spec@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->20 [style = dashed, label="0"];
22->26 [style = bold, label=""];
24->28 [style = bold, label=""];
8->5 [style = solid, label="flowSpec"];
0->9 [style = bold, label=""];
2->19 [style = bold, label=""];
31->25 [style = bold, label=""];
4->17 [style = bold, label=""];
10->14 [style = bold, label=""];
1->15 [style = bold, label=""];
32->0 [style = bold, label=""];
3->18 [style = dashed, label="0"];
4->15 [style = bold, label=""];
19->10 [style = bold, label=""];
22->32 [style = bold, label=""];
26->22 [style = solid, label="topologySpec"];
29->23 [style = bold, label=""];
8->13 [style = solid, label="flowSpec"];
27->16 [style = bold, label=""];
1->4 [style = solid, label="i"];
7->8 [style = bold, label=""];
11->2 [style = bold, label=""];
2->12 [style = bold, label=""];
26->22 [style = bold, label=""];
14->7 [style = bold, label=""];
20->5 [style = bold, label=""];
21->2 [style = bold, label=""];
23->14 [style = bold, label=""];
7->13 [style = solid, label="i"];
14->26 [style = bold, label=""];
25->27 [style = bold, label=""];
24->33 [style = bold, label=""];
12->10 [style = bold, label=""];
14->22 [style = solid, label="i"];
5->6 [style = bold, label=""];
12->19 [style = dashed, label="0"];
6->25 [style = dashed, label="0"];
16->1 [style = bold, label=""];
15->4 [style = solid, label="flowSpec"];
16->33 [style = bold, label=""];
6->16 [style = bold, label=""];
33->24 [style = bold, label=""];
15->4 [style = bold, label=""];
15->33 [style = dashed, label="0"];
17->3 [style = bold, label=""];
9->5 [style = bold, label=""];
28->17 [style = bold, label=""];
26->31 [style = solid, label="topologySpec"];
5->31 [style = dashed, label="0"];
0->20 [style = bold, label=""];
16->24 [style = solid, label="i"];
4->24 [style = dashed, label="0"];
13->8 [style = bold, label=""];
30->2 [style = bold, label=""];
2->29 [style = bold, label=""];
33->24 [style = solid, label="topologySpec"];
13->22 [style = dashed, label="0"];
17->18 [style = bold, label=""];
8->13 [style = bold, label=""];
0->31 [style = bold, label=""];
13->0 [style = bold, label=""];
8->26 [style = dashed, label="0"];
}
