digraph {
14 [style = filled, label = "TestAllExtensionsLite.parseFrom(buffer,registry)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "fail()@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "fail()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "InvalidProtocolBufferException expected@@@9@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ByteBuffer buffer = ByteBuffer.wrap(message.toByteArray(),0,message.getSerializedSize() - 1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ByteBuffer buffer = ByteBuffer.wrap(message.toByteArray(),0,message.getSerializedSize() - 1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertWithMessage(\"expected exception\").fail()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "InvalidProtocolBufferException expected@@@9@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "testParseFromByteBufferThrows_extensions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "fail()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "InvalidProtocolBufferException expected@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "{}@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testParseFromByteBufferThrows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TestAllExtensionsLite.parseFrom(ByteBuffer.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@34dea6),registry)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testParseFromByteBufferThrows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertWithMessage(\"expected exception\").fail()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "TestAllExtensionsLite message = TestAllExtensionsLite.newBuilder().setExtension(UnittestLite.optionalInt32ExtensionLite,123).addExtension(UnittestLite.repeatedStringExtensionLite,\"hello\").build()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "fail()@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TestAllTypesLite.parseFrom(ByteBuffer.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@34de3c))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "UnittestLite.registerAllExtensions(registry)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
5->8 [style = bold, label=""];
8->16 [style = bold, label=""];
4->14 [style = bold, label=""];
9->0 [style = bold, label=""];
0->12 [style = bold, label=""];
0->15 [style = dashed, label="0"];
8->6 [style = bold, label=""];
7->0 [style = bold, label=""];
4->2 [style = bold, label=""];
19->17 [style = bold, label=""];
4->14 [style = solid, label="buffer"];
12->6 [style = bold, label=""];
3->4 [style = bold, label=""];
13->16 [style = bold, label=""];
3->4 [style = solid, label="buffer"];
1->12 [style = dashed, label="0"];
6->16 [style = dashed, label="0"];
1->6 [style = bold, label=""];
10->8 [style = bold, label=""];
0->1 [style = bold, label=""];
6->13 [style = bold, label=""];
17->15 [style = solid, label="registry"];
17->14 [style = solid, label="registry"];
2->11 [style = dashed, label="0"];
14->18 [style = bold, label=""];
4->14 [style = dashed, label="0"];
16->4 [style = bold, label=""];
4->11 [style = bold, label=""];
20->15 [style = bold, label=""];
17->20 [style = solid, label="registry"];
15->8 [style = bold, label=""];
17->20 [style = bold, label=""];
}
