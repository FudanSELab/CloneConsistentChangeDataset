digraph {
10 [style = filled, label = "assertEquals(\"von Neumann, J., Smith, J. and Black Brown, P.\",a.format(\"John von Neumann and John Smith and Black Brown, Peter\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(\"Someone, V. S.\",a.format(\"Van Something Someone\"))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "LayoutFormatter a = new AuthorLastFirstAbbrCommas()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"von Neumann, J. and Black Brown, P.\",a.format(\"John von Neumann and Black Brown, Peter\"))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"\",a.format(\"\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(\"von Neumann, J., Smith, J., and Black Brown, P.\",a.format(\"von Neumann, John and Smith, John and Black Brown, Peter\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "LayoutFormatter a = new AuthorLastFirstAbbrOxfordCommas()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(\"von Neumann, J., Smith, J., and Black Brown, P.\",a.format(\"John von Neumann and John Smith and Black Brown, Peter\"))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testFormat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testFormat['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"Someone, V. S.\",a.format(\"Van Something Someone\"))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(\"von Neumann, J., Smith, J. and Black Brown, P.\",a.format(\"John von Neumann and John Smith and Black Brown, Peter\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"von Neumann, J. and Black Brown, P.\",a.format(\"John von Neumann and Black Brown, Peter\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(\"\",a.format(\"\"))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"von Neumann, J., Smith, J. and Black Brown, P.\",a.format(\"von Neumann, John and Smith, John and Black Brown, Peter\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(\"von Neumann, J., Smith, J. and Black Brown, P.\",a.format(\"von Neumann, John and Smith, John and Black Brown, Peter\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "testFormat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
16->0 [style = bold, label=""];
4->14 [style = bold, label=""];
6->8 [style = dashed, label="0"];
1->14 [style = dashed, label="0"];
0->6 [style = bold, label=""];
7->8 [style = bold, label=""];
13->16 [style = bold, label=""];
3->0 [style = bold, label=""];
2->10 [style = dashed, label="0"];
2->15 [style = dashed, label="0"];
1->12 [style = dashed, label="0"];
6->4 [style = bold, label=""];
4->9 [style = dashed, label="0"];
12->10 [style = bold, label=""];
3->7 [style = bold, label=""];
11->3 [style = bold, label=""];
8->9 [style = bold, label=""];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
9->12 [style = bold, label=""];
0->7 [style = dashed, label="0"];
3->16 [style = dashed, label="0"];
}
