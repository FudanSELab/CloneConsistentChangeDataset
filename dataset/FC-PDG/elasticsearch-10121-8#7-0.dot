digraph {
2 [style = filled, label = "Map<String,Object> config = new HashMap<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "config.put(\"database_file\",\"GeoLite2-Country.mmdb\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "asnOnlyProperties.remove(GeoIpProcessor.Property.IP)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(e.getMessage(),equalTo(\"(properties( illegal property value (\" + cityProperty + \"(. valid values are (IP, ASN, ORGANIZATION_NAME(\"))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Exception e = expectThrows(,null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testBuildWithAsnDbAndCityFields['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testBuildWithAsnDbAndCityFields['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(e.getMessage(),equalTo(\"(properties( illegal property value (\" + asnProperty + \"(. valid values are (IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME(\"))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "String asnProperty = RandomPicks.randomFrom(Randomness.get(),asnOnlyProperties).toString()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testBuildWithCountryDbAndAsnFields['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "config.put(\"properties\",Collections.singletonList(cityProperty))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "config.put(\"properties\",Collections.singletonList(asnProperty))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String cityProperty = RandomPicks.randomFrom(Randomness.get(),cityOnlyProperties).toString()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders,new GeoIpCache(1000))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "config.put(\"database_file\",\"GeoLite2-ASN.mmdb\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "config.put(\"field\",\"_field\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "cityOnlyProperties.remove(GeoIpProcessor.Property.IP)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(e.getMessage(),equalTo(\"(properties( illegal property value (\" + cityProperty + \"(. valid values are (IP, ASN, ORGANIZATION_NAME, NETWORK(\"))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->17 [style = bold, label=""];
7->14 [style = dashed, label="0"];
18->19 [style = bold, label=""];
8->13 [style = bold, label=""];
15->3 [style = bold, label=""];
1->7 [style = bold, label=""];
4->0 [style = bold, label=""];
19->16 [style = bold, label=""];
10->11 [style = dashed, label="0"];
5->1 [style = bold, label=""];
16->17 [style = solid, label="asnProperty"];
3->2 [style = bold, label=""];
1->16 [style = dashed, label="0"];
6->11 [style = bold, label=""];
6->10 [style = bold, label=""];
7->6 [style = bold, label=""];
1->7 [style = solid, label="cityProperty"];
16->14 [style = solid, label="asnProperty"];
10->17 [style = dashed, label="0"];
1->10 [style = solid, label="cityProperty"];
9->3 [style = bold, label=""];
16->14 [style = bold, label=""];
0->18 [style = dashed, label="0"];
12->3 [style = bold, label=""];
1->11 [style = solid, label="cityProperty"];
8->4 [style = bold, label=""];
4->13 [style = dashed, label="0"];
5->19 [style = dashed, label="0"];
14->6 [style = bold, label=""];
13->18 [style = bold, label=""];
2->8 [style = bold, label=""];
0->5 [style = bold, label=""];
}
