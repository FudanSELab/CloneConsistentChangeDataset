digraph {
24 [style = filled, label = "shouldNotCompleteRestorationIfTasksCannotInitialize['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "changeLogReader.enforceRestoreActive()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(task01.state(),is(Task.State.CREATED))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expectLastCall()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expectLastCall()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(asList(task00,task01)).anyTimes()@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "replay(consumer,activeTaskCreator,standbyTaskCreator,changeLogReader)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "shouldNotCompleteRestorationIfTaskCannotCompleteRestoration['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "expect(consumer.assignment()).andReturn(emptySet())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(singletonList(task00)).anyTimes()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertThat(task00.state(),is(Task.State.RESTORING))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "taskManager.handleAssignment(assignment,emptyMap())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes()@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "consumer.resume(eq(emptySet()))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expect(changeLogReader.completedChangelogs()).andReturn(emptySet())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "verify(activeTaskCreator)@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01))))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()),is(false))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(task00.state(),is(Task.State.CREATED))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Task task00 = new StateMachineTask(taskId00,taskId00Partitions,true){@Override public void completeRestoration(){throw new TimeoutException(\"timeout!\")}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(task00.state(),is(Task.State.CREATED))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectLastCall()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00))))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final Task task01 = new StateMachineTask(taskId01,taskId01Partitions,true){@Override public void initializeIfNeeded(){throw new TimeoutException(\"timed out\")}}@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(task01.state(),is(Task.State.CREATED))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andStubReturn(asList(task00,task01))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "consumer.commitSync(Collections.emptyMap())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "verify(activeTaskCreator)@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "shouldNotCompleteRestorationIfTasksCannotInitialize['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28->29 [style = bold, label=""];
17->25 [style = bold, label=""];
1->4 [style = bold, label=""];
15->13 [style = bold, label=""];
13->32 [style = bold, label=""];
9->11 [style = bold, label=""];
22->16 [style = bold, label=""];
1->30 [style = dashed, label="0"];
17->31 [style = bold, label=""];
2->3 [style = bold, label=""];
11->21 [style = bold, label=""];
29->0 [style = solid, label="assignment"];
30->27 [style = bold, label=""];
20->31 [style = dashed, label="0"];
26->14 [style = bold, label=""];
8->32 [style = dashed, label="0"];
31->18 [style = bold, label=""];
6->19 [style = bold, label=""];
32->30 [style = bold, label=""];
23->29 [style = dashed, label="0"];
27->22 [style = bold, label=""];
0->15 [style = bold, label=""];
20->18 [style = bold, label=""];
8->1 [style = bold, label=""];
12->13 [style = bold, label=""];
2->4 [style = solid, label="task00"];
7->5 [style = bold, label=""];
29->2 [style = bold, label=""];
3->25 [style = solid, label="task01"];
5->6 [style = bold, label=""];
14->0 [style = bold, label=""];
23->0 [style = solid, label="assignment"];
3->7 [style = bold, label=""];
19->9 [style = bold, label=""];
20->25 [style = dashed, label="0"];
10->23 [style = bold, label=""];
2->30 [style = solid, label="task00"];
25->26 [style = bold, label=""];
2->25 [style = solid, label="task00"];
18->26 [style = dashed, label="0"];
15->12 [style = bold, label=""];
23->2 [style = bold, label=""];
2->7 [style = bold, label=""];
13->8 [style = bold, label=""];
21->17 [style = bold, label=""];
18->14 [style = bold, label=""];
4->22 [style = bold, label=""];
3->4 [style = solid, label="task01"];
17->20 [style = bold, label=""];
24->23 [style = bold, label=""];
}
