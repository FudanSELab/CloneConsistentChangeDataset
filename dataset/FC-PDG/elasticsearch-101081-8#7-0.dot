digraph {
38 [style = filled, label = "type == @@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "throw irUnaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"unary operation (\" + operation.symbol + \"( on \" + \"constant (\" + irConstantNode.getConstant() + \"(\"))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "visitBoolean['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "scope.accept(irConstantNode)@@@45@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "operation == Operation.ADD@@@47@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "type == @@@30@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "irLeftConstantNode.attachDecoration(new IRDConstant((boolean)irLeftConstantNode.getDecorationValue() && (boolean)irRightConstantNode.getDecorationValue()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "irBooleanNode.getLeftNode().visit(this,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Consumer<ExpressionNode> scope@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "irUnaryMathNode.getChildNode().visit(this,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "throw irBooleanNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"boolean operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "Consumer<ExpressionNode> scope@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Class<?> type = irUnaryMathNode.getDecorationValue()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "BooleanNode irBooleanNode@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "UnaryMathNode irUnaryMathNode@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "scope.accept(irConstantNode)@@@48@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Operation operation = irBooleanNode.getOperation()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "type == @@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "BooleanNode irBooleanNode@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "operation == Operation.SUB@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "irLeftConstantNode.attachDecoration(new IRDConstant((boolean)irLeftConstantNode.getDecorationValue() || (boolean)irRightConstantNode.getDecorationValue()))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "scope.accept(irLeftConstantNode)@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "operation == Operation.AND@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "scope.accept(irConstantNode)@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "scope.accept(irLeftConstantNode)@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() || (boolean)irRightConstantNode.getConstant())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "ConstantNode irRightConstantNode = (ConstantNode)irBooleanNode.getRightNode()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "irConstantNode.setConstant(-(double)irConstantNode.getConstant())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "visitUnaryMath['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "Operation operation = irUnaryMathNode.getOperation()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "throw irUnaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"unary operation (\" + operation.symbol + \"( on \" + \"constant (\" + irConstantNode.getConstant() + \"(\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Class<?> type = irBooleanNode.getDecorationValue()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "throw irBooleanNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"boolean operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getDecorationString() + \"( \" + \"and (\" + irRightConstantNode.getDecorationString() + \"(\"))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "type == @@@18@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "irConstantNode.setConstant(!(boolean)irConstantNode.getConstant())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "ConstantNode irConstantNode = (ConstantNode)irUnaryMathNode.getChildNode()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "type == @@@27@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "irConstantNode.setConstant(-(int)irConstantNode.getConstant())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "visitBoolean['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "type == @@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ConstantNode irLeftConstantNode = (ConstantNode)irBooleanNode.getLeftNode()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "irConstantNode.setConstant(-(long)irConstantNode.getConstant())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "scope.accept(irConstantNode)@@@36@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "irBooleanNode.getLeftNode() instanceof ConstantNode && irBooleanNode.getRightNode() instanceof ConstantNode@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "irConstantNode.setConstant(~(long)irConstantNode.getConstant())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "irConstantNode.setConstant(-(float)irConstantNode.getConstant())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "type == @@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "operation == Operation.OR@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "throw irBooleanNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() && (boolean)irRightConstantNode.getConstant())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "operation == Operation.BWNOT@@@26@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "type == @@@15@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Operation operation = irBooleanNode.getDecorationValue()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "throw irUnaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"unary operation (\" + operation.symbol + \"( on \" + \"constant (\" + irConstantNode.getConstant() + \"(\"))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "irBooleanNode.getRightNode().visit(this,null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "throw irBooleanNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getDecorationString() + \"( \" + \"and (\" + irRightConstantNode.getDecorationString() + \"(\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "type == @@@39@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "irConstantNode.setConstant(~(int)irConstantNode.getConstant())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "operation == Operation.NOT@@@38@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "irUnaryMathNode.getChildNode() instanceof ConstantNode@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11->32 [style = dashed, label="0"];
46->27 [style = solid, label="irConstantNode"];
32->52 [style = bold, label=""];
15->25 [style = bold, label=""];
52->36 [style = dotted, label="true"];
45->27 [style = bold, label=""];
19->15 [style = solid, label="type"];
59->57 [style = bold, label=""];
10->28 [style = dashed, label="0"];
18->20 [style = dotted, label="true"];
15->7 [style = dotted, label="true"];
38->42 [style = bold, label=""];
54->56 [style = solid, label="type"];
7->9 [style = bold, label=""];
44->51 [style = bold, label=""];
42->44 [style = bold, label=""];
0->3 [style = dotted, label="false"];
12->49 [style = dashed, label="0"];
37->38 [style = bold, label=""];
0->24 [style = bold, label=""];
29->46 [style = bold, label=""];
11->0 [style = dotted, label="true"];
1->12 [style = dotted, label="true"];
24->17 [style = bold, label=""];
0->8 [style = bold, label=""];
19->3 [style = solid, label="type"];
7->25 [style = dashed, label="0"];
38->42 [style = dotted, label="false"];
13->20 [style = bold, label=""];
41->33 [style = dotted, label="true"];
54->43 [style = solid, label="type"];
46->50 [style = bold, label=""];
50->54 [style = bold, label=""];
14->11 [style = bold, label=""];
16->9 [style = bold, label=""];
35->53 [style = dotted, label="true"];
38->55 [style = bold, label=""];
18->13 [style = dotted, label="true"];
40->49 [style = dotted, label="true"];
17->27 [style = dashed, label="0"];
0->3 [style = bold, label=""];
41->32 [style = bold, label=""];
26->17 [style = bold, label=""];
32->47 [style = dotted, label="false"];
22->9 [style = bold, label=""];
41->37 [style = bold, label=""];
4->19 [style = bold, label=""];
34->33 [style = bold, label=""];
23->21 [style = dotted, label="true"];
3->24 [style = dashed, label="0"];
40->30 [style = dotted, label="true"];
2->18 [style = bold, label=""];
19->22 [style = solid, label="type"];
54->41 [style = bold, label=""];
47->58 [style = dotted, label="true"];
54->37 [style = solid, label="type"];
29->41 [style = dotted, label="true"];
54->48 [style = solid, label="type"];
47->58 [style = bold, label=""];
18->6 [style = dotted, label="true"];
16->51 [style = dashed, label="0"];
0->8 [style = dotted, label="true"];
8->17 [style = bold, label=""];
31->33 [style = bold, label=""];
43->27 [style = bold, label=""];
29->50 [style = dotted, label="true"];
23->10 [style = bold, label=""];
19->0 [style = solid, label="type"];
56->48 [style = bold, label=""];
50->41 [style = solid, label="operation"];
44->31 [style = dotted, label="true"];
10->2 [style = bold, label=""];
14->15 [style = bold, label=""];
52->36 [style = bold, label=""];
54->42 [style = solid, label="type"];
0->26 [style = dotted, label="true"];
20->19 [style = bold, label=""];
51->33 [style = bold, label=""];
36->57 [style = bold, label=""];
58->43 [style = dotted, label="false"];
16->22 [style = dashed, label="0"];
50->35 [style = solid, label="operation"];
4->41 [style = dashed, label="0"];
28->29 [style = bold, label=""];
0->24 [style = dotted, label="false"];
19->24 [style = solid, label="type"];
58->43 [style = bold, label=""];
20->11 [style = solid, label="operation"];
32->57 [style = dotted, label="true"];
25->9 [style = bold, label=""];
18->19 [style = dotted, label="true"];
11->17 [style = dotted, label="true"];
38->55 [style = dotted, label="true"];
15->16 [style = dotted, label="false"];
41->37 [style = dotted, label="true"];
44->51 [style = dotted, label="false"];
54->52 [style = solid, label="type"];
39->33 [style = bold, label=""];
15->22 [style = bold, label=""];
54->51 [style = solid, label="type"];
19->14 [style = bold, label=""];
18->6 [style = bold, label=""];
4->20 [style = dashed, label="0"];
29->54 [style = dotted, label="true"];
6->13 [style = bold, label=""];
54->38 [style = solid, label="type"];
50->47 [style = solid, label="operation"];
3->17 [style = bold, label=""];
54->58 [style = solid, label="type"];
32->52 [style = dotted, label="true"];
37->38 [style = dotted, label="false"];
15->25 [style = dotted, label="true"];
56->48 [style = dotted, label="false"];
14->11 [style = dotted, label="false"];
56->59 [style = bold, label=""];
1->5 [style = dotted, label="true"];
15->22 [style = dotted, label="false"];
42->34 [style = dotted, label="true"];
37->39 [style = bold, label=""];
44->31 [style = bold, label=""];
35->53 [style = bold, label=""];
8->26 [style = dashed, label="0"];
46->33 [style = solid, label="irConstantNode"];
42->34 [style = bold, label=""];
0->26 [style = bold, label=""];
15->7 [style = bold, label=""];
48->57 [style = bold, label=""];
4->14 [style = solid, label="operation"];
46->57 [style = solid, label="irConstantNode"];
42->44 [style = dotted, label="false"];
20->14 [style = solid, label="operation"];
52->56 [style = bold, label=""];
47->27 [style = dotted, label="true"];
46->53 [style = solid, label="irConstantNode"];
40->28 [style = bold, label=""];
41->32 [style = dotted, label="false"];
15->16 [style = bold, label=""];
47->35 [style = bold, label=""];
52->56 [style = dotted, label="false"];
18->14 [style = dotted, label="true"];
9->33 [style = dashed, label="0"];
29->46 [style = dotted, label="true"];
14->15 [style = dotted, label="true"];
6->9 [style = solid, label="irLeftConstantNode"];
11->0 [style = bold, label=""];
6->17 [style = solid, label="irLeftConstantNode"];
32->47 [style = bold, label=""];
19->16 [style = solid, label="type"];
56->59 [style = dotted, label="true"];
3->43 [style = dashed, label="0"];
37->39 [style = dotted, label="true"];
58->45 [style = bold, label=""];
47->35 [style = dotted, label="false"];
58->45 [style = dotted, label="true"];
8->45 [style = dashed, label="0"];
18->4 [style = dotted, label="true"];
14->9 [style = dotted, label="true"];
50->32 [style = solid, label="operation"];
23->12 [style = dotted, label="true"];
1->10 [style = bold, label=""];
55->33 [style = bold, label=""];
54->44 [style = solid, label="type"];
4->11 [style = solid, label="operation"];
13->4 [style = bold, label=""];
}
