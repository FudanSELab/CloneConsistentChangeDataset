digraph {
1 [style = filled, label = "config.put(\"value_split\",\"=\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "config.put(\"ignore_missing\",true)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testCreateWithDefaults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertThat(processor.getValueSplit(),equalTo(\"=\"))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(processor.getField(),equalTo(\"field1\"))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(processor.getTargetField(),is(nullValue()))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(processor.getExcludeKeys(),equalTo(Collections.emptySet()))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Map<String,Object> config = new HashMap<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "KeyValueProcessor.Factory factory = new KeyValueProcessor.Factory()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "config.put(\"include_keys\",Arrays.asList(\"a\",\"b\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testCreateWithAllFieldsSet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "config.put(\"exclude_keys\",Collections.emptyList())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(processor.getTargetField(),equalTo(\"target\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(processor.getFieldSplit(),equalTo(\"&\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(processor.isIgnoreMissing())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "config.put(\"field\",\"field1\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "config.put(\"target_field\",\"target\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertFalse(processor.isIgnoreMissing())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String processorTag = randomAlphaOfLength(10)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(processor.getIncludeKeys(),equalTo(Sets.newHashSet(\"a\",\"b\")))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "KeyValueProcessor processor = factory.create(null,processorTag,null,config)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(processor.getField().newInstance(Collections.emptyMap()).execute(),equalTo(\"field1\"))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "config.put(\"field_split\",\"&\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(processor.getIncludeKeys(),is(nullValue()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testCreateWithDefaults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(processor.getTag(),equalTo(processorTag))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->25 [style = dashed, label="0"];
1->9 [style = bold, label=""];
25->20 [style = bold, label=""];
20->18 [style = bold, label=""];
4->11 [style = bold, label=""];
9->3 [style = bold, label=""];
13->6 [style = bold, label=""];
9->0 [style = solid, label="processorTag"];
6->17 [style = bold, label=""];
21->24 [style = bold, label=""];
22->9 [style = bold, label=""];
10->15 [style = dashed, label="0"];
11->2 [style = bold, label=""];
24->22 [style = bold, label=""];
8->20 [style = dashed, label="0"];
11->3 [style = solid, label="config"];
14->1 [style = bold, label=""];
0->10 [style = bold, label=""];
19->21 [style = bold, label=""];
0->15 [style = bold, label=""];
9->3 [style = solid, label="processorTag"];
10->13 [style = bold, label=""];
7->4 [style = bold, label=""];
3->0 [style = bold, label=""];
15->13 [style = bold, label=""];
6->5 [style = bold, label=""];
1->19 [style = bold, label=""];
2->14 [style = bold, label=""];
5->12 [style = bold, label=""];
16->11 [style = bold, label=""];
12->8 [style = bold, label=""];
23->4 [style = bold, label=""];
5->17 [style = dashed, label="0"];
17->25 [style = bold, label=""];
}
