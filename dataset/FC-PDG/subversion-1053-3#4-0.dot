digraph {
9 [style = filled, label = "assertExpectedDiffSummaries['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(\"Wrong number of diff summary descriptors\",20,summaries.size())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"Incorrect node kind for \" + BETA_PATH,1,betaDiff.getNodeKind())@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertNotNull(\"No diff summary for \" + BETA_PATH,betaDiff)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(\"Incorrect diff kind for \" + BETA_PATH,DiffSummary.DiffKind.ADDED.equals(betaDiff.getDiffKind()))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"Incorrect path for \" + BETA_PATH,BETA_PATH,betaDiff.getPath())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertExpectedDiffSummaries['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "DiffSummaries summaries@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(\"Incorrect diff kind for \" + BETA_PATH,betaDiff.getDiffKind() == DiffSummary.DiffKind.added)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "final String BETA_PATH = \"A/B/E/beta\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"Incorrect props changed notice for \" + BETA_PATH,false,betaDiff.propsChanged())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DiffSummary betaDiff = (DiffSummary)summaries.get(BETA_PATH)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertExpectedDiffSummaries['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->6 [style = solid, label="betaDiff"];
12->0 [style = bold, label=""];
9->8 [style = dotted, label="true"];
4->11 [style = dashed, label="0"];
4->5 [style = bold, label=""];
2->1 [style = solid, label="BETA_PATH"];
9->0 [style = bold, label=""];
7->11 [style = bold, label=""];
1->6 [style = bold, label=""];
2->7 [style = solid, label="BETA_PATH"];
12->8 [style = dotted, label="true"];
2->6 [style = solid, label="BETA_PATH"];
2->5 [style = solid, label="BETA_PATH"];
7->4 [style = bold, label=""];
10->8 [style = dotted, label="true"];
2->1 [style = bold, label=""];
5->3 [style = bold, label=""];
2->3 [style = solid, label="BETA_PATH"];
0->2 [style = bold, label=""];
6->7 [style = bold, label=""];
2->4 [style = solid, label="BETA_PATH"];
2->11 [style = solid, label="BETA_PATH"];
10->0 [style = bold, label=""];
11->5 [style = bold, label=""];
}
