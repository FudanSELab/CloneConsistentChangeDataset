digraph {
15 [style = filled, label = "assertEquals(Optional.of(new OffsetAndMetadata(divergentOffset,Optional.of(divergentOffsetEpoch),\"\")),truncation.divergentOffsetOpt)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "LogTruncation truncation = truncationOpt.get()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "int divergentOffsetEpoch = 7@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "long initialOffset = 10L@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int currentEpoch = 10@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertFalse(state.awaitingValidation(tp0))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testMaybeCompleteValidation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "state = new SubscriptionState(new LogContext(),OffsetResetStrategy.NONE)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "long divergentOffset = 5L@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "state.seekUnvalidated(tp0,initialPosition)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int initialOffsetEpoch = 5@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(initialPosition,state.position(tp0))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(initialPosition,truncation.fetchPosition)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Optional<LogTruncation> truncationOpt = state.maybeCompleteValidation(tp0,initialPosition,new OffsetForLeaderPartitionResult().setLeaderEpoch(initialOffsetEpoch).setEndOffset(initialOffset + 5))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Optional<LogTruncation> truncationOpt = state.maybeCompleteValidation(tp0,initialPosition,new EpochEndOffset().setLeaderEpoch(initialOffsetEpoch).setEndOffset(initialOffset + 5))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertTrue(truncationOpt.isPresent())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Optional<LogTruncation> truncationOpt = state.maybeCompleteValidation(tp0,initialPosition,new OffsetForLeaderPartitionResult().setLeaderEpoch(divergentOffsetEpoch).setEndOffset(divergentOffset))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "SubscriptionState.FetchPosition initialPosition = new SubscriptionState.FetchPosition(initialOffset,Optional.of(initialOffsetEpoch),new Metadata.LeaderAndEpoch(Optional.of(broker1),Optional.of(currentEpoch)))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "state.assignFromUser(Collections.singleton(tp0))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(state.awaitingValidation(tp0))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testTruncationDetectionWithoutResetPolicy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Node broker1 = new Node(1,\"localhost\",9092)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(state.awaitingValidation(tp0))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(Optional.empty(),truncationOpt)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testMaybeCompleteValidation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
10->15 [style = dashed, label="0"];
7->11 [style = bold, label=""];
9->0 [style = bold, label=""];
21->19 [style = bold, label=""];
14->8 [style = solid, label="truncationOpt"];
4->6 [style = bold, label=""];
11->1 [style = bold, label=""];
16->24 [style = bold, label=""];
8->3 [style = bold, label=""];
0->16 [style = dashed, label="0"];
23->15 [style = bold, label=""];
18->17 [style = bold, label=""];
1->5 [style = solid, label="initialOffsetEpoch"];
5->0 [style = solid, label="initialPosition"];
8->24 [style = dashed, label="0"];
12->9 [style = bold, label=""];
24->23 [style = bold, label=""];
2->4 [style = bold, label=""];
15->18 [style = bold, label=""];
5->16 [style = solid, label="initialPosition"];
9->16 [style = bold, label=""];
20->4 [style = bold, label=""];
0->14 [style = dashed, label="0"];
19->5 [style = bold, label=""];
3->10 [style = bold, label=""];
11->0 [style = solid, label="initialOffset"];
19->15 [style = solid, label="divergentOffsetEpoch"];
5->12 [style = bold, label=""];
5->10 [style = solid, label="initialPosition"];
5->14 [style = solid, label="initialPosition"];
1->21 [style = bold, label=""];
4->5 [style = solid, label="broker1"];
0->8 [style = bold, label=""];
5->18 [style = solid, label="initialPosition"];
9->14 [style = bold, label=""];
14->8 [style = bold, label=""];
0->8 [style = solid, label="truncationOpt"];
6->7 [style = bold, label=""];
11->14 [style = solid, label="initialOffset"];
7->5 [style = solid, label="currentEpoch"];
21->15 [style = solid, label="divergentOffset"];
4->22 [style = bold, label=""];
5->12 [style = solid, label="initialPosition"];
11->5 [style = solid, label="initialOffset"];
22->6 [style = bold, label=""];
21->16 [style = solid, label="divergentOffset"];
13->4 [style = bold, label=""];
}
