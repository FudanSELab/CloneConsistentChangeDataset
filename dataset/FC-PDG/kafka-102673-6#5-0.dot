digraph {
18 [style = filled, label = "valueCounts.suppress(untilTimeLimit(ofMillis(MAX_VALUE),maxRecords(1L).shutDownWhenFull())).toStream().to(outputSuppressed,Produced.with(STRING_SERDE,Serdes.Long()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "verifyErrorShutdown(driver)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final String testId = \"-shouldShutdownWhenBytesConstraintIsViolated\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "valueCounts.toStream().to(outputRaw,Produced.with(STRING_SERDE,Serdes.Long()))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final KTable<String,Long> valueCounts = buildCountsTable(input,builder)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "shouldShutdownWhenBytesConstraintIsViolated['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final String outputSuppressed = \"output-suppressed\" + testId@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "cleanStateBeforeTest(CLUSTER,input,outputRaw,outputSuppressed)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final String outputRaw = \"output-raw\" + testId@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "valueCounts.suppress(untilTimeLimit(ofMillis(MAX_VALUE),maxBytes(200L).shutDownWhenFull())).toStream().to(outputSuppressed,Produced.with(STRING_SERDE,Serdes.Long()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "shouldShutdownWhenRecordConstraintIsViolated['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final String testId = \"-shouldShutdownWhenRecordConstraintIsViolated\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Properties streamsConfig = getStreamsConfig(appId)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "valueCounts.suppress(untilTimeLimit(Duration.ofMillis(MAX_VALUE),maxBytes(200L).shutDownWhenFull())).toStream().to(outputSuppressed,Produced.with(STRING_SERDE,Serdes.Long()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "final KafkaStreams driver = IntegrationTestUtils.getStartedStreams(streamsConfig,builder,true)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "produceSynchronously(input,asList(new KeyValueTimestamp<>(\"k1\",\"v1\",scaledTime(0L)),new KeyValueTimestamp<>(\"k1\",\"v2\",scaledTime(1L)),new KeyValueTimestamp<>(\"k2\",\"v1\",scaledTime(2L)),new KeyValueTimestamp<>(\"x\",\"x\",scaledTime(3L))))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "shouldShutdownWhenBytesConstraintIsViolated['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "{driver.close()cleanStateAfterTest(CLUSTER,driver)}@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final String input = \"input\" + testId@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->9 [style = solid, label="outputRaw"];
11->8 [style = solid, label="builder"];
19->1 [style = solid, label="testId"];
1->4 [style = bold, label=""];
7->11 [style = bold, label=""];
8->15 [style = bold, label=""];
4->6 [style = bold, label=""];
8->18 [style = bold, label=""];
4->8 [style = solid, label="input"];
17->9 [style = bold, label=""];
15->18 [style = dashed, label="0"];
1->5 [style = solid, label="appId"];
5->0 [style = solid, label="streamsConfig"];
0->13 [style = solid, label="driver"];
14->1 [style = bold, label=""];
6->2 [style = bold, label=""];
8->17 [style = bold, label=""];
19->6 [style = solid, label="testId"];
19->1 [style = bold, label=""];
0->10 [style = bold, label=""];
6->18 [style = solid, label="outputSuppressed"];
13->3 [style = bold, label=""];
0->3 [style = solid, label="driver"];
19->2 [style = solid, label="testId"];
5->0 [style = bold, label=""];
10->13 [style = bold, label=""];
15->9 [style = bold, label=""];
14->6 [style = solid, label="testId"];
6->17 [style = solid, label="outputSuppressed"];
19->4 [style = solid, label="testId"];
12->14 [style = bold, label=""];
2->7 [style = solid, label="outputRaw"];
18->9 [style = bold, label=""];
9->5 [style = bold, label=""];
15->17 [style = dashed, label="0"];
11->8 [style = bold, label=""];
6->15 [style = solid, label="outputSuppressed"];
16->14 [style = bold, label=""];
11->0 [style = solid, label="builder"];
14->19 [style = dashed, label="0"];
14->4 [style = solid, label="testId"];
4->10 [style = solid, label="input"];
2->7 [style = bold, label=""];
14->2 [style = solid, label="testId"];
4->7 [style = solid, label="input"];
20->19 [style = bold, label=""];
14->1 [style = solid, label="testId"];
6->7 [style = solid, label="outputSuppressed"];
}
