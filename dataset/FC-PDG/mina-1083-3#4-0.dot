digraph {
0 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "testThatContextIsMaintainedBetweenMessages['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertNotNull(results)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(0,results.length)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "testThatUnixLineTerminatedStringReturnsEmptyResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(1,results.length)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(1,context.getBuffer().position())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "results = decoder.decode(ByteBuffer.wrap(\" string\".getBytes()),context)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(9,context.getBuffer().position())@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(9,context.getBuffer().position())@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(\"a string\",results(0()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertNotNull(results)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Context context = decoder.createDecoderState()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder(LineDelimiter.WINDOWS)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testThatUnixLineTerminatedStringReturnsEmptyResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(1,results.length)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertNull(results)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(\"a string\",results(0()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "String results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a stringa\".getBytes()),context)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
5->13 [style = dashed, label="0"];
6->0 [style = solid, label="context"];
21->18 [style = solid, label="results"];
3->14 [style = bold, label=""];
18->15 [style = bold, label=""];
14->17 [style = bold, label=""];
6->0 [style = bold, label=""];
4->2 [style = bold, label=""];
0->3 [style = solid, label="results"];
0->12 [style = dashed, label="0"];
9->7 [style = bold, label=""];
6->12 [style = solid, label="context"];
2->17 [style = dashed, label="0"];
3->4 [style = bold, label=""];
21->18 [style = bold, label=""];
12->3 [style = solid, label="results"];
21->20 [style = solid, label="results"];
0->10 [style = dashed, label="0"];
10->9 [style = solid, label="results"];
5->6 [style = bold, label=""];
8->5 [style = bold, label=""];
6->21 [style = solid, label="context"];
3->9 [style = dashed, label="0"];
16->21 [style = bold, label=""];
15->20 [style = bold, label=""];
6->10 [style = bold, label=""];
11->13 [style = bold, label=""];
12->17 [style = solid, label="results"];
4->14 [style = dashed, label="0"];
10->9 [style = bold, label=""];
12->3 [style = bold, label=""];
6->10 [style = solid, label="context"];
13->6 [style = bold, label=""];
20->19 [style = bold, label=""];
17->16 [style = bold, label=""];
6->12 [style = bold, label=""];
}
