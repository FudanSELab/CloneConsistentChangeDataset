digraph {
16 [style = filled, label = "LogTruncation truncation = truncationOpt.get()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(Optional.empty(),truncationOpt)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "state = new SubscriptionState(new LogContext(),OffsetResetStrategy.NONE)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertFalse(state.awaitingValidation(tp0))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int currentEpoch = 10@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "SubscriptionState.FetchPosition initialPosition = new SubscriptionState.FetchPosition(initialOffset,Optional.of(initialOffsetEpoch),new Metadata.LeaderAndEpoch(Optional.of(broker1),Optional.of(currentEpoch)))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testMaybeCompleteValidation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertTrue(state.awaitingValidation(tp0))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(Optional.empty(),truncation.divergentOffsetOpt)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(state.awaitingValidation(tp0))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testTruncationDetectionUnknownDivergentOffsetWithoutResetPolicy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Optional<LogTruncation> truncationOpt = state.maybeCompleteValidation(tp0,initialPosition,new EpochEndOffset(initialOffsetEpoch,initialOffset + 5))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "long initialOffset = 10L@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(truncationOpt.isPresent())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(initialPosition,state.position(tp0))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "state.assignFromUser(Collections.singleton(tp0))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testMaybeCompleteValidation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "state.seekUnvalidated(tp0,initialPosition)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Node broker1 = new Node(1,\"localhost\",9092)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Optional<LogTruncation> truncationOpt = state.maybeCompleteValidation(tp0,initialPosition,new OffsetForLeaderPartitionResult().setLeaderEpoch(initialOffsetEpoch).setEndOffset(initialOffset + 5))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(initialPosition,truncation.fetchPosition)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "int initialOffsetEpoch = 5@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Optional<LogTruncation> truncationOpt = state.maybeCompleteValidation(tp0,initialPosition,new EpochEndOffset(EpochEndOffset.UNDEFINED_EPOCH,EpochEndOffset.UNDEFINED_EPOCH_OFFSET))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->3 [style = bold, label=""];
0->14 [style = solid, label="initialPosition"];
0->1 [style = solid, label="initialPosition"];
2->19 [style = dashed, label="0"];
0->17 [style = solid, label="initialPosition"];
1->14 [style = dashed, label="0"];
21->15 [style = bold, label=""];
11->6 [style = bold, label=""];
1->3 [style = bold, label=""];
9->1 [style = solid, label="initialOffset"];
8->14 [style = bold, label=""];
0->2 [style = solid, label="initialPosition"];
12->1 [style = solid, label="initialOffsetEpoch"];
1->21 [style = dashed, label="0"];
19->17 [style = bold, label=""];
16->19 [style = bold, label=""];
15->16 [style = bold, label=""];
12->0 [style = solid, label="initialOffsetEpoch"];
12->0 [style = bold, label=""];
13->11 [style = bold, label=""];
11->18 [style = bold, label=""];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
5->2 [style = bold, label=""];
0->10 [style = bold, label=""];
3->5 [style = bold, label=""];
1->3 [style = solid, label="truncationOpt"];
14->3 [style = solid, label="truncationOpt"];
0->21 [style = solid, label="initialPosition"];
10->8 [style = bold, label=""];
11->0 [style = solid, label="broker1"];
18->6 [style = bold, label=""];
8->21 [style = bold, label=""];
3->15 [style = dashed, label="0"];
9->14 [style = solid, label="initialOffset"];
0->10 [style = solid, label="initialPosition"];
9->12 [style = bold, label=""];
9->0 [style = solid, label="initialOffset"];
7->0 [style = solid, label="currentEpoch"];
6->7 [style = bold, label=""];
4->11 [style = bold, label=""];
22->11 [style = bold, label=""];
17->20 [style = bold, label=""];
}
