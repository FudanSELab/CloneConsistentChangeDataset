digraph {
24 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,reducer.getInput().getLocalStrategy())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "checkBroadcastMergeJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(set01,reducer.getInput().getLocalStrategyKeys())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(set0,join.getInput1().getLocalStrategyKeys())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(LocalStrategy.COMBININGSORT,reducer.getInput().getLocalStrategy())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(Arrays.equals(reducer.getInput().getLocalStrategySortOrder(),reducer.getSortOrders(0)))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(set01,reducer.getKeys(0))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "SingleInputPlanNode reducer@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "return true@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertTrue(Arrays.equals(join.getInput1().getLocalStrategySortOrder(),join.getInput2().getLocalStrategySortOrder()))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "DualInputPlanNode join@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertTrue(join.getInput1().getLocalStrategySortOrder()(0( == join.getInput2().getLocalStrategySortOrder()(0()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "SingleInputPlanNode reducer@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(set0,join.getKeysForInput2())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "DualInputPlanNode join@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "return false@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "return false@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "checkBroadcastMergeJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "checkRepartitionMergeJoin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "DriverStrategy.MERGE == join.getDriverStrategy()@@@3@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(set0,join.getKeysForInput1())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return true@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "DriverStrategy.INNER_MERGE == join.getDriverStrategy()@@@3@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,join.getInput1().getLocalStrategy())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,join.getInput2().getLocalStrategy())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "DualInputPlanNode join@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(set0,join.getInput2().getLocalStrategyKeys())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(Arrays.equals(join.getInput1().getLocalStrategySortOrder(),reducer.getSortOrders(0)))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(set01,join.getInput1().getLocalStrategyKeys())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3->11 [style = dotted, label="true"];
10->8 [style = dotted, label="true"];
4->14 [style = bold, label=""];
10->12 [style = dotted, label="true"];
2->26 [style = bold, label=""];
7->21 [style = dashed, label="0"];
18->7 [style = dotted, label="true"];
10->28 [style = dotted, label="true"];
18->16 [style = dotted, label="true"];
14->28 [style = dashed, label="0"];
2->1 [style = bold, label=""];
10->27 [style = bold, label=""];
1->15 [style = bold, label=""];
18->1 [style = dotted, label="true"];
14->5 [style = bold, label=""];
18->15 [style = dotted, label="true"];
11->23 [style = dashed, label="0"];
18->8 [style = dotted, label="true"];
18->0 [style = dotted, label="false"];
7->4 [style = bold, label=""];
3->6 [style = dotted, label="true"];
10->9 [style = dotted, label="true"];
10->5 [style = dotted, label="true"];
18->14 [style = dotted, label="true"];
9->16 [style = bold, label=""];
4->28 [style = bold, label=""];
25->2 [style = bold, label=""];
10->18 [style = dashed, label="0"];
20->10 [style = bold, label=""];
10->14 [style = dotted, label="true"];
10->15 [style = dotted, label="true"];
3->10 [style = bold, label=""];
5->2 [style = bold, label=""];
13->24 [style = dashed, label="0"];
10->25 [style = dotted, label="true"];
18->12 [style = dotted, label="true"];
10->13 [style = dotted, label="true"];
10->27 [style = dotted, label="false"];
10->2 [style = dotted, label="true"];
24->21 [style = bold, label=""];
12->8 [style = bold, label=""];
10->24 [style = dotted, label="true"];
13->7 [style = bold, label=""];
18->9 [style = dotted, label="true"];
10->0 [style = dotted, label="false"];
20->23 [style = dotted, label="true"];
17->19 [style = dotted, label="true"];
10->0 [style = bold, label=""];
18->9 [style = bold, label=""];
28->25 [style = bold, label=""];
10->26 [style = dotted, label="true"];
18->5 [style = dotted, label="true"];
10->9 [style = bold, label=""];
18->4 [style = dotted, label="true"];
10->1 [style = dotted, label="true"];
20->22 [style = dotted, label="true"];
10->4 [style = dotted, label="true"];
21->4 [style = bold, label=""];
1->2 [style = dashed, label="0"];
10->16 [style = dotted, label="true"];
10->21 [style = dotted, label="true"];
16->12 [style = bold, label=""];
18->0 [style = bold, label=""];
10->7 [style = dotted, label="true"];
17->18 [style = bold, label=""];
8->13 [style = bold, label=""];
18->2 [style = dotted, label="true"];
18->13 [style = dotted, label="true"];
17->11 [style = dotted, label="true"];
8->24 [style = bold, label=""];
}
