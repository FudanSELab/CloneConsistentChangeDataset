digraph {
14 [style = filled, label = "Assert.assertEquals(cache.getCurrentChildren(\"/test\").keySet(),ImmutableSet.of(\"one\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEvent(TreeCacheEvent.Type.INITIALIZED)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/test/one\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testWithNamespaceAtRoot['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/foo\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNoMoreEvents()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "client.create().forPath(\"/test/one\",\"hey there\".getBytes())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/test\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testAsyncInitialPopulation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "client.create().forPath(\"/test\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/test/one\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(cache.getCurrentChildren(\"/\").keySet(),ImmutableSet.of(\"foo\",\"test\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testWithNamespaceAtRoot['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(cache.getCurrentChildren(\"/test/one\").keySet(),ImmutableSet.of())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "cache = new TreeCache(client.usingNamespace(\"outer\"),\"/\",true)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(cache.getCurrentChildren(\"/foo\").keySet(),ImmutableSet.of())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/test\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "client.create().forPath(\"/outer\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "client.create().forPath(\"/outer/foo\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertNoMoreEvents()@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()),\"hey there\")@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "client.create().forPath(\"/outer/test\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "cache.getListenable().addListener(eventListener)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "cache.start()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "client.create().forPath(\"/outer/test/one\",\"hey there\".getBytes())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEvent(TreeCacheEvent.Type.INITIALIZED)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25->0 [style = bold, label=""];
14->16 [style = bold, label=""];
23->25 [style = bold, label=""];
7->11 [style = bold, label=""];
11->20 [style = dashed, label="0"];
15->14 [style = bold, label=""];
2->3 [style = bold, label=""];
9->4 [style = bold, label=""];
11->6 [style = bold, label=""];
18->15 [style = bold, label=""];
16->19 [style = bold, label=""];
3->18 [style = bold, label=""];
24->20 [style = bold, label=""];
8->0 [style = bold, label=""];
17->7 [style = bold, label=""];
20->21 [style = bold, label=""];
12->13 [style = bold, label=""];
21->26 [style = bold, label=""];
0->10 [style = bold, label=""];
7->24 [style = dashed, label="0"];
26->23 [style = bold, label=""];
5->7 [style = bold, label=""];
10->9 [style = bold, label=""];
4->1 [style = bold, label=""];
1->2 [style = bold, label=""];
22->24 [style = bold, label=""];
13->8 [style = bold, label=""];
13->0 [style = bold, label=""];
6->12 [style = bold, label=""];
}
