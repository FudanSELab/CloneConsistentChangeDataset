digraph {
5 [style = filled, label = "testOneofSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build()ByteString serialized = message.toByteString()TestOneof2 message2 = TestOneof2.parseFrom(serialized)assertThat(message2.hasFooEnum()).isTrue()assertThat(message2.getFooEnum()).isEqualTo(TestOneof2.NestedEnum.BAR)}@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertEquals(\"\",builder.getFooString())builder.setFooString(\"foo\")assertTrue(builder.hasFooString())assertEquals(\"foo\",builder.getFooString())TestOneof2 message = builder.buildPartial()assertTrue(message.hasFooString())assertEquals(\"foo\",message.getFooString())assertEquals(message.getFooStringBytes(),TestUtil.toBytes(\"foo\"))assertFalse(builder.clearFooString().hasFooString())TestOneof2 message2 = builder.buildPartial()assertFalse(message2.hasFooString())assertEquals(\"\",message2.getFooString())assertEquals(message2.getFooStringBytes(),TestUtil.toBytes(\"\"))builder.setFooInt(123)assertEquals(\"\",builder.getFooString())assertEquals(builder.getFooStringBytes(),TestUtil.toBytes(\"\"))assertEquals(123,builder.getFooInt())message = builder.build()assertEquals(\"\",message.getFooString())assertEquals(message.getFooStringBytes(),TestUtil.toBytes(\"\"))assertEquals(123,message.getFooInt())}@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertEquals(TestOneof2.NestedEnum.FOO,builder.getFooEnum())assertTrue(builder.setFooEnum(TestOneof2.NestedEnum.BAR).hasFooEnum())assertEquals(TestOneof2.NestedEnum.BAR,builder.getFooEnum())TestOneof2 message = builder.buildPartial()assertTrue(message.hasFooEnum())assertEquals(TestOneof2.NestedEnum.BAR,message.getFooEnum())assertFalse(builder.clearFooEnum().hasFooEnum())TestOneof2 message2 = builder.build()assertFalse(message2.hasFooEnum())assertEquals(TestOneof2.NestedEnum.FOO,message2.getFooEnum())}@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertEquals(\"\",builder.getFooCord())builder.setFooCord(\"foo\")assertTrue(builder.hasFooCord())assertEquals(\"foo\",builder.getFooCord())TestOneof2 message = builder.buildPartial()assertTrue(message.hasFooCord())assertEquals(\"foo\",message.getFooCord())assertEquals(message.getFooCordBytes(),TestUtil.toBytes(\"foo\"))assertFalse(builder.clearFooCord().hasFooCord())TestOneof2 message2 = builder.build()assertFalse(message2.hasFooCord())assertEquals(\"\",message2.getFooCord())assertEquals(message2.getFooCordBytes(),TestUtil.toBytes(\"\"))}@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertEquals(builder.getFooInt(),0)assertFalse(builder.hasFooInt())assertTrue(builder.setFooInt(123).hasFooInt())assertEquals(builder.getFooInt(),123)TestOneof2 message = builder.buildPartial()assertTrue(message.hasFooInt())assertEquals(message.getFooInt(),123)assertFalse(builder.clearFooInt().hasFooInt())TestOneof2 message2 = builder.build()assertFalse(message2.hasFooInt())assertEquals(0,message2.getFooInt())}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testOneofTypes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()TestOneof2 message = builder.setFooMessage(TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build()).build()ByteString serialized = message.toByteString()TestOneof2 message2 = TestOneof2.parseFrom(serialized)assertThat(message2.hasFooMessage()).isTrue()assertThat(message2.getFooMessage().getQuxInt()).isEqualTo(234)}@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testOneofSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertEquals(\"\",builder.getFooStringPiece())builder.setFooStringPiece(\"foo\")assertTrue(builder.hasFooStringPiece())assertEquals(\"foo\",builder.getFooStringPiece())TestOneof2 message = builder.buildPartial()assertTrue(message.hasFooStringPiece())assertEquals(\"foo\",message.getFooStringPiece())assertEquals(message.getFooStringPieceBytes(),TestUtil.toBytes(\"foo\"))assertFalse(builder.clearFooStringPiece().hasFooStringPiece())TestOneof2 message2 = builder.build()assertFalse(message2.hasFooStringPiece())assertEquals(\"\",message2.getFooStringPiece())assertEquals(message2.getFooStringPieceBytes(),TestUtil.toBytes(\"\"))}@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()TestOneof2 message = builder.setFooString(\"foo\").build()ByteString serialized = message.toByteString()TestOneof2 message2 = TestOneof2.parseFrom(serialized)assertThat(message2.hasFooString()).isTrue()assertThat(message2.getFooString()).isEqualTo(\"foo\")}@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertEquals(0,builder.getFooMessage().getQuxInt())builder.setFooMessage(TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build())assertTrue(builder.hasFooMessage())assertEquals(234,builder.getFooMessage().getQuxInt())TestOneof2 message = builder.buildPartial()assertTrue(message.hasFooMessage())assertEquals(234,message.getFooMessage().getQuxInt())assertFalse(builder.clearFooMessage().hasFooString())message = builder.build()assertFalse(message.hasFooMessage())assertEquals(0,message.getFooMessage().getQuxInt())builder = TestOneof2.newBuilder()assertSame(builder.getFooMessageOrBuilder(),TestOneof2.NestedMessage.getDefaultInstance())assertFalse(builder.hasFooMessage())builder.getFooMessageBuilder().setQuxInt(123)assertTrue(builder.hasFooMessage())assertEquals(123,builder.getFooMessage().getQuxInt())message = builder.build()assertTrue(message.hasFooMessage())assertEquals(123,message.getFooMessage().getQuxInt())}@@@86@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2->3 [style = solid, label="serialized"];
4->6 [style = bold, label=""];
4->1 [style = solid, label="serialized"];
6->7 [style = bold, label=""];
0->4 [style = bold, label=""];
7->8 [style = bold, label=""];
8->9 [style = bold, label=""];
9->11 [style = bold, label=""];
10->4 [style = bold, label=""];
1->2 [style = bold, label=""];
1->2 [style = solid, label="serialized"];
5->4 [style = bold, label=""];
4->1 [style = bold, label=""];
2->3 [style = bold, label=""];
}
