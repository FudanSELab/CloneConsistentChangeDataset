digraph {
9 [style = filled, label = "buildRule.executeTarget(\"hasregex\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(contents,containsString(\"dog Cat dog\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "buildRule.executeTarget(\"containsregex\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "buildRule.executeTarget(\"replaceregex\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testReplaceRegex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assumeTrue(\"Regex not present\",getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(contents,not(containsString(\"This is a line with digits\")))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(contents,containsString(\"found WhiteSpace\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assumeThat(\"Regex not present\",getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\"),containsString(\"bye world\"))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(contents,containsString(\"World here\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testContainsRegex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(contents,containsString(\"world world world world\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(contents,not(containsString(\"this is the moon\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testReplaceRegex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(contents,containsString(\"Found digits (1234(\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(contents,containsString(\"moon Sun Sun\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(contents,containsString(\"hello world\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->8 [style = solid, label="contents"];
13->15 [style = bold, label=""];
7->8 [style = bold, label=""];
1->9 [style = bold, label=""];
9->11 [style = bold, label=""];
6->18 [style = dashed, label="0"];
3->4 [style = solid, label="contents"];
4->5 [style = bold, label=""];
3->5 [style = solid, label="contents"];
4->16 [style = dashed, label="0"];
14->9 [style = bold, label=""];
9->0 [style = bold, label=""];
0->13 [style = bold, label=""];
3->7 [style = solid, label="contents"];
11->2 [style = bold, label=""];
2->3 [style = bold, label=""];
12->9 [style = bold, label=""];
3->10 [style = solid, label="contents"];
15->18 [style = solid, label="contents"];
0->11 [style = dashed, label="0"];
15->16 [style = bold, label=""];
15->17 [style = solid, label="contents"];
3->15 [style = dashed, label="0"];
16->17 [style = bold, label=""];
0->2 [style = bold, label=""];
6->7 [style = bold, label=""];
5->17 [style = dashed, label="0"];
15->16 [style = solid, label="contents"];
3->4 [style = bold, label=""];
8->10 [style = bold, label=""];
5->6 [style = bold, label=""];
2->13 [style = dashed, label="0"];
3->6 [style = solid, label="contents"];
17->18 [style = bold, label=""];
}
