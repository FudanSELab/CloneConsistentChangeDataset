digraph {
41 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@43@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "final SeekableStreamPartitions<String,String> checkpoint2 = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"9\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "expectLastCall().anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc7),publishedDescriptors())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "recordSupplier.close()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final SeekableStreamPartitions<String,String> startPartitions = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"10\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "Thread.sleep(10)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "recordSupplier.assign(anyObject())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(null,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,null,false))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(checkpoint2.getPartitionSequenceNumberMap(),nextOffsets)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(0,5)).once().andReturn(records.subList(4,records.size())).once()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2049/P1D\",0)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@39@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@47@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(null,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,null,false))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@44@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@54@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@42@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "Thread.sleep(10)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc5))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final SeekableStreamPartitions<String,String> endPartitions = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"9\",shardId0,\"1\"))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc4))@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(0,3)).once().andReturn(records.subList(2,10)).once().andReturn(records.subList(9,11))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "Assert.assertEquals(6,task.getRunner().getRowIngestionMeters().getProcessed())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions),new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(stream,currentOffsets)))))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions),new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(stream,currentOffsets)))))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expectLastCall().anyTimes()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "verifyAll()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Thread.sleep(10)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "expectLastCall().once()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "recordSupplier.seek(anyObject(),anyString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@41@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(stream,currentOffsets)),new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(stream,nextOffsets)))))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final SeekableStreamPartitions<String,String> checkpoint1 = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"4\",shardId0,\"0\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "maxTotalRows = 3L@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@27@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "maxRecordsPerPoll = 1@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "final SeekableStreamPartitions<String,String> endPartitions = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"10\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "replayAll()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "final Map<String,String> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "final SeekableStreamPartitions<String,String> startPartitions = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"0\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "expect(recordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "final SeekableStreamPartitions<String,String> checkpoint1 = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"2\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54->55 [style = bold, label=""];
41->25 [style = solid, label="desc3"];
31->59 [style = dashed, label="0"];
5->10 [style = solid, label="task"];
53->69 [style = bold, label=""];
41->19 [style = bold, label=""];
35->41 [style = bold, label=""];
15->21 [style = bold, label=""];
32->0 [style = bold, label=""];
11->76 [style = dashed, label="0"];
19->31 [style = solid, label="desc4"];
44->18 [style = solid, label="desc2"];
60->53 [style = bold, label=""];
10->35 [style = bold, label=""];
28->62 [style = bold, label=""];
45->21 [style = solid, label="desc2"];
28->5 [style = solid, label="baseSequenceName"];
5->8 [style = solid, label="task"];
64->16 [style = bold, label=""];
51->18 [style = solid, label="desc7"];
5->19 [style = solid, label="task"];
68->73 [style = bold, label=""];
14->18 [style = solid, label="desc1"];
39->22 [style = solid, label="currentOffsets"];
8->1 [style = bold, label=""];
19->25 [style = solid, label="desc4"];
12->74 [style = dashed, label="0"];
38->30 [style = bold, label=""];
77->61 [style = bold, label=""];
63->28 [style = bold, label=""];
6->11 [style = bold, label=""];
25->67 [style = dashed, label="0"];
65->32 [style = solid, label="startPartitions"];
7->43 [style = bold, label=""];
25->15 [style = bold, label=""];
21->16 [style = bold, label=""];
10->49 [style = dashed, label="0"];
24->5 [style = solid, label="task"];
0->40 [style = bold, label=""];
24->35 [style = solid, label="task"];
61->77 [style = dotted, label="true"];
27->33 [style = bold, label=""];
28->24 [style = solid, label="baseSequenceName"];
24->49 [style = solid, label="task"];
38->72 [style = dashed, label="0"];
4->54 [style = dashed, label="0"];
8->39 [style = bold, label=""];
60->53 [style = solid, label="nextOffsets"];
35->25 [style = solid, label="desc2"];
58->75 [style = bold, label=""];
18->25 [style = dashed, label="0"];
62->56 [style = bold, label=""];
5->73 [style = solid, label="task"];
67->64 [style = bold, label=""];
35->50 [style = dashed, label="0"];
65->74 [style = bold, label=""];
30->42 [style = bold, label=""];
16->29 [style = bold, label=""];
61->13 [style = bold, label=""];
57->60 [style = bold, label=""];
22->32 [style = bold, label=""];
57->71 [style = bold, label=""];
76->32 [style = bold, label=""];
24->45 [style = solid, label="task"];
35->16 [style = solid, label="desc2"];
19->52 [style = dashed, label="0"];
2->9 [style = bold, label=""];
13->66 [style = bold, label=""];
17->23 [style = solid, label="desc7"];
55->5 [style = bold, label=""];
50->29 [style = solid, label="desc4"];
51->23 [style = solid, label="desc7"];
35->18 [style = solid, label="desc4"];
24->5 [style = bold, label=""];
8->61 [style = bold, label=""];
17->18 [style = solid, label="desc7"];
66->34 [style = bold, label=""];
13->37 [style = bold, label=""];
73->25 [style = solid, label="desc7"];
24->44 [style = solid, label="task"];
11->76 [style = bold, label=""];
43->12 [style = bold, label=""];
68->25 [style = solid, label="desc5"];
24->52 [style = solid, label="task"];
35->29 [style = solid, label="desc4"];
57->71 [style = dotted, label="true"];
32->58 [style = bold, label=""];
39->37 [style = solid, label="currentOffsets"];
18->25 [style = bold, label=""];
51->18 [style = bold, label=""];
72->30 [style = bold, label=""];
41->68 [style = dashed, label="0"];
42->7 [style = bold, label=""];
52->31 [style = solid, label="desc6"];
52->51 [style = bold, label=""];
44->21 [style = solid, label="desc2"];
10->18 [style = solid, label="desc3"];
41->29 [style = solid, label="desc3"];
34->57 [style = bold, label=""];
10->16 [style = solid, label="desc3"];
4->24 [style = bold, label=""];
1->8 [style = bold, label=""];
31->59 [style = bold, label=""];
19->18 [style = solid, label="desc6"];
43->65 [style = dashed, label="0"];
46->28 [style = bold, label=""];
24->14 [style = solid, label="task"];
39->13 [style = solid, label="currentOffsets"];
41->29 [style = solid, label="desc5"];
39->13 [style = bold, label=""];
55->5 [style = solid, label="endPartitions"];
47->29 [style = solid, label="desc5"];
24->19 [style = solid, label="task"];
3->26 [style = bold, label=""];
13->32 [style = solid, label="currentOffsets"];
19->68 [style = bold, label=""];
27->62 [style = dashed, label="0"];
24->48 [style = solid, label="task"];
44->45 [style = dashed, label="0"];
19->17 [style = bold, label=""];
48->15 [style = solid, label="desc1"];
43->24 [style = solid, label="startPartitions"];
50->18 [style = solid, label="desc4"];
49->50 [style = bold, label=""];
41->18 [style = solid, label="desc5"];
13->66 [style = dashed, label="0"];
26->72 [style = bold, label=""];
17->51 [style = dashed, label="0"];
24->50 [style = solid, label="task"];
68->59 [style = solid, label="desc5"];
45->18 [style = solid, label="desc2"];
24->51 [style = solid, label="task"];
59->70 [style = bold, label=""];
24->10 [style = solid, label="task"];
13->66 [style = solid, label="currentOffsets"];
11->22 [style = bold, label=""];
73->25 [style = bold, label=""];
40->14 [style = bold, label=""];
43->22 [style = solid, label="startPartitions"];
73->70 [style = solid, label="desc7"];
48->18 [style = solid, label="desc1"];
47->52 [style = bold, label=""];
41->47 [style = dashed, label="0"];
56->2 [style = bold, label=""];
47->18 [style = solid, label="desc5"];
33->2 [style = bold, label=""];
24->41 [style = solid, label="task"];
9->36 [style = bold, label=""];
65->5 [style = solid, label="startPartitions"];
5->8 [style = bold, label=""];
49->18 [style = solid, label="desc3"];
10->64 [style = solid, label="desc1"];
31->23 [style = bold, label=""];
40->48 [style = bold, label=""];
69->6 [style = bold, label=""];
14->48 [style = dashed, label="0"];
45->49 [style = bold, label=""];
49->16 [style = solid, label="desc3"];
24->17 [style = solid, label="task"];
29->31 [style = bold, label=""];
75->14 [style = bold, label=""];
20->28 [style = bold, label=""];
13->58 [style = solid, label="currentOffsets"];
44->10 [style = bold, label=""];
10->25 [style = solid, label="desc1"];
52->18 [style = solid, label="desc6"];
24->47 [style = solid, label="task"];
14->44 [style = bold, label=""];
7->65 [style = bold, label=""];
61->77 [style = bold, label=""];
26->38 [style = bold, label=""];
8->1 [style = dotted, label="true"];
71->57 [style = bold, label=""];
5->41 [style = solid, label="task"];
48->45 [style = bold, label=""];
4->24 [style = solid, label="endPartitions"];
19->31 [style = solid, label="desc6"];
60->69 [style = solid, label="nextOffsets"];
12->4 [style = bold, label=""];
50->47 [style = bold, label=""];
37->34 [style = bold, label=""];
34->6 [style = bold, label=""];
5->68 [style = solid, label="task"];
28->27 [style = bold, label=""];
8->61 [style = dashed, label="0"];
25->67 [style = bold, label=""];
74->54 [style = bold, label=""];
14->15 [style = solid, label="desc1"];
5->35 [style = solid, label="task"];
13->34 [style = solid, label="currentOffsets"];
60->58 [style = solid, label="nextOffsets"];
17->18 [style = bold, label=""];
36->3 [style = bold, label=""];
}
