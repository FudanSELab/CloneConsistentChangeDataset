digraph {
9 [style = filled, label = "ScanResultValueTimestampComparator comparator = new ScanResultValueTimestampComparator(query)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(2,descendingList.size())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ScanQuery descendingOrderScan = Druids.newScanQueryBuilder().order(ScanQuery.Order.DESCENDING).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_LIST).dataSource(\"some src\").intervals(intervalSpec).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(3,noOrderList.size())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(2,ascendingList.size())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(s2,ascendingList.get(1))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "event1.put(ColumnHolder.TIME_COLUMN_NAME,new Long(42))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "events2.add(event2)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "HashMap<String,Object> event1 = new HashMap<>()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(s2,descendingList.get(0))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(s1,descendingList.get(1))@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "List<ScanResultValue> descendingList = descendingOrderSeq.toList()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "events1.add(event1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Sequence<ScanResultValue> descendingOrderSeq = Sequences.simple(ImmutableList.of(Sequences.simple(ImmutableList.of(s1)),Sequences.simple(ImmutableList.of(s2)))).flatMerge(null,descendingOrderScan.getResultOrdering())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(-1,comparator.compare(s1,s2))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "List<ScanResultValue> noOrderList = noOrderSeq.toList()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ArrayList<HashMap<String,Object>> events2 = new ArrayList<>()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<ScanResultValue> ascendingList = ascendingOrderSeq.toList()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(1,comparator.compare(s1,s2))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "ScanResultValue s2 = new ScanResultValue(\"segmentId\",Collections.singletonList(ColumnHolder.TIME_COLUMN_NAME),events2)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Sequence<ScanResultValue> noOrderSeq = Sequences.simple(ImmutableList.of(Sequences.simple(ImmutableList.of(s1,s3)),Sequences.simple(ImmutableList.of(s2)))).flatMerge(null,noOrderScan.getResultOrdering())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(s1,ascendingList.get(0))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "ScanQuery query = Druids.newScanQueryBuilder().order(ScanQuery.Order.DESCENDING).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_LIST).dataSource(\"some src\").intervals(intervalSpec).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testComparisonDescendingList['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "event2.put(ColumnHolder.TIME_COLUMN_NAME,new Long(43))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testComparisonDescendingList['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "ScanResultValue s1 = new ScanResultValue(\"segmentId\",Collections.singletonList(ColumnHolder.TIME_COLUMN_NAME),events1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ScanQuery ascendingOrderScan = Druids.newScanQueryBuilder().order(ScanQuery.Order.ASCENDING).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_LIST).dataSource(\"some src\").intervals(intervalSpec).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Sequence<ScanResultValue> ascendingOrderSeq = Sequences.simple(ImmutableList.of(Sequences.simple(ImmutableList.of(s1)),Sequences.simple(ImmutableList.of(s2)))).flatMerge(null,ascendingOrderScan.getResultOrdering())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "ScanQuery noOrderScan = Druids.newScanQueryBuilder().order(ScanQuery.Order.NONE).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_LIST).dataSource(\"some src\").intervals(intervalSpec).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "HashMap<String,Object> event2 = new HashMap<>()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testMergeSequenceForResults['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ArrayList<HashMap<String,Object>> events1 = new ArrayList<>()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
28->29 [style = bold, label=""];
2->5 [style = solid, label="s2"];
7->2 [style = solid, label="events2"];
8->10 [style = bold, label=""];
15->13 [style = bold, label=""];
5->14 [style = dashed, label="0"];
32->23 [style = bold, label=""];
29->25 [style = bold, label=""];
31->18 [style = bold, label=""];
16->32 [style = bold, label=""];
17->30 [style = bold, label=""];
1->0 [style = bold, label=""];
12->5 [style = solid, label="s1"];
3->12 [style = bold, label=""];
4->2 [style = bold, label=""];
7->8 [style = bold, label=""];
25->16 [style = bold, label=""];
18->28 [style = bold, label=""];
12->7 [style = bold, label=""];
9->6 [style = bold, label=""];
19->24 [style = bold, label=""];
6->1 [style = bold, label=""];
30->19 [style = bold, label=""];
26->31 [style = bold, label=""];
8->4 [style = solid, label="event2"];
13->31 [style = dashed, label="0"];
22->27 [style = bold, label=""];
24->21 [style = bold, label=""];
21->22 [style = bold, label=""];
11->13 [style = bold, label=""];
2->14 [style = bold, label=""];
13->9 [style = solid, label="query"];
1->3 [style = solid, label="event1"];
10->4 [style = bold, label=""];
23->17 [style = bold, label=""];
13->9 [style = bold, label=""];
12->14 [style = solid, label="s1"];
27->20 [style = bold, label=""];
2->14 [style = solid, label="s2"];
6->12 [style = solid, label="events1"];
2->5 [style = bold, label=""];
}
