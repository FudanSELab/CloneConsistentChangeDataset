digraph {
7 [style = filled, label = "Pair<Integer,Integer> thePair = arrayProviderToTest.computeStartEnd(cardinality)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(new Integer(cardinality),thePair.rhs)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testAlsoShouldNotOptimizeLexicographic['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DimensionSelector dimSelector = makeFakeDimSelector(cardinality)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int cardinality = 1234@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "BaseTopNAlgorithm.AggregatorArrayProvider arrayProviderToTest = new BaseTopNAlgorithm.AggregatorArrayProvider(dimSelector,query,cardinality,adapter)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int threshold = 4@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(new Integer(threshold),thePair.rhs)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(new Integer(0),thePair.lhs)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).dimension(QueryRunnerTestHelper.marketDimension).filters(QueryRunnerTestHelper.qualityDimension,\"entertainment\").metric(QueryRunnerTestHelper.indexMetric).threshold(threshold).intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\").aggregators(AGGS).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testShouldOptimizeLexicographic['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).dimension(QueryRunnerTestHelper.marketDimension).metric(QueryRunnerTestHelper.indexMetric).threshold(threshold).intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\").aggregators(AGGS).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).build()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "arrayProviderToTest.ignoreAfterThreshold()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testShouldOptimizeLexicographic['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "StorageAdapter adapter = makeFakeStorageAdapter(\"2018-05-30T00:00:00Z\",\"2018-05-30T01:00:00Z\",cardinality)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.DATA_SOURCE).granularity(QueryRunnerTestHelper.ALL_GRAN).dimension(QueryRunnerTestHelper.MARKET_DIMENSION).metric(QueryRunnerTestHelper.INDEX_METRIC).threshold(threshold).intervals(\"2018-05-30T00:00:00Z/2018-05-31T00:00:00Z\").aggregators(AGGS).postAggregators(QueryRunnerTestHelper.ADD_ROWS_INDEX_CONSTANT).build()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
10->15 [style = bold, label=""];
7->10 [style = bold, label=""];
9->2 [style = bold, label=""];
2->6 [style = bold, label=""];
5->3 [style = solid, label="dimSelector"];
8->15 [style = dashed, label="0"];
6->8 [style = solid, label="threshold"];
0->3 [style = solid, label="query"];
6->0 [style = bold, label=""];
2->15 [style = solid, label="cardinality"];
2->7 [style = solid, label="cardinality"];
12->3 [style = solid, label="query"];
0->12 [style = dashed, label="0"];
12->1 [style = bold, label=""];
3->4 [style = bold, label=""];
11->2 [style = bold, label=""];
4->7 [style = bold, label=""];
14->1 [style = bold, label=""];
6->14 [style = bold, label=""];
0->14 [style = dashed, label="0"];
1->3 [style = solid, label="adapter"];
10->8 [style = bold, label=""];
0->1 [style = bold, label=""];
2->1 [style = solid, label="cardinality"];
2->3 [style = solid, label="cardinality"];
2->5 [style = solid, label="cardinality"];
14->3 [style = solid, label="query"];
13->2 [style = bold, label=""];
6->12 [style = bold, label=""];
}
