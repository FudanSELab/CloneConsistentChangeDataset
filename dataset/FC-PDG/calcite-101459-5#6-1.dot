digraph {
1 [style = filled, label = "testSplitJoinConditionExpandedIsNotDistinctFrom['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "RexInputRef rightKeyInputRef = RexInputRef.of(EMP_ROW.getFieldCount() + rightJoinIndex,EMP_DEPT_JOIN_REL_FIELDS)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int rightJoinIndex = deptRow.getFieldNames().indexOf(\"DEPTNO\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "int leftJoinIndex = empScan.getRowType().getFieldNames().indexOf(\"DEPTNO\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "RexInputRef rightKeyInputRef = RexInputRef.of(empRow.getFieldCount() + rightJoinIndex,empDeptJoinRelFields)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testSplitJoinConditionExpandedIsNotDistinctFromUsingCase2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testSplitJoinConditionExpandedIsNotDistinctFrom['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "RexNode joinCond = relBuilder.call(SqlStdOperatorTable.CASE,relBuilder.call(SqlStdOperatorTable.IS_NULL,leftKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,leftKeyInputRef),relBuilder.call(SqlStdOperatorTable.EQUALS,leftKeyInputRef,rightKeyInputRef))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "RexInputRef leftKeyInputRef = RexInputRef.of(leftJoinIndex,empDeptJoinRelFields)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "RexNode joinCond = relBuilder.call(SqlStdOperatorTable.OR,relBuilder.call(SqlStdOperatorTable.EQUALS,leftKeyInputRef,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.AND,relBuilder.call(SqlStdOperatorTable.IS_NULL,leftKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "RexInputRef leftKeyInputRef = RexInputRef.of(leftJoinIndex,EMP_DEPT_JOIN_REL_FIELDS)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int rightJoinIndex = DEPT_ROW.getFieldNames().indexOf(\"DEPTNO\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "splitJoinConditionHelper(joinCond,Collections.singletonList(leftJoinIndex),Collections.singletonList(rightJoinIndex),Collections.singletonList(false),relBuilder.literal(true))@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int leftJoinIndex = EMP_SCAN.getRowType().getFieldNames().indexOf(\"DEPTNO\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
8->10 [style = bold, label=""];
2->5 [style = bold, label=""];
7->11 [style = bold, label=""];
5->4 [style = solid, label="rightJoinIndex"];
8->7 [style = solid, label="leftJoinIndex"];
8->0 [style = solid, label="leftJoinIndex"];
6->7 [style = dashed, label="0"];
4->13 [style = solid, label="rightKeyInputRef"];
4->13 [style = bold, label=""];
10->0 [style = solid, label="rightJoinIndex"];
6->3 [style = solid, label="leftKeyInputRef"];
2->6 [style = solid, label="leftJoinIndex"];
4->3 [style = solid, label="rightKeyInputRef"];
9->8 [style = bold, label=""];
3->13 [style = dashed, label="0"];
2->8 [style = dashed, label="0"];
10->7 [style = bold, label=""];
3->0 [style = bold, label=""];
6->4 [style = bold, label=""];
12->2 [style = bold, label=""];
5->6 [style = bold, label=""];
6->13 [style = solid, label="leftKeyInputRef"];
5->10 [style = dashed, label="0"];
11->3 [style = bold, label=""];
3->0 [style = solid, label="joinCond"];
11->3 [style = solid, label="rightKeyInputRef"];
7->3 [style = solid, label="leftKeyInputRef"];
13->0 [style = solid, label="joinCond"];
5->0 [style = solid, label="rightJoinIndex"];
10->11 [style = solid, label="rightJoinIndex"];
1->2 [style = bold, label=""];
4->11 [style = dashed, label="0"];
2->0 [style = solid, label="leftJoinIndex"];
13->0 [style = bold, label=""];
}
