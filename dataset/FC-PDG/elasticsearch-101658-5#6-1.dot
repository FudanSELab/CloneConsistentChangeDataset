digraph {
2 [style = filled, label = "ConcurrentLinkedQueue<AtomicBoolean> queue = new ConcurrentLinkedQueue<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "pages(1(.close()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertFalse(closedRef.get())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(closedRef.get())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testClose['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(closedRef.get())@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "InboundChannelBuffer channelBuffer = new InboundChannelBuffer(allocator)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "channelBuffer.ensureCapacity(PAGE_SIZE * 4)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "InboundChannelBuffer channelBuffer = new InboundChannelBuffer(supplier)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testCloseRetainedPages['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "int i = 0@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Supplier<Page> supplier = null@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertFalse(closedRef.get())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "pages(0(.close()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "channelBuffer.ensureCapacity(InboundChannelBuffer.PAGE_SIZE * 4)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Page(( pages = channelBuffer.sliceAndRetainPagesTo(PAGE_SIZE * 2)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertFalse(closedRef.get())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testClose['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "expectThrows(,null)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "channelBuffer.close()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "IntFunction<Page> allocator = null@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "++i@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "i < 1@@@24@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(4,queue.size())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
1->4 [style = bold, label=""];
0->9 [style = bold, label=""];
16->0 [style = bold, label=""];
15->14 [style = bold, label=""];
0->19 [style = bold, label=""];
19->14 [style = solid, label="i"];
2->1 [style = bold, label=""];
11->6 [style = bold, label=""];
12->11 [style = bold, label=""];
22->21 [style = bold, label=""];
1->10 [style = dashed, label="0"];
18->2 [style = bold, label=""];
9->8 [style = bold, label=""];
2->10 [style = bold, label=""];
3->22 [style = bold, label=""];
17->23 [style = bold, label=""];
3->0 [style = bold, label=""];
4->12 [style = dashed, label="0"];
14->20 [style = dotted, label="true"];
15->17 [style = bold, label=""];
14->9 [style = dotted, label="false"];
19->14 [style = bold, label=""];
5->6 [style = bold, label=""];
5->11 [style = dashed, label="0"];
10->12 [style = solid, label="allocator"];
10->12 [style = bold, label=""];
7->2 [style = bold, label=""];
9->15 [style = bold, label=""];
1->4 [style = solid, label="supplier"];
21->16 [style = bold, label=""];
14->9 [style = bold, label=""];
20->15 [style = bold, label=""];
4->5 [style = bold, label=""];
14->20 [style = bold, label=""];
13->2 [style = bold, label=""];
}
