digraph {
24 [style = filled, label = "assertEquals(300,maxMetric.value(),EPSILON)@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Future<RecordMetadata> future = accumulator.append(tp,\"key\".getBytes(),\"value\".getBytes(),null,MAX_BLOCK_TIMEOUT).future@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(new MetricName(\"produce-throttle-time-avg\",METRIC_GROUP,\"\",metricTags))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Future<RecordMetadata> future = accumulator.append(tp,\"key\".getBytes(),\"value\".getBytes(),null).future@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEquals(300,maxMetric.value(),EPS)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "client.prepareResponse(fetchResponse(this.records.buffer(),Errors.NONE.code(),100L,100 * i))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "List<ConsumerRecord<byte((,byte((>> records@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "subscriptions.seek(tp,0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(3,records.size())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "i < 4@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = 1@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(new MetricName(\"produce-throttle-time-max\",METRIC_GROUP,\"\",metricTags))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "fetcher.initFetches(cluster)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final long offset = 0@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "i++@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "i <= 3@@@5@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(new MetricName(\"fetch-throttle-time-max\",metricGroup,\"\",metricTags))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "sender.run(time.milliseconds())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "subscriptions.assign(Arrays.asList(tp))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(new MetricName(\"fetch-throttle-time-avg\",metricGroup,\"\",metricTags))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(200,avgMetric.value(),EPSILON)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "int i = 1@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "client.respond(produceResponse(tp,offset,Errors.NONE.code(),100 * i))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "consumerClient.poll(0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "records = fetcher.fetchedRecords().get(tp)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
4->10 [style = bold, label=""];
3->11 [style = dotted, label="true"];
8->19 [style = dashed, label="0"];
3->7 [style = dotted, label="true"];
20->17 [style = bold, label=""];
7->1 [style = bold, label=""];
23->5 [style = bold, label=""];
5->3 [style = solid, label="i"];
7->14 [style = dashed, label="0"];
5->2 [style = solid, label="i"];
3->18 [style = dashed, label="0"];
18->1 [style = dotted, label="true"];
3->14 [style = bold, label=""];
4->19 [style = bold, label=""];
5->21 [style = solid, label="i"];
18->21 [style = dotted, label="true"];
9->2 [style = solid, label="offset"];
28->26 [style = bold, label=""];
1->18 [style = bold, label=""];
5->18 [style = bold, label=""];
16->23 [style = bold, label=""];
25->29 [style = bold, label=""];
18->20 [style = dotted, label="true"];
5->1 [style = solid, label="i"];
17->22 [style = bold, label=""];
14->1 [style = bold, label=""];
19->25 [style = bold, label=""];
3->14 [style = dotted, label="true"];
1->18 [style = solid, label="i"];
8->0 [style = bold, label=""];
26->16 [style = bold, label=""];
11->5 [style = bold, label=""];
3->5 [style = dotted, label="true"];
21->20 [style = bold, label=""];
12->5 [style = solid, label="i"];
18->4 [style = bold, label=""];
12->2 [style = solid, label="i"];
0->25 [style = dashed, label="0"];
3->7 [style = bold, label=""];
18->27 [style = bold, label=""];
0->4 [style = bold, label=""];
15->9 [style = bold, label=""];
5->18 [style = solid, label="i"];
1->21 [style = solid, label="i"];
3->13 [style = bold, label=""];
1->2 [style = bold, label=""];
12->3 [style = bold, label=""];
9->12 [style = bold, label=""];
22->1 [style = bold, label=""];
18->17 [style = dotted, label="true"];
12->3 [style = solid, label="i"];
13->8 [style = bold, label=""];
6->9 [style = bold, label=""];
4->29 [style = dashed, label="0"];
29->24 [style = bold, label=""];
27->21 [style = bold, label=""];
3->1 [style = dotted, label="true"];
10->24 [style = dashed, label="0"];
2->11 [style = bold, label=""];
18->27 [style = dotted, label="true"];
3->2 [style = dotted, label="true"];
18->22 [style = dotted, label="true"];
}
