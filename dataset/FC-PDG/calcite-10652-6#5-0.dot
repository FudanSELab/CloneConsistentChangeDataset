digraph {
7 [style = filled, label = "RelTraitSet traitSet = planner.getEmptyTraitSet().replace(EnumerableConvention.INSTANCE)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testPlanWithExplicitTraitDefs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Planner planner = getPlanner(traitDefs,Programs.of(ruleSet))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testPlan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Program program = Programs.ofRules(FilterMergeRule.INSTANCE,EnumerableRules.ENUMERABLE_FILTER_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(toString(transform),equalTo(\"EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final List<RelTraitDef> traitDefs = new ArrayList<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "traitDefs.add(RelCollationTraitDef.INSTANCE)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(FilterMergeRule.INSTANCE,EnumerableRules.ENUMERABLE_FILTER_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testPlanWithExplicitTraitDefs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\"\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "RelNode convert = planner.convert(validate)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "traitDefs.add(ConventionTraitDef.INSTANCE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Planner planner = getPlanner(null,program)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(toString(transform),equalTo(\"EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final List<RelTraitDef> traitDefs = new ArrayList<RelTraitDef>()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "RelTraitSet traitSet = planner.getEmptyTraitSet().replace(EnumerableConvention.INSTANCE)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
7->11 [style = bold, label=""];
12->5 [style = bold, label=""];
4->17 [style = dashed, label="0"];
2->6 [style = bold, label=""];
6->9 [style = solid, label="traitSet"];
18->19 [style = bold, label=""];
17->15 [style = solid, label="program"];
7->11 [style = solid, label="traitSet"];
16->17 [style = bold, label=""];
11->2 [style = solid, label="validate"];
11->2 [style = solid, label="transform"];
9->8 [style = bold, label=""];
15->18 [style = bold, label=""];
11->2 [style = bold, label=""];
14->7 [style = bold, label=""];
0->7 [style = bold, label=""];
19->14 [style = solid, label="validate"];
3->5 [style = bold, label=""];
12->0 [style = solid, label="traitDefs"];
9->8 [style = solid, label="transform"];
19->14 [style = bold, label=""];
3->12 [style = dashed, label="0"];
2->9 [style = solid, label="convert"];
10->0 [style = bold, label=""];
7->11 [style = solid, label="parse"];
17->15 [style = bold, label=""];
4->0 [style = solid, label="ruleSet"];
4->12 [style = bold, label=""];
14->11 [style = solid, label="convert"];
6->9 [style = bold, label=""];
3->0 [style = solid, label="traitDefs"];
13->4 [style = bold, label=""];
18->19 [style = solid, label="parse"];
}
