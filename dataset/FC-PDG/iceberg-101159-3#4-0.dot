digraph {
34 [style = filled, label = "String branch = \"bar \"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TableReference pti = TableReference.parse(path)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().name())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assertions.assertThat(pti.timestamp()).isNull()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assertions.assertThat(path).isEqualTo(pti.tableIdentifier().name())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "pti = TableReference.parse(path + \"@\" + branch)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assertions.assertThat(branch).isEqualTo(pti.reference())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "whitespace['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "pti = TableReference.parse(path + \"@\" + branch)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "pti = TableReference.parse(path)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assertions.assertThat(path).isEqualTo(pti.tableIdentifier().toString())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Assertions.assertThat(pti.reference()).isNull()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(branch,pti.reference())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().toString())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().name())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assertions.assertThat(pti.timestamp()).isNull()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assertions.assertThat(path).isEqualTo(pti.tableIdentifier().toString())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "String path = \"/%�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "doubleByte['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "doubleByte['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Assert.assertNull(pti.reference())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "String path = \"foo \"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "path = \"�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ.�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ\"@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assertions.assertThat(pti.timestamp()).isNull()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().toString())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "String branch = \"bar\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(branch,pti.reference())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Assertions.assertThat(pti.reference()).isNull()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "Assertions.assertThat(branch).isEqualTo(pti.reference())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assertions.assertThat(pti.timestamp()).isNull()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertNull(pti.reference())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "Assertions.assertThat(path).isEqualTo(pti.tableIdentifier().name())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->15 [style = solid, label="branch"];
4->9 [style = bold, label=""];
8->16 [style = bold, label=""];
16->3 [style = bold, label=""];
28->29 [style = bold, label=""];
18->3 [style = solid, label="path"];
16->22 [style = dashed, label="0"];
0->5 [style = solid, label="branch"];
35->4 [style = solid, label="path"];
23->30 [style = bold, label=""];
15->7 [style = bold, label=""];
27->0 [style = bold, label=""];
18->13 [style = solid, label="path"];
10->19 [style = bold, label=""];
3->11 [style = bold, label=""];
4->21 [style = bold, label=""];
26->18 [style = bold, label=""];
30->25 [style = bold, label=""];
0->12 [style = solid, label="branch"];
17->32 [style = dashed, label="0"];
11->12 [style = bold, label=""];
11->23 [style = dashed, label="0"];
35->5 [style = solid, label="path"];
1->0 [style = bold, label=""];
9->10 [style = bold, label=""];
12->30 [style = dashed, label="0"];
18->6 [style = solid, label="path"];
5->17 [style = bold, label=""];
34->5 [style = solid, label="branch"];
35->4 [style = bold, label=""];
24->5 [style = bold, label=""];
5->32 [style = bold, label=""];
19->5 [style = bold, label=""];
22->3 [style = bold, label=""];
6->28 [style = dashed, label="0"];
31->26 [style = bold, label=""];
12->2 [style = bold, label=""];
0->14 [style = bold, label=""];
3->23 [style = bold, label=""];
14->9 [style = solid, label="path"];
21->20 [style = bold, label=""];
14->5 [style = solid, label="path"];
35->17 [style = solid, label="path"];
9->21 [style = dashed, label="0"];
14->4 [style = solid, label="path"];
14->17 [style = solid, label="path"];
6->8 [style = bold, label=""];
34->15 [style = solid, label="branch"];
17->15 [style = bold, label=""];
18->13 [style = bold, label=""];
15->31 [style = dashed, label="0"];
7->18 [style = bold, label=""];
2->25 [style = dashed, label="0"];
0->34 [style = dashed, label="0"];
10->20 [style = dashed, label="0"];
35->9 [style = solid, label="path"];
14->35 [style = dashed, label="0"];
19->24 [style = dashed, label="0"];
34->35 [style = bold, label=""];
29->22 [style = bold, label=""];
13->6 [style = bold, label=""];
0->3 [style = solid, label="branch"];
7->26 [style = dashed, label="0"];
20->24 [style = bold, label=""];
18->11 [style = solid, label="path"];
33->34 [style = bold, label=""];
32->31 [style = bold, label=""];
8->29 [style = dashed, label="0"];
13->28 [style = bold, label=""];
14->4 [style = bold, label=""];
}
