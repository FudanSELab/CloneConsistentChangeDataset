digraph {
4 [style = filled, label = "buildRule.executeTarget(\"testSimpleScale\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testSimpleScale['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "File f = new File(buildRule.getOutputDir(),LARGEIMAGE)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(\"Did not create \" + f.getAbsolutePath(),f.exists())@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testSimpleScale['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assumeNotNull(\"JPEG codec is unavailable in classpath\",buildRule.getProject().getProperty(\"jpeg.codec.available\"))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(buildRule.getLog(),containsString(\"Processing File\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testSimpleScale['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4->6 [style = bold, label=""];
0->3 [style = bold, label=""];
2->4 [style = bold, label=""];
7->4 [style = bold, label=""];
6->1 [style = bold, label=""];
5->4 [style = bold, label=""];
4->1 [style = bold, label=""];
1->0 [style = bold, label=""];
}
