digraph {
11 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(30L))))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"),\"0-3000\")@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "gmce.setTopicPartitionOffsetsRange(ImmutableMap.builder().put(\"testTopic-1\",\"1000-2000\").build())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(10L))))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "gmce.setTopicPartitionOffsetsRange(ImmutableMap.builder().put(\"testTopic-1\",\"2000-3000\").build())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(table.location(),new File(tmpDir,\"data/tracking/testIcebergTable/_iceberg_metadata/\").getAbsolutePath() + \"/\" + dbName)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(30L))))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Table table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(table.currentSnapshot().allManifests().size(),2)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testWriteAddFileGMCE['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "testWriteAddFileGMCE['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(table.currentSnapshot().allManifests().size(),1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "gobblinMCEWriter.flush()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(table.currentSnapshot().allManifests().size(),2)@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertTrue(client.getPartition(\"hivedb\",\"testTable\",Lists.newArrayList(\"2020-03-17-08\")) != null)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "gobblinMCEWriter.flush()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"),\"30\")@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"),\"20\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"),\"0-2000\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"),\"0-3000\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "gmce.setNewFiles(Lists.newArrayList(DataFile.newBuilder().setFilePath(hourlyDataFile_2.toString()).setFileFormat(\"avro\").setFileMetrics(DataMetrics.newBuilder().setRecordCount(10L).build()).build()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"),\"20\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testHiveWriteAddFileGMCE['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "gmce.setTopicPartitionOffsetsRange(ImmutableMap.builder().put(\"testTopic-1\",\"3000-4000\").build())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertTrue(client.getPartition(\"hivedb\",\"testTable\",Lists.newArrayList(\"2020-03-17-09\")) != null)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,new KafkaStreamingExtractor.KafkaWatermark(new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),new LongWatermark(20L))))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertFalse(table.properties().containsKey(\"offset.range.testTopic-1\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(catalog.listTables(Namespace.of(dbName)).size(),1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"),\"9\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "gobblinMCEWriter.flush()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(client.tableExists(\"hivedb\",\"testTable\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3->11 [style = bold, label=""];
16->4 [style = bold, label=""];
26->13 [style = bold, label=""];
18->2 [style = bold, label=""];
28->12 [style = bold, label=""];
23->10 [style = bold, label=""];
29->2 [style = bold, label=""];
24->15 [style = bold, label=""];
13->6 [style = bold, label=""];
27->9 [style = bold, label=""];
15->22 [style = bold, label=""];
4->20 [style = bold, label=""];
12->24 [style = bold, label=""];
14->1 [style = bold, label=""];
6->21 [style = bold, label=""];
33->30 [style = bold, label=""];
1->3 [style = bold, label=""];
22->26 [style = bold, label=""];
11->8 [style = bold, label=""];
19->17 [style = bold, label=""];
21->5 [style = bold, label=""];
31->2 [style = bold, label=""];
15->5 [style = bold, label=""];
20->28 [style = bold, label=""];
2->24 [style = bold, label=""];
2->16 [style = bold, label=""];
9->23 [style = bold, label=""];
9->32 [style = bold, label=""];
32->33 [style = bold, label=""];
0->14 [style = bold, label=""];
20->12 [style = bold, label=""];
5->7 [style = bold, label=""];
10->0 [style = bold, label=""];
7->27 [style = bold, label=""];
17->25 [style = bold, label=""];
8->19 [style = bold, label=""];
}
