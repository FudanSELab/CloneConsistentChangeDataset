digraph {
25 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "testRunWithMaximumMessageTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "verifyAll()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getThrownAway())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2011/P1D\",0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "expectLastCall().anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectLastCall().anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(null,\"sequence0\",new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"0\")),new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"4\")),true,DateTimes.of(\"2010\"),null,\"awsEndpoint\",null,null,null,null,null,false))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "recordSupplier.assign(anyObject())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3),publishedDescriptors())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "replayAll()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"4\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(0,13)).once()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Thread.sleep(10)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expect(recordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "recordSupplier.seek(anyObject(),anyString())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2010/P1D\",0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testRunWithMinimumMessageTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(null,\"sequence0\",new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"0\")),new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"4\")),true,null,DateTimes.of(\"2010\"),\"awsEndpoint\",null,null,null,null,null,false))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testRunWithMaximumMessageTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "task.getRunner().getStatus() != Status.READING@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "recordSupplier.close()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectLastCall().once()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->29 [style = dashed, label="0"];
5->3 [style = bold, label=""];
28->29 [style = bold, label=""];
36->37 [style = solid, label="desc2"];
0->5 [style = solid, label="task"];
1->4 [style = bold, label=""];
1->8 [style = bold, label=""];
16->31 [style = dashed, label="0"];
3->24 [style = bold, label=""];
20->26 [style = bold, label=""];
0->23 [style = solid, label="task"];
10->19 [style = bold, label=""];
27->28 [style = bold, label=""];
22->33 [style = dashed, label="0"];
22->24 [style = solid, label="desc1"];
18->33 [style = bold, label=""];
28->16 [style = solid, label="desc2"];
2->18 [style = bold, label=""];
14->17 [style = bold, label=""];
33->37 [style = solid, label="desc1"];
5->16 [style = solid, label="desc2"];
22->27 [style = dashed, label="0"];
1->4 [style = dotted, label="true"];
3->9 [style = solid, label="desc3"];
27->24 [style = solid, label="desc1"];
25->16 [style = bold, label=""];
5->36 [style = dashed, label="0"];
22->5 [style = bold, label=""];
28->24 [style = solid, label="desc2"];
29->24 [style = solid, label="desc3"];
22->25 [style = solid, label="desc1"];
12->13 [style = bold, label=""];
11->31 [style = bold, label=""];
26->2 [style = bold, label=""];
17->34 [style = bold, label=""];
30->12 [style = bold, label=""];
18->22 [style = bold, label=""];
17->0 [style = bold, label=""];
8->20 [style = bold, label=""];
0->23 [style = bold, label=""];
5->28 [style = dashed, label="0"];
18->27 [style = bold, label=""];
24->11 [style = bold, label=""];
0->3 [style = solid, label="task"];
25->11 [style = dashed, label="0"];
6->10 [style = bold, label=""];
33->36 [style = bold, label=""];
34->33 [style = solid, label="task"];
3->24 [style = solid, label="desc3"];
23->1 [style = bold, label=""];
7->21 [style = bold, label=""];
37->32 [style = bold, label=""];
0->22 [style = solid, label="task"];
0->27 [style = solid, label="task"];
33->11 [style = solid, label="desc1"];
34->23 [style = bold, label=""];
4->1 [style = bold, label=""];
15->12 [style = bold, label=""];
36->37 [style = bold, label=""];
34->23 [style = solid, label="task"];
36->31 [style = solid, label="desc2"];
13->6 [style = bold, label=""];
27->25 [style = solid, label="desc1"];
0->34 [style = dashed, label="0"];
29->24 [style = bold, label=""];
32->11 [style = bold, label=""];
0->28 [style = solid, label="task"];
34->36 [style = solid, label="task"];
19->7 [style = bold, label=""];
5->24 [style = solid, label="desc2"];
16->9 [style = bold, label=""];
35->12 [style = bold, label=""];
0->29 [style = solid, label="task"];
11->25 [style = bold, label=""];
29->9 [style = solid, label="desc3"];
21->14 [style = bold, label=""];
}
