digraph {
28 [style = filled, label = "assertEquals(1,shardSearchFailures.length)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testFailNextPhase['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action = new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId,logger,discoveryNodes,listener,null,request,null){@Override protected void executeInitialPhase(Transport.Connection connection,InternalScrollSearchRequest internalRequest,SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener){new Thread(null).start()}@Override protected Transport.Connection getConnection(String clusterAlias,DiscoveryNode node){return new SearchAsyncActionTests.MockConnection(node)}@Override protected SearchPhase moveToNextPhase(BiFunction<String,String,DiscoveryNode> clusterNodeLookup){assertEquals(1,movedCounter.incrementAndGet())return new SearchPhase(\"TEST_PHASE\"){@Override public void run(){throw new IllegalArgumentException(\"BOOM\")}}}@Override protected void onFirstPhaseResult(int shardId,SearchAsyncActionTests.TestSearchPhaseResult result){results.setOnce(shardId,result)}}@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "latch.await()@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testFailNextPhase['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertNotNull(results.get(i))@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ScrollIdForNode(( context = scrollId.getContext()@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testNodeNotAvailable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "int i = 0@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "AtomicInteger movedCounter = new AtomicInteger(0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(context(i(.getNode(),results.get(i).node.getId())@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().add(new DiscoveryNode(\"node1\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node2\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node3\",buildNewFakeTransportAddress(),Version.CURRENT)).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ActionListener listener = new ActionListener(){@Override public void onResponse(Object o){try {fail(\"got a result\")}{latch.countDown()}}@Override public void onFailure(Exception e){try {assertTrue(e instanceof SearchPhaseExecutionException)SearchPhaseExecutionException ex = (SearchPhaseExecutionException)eassertEquals(\"BOOM\",ex.getCause().getMessage())assertEquals(\"TEST_PHASE\",ex.getPhaseName())assertEquals(\"Phase failed\",ex.getMessage())}{latch.countDown()}}}@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action = new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId,logger,discoveryNodes,dummyListener(),null,request,null){@Override protected void executeInitialPhase(Transport.Connection connection,InternalScrollSearchRequest internalRequest,SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener){try {assertNotEquals(\"node2 is not available\",\"node2\",connection.getNode().getId())}catch (NullPointerException e) new Thread(null).start()}@Override protected Transport.Connection getConnection(String clusterAlias,DiscoveryNode node){return new SearchAsyncActionTests.MockConnection(node)}@Override protected SearchPhase moveToNextPhase(BiFunction<String,String,DiscoveryNode> clusterNodeLookup){assertEquals(1,movedCounter.incrementAndGet())return new SearchPhase(\"test\"){@Override public void run(){latch.countDown()}}}@Override protected void onFirstPhaseResult(int shardId,SearchAsyncActionTests.TestSearchPhaseResult result){results.setOnce(shardId,result)}}@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(0,shardSearchFailures.length)@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(context(i(.getScrollId(),results.get(i).getRequestId())@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "SearchScrollRequest request = new SearchScrollRequest()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ScrollIdForNode(( context = scrollId.getContext()@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "context(i(.getNode().equals(\"node2\")@@@51@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ShardSearchFailure(( shardSearchFailures = action.buildShardFailures()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ParsedScrollId scrollId = getParsedScrollId(new ScrollIdForNode(null,\"node1\",1),new ScrollIdForNode(null,\"node2\",2),new ScrollIdForNode(null,\"node3\",17),new ScrollIdForNode(null,\"node1\",0),new ScrollIdForNode(null,\"node3\",0))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i++@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(\"IllegalStateException(node (node2( is not available(\",shardSearchFailures(0(.reason())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().add(new DiscoveryNode(\"node1\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node3\",buildNewFakeTransportAddress(),Version.CURRENT)).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertNull(results.get(i))@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ActionListener<SearchResponse> listener = new ActionListener<SearchResponse>(){@Override public void onResponse(SearchResponse o){try {fail(\"got a result\")}{latch.countDown()}}@Override public void onFailure(Exception e){try {assertTrue(e instanceof SearchPhaseExecutionException)SearchPhaseExecutionException ex = (SearchPhaseExecutionException)eassertEquals(\"BOOM\",ex.getCause().getMessage())assertEquals(\"TEST_PHASE\",ex.getPhaseName())assertEquals(\"Phase failed\",ex.getMessage())}{latch.countDown()}}}@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "request.scroll(new Scroll(TimeValue.timeValueMinutes(1)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "action.run()@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i < results.length()@@@49@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->23 [style = dashed, label="0"];
4->10 [style = bold, label=""];
10->18 [style = bold, label=""];
11->20 [style = bold, label=""];
28->29 [style = bold, label=""];
29->15 [style = bold, label=""];
16->0 [style = bold, label=""];
15->13 [style = bold, label=""];
13->0 [style = solid, label="i"];
12->30 [style = solid, label="i"];
13->17 [style = solid, label="i"];
8->15 [style = bold, label=""];
13->17 [style = dotted, label="true"];
0->13 [style = bold, label=""];
16->27 [style = bold, label=""];
27->12 [style = bold, label=""];
4->20 [style = solid, label="request"];
20->9 [style = bold, label=""];
0->12 [style = solid, label="i"];
12->0 [style = solid, label="i"];
13->12 [style = dotted, label="true"];
13->16 [style = dotted, label="true"];
0->13 [style = solid, label="i"];
25->30 [style = bold, label=""];
4->26 [style = solid, label="request"];
2->3 [style = bold, label=""];
11->26 [style = dashed, label="0"];
12->17 [style = bold, label=""];
11->22 [style = dashed, label="0"];
18->19 [style = bold, label=""];
25->27 [style = dotted, label="false"];
26->9 [style = bold, label=""];
15->13 [style = solid, label="i"];
19->11 [style = bold, label=""];
23->3 [style = bold, label=""];
14->28 [style = bold, label=""];
0->12 [style = dotted, label="true"];
7->8 [style = bold, label=""];
15->0 [style = solid, label="i"];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
25->17 [style = bold, label=""];
15->12 [style = solid, label="i"];
13->30 [style = solid, label="i"];
0->25 [style = dotted, label="true"];
1->23 [style = bold, label=""];
13->12 [style = solid, label="i"];
9->6 [style = bold, label=""];
14->7 [style = bold, label=""];
6->14 [style = bold, label=""];
5->1 [style = bold, label=""];
30->12 [style = bold, label=""];
25->17 [style = dotted, label="false"];
13->12 [style = bold, label=""];
22->20 [style = bold, label=""];
12->17 [style = solid, label="i"];
7->28 [style = dashed, label="0"];
0->25 [style = bold, label=""];
1->20 [style = solid, label="scrollId"];
13->0 [style = dotted, label="true"];
19->26 [style = bold, label=""];
21->1 [style = bold, label=""];
22->20 [style = solid, label="listener"];
23->26 [style = solid, label="discoveryNodes"];
11->20 [style = solid, label="listener"];
2->20 [style = solid, label="discoveryNodes"];
1->2 [style = bold, label=""];
24->1 [style = bold, label=""];
25->16 [style = dotted, label="false"];
25->30 [style = dotted, label="true"];
19->22 [style = bold, label=""];
1->26 [style = solid, label="scrollId"];
17->16 [style = bold, label=""];
13->0 [style = bold, label=""];
}
