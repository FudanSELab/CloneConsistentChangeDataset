digraph {
183 [style = filled, label = "List<NamedList> tokenList = (List<NamedList>)indexPart.get(.getName())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
169 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"<ALPHANUM>\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec76f4,null,false))@@@106@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
157 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec77ac,null,false))@@@130@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
138 [style = filled, label = "assertEquals(2,tokenList.size())@@@203@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "assertEquals(2,tokenList.size())@@@194@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
172 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@332@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
136 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec762a,null,true))@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7aa1,null,false))@@@229@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "assertEquals(tokenList.size(),8)@@@147@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "NamedList<List<NamedList>> indexPart = textType.get(\"index\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
160 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"dog\",null,\"<ALPHANUM>\",45,49,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec78e7,null,false))@@@169@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "indexPart = whitetok.get(\"index\")@@@269@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
184 [style = filled, label = "assertEquals(tokenList.size(),1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "request.setQuery(\"fox brown\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "NamedList<NamedList> textType = fieldTypes.get(\"text\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7494,null,false))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
180 [style = filled, label = "NamedList<NamedList> fieldTypes = result.get(\"field_types\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec77f4,null,true))@@@139@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertNotNull(\"Expcting StandardFilter analysis breakdown\",tokenList)@@@184@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
135 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"<ALPHANUM>\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7512,null,false))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7966,null,false))@@@186@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
154 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec757a,null,false))@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7a45,null,false))@@@216@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"word\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7ae0,null,false))@@@238@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "assertNotNull(\"Expcting PorterStemFilter analysis breakdown\",tokenList)@@@146@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"lazi\",null,\"<ALPHANUM>\",34,38,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec78b5,null,false))@@@163@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec76af,null,true))@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
163 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"jump\",null,\"<ALPHANUM>\",18,24,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7883,null,false))@@@157@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
128 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"<ALPHANUM>\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec75fe,null,false))@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(\"expecting only KeywordTokenizer to be applied\",1,indexPart.size())@@@321@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"word\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7af5,null,false))@@@241@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
182 [style = filled, label = "testCharFilterAnalysis['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
125 [style = filled, label = "assertNotNull(\"expecting result for field 'whitetok'\",whitetok)@@@268@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
185 [style = filled, label = "assertTrue(\"result is null and it shouldn't be\",result != null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
140 [style = filled, label = "FieldAnalysisRequest request = new FieldAnalysisRequest()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "request.addFieldName(\"keywordtok\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field 'keywordtok'\",queryPart)@@@329@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "tokenList = queryPart.get(.getName())@@@308@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7851,null,false))@@@151@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "indexPart = nameTextType.get(\"index\")@@@221@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
114 [style = filled, label = "NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
129 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,queryPart.size())@@@307@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7b75,null,false))@@@259@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
153 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7551,null,false))@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 2 tokens\",2,tokenList.size())@@@310@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec74d3,null,true))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
126 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"word\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7b34,null,true))@@@250@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@118@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
174 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@323@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "testHandleAnalysisRequest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
166 [style = filled, label = "request.addFieldName(\"whitetok\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
132 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@210@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
149 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7b8a,null,false))@@@262@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
144 [style = filled, label = "assertEquals(tokenList.size(),10)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field type 'nametext'\",queryPart)@@@257@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(2,tokenList.size())@@@185@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec78ce,null,true))@@@166@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"expecting only KeywordTokenizer to be applied\",1,queryPart.size())@@@330@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
57 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec786a,null,true))@@@154@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "tokenList = indexPart.get(.getName())@@@322@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
113 [style = filled, label = "NamedList<NamedList> keywordtok = fieldNames.get(\"keywordtok\")@@@317@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7527,null,false))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
130 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec797c,null,false))@@@189@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
156 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec75a6,null,false))@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
186 [style = filled, label = "NamedList<NamedList> result = handler.handleAnalysisRequest(request,h.getCore().getSchema())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
131 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field 'keywordtok'\",indexPart)@@@320@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
190 [style = filled, label = "assertEquals(\" whatever \",indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7764,null,false))@@@121@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"expecting KeywordTokenizer to produce 1 token\",1,tokenList.size())@@@333@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
143 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7681,null,false))@@@91@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec79bd,null,false))@@@198@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7be5,null,false))@@@275@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "tokenList = queryPart.get(.getName())@@@258@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
170 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7ce3,null,false))@@@311@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
139 [style = filled, label = "tokenList = indexPart.get(.getName())@@@272@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertNotNull(\"expecting only KeywordTokenizer to be applied\",tokenList)@@@332@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
179 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 1 token\",1,tokenList.size())@@@324@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "NamedList<NamedList> nameTextType = fieldTypes.get(\"nametext\")@@@219@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
192 [style = filled, label = "assertEquals(\" wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r \",indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7928,null,false))@@@177@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec770b,null,false))@@@109@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
122 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec75bc,null,true))@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
152 [style = filled, label = "assertNotNull(\"Expcting StopFilter analysis breakdown\",tokenList)@@@202@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"word\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7acb,null,true))@@@235@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec75d2,null,false))@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec74a9,null,false))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
175 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 1 token\",1,tokenList.size())@@@333@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
173 [style = filled, label = "tokenList = indexPart.get(.getName())@@@322@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
145 [style = filled, label = "assertNotNull(\"Expcting LowerCaseFilter analysis breakdown\",tokenList)@@@86@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
123 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"word\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7ab6,null,false))@@@232@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec76c6,null,false))@@@100@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
117 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec79a6,null,false))@@@195@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "NamedList<NamedList> whitetok = fieldNames.get(\"whitetok\")@@@267@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertNotNull(\"Expcting StopFilter analysis breakdown\",tokenList)@@@119@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
121 [style = filled, label = "assertNotNull(\"Expcting PorterStemFilter analysis breakdown\",tokenList)@@@211@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "assertNotNull(\"Expcting StandardTokenizer analysis breakdown\",tokenList)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7590,null,false))@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "assertEquals(10,tokenList.size())@@@225@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7a8c,null,false))@@@226@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "queryPart = whitetok.get(\"query\")@@@305@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(tokenList.size(),10)@@@87@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@174@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
148 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.core.WhitespaceTokenizer\")@@@223@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertNotNull(\"Expcting LowerCaseFilter analysis breakdown\",tokenList)@@@193@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@192@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
165 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec74be,null,false))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
189 [style = filled, label = "request.setFieldValue(\"<html><body>wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r</body></html>\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec793d,null,false))@@@180@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox brown\",null,\"word\",0,9,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7d87,null,false))@@@334@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
191 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"whatever\",null,\"word\",12,20,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7e19,null,false))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
162 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.standard.StandardFilter\")@@@183@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,indexPart.size())@@@271@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec75e8,null,false))@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
171 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,queryPart.size())@@@330@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the quick red fox jumped over the lazy brown dogs\",null,\"word\",0,49,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7d46,null,false))@@@325@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "assertEquals(tokenList.size(),8)@@@120@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec77c4,null,false))@@@133@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'text'\",indexPart)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
161 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"word\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7b49,null,false))@@@253@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7cf8,null,false))@@@314@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"word\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7b1f,null,false))@@@247@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
150 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field 'whitetok'\",indexPart)@@@270@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 10 tokens\",10,tokenList.size())@@@274@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "assertNotNull(\"field_nameds should never be null\",fieldNames)@@@266@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@309@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
115 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\",indexPart)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7722,null,true))@@@112@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
178 [style = filled, label = "tokenList = queryPart.get(.getName())@@@331@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
120 [style = filled, label = "request.setShowMatch(true)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.standard.StandardFilter\")@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
124 [style = filled, label = "assertNotNull(\"expecting result for field type 'text'\",textType)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
168 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"word\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7ca2,null,false))@@@302@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
147 [style = filled, label = "assertNotNull(\"expecting result for field type 'nametext'\",nameTextType)@@@220@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
193 [style = filled, label = "request.setShowMatch(false)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"word\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7c78,null,false))@@@296@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "assertEquals(\"Expecting StandardTokenizer to produce 2 tokens from '\" + request.getQuery() + \"'\",2,tokenList.size())@@@176@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
104 [style = filled, label = "assertNotNull(\"expecting result for field 'keywordtok'\",keywordtok)@@@318@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"word\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7c24,null,true))@@@284@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7698,null,false))@@@94@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
141 [style = filled, label = "request.addFieldType(\"text\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec777c,null,false))@@@124@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "assertEquals(tokenList.size(),10)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec74e8,null,false))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec780c,null,false))@@@142@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec753c,null,true))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7bfa,null,false))@@@278@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "List<NamedList> tokenList = indexPart.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
159 [style = filled, label = "assertNotNull(\"Expecting StandardTokenizer analysis breakdown\",tokenList)@@@175@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field type 'text'\",queryPart)@@@173@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "NamedList indexPart = textType.get(\"index\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"word\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7c4e,null,false))@@@290@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
146 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7a2c,null,false))@@@213@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
167 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec76dd,null,false))@@@103@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
119 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7a00,null,false))@@@207@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
188 [style = filled, label = "assertNotNull(\"Expecting MockTokenizer analysis breakdown\",tokenList)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec766a,null,false))@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(\"expecting KeywordTokenizer to produce 1 token\",1,tokenList.size())@@@324@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertEquals(2,tokenList.size())@@@212@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"word\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7b0a,null,false))@@@244@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "request.addFieldType(\"nametext\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
118 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec79e8,null,false))@@@204@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
134 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec77dc,null,false))@@@136@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
155 [style = filled, label = "queryPart = keywordtok.get(\"query\")@@@328@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
164 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec789c,null,false))@@@160@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
111 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec74fd,null,false))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
181 [style = filled, label = "assertNotNull(\"field_types should never be null\",fieldTypes)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7640,null,false))@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertNotNull(\"Expcting StandardFilter analysis breakdown\",tokenList)@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
187 [style = filled, label = "request.addFieldType(\"charfilthtmlmap\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "tokenList = queryPart.get(.getName())@@@331@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
93 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7614,null,false))@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertNotNull(\"Expcting WhitespaceTokenizer analysis breakdown\",tokenList)@@@224@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "queryPart = nameTextType.get(\"query\")@@@256@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
158 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field 'whitetok'\",queryPart)@@@306@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@273@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
127 [style = filled, label = "assertNotNull(\"expecting only KeywordTokenizer to be applied\",tokenList)@@@323@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"word\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7c8d,null,true))@@@299@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7794,null,true))@@@127@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
137 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7739,null,false))@@@115@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertNotNull(\"expecting result for field type 'charfilthtmlmap'\",textType)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "NamedList<List<NamedList>> queryPart = textType.get(\"query\")@@@172@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'nametext'\",indexPart)@@@222@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7838,null,false))@@@148@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@145@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "request.setFieldValue(\"the quick red fox jumped over the lazy brown dogs\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
133 [style = filled, label = "indexPart = keywordtok.get(\"index\")@@@319@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
177 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,indexPart.size())@@@321@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
99 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@201@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "NamedList<NamedList> fieldNames = result.get(\"field_names\")@@@265@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
142 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"word\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7c39,null,false))@@@287@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"word\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7c0f,null,false))@@@281@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
176 [style = filled, label = "testHandleAnalysisRequest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
151 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"word\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7c63,null,false))@@@293@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42->147 [style = bold, label=""];
167->169 [style = bold, label=""];
15->120 [style = bold, label=""];
70->91 [style = bold, label=""];
135->18 [style = bold, label=""];
114->64 [style = bold, label=""];
50->137 [style = bold, label=""];
79->86 [style = bold, label=""];
43->55 [style = bold, label=""];
65->17 [style = bold, label=""];
22->79 [style = solid, label="queryPart"];
80->21 [style = bold, label=""];
151->87 [style = bold, label=""];
152->138 [style = bold, label=""];
165->40 [style = bold, label=""];
49->113 [style = bold, label=""];
90->151 [style = bold, label=""];
120->114 [style = bold, label=""];
22->79 [style = bold, label=""];
75->114 [style = dashed, label="0"];
59->115 [style = bold, label=""];
115->192 [style = bold, label=""];
103->9 [style = bold, label=""];
55->155 [style = bold, label=""];
1->46 [style = bold, label=""];
7->72 [style = bold, label=""];
67->6 [style = solid, label="indexPart"];
100->126 [style = bold, label=""];
186->185 [style = solid, label="result"];
84->139 [style = bold, label=""];
140->186 [style = solid, label="request"];
35->56 [style = solid, label="tokenList"];
41->192 [style = dashed, label="0"];
168->98 [style = bold, label=""];
12->102 [style = bold, label=""];
53->125 [style = solid, label="whitetok"];
59->115 [style = solid, label="indexPart"];
126->161 [style = bold, label=""];
181->114 [style = bold, label=""];
33->42 [style = bold, label=""];
53->125 [style = bold, label=""];
149->39 [style = bold, label=""];
93->136 [style = bold, label=""];
60->127 [style = solid, label="tokenList"];
121->4 [style = bold, label=""];
73->71 [style = bold, label=""];
153->51 [style = bold, label=""];
57->163 [style = bold, label=""];
96->53 [style = bold, label=""];
40->24 [style = bold, label=""];
183->188 [style = bold, label=""];
115->75 [style = bold, label=""];
91->14 [style = bold, label=""];
52->106 [style = bold, label=""];
127->43 [style = bold, label=""];
180->181 [style = bold, label=""];
114->64 [style = solid, label="result"];
98->158 [style = solid, label="queryPart"];
164->105 [style = bold, label=""];
27->168 [style = bold, label=""];
178->172 [style = solid, label="tokenList"];
59->115 [style = solid, label="fieldTypes"];
187->189 [style = bold, label=""];
10->50 [style = bold, label=""];
107->26 [style = bold, label=""];
20->162 [style = bold, label=""];
141->11 [style = bold, label=""];
75->124 [style = solid, label="textType"];
47->59 [style = dashed, label="0"];
48->41 [style = bold, label=""];
71->95 [style = bold, label=""];
74->13 [style = solid, label="queryPart"];
47->48 [style = bold, label=""];
147->67 [style = bold, label=""];
105->83 [style = bold, label=""];
139->103 [style = bold, label=""];
43->179 [style = dashed, label="0"];
85->25 [style = bold, label=""];
81->157 [style = bold, label=""];
47->48 [style = solid, label="indexPart"];
51->44 [style = bold, label=""];
68->82 [style = bold, label=""];
117->5 [style = bold, label=""];
131->34 [style = bold, label=""];
48->115 [style = dashed, label="0"];
144->154 [style = bold, label=""];
130->38 [style = bold, label=""];
104->133 [style = bold, label=""];
155->31 [style = solid, label="queryPart"];
162->32 [style = solid, label="tokenList"];
4->146 [style = bold, label=""];
157->89 [style = bold, label=""];
3->61 [style = bold, label=""];
46->100 [style = bold, label=""];
118->119 [style = bold, label=""];
101->57 [style = bold, label=""];
185->180 [style = bold, label=""];
16->145 [style = solid, label="tokenList"];
137->35 [style = bold, label=""];
108->15 [style = bold, label=""];
2->189 [style = dashed, label="0"];
114->64 [style = solid, label="textType"];
150->84 [style = bold, label=""];
172->175 [style = bold, label=""];
111->135 [style = bold, label=""];
14->69 [style = bold, label=""];
170->49 [style = bold, label=""];
139->103 [style = solid, label="tokenList"];
178->172 [style = bold, label=""];
156->122 [style = bold, label=""];
113->104 [style = solid, label="keywordtok"];
83->160 [style = bold, label=""];
138->118 [style = bold, label=""];
188->184 [style = bold, label=""];
19->85 [style = bold, label=""];
2->141 [style = bold, label=""];
63->16 [style = bold, label=""];
145->3 [style = bold, label=""];
125->28 [style = bold, label=""];
136->63 [style = bold, label=""];
182->140 [style = bold, label=""];
26->20 [style = bold, label=""];
41->70 [style = bold, label=""];
173->174 [style = solid, label="tokenList"];
179->55 [style = bold, label=""];
41->70 [style = solid, label="tokenList"];
140->166 [style = bold, label=""];
128->93 [style = bold, label=""];
23->156 [style = bold, label=""];
87->27 [style = bold, label=""];
169->10 [style = bold, label=""];
141->193 [style = dashed, label="0"];
166->2 [style = bold, label=""];
39->96 [style = bold, label=""];
129->62 [style = bold, label=""];
51->44 [style = solid, label="tokenList"];
91->183 [style = dashed, label="0"];
97->153 [style = bold, label=""];
5->99 [style = bold, label=""];
109->117 [style = bold, label=""];
124->64 [style = dashed, label="0"];
9->68 [style = bold, label=""];
106->76 [style = bold, label=""];
36->94 [style = bold, label=""];
113->104 [style = bold, label=""];
67->6 [style = bold, label=""];
184->191 [style = bold, label=""];
183->188 [style = solid, label="tokenList"];
62->116 [style = solid, label="tokenList"];
64->59 [style = bold, label=""];
12->171 [style = dashed, label="0"];
32->30 [style = bold, label=""];
119->132 [style = bold, label=""];
127->174 [style = dashed, label="0"];
31->12 [style = bold, label=""];
37->66 [style = bold, label=""];
163->164 [style = bold, label=""];
123->78 [style = bold, label=""];
66->128 [style = bold, label=""];
89->134 [style = bold, label=""];
21->123 [style = bold, label=""];
148->36 [style = bold, label=""];
112->52 [style = bold, label=""];
102->65 [style = bold, label=""];
11->108 [style = bold, label=""];
122->37 [style = bold, label=""];
39->96 [style = solid, label="fieldNames"];
61->143 [style = bold, label=""];
160->74 [style = bold, label=""];
18->97 [style = bold, label=""];
98->158 [style = bold, label=""];
76->45 [style = bold, label=""];
102->178 [style = dashed, label="0"];
154->23 [style = bold, label=""];
133->131 [style = bold, label=""];
99->152 [style = bold, label=""];
16->145 [style = bold, label=""];
17->110 [style = bold, label=""];
8->159 [style = solid, label="tokenList"];
30->0 [style = bold, label=""];
25->167 [style = bold, label=""];
77->170 [style = bold, label=""];
155->31 [style = bold, label=""];
102->65 [style = solid, label="tokenList"];
92->112 [style = bold, label=""];
69->165 [style = bold, label=""];
161->22 [style = bold, label=""];
171->178 [style = bold, label=""];
132->121 [style = solid, label="tokenList"];
34->177 [style = dashed, label="0"];
99->152 [style = solid, label="tokenList"];
94->80 [style = bold, label=""];
176->140 [style = bold, label=""];
95->81 [style = bold, label=""];
148->36 [style = solid, label="tokenList"];
56->73 [style = bold, label=""];
44->144 [style = bold, label=""];
62->116 [style = bold, label=""];
190->183 [style = bold, label=""];
17->175 [style = dashed, label="0"];
134->92 [style = bold, label=""];
31->171 [style = bold, label=""];
65->172 [style = dashed, label="0"];
86->88 [style = bold, label=""];
38->29 [style = bold, label=""];
45->101 [style = bold, label=""];
42->147 [style = solid, label="nameTextType"];
146->33 [style = bold, label=""];
189->193 [style = bold, label=""];
52->106 [style = solid, label="tokenList"];
142->90 [style = bold, label=""];
60->127 [style = bold, label=""];
177->173 [style = bold, label=""];
24->111 [style = bold, label=""];
60->173 [style = dashed, label="0"];
28->150 [style = bold, label=""];
193->186 [style = bold, label=""];
88->149 [style = bold, label=""];
35->56 [style = bold, label=""];
6->148 [style = bold, label=""];
78->54 [style = bold, label=""];
162->32 [style = bold, label=""];
175->110 [style = bold, label=""];
0->130 [style = bold, label=""];
34->60 [style = bold, label=""];
75->124 [style = bold, label=""];
131->177 [style = bold, label=""];
174->179 [style = bold, label=""];
28->150 [style = solid, label="indexPart"];
133->131 [style = solid, label="indexPart"];
82->7 [style = bold, label=""];
8->159 [style = bold, label=""];
192->190 [style = bold, label=""];
72->142 [style = bold, label=""];
38->29 [style = solid, label="tokenList"];
29->109 [style = bold, label=""];
116->77 [style = bold, label=""];
186->185 [style = bold, label=""];
143->19 [style = bold, label=""];
180->181 [style = solid, label="fieldTypes"];
166->187 [style = dashed, label="0"];
13->8 [style = bold, label=""];
58->140 [style = bold, label=""];
132->121 [style = bold, label=""];
158->129 [style = bold, label=""];
159->107 [style = bold, label=""];
74->13 [style = bold, label=""];
124->47 [style = bold, label=""];
140->114 [style = solid, label="request"];
173->174 [style = bold, label=""];
140->187 [style = bold, label=""];
54->1 [style = bold, label=""];
}
