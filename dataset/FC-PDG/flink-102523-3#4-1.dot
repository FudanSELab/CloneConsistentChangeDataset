digraph {
0 [style = filled, label = "TaskStateSnapshot stateHandles = environment1.getCheckpointStateHandles()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "AcknowledgeStreamMockEnvironment environment1 = createRunAndCheckpointOperatorChain(headOperatorID,new CounterOperator(),tailOperatorID,new CounterOperator(),Optional.empty())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(headOperatorID,tailOperatorID)),RESTORED_OPERATORS)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(new HashSet<OperatorID>(){},RESTORED_OPERATORS)@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(2,environment1.getCheckpointStateHandles().getSubtaskStateMappings().size())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "AcknowledgeStreamMockEnvironment environment2 = createRunAndCheckpointOperatorChain(headOperatorID,new CounterOperator(),tailOperatorID,new CounterOperator(),Optional.of(stateHandles))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "OperatorSubtaskState emptyHeadOperatorState = StateAssignmentOperation.operatorSubtaskStateFrom(new OperatorInstanceID(0,headOperatorID),Collections.emptyMap(),Collections.emptyMap(),Collections.emptyMap(),Collections.emptyMap())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "stateHandles.putSubtaskStateByOperatorID(headOperatorID,emptyHeadOperatorState)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "OperatorID headOperatorID = new OperatorID(42L,42L)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "OperatorID tailOperatorID = new OperatorID(44L,44L)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testRestoreAfterScaleUp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
6->1 [style = solid, label="tailOperatorID"];
7->12 [style = bold, label=""];
2->6 [style = bold, label=""];
2->12 [style = solid, label="headOperatorID"];
2->3 [style = solid, label="headOperatorID"];
0->3 [style = solid, label="stateHandles"];
0->11 [style = bold, label=""];
7->0 [style = bold, label=""];
12->0 [style = bold, label=""];
1->7 [style = bold, label=""];
3->4 [style = bold, label=""];
3->9 [style = bold, label=""];
6->1 [style = bold, label=""];
4->9 [style = dashed, label="0"];
6->9 [style = solid, label="tailOperatorID"];
5->2 [style = bold, label=""];
8->2 [style = bold, label=""];
11->3 [style = bold, label=""];
2->9 [style = solid, label="headOperatorID"];
6->3 [style = solid, label="tailOperatorID"];
10->2 [style = bold, label=""];
2->1 [style = solid, label="headOperatorID"];
12->11 [style = solid, label="emptyHeadOperatorState"];
2->11 [style = solid, label="headOperatorID"];
}
