digraph {
6 [style = filled, label = "ExtensionRegistry fullRegistry1 = (ExtensionRegistry)registry1@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNotNull(\"Extension registered in lite registry\",extension)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "NonNestedExtensionLite.registerAllExtensions(registry1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ExtensionRegistryLite registry2 = ExtensionRegistryLite.newInstance()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(\"Test is using a non-lite extension\",.isAssignableFrom(NonNestedExtension.nonNestedExtension.getClass()))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended,?> extension = registry1.findLiteExtensionByNumber(NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(),1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertWithMessage(\"Test is using a non-lite extension\").that(NonNestedExtensionLite.nonNestedExtensionLite.getClass()).isInstanceOf()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "NonNestedExtension.registerAllExtensions((ExtensionRegistry)registry2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertNull(\"Extension is not registered in masqueraded full registry\",fullRegistry1.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertWithMessage(\"Extension registered in lite registry\").that(extension).isNotNull()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended,?> extension = registry.findLiteExtensionByNumber(NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(),1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertWithMessage(\"Extension is registered in masqueraded full registry\").that(fullRegistry2.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\")).isNotNull()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "testAdd['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertWithMessage(\"Extension is not registered in masqueraded full registry\").that(fullRegistry1.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\")).isNull()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "ExtensionRegistryLite registry1 = ExtensionRegistryLite.newInstance()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertNotNull(\"Extension is registered in Lite registry\",extension)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "registry1.add(NonNestedExtensionLite.nonNestedExtensionLite)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "registry2.add(NonNestedExtension.nonNestedExtension)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNotNull(\"Extension is registered in masqueraded full registry\",fullRegistry2.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "NonNestedExtensionLite.registerAllExtensions(registry)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ExtensionRegistry fullRegistry2 = (ExtensionRegistry)registry2@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testAdd['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertWithMessage(\"Test is using a non-lite extension\").that(.isAssignableFrom(NonNestedExtension.nonNestedExtension.getClass())).isTrue()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testAdd['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertTrue(\"Test is using a non-lite extension\",.isAssignableFrom(NonNestedExtensionLite.nonNestedExtensionLite.getClass()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7->21 [style = dashed, label="0"];
5->9 [style = bold, label=""];
3->1 [style = bold, label=""];
10->14 [style = bold, label=""];
11->16 [style = dashed, label="0"];
8->3 [style = bold, label=""];
18->15 [style = bold, label=""];
1->19 [style = dashed, label="0"];
8->3 [style = solid, label="extension"];
6->0 [style = bold, label=""];
22->23 [style = bold, label=""];
14->15 [style = dashed, label="0"];
4->7 [style = bold, label=""];
1->11 [style = bold, label=""];
19->16 [style = bold, label=""];
4->25 [style = dashed, label="0"];
0->10 [style = bold, label=""];
8->20 [style = bold, label=""];
4->6 [style = solid, label="registry1"];
12->4 [style = bold, label=""];
21->22 [style = bold, label=""];
7->2 [style = bold, label=""];
24->25 [style = bold, label=""];
4->7 [style = solid, label="registry1"];
22->23 [style = solid, label="extension"];
5->9 [style = solid, label="registry2"];
3->20 [style = dashed, label="0"];
0->18 [style = bold, label=""];
5->0 [style = solid, label="registry2"];
14->8 [style = bold, label=""];
13->6 [style = bold, label=""];
20->19 [style = bold, label=""];
2->22 [style = dashed, label="0"];
25->21 [style = solid, label="registry"];
15->8 [style = bold, label=""];
17->4 [style = bold, label=""];
10->18 [style = dashed, label="0"];
25->21 [style = bold, label=""];
2->5 [style = bold, label=""];
9->13 [style = bold, label=""];
}
