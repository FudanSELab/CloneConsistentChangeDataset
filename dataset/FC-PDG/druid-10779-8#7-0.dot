digraph {
2 [style = filled, label = "final List<Future<Void>> dropFutures = ImmutableList.of(SEGMENTS.get(0),SEGMENTS.get(2)).stream().map(null).collect(Collectors.toList())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testLoadDropSegment['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(segmentManager.loadSegment(SEGMENTS.get(0),false))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(segmentManager.loadSegment(SEGMENTS.get(2),false))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testLoadDropSegment['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertResult(ImmutableList.of(SEGMENTS.get(1),SEGMENTS.get(3),SEGMENTS.get(4)))@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final List<Future<Boolean>> loadFutures = ImmutableList.of(SEGMENTS.get(1),SEGMENTS.get(3),SEGMENTS.get(4)).stream().map(null).collect(Collectors.toList())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testLoadSegment['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "eachFuture.get()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(segmentManager.loadSegment(SEGMENTS.get(2),false,SegmentLazyLoadFailCallback.NOOP))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final List<Future<Boolean>> loadFutures = ImmutableList.of(SEGMENTS.get(1),SEGMENTS.get(3),SEGMENTS.get(4)).stream().map(null).collect(Collectors.toList())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertResult(SEGMENTS)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertTrue(eachFuture.get())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final List<Future<Boolean>> futures = SEGMENTS.stream().map(null).collect(Collectors.toList())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(segmentManager.loadSegment(SEGMENTS.get(0),false,SegmentLazyLoadFailCallback.NOOP))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertTrue(eachFuture.get())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->9 [style = bold, label=""];
6->1 [style = bold, label=""];
4->3 [style = bold, label=""];
12->13 [style = bold, label=""];
10->2 [style = bold, label=""];
3->5 [style = bold, label=""];
15->12 [style = bold, label=""];
1->9 [style = dashed, label="0"];
0->11 [style = dashed, label="0"];
1->0 [style = bold, label=""];
7->10 [style = dashed, label="0"];
9->11 [style = bold, label=""];
1->12 [style = dashed, label="0"];
2->4 [style = bold, label=""];
7->2 [style = bold, label=""];
11->10 [style = bold, label=""];
13->14 [style = bold, label=""];
0->7 [style = bold, label=""];
}
