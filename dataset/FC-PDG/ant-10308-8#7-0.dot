digraph {
14 [style = filled, label = "assertThat(contents,containsString(\" This is the second\"))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(\"no ws at start\",contents.startsWith(\"This is th\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(contents,containsString(\"file.This is the second\"))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertFalse(\"no ws at start\",contents.startsWith(\"This is th\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "buildRule.executeTarget(\"trimfile\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testTrimFileByLine['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/trimfile\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testTrimFileByLine['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(\"no ws at end\",contents,not(endsWith(\"second line.\")))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testTrimFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(\"no ws at start\",contents,not(startsWith(\"This is th\")))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertFalse(\"no ws at end\",contents.endsWith(\"second line.\"))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertThat(contents,not(containsString(\" This is the second\")))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/trimfilebyline\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(\"no ws at end\",contents.endsWith(\"second line.\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "buildRule.executeTarget(\"trimfilebyline\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
15->10 [style = bold, label=""];
5->12 [style = dashed, label="0"];
9->0 [style = bold, label=""];
11->14 [style = bold, label=""];
0->2 [style = bold, label=""];
12->11 [style = bold, label=""];
0->15 [style = dashed, label="0"];
2->3 [style = solid, label="contents"];
6->0 [style = bold, label=""];
2->8 [style = solid, label="contents"];
7->8 [style = bold, label=""];
2->4 [style = solid, label="contents"];
2->10 [style = dashed, label="0"];
10->14 [style = solid, label="contents"];
5->1 [style = bold, label=""];
10->12 [style = bold, label=""];
1->11 [style = dashed, label="0"];
1->8 [style = dashed, label="0"];
4->14 [style = dashed, label="0"];
13->15 [style = bold, label=""];
2->7 [style = bold, label=""];
8->4 [style = bold, label=""];
5->7 [style = dashed, label="0"];
2->7 [style = solid, label="contents"];
2->5 [style = bold, label=""];
}
