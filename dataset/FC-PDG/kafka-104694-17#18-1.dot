digraph {
4 [style = filled, label = "EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expectLastCall()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "connProps.put(\"key.converter.extra.config\",\"foo\")@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "assertEquals(\"foo\",keyConverter.getValue().configs.get(\"extra.config\"))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "EasyMock.expectLastCall()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Capture<TestConverter> valueConverter = EasyMock.newCapture()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertNotNull(taskKeyConverter)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertStatistics(worker,0,1)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectStopStorage()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expectConverters(true)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
59 [style = filled, label = "PowerMock.verifyAll()@@@50@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TaskConfig taskConfig = new TaskConfig(origProps)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "EasyMock.expect(task.version()).andReturn(\"1.0\")@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "expectConverters()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "Capture<HeaderConverter> headerConverter = EasyMock.newCapture()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "PowerMock.expectNew(,EasyMock.eq(TASK_ID),EasyMock.eq(task),anyObject(),EasyMock.eq(TargetState.STARTED),anyObject(),anyObject(),anyObject(),EasyMock.eq(TransformationChain.noOp()),anyObject(),anyObject(),anyObject(),anyObject(),anyObject(),EasyMock.eq(pluginLoader),anyObject()).andReturn(workerTask)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
54 [style = filled, label = "worker.stop()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertNotNull(taskValueConverter)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "worker.start()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "EasyMock.expect(delegatingLoader.connectorLoader(.getName())).andReturn(pluginLoader)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertStatistics(worker,0,0)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG,.getName())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "Map<String,String> connProps = anyConnectorConfigMap()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "assertStatistics(worker,0,0)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "expectTaskKeyConverters(ClassLoaderUsage.PLUGINS,taskKeyConverter)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,null)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "assertEquals(Collections.emptySet(),worker.taskIds())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "PowerMock.expectNew(,EasyMock.eq(TASK_ID),EasyMock.eq(task),EasyMock.anyObject(),EasyMock.eq(TargetState.STARTED),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.eq(TransformationChain.noOp()),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.eq(pluginLoader),EasyMock.anyObject()).andReturn(workerTask)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertNotNull(taskHeaderConverter)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "connProps.put(\"value.converter.extra.config\",\"bar\")@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "testConverterOverrides['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "assertEquals(Collections.emptySet(),worker.taskIds())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "worker = new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertStatistics(worker,0,0)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "workerTask.initialize(taskConfig)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "workerTask.run()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(workerTask.loader()).andReturn(pluginLoader)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testCleanupTasksOnStop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "worker.stopAndAwaitTask(TASK_ID)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "worker.startTask(TASK_ID,anyConnectorConfigMap(),origProps,taskStatusListener,TargetState.STARTED)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG,.getName())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,null)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testCleanupTasksOnStop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "origProps.put(TaskConfig.TASK_CLASS_CONFIG,.getName())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(plugins.newTask()).andReturn(task)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertStatistics(worker,0,0)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Capture<TestConverter> keyConverter = EasyMock.newCapture()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Map<String,String> origProps = new HashMap<>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS,taskHeaderConverter)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "PowerMock.verifyAll()@@@44@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,null)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "PowerMock.expectNew(,EasyMock.eq(TASK_ID),EasyMock.eq(task),EasyMock.anyObject(),EasyMock.eq(TargetState.STARTED),EasyMock.capture(keyConverter),EasyMock.capture(valueConverter),EasyMock.capture(headerConverter),EasyMock.eq(TransformationChain.noOp()),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.eq(pluginLoader),EasyMock.anyObject()).andReturn(workerTask)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "expectTaskValueConverters(ClassLoaderUsage.PLUGINS,taskValueConverter)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "workerTask.stop()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "expectConverters()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "PowerMock.replayAll()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertEquals(\"bar\",valueConverter.getValue().configs.get(\"extra.config\"))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "worker.startTask(TASK_ID,connProps,origProps,taskStatusListener,TargetState.STARTED)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "EasyMock.expectLastCall()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertStatistics(worker,0,1)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "worker.stop()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expectLastCall()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expectStartStorage()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58->28 [style = bold, label=""];
47->9 [style = bold, label=""];
29->18 [style = solid, label="worker"];
6->22 [style = bold, label=""];
15->25 [style = bold, label=""];
20->26 [style = bold, label=""];
68->66 [style = bold, label=""];
14->65 [style = bold, label=""];
60->50 [style = bold, label=""];
38->41 [style = bold, label=""];
57->58 [style = bold, label=""];
64->16 [style = bold, label=""];
28->14 [style = bold, label=""];
56->54 [style = bold, label=""];
62->67 [style = bold, label=""];
22->4 [style = bold, label=""];
29->33 [style = solid, label="worker"];
55->48 [style = bold, label=""];
9->12 [style = solid, label="origProps"];
21->31 [style = bold, label=""];
42->44 [style = bold, label=""];
31->6 [style = bold, label=""];
43->35 [style = bold, label=""];
50->68 [style = bold, label=""];
49->56 [style = bold, label=""];
7->44 [style = dashed, label="0"];
35->38 [style = bold, label=""];
14->16 [style = bold, label=""];
48->49 [style = bold, label=""];
36->9 [style = bold, label=""];
9->1 [style = solid, label="origProps"];
41->37 [style = bold, label=""];
7->58 [style = dashed, label="0"];
54->62 [style = bold, label=""];
39->45 [style = bold, label=""];
61->55 [style = bold, label=""];
12->15 [style = solid, label="taskConfig"];
23->10 [style = bold, label=""];
29->49 [style = solid, label="worker"];
11->8 [style = bold, label=""];
67->51 [style = bold, label=""];
5->11 [style = bold, label=""];
5->52 [style = dashed, label="0"];
65->46 [style = bold, label=""];
16->36 [style = bold, label=""];
16->13 [style = bold, label=""];
25->39 [style = bold, label=""];
18->23 [style = bold, label=""];
34->40 [style = bold, label=""];
29->10 [style = solid, label="worker"];
25->17 [style = bold, label=""];
29->61 [style = solid, label="worker"];
24->33 [style = bold, label=""];
26->52 [style = bold, label=""];
30->12 [style = bold, label=""];
63->60 [style = bold, label=""];
7->28 [style = bold, label=""];
8->2 [style = bold, label=""];
4->20 [style = bold, label=""];
17->3 [style = bold, label=""];
33->69 [style = bold, label=""];
3->21 [style = bold, label=""];
13->9 [style = bold, label=""];
40->43 [style = bold, label=""];
0->32 [style = bold, label=""];
52->11 [style = bold, label=""];
53->61 [style = bold, label=""];
66->53 [style = bold, label=""];
46->64 [style = bold, label=""];
26->5 [style = bold, label=""];
10->27 [style = bold, label=""];
16->47 [style = bold, label=""];
37->17 [style = bold, label=""];
29->62 [style = solid, label="worker"];
1->18 [style = bold, label=""];
9->30 [style = bold, label=""];
33->1 [style = bold, label=""];
12->0 [style = bold, label=""];
51->59 [style = bold, label=""];
44->28 [style = bold, label=""];
9->53 [style = solid, label="origProps"];
63->53 [style = solid, label="connProps"];
32->15 [style = bold, label=""];
13->47 [style = dashed, label="0"];
2->29 [style = bold, label=""];
29->24 [style = bold, label=""];
19->7 [style = bold, label=""];
45->34 [style = bold, label=""];
69->63 [style = bold, label=""];
}
