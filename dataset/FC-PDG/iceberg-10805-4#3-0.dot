digraph {
2 [style = filled, label = "PartitionSpec expectedSpec = PartitionSpec.builderFor(expectedSchema).identity(\"part\").withSpecId(0).build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "PartitionSpec expectedSpec = PartitionSpec.builderFor(expectedSchema).identity(\"part\").withSpecId(specId).build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "sql(\"CREATE TABLE %s USING iceberg AS SELECT * FROM %s\",tableName,sourceName)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "int specId = isAtomic? 1: 0@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(\"Should have expected nullable schema\",expectedSchema.asStruct(),rtasTable.schema().asStruct())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Table should have expected snapshots\",isAtomic? 2: 1,Iterables.size(rtasTable.snapshots()))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "testCreateRTAS['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(\"Table should have expected snapshots\",isAtomic? 2: 1,Iterables.size(rtasTable.snapshots()))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "sql(\"CREATE OR REPLACE TABLE %s USING iceberg PARTITIONED BY (part) AS \" + \"SELECT 2 * id as id, data, CASE WHEN ((2 * id) %% 2) = 0 THEN 'even' ELSE 'odd' END AS part \" + \"FROM %s ORDER BY 3, 1\",tableName,sourceName)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testCreateRTAS['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Schema expectedSchema = new Schema(Types.NestedField.optional(1,\"id\",Types.LongType.get()),Types.NestedField.optional(2,\"data\",Types.StringType.get()),Types.NestedField.optional(3,\"part\",Types.StringType.get()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(\"Should be partitioned by part\",expectedSpec,rtasTable.spec())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Table rtasTable = validationCatalog.loadTable(tableIdent)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "sql(\"CREATE OR REPLACE TABLE %s USING iceberg PARTITIONED BY (part) AS \" + \"SELECT id, data, CASE WHEN (id %% 2) = 0 THEN 'even' ELSE 'odd' END AS part \" + \"FROM %s ORDER BY 3, 1\",tableName,sourceName)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Table rtasTable = validationCatalog.loadTable(tableIdent)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"Should have rows matching the source table\",sql(\"SELECT id, data, CASE WHEN (id %% 2) = 0 THEN 'even' ELSE 'odd' END AS part \" + \"FROM %s ORDER BY id\",sourceName),sql(\"SELECT * FROM %s ORDER BY id\",tableName))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testRTAS['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "sql(\"REPLACE TABLE %s USING iceberg PARTITIONED BY (part) AS \" + \"SELECT id, data, CASE WHEN (id %% 2) = 0 THEN 'even' ELSE 'odd' END AS part \" + \"FROM %s ORDER BY 3, 1\",tableName,sourceName)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(\"Should have rows matching the source table\",sql(\"SELECT id, data, CASE WHEN (id %% 2) = 0 THEN 'even' ELSE 'odd' END AS part \" + \"FROM %s ORDER BY id\",sourceName),sql(\"SELECT * FROM %s ORDER BY id\",tableName))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"Table should have expected snapshots\",2,Iterables.size(rtasTable.snapshots()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"Should have rows matching the source table\",sql(\"SELECT * FROM %s ORDER BY id\",sourceName),sql(\"SELECT * FROM %s ORDER BY id\",tableName))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "boolean isAtomic = !\"spark_catalog\".equals(catalogName)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
9->20 [style = dashed, label="0"];
6->10 [style = solid, label="isAtomic"];
16->0 [style = bold, label=""];
19->18 [style = bold, label=""];
11->14 [style = bold, label=""];
3->18 [style = dashed, label="0"];
10->12 [style = dashed, label="0"];
3->11 [style = bold, label=""];
3->6 [style = bold, label=""];
6->14 [style = solid, label="isAtomic"];
9->20 [style = bold, label=""];
9->10 [style = bold, label=""];
16->9 [style = solid, label="expectedSpec"];
17->19 [style = bold, label=""];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
4->7 [style = bold, label=""];
1->9 [style = bold, label=""];
8->0 [style = bold, label=""];
2->1 [style = solid, label="expectedSpec"];
6->15 [style = solid, label="isAtomic"];
18->6 [style = bold, label=""];
7->19 [style = dashed, label="0"];
0->1 [style = bold, label=""];
6->11 [style = bold, label=""];
5->4 [style = bold, label=""];
9->12 [style = bold, label=""];
20->15 [style = bold, label=""];
21->17 [style = bold, label=""];
2->8 [style = bold, label=""];
13->4 [style = bold, label=""];
}
