digraph {
14 [style = filled, label = "EasyMock.expect(strategy.pickSegmentsToMove(EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyInt(),EasyMock.anyDouble())).andReturn(ImmutableList.of(new BalancerSegmentHolder(druidServer1,segment1)).iterator())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "EasyMock.expect(strategy.pickSegmentToMove(EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyInt())).andReturn(new BalancerSegmentHolder(druidServer1,segment1)).andReturn(new BalancerSegmentHolder(druidServer1,segment2))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "BalancerStrategy strategy = EasyMock.createMock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.replay(druidServer4)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(strategy.pickSegmentToMove(ImmutableList.of(new ServerHolder(druidServer2,peon2,false)),broadcastDatasources,100)).andReturn(new BalancerSegmentHolder(druidServer2,segment3)).andReturn(new BalancerSegmentHolder(druidServer2,segment4))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "mockDruidServer(druidServer2,\"2\",\"normal\",30L,100L,Arrays.asList(segment2,segment3))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expect(strategy.pickSegmentToMove(ImmutableList.of(new ServerHolder(druidServer2,peon2,true)),broadcastDatasources,100)).andReturn(new BalancerSegmentHolder(druidServer2,segment2))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(strategy.findNewSegmentHomeBalancer(EasyMock.anyObject(),EasyMock.anyObject())).andReturn(new ServerHolder(druidServer3,peon3)).anyTimes()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "mockDruidServer(druidServer1,\"1\",\"normal\",30L,100L,Arrays.asList(segment1,segment3))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "params = new BalanceSegmentsTester(coordinator).run(params)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "EasyMock.replay(strategy)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "mockDruidServer(druidServer1,\"1\",\"normal\",30L,100L,Arrays.asList(segment1,segment2))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "EasyMock.expect(strategy.pickSegmentsToMove(ImmutableList.of(new ServerHolder(druidServer2,peon2,true)),broadcastDatasources,1,100)).andReturn(ImmutableList.of(new BalancerSegmentHolder(druidServer2,segment2)).iterator())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Assert.assertThat(peon3.getSegmentsToLoad(),Matchers.is(Matchers.equalTo(ImmutableSet.of(segment1,segment3,segment4))))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "EasyMock.expect(strategy.pickSegmentToMove(EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyInt())).andReturn(new BalancerSegmentHolder(druidServer1,segment1))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "return defaultRuntimeParamsBuilder(ImmutableList.of(druidServer1,druidServer2,druidServer3),ImmutableList.of(peon1,peon2,peon3),ImmutableList.of(false,true,false)).withDynamicConfigs(CoordinatorDynamicConfig.builder().withMaxSegmentsToMove(1).withDecommissioningMaxPercentOfMaxSegmentsToMove(percent).build()).withBalancerStrategy(strategy).withBroadcastDatasources(broadcastDatasources).build()@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testMoveDecommissioningMaxPercentOfMaxSegmentsToMove['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "mockDruidServer(druidServer3,\"3\",\"normal\",0L,100L,Collections.emptyList())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(3L,params.getCoordinatorStats().getTieredStat(\"movedCount\",\"normal\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "setupParamsForDecommissioningMaxPercentOfMaxSegmentsToMove['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "DruidCoordinatorRuntimeParams params = defaultRuntimeParamsBuilder(ImmutableList.of(druidServer1,druidServer2,druidServer3),ImmutableList.of(peon1,peon2,peon3),ImmutableList.of(false,true,false)).withDynamicConfigs(CoordinatorDynamicConfig.builder().withMaxSegmentsToMove(3).withDecommissioningMaxPercentOfMaxSegmentsToMove(60).build()).withBalancerStrategy(strategy).withBroadcastDatasources(broadcastDatasources).build()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "mockCoordinator(coordinator)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "mockDruidServer(druidServer2,\"2\",\"normal\",30L,100L,Arrays.asList(segment3,segment4))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "setupParamsForDecommissioningMaxPercentOfMaxSegmentsToMove['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int percent@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
3->24 [style = dashed, label="0"];
4->21 [style = bold, label=""];
12->17 [style = dashed, label="0"];
6->0 [style = bold, label=""];
3->12 [style = bold, label=""];
6->14 [style = dashed, label="0"];
8->21 [style = dashed, label="0"];
15->7 [style = dotted, label="true"];
15->3 [style = bold, label=""];
21->18 [style = solid, label="params"];
21->18 [style = bold, label=""];
19->0 [style = bold, label=""];
1->13 [style = dashed, label="0"];
11->5 [style = bold, label=""];
12->2 [style = bold, label=""];
1->6 [style = bold, label=""];
10->4 [style = solid, label="strategy"];
14->0 [style = bold, label=""];
10->13 [style = bold, label=""];
17->2 [style = bold, label=""];
0->4 [style = bold, label=""];
10->23 [style = bold, label=""];
23->19 [style = bold, label=""];
6->19 [style = dashed, label="0"];
24->17 [style = bold, label=""];
9->3 [style = bold, label=""];
4->8 [style = bold, label=""];
22->24 [style = bold, label=""];
9->7 [style = dotted, label="true"];
10->1 [style = bold, label=""];
16->20 [style = bold, label=""];
1->23 [style = dashed, label="0"];
13->14 [style = bold, label=""];
2->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
