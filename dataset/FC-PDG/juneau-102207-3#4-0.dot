digraph {
15 [style = filled, label = "return v.get()@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "BeanStore.of(beanStore,resourceClass).addBean(,v.get()).beanCreateMethodFinder(,resourceClass).find(\"createVars\").run(null)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "createVars['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "BeanStore beanStore@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "beanStore.beanCreateMethodFinder(,resourceClass).addBean(,v.get()).find(\"createVars\").run(null)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Value<VarList> v = Value.empty()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "v.set(VarList.of(,,,,,,,,,,,,,,,).addDefault())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Object r = resource.get()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "beanStore.getBean().map(null).ifPresent(null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Class<?> resourceClass@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "createEndCallMethods['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Supplier<?> resource@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "BeanStore beanStore@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "BeanStore.of(beanStore,r).addBean(,v.get()).beanCreateMethodFinder(,r).find(\"createEndCallMethods\").run(null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "createVars['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "return v.get()@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "beanStore.getBean().map(null).ifPresent(null)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Value<MethodList> v = Value.of(getHookMethods(resource,HookEvent.END_CALL))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "v.isEmpty()@@@5@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "BeanStore beanStore@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2->3 [style = dotted, label="true"];
13->17 [style = dotted, label="true"];
13->16 [style = dotted, label="true"];
1->4 [style = bold, label=""];
5->14 [style = dashed, label="0"];
12->5 [style = bold, label=""];
11->1 [style = bold, label=""];
12->8 [style = dotted, label="true"];
1->19 [style = dashed, label="0"];
18->19 [style = bold, label=""];
16->14 [style = solid, label="resource"];
0->11 [style = dashed, label="0"];
10->7 [style = bold, label=""];
4->7 [style = bold, label=""];
6->4 [style = bold, label=""];
1->6 [style = bold, label=""];
5->0 [style = bold, label=""];
0->1 [style = bold, label=""];
6->10 [style = bold, label=""];
8->17 [style = dashed, label="0"];
1->6 [style = dotted, label="true"];
14->18 [style = bold, label=""];
5->11 [style = bold, label=""];
19->15 [style = bold, label=""];
4->10 [style = dashed, label="0"];
1->10 [style = bold, label=""];
13->14 [style = bold, label=""];
2->8 [style = dotted, label="true"];
2->5 [style = bold, label=""];
12->9 [style = dotted, label="true"];
}
