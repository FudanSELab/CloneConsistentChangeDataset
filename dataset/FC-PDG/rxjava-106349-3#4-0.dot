digraph {
0 [style = filled, label = "Flowable.range(1,10000).observeOn(Schedulers.single()).map(new Function<Integer,String>(){@Override public String apply(Integer t){String name = Thread.currentThread().getName()if (name.contains(\"RxSingleScheduler\")) {return \"RxSingleScheduler\"}return name}}).concatMapDelayError(new Function<String,Publisher<? extends Object>>(){@Override public Publisher<? extends Object> apply(String v){return Flowable.just(v)}}).observeOn(Schedulers.computation()).distinct().test().awaitDone(5,TimeUnit.SECONDS).assertResult(\"RxSingleScheduler\")@@@3@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "boundaryFusionDelayError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "boundaryFusionDelayError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "boundaryFusionDelayError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2->0 [style = bold, label=""];
3->0 [style = bold, label=""];
1->0 [style = bold, label=""];
}
