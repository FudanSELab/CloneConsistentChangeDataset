digraph {
18 [style = filled, label = "assertTrue(timeline.containsInstant(new HoodieInstant(false,HoodieTimeline.COMMIT_ACTION,\"102\")),\"Instants greater than oldest pending compaction must be present\")@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertTrue(timeline.containsInstant(new HoodieInstant(false,HoodieTimeline.COMMIT_ACTION,\"103\")),\"Archived commits should always be safe\")@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(timeline.containsInstant(new HoodieInstant(false,HoodieTimeline.COMMIT_ACTION,\"105\")),\"Instants greater than oldest pending compaction must be present\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertTrue(timeline.containsInstant(new HoodieInstant(false,HoodieTimeline.COMMIT_ACTION,\"101\")),\"Archived commits should always be safe\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(5,timeline.countInstants(),\"Since we have a savepoint at 101, we should never archive any commit after 101 (we only archive 100)\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "HoodieTestDataGenerator.createCommitFile(basePath,\"102\",wrapperFs.getConf())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,new HoodieInstant(State.REQUESTED,HoodieTimeline.COMPACTION_ACTION,\"104\"),wrapperFs.getConf())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsTimeline().filterCompletedInstants()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "HoodieTestDataGenerator.createSavepointFile(basePath,\"101\",wrapperFs.getConf())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "HoodieTestDataGenerator.createCompactionRequestedFile(basePath,\"101\",wrapperFs.getConf())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "HoodieTestDataGenerator.createCommitFile(basePath,\"103\",wrapperFs.getConf())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "timeline = metaClient.getActiveTimeline().reload().getCommitsTimeline().filterCompletedInstants()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "HoodieTable table = HoodieSparkTable.create(cfg,context,metaClient)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "HoodieTestDataGenerator.createCommitFile(basePath,\"100\",wrapperFs.getConf())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "timeline = metaClient.getActiveTimeline().reload().getWriteTimeline()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "assertEquals(6,timeline.countInstants(),\"Loaded 6 commits and the count should match\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(result)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "timeline = metaClient.getActiveTimeline().reload().getCommitsAndCompactionTimeline()@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "HoodieTestDataGenerator.createCompactionRequestedFile(basePath,\"104\",wrapperFs.getConf())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "HoodieWriteConfig cfg = HoodieWriteConfig.newBuilder().withPath(basePath).withSchema(HoodieTestDataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(2,2).forTable(\"test-trip-table\").withCompactionConfig(HoodieCompactionConfig.newBuilder().retainCommits(1).archiveCommitsWith(2,5).build()).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertFalse(timeline.containsInstant(new HoodieInstant(false,HoodieTimeline.COMMIT_ACTION,\"100\")),\"Instants before oldest pending compaction can be removed\")@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "HoodieTimeline timeline = metaClient.getActiveTimeline().getWriteTimeline()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertTrue(timeline.containsInstant(new HoodieInstant(false,HoodieTimeline.COMMIT_ACTION,\"106\")),\"Instants greater than oldest pending compaction must be present\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "HoodieTestDataGenerator.createCommitFile(basePath,\"105\",wrapperFs.getConf())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(timeline.containsInstant(new HoodieInstant(State.REQUESTED,HoodieTimeline.COMPACTION_ACTION,\"104\")),\"Instants greater than oldest pending compaction must be present\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "boolean result = archiveLog.archiveIfRequired(context)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(8,timeline.countInstants(),\"Loaded 6 commits and the count should match\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "HoodieTable table = HoodieSparkTable.create(cfg,context)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "HoodieTestDataGenerator.createCommitFile(basePath,\"101\",wrapperFs.getConf())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "HoodieTestDataGenerator.createCommitFile(basePath,\"106\",wrapperFs.getConf())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(timeline.containsInstant(new HoodieInstant(false,HoodieTimeline.COMMIT_ACTION,\"107\")),\"Instants greater than oldest pending compaction must be present\")@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(archiveLog.archiveIfRequired(context))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(timeline.containsInstant(new HoodieInstant(State.REQUESTED,HoodieTimeline.COMPACTION_ACTION,\"101\")),\"Requested Compaction must still be present\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testArchiveCommitCompactionNoHole['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "testArchiveCommitSavepointNoHole['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsAndCompactionTimeline()@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertTrue(timeline.containsInstant(new HoodieInstant(false,HoodieTimeline.COMMIT_ACTION,\"103\")),\"Instants greater than oldest pending compaction must be present\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(cfg,table)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "HoodieTestDataGenerator.createCommitFile(basePath,\"104\",wrapperFs.getConf())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,new HoodieInstant(State.REQUESTED,HoodieTimeline.COMPACTION_ACTION,\"101\"),wrapperFs.getConf())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(7,timeline.countInstants(),\"Since we have a pending compaction at 101, we should never archive any commit \" + \"after 101 (we only archive 100)\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "HoodieTestDataGenerator.createCommitFile(basePath,\"107\",wrapperFs.getConf())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testArchiveCommitCompactionNoHole['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertTrue(timeline.containsInstant(new HoodieInstant(false,HoodieTimeline.COMMIT_ACTION,\"102\")),\"Archived commits should always be safe\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->32 [style = bold, label=""];
42->41 [style = bold, label=""];
21->43 [style = dashed, label="0"];
3->30 [style = dashed, label="0"];
29->5 [style = bold, label=""];
4->24 [style = bold, label=""];
0->26 [style = bold, label=""];
9->0 [style = bold, label=""];
12->28 [style = bold, label=""];
23->34 [style = dashed, label="0"];
10->14 [style = bold, label=""];
2->6 [style = bold, label=""];
30->23 [style = bold, label=""];
14->42 [style = bold, label=""];
25->18 [style = bold, label=""];
15->12 [style = solid, label="table"];
25->40 [style = dashed, label="0"];
13->30 [style = bold, label=""];
5->15 [style = solid, label="cfg"];
33->5 [style = bold, label=""];
18->2 [style = bold, label=""];
36->14 [style = bold, label=""];
17->13 [style = solid, label="result"];
27->15 [style = bold, label=""];
26->22 [style = bold, label=""];
9->32 [style = dashed, label="0"];
19->41 [style = dashed, label="0"];
20->10 [style = bold, label=""];
14->42 [style = solid, label="table"];
7->9 [style = bold, label=""];
5->12 [style = solid, label="cfg"];
24->16 [style = bold, label=""];
6->4 [style = bold, label=""];
11->5 [style = bold, label=""];
3->23 [style = bold, label=""];
31->26 [style = bold, label=""];
28->21 [style = bold, label=""];
12->38 [style = bold, label=""];
35->40 [style = bold, label=""];
13->3 [style = bold, label=""];
22->20 [style = bold, label=""];
43->12 [style = bold, label=""];
38->37 [style = bold, label=""];
5->14 [style = solid, label="cfg"];
37->34 [style = bold, label=""];
19->28 [style = dashed, label="0"];
23->1 [style = bold, label=""];
22->39 [style = bold, label=""];
5->7 [style = bold, label=""];
14->8 [style = bold, label=""];
15->12 [style = bold, label=""];
17->13 [style = bold, label=""];
34->35 [style = bold, label=""];
20->39 [style = dashed, label="0"];
17->12 [style = dashed, label="0"];
12->19 [style = bold, label=""];
8->27 [style = bold, label=""];
39->36 [style = bold, label=""];
21->17 [style = bold, label=""];
1->25 [style = bold, label=""];
32->31 [style = bold, label=""];
41->43 [style = bold, label=""];
5->42 [style = solid, label="cfg"];
19->21 [style = bold, label=""];
}
