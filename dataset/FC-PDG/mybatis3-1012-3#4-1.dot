digraph {
6 [style = filled, label = "assertEquals(1,paramType.getActualTypeArguments().length)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ParameterizedType paramType = (ParameterizedType)result@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testReturn_SimpleList['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertTrue(result instanceof ParameterizedType)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(,paramType.getActualTypeArguments()(0()@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(,paramType.getRawType())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Method method = clazz.getMethod(\"simpleSelectMap\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Class<?> clazz = @@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testReturn_SimpleList['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(2,paramType.getActualTypeArguments().length)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testReturn_SimpleMap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(,paramType.getActualTypeArguments()(1()@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Type result = TypeParameterResolver.resolveReturnType(method,clazz)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(,paramType.getActualTypeArguments()(0()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(,paramType.getRawType())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Method method = clazz.getMethod(\"simpleSelectList\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
2->5 [style = solid, label="result"];
9->0 [style = bold, label=""];
1->14 [style = dashed, label="0"];
2->8 [style = solid, label="result"];
12->15 [style = bold, label=""];
0->11 [style = bold, label=""];
7->0 [style = bold, label=""];
4->2 [style = bold, label=""];
5->14 [style = bold, label=""];
11->2 [style = bold, label=""];
5->1 [style = bold, label=""];
1->6 [style = bold, label=""];
13->12 [style = bold, label=""];
0->2 [style = solid, label="clazz"];
6->13 [style = dashed, label="0"];
3->12 [style = dashed, label="0"];
8->5 [style = bold, label=""];
0->4 [style = bold, label=""];
4->2 [style = solid, label="method"];
10->0 [style = bold, label=""];
14->13 [style = bold, label=""];
4->11 [style = dashed, label="0"];
11->2 [style = solid, label="method"];
2->8 [style = bold, label=""];
}
