digraph {
15 [style = filled, label = "testImmutableNullableList['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "{}@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(z,equalTo(\"anullc\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final Iterable<String> ab0c = null@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "{}@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "z += s@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final List<String> arrayList = Arrays.asList(strings)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(arrayList.get(0),equalTo(\"z\"))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(list,equalTo(arrayList))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "String z = \"\"@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "fail(\"expected error, got \" + b)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "UnsupportedOperationException e@@@27@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final List<String> list = UnmodifiableArrayList.of(strings)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(ImmutableNullableList.copyOf(ab0c),not(isA((Class))))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final List<String> arrayList = Arrays.asList(\"a\",null,\"c\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(list.toString(),equalTo(arrayList.toString()))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(ImmutableNullableList.copyOf(Collections.emptyList()),isA((Class)))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(list.size(),equalTo(arrayList.size()))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "UnsupportedOperationException e@@@21@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(ImmutableNullableList.copyOf(abc),equalTo(abcList))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "fail(\"expected error, got \" + b)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "fail(\"expected error, got \" + b)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "UnsupportedOperationException e@@@24@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final List<String> abcList = Arrays.asList(\"a\",\"b\",\"c\")@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(arrayList.get(0),equalTo(\"z\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(ImmutableNullableList.copyOf(ab0c),equalTo(ab0cList))@@@38@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertThat(list.hashCode(),equalTo(arrayList.hashCode()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(ImmutableNullableList.copyOf(abc),isA((Class)))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final Iterable<String> abc = null@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "arrayList.set(0,\"z\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "boolean b = list.add(\"z\")@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(list,equalTo(arrayList))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testImmutableNullableList['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final List<String> ab0cList = Arrays.asList(\"a\",\"b\",null,\"c\")@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(list.hashCode(),equalTo(arrayList.hashCode()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "{}@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String b = list.set(1,\"z\")@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertThat(list.get(0),equalTo(\"z\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(list.size(),equalTo(arrayList.size()))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final List<String> list = ImmutableNullableList.copyOf(arrayList)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final String(( strings = {\"a\",null,\"c\"}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(ImmutableNullableList.copyOf(abcList),isA((Class)))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "fail(\"expected error, got \" + b)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testUnmodifiableArrayList['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(z,equalTo(\"anullc\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->30 [style = solid, label="b"];
14->24 [style = bold, label=""];
12->5 [style = solid, label="z"];
33->14 [style = bold, label=""];
15->10 [style = bold, label=""];
21->44 [style = bold, label=""];
36->40 [style = bold, label=""];
3->34 [style = solid, label="b"];
44->6 [style = bold, label=""];
13->9 [style = solid, label="ab0cList"];
12->5 [style = bold, label=""];
16->8 [style = bold, label=""];
21->6 [style = bold, label=""];
5->39 [style = bold, label=""];
10->27 [style = bold, label=""];
29->41 [style = bold, label=""];
2->3 [style = bold, label=""];
3->14 [style = bold, label=""];
41->3 [style = bold, label=""];
6->42 [style = bold, label=""];
40->0 [style = bold, label=""];
1->3 [style = bold, label=""];
37->29 [style = bold, label=""];
31->29 [style = bold, label=""];
11->12 [style = bold, label=""];
4->18 [style = bold, label=""];
0->21 [style = bold, label=""];
3->33 [style = bold, label=""];
42->12 [style = bold, label=""];
20->1 [style = bold, label=""];
5->37 [style = dashed, label="0"];
6->11 [style = solid, label="z"];
26->19 [style = bold, label=""];
29->41 [style = solid, label="b"];
5->17 [style = bold, label=""];
23->0 [style = bold, label=""];
1->30 [style = bold, label=""];
28->16 [style = bold, label=""];
32->10 [style = bold, label=""];
17->37 [style = bold, label=""];
38->1 [style = bold, label=""];
3->34 [style = bold, label=""];
17->20 [style = solid, label="b"];
28->16 [style = solid, label="abc"];
28->8 [style = solid, label="abc"];
7->28 [style = bold, label=""];
43->35 [style = bold, label=""];
36->21 [style = solid, label="arrayList"];
39->17 [style = bold, label=""];
12->25 [style = bold, label=""];
19->23 [style = bold, label=""];
6->11 [style = bold, label=""];
4->18 [style = solid, label="ab0c"];
18->9 [style = bold, label=""];
30->14 [style = bold, label=""];
24->8 [style = solid, label="abcList"];
25->5 [style = bold, label=""];
17->20 [style = bold, label=""];
35->36 [style = solid, label="strings"];
27->19 [style = solid, label="list"];
22->1 [style = bold, label=""];
40->21 [style = solid, label="list"];
29->22 [style = bold, label=""];
29->1 [style = bold, label=""];
35->36 [style = bold, label=""];
10->19 [style = solid, label="arrayList"];
24->7 [style = solid, label="abcList"];
24->7 [style = bold, label=""];
13->4 [style = bold, label=""];
10->27 [style = solid, label="arrayList"];
8->13 [style = bold, label=""];
4->9 [style = solid, label="ab0c"];
35->40 [style = solid, label="strings"];
27->26 [style = bold, label=""];
}
