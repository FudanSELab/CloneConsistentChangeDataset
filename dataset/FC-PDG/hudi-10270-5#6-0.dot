digraph {
12 [style = filled, label = "prepareJsonKafkaDFSFiles(JSON_KAFKA_NUM_RECORDS,true,topicName)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "boolean hasHeader@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "String tableBasePath = dfsBasePath + \"/test_csv_table\" + testNum@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "deltaStreamer = new HoodieDeltaStreamer(TestHelpers.makeConfig(tableBasePath,WriteOperationType.UPSERT,.getName(),Collections.EMPTY_LIST,PROPS_FILENAME_TEST_JSON_KAFKA,false,true,100000,false,null,null,\"timestamp\"),jsc)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "TestHelpers.assertRecordCount(CSV_NUM_RECORDS,tableBasePath + \"/*/*.parquet\",sqlContext)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "int parquetRecords = 10@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestHelpers.assertRecordCount(totalExpectedRecords,tableBasePath + \"/*/*.parquet\",sqlContext)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "totalExpectedRecords += 20@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "prepareJsonKafkaDFSSource(PROPS_FILENAME_TEST_JSON_KAFKA,autoResetToLatest? \"latest\": \"earliest\",topicName)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testDeltaStreamerTransitionFromParquetToKafkaSource['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "prepareParquetDFSFiles(parquetRecords,PARQUET_SOURCE_ROOT,FIRST_PARQUET_FILE_NAME,true,HoodieTestDataGenerator.TRIP_SCHEMA,HoodieTestDataGenerator.AVRO_TRIP_SCHEMA)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int totalExpectedRecords = parquetRecords + ((autoResetToLatest)? 0: JSON_KAFKA_NUM_RECORDS)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "HoodieDeltaStreamer deltaStreamer = new HoodieDeltaStreamer(TestHelpers.makeConfig(tableBasePath,WriteOperationType.INSERT,.getName(),Collections.EMPTY_LIST,PROPS_FILENAME_TEST_PARQUET,false,false,100000,false,null,null,\"timestamp\"),jsc)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "TestHelpers.assertRecordCount(parquetRecords,tableBasePath + \"/*/*.parquet\",sqlContext)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestHelpers.assertRecordCount(totalExpectedRecords,tableBasePath + \"/*/*.parquet\",sqlContext)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "prepareJsonKafkaDFSFiles(20,false,topicName)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "deltaStreamer.sync()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testNum++@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "deltaStreamer = new HoodieDeltaStreamer(TestHelpers.makeConfig(tableBasePath,WriteOperationType.UPSERT,.getName(),Collections.EMPTY_LIST,PROPS_FILENAME_TEST_JSON_KAFKA,false,true,100000,false,null,null,\"timestamp\",null),jsc)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "topicName = \"topic\" + testNum@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "List<String> transformerClassNames@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "prepareParquetDFSSource(true,false,\"source_uber.avsc\",\"target_uber.avsc\",PROPS_FILENAME_TEST_PARQUET,PARQUET_SOURCE_ROOT,false)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "boolean useSchemaProvider@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "char sep@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "deltaStreamer.sync()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "String sourceOrderingField = (hasHeader || useSchemaProvider)? \"timestamp\": \"_c0\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testDeltaStreamerTransitionFromParquetToKafkaSource['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "prepareCsvDFSSource(hasHeader,sep,useSchemaProvider,transformerClassNames != null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "boolean autoResetToLatest@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String tableBasePath = dfsBasePath + \"/test_dfs_to_kakfa\" + testNum@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "deltaStreamer.shutdownGracefully()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testCsvDFSSource['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "HoodieDeltaStreamer deltaStreamer = new HoodieDeltaStreamer(TestHelpers.makeConfig(tableBasePath,WriteOperationType.INSERT,.getName(),transformerClassNames,PROPS_FILENAME_TEST_CSV,false,useSchemaProvider,1000,false,null,null,sourceOrderingField),jsc)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "deltaStreamer.sync()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFilesDfsToKafka\" + testNum@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testNum++@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "HoodieDeltaStreamer deltaStreamer = new HoodieDeltaStreamer(TestHelpers.makeConfig(tableBasePath,WriteOperationType.INSERT,.getName(),Collections.EMPTY_LIST,PROPS_FILENAME_TEST_PARQUET,false,false,100000,false,null,null,\"timestamp\",null),jsc)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34->32 [style = dotted, label="true"];
17->8 [style = bold, label=""];
14->24 [style = dashed, label="0"];
33->35 [style = bold, label=""];
26->33 [style = solid, label="useSchemaProvider"];
5->6 [style = solid, label="tableBasePath"];
35->28 [style = solid, label="tableBasePath"];
35->29 [style = bold, label=""];
18->8 [style = solid, label="PARQUET_SOURCE_ROOT"];
5->1 [style = solid, label="tableBasePath"];
28->30 [style = bold, label=""];
16->12 [style = solid, label="topicName"];
5->25 [style = solid, label="tableBasePath"];
31->29 [style = solid, label="hasHeader"];
22->9 [style = bold, label=""];
18->15 [style = bold, label=""];
9->4 [style = bold, label=""];
34->33 [style = bold, label=""];
30->36 [style = bold, label=""];
15->6 [style = solid, label="parquetRecords"];
23->19 [style = dotted, label="true"];
2->10 [style = bold, label=""];
3->22 [style = bold, label=""];
12->0 [style = bold, label=""];
1->7 [style = bold, label=""];
10->6 [style = bold, label=""];
21->18 [style = bold, label=""];
15->17 [style = solid, label="parquetRecords"];
13->1 [style = bold, label=""];
7->3 [style = bold, label=""];
26->28 [style = solid, label="useSchemaProvider"];
27->33 [style = solid, label="transformerClassNames"];
5->14 [style = solid, label="tableBasePath"];
5->25 [style = bold, label=""];
16->0 [style = solid, label="topicName"];
29->28 [style = bold, label=""];
6->20 [style = bold, label=""];
34->26 [style = dotted, label="true"];
29->28 [style = solid, label="sourceOrderingField"];
15->13 [style = solid, label="parquetRecords"];
15->17 [style = bold, label=""];
5->2 [style = bold, label=""];
13->1 [style = solid, label="totalExpectedRecords"];
0->14 [style = bold, label=""];
34->31 [style = dotted, label="true"];
34->27 [style = dotted, label="true"];
20->16 [style = bold, label=""];
19->13 [style = solid, label="autoResetToLatest"];
8->5 [style = bold, label=""];
19->0 [style = solid, label="autoResetToLatest"];
5->2 [style = solid, label="tableBasePath"];
24->11 [style = bold, label=""];
6->36 [style = dashed, label="0"];
35->36 [style = solid, label="tableBasePath"];
0->24 [style = bold, label=""];
21->19 [style = dotted, label="true"];
11->13 [style = bold, label=""];
26->29 [style = solid, label="useSchemaProvider"];
5->24 [style = solid, label="tableBasePath"];
2->25 [style = dashed, label="0"];
5->9 [style = solid, label="tableBasePath"];
27->28 [style = solid, label="transformerClassNames"];
25->10 [style = bold, label=""];
16->7 [style = solid, label="topicName"];
14->11 [style = bold, label=""];
16->12 [style = bold, label=""];
23->18 [style = bold, label=""];
32->33 [style = solid, label="sep"];
3->9 [style = solid, label="totalExpectedRecords"];
18->17 [style = solid, label="PARQUET_SOURCE_ROOT"];
36->10 [style = bold, label=""];
31->33 [style = solid, label="hasHeader"];
}
