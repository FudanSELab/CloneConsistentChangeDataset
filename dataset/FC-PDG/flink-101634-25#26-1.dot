digraph {
6 [style = filled, label = "env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1,0))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testTumblingTimeWindow['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final int numKeys = 1@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final int windowSize = 100@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final int numElementsPerKey = 3000@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testSlidingTimeWindow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "env.enableCheckpointing(100)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "env.execute(\"Sliding Window Test\")@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testTumblingTimeWindow['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "final int windowSize = 1000@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "env.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys,windowSlide),numElementsPerKey)).rebalance().windowAll(SlidingEventTimeWindows.of(Time.milliseconds(windowSize),Time.milliseconds(windowSlide))).apply(new RichAllWindowFunction<Tuple2<Long,IntType>,Tuple4<Long,Long,Long,IntType>,TimeWindow>(){@Override public void open(Configuration parameters){assertEquals(1,getRuntimeContext().getNumberOfParallelSubtasks())open = true}@Override public void apply(TimeWindow window,Iterable<Tuple2<Long,IntType>> values,Collector<Tuple4<Long,Long,Long,IntType>> out){assertTrue(open)int sum = 0long key = -1for (Tuple2<Long,IntType> value : values){sum += value.f1.valuekey = value.f0}out.collect(new Tuple4<>(key,window.getStart(),window.getEnd(),new IntType(sum)))}}).addSink(new ValidatingSink<>(new EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),new EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys,numElementsPerKey,windowSlide))).setParallelism(1)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final int numKeys = 1@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final int windowSlide = 100@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "env.setParallelism(PARALLELISM)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "env.execute(\"Tumbling Window Test\")@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
9->2 [style = bold, label=""];
7->14 [style = dashed, label="0"];
9->17 [style = bold, label=""];
11->9 [style = bold, label=""];
15->16 [style = bold, label=""];
12->9 [style = bold, label=""];
2->17 [style = dashed, label="0"];
3->9 [style = bold, label=""];
2->0 [style = bold, label=""];
10->5 [style = bold, label=""];
5->6 [style = bold, label=""];
6->13 [style = dashed, label="0"];
6->13 [style = bold, label=""];
0->8 [style = bold, label=""];
17->15 [style = bold, label=""];
4->1 [style = bold, label=""];
8->4 [style = bold, label=""];
16->4 [style = bold, label=""];
6->7 [style = bold, label=""];
1->10 [style = bold, label=""];
13->14 [style = bold, label=""];
}
