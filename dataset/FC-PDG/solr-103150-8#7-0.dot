digraph {
0 [style = filled, label = "assertFalse(equals)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "equals = true@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertFuncEquals(\"agg(avg(foo_i))\",\"agg_avg(foo_i)\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertFuncEquals(\"agg_avg(foo_i)\",\"agg_avg(foo_i)\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertFuncEquals(\"agg(avg(foo_i))\",\"agg(avg(foo_i))\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertFuncEquals(\"agg_stddev(foo_i)\",\"agg_stddev(foo_i)\")@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testCompares['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertFuncEquals(\"lte(foo_i,2)\",\"lte(foo_i,2)\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertFuncEquals(\"agg_count()\",\"agg_count()\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertFuncEquals(\"agg_sum(foo_i)\",\"agg_sum(foo_i)\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertFuncEquals(\"eq(foo_i,2)\",\"eq(foo_i,2)\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertFuncEquals(\"agg_sumsq(foo_i)\",\"agg_sumsq(foo_i)\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertFuncEquals(\"agg_max(foo_i)\",\"agg(max(foo_i))\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertFuncEquals(\"agg_hll(foo_i)\",\"agg_hll(foo_i)\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "AssertionError e@@@14@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertFuncEquals(\"gt(foo_i,2)\",\"gt(foo_i, 2)\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectThrows(,\"expected error, functions are not equal\",null)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertFuncEquals(\"agg_unique(foo_i)\",\"agg_unique(foo_i)\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertFuncEquals(\"gt(foo_i,2)\",\"gt(foo_i,2)\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertFuncEquals(\"lt(foo_i,2)\",\"lt(foo_i,2)\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertFuncEquals(\"agg_min(foo_i)\",\"agg(min(foo_i))\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertFuncEquals(\"agg_uniqueBlock(foo_i)\",\"agg_uniqueBlock(foo_i)\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertFuncEquals(\"eq(foo_i,2)\",\"lt(foo_i,2)\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testAggs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "{}@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "boolean equals = false@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertFuncEquals(\"agg_variance(foo_i)\",\"agg_variance(foo_i)\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testCompares['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertFuncEquals(\"gte(foo_i,2)\",\"gte(foo_i,2)\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertFuncEquals(\"agg_percentile(foo_i,50)\",\"agg_percentile(foo_i,50)\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3->29 [style = dashed, label="0"];
15->23 [style = bold, label=""];
1->8 [style = bold, label=""];
9->24 [style = dashed, label="0"];
4->17 [style = dashed, label="0"];
7->10 [style = bold, label=""];
7->16 [style = dashed, label="0"];
26->29 [style = bold, label=""];
9->4 [style = bold, label=""];
2->3 [style = bold, label=""];
25->18 [style = bold, label=""];
23->26 [style = bold, label=""];
10->28 [style = dashed, label="0"];
21->25 [style = bold, label=""];
12->6 [style = bold, label=""];
17->19 [style = bold, label=""];
27->15 [style = bold, label=""];
4->7 [style = bold, label=""];
19->16 [style = bold, label=""];
20->27 [style = bold, label=""];
6->2 [style = bold, label=""];
8->0 [style = bold, label=""];
3->9 [style = bold, label=""];
11->5 [style = bold, label=""];
5->27 [style = dashed, label="0"];
28->21 [style = bold, label=""];
18->22 [style = bold, label=""];
16->28 [style = bold, label=""];
5->12 [style = bold, label=""];
10->0 [style = bold, label=""];
24->17 [style = bold, label=""];
9->14 [style = bold, label=""];
13->5 [style = bold, label=""];
12->15 [style = dashed, label="0"];
4->14 [style = dashed, label="0"];
2->26 [style = dashed, label="0"];
29->24 [style = bold, label=""];
6->23 [style = dashed, label="0"];
10->0 [style = solid, label="equals"];
}
