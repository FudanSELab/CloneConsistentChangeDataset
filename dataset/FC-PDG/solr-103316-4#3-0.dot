digraph {
3 [style = filled, label = "assertEquals(3.0,q.getBoost(),1e-15)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(1.0,q.getBoost(),1e-15)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(3.0,q.getBoost(),1e-15)@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "float fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery().getBoost()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertEquals(2,qa.size())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(2,clauses.length)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery().getBoost()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "float barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().get(0).getQuery().getBoost()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "q = parse(\"(foo^2.0 bar)^3.0\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "q = parse(\"foo^3.0\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(7.0,clauses(1(.getQuery().getBoost(),1e-15)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "clauses = clauses(q)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery)clauses(0(.getQuery())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().get(0).getQuery().getBoost()@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().get(0).getQuery().getBoost()@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertEquals(1,clauses.length)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ArrayList<Query> qa = ((DisjunctionMaxQuery)clauses(0(.getQuery()).getDisjuncts()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(1.0,barClause,1e-15)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(6.0,barClause,1e-15)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery().getBoost()@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "clauses = clauses(q)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "float fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().get(0).getQuery().getBoost()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "testBoost['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "assertEquals(\"text:foo\",qa.get(0).toString())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testBoost['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(5.0,fooClause,1e-15)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testPureMax['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "dmq = ((DisjunctionMaxQuery)clauses(0(.getQuery())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "q = parse(\"foo bar\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "q = parse(\"foo^5.0 bar^6.0 +baz^7\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(0.0,((DisjunctionMaxQuery)clauses(0(.getQuery()).getTieBreakerMultiplier(),1e-15)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "float barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery().getBoost()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertEquals(2.0,fooClause,1e-15)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
5->3 [style = bold, label=""];
13->10 [style = bold, label=""];
16->15 [style = bold, label=""];
4->9 [style = bold, label=""];
19->27 [style = dashed, label="0"];
23->16 [style = bold, label=""];
27->1 [style = bold, label=""];
28->5 [style = bold, label=""];
21->0 [style = bold, label=""];
22->19 [style = bold, label=""];
10->14 [style = bold, label=""];
29->30 [style = bold, label=""];
12->21 [style = bold, label=""];
15->25 [style = bold, label=""];
6->2 [style = solid, label="q"];
22->33 [style = dashed, label="0"];
24->10 [style = solid, label="barClause"];
20->8 [style = solid, label="fooClause"];
3->6 [style = bold, label=""];
34->31 [style = bold, label=""];
31->2 [style = bold, label=""];
0->26 [style = dashed, label="0"];
30->34 [style = bold, label=""];
2->9 [style = bold, label=""];
11->18 [style = bold, label=""];
26->22 [style = bold, label=""];
30->34 [style = solid, label="q"];
1->17 [style = bold, label=""];
18->4 [style = solid, label="q"];
6->2 [style = bold, label=""];
2->23 [style = bold, label=""];
21->9 [style = dashed, label="0"];
19->1 [style = bold, label=""];
21->26 [style = bold, label=""];
20->8 [style = bold, label=""];
7->5 [style = bold, label=""];
13->24 [style = dashed, label="0"];
18->4 [style = bold, label=""];
22->27 [style = bold, label=""];
25->8 [style = solid, label="fooClause"];
20->25 [style = dashed, label="0"];
5->30 [style = dashed, label="0"];
15->20 [style = bold, label=""];
0->22 [style = bold, label=""];
13->10 [style = solid, label="barClause"];
19->1 [style = solid, label="barClause"];
12->33 [style = bold, label=""];
2->4 [style = solid, label="clauses"];
33->32 [style = bold, label=""];
25->8 [style = bold, label=""];
9->12 [style = bold, label=""];
0->22 [style = solid, label="fooClause"];
14->11 [style = bold, label=""];
27->1 [style = solid, label="barClause"];
8->13 [style = bold, label=""];
26->22 [style = solid, label="fooClause"];
8->24 [style = bold, label=""];
}
