digraph {
31 [style = filled, label = "SortOrder order = SortOrder.builderFor(schema).asc(\"id\",NULLS_FIRST).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(\"Null order must match \",NULLS_FIRST,sortOrder.fields().get(0).nullOrder())@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "SortOrder newSortOrder = SortOrder.builderFor(schema).asc(\"id\",NULLS_FIRST).build()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"Version should be 2\",2L,(long)version())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "PartitionSpec v2Expected = PartitionSpec.builderFor(table.schema()).withSpecId(1).build()@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Schema should match previous schema\",schema.asStruct(),table.schema().asStruct())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Transform<?,?> transform = Transforms.identity(Types.IntegerType.get())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "SortOrder sortOrder = table.sortOrder()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Transaction replace = TestTables.beginReplace(tableDir,\"test\",schema,unpartitioned(),newSortOrder,props)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "V1Assert.assertEquals(\"Table should have a spec with one void field\",v1Expected,table.spec())@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "Assert.assertEquals(\"Order ID must match\",1,sortOrder.orderId())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "{catalog.dropTable(tableIdent)}@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Schema schema = new Schema(required(1,\"id\",Types.IntegerType.get(),\"unique ID\"),required(2,\"data\",Types.StringType.get()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Direction must match \",ASC,sortOrder.fields().get(0).direction())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "SortOrder sortOrder = table.sortOrder()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Schema schema = table.schema()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"Order ID must match\",1,sortOrder.orderId())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "PartitionSpec spec = PartitionSpec.builderFor(schema).bucket(\"data\",16).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(\"Version should be 1\",1L,(long)version())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"Order ID must match\",1,sortOrder.orderId())@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Transform<?,?> transform = Transforms.identity(Types.IntegerType.get())@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "Assert.assertEquals(\"Direction must match \",ASC,sortOrder.fields().get(0).direction())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(\"Transform must match\",transform,sortOrder.fields().get(0).transform())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertEquals(\"Null order must match \",NULLS_FIRST,sortOrder.fields().get(0).nullOrder())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SortOrder sortOrder = table.sortOrder()@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(\"Transform must match\",transform,sortOrder.fields().get(0).transform())@@@27@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "Assert.assertEquals(\"Table should have 2 orders\",2,table.sortOrders().size())@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Snapshot start = table.currentSnapshot()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testReplaceTransactionWithCustomSortOrder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "validateSnapshot(start,table.currentSnapshot(),FILE_A)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testReplaceTransactionWithCustomSortOrder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Map<String,String> props = Maps.newHashMap()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "TableIdentifier tableIdent = TableIdentifier.of(DB_NAME,\"tbl\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertNull(\"Table should not have a current snapshot\",table.currentSnapshot())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(\"Order must have 1 field\",1,sortOrder.fields().size())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(\"Partition spec should have no fields\",0,table.spec().fields().size())@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "PartitionSpec v1Expected = PartitionSpec.builderFor(table.schema()).alwaysNull(\"data\",\"data_bucket\").withSpecId(1).build()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "Table table = catalog.buildTable(tableIdent,schema).withPartitionSpec(spec).withSortOrder(order).create()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "V2Assert.assertEquals(\"Table should have an unpartitioned spec\",v2Expected,table.spec())@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "table.refresh()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testCreateTableCustomSortOrder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(\"Table should have 2 orders\",2,table.sortOrders().size())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "table.newAppend().appendFile(FILE_A).commit()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "replace.commitTransaction()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"Order must have 1 field\",1,sortOrder.fields().size())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->2 [style = bold, label=""];
26->28 [style = solid, label="transform"];
9->19 [style = bold, label=""];
5->14 [style = bold, label=""];
39->44 [style = bold, label=""];
31->37 [style = bold, label=""];
20->3 [style = bold, label=""];
38->36 [style = bold, label=""];
36->42 [style = bold, label=""];
32->39 [style = solid, label="transform"];
24->27 [style = solid, label="v1Expected"];
14->18 [style = bold, label=""];
35->41 [style = bold, label=""];
10->17 [style = bold, label=""];
18->22 [style = bold, label=""];
13->0 [style = bold, label=""];
42->32 [style = bold, label=""];
0->29 [style = bold, label=""];
32->39 [style = bold, label=""];
27->9 [style = bold, label=""];
13->0 [style = solid, label="transform"];
6->20 [style = bold, label=""];
21->10 [style = bold, label=""];
1->11 [style = bold, label=""];
7->13 [style = bold, label=""];
12->9 [style = bold, label=""];
43->34 [style = bold, label=""];
37->40 [style = bold, label=""];
33->43 [style = bold, label=""];
16->1 [style = bold, label=""];
37->44 [style = solid, label="tableIdent"];
34->31 [style = bold, label=""];
23->20 [style = bold, label=""];
3->15 [style = solid, label="schema"];
17->15 [style = solid, label="newSortOrder"];
41->38 [style = bold, label=""];
25->30 [style = solid, label="v2Expected"];
15->16 [style = bold, label=""];
26->28 [style = bold, label=""];
14->25 [style = bold, label=""];
17->8 [style = bold, label=""];
24->27 [style = bold, label=""];
19->7 [style = bold, label=""];
40->35 [style = bold, label=""];
4->21 [style = bold, label=""];
25->30 [style = bold, label=""];
20->10 [style = solid, label="start"];
8->15 [style = solid, label="props"];
30->24 [style = bold, label=""];
3->4 [style = bold, label=""];
8->15 [style = bold, label=""];
2->12 [style = bold, label=""];
11->5 [style = bold, label=""];
29->26 [style = bold, label=""];
}
