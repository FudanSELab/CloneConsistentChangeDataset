digraph {
27 [style = filled, label = "assertNotEquals(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(1)),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "verifyInEquality(JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3),ofMillis(9)).before(ofMillis(1)).after(ofMillis(2)),JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3),ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "verifyInEquality(JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3),ofMillis(3)).before(ofMillis(1)).after(ofMillis(9)),JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3),ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(90)),JoinWindows.of(ofMillis(3)).grace(ofMillis(60)))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(9)),TimeWindows.of(ofMillis(3)).grace(ofMillis(4)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "verifyInEquality(TimeWindows.ofSizeAndGrace(ofMillis(9),ofMillis(9)),TimeWindows.ofSizeAndGrace(ofMillis(3),ofMillis(9)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "verifyInEquality(JoinWindows.ofTimeDifferenceAndGrace(ofMillis(9),ofMillis(9)),JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3),ofMillis(9)))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(9)),TimeWindows.of(ofMillis(3)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "verifyInEquality(JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)).after(ofMillis(9)),JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)).after(ofMillis(2)))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).after(ofMillis(9)),JoinWindows.of(ofMillis(3)).after(ofMillis(2)))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(9)),JoinWindows.of(ofMillis(3)))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "verifyInEquality(JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)).before(ofMillis(9)),JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)).before(ofMillis(2)))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(9)),JoinWindows.of(ofMillis(3)).before(ofMillis(2)))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(9)).after(ofMillis(2)).grace(ofMillis(3)),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(9)),JoinWindows.of(ofMillis(3)).grace(ofMillis(2)))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "verifyInEquality(TimeWindows.ofSizeWithNoGrace(ofMillis(9)),TimeWindows.ofSizeWithNoGrace(ofMillis(3)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(9)).grace(ofMillis(3)),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "verifyInEquality(JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3),ofMillis(9)),JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3),ofMillis(2)))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(9)),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "verifyInEquality(JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3),ofMillis(3)).before(ofMillis(9)).after(ofMillis(2)),JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3),ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(2)),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "verifyInEquality(JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(9)),JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(2)),TimeWindows.of(ofMillis(3)).grace(ofMillis(1)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(4)).advanceBy(ofMillis(2)).grace(ofMillis(2)),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->10 [style = bold, label=""];
16->13 [style = bold, label=""];
5->12 [style = dashed, label="0"];
7->23 [style = dashed, label="0"];
15->14 [style = bold, label=""];
0->6 [style = bold, label=""];
26->25 [style = bold, label=""];
14->17 [style = bold, label=""];
12->16 [style = bold, label=""];
3->12 [style = bold, label=""];
1->7 [style = bold, label=""];
4->0 [style = bold, label=""];
6->1 [style = bold, label=""];
24->26 [style = bold, label=""];
3->5 [style = bold, label=""];
23->24 [style = bold, label=""];
22->18 [style = bold, label=""];
21->20 [style = bold, label=""];
20->23 [style = bold, label=""];
11->3 [style = bold, label=""];
7->2 [style = bold, label=""];
19->27 [style = bold, label=""];
25->19 [style = bold, label=""];
9->3 [style = bold, label=""];
0->18 [style = dashed, label="0"];
10->9 [style = bold, label=""];
13->15 [style = bold, label=""];
18->21 [style = bold, label=""];
2->24 [style = dashed, label="0"];
2->8 [style = bold, label=""];
}
