digraph {
17 [style = filled, label = "pp.subscribe(new Consumer<Integer>(){@Override public void accept(Integer v){throw new TestException()}},new Consumer<Throwable>(){@Override public void accept(Throwable e){errors.add(e)}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "pp.subscribe(s)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(\"No observers?!\",pp.hasSubscribers())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "BoundedSubscriber<Integer> s = new BoundedSubscriber<>(new Consumer<Integer>(){@Override public void accept(Integer v){throw new TestException()}},new Consumer<Throwable>(){@Override public void accept(Throwable e){errors.add(e)}},new Action(){@Override public void run(){}},new Consumer<Subscription>(){@Override public void accept(Subscription subscription){subscription.request(128)}},128)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertFalse(\"Has observers?!\",pp.hasSubscribers())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "BoundedSubscriber<Integer> s = new BoundedSubscriber<Integer>(new Consumer<Integer>(){@Override public void accept(Integer v){throw new TestException()}},new Consumer<Throwable>(){@Override public void accept(Throwable e){errors.add(e)}},new Action(){@Override public void run(){}},new Consumer<Subscription>(){@Override public void accept(Subscription subscription){subscription.request(128)}},128)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "pp.onNext(1)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "pp.onNext(1)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "onNextThrowsCancelsUpstream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "onNextThrowsCancelsUpstream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(\"Has errors already?!\",errors.isEmpty())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "onNextThrowsCancelsUpstream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertFalse(\"No errors?!\",errors.isEmpty())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(errors.toString(),errors.get(0) instanceof TestException)@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(\"No observers?!\",pp.hasSubscribers())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertFalse(\"Has observers?!\",pp.hasSubscribers())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final List<Throwable> errors = new ArrayList<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "PublishProcessor<Integer> pp = PublishProcessor.create()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(\"Has errors already?!\",errors.isEmpty())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final List<Throwable> errors = new ArrayList<Throwable>()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertFalse(\"No errors?!\",errors.isEmpty())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(errors.toString(),errors.get(0) instanceof TestException)@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12->1 [style = solid, label="s"];
4->3 [style = bold, label=""];
19->18 [style = bold, label=""];
7->17 [style = bold, label=""];
21->6 [style = bold, label=""];
9->2 [style = bold, label=""];
7->11 [style = dashed, label="0"];
7->0 [style = bold, label=""];
11->12 [style = bold, label=""];
0->12 [style = dashed, label="0"];
16->19 [style = bold, label=""];
15->16 [style = bold, label=""];
12->1 [style = bold, label=""];
2->4 [style = bold, label=""];
0->17 [style = dashed, label="0"];
1->9 [style = bold, label=""];
3->10 [style = bold, label=""];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
0->1 [style = bold, label=""];
6->11 [style = bold, label=""];
0->1 [style = solid, label="s"];
13->6 [style = bold, label=""];
6->7 [style = bold, label=""];
20->15 [style = bold, label=""];
18->14 [style = bold, label=""];
17->20 [style = bold, label=""];
}
