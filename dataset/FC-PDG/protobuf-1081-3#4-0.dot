digraph {
8 [style = filled, label = "assertTrue(message.hasField(optionalStringField))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EnumDescriptor enumDescriptor = optionalNestedEnumField.getEnumType()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "FieldDescriptor optionalNestedEnumField = descriptor.findFieldByName(\"optional_nested_enum\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertFalse(message.hasField(optionalStringField))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(message.hasField(optionalInt32Field))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EnumValueDescriptor defaultEnumValueDescriptor = enumDescriptor.getValues().get(0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testFieldPresenceByReflection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertFalse(message.hasField(optionalBytesField))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertFalse(message.hasField(optionalInt32Field))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "TestAllTypes message = TestAllTypes.getDefaultInstance()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "EnumValueDescriptor nonDefaultEnumValueDescriptor = enumDescriptor.getValues().get(1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "FieldDescriptor optionalInt32Field = descriptor.findFieldByName(\"optional_int32\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(4,message.getAllFields().size())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertFalse(message.hasField(optionalNestedEnumField))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(0,message.getAllFields().size())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "DynamicMessage message = defaultInstance.newBuilderForType().build()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertFalse(message.hasField(optionalInt32Field))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertFalse(message.hasField(optionalNestedEnumField))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertFalse(message.hasField(optionalNestedEnumField))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(message.hasField(optionalInt32Field))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "TestAllTypes message = TestAllTypes.newBuilder().build()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "testFieldPresenceDynamicMessage['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Descriptor descriptor = TestAllTypes.getDescriptor()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertFalse(message.hasField(optionalStringField))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "FieldDescriptor optionalBytesField = descriptor.findFieldByName(\"optional_bytes\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(0,message.getAllFields().size())@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertFalse(message.hasField(optionalStringField))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "message = message.toBuilder().setField(optionalInt32Field,0).setField(optionalStringField,\"\").setField(optionalBytesField,ByteString.EMPTY).setField(optionalNestedEnumField,defaultEnumValueDescriptor).build()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "DynamicMessage defaultInstance = DynamicMessage.getDefaultInstance(descriptor)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "message = TestAllTypes.newBuilder().setOptionalInt32(1).setOptionalString(\"x\").setOptionalBytes(ByteString.copyFromUtf8(\"y\")).setOptionalNestedEnum(TestAllTypes.NestedEnum.BAR).build()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(message.hasField(optionalNestedEnumField))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "message = defaultInstance.newBuilderForType().setField(optionalInt32Field,1).setField(optionalStringField,\"x\").setField(optionalBytesField,ByteString.copyFromUtf8(\"y\")).setField(optionalNestedEnumField,nonDefaultEnumValueDescriptor).build()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertTrue(message.hasField(optionalBytesField))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertFalse(message.hasField(optionalBytesField))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertTrue(message.hasField(optionalStringField))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertTrue(message.hasField(optionalNestedEnumField))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(message.hasField(optionalBytesField))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertFalse(message.hasField(optionalNestedEnumField))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "FieldDescriptor optionalStringField = descriptor.findFieldByName(\"optional_string\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertFalse(message.hasField(optionalBytesField))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertFalse(message.hasField(optionalInt32Field))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testFieldPresenceByReflection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(0,message.getAllFields().size())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->9 [style = solid, label="optionalInt32Field"];
31->37 [style = bold, label=""];
23->29 [style = solid, label="descriptor"];
5->27 [style = solid, label="optionalInt32Field"];
25->1 [style = bold, label=""];
16->11 [style = bold, label=""];
35->29 [style = bold, label=""];
23->5 [style = bold, label=""];
41->27 [style = bold, label=""];
37->36 [style = bold, label=""];
15->25 [style = bold, label=""];
5->4 [style = solid, label="optionalInt32Field"];
6->23 [style = bold, label=""];
14->26 [style = solid, label="optionalBytesField"];
33->28 [style = bold, label=""];
27->30 [style = bold, label=""];
30->42 [style = bold, label=""];
15->7 [style = solid, label="optionalNestedEnumField"];
14->4 [style = solid, label="optionalBytesField"];
4->18 [style = bold, label=""];
40->9 [style = bold, label=""];
42->31 [style = bold, label=""];
11->32 [style = bold, label=""];
0->3 [style = solid, label="optionalStringField"];
20->1 [style = bold, label=""];
0->18 [style = solid, label="optionalStringField"];
0->30 [style = solid, label="optionalStringField"];
14->42 [style = solid, label="optionalBytesField"];
10->41 [style = bold, label=""];
3->4 [style = bold, label=""];
1->13 [style = bold, label=""];
10->7 [style = bold, label=""];
36->11 [style = bold, label=""];
32->26 [style = bold, label=""];
0->13 [style = solid, label="optionalStringField"];
14->10 [style = solid, label="optionalBytesField"];
14->2 [style = solid, label="optionalBytesField"];
15->18 [style = solid, label="optionalNestedEnumField"];
26->38 [style = bold, label=""];
5->12 [style = solid, label="optionalInt32Field"];
13->17 [style = bold, label=""];
28->35 [style = bold, label=""];
0->14 [style = bold, label=""];
21->9 [style = bold, label=""];
15->31 [style = solid, label="optionalNestedEnumField"];
18->10 [style = bold, label=""];
5->0 [style = bold, label=""];
8->2 [style = bold, label=""];
20->25 [style = dashed, label="0"];
12->8 [style = bold, label=""];
15->20 [style = bold, label=""];
22->12 [style = bold, label=""];
15->21 [style = solid, label="optionalNestedEnumField"];
39->23 [style = bold, label=""];
38->34 [style = bold, label=""];
0->32 [style = solid, label="optionalStringField"];
9->3 [style = bold, label=""];
29->40 [style = bold, label=""];
14->15 [style = bold, label=""];
15->16 [style = solid, label="optionalNestedEnumField"];
5->1 [style = solid, label="optionalInt32Field"];
7->19 [style = bold, label=""];
17->21 [style = bold, label=""];
19->22 [style = bold, label=""];
14->17 [style = solid, label="optionalBytesField"];
5->11 [style = solid, label="optionalInt32Field"];
15->38 [style = solid, label="optionalNestedEnumField"];
15->33 [style = bold, label=""];
0->8 [style = solid, label="optionalStringField"];
24->23 [style = bold, label=""];
2->16 [style = bold, label=""];
}
