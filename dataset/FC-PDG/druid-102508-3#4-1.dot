digraph {
10 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionOffsetMap().equals(currentOffsets))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "i++@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final KafkaPartitions startPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,0L,1,0L))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "i++@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Thread.sleep(10)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new KafkaPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new KafkaPartitions(topic,nextOffsets)))))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "int i = numToAdd@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "i < numToAdd@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Thread.sleep(10)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final KafkaPartitions startPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,0L,1,0L))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "int i = 0@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new KafkaPartitions(topic,currentOffsets)))))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "kafkaProducer.send(record).get()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "task.getRunner().getStatus() != KafkaIndexTask.Status.PAUSED@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "final KafkaPartitions checkpoint2 = new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,0L))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "task.getRunner().getStatus() != KafkaIndexTask.Status.PAUSED@@@30@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "task.getRunner().getStatus() != KafkaIndexTask.Status.PAUSED@@@24@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Map<String,String> consumerProps = kafkaServer.consumerProperties()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final KafkaPartitions checkpoint1 = new KafkaPartitions(topic,ImmutableMap.of(0,5L,1,0L))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Map<String,String> consumerProps = kafkaServer.consumerProperties()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "final KafkaPartitions checkpoint1 = new KafkaPartitions(topic,ImmutableMap.of(0,3L,1,0L))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new KafkaPartitions(topic,currentOffsets)))))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionOffsetMap().equals(nextOffsets))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final KafkaPartitions endPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,2L))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "i < records.size()@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@62@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "maxTotalRows = 3L@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->51 [style = bold, label=""];
33->5 [style = solid, label="desc1"];
68->35 [style = bold, label=""];
11->68 [style = solid, label="consumerProps"];
60->47 [style = solid, label="i"];
43->60 [style = bold, label=""];
52->64 [style = bold, label=""];
68->17 [style = solid, label="task"];
17->5 [style = solid, label="desc4"];
56->64 [style = bold, label=""];
41->8 [style = bold, label=""];
49->14 [style = bold, label=""];
4->15 [style = bold, label=""];
21->58 [style = bold, label=""];
6->27 [style = solid, label="desc4"];
4->23 [style = solid, label="task"];
40->25 [style = bold, label=""];
59->57 [style = bold, label=""];
31->40 [style = dashed, label="0"];
65->56 [style = bold, label=""];
66->62 [style = bold, label=""];
4->6 [style = solid, label="task"];
23->5 [style = solid, label="desc3"];
51->10 [style = bold, label=""];
56->64 [style = solid, label="i"];
47->11 [style = bold, label=""];
35->2 [style = solid, label="currentOffsets"];
16->1 [style = solid, label="desc1"];
19->24 [style = bold, label=""];
7->14 [style = bold, label=""];
1->50 [style = solid, label="desc6"];
4->59 [style = bold, label=""];
4->16 [style = solid, label="task"];
20->46 [style = dashed, label="0"];
36->0 [style = bold, label=""];
60->47 [style = bold, label=""];
26->5 [style = solid, label="desc5"];
45->43 [style = bold, label=""];
10->17 [style = solid, label="desc2"];
2->36 [style = bold, label=""];
47->61 [style = dotted, label="true"];
18->35 [style = bold, label=""];
37->38 [style = solid, label="desc7"];
31->4 [style = solid, label="consumerProps"];
55->66 [style = solid, label="nextOffsets"];
9->29 [style = bold, label=""];
55->51 [style = solid, label="nextOffsets"];
43->52 [style = solid, label="numToAdd"];
24->46 [style = bold, label=""];
35->13 [style = solid, label="currentOffsets"];
64->65 [style = dotted, label="true"];
43->47 [style = solid, label="numToAdd"];
54->52 [style = bold, label=""];
28->18 [style = bold, label=""];
58->16 [style = bold, label=""];
12->4 [style = solid, label="endPartitions"];
37->17 [style = solid, label="desc7"];
26->1 [style = bold, label=""];
39->8 [style = bold, label=""];
4->15 [style = solid, label="task"];
11->12 [style = bold, label=""];
20->3 [style = bold, label=""];
37->63 [style = solid, label="desc3"];
27->22 [style = bold, label=""];
18->28 [style = bold, label=""];
0->7 [style = bold, label=""];
17->67 [style = solid, label="desc4"];
24->20 [style = bold, label=""];
22->38 [style = bold, label=""];
9->7 [style = solid, label="startPartitions"];
0->58 [style = dashed, label="0"];
54->44 [style = bold, label=""];
47->42 [style = dotted, label="true"];
34->53 [style = solid, label="desc7"];
9->4 [style = solid, label="startPartitions"];
33->30 [style = bold, label=""];
13->49 [style = dashed, label="0"];
61->47 [style = solid, label="i"];
0->16 [style = solid, label="currentOffsets"];
55->66 [style = bold, label=""];
14->21 [style = bold, label=""];
29->11 [style = bold, label=""];
42->61 [style = bold, label=""];
8->19 [style = dotted, label="true"];
13->0 [style = bold, label=""];
8->24 [style = bold, label=""];
44->54 [style = bold, label=""];
31->25 [style = bold, label=""];
10->34 [style = solid, label="desc2"];
33->27 [style = solid, label="desc5"];
24->68 [style = solid, label="baseSequenceName"];
47->42 [style = bold, label=""];
64->55 [style = bold, label=""];
54->44 [style = dotted, label="true"];
25->9 [style = bold, label=""];
34->5 [style = solid, label="desc7"];
4->16 [style = solid, label="startPartitions"];
68->1 [style = solid, label="task"];
68->34 [style = solid, label="task"];
32->16 [style = bold, label=""];
68->30 [style = solid, label="task"];
4->37 [style = solid, label="task"];
4->33 [style = solid, label="task"];
0->49 [style = solid, label="currentOffsets"];
13->2 [style = dotted, label="true"];
64->56 [style = dotted, label="true"];
1->34 [style = bold, label=""];
68->35 [style = solid, label="task"];
24->4 [style = solid, label="baseSequenceName"];
0->49 [style = bold, label=""];
10->23 [style = bold, label=""];
6->33 [style = bold, label=""];
23->6 [style = bold, label=""];
64->65 [style = bold, label=""];
4->68 [style = solid, label="startPartitions"];
63->67 [style = bold, label=""];
30->5 [style = solid, label="desc2"];
23->17 [style = solid, label="desc3"];
33->17 [style = solid, label="desc5"];
4->30 [style = solid, label="task"];
29->59 [style = dashed, label="0"];
60->61 [style = solid, label="i"];
11->57 [style = dashed, label="0"];
13->2 [style = bold, label=""];
1->5 [style = solid, label="desc6"];
68->26 [style = solid, label="task"];
17->26 [style = bold, label=""];
16->17 [style = solid, label="desc1"];
28->68 [style = solid, label="endPartitions"];
35->7 [style = solid, label="currentOffsets"];
3->40 [style = bold, label=""];
16->10 [style = bold, label=""];
57->28 [style = bold, label=""];
3->31 [style = bold, label=""];
8->19 [style = bold, label=""];
34->5 [style = bold, label=""];
68->37 [style = solid, label="task"];
52->64 [style = solid, label="i"];
37->17 [style = bold, label=""];
28->68 [style = bold, label=""];
30->37 [style = bold, label=""];
48->8 [style = bold, label=""];
15->18 [style = bold, label=""];
52->56 [style = solid, label="i"];
2->13 [style = bold, label=""];
14->54 [style = bold, label=""];
30->17 [style = solid, label="desc6"];
68->33 [style = solid, label="task"];
0->14 [style = solid, label="currentOffsets"];
67->50 [style = bold, label=""];
12->4 [style = bold, label=""];
6->17 [style = solid, label="desc4"];
61->47 [style = bold, label=""];
18->28 [style = dotted, label="true"];
38->63 [style = bold, label=""];
21->32 [style = bold, label=""];
4->10 [style = solid, label="task"];
46->45 [style = bold, label=""];
55->62 [style = solid, label="nextOffsets"];
30->22 [style = solid, label="desc6"];
30->38 [style = solid, label="desc2"];
5->27 [style = bold, label=""];
33->22 [style = solid, label="desc1"];
35->13 [style = bold, label=""];
0->51 [style = solid, label="currentOffsets"];
40->4 [style = solid, label="consumerProps"];
50->53 [style = bold, label=""];
37->5 [style = solid, label="desc3"];
62->21 [style = bold, label=""];
26->67 [style = solid, label="desc5"];
}
