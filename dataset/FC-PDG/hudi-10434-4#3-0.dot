digraph {
6 [style = filled, label = "assertTrue(sourceContext.splits.stream().noneMatch(null),\"No instants should have range limit\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "runAsync(sourceContext,function)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "function.close()@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "StreamReadMonitoringFunction function = TestUtils.getMonitorFunc(conf)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(latch.await(WAIT_TIME_MILLIS,TimeUnit.MILLISECONDS),\"Should finish splits generation\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "conf.setString(FlinkOptions.READ_STREAMING_START_COMMIT,FlinkOptions.START_COMMIT_EARLIEST)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertThat(\"Should produce the expected splits\",sourceContext.getPartitionPaths(),is(\"par1,par2,par3,par4\"))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testConsumeFromLatestCommit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TestData.writeData(TestData.DATA_SET_INSERT,conf)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(sourceContext.splits.stream().allMatch(null),\"All the splits should be with specified instant time\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String specifiedCommit = TestUtils.getLatestCommit(tempFile.getAbsolutePath())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "CollectingSourceContext sourceContext = new CollectingSourceContext(latch)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(sourceContext.splits.stream().allMatch(null),\"All the splits should be with latestCommit instant time\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "TestData.writeData(TestData.DATA_SET_UPDATE_INSERT,conf)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(sourceContext.splits.stream().allMatch(null),\"All the instants should have range limit\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "harness.open()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testConsumeFromEarliestCommit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "CountDownLatch latch = new CountDownLatch(4)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "String latestCommit = TestUtils.getLatestCommit(tempFile.getAbsolutePath())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testConsumeFromEarliestCommit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "function.close()@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "harness.setup()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "conf.setString(FlinkOptions.READ_START_COMMIT,FlinkOptions.START_COMMIT_EARLIEST)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14->16 [style = bold, label=""];
6->3 [style = bold, label=""];
15->2 [style = bold, label=""];
15->16 [style = dashed, label="0"];
10->1 [style = solid, label="sourceContext"];
9->0 [style = bold, label=""];
0->13 [style = bold, label=""];
21->0 [style = bold, label=""];
22->19 [style = bold, label=""];
7->10 [style = bold, label=""];
8->18 [style = bold, label=""];
19->20 [style = bold, label=""];
11->4 [style = bold, label=""];
8->6 [style = bold, label=""];
7->10 [style = solid, label="latch"];
16->2 [style = bold, label=""];
4->7 [style = bold, label=""];
2->1 [style = solid, label="function"];
6->18 [style = dashed, label="0"];
3->5 [style = bold, label=""];
18->22 [style = bold, label=""];
17->0 [style = bold, label=""];
12->8 [style = bold, label=""];
1->12 [style = bold, label=""];
14->15 [style = bold, label=""];
10->1 [style = bold, label=""];
13->14 [style = bold, label=""];
2->11 [style = bold, label=""];
13->2 [style = bold, label=""];
}
