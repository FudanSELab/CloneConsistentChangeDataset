digraph {
2 [style = filled, label = "s_logger.info(\"Running test for new CPVM creation\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Mockito.when(consoleProxyManagerImplMock.assignProxyFromStoppedPool(Mockito.anyLong())).thenReturn(null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Mockito.when(cpvmManager.startNew(Mockito.anyLong())).thenReturn(proxyVO)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Mockito.when(cpvmManager.assignProxyFromStoppedPool(Mockito.anyLong())).thenReturn(null)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Mockito.when(globalLock.unlock()).thenReturn(true)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "cpvmManager.expandPool(new Long(1),new Object())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Mockito.when(consoleProxyManagerImplMock.startNew(Mockito.anyLong())).thenReturn(consoleProxyVOMock)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Mockito.when(globalLockMock.unlock()).thenReturn(true)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Mockito.when(cpvmManager.assignProxyFromStoppedPool(Mockito.anyLong())).thenReturn(proxyVO)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testNewCPVMCreation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Mockito.when(consoleProxyManagerImplMock.startProxy(Mockito.anyLong(),Mockito.anyBoolean())).thenReturn(consoleProxyVOMock)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "cpvmManager.expandPool(new Long(1),new Object())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testNewCPVMCreation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "testExistingCPVMStart['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "s_logger.info(\"Running test for existing CPVM start\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Mockito.when(cpvmManager.startProxy(Mockito.anyLong(),Mockito.anyBoolean())).thenReturn(proxyVO)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "consoleProxyManagerImplMock.expandPool(new Long(1),new Object())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Mockito.when(globalLockMock.lock(Mockito.anyInt())).thenReturn(true)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Mockito.when(cpvmManager.startProxy(Mockito.anyLong(),Mockito.anyBoolean())).thenReturn(proxyVO)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Mockito.when(globalLock.lock(Mockito.anyInt())).thenReturn(true)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->3 [style = bold, label=""];
16->15 [style = bold, label=""];
1->4 [style = bold, label=""];
2->19 [style = dashed, label="0"];
10->14 [style = bold, label=""];
18->19 [style = bold, label=""];
1->9 [style = dashed, label="0"];
9->10 [style = bold, label=""];
11->9 [style = bold, label=""];
4->0 [style = bold, label=""];
19->16 [style = bold, label=""];
6->2 [style = bold, label=""];
5->16 [style = dashed, label="0"];
0->14 [style = dashed, label="0"];
5->1 [style = bold, label=""];
15->17 [style = bold, label=""];
5->11 [style = dashed, label="0"];
3->7 [style = bold, label=""];
7->12 [style = dashed, label="0"];
3->8 [style = dashed, label="0"];
14->8 [style = bold, label=""];
4->10 [style = dashed, label="0"];
2->11 [style = bold, label=""];
8->12 [style = bold, label=""];
2->5 [style = bold, label=""];
13->2 [style = bold, label=""];
}
