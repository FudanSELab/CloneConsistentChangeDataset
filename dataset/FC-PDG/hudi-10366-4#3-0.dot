digraph {
12 [style = filled, label = "Assertions.fail()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assertions.assertTrue(lockProvider.acquireLock(lockConfiguration.getConfig().getLong(LOCK_ACQUIRE_WAIT_TIMEOUT_MS_PROP),TimeUnit.MILLISECONDS,lockComponent))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assertions.assertTrue(lockProvider.acquireLock(lockConfiguration.getConfig().getLong(LOCK_ACQUIRE_WAIT_TIMEOUT_MS_PROP_KEY),TimeUnit.MILLISECONDS,lockComponent))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "lockProvider.unlock()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assertions.assertTrue(lockProvider.acquireLock(lockConfiguration.getConfig().getLong(LOCK_ACQUIRE_WAIT_TIMEOUT_MS_PROP),TimeUnit.MILLISECONDS,lockComponent))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testUnlock['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "lockComponent.setOperationType(DataOperationType.NO_TXN)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "HiveMetastoreBasedLockProvider lockProvider = new HiveMetastoreBasedLockProvider(lockConfiguration,hiveConf())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Exception e@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assertions.assertTrue(lockProvider.acquireLock(lockConfiguration.getConfig().getLong(LOCK_ACQUIRE_WAIT_TIMEOUT_MS_PROP_KEY),TimeUnit.MILLISECONDS,lockComponent))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "{}@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "lockProvider.close()@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testAcquireLock['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assertions.assertTrue(lockProvider.acquireLock(lockConfiguration.getConfig().getLong(LOCK_ACQUIRE_WAIT_TIMEOUT_MS_PROP),TimeUnit.MILLISECONDS,lockComponent))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testUnlock['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2->6 [style = bold, label=""];
6->0 [style = bold, label=""];
12->4 [style = bold, label=""];
0->9 [style = bold, label=""];
7->6 [style = bold, label=""];
14->4 [style = bold, label=""];
3->11 [style = bold, label=""];
1->8 [style = dashed, label="0"];
4->8 [style = bold, label=""];
0->3 [style = bold, label=""];
11->12 [style = bold, label=""];
8->5 [style = bold, label=""];
13->14 [style = bold, label=""];
10->6 [style = bold, label=""];
9->4 [style = bold, label=""];
3->4 [style = bold, label=""];
3->9 [style = dashed, label="0"];
4->1 [style = bold, label=""];
1->5 [style = bold, label=""];
}
