digraph {
9 [style = filled, label = "Assert.assertTrue(jobDir.mkdirs())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EmbeddedGobblin embeddedGobblin = TestCompactionTaskUtils.createEmbeddedGobblinCompactionJob(\"basic\",basePath.getAbsolutePath()).setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,.getName()).setConfiguration(COMPACTION_OUTPUT_EXTENSION,extensionName).setConfiguration(ORC_MAPPER_SHUFFLE_KEY_SCHEMA,\"struct<k:int>\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertTrue(statuses.size() == 1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "createTestingData(jobDir)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(result.get(3).getFieldValue(\"j\"),new IntWritable(5))@@@40@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "JobExecutionResult execution = embeddedGobblin_nondedup.run()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "File jobDir = new File(basePath,minutelyPath)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"basic\",basePath.getAbsolutePath().toString()).setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,.getName()).setConfiguration(COMPACTION_OUTPUT_EXTENSION,extensionName).setConfiguration(ORC_MAPPER_SHUFFLE_KEY_SCHEMA,\"struct<k:int>\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(result.get(1).getFieldValue(\"i\"),new IntWritable(2))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EmbeddedGobblin embeddedGobblin_nondedup = createEmbeddedGobblin(\"basic\",basePath.getAbsolutePath().toString()).setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,.getName()).setConfiguration(COMPACTION_OUTPUT_EXTENSION,\"orc\").setConfiguration(COMPACTION_SHOULD_DEDUPLICATE,\"false\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "String hourlyPath = \"Identity/MemberAccount_2/hourly/2017/04/03/10/\"@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(result.get(1).getFieldValue(\"j\"),new IntWritable(2))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "basicTestWithShuffleKeySpecified['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Assert.assertTrue(statuses.size() == 1)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "File basePath = Files.createTempDir()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String hourlyPath = \"Identity/MemberAccount/hourly/2017/04/03/10/\"@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(result.get(2).getFieldValue(\"j\"),new IntWritable(3))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "result.sort(new Comparator<OrcStruct>(){@Override public int compare(OrcStruct o1,OrcStruct o2){return o1.compareTo(o2)}})@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(result.get(2).getFieldValue(\"i\"),new IntWritable(2))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "List<OrcStruct> result = readOrcFile(statuses.get(0).getPath())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(result.get(0).getFieldValue(\"i\"),new IntWritable(1))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<OrcStruct> result = readOrcFile(statuses.get(0).getPath())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "reloadFolder(statuses,outputDir,fs)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(result.get(1).getFieldValue(\"j\"),new IntWritable(3))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "statuses.add(status)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(result.get(0).getFieldValue(\"j\"),new IntWritable(2))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "basePath.deleteOnExit()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(result.get(1).getFieldValue(\"i\"),new IntWritable(1))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testNonDedup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "File outputDir = new File(basePath,hourlyPath)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(result.get(0).getFieldValue(\"j\"),new IntWritable(2))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "JobExecutionResult execution = embeddedGobblin.run()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(result.get(0).getFieldValue(\"i\"),new IntWritable(1))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "FileSystem fs = FileSystem.getLocal(new Configuration())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(result.size(),3)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "basicTestWithShuffleKeySpecified['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "String minutelyPath = \"Identity/MemberAccount_2/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<FileStatus> statuses = new ArrayList<>()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(result.get(3).getFieldValue(\"i\"),new IntWritable(4))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(result.size(),4)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String minutelyPath = \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(execution.isSuccessful())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39->37 [style = bold, label=""];
6->3 [style = bold, label=""];
8->13 [style = solid, label="statuses"];
24->12 [style = bold, label=""];
15->10 [style = bold, label=""];
35->27 [style = bold, label=""];
17->1 [style = bold, label=""];
6->2 [style = solid, label="hourlyPath"];
25->22 [style = bold, label=""];
19->12 [style = bold, label=""];
10->14 [style = bold, label=""];
4->6 [style = bold, label=""];
36->3 [style = solid, label="minutelyPath"];
2->13 [style = solid, label="outputDir"];
1->15 [style = bold, label=""];
16->24 [style = bold, label=""];
12->32 [style = dashed, label="0"];
36->31 [style = bold, label=""];
30->26 [style = bold, label=""];
12->11 [style = bold, label=""];
22->3 [style = solid, label="basePath"];
6->31 [style = dashed, label="0"];
33->41 [style = bold, label=""];
0->21 [style = bold, label=""];
3->16 [style = solid, label="jobDir"];
16->19 [style = bold, label=""];
7->8 [style = bold, label=""];
8->40 [style = bold, label=""];
11->2 [style = bold, label=""];
9->16 [style = bold, label=""];
40->23 [style = bold, label=""];
20->4 [style = bold, label=""];
28->32 [style = bold, label=""];
31->2 [style = solid, label="hourlyPath"];
4->3 [style = solid, label="minutelyPath"];
3->9 [style = bold, label=""];
13->17 [style = bold, label=""];
41->30 [style = bold, label=""];
16->28 [style = bold, label=""];
14->0 [style = bold, label=""];
22->20 [style = bold, label=""];
18->39 [style = bold, label=""];
4->36 [style = dashed, label="0"];
21->41 [style = dashed, label="0"];
7->13 [style = solid, label="fs"];
37->34 [style = bold, label=""];
0->33 [style = dashed, label="0"];
26->35 [style = bold, label=""];
23->30 [style = dashed, label="0"];
19->24 [style = dashed, label="0"];
15->39 [style = dashed, label="0"];
2->7 [style = bold, label=""];
34->38 [style = bold, label=""];
31->3 [style = bold, label=""];
29->22 [style = bold, label=""];
38->33 [style = bold, label=""];
32->11 [style = bold, label=""];
5->22 [style = bold, label=""];
23->18 [style = bold, label=""];
19->28 [style = dashed, label="0"];
20->36 [style = bold, label=""];
18->26 [style = dashed, label="0"];
8->13 [style = bold, label=""];
22->2 [style = solid, label="basePath"];
21->23 [style = bold, label=""];
}
