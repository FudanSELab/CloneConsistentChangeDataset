digraph {
14 [style = filled, label = "List<RuntimeCacheElement> regions = client.list(filter).getResult()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "List<CacheElement> regions = client.list(filter).getResult()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(regions.get(0).getId()).isEqualTo(\"customers2\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "RuntimeCacheElement region = (RuntimeCacheElement)CacheElement.findElement(regions,\"customers1\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "listGroup2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(regions.get(0).getConfigGroup()).isEqualTo(\"group2\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(regions.get(0).getGroup()).isEqualTo(\"group2\")@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group1\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "region = (RuntimeCacheElement)CacheElement.findElement(regions,\"customers2\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertThat(regions.get(0).getGroup()).isEqualTo(\"group1\")@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(regions.get(0).getConfigGroup()).isEqualTo(\"group1\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group1\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(regions.get(0).getId()).isEqualTo(\"customers1\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertThat(regions).hasSize(3)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "listGroup1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(regions).hasSize(1)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "region = (RuntimeCacheElement)CacheElement.findElement(regions,\"customers3\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "listGroup1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "filter.setGroup(\"group2\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "filter.setGroup(\"group1\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(region.getGroups()).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14->11 [style = solid, label="regions"];
19->18 [style = bold, label=""];
7->11 [style = bold, label=""];
20->17 [style = bold, label=""];
2->1 [style = bold, label=""];
1->3 [style = bold, label=""];
1->9 [style = dashed, label="0"];
6->0 [style = bold, label=""];
4->2 [style = bold, label=""];
9->10 [style = bold, label=""];
12->0 [style = bold, label=""];
2->8 [style = dashed, label="0"];
11->15 [style = bold, label=""];
3->5 [style = bold, label=""];
0->14 [style = bold, label=""];
5->17 [style = dashed, label="0"];
18->4 [style = bold, label=""];
10->13 [style = bold, label=""];
0->4 [style = bold, label=""];
13->7 [style = bold, label=""];
1->16 [style = dashed, label="0"];
3->20 [style = dashed, label="0"];
8->9 [style = bold, label=""];
0->18 [style = dashed, label="0"];
4->14 [style = dashed, label="0"];
14->8 [style = bold, label=""];
3->10 [style = dashed, label="0"];
14->9 [style = solid, label="regions"];
14->13 [style = solid, label="regions"];
16->20 [style = bold, label=""];
2->16 [style = bold, label=""];
}
