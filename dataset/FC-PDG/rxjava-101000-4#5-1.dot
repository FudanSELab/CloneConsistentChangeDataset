digraph {
3 [style = filled, label = "shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestSubscriber<String> outer = new TestSubscriber<String>(subscriber)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "TestObserver<String> outer = new TestObserver<String>(observer)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "fromSupplierFlowable.subscribeOn(Schedulers.computation()).subscribe(outer)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Supplier<String> func = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "observerLatch.await()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final CountDownLatch observerLatch = new CountDownLatch(1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "outer.cancel()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Observer<Object> observer = TestHelper.mockObserver()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "TestSubscriber<String> outer = new TestSubscriber<>(subscriber)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "fromSupplierObservable.subscribeOn(Schedulers.computation()).subscribe(outer)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final CountDownLatch funcLatch = new CountDownLatch(1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "verify(func).get()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(subscriber).onSubscribe(any())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Subscriber<String> subscriber = TestHelper.mockSubscriber()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verify(observer).onSubscribe(any())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "verifyNoMoreInteractions(subscriber)@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "funcLatch.countDown()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Completable fromSupplierObservable = Completable.fromSupplier(func)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "outer.dispose()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "verifyNoMoreInteractions(observer)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "when(func.get()).thenAnswer(new Answer<String>(){@Override public String answer(InvocationOnMock invocation){observerLatch.countDown()try {funcLatch.await()}catch (InterruptedException e) return \"should_not_be_delivered\"}})@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Flowable<String> fromSupplierFlowable = Flowable.fromSupplier(func)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
8->10 [style = bold, label=""];
1->4 [style = bold, label=""];
15->2 [style = bold, label=""];
23->17 [style = solid, label="observer"];
9->10 [style = solid, label="subscriber"];
24->2 [style = bold, label=""];
2->12 [style = solid, label="func"];
2->19 [style = solid, label="func"];
21->20 [style = solid, label="outer"];
18->17 [style = bold, label=""];
9->16 [style = solid, label="subscriber"];
14->19 [style = bold, label=""];
6->0 [style = bold, label=""];
1->21 [style = dashed, label="0"];
23->21 [style = solid, label="observer"];
12->9 [style = bold, label=""];
9->23 [style = dashed, label="0"];
9->16 [style = bold, label=""];
16->4 [style = solid, label="outer"];
9->1 [style = solid, label="subscriber"];
11->5 [style = bold, label=""];
21->20 [style = bold, label=""];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
23->21 [style = bold, label=""];
1->4 [style = solid, label="outer"];
12->19 [style = dashed, label="0"];
4->20 [style = dashed, label="0"];
1->16 [style = dashed, label="0"];
19->23 [style = bold, label=""];
14->12 [style = bold, label=""];
0->8 [style = bold, label=""];
10->17 [style = dashed, label="0"];
11->22 [style = bold, label=""];
0->18 [style = bold, label=""];
8->18 [style = dashed, label="0"];
2->7 [style = bold, label=""];
16->4 [style = bold, label=""];
9->1 [style = bold, label=""];
4->11 [style = bold, label=""];
13->14 [style = bold, label=""];
22->6 [style = bold, label=""];
20->11 [style = bold, label=""];
5->22 [style = dashed, label="0"];
}
