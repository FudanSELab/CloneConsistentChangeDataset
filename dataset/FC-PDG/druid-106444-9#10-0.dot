digraph {
14 [style = filled, label = "QueryRunner<Row> mergeRunner = factory.getToolchest().mergeResults(runner)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query),context),\"no-limit\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ResponseContext context = ResponseContext.createEmpty()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new DoubleSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(\"idx\",OrderByColumnSpec.Direction.DESCENDING).addOrderByColumn(\"alias\",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "QueryRunner<Row> mergeRunner = factory.getToolchest().mergeResults(runner)@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ResponseContext context = ResponseContext.createEmpty()@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query),context),\"no-limit\")@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"automotive\",\"rows\",2L,\"idx\",269L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"entertainment\",\"rows\",2L,\"idx\",319L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health\",\"rows\",2L,\"idx\",216L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news\",\"rows\",2L,\"idx\",221L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"technology\",\"rows\",2L,\"idx\",177L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"travel\",\"rows\",2L,\"idx\",243L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testGroupByOrderLimitNumeric['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testGroupByWithOrderLimit3['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build()),context),\"limited\")@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(new OrderByColumnSpec(\"rows\",OrderByColumnSpec.Direction.DESCENDING,StringComparators.NUMERIC)).addOrderByColumn(new OrderByColumnSpec(\"alias\",OrderByColumnSpec.Direction.ASCENDING,StringComparators.NUMERIC)).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "QueryRunner<ResultRow> mergeRunner = factory.getToolchest().mergeResults(runner)@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final GroupByQuery query = builder.build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build()),context),\"limited\")@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "List<ResultRow> expectedResults = makeRows(query,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a433eb,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a433f2,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a433f9,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a43400,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a43407,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a4340e,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a43415,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a4341c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a43423,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a4342a)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testGroupByWithOrderLimit3['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query)),\"no-limit\")@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "GroupByQuery query = builder.build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<Row> expectedResults = GroupByQueryRunnerTestHelper.createExpectedRows(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a43327,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a4332e,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a43335,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a4333c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a43343,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a4334a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a43351,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a43358,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a4335f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a43366)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->5 [style = bold, label=""];
8->10 [style = bold, label=""];
20->13 [style = bold, label=""];
9->11 [style = bold, label=""];
1->9 [style = solid, label="query"];
16->13 [style = solid, label="expectedResults"];
7->4 [style = solid, label="context"];
9->10 [style = solid, label="expectedResults"];
0->19 [style = dashed, label="0"];
1->15 [style = dashed, label="0"];
2->3 [style = bold, label=""];
17->13 [style = solid, label="context"];
18->19 [style = bold, label=""];
5->9 [style = dashed, label="0"];
6->0 [style = bold, label=""];
16->17 [style = bold, label=""];
5->3 [style = solid, label="expectedResults"];
15->16 [style = bold, label=""];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
1->8 [style = solid, label="query"];
15->20 [style = solid, label="query"];
1->9 [style = bold, label=""];
5->16 [style = dashed, label="0"];
7->3 [style = solid, label="context"];
17->14 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
5->4 [style = solid, label="expectedResults"];
16->20 [style = solid, label="expectedResults"];
5->7 [style = bold, label=""];
11->8 [style = bold, label=""];
3->10 [style = dashed, label="0"];
9->8 [style = solid, label="expectedResults"];
19->15 [style = bold, label=""];
17->20 [style = solid, label="context"];
1->3 [style = solid, label="query"];
14->20 [style = bold, label=""];
}
