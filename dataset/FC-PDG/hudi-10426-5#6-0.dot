digraph {
16 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event2)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "expected.put(\"par1\",\"(\" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,4,par1(\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "testInsertAllowsDuplication['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(\"The operator expect to send an event\",event2,instanceOf())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "TestData.checkWrittenAllData(tempFile,expected,1)@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event1)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testInsertWithDeduplication['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Map<String,String> expected = new HashMap<>()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final OperatorEvent event4 = funcWrapper.getNextEvent()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE,0.0006)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "conf.setBoolean(FlinkOptions.INSERT_DEDUP,false)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "checkInflightInstant(funcWrapper.getWriteClient())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Map<String,List<HoodieRecord>> dataBuffer = funcWrapper.getDataBuffer()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "conf.setString(FlinkOptions.OPERATION,WriteOperationType.INSERT.value())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(\"All data should be flushed out\",dataBuffer.size(),is(0))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "funcWrapper.openFunction()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS,true)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "funcWrapper.invoke(rowData)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "funcWrapper.invoke(rowData)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(\"All data should be flushed out\",dataBuffer.size(),is(0))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "TestData.checkWrittenAllData(tempFile,expected,1)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "String instant = funcWrapper.getWriteClient().getLastPendingInstant(getTableType())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expected.put(\"par1\",\"(\" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,4,par1, \" + \"id1,par1,id1,Danny,23,4,par1(\")@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event4)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "funcWrapper.invoke(rowData)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE,0.0008)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "checkWrittenData(tempFile,expected,1)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event3)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(\"Should have 1 data bucket\",dataBuffer.size(),is(1))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final OperatorEvent event3 = funcWrapper.getNextEvent()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "funcWrapper.checkpointFunction(2)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertThat(\"3 records expect to flush out as a mini-batch\",dataBuffer.values().stream().findFirst().map(null).orElse(-1),is(3))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertThat(\"2 records expect to flush out as a mini-batch\",dataBuffer.values().stream().findFirst().map(null).orElse(-1),is(2))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "checkInflightInstant(funcWrapper.getWriteClient())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Map<String,List<HoodieRecord>> dataBuffer = funcWrapper.getDataBuffer()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "funcWrapper.invoke(rowData)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "funcWrapper.checkpointFunction(2)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final OperatorEvent event1 = funcWrapper.getNextEvent()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testInsertWithDeduplication['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final OperatorEvent event2 = funcWrapper.getNextEvent()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->33 [style = bold, label=""];
35->31 [style = bold, label=""];
21->6 [style = solid, label="event2"];
29->5 [style = bold, label=""];
30->13 [style = bold, label=""];
24->13 [style = solid, label="event4"];
12->28 [style = bold, label=""];
9->42 [style = bold, label=""];
42->46 [style = bold, label=""];
30->2 [style = solid, label="event4"];
23->45 [style = bold, label=""];
46->28 [style = bold, label=""];
47->18 [style = bold, label=""];
20->9 [style = solid, label="instant"];
24->13 [style = solid, label="event3"];
44->29 [style = bold, label=""];
31->0 [style = bold, label=""];
1->43 [style = bold, label=""];
37->41 [style = bold, label=""];
26->25 [style = bold, label=""];
21->8 [style = solid, label="event2"];
4->19 [style = bold, label=""];
28->30 [style = solid, label="event3"];
21->8 [style = bold, label=""];
3->11 [style = bold, label=""];
23->45 [style = dashed, label="0"];
20->32 [style = bold, label=""];
26->33 [style = dashed, label="0"];
40->9 [style = bold, label=""];
32->7 [style = bold, label=""];
5->18 [style = bold, label=""];
25->29 [style = bold, label=""];
9->10 [style = bold, label=""];
21->6 [style = solid, label="event1"];
39->11 [style = bold, label=""];
11->36 [style = bold, label=""];
38->1 [style = bold, label=""];
8->22 [style = bold, label=""];
24->30 [style = bold, label=""];
27->37 [style = dashed, label="0"];
23->40 [style = solid, label="expected"];
11->31 [style = bold, label=""];
27->37 [style = bold, label=""];
29->47 [style = dashed, label="0"];
7->27 [style = solid, label="expected"];
31->36 [style = dashed, label="0"];
33->25 [style = bold, label=""];
32->42 [style = solid, label="instant"];
6->16 [style = bold, label=""];
15->9 [style = bold, label=""];
0->1 [style = bold, label=""];
19->26 [style = bold, label=""];
10->12 [style = bold, label=""];
7->23 [style = bold, label=""];
17->40 [style = dashed, label="0"];
17->15 [style = bold, label=""];
13->2 [style = bold, label=""];
8->16 [style = solid, label="event2"];
28->24 [style = bold, label=""];
2->27 [style = bold, label=""];
23->17 [style = bold, label=""];
1->14 [style = bold, label=""];
23->41 [style = solid, label="expected"];
34->35 [style = bold, label=""];
18->21 [style = bold, label=""];
36->38 [style = bold, label=""];
18->22 [style = solid, label="event1"];
16->20 [style = bold, label=""];
43->44 [style = bold, label=""];
7->17 [style = solid, label="expected"];
8->22 [style = solid, label="event2"];
11->35 [style = dashed, label="0"];
45->40 [style = bold, label=""];
22->6 [style = bold, label=""];
14->4 [style = bold, label=""];
29->47 [style = bold, label=""];
}
