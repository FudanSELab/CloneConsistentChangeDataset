digraph {
3 [style = filled, label = "Assert.assertEquals(4,scheduler.getTotalAcquired().get())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testJoinOnGroupByOnUnionOfTables['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(4,scheduler.getTotalReleased().get())@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expectedException.expectMessage(\"Cannot handle subquery structure for dataSource\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final GroupByQuery query = (GroupByQuery)GroupByQuery.builder().setDataSource(JoinDataSource.create(new TableDataSource(FOO),new TableDataSource(BAR),\"j.\",\"\"j.s\" == \"s\"\",JoinType.INNER,ExprMacroTable.nil())).setGranularity(Granularities.ALL).setInterval(Intervals.ONLY_ETERNITY).setDimensions(DefaultDimensionSpec.of(\"s\"),DefaultDimensionSpec.of(\"j.s\")).setAggregatorSpecs(new CountAggregatorFactory(\"cnt\")).build().withId(UUID.randomUUID().toString())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(4,scheduler.getTotalRun().get())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final GroupByQuery query = (GroupByQuery)GroupByQuery.builder().setDataSource(JoinDataSource.create(unionDataSource,new QueryDataSource(subquery),\"j.\",\"\"j.s\" == \"s\"\",JoinType.INNER,ExprMacroTable.nil())).setGranularity(Granularities.ALL).setInterval(Intervals.ONLY_ETERNITY).setDimensions(DefaultDimensionSpec.of(\"s\"),DefaultDimensionSpec.of(\"j.s\")).setAggregatorSpecs(new CountAggregatorFactory(\"cnt\")).build().withId(UUID.randomUUID().toString())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "final GroupByQuery query = (GroupByQuery)GroupByQuery.builder().setDataSource(JoinDataSource.create(unionDataSource,new QueryDataSource(subquery),\"j.\",\"\"j.s\" == \"s\"\",JoinType.INNER,null,ExprMacroTable.nil())).setGranularity(Granularities.ALL).setInterval(Intervals.ONLY_ETERNITY).setDimensions(DefaultDimensionSpec.of(\"s\"),DefaultDimensionSpec.of(\"j.s\")).setAggregatorSpecs(new CountAggregatorFactory(\"cnt\")).build().withId(UUID.randomUUID().toString())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(4,scheduler.getTotalPrioritizedAndLaned().get())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testJoinOnTableErrorCantInlineTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "expectedException.expect()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testQuery(query,ImmutableList.of(ExpectedQuery.cluster(subquery.withDataSource(subquery.getDataSource().getChildren().get(0))),ExpectedQuery.cluster(subquery.withDataSource(subquery.getDataSource().getChildren().get(1))),ExpectedQuery.cluster(query.withDataSource(query.getDataSource().withChildren(ImmutableList.of(unionDataSource.getChildren().get(0),InlineDataSource.fromIterable(ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@90adca),RowSignature.builder().add(\"s\",ValueType.STRING).build()))))),ExpectedQuery.cluster(query.withDataSource(query.getDataSource().withChildren(ImmutableList.of(unionDataSource.getChildren().get(1),InlineDataSource.fromIterable(ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@90adf3),RowSignature.builder().add(\"s\",ValueType.STRING).build())))))),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@90ae05))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testQuery(query,ImmutableList.of(),ImmutableList.of())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final GroupByQuery subquery = GroupByQuery.builder().setDataSource(unionDataSource).setGranularity(Granularities.ALL).setInterval(Collections.singletonList(INTERVAL)).setDimensions(DefaultDimensionSpec.of(\"s\")).setDimFilter(new SelectorDimFilter(\"s\",\"y\",null)).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final UnionDataSource unionDataSource = new UnionDataSource(ImmutableList.of(new TableDataSource(FOO),new TableDataSource(BAR)))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testJoinOnGroupByOnUnionOfTables['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8->9 [style = dashed, label="0"];
12->14 [style = bold, label=""];
4->3 [style = bold, label=""];
3->6 [style = bold, label=""];
1->9 [style = bold, label=""];
15->12 [style = bold, label=""];
13->15 [style = bold, label=""];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
7->13 [style = dashed, label="0"];
9->2 [style = solid, label="query"];
8->2 [style = bold, label=""];
11->13 [style = bold, label=""];
9->2 [style = bold, label=""];
10->7 [style = bold, label=""];
5->4 [style = bold, label=""];
13->14 [style = solid, label="query"];
2->5 [style = bold, label=""];
0->7 [style = bold, label=""];
8->2 [style = solid, label="query"];
}
