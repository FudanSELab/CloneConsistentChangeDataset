digraph {
14 [style = filled, label = "shouldNotAssignWarmupAndStandbyToTheSameClient['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final ClientState client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3),statefulTasks)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final Set<TaskId> statefulTasks = mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(probingRebalanceNeeded,is(true))@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "shouldNotAssignMoreThanMaxWarmupReplicas['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "final boolean probingRebalanceNeeded = new HighAvailabilityTaskAssignor().assign(clientStates,allTasks,statefulTasks,new AssignmentConfigs(100L,1,1,0,60 * 1000L))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertThat(client1.activeTasks(),equalTo(mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final boolean probingRebalanceNeeded = new HighAvailabilityTaskAssignor().assign(clientStates,allTasks,statefulTasks,new AssignmentConfigs(100L,1,1,1,60 * 1000L))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(client2.standbyTaskCount(),equalTo(1))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "shouldNotAssignMoreThanMaxWarmupReplicas['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final ClientState client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS,statefulTasks)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Map<UUID,ClientState> clientStates = getClientStatesMap(client1,client2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertHasNoActiveTasks(client2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertHasNoStandbyTasks(client1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(client2.standbyTasks(),equalTo(mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final boolean probingRebalanceNeeded = new HighAvailabilityTaskAssignor().assign(clientStates,allTasks,statefulTasks,new AssignmentConfigs(100L,1,0,60 * 1000L))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final Set<TaskId> allTasks = mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->8 [style = solid, label="client2"];
8->16 [style = bold, label=""];
15->10 [style = bold, label=""];
8->13 [style = solid, label="clientStates"];
16->3 [style = solid, label="probingRebalanceNeeded"];
11->10 [style = solid, label="client1"];
13->3 [style = solid, label="probingRebalanceNeeded"];
1->15 [style = dashed, label="0"];
0->16 [style = dashed, label="0"];
2->9 [style = solid, label="client2"];
5->15 [style = bold, label=""];
8->16 [style = solid, label="clientStates"];
6->0 [style = solid, label="statefulTasks"];
6->11 [style = solid, label="statefulTasks"];
12->7 [style = bold, label=""];
11->2 [style = bold, label=""];
4->7 [style = bold, label=""];
14->7 [style = bold, label=""];
6->2 [style = solid, label="statefulTasks"];
8->0 [style = bold, label=""];
5->1 [style = bold, label=""];
7->13 [style = solid, label="allTasks"];
7->0 [style = solid, label="allTasks"];
6->13 [style = solid, label="statefulTasks"];
8->0 [style = solid, label="clientStates"];
6->11 [style = bold, label=""];
0->13 [style = dashed, label="0"];
7->6 [style = bold, label=""];
13->5 [style = bold, label=""];
16->5 [style = bold, label=""];
9->3 [style = bold, label=""];
7->16 [style = solid, label="allTasks"];
10->9 [style = bold, label=""];
0->3 [style = solid, label="probingRebalanceNeeded"];
1->10 [style = bold, label=""];
11->8 [style = solid, label="client1"];
8->13 [style = bold, label=""];
2->8 [style = bold, label=""];
0->5 [style = bold, label=""];
6->16 [style = solid, label="statefulTasks"];
}
