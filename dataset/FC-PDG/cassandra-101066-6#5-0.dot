digraph {
32 [style = filled, label = "final Iterator<Map.Entry<Long,LongSet>> listIterator = tokenMap.entrySet().iterator()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final RandomAccessReader reader = RandomAccessReader.open(treeFile)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final File treeFile = File.createTempFile(\"token-tree-get-test\",\"tt\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final long minToken@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "treeFile.deleteOnExit()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "boolean isStatic@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "buildSerializeAndIterate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final SortedMap<Long,LongSet> toks = new TreeMap<Long,LongSet>(){}@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "writer.sync()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "SortedMap<Long,LongSet> tokenMap@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final long minToken@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "builder.write(writer)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertFalse(\"list iterator not finished\",listIterator.hasNext())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(listNext.getKey(),treeNext.get())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "{FileUtils.closeQuietly(reader)}@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "tokenIterator.hasNext() && listIterator.hasNext()@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final TokenTreeBuilder builder = isStatic? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)): new DynamicTokenTreeBuilder(toks)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "reader = RandomAccessReader.open(treeFile)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "return new TokenTree(new MappedBuffer(reader))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final File treeFile = File.createTempFile(\"token-tree-iterate-test1\",\"tt\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "TokenTreeBuilder builder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(convert(listNext.getValue()),convert(treeNext))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final long maxToken@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "RandomAccessReader reader = null@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final long maxToken@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "boolean isStatic@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "generateTree['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(\"token iterator not finished\",tokenIterator.hasNext())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "builder.finish()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Token treeNext = tokenIterator.next()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Map.Entry<Long,LongSet> listNext = listIterator.next()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "generateTree['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "reader.close()@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final SortedMap<Long,KeyOffsets> toks = new TreeMap<Long,KeyOffsets>(){}@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8->30 [style = bold, label=""];
16->19 [style = dotted, label="true"];
18->6 [style = solid, label="isStatic"];
9->12 [style = dotted, label="true"];
9->0 [style = dotted, label="true"];
3->28 [style = dashed, label="0"];
33->4 [style = dotted, label="true"];
13->24 [style = bold, label=""];
17->6 [style = bold, label=""];
11->1 [style = bold, label=""];
35->20 [style = bold, label=""];
25->34 [style = dotted, label="true"];
26->29 [style = bold, label=""];
27->28 [style = bold, label=""];
8->3 [style = bold, label=""];
11->22 [style = dashed, label="0"];
20->32 [style = bold, label=""];
16->17 [style = bold, label=""];
9->10 [style = bold, label=""];
33->5 [style = bold, label=""];
3->1 [style = solid, label="treeFile"];
4->33 [style = bold, label=""];
31->4 [style = solid, label="treeNext"];
3->4 [style = bold, label=""];
10->6 [style = bold, label=""];
13->11 [style = bold, label=""];
32->33 [style = bold, label=""];
9->14 [style = dotted, label="true"];
33->30 [style = dotted, label="true"];
1->7 [style = solid, label="reader"];
7->5 [style = dashed, label="0"];
14->6 [style = solid, label="isStatic"];
25->27 [style = bold, label=""];
21->26 [style = bold, label=""];
28->21 [style = bold, label=""];
22->35 [style = solid, label="reader"];
30->4 [style = bold, label=""];
5->13 [style = bold, label=""];
10->6 [style = solid, label="toks"];
6->8 [style = bold, label=""];
28->22 [style = solid, label="treeFile"];
10->17 [style = dashed, label="0"];
33->31 [style = bold, label=""];
33->8 [style = dotted, label="true"];
14->19 [style = dashed, label="0"];
1->2 [style = bold, label=""];
25->23 [style = dotted, label="true"];
2->7 [style = bold, label=""];
29->22 [style = bold, label=""];
22->35 [style = bold, label=""];
1->2 [style = solid, label="reader"];
4->5 [style = bold, label=""];
31->8 [style = bold, label=""];
33->31 [style = dotted, label="true"];
17->6 [style = solid, label="toks"];
16->15 [style = dotted, label="true"];
16->18 [style = dotted, label="true"];
}
