digraph {
0 [style = filled, label = "Config cf = init().builder().binaryFormat(BinaryFormat.HEX).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertObject(cf.getBytes(\"foo\")).asJson().is(\"(98,97,114(\")@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Config cf = init().copy().binaryFormat(BinaryFormat.HEX).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testSpacedHex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Config cf = init().builder().binaryFormat(BinaryFormat.SPACED_HEX).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"62 61 72\",cf.get(\"foo\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "cf.set(\"foo\",\"bar\".getBytes(\"UTF-8\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testHex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testHex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"626172\",cf.get(\"foo\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->1 [style = bold, label=""];
4->8 [style = bold, label=""];
6->4 [style = bold, label=""];
4->3 [style = bold, label=""];
3->8 [style = dashed, label="0"];
2->0 [style = bold, label=""];
7->4 [style = bold, label=""];
5->6 [style = bold, label=""];
3->1 [style = bold, label=""];
9->7 [style = bold, label=""];
0->7 [style = dashed, label="0"];
0->4 [style = bold, label=""];
0->6 [style = dashed, label="0"];
}
