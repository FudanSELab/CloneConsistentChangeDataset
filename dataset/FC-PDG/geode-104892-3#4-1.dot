digraph {
36 [style = filled, label = "final boolean(( actualProjectionCallback = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10becb@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(expectedUnionCallback(i(,actualUnionCallback(i()@@@75@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "qs.createIndex(\"Status\",IndexType.FUNCTIONAL,\"status\",\"/pos\")@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "int i = 100@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "qs.createIndex(\"CreateTime\",IndexType.FUNCTIONAL,\"createTime\",\"/pos\")@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testInAndEqualityCombination['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final boolean(( actualUnionCallback = new boolean((((@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final boolean(( actualIntersectionCallback = new boolean((((@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "sr(i((0( = (SelectResults)q.execute()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "++i@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(expectedProjectionCallabck(i(,actualProjectionCallback(i()@@@79@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final boolean(( expectedUnionCallback = {false}@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i < 200@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "QueryObserverHolder.setInstance(new QueryObserverAdapter(){public void invokedQueryUtilsUnion(SelectResults r1,SelectResults r2){actualUnionCallback(i( = true}public void invokedQueryUtilsIntersection(SelectResults r1,SelectResults r2){actualIntersectionCallback(i( = true}public void beforeIndexLookup(Index index,int oper,Object key){actualIndexUsed(i( = trueindexesUsed.add(index)}public void beforeApplyingProjectionOnFilterEvaluatedResults(Object preProjectionApplied){actualProjectionCallback(i( = true}public void afterQueryEvaluation(Object result){++i}})@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testInAndEqualityCombination['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "String(( queries = new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10be56@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int i = 0@@@70@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "SelectResults(((( sr = new SelectResults((((((@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(expectedIntersectionCallback(i(,actualIntersectionCallback(i()@@@78@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "++i@@@72@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final List indexesUsed = new ArrayList()@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(expectedIndexUsed(i(,actualIndexUsed(i()@@@77@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "i < queries.length@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final boolean(( expectedIntersectionCallback = {false}@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertEquals(((Index)indexesUsed.iterator().next()).getName(),\"CreateTime\")@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ObjectType(( expectedTypes = new ObjectType((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10bef1@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "i < queries.length@@@71@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(expectedTypes(i(,sr(i((1(.getCollectionType().getElementType())@@@76@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "final boolean(( actualIndexUsed = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10bebb@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Query q = qs.newQuery(queries(i()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(((Index)indexesUsed.iterator().next()).getName(),\"PortFolioID\")@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "++i@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Region rgn = CacheUtils.getRegion(\"/pos\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "qs.createIndex(\"Type\",IndexType.FUNCTIONAL,\"\"type\"\",\"/pos\")@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Portfolio pf = new Portfolio(i)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testInAndRangeCombination['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final boolean(( expectedIndexUsed = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10beb3@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "pf.setCreateTime(10l)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "int i = 0@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(indexesUsed.size(),1)@@@81@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "QueryService qs = CacheUtils.getQueryService()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "rgn.put(\"\" + i,pf)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "sr(i((1( = (SelectResults)q.execute()@@@74@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "qs.createIndex(\"PortFolioID\",IndexType.FUNCTIONAL,\"ID\",\"/pos\")@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "CacheUtils.compareResultsOfWithAndWithoutIndex(sr,this)@@@83@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Query q = qs.newQuery(queries(i()@@@73@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final boolean(( expectedProjectionCallabck = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10bec3@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->37 [style = bold, label=""];
21->42 [style = bold, label=""];
5->18 [style = dotted, label="true"];
41->8 [style = bold, label=""];
5->19 [style = dotted, label="true"];
31->18 [style = solid, label="actualIntersectionCallback"];
28->14 [style = bold, label=""];
35->26 [style = solid, label="queries"];
5->24 [style = dotted, label="true"];
12->10 [style = bold, label=""];
5->11 [style = dotted, label="true"];
16->42 [style = solid, label="sr"];
41->33 [style = solid, label="i"];
3->39 [style = bold, label=""];
17->42 [style = solid, label="sr"];
23->29 [style = dotted, label="true"];
35->1 [style = solid, label="queries"];
23->17 [style = dotted, label="true"];
31->11 [style = solid, label="actualUnionCallback"];
46->42 [style = bold, label=""];
15->34 [style = bold, label=""];
2->19 [style = solid, label="i"];
30->27 [style = bold, label=""];
34->33 [style = bold, label=""];
22->41 [style = bold, label=""];
18->19 [style = bold, label=""];
5->6 [style = dotted, label="true"];
29->23 [style = bold, label=""];
19->6 [style = bold, label=""];
33->13 [style = bold, label=""];
37->1 [style = solid, label="i"];
8->34 [style = dotted, label="true"];
43->46 [style = bold, label=""];
31->7 [style = solid, label="actualIndexUsed"];
1->17 [style = bold, label=""];
36->25 [style = bold, label=""];
23->1 [style = dotted, label="true"];
8->33 [style = dotted, label="true"];
5->7 [style = dotted, label="true"];
15->33 [style = solid, label="pf"];
41->8 [style = solid, label="i"];
5->26 [style = dotted, label="true"];
24->7 [style = bold, label=""];
2->24 [style = solid, label="i"];
2->5 [style = solid, label="i"];
37->23 [style = solid, label="i"];
14->4 [style = bold, label=""];
9->22 [style = bold, label=""];
21->46 [style = dashed, label="0"];
38->20 [style = bold, label=""];
8->15 [style = bold, label=""];
2->42 [style = solid, label="sr"];
17->23 [style = solid, label="i"];
31->0 [style = bold, label=""];
5->26 [style = bold, label=""];
8->15 [style = dotted, label="true"];
11->24 [style = bold, label=""];
2->18 [style = solid, label="i"];
3->7 [style = solid, label="expectedIndexUsed"];
8->35 [style = bold, label=""];
25->11 [style = solid, label="expectedUnionCallback"];
4->31 [style = bold, label=""];
32->9 [style = bold, label=""];
6->5 [style = bold, label=""];
2->11 [style = solid, label="i"];
40->36 [style = bold, label=""];
2->26 [style = solid, label="i"];
39->40 [style = bold, label=""];
31->19 [style = solid, label="actualProjectionCallback"];
7->18 [style = bold, label=""];
8->13 [style = dotted, label="true"];
44->9 [style = bold, label=""];
2->11 [style = bold, label=""];
45->9 [style = bold, label=""];
0->5 [style = bold, label=""];
5->2 [style = dotted, label="true"];
4->24 [style = solid, label="expectedTypes"];
2->7 [style = solid, label="i"];
43->21 [style = bold, label=""];
35->16 [style = bold, label=""];
10->28 [style = bold, label=""];
40->19 [style = solid, label="expectedProjectionCallabck"];
27->3 [style = bold, label=""];
0->26 [style = solid, label="i"];
37->23 [style = bold, label=""];
0->5 [style = solid, label="i"];
5->43 [style = bold, label=""];
26->2 [style = bold, label=""];
17->1 [style = solid, label="i"];
28->18 [style = solid, label="expectedIntersectionCallback"];
25->12 [style = bold, label=""];
23->38 [style = bold, label=""];
23->1 [style = bold, label=""];
41->15 [style = solid, label="i"];
13->8 [style = bold, label=""];
20->30 [style = bold, label=""];
17->29 [style = bold, label=""];
}
