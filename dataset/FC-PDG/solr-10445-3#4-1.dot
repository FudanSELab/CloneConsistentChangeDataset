digraph {
3 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<PreferenceRule> rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "params.set(\"routingPreference\",\"1\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "rlt.transform(replicas)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "replicas.sort(comparator)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node4\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"c1\",\"s1\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "replicaTypeAndReplicaBase['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "params.add(\"routingPreference\",\"0\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"node4\",replicas.get(1).getNodeName())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "params.add(ShardParams.SHARDS_PREFERENCE,rulesParam)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"node3\",replicas.get(3).getNodeName())@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(\"node4\",replicas.get(1).getNodeName())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(\"node3\",replicas.get(3).getNodeName())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node4\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "replicaTypeAndReplicaLocationTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\"@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"node4\",replicas.get(2).getNodeName())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ReplicaListTransformer rlt = generator.getReplicaListTransformer(params)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"node3\",replicas.get(3).getNodeName())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "rlt.transform(replicas)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(\"node2\",replicas.get(1).getNodeName())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "replicaTypeAndReplicaBase['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules,null)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->16 [style = bold, label=""];
25->28 [style = bold, label=""];
0->10 [style = solid, label="replicas"];
0->14 [style = solid, label="replicas"];
27->0 [style = bold, label=""];
20->9 [style = bold, label=""];
3->6 [style = solid, label="params"];
1->15 [style = bold, label=""];
16->6 [style = bold, label=""];
21->15 [style = bold, label=""];
3->5 [style = solid, label="params"];
0->1 [style = solid, label="rules"];
23->26 [style = bold, label=""];
14->19 [style = bold, label=""];
10->17 [style = bold, label=""];
1->21 [style = dashed, label="0"];
0->21 [style = bold, label=""];
19->2 [style = bold, label=""];
5->14 [style = bold, label=""];
1->30 [style = bold, label=""];
24->23 [style = bold, label=""];
30->29 [style = bold, label=""];
3->0 [style = bold, label=""];
15->16 [style = solid, label="rulesParam"];
11->1 [style = dashed, label="0"];
1->30 [style = solid, label="comparator"];
15->11 [style = bold, label=""];
0->1 [style = bold, label=""];
22->12 [style = bold, label=""];
6->10 [style = bold, label=""];
4->20 [style = bold, label=""];
9->5 [style = bold, label=""];
7->18 [style = bold, label=""];
17->13 [style = bold, label=""];
12->3 [style = bold, label=""];
15->0 [style = dashed, label="0"];
28->27 [style = bold, label=""];
2->7 [style = bold, label=""];
29->24 [style = bold, label=""];
8->12 [style = bold, label=""];
13->4 [style = bold, label=""];
}
