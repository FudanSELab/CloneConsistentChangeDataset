digraph {
6 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final byte(( bytes = new byte((((@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "return bytes@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "return map@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final int size = (int)offsetAndSize@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "getMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "getMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final UnsafeMapData map = new UnsafeMapData()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "getBinary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "return null@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertIndexIsValid(ordinal)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "return null@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "map.pointTo(baseObject,baseOffset + offset,size)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Platform.copyMemory(baseObject,baseOffset + offset,bytes,Platform.BYTE_ARRAY_OFFSET,size)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "return null@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final int size = getElementSize(offset,ordinal)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final int size = (int)offsetAndSize@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final int offset = getElementOffset(ordinal)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "offset < 0@@@5@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5->8 [style = bold, label=""];
22->25 [style = bold, label=""];
15->10 [style = bold, label=""];
1->4 [style = solid, label="map"];
12->7 [style = solid, label="offset"];
5->9 [style = bold, label=""];
18->23 [style = bold, label=""];
0->9 [style = solid, label="offset"];
6->20 [style = dashed, label="0"];
22->25 [style = solid, label="offsetAndSize"];
19->20 [style = dotted, label="true"];
6->0 [style = solid, label="ordinal"];
6->15 [style = solid, label="ordinal"];
6->9 [style = solid, label="ordinal"];
8->12 [style = dashed, label="0"];
0->7 [style = solid, label="offset"];
19->17 [style = bold, label=""];
7->4 [style = bold, label=""];
0->5 [style = solid, label="offset"];
17->22 [style = bold, label=""];
3->6 [style = dotted, label="true"];
2->17 [style = dashed, label="0"];
1->7 [style = bold, label=""];
21->18 [style = bold, label=""];
13->1 [style = bold, label=""];
0->10 [style = dashed, label="0"];
20->22 [style = solid, label="ordinal"];
6->10 [style = solid, label="ordinal"];
2->15 [style = dashed, label="0"];
10->12 [style = solid, label="offsetAndSize"];
17->16 [style = dotted, label="true"];
12->13 [style = bold, label=""];
25->24 [style = bold, label=""];
17->22 [style = dotted, label="false"];
2->0 [style = bold, label=""];
21->18 [style = solid, label="bytes"];
15->11 [style = bold, label=""];
3->2 [style = bold, label=""];
24->21 [style = bold, label=""];
21->23 [style = solid, label="bytes"];
17->21 [style = dotted, label="false"];
20->17 [style = solid, label="ordinal"];
11->10 [style = bold, label=""];
10->12 [style = bold, label=""];
17->25 [style = dotted, label="false"];
9->13 [style = dashed, label="0"];
10->13 [style = solid, label="offsetAndSize"];
6->2 [style = solid, label="ordinal"];
8->9 [style = bold, label=""];
22->24 [style = solid, label="offsetAndSize"];
15->11 [style = dotted, label="true"];
17->18 [style = dotted, label="false"];
13->7 [style = solid, label="size"];
25->18 [style = solid, label="offset"];
14->15 [style = bold, label=""];
5->8 [style = dotted, label="true"];
9->1 [style = bold, label=""];
17->23 [style = dotted, label="false"];
9->7 [style = solid, label="size"];
24->18 [style = solid, label="size"];
17->24 [style = dotted, label="false"];
17->16 [style = bold, label=""];
0->5 [style = bold, label=""];
14->6 [style = dotted, label="true"];
}
