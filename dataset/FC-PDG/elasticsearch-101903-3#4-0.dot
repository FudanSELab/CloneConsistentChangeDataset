digraph {
7 [style = filled, label = "IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state,IndicesOptions.lenientExpandOpen())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "MetaData.Builder mdBuilder = MetaData.builder().put(indexBuilder(\"testXXX\")).put(indexBuilder(\"testXYY\")).put(indexBuilder(\"testYYY\")).put(indexBuilder(\"kuku\"))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testX*\",\"testYYY\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testConvertWildcardsTests['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"*\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\",\"kuku\")))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testYYY\",\"testX*\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testXXX\",\"testYYY\"))),equalTo(newHashSet(\"testXXX\",\"testYYY\")))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "IndexNameExpressionResolver.WildcardExpressionResolver resolver = new IndexNameExpressionResolver.WildcardExpressionResolver()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"test*\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testXXX\",\"testYYY\"))),equalTo(newHashSet(\"testXXX\",\"testYYY\")))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testXXX\",\"-testXXX\"))),equalTo(newHashSet(\"testXXX\",\"-testXXX\")))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testXXX\",\"testY*\"))),equalTo(newHashSet(\"testXXX\",\"testYYY\")))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testX*\",\"kuku\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"kuku\")))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"test*\",\"-testYYY\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\")))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testXXX\",\"ku*\"))),equalTo(newHashSet(\"testXXX\",\"kuku\")))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testYY*\",\"alias*\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testConvertWildcardsJustIndicesTests['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"testX*\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\")))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Metadata.Builder mdBuilder = Metadata.builder().put(indexBuilder(\"testXXX\")).put(indexBuilder(\"testXYY\")).put(indexBuilder(\"testYYY\")).put(indexBuilder(\"kuku\"))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "MetaData.Builder mdBuilder = MetaData.builder().put(indexBuilder(\"testXXX\").putAlias(AliasMetaData.builder(\"alias1\")).putAlias(AliasMetaData.builder(\"alias2\"))).put(indexBuilder(\"testXYY\").putAlias(AliasMetaData.builder(\"alias2\"))).put(indexBuilder(\"testYYY\").putAlias(AliasMetaData.builder(\"alias3\"))).put(indexBuilder(\"kuku\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testConvertWildcardsJustIndicesTests['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"testXXX\"))),equalTo(newHashSet(\"testXXX\")))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Collections.singletonList(\"-kuku\"))),equalTo(newHashSet(\"-kuku\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"testXXX\",\"-testX*\"))),equalTo(newHashSet(\"testXXX\")))@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(newHashSet(resolver.resolve(context,Arrays.asList(\"*\",\"-kuku\"))),equalTo(newHashSet(\"testXXX\",\"testXYY\",\"testYYY\")))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->9 [style = solid, label="context"];
4->17 [style = dashed, label="0"];
7->11 [style = solid, label="context"];
7->8 [style = solid, label="context"];
7->0 [style = solid, label="context"];
6->24 [style = dashed, label="0"];
11->12 [style = bold, label=""];
19->17 [style = bold, label=""];
9->10 [style = bold, label=""];
7->15 [style = solid, label="context"];
16->18 [style = dashed, label="0"];
4->21 [style = dashed, label="0"];
13->23 [style = dashed, label="0"];
1->7 [style = bold, label=""];
3->4 [style = bold, label=""];
7->10 [style = solid, label="context"];
7->13 [style = solid, label="context"];
7->24 [style = solid, label="context"];
7->22 [style = solid, label="context"];
0->22 [style = dashed, label="0"];
7->23 [style = solid, label="context"];
16->7 [style = solid, label="state"];
20->21 [style = bold, label=""];
7->12 [style = solid, label="context"];
5->2 [style = bold, label=""];
7->24 [style = bold, label=""];
10->26 [style = dashed, label="0"];
23->22 [style = bold, label=""];
15->11 [style = bold, label=""];
10->13 [style = bold, label=""];
16->1 [style = bold, label=""];
18->1 [style = bold, label=""];
7->2 [style = solid, label="context"];
12->8 [style = bold, label=""];
24->25 [style = bold, label=""];
18->7 [style = solid, label="state"];
7->25 [style = solid, label="context"];
26->23 [style = bold, label=""];
2->14 [style = bold, label=""];
7->6 [style = bold, label=""];
25->26 [style = bold, label=""];
7->5 [style = solid, label="context"];
7->26 [style = solid, label="context"];
9->25 [style = dashed, label="0"];
21->16 [style = bold, label=""];
13->0 [style = bold, label=""];
7->14 [style = solid, label="context"];
14->15 [style = bold, label=""];
7->6 [style = solid, label="context"];
6->9 [style = bold, label=""];
17->18 [style = bold, label=""];
4->16 [style = bold, label=""];
0->5 [style = bold, label=""];
}
