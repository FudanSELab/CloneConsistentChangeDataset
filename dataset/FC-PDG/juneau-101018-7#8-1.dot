digraph {
15 [style = filled, label = "a05_headers_array['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "StringResource x = stringResource(\"foo\").headers(AList.of(header(\"Foo\",\"bar\"),header(\"Foo\",\"baz\"),header(null,\"bar\"),header(\"Bar\",null),null)).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "HeaderList x = stringResource(\"foo\").headers(AList.of(header(\"Foo\",\"bar\"),header(\"Foo\",\"baz\"),header(null,\"bar\"),header(\"Bar\",null),null)).build().getHeaders()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertString(x.getFirstHeader(\"Foo\").toString()).is(\"Foo: bar\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertObject(x.getFirst(\"Bar\").get().getValue()).doesNotExist()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "StringResource x = stringResource(\"foo\").headers(header(\"Foo\",\"bar\"),header(\"Foo\",\"baz\"),header(null,\"bar\"),header(\"Bar\",null),null).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertObject(x.getAllHeaders()).asJson().is(\"('Foo: bar','Foo: baz','null: bar','Bar: null'(\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertObject(x.getFirstHeader(\"Bar\").getValue()).doesNotExist()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertString(x.getLast(\"Foo\").get().toString()).is(\"Foo: baz\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertObject(x.getLast(\"Bar\").get().getValue()).doesNotExist()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertString(x.getLastHeader(\"Foo\").toString()).is(\"Foo: baz\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertObject(x.getLastHeader(\"Bar\").getValue()).doesNotExist()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "a04_headers_List['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "a04_headers_List['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertObject(x.getAllHeaders()).asJson().is(\"('Foo: bar','Foo: baz','Bar: null'(\")@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertObject(x.getAll()).asJson().is(\"('Foo: bar','Foo: baz','null: bar','Bar: null'(\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertString(x.getFirst(\"Foo\").get().toString()).is(\"Foo: bar\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->3 [style = bold, label=""];
8->10 [style = bold, label=""];
6->8 [style = dashed, label="0"];
4->6 [style = bold, label=""];
1->9 [style = dashed, label="0"];
9->7 [style = bold, label=""];
15->16 [style = bold, label=""];
2->7 [style = dashed, label="0"];
3->0 [style = bold, label=""];
12->13 [style = bold, label=""];
6->5 [style = bold, label=""];
6->16 [style = dashed, label="0"];
3->12 [style = dashed, label="0"];
2->14 [style = dashed, label="0"];
5->10 [style = dashed, label="0"];
10->12 [style = bold, label=""];
0->1 [style = bold, label=""];
0->13 [style = dashed, label="0"];
16->5 [style = bold, label=""];
11->8 [style = bold, label=""];
1->14 [style = bold, label=""];
1->2 [style = bold, label=""];
13->9 [style = bold, label=""];
}
