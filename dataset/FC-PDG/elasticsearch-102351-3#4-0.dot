digraph {
23 [style = filled, label = "testJoinAccumulation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "SimpleFuture futNode1 = joinNodeAsync(new JoinRequest(node1,Optional.of(new Join(node1,node0,newTerm,initialTerm,initialVersion))))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "SimpleFuture futNode0 = joinNodeAsync(new JoinRequest(node0,Optional.of(new Join(node0,node0,newTerm,initialTerm,initialVersion))))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "FutureUtils.get(futNode1)@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "joinNodeAndRun(new JoinRequest(node0,Optional.of(new Join(node0,node0,newTerm,initialTerm,initialVersion))))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertTrue(clusterStateHasNode(node1))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertFalse(clusterStateHasNode(node1))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "deterministicTaskQueue.runAllRunnableTasks()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "setupFakeMasterServiceAndCoordinator(initialTerm,initialState(node0,initialTerm,initialVersion,new VotingConfiguration(Collections.singleton(node2.getId()))))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testJoinElectedLeader['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testJoinElectedLeader['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "long newTerm = initialTerm + randomLongBetween(1,10)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "joinNodeAndRun(new JoinRequest(node0,newTerm,Optional.of(new Join(node0,node0,newTerm,initialTerm,initialVersion))))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertTrue(clusterStateHasNode(node1))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "long initialVersion = randomLongBetween(1,10)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "DiscoveryNode node1 = newNode(1,true)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(clusterStateHasNode(node2))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "FutureUtils.get(futNode0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertFalse(futNode0.isDone())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "joinNodeAndRun(new JoinRequest(node1,newTerm,Optional.of(new Join(node1,node0,newTerm,initialTerm,initialVersion))))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "deterministicTaskQueue.runAllRunnableTasks()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "DiscoveryNode node0 = newNode(0,true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "setupFakeMasterServiceAndCoordinator(initialTerm,initialState(node0,initialTerm,initialVersion,new VotingConfiguration(Collections.singleton(node0.getId()))))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "joinNodeAndRun(new JoinRequest(node1,Optional.of(new Join(node1,node0,newTerm,initialTerm,initialVersion))))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "DiscoveryNode node2 = newNode(2,true)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertFalse(futNode1.isDone())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "long initialTerm = randomLongBetween(1,10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "joinNodeAndRun(new JoinRequest(node2,Optional.of(new Join(node2,node0,newTerm,initialTerm,initialVersion))))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->1 [style = solid, label="initialTerm"];
21->10 [style = bold, label=""];
32->22 [style = bold, label=""];
1->15 [style = dashed, label="0"];
24->26 [style = solid, label="node2"];
8->9 [style = solid, label="initialTerm"];
13->1 [style = bold, label=""];
15->11 [style = bold, label=""];
9->14 [style = solid, label="newTerm"];
2->14 [style = dashed, label="0"];
8->21 [style = solid, label="initialTerm"];
9->20 [style = solid, label="newTerm"];
8->22 [style = solid, label="initialTerm"];
9->14 [style = bold, label=""];
5->1 [style = solid, label="initialVersion"];
23->12 [style = bold, label=""];
8->20 [style = solid, label="initialTerm"];
8->15 [style = solid, label="initialTerm"];
12->20 [style = solid, label="node0"];
7->21 [style = dashed, label="0"];
8->25 [style = solid, label="initialTerm"];
9->2 [style = bold, label=""];
5->20 [style = solid, label="initialVersion"];
12->25 [style = solid, label="node0"];
12->14 [style = solid, label="node0"];
5->22 [style = solid, label="initialVersion"];
9->1 [style = solid, label="newTerm"];
12->1 [style = solid, label="node0"];
6->3 [style = solid, label="node1"];
12->15 [style = solid, label="node0"];
12->7 [style = solid, label="node0"];
8->7 [style = solid, label="initialTerm"];
9->15 [style = solid, label="newTerm"];
6->13 [style = solid, label="node1"];
2->4 [style = bold, label=""];
1->11 [style = bold, label=""];
5->21 [style = bold, label=""];
29->20 [style = bold, label=""];
19->26 [style = bold, label=""];
28->19 [style = bold, label=""];
12->2 [style = solid, label="node0"];
12->21 [style = solid, label="node0"];
5->7 [style = bold, label=""];
9->2 [style = solid, label="newTerm"];
12->22 [style = solid, label="node0"];
13->15 [style = bold, label=""];
24->8 [style = bold, label=""];
6->15 [style = solid, label="node1"];
14->4 [style = bold, label=""];
27->18 [style = bold, label=""];
8->14 [style = solid, label="initialTerm"];
24->20 [style = solid, label="node2"];
30->33 [style = bold, label=""];
8->2 [style = solid, label="initialTerm"];
31->32 [style = bold, label=""];
0->12 [style = bold, label=""];
4->13 [style = bold, label=""];
6->24 [style = bold, label=""];
5->2 [style = solid, label="initialVersion"];
5->25 [style = solid, label="initialVersion"];
6->19 [style = solid, label="node1"];
9->25 [style = solid, label="newTerm"];
5->14 [style = solid, label="initialVersion"];
25->17 [style = bold, label=""];
11->3 [style = bold, label=""];
5->7 [style = solid, label="initialVersion"];
9->22 [style = solid, label="newTerm"];
2->25 [style = dashed, label="0"];
10->9 [style = bold, label=""];
6->1 [style = solid, label="node1"];
7->10 [style = bold, label=""];
17->31 [style = bold, label=""];
20->28 [style = bold, label=""];
12->6 [style = bold, label=""];
26->30 [style = bold, label=""];
18->29 [style = bold, label=""];
8->5 [style = bold, label=""];
22->27 [style = bold, label=""];
9->25 [style = bold, label=""];
6->8 [style = bold, label=""];
5->15 [style = solid, label="initialVersion"];
22->33 [style = solid, label="futNode1"];
6->22 [style = solid, label="node1"];
25->30 [style = solid, label="futNode0"];
16->12 [style = bold, label=""];
5->21 [style = solid, label="initialVersion"];
}
