digraph {
21 [style = filled, label = "Collections.shuffle(nodeList,gen)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "nodeList@@@53@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(network.nodes()).isEmpty()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "ArrayList<Object> edgeList = new ArrayList<>(network.edges())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Collections.shuffle(nodeList,gen)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int i = 0@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "int i = 0@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertThat(network.edges()).isEmpty()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "i < numEdgesToRemove@@@27@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertThat(network.nodes()).hasSize(NUM_NODES)@@@60@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "i < NUM_NODES@@@45@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "trial < NUM_TRIALS@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertThat(network.removeNode(nodeList.get(i))).isTrue()@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "edgeList@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "AbstractNetworkTest.validateNetwork(network)@@@62@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "AbstractNetworkTest.validateNetwork(network)@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(network.nodes()).hasSize(NUM_NODES)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Object edge = edgeList.get(i)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(network.edges()).hasSize(NUM_EDGES)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "i < numNodesToRemove@@@38@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Object edge@@@57@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "++i@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "nodeList@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "testNetworkMutation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "++i@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "network.addNode(gen.nextInt(NODE_POOL_SIZE))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "int numNodesToRemove = gen.nextInt(NUM_NODES)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "NetworkBuilder<? super Integer,Object> networkBuilder@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "i < NUM_EDGES@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(network.addNode(node)).isTrue()@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "AbstractNetworkTest.validateNetwork(network)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "AbstractNetworkTest.validateNetwork(network)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = numNodesToRemove@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(network.nodes()).hasSize(NUM_NODES - numNodesToRemove)@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "ArrayList<Integer> nodeList = new ArrayList<>(network.nodes())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Integer node@@@53@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "AbstractNetworkTest.validateNetwork(network)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(network.removeNode(nodeList.get(i))).isTrue()@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "int trial = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Collections.shuffle(edgeList,gen)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "AbstractNetworkTest.validateNetwork(network)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "++i@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "int i = 0@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "ArrayList<Object> edgeList = new ArrayList<Object>(network.edges())@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(network.addEdge(getRandomElement(nodeList,gen),getRandomElement(nodeList,gen),edge)).isTrue()@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Object edge@@@57@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertThat(network.edges()).isEmpty()@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(network.edges()).hasSize(NUM_EDGES - numEdgesToRemove)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Collections.shuffle(edgeList,gen)@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(network.nodes()).hasSize(NUM_NODES)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "int numEdgesToRemove = gen.nextInt(NUM_EDGES)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(network.edges()).hasSize(NUM_EDGES)@@@61@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Integer node@@@53@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
61 [style = filled, label = "Object edge@@@57@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(network.nodes()).isEmpty()@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ArrayList<Integer> nodeList = new ArrayList<Integer>(network.nodes())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(network.addEdge(getRandomElement(nodeList,gen),getRandomElement(nodeList,gen),new Object())).isTrue()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Random gen = new Random(42)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "++trial@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(network.removeEdge(edge)).isTrue()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "++i@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "network.nodes().size() < NUM_NODES@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "testNetworkMutation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "MutableNetwork<Integer,Object> network = networkBuilder.allowsParallelEdges(true).allowsSelfLoops(true).build()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testNetworkMutation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
56->52 [style = bold, label=""];
5->9 [style = bold, label=""];
47->17 [style = dotted, label="true"];
47->34 [style = dotted, label="true"];
51->30 [style = dotted, label="true"];
21->24 [style = bold, label=""];
9->10 [style = bold, label=""];
7->8 [style = bold, label=""];
47->53 [style = dotted, label="true"];
47->37 [style = dotted, label="true"];
26->56 [style = bold, label=""];
22->4 [style = bold, label=""];
44->51 [style = bold, label=""];
18->53 [style = solid, label="network"];
17->8 [style = dotted, label="true"];
58->21 [style = solid, label="nodeList"];
47->1 [style = dotted, label="true"];
47->46 [style = dotted, label="true"];
36->2 [style = bold, label=""];
14->46 [style = bold, label=""];
18->48 [style = solid, label="network"];
48->21 [style = bold, label=""];
47->61 [style = dotted, label="true"];
24->50 [style = solid, label="numNodesToRemove"];
47->54 [style = dotted, label="true"];
50->54 [style = bold, label=""];
54->5 [style = bold, label=""];
51->15 [style = dotted, label="true"];
60->23 [style = bold, label=""];
17->35 [style = bold, label=""];
34->53 [style = bold, label=""];
5->9 [style = solid, label="i"];
46->51 [style = solid, label="numEdgesToRemove"];
13->34 [style = bold, label=""];
35->59 [style = dashed, label="0"];
18->39 [style = solid, label="network"];
29->58 [style = dashed, label="0"];
27->12 [style = bold, label=""];
47->12 [style = dotted, label="true"];
32->51 [style = solid, label="i"];
47->5 [style = dotted, label="true"];
47->28 [style = dotted, label="true"];
1->49 [style = bold, label=""];
12->48 [style = bold, label=""];
24->40 [style = bold, label=""];
42->47 [style = solid, label="trial"];
40->56 [style = solid, label="i"];
47->58 [style = dotted, label="true"];
47->59 [style = dotted, label="true"];
9->38 [style = dotted, label="true"];
18->28 [style = solid, label="network"];
23->14 [style = solid, label="gen"];
29->21 [style = solid, label="nodeList"];
8->17 [style = bold, label=""];
47->49 [style = dotted, label="true"];
47->24 [style = dotted, label="true"];
47->43 [style = dotted, label="true"];
47->3 [style = dotted, label="true"];
56->52 [style = dotted, label="true"];
18->1 [style = bold, label=""];
23->31 [style = solid, label="gen"];
58->25 [style = bold, label=""];
4->22 [style = dotted, label="true"];
56->50 [style = bold, label=""];
35->31 [style = solid, label="edgeList"];
51->27 [style = bold, label=""];
47->51 [style = dotted, label="true"];
47->36 [style = dotted, label="true"];
19->38 [style = bold, label=""];
6->47 [style = bold, label=""];
4->22 [style = bold, label=""];
32->51 [style = bold, label=""];
30->44 [style = bold, label=""];
52->26 [style = bold, label=""];
18->54 [style = solid, label="network"];
47->48 [style = dotted, label="true"];
32->15 [style = solid, label="i"];
40->56 [style = bold, label=""];
47->18 [style = bold, label=""];
0->43 [style = bold, label=""];
18->11 [style = solid, label="network"];
45->36 [style = bold, label=""];
38->9 [style = bold, label=""];
47->11 [style = dotted, label="true"];
42->47 [style = bold, label=""];
49->28 [style = bold, label=""];
4->29 [style = bold, label=""];
47->56 [style = dotted, label="true"];
55->39 [style = bold, label=""];
56->26 [style = dotted, label="true"];
25->17 [style = bold, label=""];
23->42 [style = bold, label=""];
47->32 [style = dotted, label="true"];
53->14 [style = bold, label=""];
24->5 [style = solid, label="numNodesToRemove"];
9->19 [style = dotted, label="true"];
4->58 [style = bold, label=""];
47->9 [style = dotted, label="true"];
47->33 [style = dotted, label="true"];
47->10 [style = dotted, label="true"];
47->29 [style = dotted, label="true"];
47->39 [style = dotted, label="true"];
47->50 [style = dotted, label="true"];
47->2 [style = dotted, label="true"];
9->19 [style = bold, label=""];
47->18 [style = dotted, label="true"];
35->14 [style = solid, label="edgeList"];
47->4 [style = dotted, label="true"];
47->21 [style = dotted, label="true"];
24->56 [style = solid, label="numNodesToRemove"];
47->0 [style = dotted, label="true"];
46->32 [style = bold, label=""];
2->11 [style = bold, label=""];
43->31 [style = bold, label=""];
59->31 [style = solid, label="edgeList"];
47->62 [style = dotted, label="true"];
11->6 [style = bold, label=""];
47->45 [style = dotted, label="true"];
29->25 [style = bold, label=""];
47->27 [style = dotted, label="true"];
15->30 [style = bold, label=""];
47->31 [style = dotted, label="true"];
10->55 [style = bold, label=""];
47->55 [style = dotted, label="true"];
46->12 [style = solid, label="numEdgesToRemove"];
41->20 [style = dotted, label="true"];
64->23 [style = bold, label=""];
17->7 [style = bold, label=""];
23->0 [style = solid, label="gen"];
39->0 [style = bold, label=""];
60->20 [style = dotted, label="true"];
23->21 [style = solid, label="gen"];
47->25 [style = dotted, label="true"];
47->35 [style = dotted, label="true"];
47->16 [style = dotted, label="true"];
59->13 [style = bold, label=""];
47->40 [style = dotted, label="true"];
47->14 [style = dotted, label="true"];
47->6 [style = dotted, label="true"];
47->63 [style = dotted, label="true"];
25->17 [style = solid, label="i"];
59->14 [style = solid, label="edgeList"];
17->7 [style = dotted, label="true"];
64->20 [style = dotted, label="true"];
51->15 [style = bold, label=""];
17->59 [style = bold, label=""];
47->13 [style = dotted, label="true"];
51->44 [style = dotted, label="true"];
47->57 [style = dotted, label="true"];
35->13 [style = bold, label=""];
41->23 [style = bold, label=""];
58->0 [style = solid, label="nodeList"];
31->45 [style = bold, label=""];
29->0 [style = solid, label="nodeList"];
28->4 [style = bold, label=""];
}
