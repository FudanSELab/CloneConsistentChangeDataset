digraph {
4 [style = filled, label = "TestScheduler scheduler = new TestScheduler()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestSubscriberEx<Integer> subscriber = new TestSubscriberEx<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "debounceWithTimeBackpressure['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Observable.merge(Observable.just(1),Observable.just(2).delay(10,TimeUnit.MILLISECONDS,scheduler)).debounce(20,TimeUnit.MILLISECONDS,scheduler).take(1).subscribe(observer)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "observer.assertNoErrors()@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "observer.assertTerminated()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "scheduler.advanceTimeBy(30,TimeUnit.MILLISECONDS)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TestObserverEx<Integer> observer = new TestObserverEx<Integer>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "subscriber.assertNoErrors()@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "debounceWithTimeBackpressure['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "subscriber.assertTerminated()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "debounceWithTimeBackpressure['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "subscriber.assertValue(2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TestSubscriberEx<Integer> subscriber = new TestSubscriberEx<Integer>()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Flowable.merge(Flowable.just(1),Flowable.just(2).delay(10,TimeUnit.MILLISECONDS,scheduler)).debounce(20,TimeUnit.MILLISECONDS,scheduler).take(1).subscribe(subscriber)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "observer.assertValue(2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->8 [style = dashed, label="0"];
5->14 [style = dashed, label="0"];
4->6 [style = bold, label=""];
6->5 [style = solid, label="subscriber"];
8->5 [style = solid, label="subscriber"];
9->4 [style = bold, label=""];
4->13 [style = bold, label=""];
12->15 [style = bold, label=""];
0->15 [style = dashed, label="0"];
7->0 [style = bold, label=""];
11->12 [style = bold, label=""];
13->14 [style = solid, label="observer"];
3->4 [style = bold, label=""];
14->1 [style = bold, label=""];
1->11 [style = bold, label=""];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
6->13 [style = dashed, label="0"];
8->5 [style = bold, label=""];
10->4 [style = bold, label=""];
7->12 [style = dashed, label="0"];
4->8 [style = bold, label=""];
2->11 [style = dashed, label="0"];
1->2 [style = bold, label=""];
2->7 [style = bold, label=""];
13->14 [style = bold, label=""];
}
