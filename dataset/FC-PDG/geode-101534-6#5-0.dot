digraph {
4 [style = filled, label = "when(evictedNode.isEvicted()).thenReturn(true)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(list.size()).isEqualTo(2)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "list.appendEntry(evictedNode)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "doesNotEvictNodeThatIsEvicted['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "when(node.next()).thenReturn(list.tail)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(evictedNode.next()).thenReturn(node)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(list.getEvictableEntry()).isSameAs(node)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "doesNotEvictNodeThatIsEvicted['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "EvictionNode evictedNode = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(evictedNode.previous()).thenReturn(list.head)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(node.previous()).thenReturn(list.head)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EvictionNode node = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(controller,executor)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(controller,executor,1)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "LRUListWithSyncSorting list = new LRUListWithSyncSorting(controller)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(list.size()).isZero()@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "list.appendEntry(node)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "doesNotEvictNodeThatIsEvicted['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15->2 [style = bold, label=""];
11->6 [style = bold, label=""];
7->13 [style = solid, label="node"];
6->17 [style = dashed, label="0"];
16->17 [style = bold, label=""];
9->10 [style = bold, label=""];
2->4 [style = bold, label=""];
1->13 [style = bold, label=""];
7->12 [style = solid, label="node"];
4->7 [style = bold, label=""];
6->2 [style = bold, label=""];
7->9 [style = bold, label=""];
5->1 [style = bold, label=""];
3->5 [style = bold, label=""];
2->9 [style = solid, label="evictedNode"];
10->8 [style = bold, label=""];
17->2 [style = bold, label=""];
6->15 [style = dashed, label="0"];
14->15 [style = bold, label=""];
12->3 [style = bold, label=""];
8->12 [style = bold, label=""];
13->0 [style = bold, label=""];
7->10 [style = solid, label="node"];
}
