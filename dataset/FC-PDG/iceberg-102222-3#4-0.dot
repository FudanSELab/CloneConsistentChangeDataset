digraph {
27 [style = filled, label = "boolean partitioned@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "String path@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testHarness.prepareSnapshotPreBarrier(1)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "PartitionSpec spec@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "partitioned@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Map<String,String> properties@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "AppendFiles appendFiles = icebergTable.newAppend()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(0,result.deleteFiles().length)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "String location = tempFolder.newFolder().getAbsolutePath()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "spec = PartitionSpec.builderFor(iSchema).identity(\"smallint\").identity(\"tinyint\").identity(\"int\").build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(partitioned? 3: 1,result.dataFiles().length)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "SimpleDataUtil.assertTableRecords(location,expected)@@@30@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "WriteResult result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build()@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "return new HadoopTables().create(SCHEMA,spec,properties,path)@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Record record = GenericRecord.create(iSchema)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<RowData> rows = Lists.newArrayList(GenericRowData.of((byte)0x01,(short)-32768,101),GenericRowData.of((byte)0x02,(short)0,102),GenericRowData.of((byte)0x03,(short)32767,103))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testPromotedFlinkDataType['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "testHarness.extractOutputValues().forEach(null)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "partitioned@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Map<String,String> props = ImmutableMap.of(TableProperties.DEFAULT_FILE_FORMAT,format.name())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "createTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testPromotedFlinkDataType['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "spec = PartitionSpec.builderFor(SCHEMA).identity(\"data\").build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testHarness.processElement(row,1)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "spec = PartitionSpec.unpartitioned()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<Record> expected = Lists.newArrayList(record.copy(ImmutableMap.of(\"tinyint\",1,\"smallint\",-32768,\"int\",101)),record.copy(ImmutableMap.of(\"tinyint\",2,\"smallint\",0,\"int\",102)),record.copy(ImmutableMap.of(\"tinyint\",3,\"smallint\",32767,\"int\",103)))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Schema iSchema = new Schema(Types.NestedField.required(1,\"tinyint\",Types.IntegerType.get()),Types.NestedField.required(2,\"smallint\",Types.IntegerType.get()),Types.NestedField.optional(3,\"int\",Types.IntegerType.get()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Table icebergTable = new HadoopTables().create(iSchema,spec,props,location)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "AppendFiles appendFiles = icebergTable.newAppend()@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Arrays.stream(result.dataFiles()).forEach(null)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(partitioned? 3: 1,testHarness.extractOutputValues().size())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "appendFiles.commit()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TableSchema flinkSchema = TableSchema.builder().field(\"tinyint\",DataTypes.TINYINT().notNull()).field(\"smallint\",DataTypes.SMALLINT().notNull()).field(\"int\",DataTypes.INT().nullable()).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32->3 [style = solid, label="spec"];
11->20 [style = bold, label=""];
17->4 [style = solid, label="iSchema"];
4->14 [style = bold, label=""];
6->4 [style = solid, label="spec"];
2->20 [style = dashed, label="0"];
3->1 [style = bold, label=""];
16->8 [style = bold, label=""];
3->4 [style = solid, label="spec"];
0->17 [style = bold, label=""];
30->27 [style = dotted, label="true"];
1->15 [style = bold, label=""];
30->26 [style = bold, label=""];
12->11 [style = bold, label=""];
29->3 [style = solid, label="path"];
9->3 [style = dotted, label="false"];
2->18 [style = bold, label=""];
28->13 [style = bold, label=""];
10->22 [style = dashed, label="0"];
16->22 [style = bold, label=""];
9->6 [style = dotted, label="true"];
28->32 [style = dotted, label="false"];
17->19 [style = bold, label=""];
11->2 [style = bold, label=""];
9->6 [style = bold, label=""];
14->7 [style = bold, label=""];
28->32 [style = bold, label=""];
1->8 [style = solid, label="location"];
22->8 [style = bold, label=""];
6->1 [style = bold, label=""];
1->25 [style = solid, label="location"];
30->29 [style = dotted, label="true"];
17->7 [style = solid, label="iSchema"];
7->5 [style = bold, label=""];
6->13 [style = dashed, label="0"];
19->13 [style = bold, label=""];
18->10 [style = bold, label=""];
10->16 [style = bold, label=""];
5->12 [style = bold, label=""];
24->21 [style = bold, label=""];
13->3 [style = bold, label=""];
5->8 [style = solid, label="expected"];
15->4 [style = solid, label="props"];
15->4 [style = bold, label=""];
21->16 [style = bold, label=""];
9->3 [style = bold, label=""];
23->17 [style = bold, label=""];
31->3 [style = solid, label="properties"];
13->9 [style = bold, label=""];
26->28 [style = bold, label=""];
5->25 [style = solid, label="expected"];
20->24 [style = bold, label=""];
32->3 [style = bold, label=""];
28->13 [style = dotted, label="true"];
8->25 [style = bold, label=""];
27->28 [style = solid, label="partitioned"];
30->31 [style = dotted, label="true"];
13->3 [style = solid, label="spec"];
1->4 [style = solid, label="location"];
}
