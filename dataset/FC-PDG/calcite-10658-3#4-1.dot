digraph {
8 [style = filled, label = "traitDefs.add(ConventionTraitDef.INSTANCE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "traitDefs.add(RelCollationTraitDef.INSTANCE)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "RelTraitSet traitSet = planner.getEmptyTraitSet().replace(EnumerableConvention.INSTANCE)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "RelNode convert = planner.convert(validate)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(toString(transform2),equalTo(\"EnumerableProjectRel(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableAccessRel(table=((hr, emps(()\"))@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testPlanTransformTwice['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(MergeFilterRule.INSTANCE,JavaRules.ENUMERABLE_FILTER_RULE,JavaRules.ENUMERABLE_PROJECT_RULE)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Planner planner = getPlanner(traitDefs,Programs.of(ruleSet))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final List<RelTraitDef> traitDefs = new ArrayList<RelTraitDef>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Planner planner = getPlanner(null,Programs.of(ruleSet))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testPlanWithExplicitTraitDefs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "RelNode transform2 = planner.transform(0,traitSet,transform)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(toString(transform),equalTo(\"EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testPlanWithExplicitTraitDefs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(FilterMergeRule.INSTANCE,EnumerableRules.ENUMERABLE_FILTER_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\"\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(toString(transform),equalTo(\"EnumerableProjectRel(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableAccessRel(table=((hr, emps(()\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16->15 [style = bold, label=""];
5->8 [style = bold, label=""];
12->7 [style = solid, label="ruleSet"];
9->3 [style = solid, label="traitSet"];
12->5 [style = bold, label=""];
3->1 [style = bold, label=""];
10->14 [style = solid, label="transform"];
10->14 [style = bold, label=""];
4->6 [style = bold, label=""];
6->16 [style = solid, label="ruleSet"];
17->9 [style = bold, label=""];
18->17 [style = bold, label=""];
1->0 [style = bold, label=""];
17->3 [style = solid, label="convert"];
19->6 [style = bold, label=""];
15->18 [style = bold, label=""];
1->10 [style = solid, label="convert"];
6->12 [style = dashed, label="0"];
7->9 [style = bold, label=""];
6->5 [style = bold, label=""];
0->10 [style = bold, label=""];
13->12 [style = bold, label=""];
2->14 [style = dashed, label="0"];
9->3 [style = solid, label="parse"];
6->16 [style = bold, label=""];
0->10 [style = solid, label="traitSet"];
9->1 [style = solid, label="traitSet"];
9->3 [style = bold, label=""];
3->1 [style = solid, label="validate"];
10->2 [style = solid, label="transform"];
10->2 [style = bold, label=""];
1->0 [style = solid, label="transform2"];
5->7 [style = solid, label="traitDefs"];
8->11 [style = bold, label=""];
6->7 [style = solid, label="ruleSet"];
15->18 [style = solid, label="parse"];
11->7 [style = bold, label=""];
18->17 [style = solid, label="validate"];
3->1 [style = solid, label="transform"];
}
