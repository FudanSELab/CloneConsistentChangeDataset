digraph {
6 [style = filled, label = "testAvroRecompactionWithLimitation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "state.setProp(CompactionSlaEventHelper.LAST_RUN_START_TIME,Long.toString(state.getPropAsLong(CompactionSlaEventHelper.LAST_RUN_START_TIME) - 8 * 60 * 60 * 1000))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(fs.exists(new Path(basePath,\"Identity/MemberAccount/hourly/2017/04/03/10\")))@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testAvroRecompactionWithLimitation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "fs.delete(new Path(basePath),true)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "FileSystem fs = getFileSystem()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "writeFileWithContent(jobDir,\"file2\",r1,22)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "embeddedGobblin_2.run()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "GenericRecord r1 = createRandomRecord()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "recordCount = InputRecordCountHelper.readRecordCount(fs,(new Path(basePath,new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "JobExecutionResult result = embeddedGobblin.run()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "long recordCount = InputRecordCountHelper.readRecordCount(fs,(new Path(basePath,new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(recordCount,20)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(result.isSuccessful())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "recordCount = InputRecordCountHelper.readRecordCount(fs,(new Path(basePath,new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(recordCount,20)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(result.isSuccessful())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testAvroRecompaction['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "writeFileWithContent(jobDir,\"file1\",r1,20)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "embeddedGobblin_2.run()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "String basePath = \"/tmp/testRecompactionWithLimitation\"@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Assert.assertEquals(recordCount,42)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "File jobDir = new File(basePath,\"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(result.isSuccessful())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "embeddedGobblin_2.setConfiguration(TimeBasedSubDirDatasetsFinder.MIN_RECOMPACTION_DURATION,\"8h\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"Recompaction-First\",basePath)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EmbeddedGobblin embeddedGobblin_2 = createEmbeddedGobblin(\"Recompaction-Second\",basePath)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(jobDir.mkdirs())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "InputRecordCountHelper.saveState(fs,(new Path(basePath,new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))),state)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "State state = InputRecordCountHelper.loadState(fs,(new Path(basePath,new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "String basePath = \"/tmp/testRecompaction\"@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
14->5 [style = bold, label=""];
28->3 [style = solid, label="basePath"];
28->3 [style = bold, label=""];
28->9 [style = solid, label="basePath"];
26->18 [style = bold, label=""];
20->3 [style = bold, label=""];
6->15 [style = bold, label=""];
7->10 [style = bold, label=""];
30->15 [style = bold, label=""];
20->13 [style = solid, label="basePath"];
28->1 [style = solid, label="basePath"];
18->7 [style = solid, label="r1"];
17->19 [style = bold, label=""];
25->7 [style = bold, label=""];
1->25 [style = solid, label="recordCount"];
20->9 [style = solid, label="basePath"];
23->27 [style = bold, label=""];
9->12 [style = solid, label="jobDir"];
28->24 [style = solid, label="basePath"];
19->22 [style = bold, label=""];
28->19 [style = solid, label="basePath"];
28->10 [style = solid, label="basePath"];
0->25 [style = bold, label=""];
28->13 [style = solid, label="basePath"];
12->23 [style = bold, label=""];
11->17 [style = bold, label=""];
16->13 [style = bold, label=""];
20->3 [style = solid, label="basePath"];
20->23 [style = solid, label="basePath"];
20->21 [style = solid, label="basePath"];
20->28 [style = dashed, label="0"];
2->8 [style = bold, label=""];
20->1 [style = solid, label="basePath"];
19->22 [style = solid, label="recordCount"];
18->12 [style = solid, label="r1"];
28->21 [style = solid, label="basePath"];
15->28 [style = bold, label=""];
15->19 [style = solid, label="fs"];
13->11 [style = bold, label=""];
20->10 [style = solid, label="basePath"];
20->24 [style = solid, label="basePath"];
27->1 [style = bold, label=""];
20->19 [style = solid, label="basePath"];
2->22 [style = solid, label="recordCount"];
10->4 [style = bold, label=""];
24->16 [style = bold, label=""];
3->9 [style = bold, label=""];
2->22 [style = bold, label=""];
20->2 [style = solid, label="basePath"];
4->14 [style = bold, label=""];
15->20 [style = bold, label=""];
29->15 [style = bold, label=""];
15->2 [style = solid, label="fs"];
24->13 [style = solid, label="state"];
28->23 [style = solid, label="basePath"];
9->26 [style = bold, label=""];
22->21 [style = bold, label=""];
18->12 [style = bold, label=""];
8->24 [style = bold, label=""];
15->24 [style = solid, label="fs"];
9->7 [style = solid, label="jobDir"];
15->1 [style = solid, label="fs"];
10->14 [style = bold, label=""];
28->2 [style = solid, label="basePath"];
15->13 [style = solid, label="fs"];
2->8 [style = solid, label="recordCount"];
1->0 [style = bold, label=""];
}
