digraph {
3 [style = filled, label = "when(channel.getRawChannel()).thenReturn(rawChannel)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "init['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ByteBuffer buffer = ByteBuffer.allocate(1 << 14)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TestReadWriteHandler readWriteHandler = new TestReadWriteHandler(readConsumer)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "init['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "nioTimer = mock()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "selector = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "exceptionHandler = mock()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "init['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "when(selector.isOnCurrentThread()).thenReturn(true)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "when(selector.getIoBuffer()).thenAnswer(null)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "sslDriver = mock()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "readConsumer = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TestReadWriteHandler handler = new TestReadWriteHandler(readConsumer)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(sslDriver.getNetworkWriteBuffer()).thenReturn(writeBuffer)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "context = new SSLChannelContext(channel,selector,exceptionHandler,sslDriver,readWriteHandler,channelBuffer)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "context = new BytesChannelContext(channel,selector,mock(),handler,channelBuffer)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "channel = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(selector.getTaskScheduler()).thenReturn(nioTimer)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "messageLength = randomInt(96) + 20@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "listener = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "rawChannel = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "channelBuffer = InboundChannelBuffer.allocatingInstance()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "when(sslDriver.getNetworkReadBuffer()).thenReturn(readBuffer)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(selector.getIoBuffer()).thenAnswer(null)@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
0->16 [style = bold, label=""];
17->5 [style = bold, label=""];
10->21 [style = dashed, label="0"];
7->17 [style = bold, label=""];
9->0 [style = bold, label=""];
10->14 [style = solid, label="exceptionHandler"];
10->14 [style = bold, label=""];
0->6 [style = bold, label=""];
19->14 [style = solid, label="channelBuffer"];
8->18 [style = bold, label=""];
24->0 [style = bold, label=""];
16->6 [style = bold, label=""];
20->0 [style = bold, label=""];
12->15 [style = bold, label=""];
8->14 [style = solid, label="channel"];
18->19 [style = bold, label=""];
23->4 [style = bold, label=""];
7->14 [style = solid, label="selector"];
0->22 [style = solid, label="readConsumer"];
11->2 [style = bold, label=""];
17->12 [style = solid, label="nioTimer"];
1->11 [style = bold, label=""];
13->14 [style = solid, label="sslDriver"];
22->3 [style = bold, label=""];
3->10 [style = bold, label=""];
0->16 [style = solid, label="readConsumer"];
13->19 [style = bold, label=""];
7->5 [style = bold, label=""];
15->11 [style = bold, label=""];
8->21 [style = solid, label="channel"];
22->21 [style = solid, label="handler"];
7->21 [style = solid, label="selector"];
18->13 [style = bold, label=""];
4->12 [style = bold, label=""];
3->21 [style = bold, label=""];
19->21 [style = solid, label="channelBuffer"];
6->7 [style = bold, label=""];
4->11 [style = bold, label=""];
19->22 [style = bold, label=""];
19->3 [style = bold, label=""];
21->23 [style = bold, label=""];
16->14 [style = solid, label="readWriteHandler"];
18->3 [style = solid, label="rawChannel"];
14->4 [style = bold, label=""];
15->1 [style = bold, label=""];
}
