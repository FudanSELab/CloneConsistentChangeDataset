digraph {
1 [style = filled, label = "testWhenAllowOverlapJobAssignment['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "j++@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "String queueName = TestHelper.getTestMethodName()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "_driver.enqueueJob(queueName,\"job_\" + (i + 1),jobConfigBuilders.get(i))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient,CLUSTER_NAME,Collections.singletonList(_participants(0(.getInstanceName()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int i = 0@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Thread.sleep(1000L)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "cfgBuilder.setParallelJobs(PARALLEL_COUNT)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "int i = 0@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i < jobConfigBuilders.size()@@@31@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int i = 1@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "_driver.stop(queueName)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "jobConfigBuilders.add(new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName).setTargetPartitionStates(Collections.singleton(\"SLAVE\")).setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY,\"1000\")))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "JobQueue queue = queueBuild.build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "_driver.stop(queueName)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "_driver.createQueue(queue)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "taskConfigs.add(new TaskConfig.Builder().setTaskId(\"job_\" + (i + 1) + \"_task_\" + j).setCommand(MockTask.TASK_COMMAND).build())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "_participants(i(.syncStop()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "_driver.resume(queueName)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver,queueName))@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "++i@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "cfgBuilder.setAllowOverlapJobAssignment(true)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int j = 0@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i++@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "++i@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "_driver.enqueueJob(queueName,\"job_\" + (i + 1),jobConfigBuilders.get(i))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertTrue(verifier.verifyByPolling())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "taskConfigs.add(new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND).build())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "i < PARALLEL_COUNT@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testWhenDisallowOverlapJobAssignment['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "i < jobConfigBuilders.size()@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int i = 0@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "cfgBuilder.setAllowOverlapJobAssignment(false)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Thread.sleep(2000)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "_driver.resume(queueName)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "j < TASK_COUNT@@@23@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "i++@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver,queueName))@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "i < _numNodes@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testWhenAllowOverlapJobAssignment['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->19 [style = dotted, label="true"];
16->13 [style = dotted, label="true"];
11->14 [style = bold, label=""];
44->35 [style = bold, label=""];
28->38 [style = bold, label=""];
21->24 [style = bold, label=""];
26->0 [style = solid, label="j"];
38->39 [style = bold, label=""];
8->4 [style = dotted, label="true"];
43->3 [style = bold, label=""];
42->44 [style = bold, label=""];
28->43 [style = bold, label=""];
10->32 [style = dashed, label="0"];
41->45 [style = solid, label="queueName"];
1->12 [style = bold, label=""];
14->9 [style = bold, label=""];
41->45 [style = bold, label=""];
8->0 [style = dotted, label="true"];
28->3 [style = bold, label=""];
19->15 [style = bold, label=""];
29->19 [style = solid, label="queueName"];
0->10 [style = dotted, label="true"];
30->27 [style = bold, label=""];
9->17 [style = bold, label=""];
10->26 [style = bold, label=""];
23->8 [style = bold, label=""];
32->26 [style = bold, label=""];
13->16 [style = bold, label=""];
21->36 [style = dashed, label="0"];
4->0 [style = bold, label=""];
29->2 [style = solid, label="queueName"];
24->20 [style = bold, label=""];
3->23 [style = bold, label=""];
26->0 [style = bold, label=""];
41->24 [style = solid, label="queueName"];
34->36 [style = bold, label=""];
29->7 [style = solid, label="queueName"];
8->18 [style = dotted, label="true"];
27->29 [style = bold, label=""];
0->26 [style = dotted, label="true"];
36->42 [style = bold, label=""];
13->16 [style = solid, label="i"];
39->37 [style = bold, label=""];
18->8 [style = solid, label="i"];
8->25 [style = dotted, label="true"];
17->39 [style = dashed, label="0"];
44->35 [style = solid, label="queue"];
35->29 [style = bold, label=""];
15->14 [style = bold, label=""];
17->6 [style = bold, label=""];
28->3 [style = dotted, label="true"];
31->13 [style = bold, label=""];
29->9 [style = solid, label="queueName"];
14->19 [style = bold, label=""];
5->18 [style = bold, label=""];
20->28 [style = solid, label="queue"];
20->43 [style = solid, label="i"];
33->12 [style = bold, label=""];
7->22 [style = bold, label=""];
3->28 [style = bold, label=""];
8->2 [style = bold, label=""];
16->31 [style = bold, label=""];
11->19 [style = solid, label="i"];
16->30 [style = bold, label=""];
11->14 [style = solid, label="i"];
28->43 [style = dotted, label="true"];
29->6 [style = solid, label="queueName"];
41->37 [style = solid, label="queueName"];
18->8 [style = bold, label=""];
0->32 [style = dotted, label="true"];
0->32 [style = bold, label=""];
16->31 [style = dotted, label="true"];
23->8 [style = solid, label="i"];
2->11 [style = bold, label=""];
0->5 [style = bold, label=""];
20->28 [style = solid, label="i"];
41->38 [style = solid, label="queueName"];
12->16 [style = solid, label="i"];
41->43 [style = solid, label="queueName"];
23->18 [style = solid, label="i"];
4->26 [style = solid, label="j"];
20->28 [style = bold, label=""];
22->21 [style = bold, label=""];
25->4 [style = bold, label=""];
12->16 [style = bold, label=""];
25->5 [style = solid, label="taskConfigs"];
14->15 [style = dotted, label="true"];
0->10 [style = bold, label=""];
8->5 [style = dotted, label="true"];
12->13 [style = solid, label="i"];
40->41 [style = bold, label=""];
29->7 [style = bold, label=""];
29->22 [style = bold, label=""];
22->24 [style = bold, label=""];
4->0 [style = solid, label="j"];
8->25 [style = bold, label=""];
45->34 [style = bold, label=""];
}
