digraph {
38 [style = filled, label = "termQuery = ((BoostQuery)disjunct).getQuery()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Query disjunct@@@10@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Query query@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "(DisjunctionMaxQuery)query@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(inner.getTerm().bytes().toString(),is(inner.getTerm().bytes().toString().toLowerCase(Locale.ROOT)))@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "query instanceof MatchAllDocsQuery@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "queryBuilder.fields().size() == 0@@@31@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "maxQuery.getDisjuncts()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTermOrBoostQuery(query,field.getKey(),queryBuilder.value(),field.getValue())@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "fail(\"Encountered lucene query type we do not have a validation implementation for in our \" + .getSimpleName())@@@40@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "return@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "doAssertLuceneQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Query query@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(query,instanceOf())@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "doAssertLuceneQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "queryBuilder.fields().size() == 1@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(query,either(instanceOf()).or(instanceOf()).or(instanceOf()).or(instanceOf()).or(instanceOf()).or(instanceOf()))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "QueryShardContext context@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(queryBuilder.zeroTermsQuery(),equalTo(ZeroTermsQuery.ALL))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "DisjunctionMaxQuery maxQuery = (DisjunctionMaxQuery)query@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(query,notNullValue())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "queryBuilder.fields().size() > 1@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(termQuery,instanceOf())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "TermQuery inner = (TermQuery)termQuery@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertThat(query,either(instanceOf()).or(instanceOf()).or(instanceOf()))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Query termQuery = disjunct@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "MatchPhraseQueryBuilder queryBuilder@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "disjunct instanceof BoostQuery@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Query disjunct@@@34@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "queryBuilder.value().isEmpty()@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "SearchExecutionContext context@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "query instanceof DisjunctionMaxQuery@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Map.Entry<String,Float> field = queryBuilder.fields().entrySet().iterator().next()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "QueryShardContext context@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertThat(disjunct,either(instanceOf()).or(instanceOf()))@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertThat(query,instanceOf())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "termQuery instanceof TermQuery@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Query query@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "MatchPhraseQueryBuilder queryBuilder@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "SimpleQueryStringBuilder queryBuilder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertThat(disjunct,either(instanceOf()).or(instanceOf()).or(instanceOf()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "query instanceof MatchNoDocsQuery == false@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "doAssertLuceneQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
25->34 [style = bold, label=""];
39->18 [style = dotted, label="true"];
36->21 [style = dotted, label="true"];
35->19 [style = solid, label="query"];
0->6 [style = dotted, label="true"];
38->15 [style = bold, label=""];
3->4 [style = bold, label=""];
6->35 [style = dashed, label="0"];
8->36 [style = bold, label=""];
23->22 [style = bold, label=""];
33->35 [style = dotted, label="true"];
20->16 [style = bold, label=""];
10->8 [style = bold, label=""];
39->31 [style = bold, label=""];
15->29 [style = dotted, label="true"];
0->8 [style = bold, label=""];
23->15 [style = dotted, label="true"];
27->19 [style = bold, label=""];
16->38 [style = dotted, label="true"];
28->42 [style = bold, label=""];
15->26 [style = dotted, label="true"];
25->24 [style = dotted, label="false"];
22->25 [style = bold, label=""];
26->42 [style = bold, label=""];
22->19 [style = dotted, label="true"];
38->28 [style = solid, label="termQuery"];
35->40 [style = solid, label="query"];
2->4 [style = solid, label="query"];
23->42 [style = dotted, label="true"];
2->8 [style = solid, label="query"];
29->26 [style = bold, label=""];
23->40 [style = dotted, label="true"];
20->15 [style = solid, label="termQuery"];
25->24 [style = bold, label=""];
7->5 [style = bold, label=""];
23->37 [style = bold, label=""];
15->28 [style = dotted, label="false"];
33->8 [style = bold, label=""];
15->29 [style = bold, label=""];
23->16 [style = dotted, label="true"];
39->31 [style = dotted, label="true"];
23->22 [style = dotted, label="false"];
12->7 [style = solid, label="query"];
35->37 [style = solid, label="query"];
7->4 [style = bold, label=""];
25->39 [style = dotted, label="true"];
33->17 [style = dotted, label="true"];
10->9 [style = dotted, label="true"];
7->5 [style = dotted, label="true"];
23->32 [style = dotted, label="true"];
23->20 [style = dotted, label="true"];
2->7 [style = solid, label="query"];
19->14 [style = bold, label=""];
15->28 [style = bold, label=""];
10->11 [style = dotted, label="true"];
23->13 [style = dotted, label="true"];
34->39 [style = bold, label=""];
22->27 [style = dotted, label="true"];
5->21 [style = dashed, label="0"];
35->8 [style = solid, label="query"];
0->1 [style = dotted, label="true"];
38->29 [style = solid, label="termQuery"];
16->15 [style = bold, label=""];
19->14 [style = dotted, label="true"];
12->4 [style = solid, label="query"];
35->14 [style = solid, label="query"];
10->12 [style = dotted, label="true"];
20->29 [style = solid, label="termQuery"];
20->28 [style = solid, label="termQuery"];
25->34 [style = dotted, label="true"];
42->20 [style = bold, label=""];
35->39 [style = solid, label="query"];
33->30 [style = dotted, label="true"];
8->7 [style = bold, label=""];
36->23 [style = dotted, label="false"];
6->12 [style = dashed, label="0"];
23->37 [style = dotted, label="true"];
36->21 [style = bold, label=""];
35->21 [style = solid, label="query"];
36->23 [style = bold, label=""];
22->27 [style = bold, label=""];
7->3 [style = dotted, label="true"];
12->8 [style = solid, label="query"];
39->41 [style = dotted, label="true"];
38->15 [style = solid, label="termQuery"];
0->2 [style = dotted, label="true"];
22->25 [style = dotted, label="false"];
40->42 [style = bold, label=""];
7->36 [style = dashed, label="0"];
37->40 [style = bold, label=""];
16->38 [style = bold, label=""];
35->34 [style = solid, label="query"];
}
