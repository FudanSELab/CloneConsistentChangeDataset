digraph {
47 [style = filled, label = "assertTrue(header.isResponse())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(messageBytes,content)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "InboundDecoder decoder = new InboundDecoder(Version.CURRENT,pageCacheRecycler)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "final Object compressionScheme = fragments.get(0)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "threadContext.addResponseHeader(headerKey,headerValue)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(1,releasable1.refCount())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(action,header.getActionName())@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(totalHeaderSize,bytesConsumed)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testDecode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "final BytesReference totalBytes = message.serialize(new BytesStreamOutput())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "isRequest@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "testCompressedDecode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "message = new OutboundMessage.Response(threadContext,new TestResponse(randomAlphaOfLength(100)),Version.CURRENT,requestId,false,null)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int totalHeaderSize = TcpHeader.headerSize(Version.CURRENT) + totalBytes.getInt(TcpHeader.VARIABLE_HEADER_SIZE_POSITION)@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final Object content = fragments.get(1)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(InboundDecoder.END_CONTENT,endMarker)@@@54@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "OutboundMessage message@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "threadContext.putHeader(headerKey,headerValue)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int totalHeaderSize = TcpHeader.headerSize(Version.CURRENT) + totalBytes.getInt(TcpHeader.VARIABLE_HEADER_SIZE_POSITION)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertEquals(uncompressedBytes,content)@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "final BytesStreamOutput out = new BytesStreamOutput()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "final Header header = (Header)fragments.get(0)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "isRequest@@@41@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "message = new OutboundMessage.Request(threadContext,new TestRequest(randomAlphaOfLength(100)),Version.CURRENT,action,requestId,false,null)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertEquals(scheme,compressionScheme)@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertTrue(header.isCompressed())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "assertEquals(1,releasable2.refCount())@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "final String headerKey = randomAlphaOfLength(10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final String headerValue = randomAlphaOfLength(20)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "transportMessage = new TestRequest(randomAlphaOfLength(100))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "final BytesReference totalBytes = message.serialize(new BytesStreamOutput())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertThat(header.getHeaders().v2().get(headerKey),hasItems(headerValue))@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final BytesReference uncompressedBytes = out.bytes()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Compression.Scheme scheme = randomFrom(Compression.Scheme.DEFLATE,Compression.Scheme.LZ4)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "final Object endMarker = fragments.get(2)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(2,releasable2.refCount())@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final ReleasableBytesReference releasable2 = ReleasableBytesReference.wrap(bytes2)@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "isRequest@@@35@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final ArrayList<Object> fragments = new ArrayList<>()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(header.getHeaders().v2().get(headerKey),hasItems(headerValue))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertFalse(header.isHandshake())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertFalse(header.needsToReadVariableHeader())@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "boolean isRequest = randomBoolean()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertEquals(header.getHeaders().v1().get(headerKey),headerValue)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertTrue(header.isResponse())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertEquals(InboundDecoder.END_CONTENT,endMarker)@@@62@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "fragments.clear()@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "fragments.clear()@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "int bytesConsumed = decoder.decode(releasable1,null)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "message = new OutboundMessage.Request(threadContext,transportMessage,Version.CURRENT,action,requestId,false,scheme)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final BytesReference bytes2 = totalBytes.slice(bytesConsumed,totalBytes.length() - bytesConsumed)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testDecode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final ReleasableBytesReference releasable1 = ReleasableBytesReference.wrap(totalBytes)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int bytesConsumed2 = decoder.decode(releasable2,null)@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "InboundDecoder decoder = new InboundDecoder(Version.CURRENT,PageCacheRecycler.NON_RECYCLING_INSTANCE)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "message = new OutboundMessage.Response(threadContext,transportMessage,Version.CURRENT,requestId,false,scheme)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertTrue(header.isRequest())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final ArrayList<Object> fragments = new ArrayList<>()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "transportMessage = new TestResponse(randomAlphaOfLength(100))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "TransportMessage transportMessage@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "transportMessage.writeTo(out)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "isRequest@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(requestId,header.getRequestId())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "String action = \"test-request\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(Version.CURRENT,header.getVersion())@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "long requestId = randomNonNegativeLong()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(totalBytes.length() - totalHeaderSize,bytesConsumed2)@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42->19 [style = solid, label="bytesConsumed"];
9->58 [style = dotted, label="true"];
17->25 [style = bold, label=""];
23->34 [style = solid, label="requestId"];
7->32 [style = bold, label=""];
29->15 [style = bold, label=""];
24->6 [style = dotted, label="true"];
49->59 [style = bold, label=""];
35->34 [style = solid, label="action"];
55->49 [style = bold, label=""];
21->43 [style = bold, label=""];
56->41 [style = bold, label=""];
31->11 [style = solid, label="totalBytes"];
44->15 [style = bold, label=""];
58->60 [style = bold, label=""];
59->62 [style = bold, label=""];
48->49 [style = solid, label="compressionScheme"];
47->37 [style = bold, label=""];
32->34 [style = bold, label=""];
52->55 [style = bold, label=""];
9->10 [style = bold, label=""];
20->22 [style = solid, label="content"];
40->13 [style = bold, label=""];
9->37 [style = dotted, label="false"];
12->7 [style = bold, label=""];
20->27 [style = bold, label=""];
11->17 [style = solid, label="releasable1"];
54->56 [style = solid, label="scheme"];
54->49 [style = solid, label="scheme"];
48->52 [style = bold, label=""];
35->23 [style = bold, label=""];
30->66 [style = dashed, label="0"];
37->38 [style = bold, label=""];
9->47 [style = dotted, label="false"];
53->41 [style = bold, label=""];
36->60 [style = solid, label="headerKey"];
9->47 [style = bold, label=""];
27->13 [style = solid, label="endMarker"];
43->0 [style = bold, label=""];
41->45 [style = bold, label=""];
23->36 [style = bold, label=""];
20->27 [style = solid, label="bytesConsumed2"];
26->28 [style = bold, label=""];
2->24 [style = bold, label=""];
36->28 [style = solid, label="headerKey"];
33->7 [style = bold, label=""];
19->18 [style = bold, label=""];
28->37 [style = bold, label=""];
4->38 [style = bold, label=""];
40->49 [style = dashed, label="0"];
23->53 [style = solid, label="requestId"];
55->64 [style = solid, label="endMarker"];
15->39 [style = solid, label="isRequest"];
35->10 [style = solid, label="action"];
63->54 [style = bold, label=""];
24->26 [style = dotted, label="false"];
46->6 [style = bold, label=""];
15->24 [style = solid, label="isRequest"];
17->38 [style = solid, label="bytesConsumed"];
3->27 [style = solid, label="totalHeaderSize"];
3->11 [style = bold, label=""];
19->18 [style = solid, label="bytes2"];
50->3 [style = bold, label=""];
34->31 [style = bold, label=""];
23->56 [style = solid, label="requestId"];
20->48 [style = dashed, label="0"];
41->65 [style = bold, label=""];
52->59 [style = solid, label="content"];
27->22 [style = bold, label=""];
15->35 [style = bold, label=""];
1->11 [style = bold, label=""];
45->1 [style = bold, label=""];
5->21 [style = bold, label=""];
18->20 [style = bold, label=""];
32->30 [style = dotted, label="false"];
16->12 [style = solid, label="headerValue"];
15->32 [style = solid, label="isRequest"];
39->12 [style = bold, label=""];
36->16 [style = bold, label=""];
9->60 [style = dotted, label="true"];
11->17 [style = bold, label=""];
16->39 [style = bold, label=""];
65->61 [style = bold, label=""];
17->25 [style = solid, label="bytesConsumed"];
9->10 [style = dotted, label="true"];
16->33 [style = solid, label="headerValue"];
7->63 [style = bold, label=""];
57->53 [style = bold, label=""];
32->66 [style = bold, label=""];
8->41 [style = bold, label=""];
32->34 [style = dotted, label="true"];
3->1 [style = bold, label=""];
32->66 [style = dotted, label="false"];
23->0 [style = solid, label="requestId"];
66->56 [style = solid, label="transportMessage"];
32->57 [style = dotted, label="true"];
14->19 [style = bold, label=""];
32->53 [style = dotted, label="true"];
32->57 [style = bold, label=""];
36->37 [style = solid, label="headerKey"];
41->25 [style = solid, label="totalBytes"];
32->30 [style = bold, label=""];
60->38 [style = bold, label=""];
39->33 [style = bold, label=""];
65->61 [style = solid, label="out"];
24->26 [style = bold, label=""];
15->58 [style = solid, label="isRequest"];
3->5 [style = solid, label="totalHeaderSize"];
30->31 [style = bold, label=""];
57->53 [style = solid, label="transportMessage"];
3->45 [style = dashed, label="0"];
32->56 [style = dotted, label="false"];
25->42 [style = bold, label=""];
15->9 [style = solid, label="isRequest"];
0->46 [style = dashed, label="0"];
39->12 [style = dotted, label="true"];
31->8 [style = bold, label=""];
14->19 [style = solid, label="releasable2"];
8->18 [style = solid, label="totalHeaderSize"];
16->37 [style = solid, label="headerValue"];
25->42 [style = solid, label="releasable1"];
22->40 [style = bold, label=""];
10->37 [style = bold, label=""];
18->20 [style = solid, label="releasable2"];
36->10 [style = solid, label="headerKey"];
2->46 [style = bold, label=""];
41->22 [style = solid, label="messageBytes"];
36->12 [style = solid, label="headerKey"];
8->25 [style = solid, label="totalHeaderSize"];
24->28 [style = dotted, label="false"];
41->3 [style = bold, label=""];
0->2 [style = bold, label=""];
50->59 [style = solid, label="uncompressedBytes"];
24->9 [style = dotted, label="true"];
35->6 [style = solid, label="action"];
23->21 [style = solid, label="requestId"];
16->28 [style = solid, label="headerValue"];
16->10 [style = solid, label="headerValue"];
62->64 [style = bold, label=""];
38->14 [style = solid, label="bytes2"];
39->33 [style = dotted, label="false"];
19->18 [style = solid, label="bytesConsumed2"];
8->41 [style = solid, label="totalHeaderSize"];
37->4 [style = bold, label=""];
35->53 [style = solid, label="action"];
38->14 [style = bold, label=""];
24->10 [style = dotted, label="true"];
54->53 [style = solid, label="scheme"];
34->57 [style = dashed, label="0"];
16->60 [style = solid, label="headerValue"];
42->5 [style = solid, label="bytesConsumed"];
61->50 [style = bold, label=""];
27->48 [style = bold, label=""];
54->32 [style = bold, label=""];
27->52 [style = dashed, label="0"];
42->5 [style = bold, label=""];
51->15 [style = bold, label=""];
36->33 [style = solid, label="headerKey"];
6->9 [style = bold, label=""];
24->6 [style = bold, label=""];
10->58 [style = bold, label=""];
23->30 [style = solid, label="requestId"];
66->56 [style = bold, label=""];
}
