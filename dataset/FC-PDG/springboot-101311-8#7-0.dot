digraph {
6 [style = filled, label = "containsDescendantOfShouldReturnEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "SpringConfigurationPropertySource adapter = new SpringConfigurationPropertySource(propertySource,DefaultPropertyMapper.INSTANCE,null)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "EnumerablePropertySource<?> propertySource = new OriginCapablePropertySource<>(new MapPropertySource(\"test\",source))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "source.put(\"faf\",\"value\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(adapter.containsDescendantOf(ConfigurationPropertyName.of(\"faf\"))).isEqualTo(ConfigurationPropertyState.ABSENT)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "containsDescendantOfShouldReturnEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "PropertySource<?> propertySource = new MapPropertySource(\"test\",source)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(adapter.containsDescendantOf(ConfigurationPropertyName.of(\"foo\"))).isEqualTo(ConfigurationPropertyState.PRESENT)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "SpringConfigurationPropertySource adapter = new SpringConfigurationPropertySource(propertySource,DefaultPropertyMapper.INSTANCE)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(propertySource,DefaultPropertyMapper.INSTANCE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(adapter.containsDescendantOf(ConfigurationPropertyName.of(\"fof\"))).isEqualTo(ConfigurationPropertyState.ABSENT)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "source.put(\"foo.bar\",\"value\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Map<String,Object> source = new LinkedHashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(adapter.containsDescendantOf(ConfigurationPropertyName.of(\"foo\"))).isEqualTo(ConfigurationPropertyState.UNKNOWN)@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "containsDescendantOfShouldCheckSourceNames['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4->0 [style = solid, label="source"];
5->10 [style = bold, label=""];
11->14 [style = bold, label=""];
9->4 [style = bold, label=""];
12->11 [style = bold, label=""];
1->3 [style = bold, label=""];
4->13 [style = solid, label="source"];
2->4 [style = bold, label=""];
7->3 [style = bold, label=""];
0->7 [style = bold, label=""];
6->4 [style = bold, label=""];
0->7 [style = solid, label="propertySource"];
5->0 [style = bold, label=""];
10->13 [style = bold, label=""];
0->1 [style = solid, label="propertySource"];
0->1 [style = bold, label=""];
13->8 [style = solid, label="propertySource"];
13->8 [style = bold, label=""];
1->7 [style = dashed, label="0"];
4->5 [style = bold, label=""];
8->12 [style = bold, label=""];
}
