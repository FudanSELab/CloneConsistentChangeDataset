digraph {
11 [style = filled, label = "testHarness.open()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "OperatorSubtaskState snapshot = testHarness.snapshot(0,0)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),3000))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),3999))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectedOutput.add(new Watermark(1999))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "writeReducingEventTimeWindowsSnapshot['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),20))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator<>())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "OperatorSnapshotUtil.writeStateHandle(snapshot,\"src/test/resources/win-op-migration-test-reduce-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "OperatorStateHandles snapshot = testHarness.snapshot(0,0)@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ListStateDescriptor<Tuple2<String,Integer>> stateDesc = new ListStateDescriptor<>(\"window-contents\",inputType.createSerializer(new ExecutionConfig()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),0))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator = new WindowOperator<>(TumblingEventTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),EventTimeTrigger.create(),0,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "OperatorSnapshotUtil.writeStateHandle(snapshot,\"src/test/resources/win-op-migration-test-apply-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "writeReducingEventTimeWindowsSnapshot['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final int windowSize = 3@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),999))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1000))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1999))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1998))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testHarness.setup()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testHarness.processWatermark(new Watermark(999))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expectedOutput.add(new Watermark(999))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Iterable<Tuple2<String,Integer>>,Tuple2<String,Integer>,TimeWindow> operator = new WindowOperator<>(TumblingEventTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),EventTimeTrigger.create(),0,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "writeApplyEventTimeWindowsSnapshot['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator<>())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testHarness.processWatermark(new Watermark(1999))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testHarness.close()@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",new SumReducer<>(),inputType.createSerializer(new ExecutionConfig()))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->17 [style = bold, label=""];
29->8 [style = bold, label=""];
18->3 [style = bold, label=""];
16->13 [style = bold, label=""];
4->24 [style = bold, label=""];
23->5 [style = bold, label=""];
26->7 [style = bold, label=""];
5->9 [style = bold, label=""];
23->10 [style = solid, label="windowSize"];
21->15 [style = bold, label=""];
10->19 [style = bold, label=""];
11->6 [style = bold, label=""];
3->14 [style = bold, label=""];
22->29 [style = bold, label=""];
10->31 [style = dashed, label="0"];
12->26 [style = bold, label=""];
26->7 [style = solid, label="snapshot"];
9->10 [style = bold, label=""];
30->31 [style = solid, label="stateDesc"];
7->8 [style = bold, label=""];
20->25 [style = bold, label=""];
15->18 [style = bold, label=""];
9->10 [style = solid, label="stateDesc"];
25->2 [style = bold, label=""];
22->7 [style = bold, label=""];
1->23 [style = bold, label=""];
22->29 [style = solid, label="snapshot"];
10->4 [style = solid, label="operator"];
19->18 [style = solid, label="expectedOutput"];
2->21 [style = bold, label=""];
24->11 [style = bold, label=""];
30->31 [style = bold, label=""];
28->23 [style = bold, label=""];
22->7 [style = solid, label="snapshot"];
14->12 [style = bold, label=""];
23->31 [style = solid, label="windowSize"];
0->20 [style = bold, label=""];
27->23 [style = bold, label=""];
31->4 [style = solid, label="operator"];
7->29 [style = dashed, label="0"];
19->4 [style = bold, label=""];
5->30 [style = bold, label=""];
31->19 [style = bold, label=""];
12->22 [style = bold, label=""];
9->30 [style = dashed, label="0"];
17->16 [style = bold, label=""];
13->0 [style = bold, label=""];
19->12 [style = solid, label="expectedOutput"];
22->26 [style = dashed, label="0"];
}
