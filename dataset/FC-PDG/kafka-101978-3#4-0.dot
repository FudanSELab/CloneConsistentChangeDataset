digraph {
5 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@89@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "expectLastCall()@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final Task task00 = new StateMachineTask(taskId00,taskId00Partitions,true){@Override public Collection<TopicPartition> changelogPartitions(){return singletonList(changelog)}}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expectLastCall()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(asList(task00,task01,task02,task03)).anyTimes()@@@65@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(task00.state(),is(Task.State.RESTORING))@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expectLastCall()@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertThat(task02.state(),is(Task.State.RUNNING))@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "changeLogReader.remove(eq(singletonList(changelog)))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(task01.state(),is(Task.State.RUNNING))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "taskManager.handleAssignment(assignment,emptyMap())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(asList(task00,task01,task02)).anyTimes()@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "resetToStrict(changeLogReader)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertThat(exception.getMessage(),is(\"Unexpected exception while closing task\"))@@@101@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertThat(exception.getMessage(),is(\"Unexpected exception while closing task\"))@@@54@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(task02.state(),is(Task.State.CLOSED))@@@99@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
76 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 2\"))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId00))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions),mkEntry(taskId02,taskId02Partitions),mkEntry(taskId03,taskId03Partitions))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "assertThat(exception.getCause().getMessage(),is(\"oops\"))@@@55@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "assertThat(task03.state(),is(Task.State.CLOSED))@@@100@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "assertThat(task00.state(),is(Task.State.CREATED))@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "final AtomicBoolean closedDirtyTask02 = new AtomicBoolean(false)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "verify(activeTaskCreator,changeLogReader)@@@105@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "shouldCloseActiveTasksAndPropagateExceptionsOnCleanShutdown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(task02.state(),is(Task.State.CREATED))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever all\"))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "changeLogReader.transitToRestoreActive()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@49@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(closedDirtyTask02.get(),is(true))@@@94@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.anEmptyMap())@@@103@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "final TopicPartition changelog = new TopicPartition(\"changelog\",0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01),mkEntry(taskId02,task02),mkEntry(taskId03,task03))))@@@88@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "final Task task03 = new StateMachineTask(taskId03,taskId03Partitions,true){@Override public Map<TopicPartition,OffsetAndMetadata> committableOffsetsAndMetadata(){throw new RuntimeException(\"oops\")}@Override public void prepareCloseDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c9403fprepareClosedDirtyTask03.set(true)}@Override public void closeDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c94049closedDirtyTask03.set(true)}}@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertThat(task01.state(),is(Task.State.CLOSED))@@@52@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(task02.state(),is(Task.State.CLOSED))@@@53@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final Task task01 = new StateMachineTask(taskId01,taskId01Partitions,true){@Override public void closeClean(){throw new TaskMigratedException(\"migrated\",new RuntimeException(\"cause\"))}}@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@104@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
55 [style = filled, label = "final AtomicBoolean closedDirtyTask03 = new AtomicBoolean(false)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId01))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expect(changeLogReader.completedChangelogs()).andReturn(emptySet())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "final RuntimeException exception = assertThrows(,null)@@@90@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "assertThat(prepareClosedDirtyTask02.get(),is(true))@@@93@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
69 [style = filled, label = "assertThat(task01.state(),is(Task.State.CLOSED))@@@98@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertThat(task00.state(),is(Task.State.CLOSED))@@@51@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "taskManager.shutdown(false)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "expectLastCall()@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(task01.state(),is(Task.State.CREATED))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask02 = new AtomicBoolean(false)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.anEmptyMap())@@@54@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01),mkEntry(taskId02,task02))))@@@48@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "replay(activeTaskCreator,standbyTaskCreator,changeLogReader)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "shouldCloseActiveTasksAndPropagateExceptionsOnCleanShutdown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "assertThat(task03.state(),is(Task.State.CREATED))@@@82@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "assertThat(prepareClosedDirtyTask03.get(),is(true))@@@95@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "taskManager.tryToCompleteRestoration()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "shouldCloseActiveTasksAndIgnoreExceptionsOnUncleanShutdown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "verify(activeTaskCreator,changeLogReader)@@@56@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@55@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 0\"))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask01 = new AtomicBoolean(false)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "expectLastCall()@@@75@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "assertThat(exception.getCause().getMessage(),is(\"oops\"))@@@102@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
67 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId03))@@@72@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions),mkEntry(taskId02,taskId02Partitions))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask03 = new AtomicBoolean(false)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final Task task02 = new StateMachineTask(taskId02,taskId02Partitions,true){@Override public void closeClean(){throw new RuntimeException(\"oops\")}}@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expectLastCall()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "assertThat(task03.state(),is(Task.State.RUNNING))@@@87@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "activeTaskCreator.closeThreadProducerIfNeeded()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "final AtomicBoolean closedDirtyTask01 = new AtomicBoolean(false)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
77 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 1\"))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "expectLastCall()@@@73@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "assertThat(prepareClosedDirtyTask01.get(),is(true))@@@91@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "assertThat(closedDirtyTask03.get(),is(true))@@@96@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "assertThat(closedDirtyTask01.get(),is(true))@@@92@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId02))@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61->45 [style = bold, label=""];
16->37 [style = bold, label=""];
34->20 [style = bold, label=""];
12->5 [style = bold, label=""];
24->77 [style = bold, label=""];
69->46 [style = bold, label=""];
32->12 [style = bold, label=""];
36->29 [style = bold, label=""];
3->32 [style = solid, label="task01"];
68->50 [style = bold, label=""];
59->7 [style = solid, label="assignment"];
20->70 [style = bold, label=""];
14->17 [style = bold, label=""];
34->59 [style = dashed, label="0"];
9->10 [style = bold, label=""];
63->54 [style = solid, label="task03"];
27->15 [style = bold, label=""];
1->23 [style = bold, label=""];
37->9 [style = bold, label=""];
45->57 [style = bold, label=""];
22->59 [style = bold, label=""];
38->30 [style = bold, label=""];
10->75 [style = bold, label=""];
37->60 [style = bold, label=""];
51->61 [style = bold, label=""];
35->67 [style = bold, label=""];
22->16 [style = solid, label="changelog"];
34->7 [style = solid, label="assignment"];
35->38 [style = bold, label=""];
9->60 [style = dashed, label="0"];
54->5 [style = bold, label=""];
13->14 [style = bold, label=""];
67->52 [style = bold, label=""];
42->15 [style = bold, label=""];
47->48 [style = bold, label=""];
5->51 [style = dashed, label="0"];
75->24 [style = bold, label=""];
39->8 [style = bold, label=""];
76->38 [style = bold, label=""];
4->18 [style = bold, label=""];
30->74 [style = dashed, label="0"];
20->3 [style = bold, label=""];
3->54 [style = solid, label="task01"];
49->62 [style = bold, label=""];
50->49 [style = bold, label=""];
3->0 [style = bold, label=""];
29->26 [style = bold, label=""];
5->21 [style = bold, label=""];
26->16 [style = bold, label=""];
6->4 [style = bold, label=""];
43->66 [style = bold, label=""];
11->76 [style = bold, label=""];
31->27 [style = bold, label=""];
56->13 [style = bold, label=""];
33->36 [style = bold, label=""];
53->68 [style = bold, label=""];
5->72 [style = dashed, label="0"];
28->24 [style = bold, label=""];
72->21 [style = bold, label=""];
23->7 [style = bold, label=""];
18->41 [style = bold, label=""];
44->22 [style = bold, label=""];
19->22 [style = bold, label=""];
59->20 [style = bold, label=""];
71->54 [style = bold, label=""];
64->55 [style = bold, label=""];
17->40 [style = bold, label=""];
0->32 [style = solid, label="task02"];
25->77 [style = dashed, label="0"];
40->71 [style = bold, label=""];
4->31 [style = bold, label=""];
58->53 [style = bold, label=""];
8->2 [style = bold, label=""];
7->39 [style = bold, label=""];
24->25 [style = bold, label=""];
70->47 [style = bold, label=""];
40->32 [style = bold, label=""];
66->42 [style = bold, label=""];
12->72 [style = bold, label=""];
0->63 [style = bold, label=""];
57->43 [style = bold, label=""];
41->31 [style = bold, label=""];
77->11 [style = bold, label=""];
20->32 [style = solid, label="task00"];
10->28 [style = bold, label=""];
5->51 [style = bold, label=""];
30->1 [style = bold, label=""];
63->33 [style = bold, label=""];
38->74 [style = bold, label=""];
21->6 [style = bold, label=""];
15->69 [style = bold, label=""];
28->75 [style = dashed, label="0"];
65->64 [style = bold, label=""];
52->38 [style = bold, label=""];
46->58 [style = bold, label=""];
35->76 [style = dashed, label="0"];
55->3 [style = bold, label=""];
20->54 [style = solid, label="task00"];
73->22 [style = bold, label=""];
11->35 [style = bold, label=""];
2->13 [style = bold, label=""];
0->33 [style = bold, label=""];
25->11 [style = bold, label=""];
0->54 [style = solid, label="task02"];
22->34 [style = bold, label=""];
60->10 [style = bold, label=""];
74->1 [style = bold, label=""];
22->20 [style = solid, label="changelog"];
48->65 [style = bold, label=""];
2->56 [style = bold, label=""];
}
