digraph {
1 [style = filled, label = "input.add(new AcknowledgeIdsForCheckpoint<>(1,asList(\"idsFor1\",\"moreIdsFor1\")))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(actual,hasSize(3))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(actual.get(2).getCheckpointId(),is(94L))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "AcknowledgeOnCheckpoint<String> acknowledgeOnCheckpoint = new AcknowledgeOnCheckpoint<>(mockedAcknowledger)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<AcknowledgeIdsForCheckpoint<String>> actual = acknowledgeOnCheckpoint.snapshotState(2,100)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testAddAcknowledgeIdOnExistingState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(actual.get(2).getCheckpointId(),is(2L))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "input.add(new AcknowledgeIdsForCheckpoint<>(0,asList(\"idsFor0\",\"moreIdsFor0\")))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(actual.get(1),equalTo(input.get(1)))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "acknowledgeOnCheckpoint.addAcknowledgeId(\"ackId\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "List<AcknowledgeIdsForCheckpoint<String>> actual = acknowledgeOnCheckpoint.snapshotState(94,100)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(acknowledgeOnCheckpoint.numberOfOutstandingAcknowledgements(),is(4))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(actual.get(2).getAcknowledgeIds(),hasSize(0))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<AcknowledgeIdsForCheckpoint<String>> input = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(actual.get(2).getAcknowledgeIds(),containsInAnyOrder(\"ackId\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(actual.get(0),equalTo(input.get(0)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "acknowledgeOnCheckpoint.restoreState(input)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(acknowledgeOnCheckpoint.numberOfOutstandingAcknowledgements(),is(5))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testRestoreStateAndSnapshot['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "testRestoreStateAndSnapshot['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
5->10 [style = bold, label=""];
19->18 [style = bold, label=""];
16->10 [style = bold, label=""];
4->19 [style = bold, label=""];
10->4 [style = solid, label="input"];
14->17 [style = bold, label=""];
11->7 [style = solid, label="actual"];
2->15 [style = dashed, label="0"];
12->4 [style = bold, label=""];
8->2 [style = bold, label=""];
18->6 [style = bold, label=""];
11->19 [style = dashed, label="0"];
0->1 [style = bold, label=""];
3->8 [style = bold, label=""];
10->0 [style = bold, label=""];
7->6 [style = bold, label=""];
17->15 [style = bold, label=""];
9->14 [style = bold, label=""];
1->12 [style = bold, label=""];
9->3 [style = bold, label=""];
8->17 [style = dashed, label="0"];
6->9 [style = bold, label=""];
3->14 [style = dashed, label="0"];
4->11 [style = bold, label=""];
11->7 [style = bold, label=""];
}
