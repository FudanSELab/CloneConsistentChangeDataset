digraph {
16 [style = filled, label = "assertEquals(5,call(0()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "to.assertFuseable().assertFusionMode(QueueFuseable.SYNC).assertResult(1,2,3,4,5)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final int(( call = {0,0}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(5,call(0()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "to.assertFuseable().assertFusionMode(QueueFuseable.ASYNC).assertResult(1,2,3,4,5)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "UnicastSubject<Integer> up = UnicastSubject.create()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "TestHelper.emit(us,1,2,3,4,5)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "fusedConditional['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "up.doOnNext(new Consumer<Integer>(){@Override public void accept(Integer v){call(0(++}}).doOnComplete(new Action(){@Override public void run(){call(1(++}}).filter(Functions.alwaysTrue()).subscribe(to)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "fusedAsyncConditional['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Observable.range(1,5).doOnNext(new Consumer<Integer>(){@Override public void accept(Integer v){call(0(++}}).doOnComplete(new Action(){@Override public void run(){call(1(++}}).filter(Functions.alwaysTrue()).subscribe(to)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestHelper.emit(up,1,2,3,4,5)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "fusedAsyncConditional['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertEquals(1,call(1()@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(1,call(1()@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "us.doOnNext(new Consumer<Integer>(){@Override public void accept(Integer v){call(0(++}}).doOnComplete(new Action(){@Override public void run(){call(1(++}}).filter(Functions.alwaysTrue()).subscribe(to)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "UnicastSubject<Integer> us = UnicastSubject.create()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->9 [style = bold, label=""];
4->14 [style = bold, label=""];
5->14 [style = dashed, label="0"];
4->16 [style = solid, label="call"];
2->3 [style = bold, label=""];
4->8 [style = solid, label="call"];
4->17 [style = solid, label="call"];
10->3 [style = bold, label=""];
4->7 [style = solid, label="call"];
5->9 [style = dashed, label="0"];
6->0 [style = bold, label=""];
16->17 [style = bold, label=""];
0->14 [style = solid, label="to"];
13->16 [style = bold, label=""];
8->7 [style = bold, label=""];
2->10 [style = dashed, label="0"];
5->2 [style = solid, label="up"];
1->12 [style = dashed, label="0"];
5->1 [style = bold, label=""];
12->10 [style = bold, label=""];
11->0 [style = bold, label=""];
0->4 [style = bold, label=""];
0->1 [style = solid, label="to"];
2->13 [style = dashed, label="0"];
3->8 [style = bold, label=""];
15->0 [style = bold, label=""];
9->10 [style = solid, label="us"];
1->2 [style = bold, label=""];
9->12 [style = bold, label=""];
14->13 [style = bold, label=""];
0->12 [style = solid, label="to"];
4->5 [style = bold, label=""];
}
