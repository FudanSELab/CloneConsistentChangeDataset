digraph {
29 [style = filled, label = "Assert.assertEquals(expectedMetrics,reportData.getRowStats())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "recordSupplier.assign(EasyMock.anyObject())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "recordSupplier.close()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testRunOnSingletonRange['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(unparseableEvents,reportData.getUnparseableEvents())@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "TaskStatus status = future.get()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Map<String,Object> unparseableEvents = ImmutableMap.of(RowIngestionMeters.BUILD_SEGMENTS,Arrays.asList(\"Unable to parse row (unparseable2(\",\"Unable to parse row (unparseable(\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2010/P1D\",0)),publishedDescriptors())@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "maxSavedParseExceptions = 2@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertNull(metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Map<String,Object> expectedMetrics = ImmutableMap.of(RowIngestionMeters.BUILD_SEGMENTS,ImmutableMap.of(RowIngestionMeters.PROCESSED,3,RowIngestionMeters.PROCESSED_WITH_ERROR,0,RowIngestionMeters.UNPARSEABLE,3,RowIngestionMeters.THROWN_AWAY,0))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"2\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"2\")),true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "testMultipleParseExceptionsFailure['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getProcessedWithError())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(ImmutableList.of(),publishedDescriptors())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "insertData()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(2,3)).once()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "maxParseExceptions = 2@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "verifyAll()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "reportParseExceptions = false@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "IngestionStatsAndErrorsTaskReportData reportData = getTaskReportData()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(TaskState.FAILED,status.getStatusCode())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "replayAll()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"2\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"2\")),true,null,null,INPUT_FORMAT,\"awsEndpoint\",null,null,null,null,false))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "IndexTaskTest.checkTaskStatusErrorMsgForParseExceptionsExceeded(status)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testRunOnSingletonRange['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "recordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getProcessed())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(recordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EasyMock.expectLastCall().once()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->39 [style = bold, label=""];
28->29 [style = bold, label=""];
15->13 [style = bold, label=""];
28->29 [style = solid, label="expectedMetrics"];
10->15 [style = bold, label=""];
24->35 [style = bold, label=""];
34->1 [style = bold, label=""];
16->6 [style = bold, label=""];
9->4 [style = bold, label=""];
27->30 [style = bold, label=""];
29->31 [style = bold, label=""];
30->23 [style = bold, label=""];
37->20 [style = bold, label=""];
31->36 [style = bold, label=""];
22->32 [style = bold, label=""];
0->1 [style = solid, label="task"];
3->16 [style = bold, label=""];
32->33 [style = bold, label=""];
1->9 [style = bold, label=""];
26->22 [style = bold, label=""];
19->16 [style = bold, label=""];
6->14 [style = bold, label=""];
8->17 [style = bold, label=""];
25->27 [style = bold, label=""];
23->28 [style = bold, label=""];
21->26 [style = bold, label=""];
5->27 [style = dashed, label="0"];
12->10 [style = bold, label=""];
31->36 [style = solid, label="unparseableEvents"];
17->0 [style = bold, label=""];
18->1 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
18->1 [style = solid, label="task"];
17->18 [style = bold, label=""];
14->12 [style = bold, label=""];
22->33 [style = solid, label="status"];
7->34 [style = dashed, label="0"];
38->21 [style = bold, label=""];
0->18 [style = dashed, label="0"];
35->38 [style = bold, label=""];
39->25 [style = bold, label=""];
13->8 [style = bold, label=""];
4->11 [style = bold, label=""];
20->24 [style = bold, label=""];
33->34 [style = bold, label=""];
11->7 [style = bold, label=""];
2->5 [style = bold, label=""];
21->26 [style = solid, label="task"];
}
