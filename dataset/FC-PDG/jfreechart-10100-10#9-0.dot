digraph {
19 [style = filled, label = "c1.setOutlineStroke(new BasicStroke(2.0f))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "MyDialLayerChangeListener l1 = new MyDialLayerChangeListener()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertFalse(c2.hasListener(l1))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(c1.equals(c2))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "c1 = new DialCap()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(c1,c2)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(c1.hasListener(l1))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "DialCap c2 = (DialCap)TestUtils.serialised(c1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(c1.getClass() == c2.getClass())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "c1.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.GRAY))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(c1 != c2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "c1.addChangeListener(l1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "DialCap c2 = (DialCap)c1.clone()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "c2 = (DialCap)TestUtils.serialised(c1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "DialCap c2 = CloneUtils.clone(c1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "DialCap c1 = new DialCap()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "c1.setFillPaint(new GradientPaint(1.0f,2.0f,Color.BLUE,3.0f,4.0f,Color.GREEN))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(c1,c2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11->4 [style = solid, label="c2"];
5->8 [style = bold, label=""];
15->13 [style = bold, label=""];
7->11 [style = bold, label=""];
2->5 [style = solid, label="l1"];
13->12 [style = solid, label="c1"];
11->1 [style = bold, label=""];
6->20 [style = dashed, label="0"];
1->15 [style = dashed, label="0"];
6->11 [style = dashed, label="0"];
1->3 [style = bold, label=""];
18->19 [style = bold, label=""];
20->15 [style = solid, label="c2"];
4->2 [style = bold, label=""];
7->20 [style = bold, label=""];
16->12 [style = solid, label="c2"];
0->12 [style = dashed, label="0"];
9->7 [style = bold, label=""];
3->4 [style = bold, label=""];
10->7 [style = bold, label=""];
6->1 [style = solid, label="c2"];
7->15 [style = solid, label="c1"];
19->16 [style = bold, label=""];
8->0 [style = bold, label=""];
17->7 [style = bold, label=""];
7->11 [style = solid, label="c1"];
6->1 [style = bold, label=""];
13->16 [style = solid, label="c1"];
7->1 [style = solid, label="c1"];
2->8 [style = solid, label="l1"];
11->1 [style = solid, label="c2"];
7->6 [style = bold, label=""];
2->0 [style = solid, label="l1"];
6->4 [style = solid, label="c2"];
14->18 [style = bold, label=""];
20->15 [style = bold, label=""];
13->14 [style = bold, label=""];
16->12 [style = bold, label=""];
7->20 [style = solid, label="c1"];
2->5 [style = bold, label=""];
}
