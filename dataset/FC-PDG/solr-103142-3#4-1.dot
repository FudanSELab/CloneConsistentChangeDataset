digraph {
17 [style = filled, label = "assertEquals(\"norm 20\",0.25F,sim.computeLengthNorm(20),0.0F)@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "i++@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"norm 5\",1.00F,sim.computeLengthNorm(5),0.0F)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "i <= 6@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "int i = 0@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int i = 6@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertTrue(\"norm 6 too high: \" + sim.computeLengthNorm(6),sim.computeLengthNorm(6) < 1.0F)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertTrue(\"tf: i=\" + i + \" : s=\" + sim.tf(i) + \" < d=\" + d.tf(i),sim.tf(i) < d.tf(i))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"tf: i=\" + i,d.tf(i),sim.tf(i),0.0F)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(\"norm 7 higher then norm 6\",sim.computeLengthNorm(7) < sim.computeLengthNorm(6))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "i <= 1000@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ClassicSimilarity d = new ClassicSimilarity()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "int i = 1@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "i++@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testDefaults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testDefaults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "SweetSpotSimilarity sim = getSimilarity(\"text_baseline\",)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\"norm 3\",1.00F,sim.computeLengthNorm(3),0.0F)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"tf i=\" + i,1.5F,sim.tf(i),0.0F)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(\"norm 2 == 6\",sim.computeLengthNorm(1),sim.computeLengthNorm(7),0.0F)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"norm 1\",1.00F,sim.computeLengthNorm(1),0.0F)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testBaselineParameters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "i++@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DefaultSimilarity d = new DefaultSimilarity()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i <= 1000@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "SweetSpotSimilarity sim = getSimilarity(\"text\",)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"norm 4\",1.00F,sim.computeLengthNorm(4),0.0F)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"norm 1 == 7\",sim.computeLengthNorm(1),sim.computeLengthNorm(7),0.0F)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18->9 [style = solid, label="i"];
6->3 [style = bold, label=""];
0->9 [style = bold, label=""];
14->25 [style = bold, label=""];
2->19 [style = dashed, label="0"];
1->6 [style = solid, label="i"];
5->20 [style = bold, label=""];
7->3 [style = solid, label="i"];
11->1 [style = bold, label=""];
3->24 [style = dashed, label="0"];
23->15 [style = bold, label=""];
16->26 [style = bold, label=""];
18->24 [style = solid, label="i"];
6->0 [style = bold, label=""];
4->2 [style = bold, label=""];
8->21 [style = dashed, label="0"];
9->8 [style = bold, label=""];
8->9 [style = solid, label="i"];
15->18 [style = bold, label=""];
13->16 [style = bold, label=""];
8->24 [style = solid, label="i"];
26->22 [style = bold, label=""];
23->12 [style = solid, label="i"];
9->8 [style = dotted, label="true"];
1->20 [style = dashed, label="0"];
0->14 [style = dashed, label="0"];
19->5 [style = bold, label=""];
5->1 [style = bold, label=""];
9->24 [style = dotted, label="true"];
1->6 [style = bold, label=""];
23->15 [style = solid, label="i"];
5->11 [style = dashed, label="0"];
3->7 [style = bold, label=""];
21->13 [style = bold, label=""];
20->23 [style = solid, label="i"];
7->6 [style = bold, label=""];
9->25 [style = dashed, label="0"];
18->9 [style = bold, label=""];
9->14 [style = bold, label=""];
8->9 [style = bold, label=""];
6->7 [style = dotted, label="true"];
22->17 [style = bold, label=""];
20->12 [style = solid, label="i"];
15->12 [style = dotted, label="true"];
10->2 [style = bold, label=""];
15->12 [style = bold, label=""];
12->23 [style = bold, label=""];
27->19 [style = bold, label=""];
7->6 [style = solid, label="i"];
24->8 [style = bold, label=""];
1->3 [style = solid, label="i"];
6->3 [style = dotted, label="true"];
15->23 [style = dotted, label="true"];
20->15 [style = bold, label=""];
2->11 [style = bold, label=""];
9->24 [style = bold, label=""];
1->7 [style = solid, label="i"];
25->21 [style = bold, label=""];
20->15 [style = solid, label="i"];
2->5 [style = bold, label=""];
18->8 [style = solid, label="i"];
}
