digraph {
3 [style = filled, label = "Assert.assertEquals(\"Table version should be 0\",0,(long)TestTables.metadataVersion(\"unpartitioned\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "File tableDir = temp.newFolder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Table unpartitioned = TestTables.create(tableDir,\"unpartitioned\",SCHEMA,PartitionSpec.unpartitioned(),formatVersion)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(\"Table version should be 1\",1,(long)TestTables.metadataVersion(\"unpartitioned\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(\"Table should have 1 manifest\",1,replaceMetadata.currentSnapshot().manifests().size())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "validateManifestEntries(replaceMetadata.currentSnapshot().manifests().get(0),ids(replaceId,replaceId),files(FILE_B,FILE_A),statuses(Status.ADDED,Status.DELETED))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(\"Table version should be 2\",2,(long)TestTables.metadataVersion(\"unpartitioned\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "unpartitioned.newAppend().appendFile(FILE_A).commit()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"Table should have 2 manifests\",2,replaceMetadata.currentSnapshot().allManifests().size())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "validateManifestEntries(replaceMetadata.currentSnapshot().allManifests().get(1),ids(replaceId),files(FILE_A),statuses(Status.DELETED))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "TableMetadata replaceMetadata = TestTables.readMetadata(\"unpartitioned\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "validateManifestEntries(replaceMetadata.currentSnapshot().manifests().get(0),ids(replaceId),files(FILE_B),statuses(Status.ADDED))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "validateSnapshot(null,TestTables.readMetadata(\"unpartitioned\").currentSnapshot(),FILE_A)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "validateManifestEntries(replaceMetadata.currentSnapshot().allManifests().get(0),ids(replaceId),files(FILE_B),statuses(Status.ADDED))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "unpartitioned.newAppend().appendFile(FILE_A).commit()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"Table should have 2 manifests\",2,replaceMetadata.currentSnapshot().manifests().size())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "long replaceId = replaceMetadata.currentSnapshot().snapshotId()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "validateManifestEntries(replaceMetadata.currentSnapshot().manifests().get(1),ids(replaceId),files(FILE_A),statuses(Status.DELETED))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "testReplaceWithUnpartitionedTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "unpartitioned.newReplacePartitions().addFile(FILE_B).commit()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testReplaceAndMergeWithUnpartitionedTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(\"Table version should be 2\",2,(long)TestTables.metadataVersion(\"unpartitioned\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "unpartitioned.updateProperties().set(TableProperties.MANIFEST_MIN_MERGE_COUNT,\"1\").commit()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(\"Table version should be 3\",3,(long)TestTables.metadataVersion(\"unpartitioned\"))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testReplaceWithUnpartitionedTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertTrue(tableDir.delete())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->15 [style = dashed, label="0"];
0->9 [style = bold, label=""];
21->6 [style = bold, label=""];
23->4 [style = bold, label=""];
1->9 [style = dashed, label="0"];
9->17 [style = bold, label=""];
11->12 [style = bold, label=""];
7->4 [style = bold, label=""];
15->18 [style = bold, label=""];
8->22 [style = bold, label=""];
24->14 [style = bold, label=""];
6->14 [style = bold, label=""];
6->20 [style = bold, label=""];
3->5 [style = bold, label=""];
1->17 [style = dashed, label="0"];
13->8 [style = dashed, label="0"];
22->0 [style = bold, label=""];
5->6 [style = bold, label=""];
9->18 [style = solid, label="replaceId"];
9->25 [style = bold, label=""];
0->25 [style = solid, label="replaceId"];
9->2 [style = solid, label="replaceId"];
17->15 [style = bold, label=""];
2->18 [style = dashed, label="0"];
9->10 [style = solid, label="replaceId"];
10->2 [style = bold, label=""];
14->8 [style = bold, label=""];
12->3 [style = bold, label=""];
16->4 [style = bold, label=""];
9->1 [style = bold, label=""];
4->11 [style = bold, label=""];
12->19 [style = bold, label=""];
1->10 [style = bold, label=""];
20->24 [style = bold, label=""];
4->12 [style = solid, label="tableDir"];
10->25 [style = dashed, label="0"];
8->13 [style = bold, label=""];
9->15 [style = solid, label="replaceId"];
13->0 [style = bold, label=""];
19->21 [style = bold, label=""];
}
