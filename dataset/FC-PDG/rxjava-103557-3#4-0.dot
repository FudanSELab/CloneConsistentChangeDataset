digraph {
4 [style = filled, label = "assertFalse(it.hasNext())@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "{task.dispose()}@@@64@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Thread.sleep((int)(1000 * Math.pow(2,repeat - 1)))@@@62@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(\"a and b should be different\",a != b)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "running.set(false)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(it.hasNext())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final Observable<Integer> obs = Observable.unsafeCreate(new ObservableSource<Integer>(){@Override public void subscribe(final Observer<? super Integer> o){o.onSubscribe(Disposable.empty())task.replace(Schedulers.single().scheduleDirect(new Runnable(){@Override public void run(){try {while (running.get() && !task.isDisposed()) {o.onNext(count.incrementAndGet())timeHasPassed.countDown()}o.onComplete()}catch (Throwable e) {finished.countDown()}}}))}})@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "System.out.println(\"a: \" + a + \" b: \" + b + \" c: \" + c)@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "int a = it.next()@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "noBufferingOrBlockingOfSequence['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "int repeat = 0@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final AtomicBoolean running = new AtomicBoolean(true)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "AssertionError ex@@@58@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(it.hasNext())@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "throw ex@@@60@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "++repeat == 3@@@59@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "noBufferingOrBlockingOfSequence['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "int d = it.next()@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final int COUNT = 30@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final CountDownLatch timeHasPassed = new CountDownLatch(COUNT)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(\"c should not just be the next in sequence\",c != (b + 1))@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(it.hasNext())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(it.hasNext())@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int b = it.next()@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "finished.await()@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final Flowable<Integer> obs = Flowable.unsafeCreate(new Publisher<Integer>(){@Override public void subscribe(final Subscriber<? super Integer> subscriber){subscriber.onSubscribe(new BooleanSubscription())task.replace(Schedulers.single().scheduleDirect(new Runnable(){@Override public void run(){try {while (running.get() && !task.isDisposed()) {subscriber.onNext(count.incrementAndGet())timeHasPassed.countDown()}subscriber.onComplete()}catch (Throwable e) {finished.countDown()}}}))}})@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "int c = it.next()@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "timeHasPassed.await(8000,TimeUnit.MILLISECONDS)@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final CountDownLatch finished = new CountDownLatch(1)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Iterator<Integer> it = obs.blockingNext().iterator()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "noBufferingOrBlockingOfSequence['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "final SerialDisposable task = new SerialDisposable()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final AtomicInteger count = new AtomicInteger(0)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Iterator<Integer> it = next(obs).iterator()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(\"expected that c (\" + c + \"( is higher than or equal to \" + COUNT,c >= COUNT)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(d > c)@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->22 [style = bold, label=""];
26->11 [style = solid, label="c"];
20->23 [style = bold, label=""];
10->21 [style = bold, label=""];
26->18 [style = bold, label=""];
7->8 [style = bold, label=""];
8->12 [style = solid, label="COUNT"];
29->17 [style = dotted, label="true"];
27->25 [style = bold, label=""];
14->16 [style = bold, label=""];
16->26 [style = bold, label=""];
19->1 [style = bold, label=""];
22->0 [style = bold, label=""];
0->7 [style = bold, label=""];
26->18 [style = solid, label="c"];
12->2 [style = bold, label=""];
4->11 [style = bold, label=""];
26->12 [style = solid, label="c"];
33->34 [style = bold, label=""];
25->6 [style = solid, label="b"];
17->3 [style = bold, label=""];
1->24 [style = bold, label=""];
24->10 [style = bold, label=""];
28->11 [style = solid, label="a"];
26->13 [style = solid, label="c"];
3->5 [style = bold, label=""];
1->33 [style = bold, label=""];
28->27 [style = bold, label=""];
8->30 [style = solid, label="COUNT"];
25->18 [style = solid, label="b"];
31->13 [style = solid, label="d"];
5->0 [style = bold, label=""];
17->15 [style = dotted, label="true"];
6->14 [style = bold, label=""];
10->34 [style = dashed, label="0"];
17->15 [style = bold, label=""];
29->17 [style = bold, label=""];
25->11 [style = solid, label="b"];
2->31 [style = bold, label=""];
15->3 [style = bold, label=""];
32->22 [style = bold, label=""];
18->12 [style = bold, label=""];
31->13 [style = bold, label=""];
8->30 [style = bold, label=""];
13->20 [style = bold, label=""];
23->4 [style = bold, label=""];
35->22 [style = bold, label=""];
25->6 [style = bold, label=""];
30->19 [style = bold, label=""];
34->21 [style = bold, label=""];
29->3 [style = dotted, label="true"];
24->33 [style = dashed, label="0"];
21->28 [style = bold, label=""];
28->6 [style = solid, label="a"];
}
