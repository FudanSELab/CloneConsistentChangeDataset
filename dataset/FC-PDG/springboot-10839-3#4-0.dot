digraph {
2 [style = filled, label = "this.mockMvc.perform(get(\"/actuator/threaddump\").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andDo(MockMvcRestDocumentation.document(\"threaddump/json\",preprocessResponse(limit(\"threads\")),responseFields(fieldWithPath(\"threads\").description(\"JVM's threads.\"),fieldWithPath(\"threads.((.blockedCount\").description(\"Total number of times that the thread has been \" + \"blocked.\"),fieldWithPath(\"threads.((.blockedTime\").description(\"Time in milliseconds that the thread has spent \" + \"blocked. -1 if thread contention \" + \"monitoring is disabled.\"),fieldWithPath(\"threads.((.daemon\").description(\"Whether the thread is a daemon \" + \"thread. Only available on Java 9 or \" + \"later.\").optional().type(JsonFieldType.BOOLEAN),fieldWithPath(\"threads.((.inNative\").description(\"Whether the thread is executing native code.\"),fieldWithPath(\"threads.((.lockName\").description(\"Description of the object on which the \" + \"thread is blocked, if any.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.lockInfo\").description(\"Object for which the thread is blocked \" + \"waiting.\").optional().type(JsonFieldType.OBJECT),fieldWithPath(\"threads.((.lockInfo.className\").description(\"Fully qualified class name of the lock\" + \" object.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.lockInfo.identityHashCode\").description(\"Identity hash code of the lock object.\").optional().type(JsonFieldType.NUMBER),fieldWithPath(\"threads.((.lockedMonitors\").description(\"Monitors locked by this thread, if any\"),fieldWithPath(\"threads.((.lockedMonitors.((.className\").description(\"Class name of the lock object.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.lockedMonitors.((.identityHashCode\").description(\"Identity hash code of the lock \" + \"object.\").optional().type(JsonFieldType.NUMBER),fieldWithPath(\"threads.((.lockedMonitors.((.lockedStackDepth\").description(\"Stack depth where the monitor \" + \"was locked.\").optional().type(JsonFieldType.NUMBER),subsectionWithPath(\"threads.((.lockedMonitors.((.lockedStackFrame\").description(\"Stack frame that locked the \" + \"monitor.\").optional().type(JsonFieldType.OBJECT),fieldWithPath(\"threads.((.lockedSynchronizers\").description(\"Synchronizers locked by this thread.\"),fieldWithPath(\"threads.((.lockedSynchronizers.((.className\").description(\"Class name of the locked \" + \"synchronizer.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.lockedSynchronizers.((.identityHashCode\").description(\"Identity hash code of the locked \" + \"synchronizer.\").optional().type(JsonFieldType.NUMBER),fieldWithPath(\"threads.((.lockOwnerId\").description(\"ID of the thread that owns the object on which \" + \"the thread is blocked. `-1` if the \" + \"thread is not blocked.\"),fieldWithPath(\"threads.((.lockOwnerName\").description(\"Name of the thread that owns the \" + \"object on which the thread is \" + \"blocked, if any.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.priority\").description(\"Priority of the thread. Only \" + \"available on Java 9 or later.\").optional().type(JsonFieldType.NUMBER),fieldWithPath(\"threads.((.stackTrace\").description(\"Stack trace of the thread.\"),fieldWithPath(\"threads.((.stackTrace.((.classLoaderName\").description(\"Name of the class loader of the \" + \"class that contains the execution \" + \"point identified by this entry, if \" + \"any. Only available on Java 9 or \" + \"later.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.stackTrace.((.className\").description(\"Name of the class that contains the \" + \"execution point identified \" + \"by this entry.\"),fieldWithPath(\"threads.((.stackTrace.((.fileName\").description(\"Name of the source file that \" + \"contains the execution point \" + \"identified by this entry, if any.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.stackTrace.((.lineNumber\").description(\"Line number of the execution \" + \"point identified by this entry. \" + \"Negative if unknown.\"),fieldWithPath(\"threads.((.stackTrace.((.methodName\").description(\"Name of the method.\"),fieldWithPath(\"threads.((.stackTrace.((.moduleName\").description(\"Name of the module that contains \" + \"the execution point identified by \" + \"this entry, if any. Only available \" + \"on Java 9 or later.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.stackTrace.((.moduleVersion\").description(\"Version of the module that \" + \"contains the execution point \" + \"identified by this entry, if any. \" + \"Only available on Java 9 or later.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.stackTrace.((.nativeMethod\").description(\"Whether the execution point is a native \" + \"method.\"),fieldWithPath(\"threads.((.suspended\").description(\"Whether the thread is suspended.\"),fieldWithPath(\"threads.((.threadId\").description(\"ID of the thread.\"),fieldWithPath(\"threads.((.threadName\").description(\"Name of the thread.\"),fieldWithPath(\"threads.((.threadState\").description(\"State of the thread (\" + describeEnumValues() + \").\"),fieldWithPath(\"threads.((.waitedCount\").description(\"Total number of times that the thread has waited\" + \" for notification.\"),fieldWithPath(\"threads.((.waitedTime\").description(\"Time in milliseconds that the thread has spent \" + \"waiting. -1 if thread contention \" + \"monitoring is disabled\"))))@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "beans['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "jsonThreadDump['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "List<FieldDescriptor> beanFields = Arrays.asList(fieldWithPath(\"aliases\").description(\"Names of any aliases.\"),fieldWithPath(\"scope\").description(\"Scope of the bean.\"),fieldWithPath(\"type\").description(\"Fully qualified type of the bean.\"),fieldWithPath(\"resource\").description(\"Resource in which the bean was defined, if any.\").optional(),fieldWithPath(\"dependencies\").description(\"Names of any dependencies.\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "this.mockMvc.perform(get(\"/actuator/beans\")).andExpect(status().isOk()).andDo(document(\"beans\",preprocessResponse(limit(null,\"contexts\",getApplicationContext().getId(),\"beans\")),responseFields))@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "jsonThreadDump['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ResponseFieldsSnippet responseFields = responseFields(fieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"),parentIdField(),fieldWithPath(\"contexts.*.beans\").description(\"Beans in the application context keyed by name.\")).andWithPrefix(\"contexts.*.beans.*.\",beanFields)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "this.mockMvc.perform(get(\"/actuator/threaddump\").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andDo(MockMvcRestDocumentation.document(\"threaddump/json\",preprocessResponse(limit(\"threads\")),responseFields(fieldWithPath(\"threads\").description(\"JVM's threads.\"),fieldWithPath(\"threads.((.blockedCount\").description(\"Total number of times that the thread has been blocked.\"),fieldWithPath(\"threads.((.blockedTime\").description(\"Time in milliseconds that the thread has spent \" + \"blocked. -1 if thread contention \" + \"monitoring is disabled.\"),fieldWithPath(\"threads.((.daemon\").description(\"Whether the thread is a daemon \" + \"thread. Only available on Java 9 or later.\").optional().type(JsonFieldType.BOOLEAN),fieldWithPath(\"threads.((.inNative\").description(\"Whether the thread is executing native code.\"),fieldWithPath(\"threads.((.lockName\").description(\"Description of the object on which the \" + \"thread is blocked, if any.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.lockInfo\").description(\"Object for which the thread is blocked waiting.\").optional().type(JsonFieldType.OBJECT),fieldWithPath(\"threads.((.lockInfo.className\").description(\"Fully qualified class name of the lock object.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.lockInfo.identityHashCode\").description(\"Identity hash code of the lock object.\").optional().type(JsonFieldType.NUMBER),fieldWithPath(\"threads.((.lockedMonitors\").description(\"Monitors locked by this thread, if any\"),fieldWithPath(\"threads.((.lockedMonitors.((.className\").description(\"Class name of the lock object.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.lockedMonitors.((.identityHashCode\").description(\"Identity hash code of the lock object.\").optional().type(JsonFieldType.NUMBER),fieldWithPath(\"threads.((.lockedMonitors.((.lockedStackDepth\").description(\"Stack depth where the monitor was locked.\").optional().type(JsonFieldType.NUMBER),subsectionWithPath(\"threads.((.lockedMonitors.((.lockedStackFrame\").description(\"Stack frame that locked the monitor.\").optional().type(JsonFieldType.OBJECT),fieldWithPath(\"threads.((.lockedSynchronizers\").description(\"Synchronizers locked by this thread.\"),fieldWithPath(\"threads.((.lockedSynchronizers.((.className\").description(\"Class name of the locked synchronizer.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.lockedSynchronizers.((.identityHashCode\").description(\"Identity hash code of the locked synchronizer.\").optional().type(JsonFieldType.NUMBER),fieldWithPath(\"threads.((.lockOwnerId\").description(\"ID of the thread that owns the object on which \" + \"the thread is blocked. `-1` if the \" + \"thread is not blocked.\"),fieldWithPath(\"threads.((.lockOwnerName\").description(\"Name of the thread that owns the \" + \"object on which the thread is blocked, if any.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.priority\").description(\"Priority of the thread. Only \" + \"available on Java 9 or later.\").optional().type(JsonFieldType.NUMBER),fieldWithPath(\"threads.((.stackTrace\").description(\"Stack trace of the thread.\"),fieldWithPath(\"threads.((.stackTrace.((.classLoaderName\").description(\"Name of the class loader of the \" + \"class that contains the execution \" + \"point identified by this entry, if \" + \"any. Only available on Java 9 or later.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.stackTrace.((.className\").description(\"Name of the class that contains the \" + \"execution point identified by this entry.\"),fieldWithPath(\"threads.((.stackTrace.((.fileName\").description(\"Name of the source file that \" + \"contains the execution point \" + \"identified by this entry, if any.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.stackTrace.((.lineNumber\").description(\"Line number of the execution \" + \"point identified by this entry. \" + \"Negative if unknown.\"),fieldWithPath(\"threads.((.stackTrace.((.methodName\").description(\"Name of the method.\"),fieldWithPath(\"threads.((.stackTrace.((.moduleName\").description(\"Name of the module that contains \" + \"the execution point identified by \" + \"this entry, if any. Only available \" + \"on Java 9 or later.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.stackTrace.((.moduleVersion\").description(\"Version of the module that \" + \"contains the execution point \" + \"identified by this entry, if any. \" + \"Only available on Java 9 or later.\").optional().type(JsonFieldType.STRING),fieldWithPath(\"threads.((.stackTrace.((.nativeMethod\").description(\"Whether the execution point is a native method.\"),fieldWithPath(\"threads.((.suspended\").description(\"Whether the thread is suspended.\"),fieldWithPath(\"threads.((.threadId\").description(\"ID of the thread.\"),fieldWithPath(\"threads.((.threadName\").description(\"Name of the thread.\"),fieldWithPath(\"threads.((.threadState\").description(\"State of the thread (\" + describeEnumValues() + \").\"),fieldWithPath(\"threads.((.waitedCount\").description(\"Total number of times that the thread has waited\" + \" for notification.\"),fieldWithPath(\"threads.((.waitedTime\").description(\"Time in milliseconds that the thread has spent \" + \"waiting. -1 if thread contention \" + \"monitoring is disabled\"))))@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "ReentrantLock lock = new ReentrantLock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "new Thread(null).start()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "latch.countDown()@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7->5 [style = bold, label=""];
1->4 [style = bold, label=""];
9->10 [style = bold, label=""];
10->11 [style = solid, label="responseFields"];
4->7 [style = bold, label=""];
0->3 [style = bold, label=""];
10->11 [style = bold, label=""];
8->9 [style = bold, label=""];
6->3 [style = bold, label=""];
9->10 [style = solid, label="beanFields"];
3->1 [style = bold, label=""];
4->2 [style = bold, label=""];
2->5 [style = bold, label=""];
}
