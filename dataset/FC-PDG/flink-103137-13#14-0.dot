digraph {
5 [style = filled, label = "Assert.assertEquals(false,stateContext.isRestored())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(streamOperator.getOperatorID()).thenReturn(operatorID)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "verify(operatorStateBackend).restore(eq(operatorSubtaskState.getManagedOperatorState()))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "OperatorStateBackend operatorStateBackend = stateContext.operatorStateBackend()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "taskStateSnapshot.putSubtaskStateByOperatorID(operatorID,operatorSubtaskState)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "AbstractKeyedStateBackend<?> keyedStateBackend = stateContext.keyedStateBackend()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "CloseableRegistry closeableRegistry = new CloseableRegistry()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TypeSerializer<?> typeSerializer = new IntSerializer()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertNotNull(keyedStateBackend)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "int count = 0@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "AbstractStreamOperator<?> streamOperator = mock()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "++count@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "CloseableIterable<StatePartitionStreamProvider> operatorStateInputs = stateContext.rawOperatorStateInputs()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "OperatorStateBackend operatorStateBackend = stateContext.operatorStateBackend()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testWithRestore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(3,count)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "when(streamOperator.getOperatorID()).thenReturn(operatorID)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "count = 0@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "++count@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(stateBackend,null,true)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "StreamOperatorStateContext stateContext = streamTaskStateManager.streamOperatorStateContext(streamOperator.getOperatorID(),streamOperator.getClass().getSimpleName(),streamOperator,typeSerializer,closeableRegistry,new UnregisteredMetricsGroup())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "StateBackend mockingBackend = spy(new StateBackend(){@Override public CompletedCheckpointStorageLocation resolveCheckpoint(String pointer){throw new UnsupportedOperationException()}@Override public CheckpointStorage createCheckpointStorage(JobID jobId){throw new UnsupportedOperationException()}@Override public AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env,JobID jobID,String operatorIdentifier,TypeSerializer<K> keySerializer,int numberOfKeyGroups,KeyGroupRange keyGroupRange,TaskKvStateRegistry kvStateRegistry,TtlTimeProvider ttlTimeProvider){return mock()}@Override public OperatorStateBackend createOperatorStateBackend(Environment env,String operatorIdentifier){return mock()}})@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "InternalTimeServiceManager<?> timeServiceManager = stateContext.internalTimerServiceManager()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "CloseableRegistry closeableRegistry = new CloseableRegistry()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testNoRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Assert.assertNotNull(operatorStateBackend)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs)@@@57@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Assert.assertNotNull(operatorStateBackend)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testNoRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "AbstractStreamOperator<?> streamOperator = mock()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "AbstractKeyedStateBackend<?> keyedStateBackend = stateContext.keyedStateBackend()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "TaskStateSnapshot taskStateSnapshot = new TaskStateSnapshot()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "StreamOperatorStateContext stateContext = streamTaskStateManager.streamOperatorStateContext(streamOperator.getOperatorID(),streamOperator.getClass().getSimpleName(),streamOperator,typeSerializer,closeableRegistry)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "TypeSerializer<?> typeSerializer = new IntSerializer()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "OperatorID operatorID = new OperatorID(47L,11L)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "JobManagerTaskRestore jobManagerTaskRestore = new JobManagerTaskRestore(0L,taskStateSnapshot)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(true,stateContext.isRestored())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "StreamOperatorStateContext stateContext = streamTaskStateManager.streamOperatorStateContext(streamOperator.getOperatorID(),streamOperator.getClass().getSimpleName(),streamOperator,typeSerializer,closeableRegistry)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "verify(keyedStateBackend).restore(eq(operatorSubtaskState.getManagedKeyedState()))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "MemoryStateBackend stateBackend = spy(new MemoryStateBackend(1024))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(mockingBackend,jobManagerTaskRestore,false)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "Assert.assertEquals(1,count)@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Assert.assertNull(timeServiceManager)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertNotNull(operatorStateInputs)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs = stateContext.rawKeyedStateInputs()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "InternalTimeServiceManager<?> timeServiceManager = stateContext.internalTimerServiceManager()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertNotNull(keyedStateInputs)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(new OperatorStreamStateHandle(Collections.singletonMap(\"a\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc45ee,OperatorStateHandle.Mode.SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random)),new OperatorStreamStateHandle(Collections.singletonMap(\"_default_\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc4604,OperatorStateHandle.Mode.SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random)),CheckpointTestUtils.createDummyKeyGroupStateHandle(random),CheckpointTestUtils.createDummyKeyGroupStateHandle(random))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs = stateContext.rawKeyedStateInputs()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "CloseableIterable<StatePartitionStreamProvider> operatorStateInputs = stateContext.rawOperatorStateInputs()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "OperatorID operatorID = new OperatorID(47L,11L)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Random random = new Random(0x42)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12->40 [style = solid, label="closeableRegistry"];
15->10 [style = bold, label=""];
46->34 [style = bold, label=""];
0->12 [style = solid, label="keyedStateBackend"];
6->12 [style = solid, label="operatorStateBackend"];
28->50 [style = bold, label=""];
29->45 [style = bold, label=""];
14->7 [style = bold, label=""];
48->43 [style = solid, label="mockingBackend"];
8->51 [style = dashed, label="0"];
43->8 [style = bold, label=""];
31->40 [style = bold, label=""];
16->14 [style = bold, label=""];
16->8 [style = solid, label="timeServiceManager"];
20->15 [style = bold, label=""];
0->9 [style = solid, label="keyedStateBackend"];
19->3 [style = bold, label=""];
14->12 [style = solid, label="keyedStateInputs"];
21->13 [style = bold, label=""];
35->31 [style = bold, label=""];
1->4 [style = bold, label=""];
29->45 [style = solid, label="operatorSubtaskState"];
1->48 [style = dashed, label="0"];
11->19 [style = solid, label="typeSerializer"];
36->44 [style = bold, label=""];
47->48 [style = bold, label=""];
13->22 [style = solid, label="streamOperator"];
8->18 [style = bold, label=""];
18->11 [style = bold, label=""];
3->40 [style = solid, label="operatorStateBackend"];
21->20 [style = solid, label="operatorID"];
4->21 [style = bold, label=""];
22->23 [style = dashed, label="0"];
26->43 [style = bold, label=""];
11->12 [style = bold, label=""];
2->9 [style = bold, label=""];
9->8 [style = bold, label=""];
38->32 [style = bold, label=""];
25->27 [style = bold, label=""];
7->5 [style = bold, label=""];
42->31 [style = solid, label="count"];
30->51 [style = solid, label="timeServiceManager"];
49->41 [style = bold, label=""];
32->36 [style = bold, label=""];
37->40 [style = solid, label="keyedStateBackend"];
22->6 [style = bold, label=""];
0->16 [style = bold, label=""];
10->22 [style = solid, label="closeableRegistry"];
17->1 [style = bold, label=""];
3->37 [style = bold, label=""];
37->30 [style = bold, label=""];
12->19 [style = solid, label="closeableRegistry"];
44->33 [style = bold, label=""];
7->11 [style = solid, label="operatorStateInputs"];
9->45 [style = solid, label="operatorID"];
14->18 [style = solid, label="keyedStateInputs"];
27->39 [style = bold, label=""];
50->42 [style = bold, label=""];
10->23 [style = bold, label=""];
23->6 [style = bold, label=""];
10->23 [style = solid, label="closeableRegistry"];
10->12 [style = solid, label="closeableRegistry"];
24->1 [style = bold, label=""];
9->49 [style = bold, label=""];
15->23 [style = solid, label="typeSerializer"];
10->22 [style = bold, label=""];
30->38 [style = bold, label=""];
13->23 [style = solid, label="streamOperator"];
34->25 [style = bold, label=""];
38->40 [style = solid, label="keyedStateInputs"];
49->26 [style = solid, label="taskStateSnapshot"];
3->44 [style = solid, label="operatorStateBackend"];
32->34 [style = solid, label="operatorStateInputs"];
15->22 [style = solid, label="typeSerializer"];
6->2 [style = solid, label="operatorStateBackend"];
41->29 [style = bold, label=""];
41->29 [style = solid, label="random"];
48->9 [style = bold, label=""];
6->0 [style = bold, label=""];
5->36 [style = dashed, label="0"];
8->19 [style = solid, label="streamOperator"];
38->46 [style = solid, label="keyedStateInputs"];
1->4 [style = solid, label="stateBackend"];
51->46 [style = bold, label=""];
39->28 [style = bold, label=""];
26->43 [style = solid, label="jobManagerTaskRestore"];
42->35 [style = bold, label=""];
37->33 [style = solid, label="keyedStateBackend"];
5->2 [style = bold, label=""];
33->51 [style = bold, label=""];
39->50 [style = solid, label="count"];
9->18 [style = solid, label="operatorID"];
32->40 [style = solid, label="operatorStateInputs"];
45->26 [style = bold, label=""];
12->19 [style = bold, label=""];
7->12 [style = solid, label="operatorStateInputs"];
13->20 [style = bold, label=""];
}
