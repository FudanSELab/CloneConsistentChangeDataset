digraph {
36 [style = filled, label = "assertEquals(TestAllTypes.NestedEnum.FOO,message.getOptionalNestedEnum())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(ByteString.EMPTY,message.getOptionalBytes())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(1,repeatedOnlyMessage.getRepeatedInt32Count())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "builder.addRepeatedNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testRepeatedFields['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertEquals(4321,repeatedOnlyMessage.getRepeatedInt32(0))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "TestRepeatedFieldsOnly repeatedOnlyMessage = TestRepeatedFieldsOnly.parseFrom(data)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(optionalOnlyMessage.hasOptionalNestedMessage()).isTrue()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "builder.setOptionalString(\"hello\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "TestAllTypes message = TestAllTypes.parseFrom(data)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "ByteString data = builder.build().toByteString()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"hello\",optionalOnlyMessage.getOptionalString())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertEquals(1,repeatedOnlyMessage.getRepeatedNestedMessageCount())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "assertEquals(0,message.getOptionalNestedMessage().getValue())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "builder.setOneofInt32(0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(optionalOnlyMessage.getOptionalInt32()).isEqualTo(1234)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertThat(repeatedOnlyMessage.getRepeatedString(0)).isEqualTo(\"world\")@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(0,optionalOnlyMessage.getOptionalNestedMessage().getValue())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertThat(repeatedOnlyMessage.getRepeatedNestedMessageCount()).isEqualTo(1)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "builder.addRepeatedInt32(4321)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testSerializeAndParse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testRepeatedFields['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(0,repeatedOnlyMessage.getRepeatedNestedMessage(0).getValue())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "builder.addRepeatedString(\"world\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(repeatedOnlyMessage.getRepeatedInt32(0)).isEqualTo(4321)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEquals(1234,optionalOnlyMessage.getOptionalInt32())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertThat(optionalOnlyMessage.getOptionalNestedMessage().getValue()).isEqualTo(0)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertTrue(message.hasOptionalNestedMessage())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertThat(repeatedOnlyMessage.getRepeatedNestedMessage(0).getValue()).isEqualTo(0)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "TestOptionalFieldsOnly optionalOnlyMessage = TestOptionalFieldsOnly.parseFrom(data)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(repeatedOnlyMessage.getRepeatedStringCount()).isEqualTo(1)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(\"world\",repeatedOnlyMessage.getRepeatedString(0))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertEquals(1234,message.getOptionalInt32())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestAllTypes.Builder builder = TestAllTypes.newBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(\"hello\",message.getOptionalString())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(optionalOnlyMessage.getOptionalString()).isEqualTo(\"hello\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "builder.setOptionalInt32(1234)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(1,repeatedOnlyMessage.getRepeatedStringCount())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "builder.setOptionalNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(optionalOnlyMessage.hasOptionalNestedMessage())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "assertEquals(TestAllTypes.OneofFieldCase.ONEOF_INT32,message.getOneofFieldCase())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(repeatedOnlyMessage.getRepeatedInt32Count()).isEqualTo(1)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7->13 [style = bold, label=""];
33->7 [style = bold, label=""];
18->3 [style = bold, label=""];
0->9 [style = bold, label=""];
25->28 [style = bold, label=""];
23->30 [style = bold, label=""];
26->7 [style = bold, label=""];
15->34 [style = bold, label=""];
37->36 [style = bold, label=""];
38->41 [style = solid, label="data"];
16->19 [style = solid, label="data"];
8->35 [style = dashed, label="0"];
27->31 [style = bold, label=""];
36->32 [style = bold, label=""];
19->10 [style = bold, label=""];
14->22 [style = dashed, label="0"];
30->9 [style = bold, label=""];
1->21 [style = dashed, label="0"];
38->41 [style = bold, label=""];
4->2 [style = bold, label=""];
4->27 [style = dashed, label="0"];
16->9 [style = solid, label="data"];
8->28 [style = dashed, label="0"];
16->19 [style = bold, label=""];
12->1 [style = bold, label=""];
15->18 [style = bold, label=""];
29->21 [style = bold, label=""];
19->25 [style = bold, label=""];
19->41 [style = dashed, label="0"];
2->31 [style = dashed, label="0"];
1->40 [style = dashed, label="0"];
5->16 [style = bold, label=""];
8->17 [style = bold, label=""];
18->34 [style = dashed, label="0"];
6->4 [style = bold, label=""];
3->5 [style = bold, label=""];
17->0 [style = bold, label=""];
10->8 [style = bold, label=""];
35->37 [style = bold, label=""];
21->22 [style = bold, label=""];
28->23 [style = bold, label=""];
6->24 [style = dashed, label="0"];
39->40 [style = bold, label=""];
0->30 [style = dashed, label="0"];
12->29 [style = dashed, label="0"];
41->16 [style = bold, label=""];
1->14 [style = bold, label=""];
32->39 [style = bold, label=""];
9->12 [style = bold, label=""];
17->23 [style = dashed, label="0"];
22->24 [style = bold, label=""];
34->38 [style = bold, label=""];
16->35 [style = bold, label=""];
10->16 [style = dashed, label="0"];
0->36 [style = dashed, label="0"];
9->29 [style = bold, label=""];
20->15 [style = bold, label=""];
24->27 [style = bold, label=""];
14->6 [style = bold, label=""];
10->25 [style = dashed, label="0"];
11->7 [style = bold, label=""];
12->39 [style = dashed, label="0"];
13->20 [style = bold, label=""];
}
