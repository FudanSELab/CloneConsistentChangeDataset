digraph {
1 [style = filled, label = "File tmpDir = temporaryFolder.newFolder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"d\"),segments.get(0).getDimensions())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "writer.write(\"2014-01-01T00:00:10Z,a,1\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final List<DataSegment> segments = runTask(indexTask).rhs@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testCSVFileWithHeaderColumnOverride['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final File tmpFile = File.createTempFile(\"druid\",\"index\",tmpDir)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"val\"),segments.get(0).getMetrics())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final IndexIngestionSpec parseExceptionIgnoreSpec = createIngestionSpec(jsonMapper,tmpDir,new CSVParseSpec(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(null,new ArrayList<>(),new ArrayList<>()),null,Arrays.asList(\"time\",\"dim\",\"val\"),true,0),null,createTuningConfig(2,null,null,null,null,null,false,false),false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "writer.write(\"unparseable,a,1\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "writer.write(\"time,d,val\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final List<DataSegment> segments = runTask(indexTask).rhs@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"d\"),segments.get(0).getDimensions())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final File tmpDir = temporaryFolder.newFolder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "File tmpFile = File.createTempFile(\"druid\",\"index\",tmpDir)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,createIngestionSpec(jsonMapper,tmpDir,new CSVParseSpec(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(null,new ArrayList<>(),new ArrayList<>()),null,Arrays.asList(\"time\",\"dim\",\"val\"),true,0),null,createTuningConfigWithMaxRowsPerSegment(2,true),false),null,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory,appenderatorsManager)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014/P1D\"),segments.get(0).getInterval())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,parseExceptionIgnoreSpec,null,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testIgnoreParseException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testCSVFileWithHeaderColumnOverride['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,createIngestionSpec(jsonMapper,tmpDir,new CSVParseSpec(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(null,new ArrayList<>(),new ArrayList<>()),null,Arrays.asList(\"time\",\"dim\",\"val\"),true,0),null,createTuningConfigWithMaxRowsPerSegment(2,true),false),null,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->3 [style = bold, label=""];
8->16 [style = bold, label=""];
5->8 [style = bold, label=""];
15->13 [style = bold, label=""];
2->19 [style = bold, label=""];
4->7 [style = solid, label="indexTask"];
15->14 [style = solid, label="tmpDir"];
10->14 [style = bold, label=""];
11->1 [style = bold, label=""];
1->4 [style = solid, label="tmpDir"];
1->15 [style = dashed, label="0"];
18->15 [style = bold, label=""];
19->10 [style = bold, label=""];
14->17 [style = bold, label=""];
7->0 [style = bold, label=""];
2->10 [style = bold, label=""];
12->7 [style = bold, label=""];
4->7 [style = bold, label=""];
12->7 [style = solid, label="indexTask"];
4->12 [style = dashed, label="0"];
6->2 [style = bold, label=""];
14->17 [style = solid, label="parseExceptionIgnoreSpec"];
1->12 [style = solid, label="tmpDir"];
3->5 [style = bold, label=""];
1->6 [style = bold, label=""];
17->0 [style = bold, label=""];
6->13 [style = dashed, label="0"];
10->12 [style = bold, label=""];
1->6 [style = solid, label="tmpDir"];
17->0 [style = solid, label="indexTask"];
10->4 [style = bold, label=""];
4->14 [style = dashed, label="0"];
15->13 [style = solid, label="tmpDir"];
9->1 [style = bold, label=""];
0->5 [style = bold, label=""];
13->2 [style = bold, label=""];
}
