digraph {
23 [style = filled, label = "map.put(\"technology\",\"travel123\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testGroupByWithLookupAndLimitAndSortByDimsFirst['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "map.put(\"news\",\"health0000\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "map.put(\"mezzanine\",\"health09\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "map.put(\"premium\",\"health999\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "map.put(\"health\",\"6\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health0000\",\"rows\",1L,\"idx\",121L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health09\",\"rows\",3L,\"idx\",2870L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health20\",\"rows\",1L,\"idx\",118L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health55\",\"rows\",1L,\"idx\",120L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health105\",\"rows\",1L,\"idx\",135L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health999\",\"rows\",3L,\"idx\",2900L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"travel47\",\"rows\",1L,\"idx\",158L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"travel123\",\"rows\",1L,\"idx\",78L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"travel555\",\"rows\",1L,\"idx\",119L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"health0000\",\"rows\",1L,\"idx\",114L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"health09\",\"rows\",3L,\"idx\",2447L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"health20\",\"rows\",1L,\"idx\",112L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"health55\",\"rows\",1L,\"idx\",113L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"health105\",\"rows\",1L,\"idx\",147L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"health999\",\"rows\",3L,\"idx\",2505L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"travel47\",\"rows\",1L,\"idx\",166L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"travel123\",\"rows\",1L,\"idx\",97L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"travel555\",\"rows\",1L,\"idx\",126L))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "map.put(\"travel\",\"travel555\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"lookup-limit\")@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "map.put(\"news\",\"4\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"1\",\"rows\",1L,\"idx\",119L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"1\",\"rows\",1L,\"idx\",126L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"2\",\"rows\",1L,\"idx\",78L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"2\",\"rows\",1L,\"idx\",97L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"3\",\"rows\",3L,\"idx\",2900L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"3\",\"rows\",3L,\"idx\",2505L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"4\",\"rows\",1L,\"idx\",121L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"4\",\"rows\",1L,\"idx\",114L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"5\",\"rows\",3L,\"idx\",2870L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"5\",\"rows\",3L,\"idx\",2447L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"6\",\"rows\",1L,\"idx\",120L))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "cannotVectorize()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testGroupByWithAlphaNumericDimensionOrder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(map,false),false,null,false,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"alias\",null,StringComparators.ALPHANUMERIC)),11)).setGranularity(QueryRunnerTestHelper.dayGran).setContext(ImmutableMap.of(\"sortByDimsFirst\",true)).build()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "map.put(\"automotive\",\"9\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "map.put(\"entertainment\",\"travel47\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "map.put(\"health\",\"health55\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "map.put(\"entertainment\",\"7\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(map,false),false,null,false,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"alias\",null,StringComparators.ALPHANUMERIC)),11)).setGranularity(QueryRunnerTestHelper.dayGran).overrideContext(ImmutableMap.of(\"sortByDimsFirst\",true)).build()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "map.put(\"travel\",\"1\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"alphanumeric-dimension-order\")@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Map<String,String> map = new HashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "map.put(\"business\",\"8\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "map.put(\"mezzanine\",\"5\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "map.put(\"automotive\",\"health105\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "map.put(\"technology\",\"2\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testGroupByWithLookupAndLimitAndSortByDimsFirst['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "map.put(\"premium\",\"3\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(map,false),false,null,false,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"alias\",null,StringComparators.ALPHANUMERIC)),null)).setGranularity(QueryRunnerTestHelper.dayGran).build()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "map.put(\"business\",\"health20\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
16->11 [style = bold, label=""];
2->20 [style = dashed, label="0"];
23->27 [style = bold, label=""];
9->24 [style = dashed, label="0"];
3->21 [style = dashed, label="0"];
5->23 [style = dashed, label="0"];
3->10 [style = solid, label="query"];
1->29 [style = dashed, label="0"];
22->29 [style = bold, label=""];
19->11 [style = bold, label=""];
11->12 [style = bold, label=""];
10->25 [style = solid, label="results"];
0->4 [style = solid, label="expectedResults"];
2->9 [style = bold, label=""];
21->30 [style = bold, label=""];
8->28 [style = dashed, label="0"];
13->11 [style = bold, label=""];
11->18 [style = bold, label=""];
6->15 [style = bold, label=""];
3->0 [style = bold, label=""];
26->22 [style = bold, label=""];
14->7 [style = bold, label=""];
14->26 [style = dashed, label="0"];
29->28 [style = bold, label=""];
4->25 [style = dashed, label="0"];
24->26 [style = bold, label=""];
18->20 [style = bold, label=""];
12->2 [style = bold, label=""];
0->10 [style = bold, label=""];
30->25 [style = solid, label="expectedResults"];
5->6 [style = bold, label=""];
8->5 [style = bold, label=""];
10->25 [style = bold, label=""];
6->27 [style = dashed, label="0"];
28->23 [style = bold, label=""];
15->0 [style = bold, label=""];
9->14 [style = bold, label=""];
10->4 [style = bold, label=""];
30->10 [style = bold, label=""];
21->10 [style = solid, label="query"];
3->15 [style = dashed, label="0"];
12->18 [style = dashed, label="0"];
15->10 [style = solid, label="query"];
20->24 [style = bold, label=""];
10->4 [style = solid, label="results"];
27->21 [style = bold, label=""];
7->22 [style = dashed, label="0"];
17->16 [style = bold, label=""];
}
