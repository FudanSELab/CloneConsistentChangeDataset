digraph {
15 [style = filled, label = "funcWrapper.invoke(rowData)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "funcWrapper.openFunction()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "checkWrittenData(tempFile,EXPECTED1)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(\"The operator expect to send an event\",nextEvent,instanceOf())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "funcWrapper.invoke(rowData)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "funcWrapper.checkpointFunction(2)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final OperatorEvent nextEvent = funcWrapper.getNextEvent()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.REQUESTED,instant)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,nextEvent)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEmptyDataFiles()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "String instant = funcWrapper.getWriteClient().getLastPendingInstant(getTableType())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,nextEvent)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "checkWrittenData(tempFile,EXPECTED1)@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "OperatorEvent nextEvent = funcWrapper.getNextEvent()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testUpsert['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(\"The operator expect to send an event\",nextEvent,instanceOf())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "testInsert['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "checkWrittenData(tempFile,EXPECTED1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(\"The operator expect to send an event\",nextEvent,instanceOf())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "nextEvent = funcWrapper.getNextEvent()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(\"The operator expect to send an event\",nextEvent,instanceOf())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testUpsert['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
6->24 [style = solid, label="nextEvent"];
7->1 [style = bold, label=""];
15->7 [style = bold, label=""];
10->14 [style = bold, label=""];
19->29 [style = bold, label=""];
2->3 [style = bold, label=""];
4->15 [style = bold, label=""];
29->0 [style = bold, label=""];
17->9 [style = solid, label="nextEvent"];
9->20 [style = bold, label=""];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
0->21 [style = bold, label=""];
6->24 [style = bold, label=""];
12->26 [style = bold, label=""];
16->19 [style = bold, label=""];
19->6 [style = bold, label=""];
19->11 [style = solid, label="instant"];
17->23 [style = solid, label="nextEvent"];
13->23 [style = dashed, label="0"];
17->23 [style = bold, label=""];
17->13 [style = solid, label="nextEvent"];
19->12 [style = solid, label="instant"];
1->17 [style = bold, label=""];
21->2 [style = bold, label=""];
22->4 [style = bold, label=""];
12->26 [style = dashed, label="0"];
20->18 [style = bold, label=""];
27->4 [style = bold, label=""];
3->28 [style = bold, label=""];
3->5 [style = bold, label=""];
6->29 [style = dashed, label="0"];
5->28 [style = dashed, label="0"];
18->10 [style = bold, label=""];
24->21 [style = bold, label=""];
25->12 [style = bold, label=""];
6->21 [style = solid, label="nextEvent"];
19->3 [style = solid, label="instant"];
6->0 [style = solid, label="nextEvent"];
28->25 [style = bold, label=""];
0->24 [style = dashed, label="0"];
29->21 [style = solid, label="nextEvent"];
17->13 [style = bold, label=""];
5->11 [style = bold, label=""];
13->9 [style = bold, label=""];
8->4 [style = bold, label=""];
29->0 [style = solid, label="nextEvent"];
1->19 [style = bold, label=""];
23->9 [style = bold, label=""];
}
