digraph {
9 [style = filled, label = "LazyStringArrayList list = new LazyStringArrayList()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertSame(byteStringList.get(0),list.getByteString(0))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertThat(list.get(0)).isSameInstanceAs(STRING_A)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testReadOnlyMethods['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(3,list.size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "list.add(STRING_A)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertSame(list.getByteString(0),byteStringList.get(0))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "LazyStringArrayList rawList = createSampleList()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "list.set(1,STRING_C)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(BYTE_STRING_A,byteStringList.get(0))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "list.remove(1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertSame(list.getByteString(1),byteStringList.get(1))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(list.get(2)).isSameInstanceAs(STRING_C)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertSame(list.getByteString(2),byteStringList.get(2))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(byteStringList.get(1)).isSameInstanceAs(list.getByteString(1))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertEquals(BYTE_STRING_C,list.getByteString(2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "list.add(STRING_C)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertSame(STRING_A,list.get(0))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(byteStringList.get(1)).isEqualTo(BYTE_STRING_C)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "UnmodifiableLazyStringList list = new UnmodifiableLazyStringList(rawList)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertSame(STRING_A,list.get(0))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "testJustStrings['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "assertThat(byteStringList.get(0)).isEqualTo(BYTE_STRING_A)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "List<ByteString> byteStringList = list.asByteStringList()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(list.get(1)).isSameInstanceAs(STRING_C)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertThat(byteStringList.get(0)).isSameInstanceAs(list.getByteString(0))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertSame(STRING_C,list.get(1))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertEquals(BYTE_STRING_C,byteStringList.get(1))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertEquals(BYTE_STRING_A,list.getByteString(0))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "List<ByteString> byteStringList = list.asByteStringList()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(BYTE_STRING_B,list.getByteString(1))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertSame(STRING_C,list.get(2))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertSame(STRING_B,list.get(1))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testJustStrings['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(list.get(0)).isSameInstanceAs(STRING_A)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertSame(STRING_C,list.get(1))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertThat(list).hasSize(3)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertSame(byteStringList.get(1),list.getByteString(1))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "list.add(STRING_B)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(list.get(1)).isSameInstanceAs(STRING_B)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertThat(list.get(1)).isSameInstanceAs(STRING_C)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39->37 [style = bold, label=""];
13->25 [style = bold, label=""];
10->18 [style = bold, label=""];
18->40 [style = dashed, label="0"];
1->4 [style = bold, label=""];
15->10 [style = bold, label=""];
3->1 [style = bold, label=""];
16->8 [style = bold, label=""];
25->22 [style = bold, label=""];
18->30 [style = dashed, label="0"];
30->20 [style = bold, label=""];
31->0 [style = bold, label=""];
26->29 [style = bold, label=""];
17->9 [style = bold, label=""];
0->2 [style = bold, label=""];
34->33 [style = bold, label=""];
10->38 [style = dashed, label="0"];
14->20 [style = dashed, label="0"];
28->9 [style = bold, label=""];
36->32 [style = bold, label=""];
11->12 [style = bold, label=""];
0->27 [style = dashed, label="0"];
10->22 [style = dashed, label="0"];
12->0 [style = bold, label=""];
16->21 [style = dashed, label="0"];
22->30 [style = bold, label=""];
7->3 [style = bold, label=""];
24->5 [style = bold, label=""];
9->6 [style = bold, label=""];
9->32 [style = dashed, label="0"];
3->19 [style = dashed, label="0"];
3->35 [style = bold, label=""];
5->16 [style = bold, label=""];
5->21 [style = bold, label=""];
19->1 [style = bold, label=""];
15->25 [style = dashed, label="0"];
29->19 [style = bold, label=""];
5->35 [style = dashed, label="0"];
37->31 [style = bold, label=""];
23->13 [style = bold, label=""];
32->39 [style = solid, label="rawList"];
1->24 [style = bold, label=""];
6->11 [style = bold, label=""];
15->33 [style = dashed, label="0"];
4->3 [style = dashed, label="0"];
33->38 [style = bold, label=""];
32->39 [style = bold, label=""];
7->29 [style = dashed, label="0"];
13->15 [style = bold, label=""];
2->7 [style = bold, label=""];
2->26 [style = dashed, label="0"];
4->24 [style = dashed, label="0"];
35->34 [style = bold, label=""];
1->7 [style = dashed, label="0"];
38->40 [style = bold, label=""];
21->23 [style = bold, label=""];
4->5 [style = bold, label=""];
18->14 [style = bold, label=""];
12->27 [style = bold, label=""];
8->13 [style = bold, label=""];
6->39 [style = dashed, label="0"];
8->23 [style = dashed, label="0"];
27->26 [style = bold, label=""];
}
