digraph {
12 [style = filled, label = "((BoundedOneInput)testHarness.getOneInputOperator()).endInput()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testHarness.processElement(SimpleDataUtil.createRowData(2,\"world\"),1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(expectedDataFiles * 2,result.dataFiles().length)@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Arrays.stream(result.dataFiles()).forEach(null)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assertions.assertThat(testHarness.getOneInputOperator()).isInstanceOf()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(0,result.deleteFiles().length)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "appendFiles.commit()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(0,result.deleteFiles().length)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testWritingTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "AppendFiles appendFiles = table.newAppend()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "SimpleDataUtil.assertTableRecords(tablePath,Lists.newArrayList(SimpleDataUtil.createRecord(1,\"hello\"),SimpleDataUtil.createRecord(2,\"world\"),SimpleDataUtil.createRecord(3,\"hello\"),SimpleDataUtil.createRecord(4,\"foo\"),SimpleDataUtil.createRecord(5,\"bar\")))@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(expectedDataFiles,result.dataFiles().length)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testHarness.processElement(SimpleDataUtil.createRowData(1,\"hello\"),1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testHarness.processElement(SimpleDataUtil.createRowData(3,\"hello\"),1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "checkpointId = checkpointId + 1@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "long checkpointId = 1L@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testBoundedStreamCloseWithEmittingDataFiles['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "expectedDataFiles = partitioned? 4: 2@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testHarness.processElement(SimpleDataUtil.createRowData(4,\"foo\"),1)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(expectedDataFiles,result.dataFiles().length)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testHarness.prepareSnapshotPreBarrier(checkpointId)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testHarness.processElement(SimpleDataUtil.createRowData(1,\"hello\"),1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "long expectedDataFiles = partitioned? 2: 1@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testHarness.prepareSnapshotPreBarrier(checkpointId)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testHarness.processElement(SimpleDataUtil.createRowData(5,\"bar\"),2)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testBoundedStreamCloseWithEmittingDataFiles['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(0,result.deleteFiles().length)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(testHarness.getOneInputOperator() instanceof BoundedOneInput)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "long expectedDataFiles = partitioned? 2: 1@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "WriteResult result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->26 [style = bold, label=""];
15->23 [style = bold, label=""];
8->10 [style = solid, label="expectedDataFiles"];
23->20 [style = bold, label=""];
18->24 [style = bold, label=""];
29->19 [style = solid, label="checkpointId"];
1->4 [style = solid, label="expectedDataFiles"];
25->22 [style = bold, label=""];
7->10 [style = bold, label=""];
31->16 [style = bold, label=""];
8->3 [style = solid, label="expectedDataFiles"];
21->15 [style = bold, label=""];
4->19 [style = bold, label=""];
10->28 [style = dashed, label="0"];
20->31 [style = bold, label=""];
30->18 [style = bold, label=""];
3->4 [style = bold, label=""];
11->2 [style = bold, label=""];
1->9 [style = bold, label=""];
2->12 [style = bold, label=""];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
8->1 [style = bold, label=""];
26->27 [style = bold, label=""];
13->12 [style = bold, label=""];
5->6 [style = bold, label=""];
16->28 [style = bold, label=""];
20->28 [style = solid, label="expectedDataFiles"];
12->8 [style = bold, label=""];
2->13 [style = dashed, label="0"];
6->11 [style = bold, label=""];
11->13 [style = bold, label=""];
28->25 [style = bold, label=""];
9->3 [style = bold, label=""];
29->24 [style = solid, label="checkpointId"];
19->23 [style = solid, label="checkpointId"];
24->1 [style = bold, label=""];
11->30 [style = dashed, label="0"];
17->29 [style = bold, label=""];
14->6 [style = bold, label=""];
29->11 [style = bold, label=""];
11->30 [style = bold, label=""];
19->21 [style = bold, label=""];
}
