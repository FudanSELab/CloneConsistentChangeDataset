digraph {
25 [style = filled, label = "assertThat(keyValueStore.get(\"A\"),is(\"recurse-alpha\"))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(events,is(Arrays.asList(new KeyValue<>(\"A\",\"alpha\"),new KeyValue<>(\"A\",\"recurse-alpha\"))))@@@41@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "topology.addGlobalStore(Stores.keyValueStoreBuilder(Stores.inMemoryKeyValueStore(\"global-store\"),Serdes.String(),Serdes.String()).withLoggingDisabled(),\"globalSource\",new StringDeserializer(),new StringDeserializer(),\"global-topic\",\"globalProcessor\",null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "shouldApplyGlobalUpdatesCorrectlyInRecursiveTopologies['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final KeyValueStore<String,String> keyValueStore = topologyTestDriver.getKeyValueStore(\"global-store\")@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final List<KeyValue<String,String>> events = globalTopic.readKeyValuesToList()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "shouldEnqueueLaterOutputsAfterEarlierOnes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "properties.setProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,\"dummy\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final List<KeyValue<String,String>> events = out.readKeyValuesToList()@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "topology.addSink(\"recursiveSink\",\"input\",new StringSerializer(),new StringSerializer(),\"recursiveProcessor\")@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final TestInputTopic<String,String> in = topologyTestDriver.createInputTopic(\"input\",new StringSerializer(),new StringSerializer())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final TestOutputTopic<String,String> out = topologyTestDriver.createOutputTopic(\"output\",new StringDeserializer(),new StringDeserializer())@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "topology.addProcessor(\"recursiveProcessor\",null,\"source\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "topology.addProcessor(\"recursiveProcessor\",null,\"source\")@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(events,is(Arrays.asList(new KeyValue<>(\"B\",\"beta\"),new KeyValue<>(\"B\",\"recurse-beta\"))))@@@28@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "topology.addSink(\"globalSink\",\"global-topic\",new StringSerializer(),new StringSerializer(),\"recursiveProcessor\")@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(keyValueStore,notNullValue())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final Topology topology = new Topology()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "topology.addSource(\"source\",new StringDeserializer(),new StringDeserializer(),\"input\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "shouldEnqueueLaterOutputsAfterEarlierOnes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final Properties properties = new Properties()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "topology.addSink(\"recursiveSink\",\"input\",new StringSerializer(),new StringSerializer(),\"recursiveProcessor\")@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final List<KeyValue<String,String>> events = out.readKeyValuesToList()@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "in.pipeInput(\"B\",\"beta\")@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "topology.addSink(\"sink\",\"output\",new StringSerializer(),new StringSerializer(),\"recursiveProcessor\")@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "in.pipeInput(\"A\",\"alpha\")@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "properties.setProperty(StreamsConfig.APPLICATION_ID_CONFIG,\"dummy\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final TestOutputTopic<String,String> globalTopic = topologyTestDriver.createOutputTopic(\"global-topic\",new StringDeserializer(),new StringDeserializer())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final TestInputTopic<String,String> in = topologyTestDriver.createInputTopic(\"input\",new StringSerializer(),new StringSerializer())@@@34@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "topology.addSink(\"sink\",\"output\",new StringSerializer(),new StringSerializer(),\"recursiveProcessor\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->23 [style = bold, label=""];
14->17 [style = bold, label=""];
1->10 [style = bold, label=""];
6->4 [style = bold, label=""];
17->15 [style = solid, label="events"];
1->21 [style = bold, label=""];
9->3 [style = bold, label=""];
18->5 [style = bold, label=""];
12->1 [style = bold, label=""];
3->24 [style = dashed, label="0"];
4->8 [style = bold, label=""];
29->5 [style = bold, label=""];
6->8 [style = bold, label=""];
21->10 [style = bold, label=""];
27->22 [style = bold, label=""];
23->26 [style = bold, label=""];
3->6 [style = bold, label=""];
11->7 [style = bold, label=""];
2->9 [style = bold, label=""];
10->16 [style = dashed, label="0"];
9->24 [style = bold, label=""];
7->12 [style = bold, label=""];
10->13 [style = bold, label=""];
23->26 [style = solid, label="events"];
5->11 [style = bold, label=""];
17->15 [style = bold, label=""];
16->3 [style = bold, label=""];
2->20 [style = bold, label=""];
22->28 [style = bold, label=""];
22->28 [style = solid, label="keyValueStore"];
19->14 [style = bold, label=""];
20->9 [style = bold, label=""];
24->27 [style = bold, label=""];
6->27 [style = dashed, label="0"];
0->5 [style = bold, label=""];
1->16 [style = bold, label=""];
13->2 [style = bold, label=""];
4->8 [style = solid, label="events"];
28->25 [style = bold, label=""];
4->22 [style = dashed, label="0"];
8->19 [style = bold, label=""];
}
