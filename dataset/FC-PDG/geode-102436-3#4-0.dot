digraph {
13 [style = filled, label = "expected(0( = DSCODE.BYTE_ARRAY.toByte()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "System.arraycopy(regionEntryValue,0,expected,1,regionEntryValue.length)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "sendAsByteArrayShouldWriteValueToDataOutput['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "expected(1( = (byte)regionEntryValue.length@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "System.arraycopy(regionEntryValue,0,expected,2,regionEntryValue.length)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "byte(( expected = new byte((((@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertNotNull(dataOutput)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(actual).isEqualTo(expected)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "chunk.release()@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "sendToShouldWriteUnserializedValueToDataOutputIfValueIsUnserialized['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "chunk.sendTo(dataOutput)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expected(0( = (byte)regionEntryValue.length@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "byte(( actual = dataOutput.toByteArray()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "OffHeapStoredObject chunk = createValueAsUnserializedStoredObject(regionEntryValue)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "sendToShouldWriteUnserializedValueToDataOutputIfValueIsUnserialized['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "expected(0( = DSCODE.BYTE_ARRAY@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "byte(( regionEntryValue = getValueAsByteArray()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "chunk.sendAsByteArray(dataOutput)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "HeapDataOutputStream dataOutput = new HeapDataOutputStream(Version.CURRENT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "chunk.release()@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "byte(( expected = new byte((((@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
2->17 [style = bold, label=""];
6->3 [style = solid, label="regionEntryValue"];
16->19 [style = solid, label="expected"];
6->3 [style = bold, label=""];
17->5 [style = bold, label=""];
7->1 [style = bold, label=""];
5->20 [style = bold, label=""];
16->4 [style = solid, label="expected"];
11->6 [style = bold, label=""];
7->20 [style = dashed, label="0"];
9->8 [style = solid, label="expected"];
9->10 [style = bold, label=""];
2->4 [style = solid, label="dataOutput"];
16->19 [style = bold, label=""];
0->17 [style = dashed, label="0"];
1->9 [style = bold, label=""];
1->13 [style = dashed, label="0"];
9->19 [style = dashed, label="0"];
6->19 [style = solid, label="regionEntryValue"];
2->0 [style = bold, label=""];
20->16 [style = bold, label=""];
3->2 [style = bold, label=""];
18->6 [style = bold, label=""];
1->16 [style = dashed, label="0"];
15->4 [style = bold, label=""];
10->4 [style = bold, label=""];
2->15 [style = solid, label="dataOutput"];
5->7 [style = bold, label=""];
4->8 [style = bold, label=""];
13->9 [style = bold, label=""];
19->15 [style = bold, label=""];
6->10 [style = solid, label="regionEntryValue"];
2->0 [style = solid, label="dataOutput"];
8->12 [style = bold, label=""];
14->6 [style = bold, label=""];
9->10 [style = solid, label="expected"];
0->5 [style = bold, label=""];
2->17 [style = solid, label="dataOutput"];
}
