digraph {
28 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).setDimFilter(new ExtractionDimFilter(\"quality\",\"NOT_THERE\",lookupExtractionFn,null)).build()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news\",\"rows\",1L,\"idx\",121L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"news\",\"rows\",1L,\"idx\",114L))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "extractionMap.put(\"travel\",\"travel0\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "List<Row> expectedResults@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "MapLookupExtractor mapLookupExtractor = new MapLookupExtractor(extractionMap,false)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testGroupByWithExtractionDimFilterWhenSearchValueNotInTheMap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testGroupByWithExtractionDimFilterCaseMappingValueIsNullOrEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "extractionMap.put(\"premium\",\"premium0\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "extractionMap.put(\"automotive\",\"automotive0\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",3L,\"idx\",2870L),makeRow(query,\"2011-04-01\",\"alias\",\"news\",\"rows\",1L,\"idx\",121L),makeRow(query,\"2011-04-02\",\"alias\",\"mezzanine\",\"rows\",3L,\"idx\",2447L),makeRow(query,\"2011-04-02\",\"alias\",\"news\",\"rows\",1L,\"idx\",114L))@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "testGroupByWithExtractionDimFilterCaseMappingValueIsNullOrEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "extractionMap.put(\"entertainment\",\"entertainment0\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "LookupExtractionFn lookupExtractionFn = new LookupExtractionFn(mapLookupExtractor,false,null,true,false)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "NullHandling.replaceWithDefault()@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "List<Row> expectedResults = Collections.emptyList()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "List<ResultRow> expectedResults@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "extractionMap.put(\"business\",\"business0\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "extractionMap.put(\"news\",\"\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "extractionMap.put(\"technology\",\"technology0\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"dim-extraction\")@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",3L,\"idx\",2870L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news\",\"rows\",1L,\"idx\",121L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"mezzanine\",\"rows\",3L,\"idx\",2447L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"news\",\"rows\",1L,\"idx\",114L))@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"alias\",\"news\",\"rows\",1L,\"idx\",121L),makeRow(query,\"2011-04-02\",\"alias\",\"news\",\"rows\",1L,\"idx\",114L))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).setDimFilter(new ExtractionDimFilter(\"quality\",\"\",lookupExtractionFn,null)).build()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Map<String,String> extractionMap = new HashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"dim-extraction\")@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "extractionMap.put(\"health\",\"health0\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "extractionMap.put(\"mezzanine\",null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->24 [style = dashed, label="0"];
11->16 [style = bold, label=""];
23->20 [style = bold, label=""];
18->24 [style = bold, label=""];
10->28 [style = bold, label=""];
18->23 [style = bold, label=""];
3->26 [style = dashed, label="0"];
21->6 [style = bold, label=""];
17->6 [style = bold, label=""];
20->2 [style = solid, label="results"];
18->24 [style = dotted, label="false"];
19->20 [style = dashed, label="0"];
0->12 [style = bold, label=""];
26->25 [style = bold, label=""];
26->29 [style = solid, label="expectedResults"];
14->19 [style = bold, label=""];
28->26 [style = bold, label=""];
6->0 [style = bold, label=""];
3->22 [style = dashed, label="0"];
19->2 [style = bold, label=""];
9->10 [style = bold, label=""];
25->29 [style = bold, label=""];
18->23 [style = dotted, label="true"];
19->2 [style = solid, label="results"];
1->7 [style = bold, label=""];
27->6 [style = bold, label=""];
23->2 [style = solid, label="expectedResults"];
13->23 [style = solid, label="query"];
3->18 [style = bold, label=""];
24->20 [style = bold, label=""];
20->2 [style = bold, label=""];
13->28 [style = dashed, label="0"];
5->19 [style = bold, label=""];
22->18 [style = bold, label=""];
13->24 [style = solid, label="query"];
24->2 [style = solid, label="expectedResults"];
15->11 [style = bold, label=""];
13->3 [style = bold, label=""];
10->13 [style = bold, label=""];
14->2 [style = solid, label="expectedResults"];
9->10 [style = solid, label="mapLookupExtractor"];
12->8 [style = bold, label=""];
18->5 [style = bold, label=""];
25->29 [style = solid, label="results"];
13->20 [style = solid, label="query"];
7->15 [style = bold, label=""];
5->2 [style = solid, label="expectedResults"];
4->1 [style = bold, label=""];
18->5 [style = dotted, label="true"];
13->22 [style = bold, label=""];
8->4 [style = bold, label=""];
28->25 [style = solid, label="query"];
6->9 [style = bold, label=""];
13->19 [style = solid, label="query"];
18->14 [style = bold, label=""];
16->9 [style = bold, label=""];
18->14 [style = dotted, label="false"];
6->9 [style = solid, label="extractionMap"];
}
