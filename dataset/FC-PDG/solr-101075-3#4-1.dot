digraph {
22 [style = filled, label = "assertEquals(10,returnedDocs.size())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertExpectedDocumentsFoundAndReturned(response,NUM_TECHPRODUCTS_DOCS,10)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final MapWriter categoriesFacet = new MapWriter(){@Override public void writeMap(EntryWriter ew){ew.put(\"type\",\"terms\")ew.put(\"field\",\"cat\")ew.put(\"limit\",3)}}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertHasFacetWithBucketValues(rawResponse,\"top_cats\",new FacetBucket(\"electronics\",NUM_ELECTRONICS),new FacetBucket(\"currency\",NUM_CURRENCY),new FacetBucket(\"memory\",NUM_MEMORY))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "final JsonQueryRequest request = new JsonQueryRequest().setQuery(\"*:*\").withFacet(\"top_cats\",categoriesFacetMap).withFacet(\"top_manufacturers\",manufacturersFacetMap)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final NamedList<Object> rawResponse = response.getResponse()@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "final SolrDocumentList returnedDocs = response.getResults()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testFacetCanBeRepresentedByMapWriter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertHasFacetWithBucketValues(rawResponse,\"top_manufacturers\",new FacetBucket(\"corsair\",NUM_CORSAIR),new FacetBucket(\"belkin\",NUM_BELKIN),new FacetBucket(\"canon\",NUM_CANON))@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertHasFacetWithBucketValues(rawResponse,\"top_cats\",new FacetBucket(\"electronics\",NUM_ELECTRONICS),new FacetBucket(\"currency\",NUM_CURRENCY),new FacetBucket(\"memory\",NUM_MEMORY))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "QueryResponse response = request.process(cluster.getSolrClient(),COLLECTION_NAME)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final JsonQueryRequest request = new JsonQueryRequest().setQuery(\"*:*\").withFacet(\"top_cats\",categoriesFacet)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(NUM_TECHPRODUCTS_DOCS,returnedDocs.getNumFound())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(NUM_TECHPRODUCTS_DOCS,topLevelFacetData.getCount())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "final TermsFacetMap categoriesFacetMap = new TermsFacetMap(\"cat\").setLimit(3)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertHasFacetWithBucketValues(topLevelFacetData,\"top_cats\",new FacetBucket(\"electronics\",NUM_ELECTRONICS),new FacetBucket(\"currency\",NUM_CURRENCY),new FacetBucket(\"memory\",NUM_MEMORY))@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final TermsFacetMap manufacturersFacetMap = new TermsFacetMap(\"manu_id_s\").setLimit(3)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testFacetCanBeRepresentedByMapWriter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertEquals(10,returnedDocs.size())@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final SolrDocumentList returnedDocs = response.getResults()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "final NestableJsonFacet topLevelFacetData = response.getJsonFacetingResponse()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "testMultiTermsFacet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(NUM_TECHPRODUCTS_DOCS,returnedDocs.getNumFound())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final NamedList<Object> rawResponse = response.getResponse()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(0,response.getStatus())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->23 [style = bold, label=""];
23->16 [style = bold, label=""];
18->24 [style = bold, label=""];
16->18 [style = bold, label=""];
17->2 [style = solid, label="rawResponse"];
24->19 [style = bold, label=""];
17->1 [style = bold, label=""];
17->1 [style = solid, label="rawResponse"];
2->3 [style = bold, label=""];
7->20 [style = dashed, label="0"];
7->0 [style = bold, label=""];
3->13 [style = dashed, label="0"];
3->4 [style = bold, label=""];
12->7 [style = bold, label=""];
2->10 [style = dashed, label="0"];
21->20 [style = bold, label=""];
10->13 [style = bold, label=""];
1->10 [style = solid, label="response"];
0->1 [style = bold, label=""];
7->0 [style = solid, label="categoriesFacet"];
8->9 [style = bold, label=""];
9->5 [style = bold, label=""];
22->17 [style = bold, label=""];
4->8 [style = bold, label=""];
4->14 [style = dashed, label="0"];
1->2 [style = bold, label=""];
9->5 [style = solid, label="rawResponse"];
6->7 [style = bold, label=""];
1->10 [style = bold, label=""];
15->23 [style = solid, label="manufacturersFacetMap"];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
20->15 [style = bold, label=""];
19->22 [style = bold, label=""];
13->11 [style = solid, label="topLevelFacetData"];
}
