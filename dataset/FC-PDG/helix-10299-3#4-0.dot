digraph {
26 [style = filled, label = "testNormalUsage['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().get(assignableNode.getFaultZone()).get(replica.getResourceName()).contains(replica.getPartitionName()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "getDefaultClusterModel['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertFalse(clusterModel.getAssignableNodes().values().stream().anyMatch(null))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "initialize()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertTrue(assignableNode.getAssignedPartitionsMap().get(replica.getResourceName()).contains(replica.getPartitionName()))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertFalse(clusterModel.getAssignableNodes().values().stream().anyMatch(null))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "HelixException ex@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "HelixException ex@@@19@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertFalse(clusterModel.getAssignableNodes().values().stream().anyMatch(null))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.fail(\"Assigning a resource partition to a non existing instance shall fail.\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ClusterModel clusterModel = new ClusterModel(context,assignableReplicas,assignableNodes,Collections.emptyMap(),Collections.emptyMap())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "clusterModel.assign(replica.getResourceName(),replica.getPartitionName(),replica.getReplicaState(),\"NON-EXIST\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "{}@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "clusterModel.assign(replica.getResourceName(),replica.getPartitionName(),replica.getReplicaState(),assignableNode.getInstanceName())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testNormalUsage['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ResourceControllerDataProvider testCache = setupClusterDataCache()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.fail(\"Assigning a non existing resource partition shall fail.\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Set<AssignableReplica> assignableReplicas = generateReplicas(testCache)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ClusterContext context = new ClusterContext(assignableReplicas,assignableNodes,Collections.emptyMap(),Collections.emptyMap())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "{}@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "HelixException ex@@@25@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "{}@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "clusterModel.release(replica.getResourceName(),replica.getPartitionName(),replica.getReplicaState(),assignableNode.getInstanceName())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream().allMatch(null))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ClusterContext context = new ClusterContext(assignableReplicas,2)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "AssignableNode assignableNode = assignableNodes.iterator().next()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "clusterModel.assign(\"NOT-EXIST\",replica.getPartitionName(),replica.getReplicaState(),assignableNode.getInstanceName())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream().allMatch(null))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertTrue(assignableNode.getCurrentAssignmentsMap().get(replica.getResourceName()).contains(replica.getPartitionName()))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "ResourceControllerDataProvider testCache = setupClusterDataCache()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "return new ClusterModel(context,assignableReplicas,assignableNodes)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertFalse(clusterModel.getAssignableNodes().values().stream().anyMatch(null))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "AssignableReplica replica = assignableReplicas.iterator().next()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Set<AssignableNode> assignableNodes = generateNodes(testCache)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->11 [style = solid, label="testCache"];
1->5 [style = bold, label=""];
4->9 [style = bold, label=""];
27->13 [style = bold, label=""];
19->27 [style = dashed, label="0"];
10->17 [style = solid, label="assignableReplicas"];
17->18 [style = solid, label="context"];
2->19 [style = bold, label=""];
16->8 [style = bold, label=""];
18->30 [style = dashed, label="0"];
15->21 [style = bold, label=""];
11->33 [style = solid, label="assignableReplicas"];
25->30 [style = bold, label=""];
23->31 [style = dashed, label="0"];
20->0 [style = bold, label=""];
18->33 [style = bold, label=""];
12->20 [style = bold, label=""];
26->9 [style = bold, label=""];
23->3 [style = bold, label=""];
21->24 [style = bold, label=""];
32->34 [style = bold, label=""];
9->10 [style = bold, label=""];
11->18 [style = solid, label="assignableNodes"];
18->2 [style = bold, label=""];
3->12 [style = bold, label=""];
5->28 [style = bold, label=""];
10->18 [style = solid, label="assignableReplicas"];
25->30 [style = solid, label="context"];
11->17 [style = solid, label="assignableNodes"];
34->10 [style = bold, label=""];
17->25 [style = dashed, label="0"];
17->18 [style = solid, label="assignableNodes"];
7->14 [style = bold, label=""];
17->33 [style = solid, label="assignableNodes"];
24->20 [style = bold, label=""];
8->1 [style = bold, label=""];
21->20 [style = bold, label=""];
19->13 [style = bold, label=""];
14->23 [style = bold, label=""];
16->1 [style = bold, label=""];
22->28 [style = dashed, label="0"];
0->1 [style = bold, label=""];
11->30 [style = solid, label="assignableNodes"];
10->25 [style = solid, label="assignableReplicas"];
10->11 [style = solid, label="testCache"];
14->31 [style = bold, label=""];
10->17 [style = solid, label="testCache"];
10->30 [style = solid, label="assignableReplicas"];
2->27 [style = bold, label=""];
11->17 [style = bold, label=""];
13->6 [style = bold, label=""];
30->2 [style = bold, label=""];
6->7 [style = bold, label=""];
9->10 [style = solid, label="testCache"];
31->3 [style = bold, label=""];
5->22 [style = bold, label=""];
29->16 [style = bold, label=""];
11->18 [style = solid, label="assignableReplicas"];
17->18 [style = bold, label=""];
18->33 [style = dashed, label="0"];
11->25 [style = bold, label=""];
18->33 [style = solid, label="context"];
10->11 [style = bold, label=""];
}
