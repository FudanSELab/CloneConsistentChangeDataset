digraph {
28 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "tokens = analyze.getTokens()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "request.addTokenFilter(\"mock\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"fox\",tokens.get(3).getTerm())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(3,tokens.size())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "tokens = analyze.getTokens()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "request.text(\"the quick brown fox\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "AnalyzeAction.Request request = new AnalyzeAction.Request()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertEquals(\"abc\",tokens.get(0).getTerm())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"fox\",tokens.get(3).getTerm())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "AnalyzeAction.Response analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "AnalyzeAction.Request request = new AnalyzeAction.Request(\"index\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testWithIndexAnalyzers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testNormalizerWithIndex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "request.analyzer(\"custom_analyzer\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(4,tokens.size())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(1,tokens.size())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(3,tokens.size())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testWithIndexAnalyzers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "request.normalizer(\"my_normalizer\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "request.tokenizer(\"standard\")@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"quick\",tokens.get(1).getTerm())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(4,tokens.size())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "tokens = analyze.getTokens()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "request.text(\"ABc\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "List<AnalyzeAction.AnalyzeToken> tokens = analyze.getTokens()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"quick\",tokens.get(1).getTerm())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "request.analyzer(null)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "AnalyzeAction.Response analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "request.analyzer(\"standard\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39->15 [style = bold, label=""];
31->22 [style = bold, label=""];
17->1 [style = bold, label=""];
0->37 [style = bold, label=""];
16->8 [style = bold, label=""];
15->18 [style = solid, label="analyze"];
30->43 [style = bold, label=""];
15->37 [style = dashed, label="0"];
37->30 [style = bold, label=""];
18->21 [style = solid, label="analyze"];
32->0 [style = bold, label=""];
34->33 [style = bold, label=""];
42->39 [style = bold, label=""];
3->11 [style = bold, label=""];
37->36 [style = solid, label="analyze"];
21->31 [style = solid, label="analyze"];
33->36 [style = solid, label="request"];
14->17 [style = bold, label=""];
19->10 [style = bold, label=""];
4->18 [style = bold, label=""];
20->14 [style = bold, label=""];
33->21 [style = solid, label="request"];
15->30 [style = bold, label=""];
0->39 [style = dashed, label="0"];
29->43 [style = dashed, label="0"];
11->19 [style = bold, label=""];
26->44 [style = dashed, label="0"];
33->41 [style = dashed, label="0"];
33->37 [style = solid, label="request"];
8->35 [style = bold, label=""];
30->29 [style = bold, label=""];
0->15 [style = bold, label=""];
36->20 [style = bold, label=""];
33->31 [style = solid, label="request"];
29->26 [style = bold, label=""];
6->2 [style = bold, label=""];
7->33 [style = bold, label=""];
18->20 [style = bold, label=""];
35->23 [style = bold, label=""];
31->38 [style = dashed, label="0"];
24->4 [style = bold, label=""];
1->6 [style = bold, label=""];
12->38 [style = bold, label=""];
22->27 [style = bold, label=""];
10->12 [style = bold, label=""];
18->36 [style = dashed, label="0"];
5->13 [style = bold, label=""];
41->15 [style = solid, label="request"];
32->42 [style = dashed, label="0"];
40->41 [style = bold, label=""];
35->38 [style = solid, label="analyze"];
33->38 [style = solid, label="request"];
33->35 [style = solid, label="request"];
28->24 [style = bold, label=""];
8->21 [style = bold, label=""];
9->3 [style = bold, label=""];
33->32 [style = bold, label=""];
25->5 [style = bold, label=""];
4->36 [style = bold, label=""];
26->28 [style = bold, label=""];
33->18 [style = solid, label="request"];
21->35 [style = dashed, label="0"];
38->22 [style = bold, label=""];
23->9 [style = bold, label=""];
43->44 [style = bold, label=""];
33->15 [style = solid, label="request"];
27->25 [style = bold, label=""];
41->42 [style = bold, label=""];
12->31 [style = bold, label=""];
36->35 [style = solid, label="analyze"];
21->23 [style = bold, label=""];
2->16 [style = bold, label=""];
}
