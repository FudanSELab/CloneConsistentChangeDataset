digraph {
2 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(9).hashCode(),JoinWindows.of(3).before(2).hashCode())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertNotEquals(JoinWindows.of(3).grace(9),JoinWindows.of(3).grace(2))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(9).after(2).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertNotEquals(JoinWindows.of(3).until(90).hashCode(),JoinWindows.of(3).until(60).hashCode())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "verifyInEquality(JoinWindows.of(9),JoinWindows.of(3))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(1).after(9).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertNotEquals(JoinWindows.of(9),JoinWindows.of(3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(1).after(2).grace(3).until(90),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(9).after(2).grace(3).until(60).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertNotEquals(JoinWindows.of(3).after(9).hashCode(),JoinWindows.of(3).after(2).hashCode())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "assertEquals(SessionWindows.with(1).grace(6).hashCode(),SessionWindows.with(1).grace(6).hashCode())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertNotEquals(JoinWindows.of(9).hashCode(),JoinWindows.of(3).hashCode())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "verifyInEquality(JoinWindows.of(3).after(9),JoinWindows.of(3).after(2))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "verifyInEquality(JoinWindows.of(3).until(90),JoinWindows.of(3).until(60))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(9),JoinWindows.of(3).before(2))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertEquals(SessionWindows.with(1).hashCode(),SessionWindows.with(1).hashCode())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(1).after(2).grace(9).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertEquals(SessionWindows.with(1).grace(6).until(7),SessionWindows.with(1).grace(6).until(7))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(9).grace(3).until(60).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(2).grace(3).until(90),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertNotEquals(JoinWindows.of(3).after(9),JoinWindows.of(3).after(2))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(9),JoinWindows.of(3).before(2))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "verifyInEquality(JoinWindows.of(3).grace(9),JoinWindows.of(3).grace(2))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertEquals(SessionWindows.with(1).grace(6),SessionWindows.with(1).grace(6))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(SessionWindows.with(1).until(7).hashCode(),SessionWindows.with(1).until(7).hashCode())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(9).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "assertEquals(SessionWindows.with(1).grace(6).until(7).hashCode(),SessionWindows.with(1).grace(6).until(7).hashCode())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(SessionWindows.with(1).until(7),SessionWindows.with(1).until(7))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "equalsAndHashcodeShouldBeValidForPositiveCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(2).grace(9).until(60).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(2).grace(3).until(90).hashCode(),JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertNotEquals(JoinWindows.of(3).grace(9).hashCode(),JoinWindows.of(3).grace(2).hashCode())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertNotEquals(JoinWindows.of(3).until(90),JoinWindows.of(3).until(60))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(1).after(2).grace(9).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "assertEquals(SessionWindows.with(1),SessionWindows.with(1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertNotEquals(JoinWindows.of(3).before(9).after(2).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24->28 [style = bold, label=""];
12->23 [style = dashed, label="0"];
9->0 [style = bold, label=""];
25->22 [style = bold, label=""];
22->19 [style = bold, label=""];
17->6 [style = bold, label=""];
16->10 [style = bold, label=""];
28->20 [style = bold, label=""];
1->27 [style = dashed, label="0"];
36->31 [style = bold, label=""];
4->15 [style = bold, label=""];
11->26 [style = dashed, label="0"];
37->29 [style = bold, label=""];
35->32 [style = bold, label=""];
15->21 [style = dashed, label="0"];
11->12 [style = bold, label=""];
10->17 [style = bold, label=""];
5->14 [style = bold, label=""];
29->34 [style = bold, label=""];
18->19 [style = dashed, label="0"];
8->28 [style = dashed, label="0"];
15->3 [style = bold, label=""];
0->22 [style = dashed, label="0"];
1->11 [style = bold, label=""];
20->21 [style = bold, label=""];
12->2 [style = bold, label=""];
3->5 [style = bold, label=""];
23->24 [style = bold, label=""];
30->35 [style = bold, label=""];
18->1 [style = bold, label=""];
4->20 [style = dashed, label="0"];
13->7 [style = bold, label=""];
31->33 [style = bold, label=""];
19->27 [style = bold, label=""];
26->23 [style = bold, label=""];
34->36 [style = bold, label=""];
7->16 [style = bold, label=""];
33->30 [style = bold, label=""];
0->18 [style = bold, label=""];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
2->24 [style = dashed, label="0"];
2->8 [style = bold, label=""];
27->26 [style = bold, label=""];
}
