digraph {
48 [style = filled, label = "index++@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "int stopIndex = whereSegment.getStopIndex()@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "generateRemoveTokenForShadow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final AndPredicate andPredicate@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "return result@@@33@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i == 0@@@22@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "return result@@@22@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "int index = 0@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "ExpressionSegment expression = predicates.get(i)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "!getShadowRule().getColumn().equals(column.get().getIdentifier().getValue())@@@13@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "ExpressionSegment each = iterator.next()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "Optional<ColumnSegment> column = ColumnExtractor.extract(each)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "generateSQLTokens['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "result.add(new RemoveToken(startIndex,stopIndex))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "previousElementStopIndex = each.getStopIndex()@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "int startIndex = predicates.get(i - 1).getStopIndex() + 1@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "column.isPresent() && getShadowRule().getColumn().equals(column.get().getIdentifier().getValue())@@@11@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "List<ColumnSegment> columnSegments = (LinkedList<ColumnSegment>)insertColumnsSegment.getColumns()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "index++@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "result.add(new RemoveToken(startIndex,stopIndex))@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "iterator.hasNext()@@@8@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "removeTokens.add(createShadowColumnRemoveToken(columnSegments,index))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "!column.isPresent()@@@10@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "final AndPredicate andPredicate@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Collection<SQLToken> result = new LinkedList<>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "result.add(new RemoveToken(startIndex,stopIndex))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "int stopIndex = predicates.get(i + 1).getStartIndex() - 1@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Collection<ExpressionSegment> predicates = andPredicate.getPredicates()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "final InsertColumnsSegment insertColumnsSegment@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Optional<ColumnSegment> column = ColumnExtractor.extract(expression)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Iterator<ExpressionSegment> iterator = predicates.iterator()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "1 == predicates.size()@@@12@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "final Collection<RemoveToken> removeTokens@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int i = 0@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "generateSQLTokens['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "return result@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "result.add(new RemoveToken(whereSegment.getStartIndex(),whereSegment.getStopIndex()))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "return result@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "i++@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "result.add(isFirstElement(index)? new RemoveToken(each.getStartIndex(),iterator.next().getStartIndex() - 1): new RemoveToken(previousElementStopIndex + 1,each.getStopIndex()))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "i < predicates.size()@@@6@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "int stopIndex = predicates.get(i).getStopIndex()@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "int previousElementStopIndex = 0@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final WhereSegment whereSegment@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "String shadowColumn = getShadowColumn()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "int startIndex = whereSegment.getStartIndex()@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "shadowColumn.equals(each.getIdentifier().getValue())@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "int index = 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "return result@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "int startIndex = predicates.get(0).getStartIndex()@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "return result@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "List<ExpressionSegment> predicates = (LinkedList<ExpressionSegment>)andPredicate.getPredicates()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28->11 [style = dotted, label="true"];
13->24 [style = dotted, label="true"];
9->11 [style = bold, label=""];
21->35 [style = solid, label="result"];
20->11 [style = dotted, label="true"];
28->38 [style = bold, label=""];
38->39 [style = dotted, label="true"];
49->48 [style = bold, label=""];
45->48 [style = bold, label=""];
38->39 [style = bold, label=""];
37->7 [style = solid, label="index"];
15->45 [style = dashed, label="0"];
46->51 [style = bold, label=""];
13->17 [style = bold, label=""];
11->2 [style = dotted, label="true"];
30->28 [style = bold, label=""];
20->16 [style = bold, label=""];
51->49 [style = solid, label="columnSegments"];
15->20 [style = bold, label=""];
15->16 [style = solid, label="i"];
11->13 [style = bold, label=""];
24->17 [style = bold, label=""];
1->12 [style = bold, label=""];
37->32 [style = bold, label=""];
25->10 [style = bold, label=""];
20->13 [style = dotted, label="true"];
6->0 [style = dotted, label="true"];
19->15 [style = bold, label=""];
1->12 [style = solid, label="stopIndex"];
20->15 [style = dotted, label="true"];
10->20 [style = solid, label="i"];
29->36 [style = bold, label=""];
11->7 [style = dotted, label="true"];
21->24 [style = solid, label="result"];
48->49 [style = solid, label="index"];
8->23 [style = bold, label=""];
36->41 [style = bold, label=""];
13->3 [style = dotted, label="true"];
38->11 [style = bold, label=""];
20->26 [style = dotted, label="true"];
36->31 [style = bold, label=""];
4->19 [style = bold, label=""];
11->14 [style = dotted, label="true"];
51->44 [style = bold, label=""];
7->11 [style = solid, label="index"];
3->12 [style = solid, label="startIndex"];
15->29 [style = dashed, label="0"];
14->2 [style = solid, label="stopIndex"];
21->25 [style = bold, label=""];
36->40 [style = dotted, label="true"];
26->4 [style = bold, label=""];
42->40 [style = bold, label=""];
43->45 [style = bold, label=""];
16->8 [style = solid, label="expression"];
45->49 [style = dotted, label="true"];
20->18 [style = bold, label=""];
36->7 [style = dotted, label="true"];
41->30 [style = bold, label=""];
6->5 [style = dotted, label="true"];
10->16 [style = solid, label="i"];
39->35 [style = bold, label=""];
21->19 [style = solid, label="result"];
43->49 [style = solid, label="index"];
10->43 [style = dashed, label="0"];
28->38 [style = dotted, label="true"];
22->14 [style = bold, label=""];
22->2 [style = solid, label="startIndex"];
23->20 [style = bold, label=""];
37->11 [style = solid, label="index"];
20->9 [style = dotted, label="true"];
3->1 [style = bold, label=""];
16->8 [style = bold, label=""];
21->27 [style = bold, label=""];
20->17 [style = dotted, label="true"];
6->21 [style = bold, label=""];
46->47 [style = dotted, label="true"];
9->20 [style = bold, label=""];
12->24 [style = bold, label=""];
36->28 [style = dotted, label="true"];
10->13 [style = solid, label="i"];
27->37 [style = bold, label=""];
21->42 [style = solid, label="result"];
10->15 [style = solid, label="i"];
20->4 [style = dotted, label="true"];
25->27 [style = dashed, label="0"];
17->4 [style = solid, label="startIndex"];
28->42 [style = dotted, label="true"];
46->50 [style = dotted, label="true"];
20->23 [style = dotted, label="true"];
34->33 [style = dotted, label="true"];
11->22 [style = bold, label=""];
14->2 [style = bold, label=""];
20->19 [style = dotted, label="true"];
15->20 [style = solid, label="i"];
36->30 [style = dotted, label="true"];
34->21 [style = bold, label=""];
7->36 [style = bold, label=""];
26->4 [style = solid, label="stopIndex"];
7->13 [style = bold, label=""];
36->41 [style = dotted, label="true"];
34->5 [style = dotted, label="true"];
21->7 [style = solid, label="result"];
10->20 [style = bold, label=""];
17->26 [style = bold, label=""];
28->40 [style = bold, label=""];
13->12 [style = dotted, label="true"];
45->49 [style = bold, label=""];
21->18 [style = solid, label="result"];
20->8 [style = dotted, label="true"];
21->31 [style = solid, label="result"];
43->48 [style = solid, label="index"];
15->13 [style = solid, label="i"];
11->42 [style = bold, label=""];
11->22 [style = dotted, label="true"];
44->43 [style = bold, label=""];
32->29 [style = bold, label=""];
13->1 [style = dotted, label="true"];
32->11 [style = solid, label="previousElementStopIndex"];
40->7 [style = bold, label=""];
48->45 [style = bold, label=""];
13->3 [style = bold, label=""];
38->35 [style = dotted, label="true"];
17->40 [style = dashed, label="0"];
41->30 [style = solid, label="each"];
40->11 [style = solid, label="previousElementStopIndex"];
23->30 [style = dashed, label="0"];
22->39 [style = dashed, label="0"];
10->37 [style = dashed, label="0"];
21->51 [style = dashed, label="0"];
2->7 [style = bold, label=""];
23->9 [style = bold, label=""];
20->16 [style = dotted, label="true"];
35->11 [style = bold, label=""];
}
