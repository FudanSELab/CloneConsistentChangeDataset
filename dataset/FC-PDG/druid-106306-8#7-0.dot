digraph {
4 [style = filled, label = "Query serdeQuery = jsonMapper.readValue(json,)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String json = jsonMapper.writeValueAsString(query)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<Result<TopNResultValue>> expectedResults = Collections.singletonList(new Result<TopNResultValue>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new TopNResultValue(Arrays.asList(ImmutableMap.builder().put(\"market\",\"spot\").put(\"rows\",837L).put(\"index\",95606.57232284546D).put(\"addRowsIndexConstant\",96444.57232284546D).put(\"uniques\",QueryRunnerTestHelper.UNIQUES_9).put(\"maxIndex\",277.273533D).put(\"minIndex\",59.02102279663086D).build(),ImmutableMap.builder().put(\"market\",\"total_market\").put(\"rows\",186L).put(\"index\",215679.82879638672D).put(\"addRowsIndexConstant\",215866.82879638672D).put(\"uniques\",QueryRunnerTestHelper.UNIQUES_2).put(\"maxIndex\",1743.92175D).put(\"minIndex\",792.3260498046875D).build(),ImmutableMap.builder().put(\"market\",\"upfront\").put(\"rows\",186L).put(\"index\",192046.1060180664D).put(\"addRowsIndexConstant\",192233.1060180664D).put(\"uniques\",QueryRunnerTestHelper.UNIQUES_2).put(\"maxIndex\",1870.061029D).put(\"minIndex\",545.9906005859375D).build()))))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).dimension(QueryRunnerTestHelper.marketDimension).metric(QueryRunnerTestHelper.uniqueMetric).threshold(3).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).aggregators(Lists.newArrayList(Iterables.concat(commonAggregators,Lists.newArrayList(new DoubleMaxAggregatorFactory(\"maxIndex\",\"index\"),new DoubleMinAggregatorFactory(\"minIndex\",\"index\"))))).postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant)).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Query query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).dimension(QueryRunnerTestHelper.marketDimension).metric(QueryRunnerTestHelper.indexMetric).threshold(4).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).aggregators(Lists.newArrayList(Iterables.concat(QueryRunnerTestHelper.commonDoubleAggregators,Lists.newArrayList(new DoubleMaxAggregatorFactory(\"maxIndex\",\"index\"),new DoubleMinAggregatorFactory(\"minIndex\",\"index\"))))).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Query query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).dimension(QueryRunnerTestHelper.marketDimension).metric(QueryRunnerTestHelper.indexMetric).threshold(4).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).aggregators(Lists.newArrayList(Iterables.concat(QueryRunnerTestHelper.commonDoubleAggregators,Lists.newArrayList(new DoubleMaxAggregatorFactory(\"maxIndex\",\"index\"),new DoubleMinAggregatorFactory(\"minIndex\",\"index\"))))).postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant)).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "testQuerySerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testQuerySerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertExpectedResults(expectedResults,query)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testFullOnTopNOverUniques['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(query,serdeQuery)@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5->1 [style = bold, label=""];
4->0 [style = solid, label="serdeQuery"];
10->9 [style = solid, label="query"];
1->4 [style = bold, label=""];
5->0 [style = solid, label="query"];
1->4 [style = solid, label="json"];
2->1 [style = solid, label="query"];
8->9 [style = solid, label="expectedResults"];
6->5 [style = bold, label=""];
2->5 [style = dashed, label="0"];
3->2 [style = bold, label=""];
10->8 [style = bold, label=""];
5->1 [style = solid, label="query"];
7->10 [style = bold, label=""];
2->0 [style = solid, label="query"];
2->1 [style = bold, label=""];
2->10 [style = dashed, label="0"];
4->0 [style = bold, label=""];
8->9 [style = bold, label=""];
}
