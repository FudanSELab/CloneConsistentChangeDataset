digraph {
15 [style = filled, label = "createMetaDataMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "getMetaDataMap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ShardingSphereMetaData metaData = mock(,RETURNS_DEEP_STUBS)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "result.put(String.format(SCHEMA_PATTERN,i),metaData)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "result.put(String.format(SCHEMA_PATTERN,i),mock())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "return result@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "when(metaData.getResource().getDatabaseType()).thenReturn(new H2DatabaseType())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i < 10@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Map<String,ShardingSphereMetaData> result = new LinkedHashMap<>(10,1)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(metaData.getSchema()).thenReturn(schema)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "ShardingSphereSchema schema = mock()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "when(metaData.isComplete()).thenReturn(true)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ShardingSphereMetaData metaData = mock()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "when(metaData.getRuleMetaData()).thenReturn(new ShardingSphereRuleMetaData(Collections.emptyList(),Collections.emptyList()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "createMetaDataMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(metaData.getResource()).thenReturn(new ShardingSphereResource(Collections.emptyMap(),null,null,new MySQLDatabaseType()))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "result.put(String.format(SCHEMA_PATTERN,i),metaData)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "return result@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(schema.getTables()).thenReturn(new HashMap<>())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "return result@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Map<String,ShardingSphereMetaData> result = new HashMap<>(10)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->3 [style = dotted, label="true"];
20->19 [style = solid, label="metaData"];
4->9 [style = bold, label=""];
6->3 [style = solid, label="metaData"];
2->20 [style = dotted, label="true"];
2->20 [style = bold, label=""];
9->0 [style = bold, label=""];
2->22 [style = dotted, label="true"];
22->19 [style = bold, label=""];
6->20 [style = dashed, label="0"];
2->6 [style = bold, label=""];
9->13 [style = solid, label="result"];
0->2 [style = bold, label=""];
1->3 [style = bold, label=""];
3->11 [style = bold, label=""];
11->3 [style = solid, label="i"];
19->11 [style = bold, label=""];
16->17 [style = bold, label=""];
6->14 [style = dashed, label="0"];
2->18 [style = dotted, label="true"];
11->2 [style = bold, label=""];
2->13 [style = bold, label=""];
2->11 [style = dotted, label="true"];
20->18 [style = bold, label=""];
5->1 [style = bold, label=""];
0->14 [style = solid, label="i"];
18->22 [style = bold, label=""];
17->0 [style = bold, label=""];
8->5 [style = bold, label=""];
2->6 [style = dotted, label="true"];
10->12 [style = bold, label=""];
12->8 [style = bold, label=""];
15->9 [style = bold, label=""];
2->21 [style = bold, label=""];
6->10 [style = bold, label=""];
11->19 [style = solid, label="i"];
2->14 [style = bold, label=""];
0->11 [style = solid, label="i"];
0->3 [style = solid, label="i"];
11->2 [style = solid, label="i"];
11->14 [style = solid, label="i"];
9->17 [style = dashed, label="0"];
2->12 [style = dotted, label="true"];
12->22 [style = dashed, label="0"];
2->14 [style = dotted, label="true"];
2->7 [style = bold, label=""];
0->19 [style = solid, label="i"];
2->5 [style = dotted, label="true"];
2->1 [style = dotted, label="true"];
17->21 [style = solid, label="result"];
14->11 [style = bold, label=""];
10->5 [style = solid, label="schema"];
9->7 [style = solid, label="result"];
2->8 [style = dotted, label="true"];
2->19 [style = dotted, label="true"];
2->10 [style = dotted, label="true"];
0->2 [style = solid, label="i"];
}
