digraph {
15 [style = filled, label = "testJoinElectedLeader['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "testJoinElectedLeader['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "DiscoveryNode node0 = newNode(0,true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "joinNodeAndRun(new JoinRequest(node0,Optional.of(new Join(node0,node0,newTerm,initialTerm,initialVersion))))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testJoinFollowerFails['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "long initialVersion = randomLongBetween(1,10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertFalse(clusterStateHasNode(node1))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "handleStartJoinFrom(node1,newTerm)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "long initialTerm = randomLongBetween(1,10)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "long newTerm = initialTerm + randomLongBetween(1,10)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(expectThrows(,null).getMessage(),containsString(\"join target is a follower\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "joinNodeAndRun(new JoinRequest(node0,newTerm,Optional.of(new Join(node0,node0,newTerm,initialTerm,initialVersion))))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DiscoveryNode node1 = newNode(1,true)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "setupFakeMasterServiceAndCoordinator(initialTerm,initialState(node0,initialTerm,initialVersion,new VotingConfiguration(Collections.singleton(node0.getId()))))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(clusterStateHasNode(node1))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "joinNodeAndRun(new JoinRequest(node1,Optional.of(new Join(node1,node0,newTerm,initialTerm,initialVersion))))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "handleFollowerCheckFrom(node1,newTerm)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "joinNodeAndRun(new JoinRequest(node1,newTerm,Optional.of(new Join(node1,node0,newTerm,initialTerm,initialVersion))))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3->4 [style = solid, label="initialTerm"];
5->7 [style = solid, label="node0"];
3->14 [style = solid, label="initialTerm"];
2->19 [style = solid, label="node1"];
4->14 [style = bold, label=""];
6->12 [style = solid, label="initialVersion"];
0->13 [style = bold, label=""];
5->11 [style = solid, label="node0"];
4->12 [style = solid, label="newTerm"];
5->12 [style = solid, label="node0"];
12->16 [style = dashed, label="0"];
2->16 [style = solid, label="node1"];
7->14 [style = dashed, label="0"];
2->3 [style = bold, label=""];
11->4 [style = bold, label=""];
3->16 [style = solid, label="initialTerm"];
18->19 [style = bold, label=""];
3->6 [style = bold, label=""];
2->1 [style = solid, label="node1"];
7->0 [style = bold, label=""];
4->18 [style = bold, label=""];
12->9 [style = bold, label=""];
3->12 [style = solid, label="initialTerm"];
13->16 [style = bold, label=""];
4->7 [style = bold, label=""];
15->5 [style = bold, label=""];
3->11 [style = solid, label="initialTerm"];
20->5 [style = bold, label=""];
2->18 [style = solid, label="node1"];
6->16 [style = solid, label="initialVersion"];
5->2 [style = bold, label=""];
4->7 [style = solid, label="newTerm"];
13->12 [style = bold, label=""];
6->11 [style = solid, label="initialVersion"];
8->5 [style = bold, label=""];
14->0 [style = bold, label=""];
11->10 [style = bold, label=""];
6->14 [style = solid, label="initialVersion"];
6->11 [style = bold, label=""];
5->14 [style = solid, label="node0"];
4->16 [style = solid, label="newTerm"];
10->4 [style = bold, label=""];
2->13 [style = solid, label="node1"];
3->7 [style = solid, label="initialTerm"];
4->19 [style = solid, label="newTerm"];
4->18 [style = solid, label="newTerm"];
9->1 [style = bold, label=""];
2->12 [style = solid, label="node1"];
5->16 [style = solid, label="node0"];
4->14 [style = solid, label="newTerm"];
21->17 [style = bold, label=""];
6->7 [style = solid, label="initialVersion"];
16->9 [style = bold, label=""];
19->21 [style = bold, label=""];
}
