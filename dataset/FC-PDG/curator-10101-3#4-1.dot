digraph {
19 [style = filled, label = "client.create().compressed().creatingParentsIfNeeded().forPath(\"/a/b/c\",data)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.builder().compressionProvider(compressionProvider).connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "client.start()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "{Closeables.closeQuietly(client)}@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "CompressionProvider compressionProvider = new CompressionProvider(){@Override public byte(( compress(String path,byte(( data){compressCounter.incrementAndGet()byte(( bytes = new byte((((System.arraycopy(data,0,bytes,0,data.length)System.arraycopy(data,0,bytes,data.length,data.length)return bytes}@Override public byte(( decompress(String path,byte(( compressedData){decompressCounter.incrementAndGet()byte(( bytes = new byte((((System.arraycopy(compressedData,0,bytes,0,bytes.length)return bytes}}@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final AtomicInteger decompressCounter = new AtomicInteger()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertNotEquals(data,client.getData().forPath(\"/a/b/c\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertNotEquals(data,client.getData().forPath(\"/a/b/c\"))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final byte(( data = \"here's a string\".getBytes()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(data.length,client.getData().decompressed().forPath(\"/a/b/c\").length)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(decompressCounter.get(),1)@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testCompressionProvider['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(data.length,client.getData().decompressed().forPath(\"/a/b/c\").length)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testCompressionProvider['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "client.create().compressed().creatingParentsIfNeeded().forPath(\"/a/b/c\",data)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "client.start()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(compressCounter.get(),1)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testSimple['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final AtomicInteger compressCounter = new AtomicInteger()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
4->9 [style = bold, label=""];
5->10 [style = bold, label=""];
16->15 [style = bold, label=""];
5->6 [style = solid, label="data"];
17->5 [style = bold, label=""];
2->6 [style = bold, label=""];
0->2 [style = bold, label=""];
18->19 [style = bold, label=""];
11->12 [style = bold, label=""];
5->14 [style = bold, label=""];
3->8 [style = solid, label="client"];
7->8 [style = bold, label=""];
14->20 [style = solid, label="client"];
5->2 [style = solid, label="data"];
3->0 [style = bold, label=""];
5->12 [style = solid, label="data"];
19->16 [style = bold, label=""];
5->16 [style = solid, label="data"];
15->20 [style = bold, label=""];
5->19 [style = solid, label="data"];
13->5 [style = bold, label=""];
14->18 [style = bold, label=""];
12->3 [style = bold, label=""];
8->4 [style = bold, label=""];
6->7 [style = bold, label=""];
10->11 [style = bold, label=""];
}
