digraph {
25 [style = filled, label = "Assert.assertEquals(\"von Neumann, J., Smith, J. and Black Brown, P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(\"John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",false,false))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(\"John Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",false,false))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"J. P. von Neumann\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Peter von Neumann\",true,true))@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "String a = AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(\"J. Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",true,false))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testFixAuthorFirstNameFirstCommas['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",false,true))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(\"John Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",false,true))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",false,true))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false).equals(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false)))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true).equals(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann\" + (0 == 1? \"\": \" and \") + \"John Smith and Black Brown, Peter\",true,true)))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "Assert.assertTrue(a.equals(b))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(\"Smith, J.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith\",true,false))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(\"Smith, John and Black Brown, Peter\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith and Black Brown, Peter\",false,false))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true).equals(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true)))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "Assert.assertEquals(\"Smith, John\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith\",false,false))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorLastNameFirstCommas(\"\",false,false))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",true,true))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(\"J. von Neumann, J. Smith, and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(a,b)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(\"J. Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",true,true))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"John von Neumann, John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,false))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "String b = AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann\" + (0 == 1? \"\": \" and \") + \"John Smith and Black Brown, Peter\",true,false)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",true,false))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorLastNameFirstCommas(\"\",true,false))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testFixAuthorFirstNameFirstCommas['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,true))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",true,true))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(\"Smith, J. and Black Brown, P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith and Black Brown, Peter\",true,false))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(\"J. P. von Neumann\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Peter von Neumann\",true,false))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(\"von Neumann, John, Smith, John and Black Brown, Peter\",AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,false))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",false,false))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",true,false))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testFixAuthorLastNameFirstCommasNoComma['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false).equals(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann\" + (0 == 1? \"\": \" and \") + \"John Smith and Black Brown, Peter\",true,false)))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(\"von Neumann, J. P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Peter von Neumann\",true,false))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9->36 [style = dashed, label="0"];
16->3 [style = bold, label=""];
1->4 [style = bold, label=""];
15->34 [style = dashed, label="0"];
2->19 [style = bold, label=""];
28->37 [style = bold, label=""];
15->23 [style = dashed, label="0"];
21->0 [style = bold, label=""];
24->35 [style = bold, label=""];
14->25 [style = dashed, label="0"];
25->30 [style = bold, label=""];
31->24 [style = bold, label=""];
33->28 [style = bold, label=""];
11->6 [style = bold, label=""];
0->2 [style = bold, label=""];
20->0 [style = bold, label=""];
26->34 [style = bold, label=""];
29->31 [style = bold, label=""];
18->27 [style = dashed, label="0"];
4->22 [style = dashed, label="0"];
27->31 [style = solid, label="b"];
0->28 [style = dashed, label="0"];
5->17 [style = bold, label=""];
15->18 [style = bold, label=""];
10->7 [style = bold, label=""];
22->5 [style = bold, label=""];
32->26 [style = bold, label=""];
13->26 [style = dashed, label="0"];
1->22 [style = bold, label=""];
3->9 [style = bold, label=""];
8->1 [style = bold, label=""];
36->25 [style = bold, label=""];
19->13 [style = bold, label=""];
18->10 [style = bold, label=""];
34->29 [style = solid, label="a"];
27->29 [style = solid, label="b"];
2->37 [style = dashed, label="0"];
7->16 [style = bold, label=""];
13->23 [style = bold, label=""];
9->14 [style = bold, label=""];
37->32 [style = bold, label=""];
8->30 [style = dashed, label="0"];
14->8 [style = bold, label=""];
13->15 [style = bold, label=""];
19->32 [style = dashed, label="0"];
27->29 [style = bold, label=""];
35->36 [style = bold, label=""];
4->5 [style = bold, label=""];
23->18 [style = bold, label=""];
34->27 [style = bold, label=""];
17->11 [style = bold, label=""];
6->12 [style = bold, label=""];
}
