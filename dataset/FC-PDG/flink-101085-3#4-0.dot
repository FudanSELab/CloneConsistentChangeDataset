digraph {
3 [style = filled, label = "testLookupJoinPartitionedTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<Row> results = CollectionUtil.iteratorToList(flinkTable.execute().collect())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "batchEnv.registerCatalog(hiveCatalog.getName(),hiveCatalog)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testLookupJoinPartitionedTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "batchEnv.executeSql(\"insert overwrite partition_table_1 values \" + \"(1,'a',08,2019,'09','01'),\" + \"(1,'a',10,2020,'09','31'),\" + \"(2,'a',21,2020,'09','31'),\" + \"(2,'b',22,2020,'09','31'),\" + \"(3,'c',33,2020,'09','31'),\" + \"(1,'a',101,2020,'08','01'),\" + \"(2,'a',121,2020,'08','01'),\" + \"(2,'b',122,2020,'08','01')\").await()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"(+I(1, a, 10, 2020, 09, 31(, +I(2, b, 22, 2020, 09, 31(, +I(3, c, 33, 2020, 09, 31((\",results.toString())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testLookupJoinPartitionedTableWithPartitionTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"(1,a,10,2020,09,31, 2,b,22,2020,09,31, 3,c,33,2020,09,31(\",results.toString())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "batchEnv.useCatalog(hiveCatalog.getName())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "batchEnv.executeSql(\"insert overwrite partition_table_2 values \" + \"(1,'a',08,2020,'08','01'),\" + \"(1,'a',10,2020,'08','31'),\" + \"(2,'a',21,2019,'08','31'),\" + \"(2,'b',22,2020,'08','31'),\" + \"(3,'c',33,2017,'08','31'),\" + \"(1,'a',101,2017,'09','01'),\" + \"(2,'a',121,2019,'09','01'),\" + \"(2,'b',122,2019,'09','01')\").await()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TableEnvironment batchEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode(SqlDialect.HIVE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TableImpl flinkTable = (TableImpl)tableEnv.sqlQuery(\"select p.x, p.y, b.z, b.pt_year, b.pt_mon, b.pt_day from \" + \" default_catalog.default_database.probe as p\" + \" join partition_table_1 for system_time as of p.p as b on p.x=b.x and p.y=b.y\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TableImpl flinkTable = (TableImpl)tableEnv.sqlQuery(\"select p.x, p.y, b.z, b.pt_year, b.pt_mon, b.pt_day from \" + \" default_catalog.default_database.probe as p\" + \" join partition_table_2 for system_time as of p.p as b on p.x=b.x and p.y=b.y\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"(1,a,10,2020,08,31, 2,b,22,2020,08,31(\",results.toString())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7->9 [style = bold, label=""];
4->12 [style = bold, label=""];
6->11 [style = dashed, label="0"];
1->4 [style = bold, label=""];
7->0 [style = bold, label=""];
0->9 [style = dashed, label="0"];
5->6 [style = bold, label=""];
6->7 [style = bold, label=""];
3->2 [style = bold, label=""];
8->2 [style = bold, label=""];
0->10 [style = dashed, label="0"];
7->10 [style = bold, label=""];
4->5 [style = bold, label=""];
2->1 [style = bold, label=""];
11->7 [style = bold, label=""];
13->2 [style = bold, label=""];
12->11 [style = bold, label=""];
}
