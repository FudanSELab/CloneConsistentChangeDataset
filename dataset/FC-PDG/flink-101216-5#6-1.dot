digraph {
6 [style = filled, label = "iteration.registerAggregator(NEGATIVE_ELEMENTS_AGGR,aggr)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "DeltaIteration<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>> iteration = initialSolutionSet.iterateDelta(initialSolutionSet,MAX_ITERATIONS,0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Collections.sort(result)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "expected = \"1\" + \"2\" + \"2\" + \"3\" + \"3\" + \"3\" + \"4\" + \"4\" + \"4\" + \"4\" + \"5\" + \"5\" + \"5\" + \"5\" + \"5\"@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "env.setParallelism(parallelism)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testAggregatorWithoutParameterForIterateDelta['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "DataSet<Tuple2<Integer,Integer>> updatedDs = iteration.getWorkset().map(new AggregateMapDelta())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DataSet<Tuple2<Integer,Integer>> iterationRes = iteration.closeWith(newElements,newElements)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "env.execute()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "LongSumAggregator aggr = new LongSumAggregator()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "result.writeAsText(resultPath)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DataSet<Tuple2<Integer,Integer>> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env).map(new TupleMakerMap())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "LongSumAggregator aggr = new LongSumAggregatorWithParameter(4)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "DataSet<Integer> result = iterationRes.map(new ProjectSecondMapper())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testAggregatorWithParameterForIterateDelta['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(expected,result)@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "List<Integer> result = iterationRes.map(new ProjectSecondMapper()).collect()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "List<Integer> expected = Arrays.asList(1,2,2,3,3,3,4,4,4,4,5,5,5,5,5)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testAggregatorWithoutParameterForIterateDelta['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "DataSet<Tuple2<Integer,Integer>> newElements = updatedDs.join(iteration.getSolutionSet()).where(0).equalTo(0).flatMap(new UpdateFilter())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
11->20 [style = dashed, label="0"];
0->13 [style = bold, label=""];
3->1 [style = bold, label=""];
5->20 [style = bold, label=""];
20->6 [style = solid, label="aggr"];
11->6 [style = bold, label=""];
8->3 [style = bold, label=""];
18->17 [style = bold, label=""];
7->0 [style = solid, label="newElements"];
7->0 [style = bold, label=""];
20->6 [style = bold, label=""];
15->18 [style = solid, label="result"];
9->7 [style = bold, label=""];
15->18 [style = bold, label=""];
13->15 [style = dashed, label="0"];
0->15 [style = bold, label=""];
19->8 [style = bold, label=""];
12->10 [style = bold, label=""];
13->12 [style = bold, label=""];
17->16 [style = solid, label="expected"];
4->8 [style = bold, label=""];
12->18 [style = dashed, label="0"];
10->2 [style = bold, label=""];
5->11 [style = bold, label=""];
14->8 [style = bold, label=""];
6->9 [style = bold, label=""];
15->16 [style = solid, label="result"];
17->16 [style = bold, label=""];
11->6 [style = solid, label="aggr"];
1->5 [style = solid, label="initialSolutionSet"];
}
