digraph {
10 [style = filled, label = "assertEquals(\"a string\",results(0()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder(LineDelimiter.UNIX)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testThatContextIsMaintainedBetweenMessages['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Context context = decoder.createDecoderState()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(1,results.length)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertEquals(1,results.length)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"a string\",results)@@@11@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertNotNull(results)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"a string\",results(0()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertNotNull(results)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(1,context.getBuffer().position())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "results = decoder.decode(ByteBuffer.wrap(\" string\".getBytes()),context)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@9@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String results = decoder.decode(ByteBuffer.wrap(\"a stringa\".getBytes()),context)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testThatContextIsMaintainedBetweenMessages['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a stringa\".getBytes()),context)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"a string\",results)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testThatUnixLineTerminatedStringReturnsNonEmptyResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14->16 [style = bold, label=""];
4->9 [style = bold, label=""];
1->4 [style = bold, label=""];
17->14 [style = solid, label="results"];
8->15 [style = bold, label=""];
12->5 [style = bold, label=""];
4->17 [style = dashed, label="0"];
20->9 [style = bold, label=""];
20->9 [style = solid, label="results"];
0->19 [style = dashed, label="0"];
17->9 [style = bold, label=""];
12->11 [style = bold, label=""];
18->19 [style = bold, label=""];
1->20 [style = bold, label=""];
1->17 [style = solid, label="context"];
1->7 [style = solid, label="context"];
1->5 [style = solid, label="context"];
7->10 [style = solid, label="results"];
5->8 [style = solid, label="results"];
6->14 [style = dashed, label="0"];
7->8 [style = bold, label=""];
2->10 [style = bold, label=""];
2->8 [style = dashed, label="0"];
17->9 [style = solid, label="results"];
3->0 [style = bold, label=""];
1->17 [style = bold, label=""];
9->6 [style = bold, label=""];
19->1 [style = bold, label=""];
1->20 [style = solid, label="context"];
8->2 [style = bold, label=""];
4->9 [style = solid, label="results"];
4->20 [style = dashed, label="0"];
7->8 [style = solid, label="results"];
0->1 [style = bold, label=""];
4->12 [style = solid, label="results"];
5->7 [style = solid, label="results"];
9->14 [style = bold, label=""];
16->5 [style = bold, label=""];
20->12 [style = solid, label="results"];
5->7 [style = bold, label=""];
13->0 [style = bold, label=""];
1->4 [style = solid, label="context"];
10->11 [style = bold, label=""];
6->12 [style = bold, label=""];
}
