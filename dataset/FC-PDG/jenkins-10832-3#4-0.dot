digraph {
13 [style = filled, label = "Assert.assertTrue(finalResult != null && finalResult)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "String testException = Messages.Retrier_ExceptionFailed(ATTEMPTS,ACTION)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "failedActionWithAllowedExceptionWithListenerChangingResultTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final String ACTION = \"print\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String textSuccess = Messages.Retrier_Success(ACTION,ATTEMPTS)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(finalResult == null? false: finalResult)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Retrier<Boolean> r = new Retrier.Builder<>((Callable<Boolean>)null,null,ACTION).withAttempts(ATTEMPTS).withDuringActionExceptions(new Class((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@4cda92).build()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "RingBufferLogHandler handler = new RingBufferLogHandler(20)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "r.start()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Logger.getLogger(.getName()).addHandler(handler)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "failedActionWithUnAllowedExceptionTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(String.format(\"The log should contain '%s'\",testException),handler.getView().stream().anyMatch(null))@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final int ATTEMPTS = 1@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "failedActionWithAllowedExceptionWithListenerChangingResultTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "fail(\"The process should be exited with an unexpected exception\")@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(String.format(\"The log should contain '%s'\",textSuccess),handler.getView().stream().anyMatch(null))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Boolean finalResult = r.start()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->13 [style = solid, label="finalResult"];
5->10 [style = bold, label=""];
4->3 [style = bold, label=""];
15->14 [style = bold, label=""];
16->7 [style = bold, label=""];
0->11 [style = bold, label=""];
7->4 [style = bold, label=""];
11->9 [style = bold, label=""];
7->5 [style = solid, label="ATTEMPTS"];
0->15 [style = bold, label=""];
12->7 [style = bold, label=""];
8->0 [style = bold, label=""];
11->9 [style = solid, label="finalResult"];
4->5 [style = solid, label="ACTION"];
1->6 [style = bold, label=""];
3->8 [style = bold, label=""];
7->1 [style = solid, label="ATTEMPTS"];
11->13 [style = bold, label=""];
9->13 [style = dashed, label="0"];
13->5 [style = bold, label=""];
9->5 [style = bold, label=""];
5->10 [style = solid, label="textSuccess"];
2->7 [style = bold, label=""];
4->1 [style = solid, label="ACTION"];
3->8 [style = solid, label="handler"];
10->1 [style = bold, label=""];
1->6 [style = solid, label="testException"];
}
