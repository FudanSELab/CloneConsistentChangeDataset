digraph {
5 [style = filled, label = "List<ScanResultValue> expectedResults = toExpected(toFullEvents(V_0112_0114),columns,0,3)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testFullOnSelect['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ScanQuery query = newTestQuery().intervals(I_0112_0114).virtualColumns(EXPR_COLUMN).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "ScanQuery query = newTestQuery().intervals(I_0112_0114).virtualColumns(EXPR_COLUMN).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "verify(expectedResults,populateNullColumnAtLastForQueryableIndexCase(compactedListToRow(results),\"null_column\"))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final List<String> columns = Lists.newArrayList(getTimestampName(),\"expr\",\"market\",\"quality\",\"qualityLong\",\"qualityFloat\",\"qualityDouble\",\"qualityNumericString\",\"placement\",\"placementish\",\"partial_null_column\",\"null_column\",\"index\",\"indexMin\",\"indexMaxPlusTen\",\"quality_uniques\",\"indexFloat\",\"indexMaxFloat\",\"indexMinFloat\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testFullOnSelectAsCompactedList['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "ScanQuery query = newTestQuery().intervals(I_0112_0114).virtualColumns(EXPR_COLUMN).resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST).build()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "List<String> columns = Lists.newArrayList(getTimestampName(),\"expr\",\"market\",\"quality\",\"qualityLong\",\"qualityFloat\",\"qualityDouble\",\"qualityNumericString\",\"placement\",\"placementish\",\"partial_null_column\",\"null_column\",\"index\",\"indexMin\",\"indexMaxPlusTen\",\"quality_uniques\",\"indexFloat\",\"indexMaxFloat\",\"indexMinFloat\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "HashMap<String,Object> context = new HashMap<String,Object>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "verify(expectedResults,populateNullColumnAtLastForQueryableIndexCase(results,\"null_column\"))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testFullOnSelectAsCompactedList['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query),context).toList()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
4->3 [style = bold, label=""];
1->12 [style = solid, label="results"];
3->5 [style = solid, label="columns"];
9->11 [style = bold, label=""];
2->6 [style = bold, label=""];
11->6 [style = bold, label=""];
8->3 [style = bold, label=""];
0->12 [style = dashed, label="0"];
2->7 [style = dashed, label="0"];
9->5 [style = solid, label="columns"];
6->1 [style = bold, label=""];
3->2 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
5->12 [style = bold, label=""];
3->9 [style = dashed, label="0"];
1->0 [style = solid, label="results"];
7->6 [style = bold, label=""];
5->0 [style = solid, label="expectedResults"];
2->11 [style = dashed, label="0"];
5->12 [style = solid, label="expectedResults"];
10->9 [style = bold, label=""];
}
