digraph {
13 [style = filled, label = "return write.asDynamicOverwrite()@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TypeUtil.validateWriteSchema(table.schema(),writeSchema,checkNullability(spark,options),checkOrdering(spark,options))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String appId = spark.sparkContext().applicationId()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SparkWrite write = new SparkWrite(table,io,encryptionManager,writeInfo,appId,wapId,writeSchema,dsSchema)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Broadcast<EncryptionManager> encryptionManager = lazySparkContext().broadcast(table.encryption())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "buildForBatch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "overwriteByFilter@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "buildForBatch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "buildForStreaming['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "return write.asOverwriteByFilter(overwriteExpr)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Preconditions.checkState(!overwriteDynamic,\"Unsupported streaming operation: dynamic partition overwrite\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "overwriteDynamic@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Schema writeSchema = SparkSchemaUtil.convert(table.schema(),dsSchema)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SparkUtil.validatePartitionTransforms(table.spec())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return write.asStreamingAppend()@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Broadcast<FileIO> io = lazySparkContext().broadcast(SparkUtil.serializableFileIO(table))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Preconditions.checkState(!overwriteByFilter || overwriteExpr == Expressions.alwaysTrue(),\"Unsupported streaming operation: overwrite by filter: %s\",overwriteExpr)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String wapId = spark.conf().get(\"spark.wap.id\",null)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "return write.asStreamingOverwrite()@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "return write.asCopyOnWriteMergeWrite(mergeScan,isolationLevel)@@@18@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "overwriteFiles@@@17@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "return write.asBatchAppend()@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14->5 [style = dotted, label="false"];
14->5 [style = bold, label=""];
7->4 [style = dotted, label="true"];
3->14 [style = bold, label=""];
8->9 [style = bold, label=""];
9->11 [style = bold, label=""];
15->9 [style = bold, label=""];
19->6 [style = bold, label=""];
12->10 [style = solid, label="wapId"];
14->16 [style = bold, label=""];
0->10 [style = solid, label="encryptionManager"];
12->2 [style = bold, label=""];
2->10 [style = solid, label="io"];
14->16 [style = dotted, label="true"];
1->18 [style = bold, label=""];
11->1 [style = bold, label=""];
9->11 [style = solid, label="writeSchema"];
7->20 [style = bold, label=""];
1->6 [style = bold, label=""];
3->13 [style = bold, label=""];
3->5 [style = dotted, label="false"];
3->5 [style = bold, label=""];
7->3 [style = bold, label=""];
0->10 [style = bold, label=""];
10->7 [style = bold, label=""];
3->14 [style = dotted, label="false"];
18->19 [style = bold, label=""];
7->4 [style = bold, label=""];
6->10 [style = solid, label="appId"];
6->12 [style = bold, label=""];
7->3 [style = dotted, label="false"];
7->17 [style = bold, label=""];
7->17 [style = dotted, label="false"];
2->0 [style = bold, label=""];
4->20 [style = dashed, label="0"];
21->9 [style = bold, label=""];
9->10 [style = solid, label="writeSchema"];
7->20 [style = dotted, label="true"];
5->17 [style = dashed, label="0"];
3->13 [style = dotted, label="true"];
}
