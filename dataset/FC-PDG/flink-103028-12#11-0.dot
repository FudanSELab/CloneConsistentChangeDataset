digraph {
0 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,bounded)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final SourceTransformation<Integer,?,?> bounded = getSourceTransformation(\"Bounded Source\",Boundedness.BOUNDED)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,ScheduleMode.EAGER,false))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testDetectionThroughTransitivePredecessors['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testBoundedDetection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(Boundedness.BOUNDED,bounded.getBoundedness())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testBoundedDetection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.FORWARD_EDGES_PIPELINED,ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST,false))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final SourceTransformation<Integer,?,?> unbounded = getSourceTransformation(\"Unbounded Source\",Boundedness.CONTINUOUS_UNBOUNDED)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED,ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST,false))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "final TwoInputTransformation<Integer,Integer,Integer> resultTransform = new TwoInputTransformation<>(bounded,unbounded,\"Test Two Input Transformation\",SimpleOperatorFactory.of(new StreamGraphGeneratorTest.OutputTypeConfigurableOperationWithTwoInputs()),BasicTypeInfo.INT_TYPE_INFO,1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,resultTransform)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(Boundedness.CONTINUOUS_UNBOUNDED,unbounded.getBoundedness())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->9 [style = bold, label=""];
9->7 [style = solid, label="unbounded"];
5->2 [style = bold, label=""];
10->2 [style = bold, label=""];
3->2 [style = bold, label=""];
0->1 [style = solid, label="graph"];
2->0 [style = solid, label="bounded"];
9->8 [style = bold, label=""];
0->6 [style = solid, label="graph"];
0->6 [style = bold, label=""];
2->4 [style = bold, label=""];
0->1 [style = bold, label=""];
7->12 [style = bold, label=""];
2->7 [style = solid, label="bounded"];
1->6 [style = dashed, label="0"];
7->12 [style = solid, label="resultTransform"];
8->7 [style = bold, label=""];
4->0 [style = bold, label=""];
12->11 [style = solid, label="graph"];
12->11 [style = bold, label=""];
}
