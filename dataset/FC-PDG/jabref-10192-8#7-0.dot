digraph {
16 [style = filled, label = "supportsYearSearch['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "List<String> differentYearsInResult = result.stream().map(null).filter(null).map(null).distinct().collect(Collectors.toList())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ComplexSearchQuery complexSearchQuery = ComplexSearchQuery.builder().singleYear(getTestYear()).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertFalse(result.isEmpty())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<BibEntry> result = getFetcher().performSearch(builder.build())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "ComplexSearchQuery.ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "supportsYearRangeSearch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertTrue(yearsInYearRange.containsAll(differentYearsInResult))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "builder.fromYearAndToYear(2018,2020)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "supportsYearRangeSearch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<BibEntry> result = getFetcher().performSearch(\"year-range:2018-2020\")@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertEquals(Collections.singletonList(getTestYear().toString()),differentYearsInResult)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<BibEntry> result = getFetcher().performSearch(complexSearchQuery)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertTrue(yearsInYearRange.containsAll(differentYearsInResult))@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<String> yearsInYearRange = List.of(\"2018\",\"2019\",\"2020\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
5->12 [style = dashed, label="0"];
1->8 [style = bold, label=""];
13->14 [style = solid, label="result"];
15->8 [style = solid, label="differentYearsInResult"];
12->13 [style = solid, label="complexSearchQuery"];
1->8 [style = solid, label="result"];
7->4 [style = bold, label=""];
2->9 [style = bold, label=""];
9->10 [style = bold, label=""];
11->2 [style = bold, label=""];
8->7 [style = bold, label=""];
12->13 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
2->0 [style = bold, label=""];
10->8 [style = bold, label=""];
0->1 [style = bold, label=""];
4->8 [style = dashed, label="0"];
14->15 [style = bold, label=""];
9->10 [style = solid, label="result"];
8->4 [style = solid, label="differentYearsInResult"];
7->3 [style = solid, label="differentYearsInResult"];
13->14 [style = bold, label=""];
16->12 [style = bold, label=""];
15->8 [style = bold, label=""];
}
