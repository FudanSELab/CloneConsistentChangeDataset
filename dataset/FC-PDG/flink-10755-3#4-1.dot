digraph {
3 [style = filled, label = "TableSchema schema = TableSchema.builder().field(FAMILY1,ROW(FIELD(COL1,INT()))).field(FAMILY2,ROW(FIELD(COL1,INT()),FIELD(COL2,BIGINT()))).field(ROWKEY,BIGINT()).field(FAMILY3,ROW(FIELD(COL1,DOUBLE()),FIELD(COL2,BOOLEAN()),FIELD(COL3,STRING()))).field(FAMILY4,ROW(FIELD(COL1,DECIMAL(10,3)),FIELD(COL2,TIMESTAMP(3)),FIELD(COL3,DATE()),FIELD(COL4,TIME()))).build()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ResolvedSchema schema = ResolvedSchema.of(Column.physical(FAMILY1,ROW(FIELD(COL1,INT()))),Column.physical(FAMILY2,ROW(FIELD(COL1,INT()),FIELD(COL2,BIGINT()))),Column.physical(ROWKEY,BIGINT()),Column.physical(FAMILY3,ROW(FIELD(COL1,DOUBLE()),FIELD(COL2,BOOLEAN()),FIELD(COL3,STRING()))),Column.physical(FAMILY4,ROW(FIELD(COL1,DECIMAL(10,3)),FIELD(COL2,TIMESTAMP(3)),FIELD(COL3,DATE()),FIELD(COL4,TIME()))))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertArrayEquals(new DataType((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b10ac6,hbaseSchema.getQualifierDataTypes(\"f2\"))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(lookupProvider instanceof TableFunctionProvider)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b10a7b,hbaseSchema.getFamilyNames())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "LookupTableSource.LookupRuntimeProvider lookupProvider = hbaseSource.getLookupRuntimeProvider(new LookupRuntimeProviderContext(lookupKey))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testTableSourceFactory['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "HBaseDynamicTableSource hbaseSource = (HBaseDynamicTableSource)source@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "HBaseTableSchema hbaseSchema = hbaseSource.getHBaseTableSchema()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(Optional.of(Types.LONG),hbaseSchema.getRowKeyTypeInfo())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DynamicTableSource source = createTableSource(schema,getAllOptions())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertArrayEquals(new DataType((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b10aba,hbaseSchema.getQualifierDataTypes(\"f1\"))@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b10a9f,hbaseSchema.getQualifierNames(\"f3\"))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertArrayEquals(new DataType((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b10ae4,hbaseSchema.getQualifierDataTypes(\"f4\"))@@@44@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b10aac,hbaseSchema.getQualifierNames(\"f4\"))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(2,hbaseSchema.getRowKeyIndex())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(source instanceof HBaseDynamicTableSource)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b10a88,hbaseSchema.getQualifierNames(\"f1\"))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(tableFunction instanceof HBaseRowDataLookupFunction)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int(((( lookupKey = {{2}}@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b10a93,hbaseSchema.getQualifierNames(\"f2\"))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertArrayEquals(new DataType((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b10ad4,hbaseSchema.getQualifierDataTypes(\"f3\"))@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TableFunction tableFunction = ((TableFunctionProvider)lookupProvider).createTableFunction()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testTableSourceFactory['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"testHBastTable\",((HBaseRowDataLookupFunction)tableFunction).getHTableName())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testTableSourceFactory['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16->3 [style = bold, label=""];
0->17 [style = solid, label="source"];
9->19 [style = solid, label="tableFunction"];
3->0 [style = solid, label="schema"];
25->3 [style = bold, label=""];
12->15 [style = bold, label=""];
8->6 [style = bold, label=""];
20->14 [style = bold, label=""];
7->20 [style = bold, label=""];
23->0 [style = bold, label=""];
11->2 [style = bold, label=""];
3->0 [style = bold, label=""];
15->5 [style = bold, label=""];
1->17 [style = bold, label=""];
18->22 [style = solid, label="lookupKey"];
3->23 [style = dashed, label="0"];
6->4 [style = bold, label=""];
0->1 [style = solid, label="source"];
18->22 [style = bold, label=""];
19->13 [style = bold, label=""];
2->21 [style = bold, label=""];
22->10 [style = solid, label="lookupProvider"];
23->0 [style = solid, label="schema"];
0->1 [style = bold, label=""];
22->10 [style = bold, label=""];
9->19 [style = bold, label=""];
4->12 [style = bold, label=""];
21->7 [style = bold, label=""];
10->9 [style = bold, label=""];
5->11 [style = bold, label=""];
13->8 [style = bold, label=""];
17->18 [style = bold, label=""];
24->23 [style = bold, label=""];
}
