digraph {
9 [style = filled, label = "Assert.assertEquals(segments.stream().map(null).collect(Collectors.toList()),getUsedIdentifiers())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(0,metadataUpdateCounter.get())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testOvershadowingAnnounce['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(segment).getBytes(\"UTF-8\"),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",segment.getIdentifier()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(segment).getBytes(\"UTF-8\"),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",segment.getIdentifier()))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "coordinator.announceHistoricalSegments(segments)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testOvershadowingAnnounce['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "final ImmutableSet<DataSegment> segments = ImmutableSet.of(defaultSegment,defaultSegment2,defaultSegment4)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(ImmutableList.of(defaultSegment4.getId().toString()),getUsedSegmentIds())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(segment).getBytes(StandardCharsets.UTF_8),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",segment.getId().toString()))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Set<DataSegment> segments@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "coordinator.announceHistoricalSegments(segments)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(ImmutableList.of(defaultSegment4.getIdentifier()),getUsedIdentifiers())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "additionalNumberedShardTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13->11 [style = dotted, label="true"];
4->3 [style = bold, label=""];
2->5 [style = dashed, label="0"];
7->5 [style = bold, label=""];
12->10 [style = bold, label=""];
11->12 [style = solid, label="segments"];
6->0 [style = bold, label=""];
1->0 [style = bold, label=""];
10->9 [style = bold, label=""];
13->12 [style = bold, label=""];
3->2 [style = bold, label=""];
9->8 [style = bold, label=""];
0->4 [style = bold, label=""];
3->7 [style = dashed, label="0"];
2->9 [style = dashed, label="0"];
0->4 [style = solid, label="segments"];
4->7 [style = bold, label=""];
}
