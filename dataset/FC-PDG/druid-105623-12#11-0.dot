digraph {
48 [style = filled, label = "final int rows = 50@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "i < rows@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "Result<TimeseriesResultValue> result = Iterables.getOnlyElement(results)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "i < dimensionCount@@@28@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "allFutures.addAll(queryFutures)@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "QueryRunner<Result<TimeseriesResultValue>> runner = new FinalizeResultsQueryRunner<Result<TimeseriesResultValue>>(factory.createRunner(incrementalIndexSegment),factory.getToolchest())@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "index.add(getLongRow(timestamp + i,dimensionCount))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "testConcurrentAddRead['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "Assert.assertEquals(elementsPerThread,result.getValue().getLongMetric(\"rows\").intValue())@@@75@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final Segment incrementalIndexSegment = new IncrementalIndexSegment(incrementalIndex,null)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "i < dimensionCount@@@77@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
77 [style = filled, label = "final ArrayList<AggregatorFactory> queryAggregatorFactories = new ArrayList<>()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final int elementsPerThread = 1 << 15@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "i < dimensionCount@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"xxx\").granularity(Granularities.ALL).intervals(ImmutableList.of(queryInterval)).aggregators(queryAggregatorFactories).build()@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "boolean isRollup = index.isRollup()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Assert.assertEquals(rows * (isRollup? 1: 2),result.getValue().getLongMetric(\"rows\").intValue())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ingestAggregatorFactories.add(new DoubleSumAggregatorFactory(StringUtils.format(\"doubleSumResult%s\",i),StringUtils.format(\"Dim_%s\",i)))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final QueryRunnerFactory factory = new TimeseriesQueryRunnerFactory(new TimeseriesQueryQueryToolChest(QueryRunnerTestHelper.noopIntervalChunkingQueryRunnerDecorator()),new TimeseriesQueryEngine(),QueryRunnerTestHelper.NOOP_QUERYWATCHER)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final AtomicBoolean someoneRan = new AtomicBoolean(false)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final List<ListenableFuture<?>> indexFutures = new ArrayList<>()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "++i@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "queryAggregatorFactories.add(new CountAggregatorFactory(\"rows\"))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "allFutures.addAll(indexFutures)@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "queryFutures.add(queryExecutor.submit(new Runnable(){@Override public void run(){QueryRunner<Result<TimeseriesResultValue>> runner = new FinalizeResultsQueryRunner<Result<TimeseriesResultValue>>(factory.createRunner(incrementalIndexSegment),factory.getToolchest())TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"xxx\").granularity(Granularities.ALL).intervals(ImmutableList.of(queryInterval)).aggregators(queryAggregatorFactories).build()List<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query)).toList()for (Result<TimeseriesResultValue> result : results){if (someoneRan.get()) {Assert.assertTrue(result.getValue().getDoubleMetric(\"doubleSumResult0\") > 0)}}if (currentlyRunning.get() > 0) {concurrentlyRan.set(true)}}}))@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "testSingleThreadedIndexingAndQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "List<ListenableFuture<?>> allFutures = new ArrayList<>(queryFutures.size() + indexFutures.size())@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final ArrayList<AggregatorFactory> queryAggregatorFactories = new ArrayList<>(dimensionCount + 1)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "indexFutures.add(indexExecutor.submit(new Runnable(){@Override public void run(){currentlyRunning.incrementAndGet()try {for (int i = 0 i < elementsPerThread i++){incrementalIndex.add(getLongRow(timestamp + i,1,DIMENSION_COUNT))}}catch (IndexSizeExceededException e) currentlyRunning.decrementAndGet()someoneRan.set(true)}}))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final ListeningExecutorService indexExecutor = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(concurrentThreads,new ThreadFactoryBuilder().setDaemon(false).setNameFormat(\"index-executor-%d\").setPriority(Thread.MIN_PRIORITY).build()))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final List<ListenableFuture<?>> queryFutures = new ArrayList<>()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "i < DIMENSION_COUNT@@@77@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
70 [style = filled, label = "queryAggregatorFactories.add(new LongSumAggregatorFactory(StringUtils.format(\"sumResult%s\",i),StringUtils.format(\"sumResult%s\",i)))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "final ArrayList<AggregatorFactory> ingestAggregatorFactories = new ArrayList<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Futures.allAsList(allFutures).get()@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final Interval queryInterval = Intervals.of(\"1900-01-01T00:00:00Z/2900-01-01T00:00:00Z\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "final Segment incrementalIndexSegment = new IncrementalIndexSegment(index,null)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "++i@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "int i = 0@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "j < taskCount@@@27@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "queryExecutor.shutdown()@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final IncrementalIndex incrementalIndex = this.incrementalIndex.getConstructor(,,,,,).newInstance(new IncrementalIndexSchema.Builder().withMetrics(factories).build(),true,true,false,true,elementsPerThread * taskCount)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "final IncrementalIndex index = closerRule.closeLater(indexCreator.createIndex(ingestAggregatorFactories.toArray(new AggregatorFactory(((()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final ListeningExecutorService queryExecutor = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(concurrentThreads,new ThreadFactoryBuilder().setDaemon(false).setNameFormat(\"query-executor-%d\").build()))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "final QueryRunner<Result<TimeseriesResultValue>> runner = new FinalizeResultsQueryRunner<Result<TimeseriesResultValue>>(factory.createRunner(incrementalIndexSegment),factory.getToolchest())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final int expectedVal = elementsPerThread * taskCount@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "indexExecutor.shutdown()@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "++i@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "int i = 0@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "i++@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "int i = 0@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "final long timestamp = System.currentTimeMillis()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "++i@@@78@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "queryAggregatorFactories.add(new LongSumAggregatorFactory(StringUtils.format(\"sumResult%s\",i),StringUtils.format(\"sumResult%s\",i)))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "j++@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "int i = 0@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Assert.assertEquals(\"Failed double sum on dimension \" + i,2 * rows,result.getValue().getDoubleMetric(\"doubleSumResult\" + i).intValue())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "final AtomicBoolean concurrentlyRan = new AtomicBoolean(false)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "List<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query)).toList()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "int i = 0@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "Assert.assertEquals(\"Failed long sum on dimension \" + i,2 * rows,result.getValue().getLongMetric(\"sumResult\" + i).intValue())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "queryAggregatorFactories.add(new CountAggregatorFactory(\"rows\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "i < rows@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "int i = 0@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "queryAggregatorFactories.add(new DoubleSumAggregatorFactory(StringUtils.format(\"doubleSumResult%s\",i),StringUtils.format(\"doubleSumResult%s\",i)))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "++i@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "final QueryRunnerFactory factory = new TimeseriesQueryRunnerFactory(new TimeseriesQueryQueryToolChest(QueryRunnerTestHelper.noopIntervalChunkingQueryRunnerDecorator()),new TimeseriesQueryEngine(),QueryRunnerTestHelper.NOOP_QUERYWATCHER)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "List<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query)).toList()@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final int concurrentThreads = 3@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final int taskCount = 30@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final AtomicInteger currentlyRunning = new AtomicInteger(0)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "ingestAggregatorFactories.add(new CountAggregatorFactory(\"rows\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "final ArrayList<AggregatorFactory> queryAggregatorFactories = new ArrayList<>(DIMENSION_COUNT + 1)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "ingestAggregatorFactories.add(new LongSumAggregatorFactory(StringUtils.format(\"sumResult%s\",i),StringUtils.format(\"Dim_%s\",i)))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "i < dimensionCount@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "testConcurrentAddRead['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(StringUtils.format(\"Failed long sum on dimension %d\",i),expectedVal,result.getValue().getLongMetric(StringUtils.format(\"sumResult%s\",i)).intValue())@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "final int dimensionCount = 5@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "i < DIMENSION_COUNT@@@10@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "i++@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(StringUtils.format(\"Failed double sum on dimension %d\",i),expectedVal,result.getValue().getDoubleMetric(StringUtils.format(\"doubleSumResult%s\",i)).intValue())@@@80@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "queryAggregatorFactories.add(new DoubleSumAggregatorFactory(StringUtils.format(\"doubleSumResult%s\",i),StringUtils.format(\"doubleSumResult%s\",i)))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "index.add(getLongRow(timestamp + i,dimensionCount))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"xxx\").granularity(Granularities.ALL).intervals(ImmutableList.of(Intervals.of(\"2000/2030\"))).aggregators(queryAggregatorFactories).build()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int j = 0@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71->54 [style = solid, label="isRollup"];
45->27 [style = dotted, label="true"];
63->72 [style = bold, label=""];
0->30 [style = bold, label=""];
61->62 [style = dotted, label="true"];
66->63 [style = dotted, label="true"];
69->60 [style = bold, label=""];
4->38 [style = solid, label="taskCount"];
76->72 [style = solid, label="i"];
45->27 [style = bold, label=""];
84->48 [style = bold, label=""];
60->66 [style = solid, label="dimensionCount"];
25->43 [style = bold, label=""];
34->6 [style = solid, label="concurrentThreads"];
41->11 [style = bold, label=""];
52->55 [style = bold, label=""];
10->21 [style = solid, label="j"];
59->70 [style = dotted, label="true"];
22->1 [style = solid, label="i"];
55->31 [style = dotted, label="true"];
9->35 [style = bold, label=""];
37->3 [style = bold, label=""];
21->38 [style = bold, label=""];
29->18 [style = bold, label=""];
54->76 [style = bold, label=""];
48->52 [style = bold, label=""];
72->80 [style = bold, label=""];
22->47 [style = solid, label="i"];
38->21 [style = dotted, label="true"];
55->57 [style = bold, label=""];
14->27 [style = solid, label="i"];
60->59 [style = solid, label="dimensionCount"];
66->80 [style = dotted, label="true"];
66->72 [style = dotted, label="true"];
22->47 [style = bold, label=""];
1->12 [style = dotted, label="true"];
33->9 [style = solid, label="elementsPerThread"];
1->12 [style = bold, label=""];
22->15 [style = solid, label="i"];
42->1 [style = bold, label=""];
58->84 [style = bold, label=""];
51->53 [style = dotted, label="true"];
61->64 [style = dotted, label="true"];
83->56 [style = bold, label=""];
5->37 [style = bold, label=""];
68->56 [style = solid, label="incrementalIndexSegment"];
66->63 [style = bold, label=""];
11->16 [style = bold, label=""];
2->20 [style = bold, label=""];
52->31 [style = solid, label="i"];
57->61 [style = bold, label=""];
82->59 [style = bold, label=""];
27->0 [style = bold, label=""];
59->73 [style = bold, label=""];
33->2 [style = solid, label="elementsPerThread"];
38->20 [style = dotted, label="true"];
47->12 [style = dotted, label="true"];
34->33 [style = bold, label=""];
60->81 [style = bold, label=""];
10->38 [style = solid, label="j"];
26->14 [style = bold, label=""];
84->75 [style = solid, label="timestamp"];
22->2 [style = solid, label="i"];
68->83 [style = bold, label=""];
51->58 [style = bold, label=""];
57->64 [style = solid, label="i"];
39->4 [style = bold, label=""];
74->50 [style = bold, label=""];
1->17 [style = bold, label=""];
38->2 [style = bold, label=""];
43->13 [style = bold, label=""];
8->19 [style = solid, label="indexFutures"];
80->66 [style = bold, label=""];
3->10 [style = bold, label=""];
34->17 [style = solid, label="concurrentThreads"];
1->42 [style = dotted, label="true"];
48->54 [style = solid, label="rows"];
46->4 [style = bold, label=""];
79->59 [style = bold, label=""];
1->47 [style = dashed, label="0"];
59->82 [style = dotted, label="true"];
52->75 [style = solid, label="i"];
1->15 [style = dotted, label="true"];
45->0 [style = dotted, label="true"];
9->44 [style = bold, label=""];
48->63 [style = solid, label="rows"];
23->27 [style = dotted, label="true"];
47->42 [style = dotted, label="true"];
47->15 [style = dotted, label="true"];
13->5 [style = bold, label=""];
55->75 [style = bold, label=""];
14->45 [style = solid, label="i"];
76->66 [style = solid, label="i"];
18->7 [style = bold, label=""];
78->82 [style = bold, label=""];
48->61 [style = solid, label="rows"];
79->59 [style = solid, label="i"];
70->78 [style = bold, label=""];
59->78 [style = dotted, label="true"];
84->62 [style = solid, label="timestamp"];
79->78 [style = solid, label="i"];
52->55 [style = solid, label="i"];
71->54 [style = bold, label=""];
36->40 [style = bold, label=""];
17->6 [style = bold, label=""];
19->29 [style = bold, label=""];
31->32 [style = bold, label=""];
31->2 [style = solid, label="timestamp"];
55->75 [style = dotted, label="true"];
42->47 [style = bold, label=""];
40->19 [style = bold, label=""];
34->81 [style = dashed, label="0"];
28->26 [style = bold, label=""];
49->65 [style = bold, label=""];
60->62 [style = solid, label="dimensionCount"];
64->61 [style = solid, label="i"];
65->71 [style = bold, label=""];
50->22 [style = solid, label="i"];
21->38 [style = solid, label="j"];
76->66 [style = bold, label=""];
35->24 [style = bold, label=""];
60->51 [style = solid, label="dimensionCount"];
79->70 [style = solid, label="i"];
32->8 [style = bold, label=""];
4->28 [style = solid, label="taskCount"];
14->23 [style = bold, label=""];
81->74 [style = bold, label=""];
25->40 [style = solid, label="queryFutures"];
59->70 [style = bold, label=""];
31->55 [style = solid, label="i"];
12->22 [style = dashed, label="0"];
60->75 [style = solid, label="dimensionCount"];
15->1 [style = dashed, label="0"];
64->61 [style = bold, label=""];
7->41 [style = bold, label=""];
77->67 [style = bold, label=""];
22->1 [style = bold, label=""];
50->51 [style = solid, label="i"];
44->24 [style = bold, label=""];
67->79 [style = bold, label=""];
31->75 [style = solid, label="i"];
23->0 [style = dotted, label="true"];
4->34 [style = bold, label=""];
61->62 [style = bold, label=""];
10->38 [style = bold, label=""];
48->55 [style = solid, label="rows"];
43->20 [style = solid, label="incrementalIndexSegment"];
48->72 [style = solid, label="rows"];
9->43 [style = solid, label="incrementalIndex"];
56->49 [style = bold, label=""];
50->1 [style = solid, label="i"];
23->27 [style = bold, label=""];
53->51 [style = bold, label=""];
33->28 [style = solid, label="elementsPerThread"];
22->12 [style = solid, label="i"];
57->62 [style = solid, label="i"];
47->12 [style = bold, label=""];
30->23 [style = bold, label=""];
12->15 [style = bold, label=""];
23->45 [style = dashed, label="0"];
23->26 [style = bold, label=""];
49->65 [style = solid, label="results"];
23->30 [style = dotted, label="true"];
38->36 [style = bold, label=""];
43->41 [style = solid, label="incrementalIndexSegment"];
62->64 [style = bold, label=""];
14->45 [style = bold, label=""];
28->27 [style = solid, label="expectedVal"];
33->9 [style = bold, label=""];
24->22 [style = bold, label=""];
76->63 [style = solid, label="i"];
4->9 [style = solid, label="taskCount"];
35->44 [style = dashed, label="0"];
20->21 [style = bold, label=""];
61->77 [style = bold, label=""];
64->62 [style = solid, label="i"];
57->61 [style = solid, label="i"];
28->0 [style = solid, label="expectedVal"];
6->31 [style = bold, label=""];
16->28 [style = bold, label=""];
15->42 [style = bold, label=""];
4->60 [style = dashed, label="0"];
31->55 [style = bold, label=""];
58->68 [style = solid, label="index"];
50->51 [style = bold, label=""];
51->22 [style = bold, label=""];
38->2 [style = dotted, label="true"];
14->0 [style = solid, label="i"];
51->22 [style = dotted, label="true"];
14->23 [style = solid, label="i"];
45->30 [style = dotted, label="true"];
75->31 [style = bold, label=""];
45->26 [style = bold, label=""];
33->26 [style = solid, label="elementsPerThread"];
73->68 [style = bold, label=""];
47->17 [style = bold, label=""];
51->1 [style = dotted, label="true"];
8->25 [style = bold, label=""];
1->53 [style = bold, label=""];
30->45 [style = bold, label=""];
}
