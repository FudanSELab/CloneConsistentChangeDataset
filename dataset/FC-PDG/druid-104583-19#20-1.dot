digraph {
10 [style = filled, label = "final List<DataSegment> segments = runTask(indexTask).rhs@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "File tmpFile = File.createTempFile(\"druid\",\"index\",tmpDir)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testCSVFileWithHeader['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final File tmpFile = File.createTempFile(\"druid\",\"index\",tmpDir)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,parseExceptionIgnoreSpec,null,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory,appenderatorsManager)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(1,segments.size())@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "final IndexTuningConfig tuningConfig = createTuningConfigWithMaxRowsPerSegment(2,true)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "final File tmpDir = temporaryFolder.newFolder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final IndexIngestionSpec ingestionSpec@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "File tmpDir = temporaryFolder.newFolder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "writer.write(\"time,d,val\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final List<DataSegment> segments = runTask(indexTask).rhs@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "testIgnoreParseException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"val\"),segments.get(0).getMetrics())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final List<DataSegment> segments = runTask(indexTask).rhs@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"d\"),segments.get(0).getDimensions())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"d\"),segments.get(0).getDimensions())@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,createIngestionSpec(useInputFormatApi,jsonMapper,tmpDir,new CSVParseSpec(new TimestampSpec(\"time\",\"auto\",null),DimensionsSpec.EMPTY,null,null,true,0),null,createTuningConfigWithMaxRowsPerSegment(2,true),false),null,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory,appenderatorsManager)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "useInputFormatApi@@@12@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "final TimestampSpec timestampSpec = new TimestampSpec(\"time\",\"auto\",null)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "writer.write(\"2014-01-01T00:00:10Z,a,1\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"val\"),segments.get(0).getMetrics())@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "ingestionSpec = createIngestionSpec(jsonMapper,tmpDir,timestampSpec,DimensionsSpec.EMPTY,new CsvInputFormat(null,null,null,true,0),null,null,tuningConfig,false)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014/P1D\"),segments.get(0).getInterval())@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014/P1D\"),segments.get(0).getInterval())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final IndexIngestionSpec parseExceptionIgnoreSpec = createIngestionSpec(useInputFormatApi,jsonMapper,tmpDir,new CSVParseSpec(new TimestampSpec(\"time\",\"auto\",null),DimensionsSpec.EMPTY,null,Arrays.asList(\"time\",\"dim\",\"val\"),true,0),null,createTuningConfig(2,null,null,null,null,false,false),false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"d\"),segments.get(0).getDimensions())@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "writer.write(\"unparseable,a,1\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,ingestionSpec,null,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory,appenderatorsManager)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "ingestionSpec = createIngestionSpec(jsonMapper,tmpDir,new CSVParseSpec(timestampSpec,DimensionsSpec.EMPTY,null,null,true,0),null,null,tuningConfig,false)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testCSVFileWithHeader['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4->9 [style = bold, label=""];
23->20 [style = bold, label=""];
16->18 [style = bold, label=""];
6->26 [style = bold, label=""];
8->23 [style = bold, label=""];
3->1 [style = bold, label=""];
9->2 [style = bold, label=""];
16->18 [style = dotted, label="false"];
18->11 [style = bold, label=""];
9->27 [style = dashed, label="0"];
28->25 [style = solid, label="tmpDir"];
10->3 [style = bold, label=""];
20->18 [style = solid, label="tuningConfig"];
25->29 [style = solid, label="parseExceptionIgnoreSpec"];
7->0 [style = bold, label=""];
28->27 [style = solid, label="tmpDir"];
25->29 [style = bold, label=""];
23->18 [style = solid, label="timestampSpec"];
4->7 [style = solid, label="tmpDir"];
15->16 [style = bold, label=""];
8->7 [style = bold, label=""];
4->28 [style = dashed, label="0"];
29->10 [style = solid, label="indexTask"];
11->22 [style = solid, label="indexTask"];
20->14 [style = solid, label="tuningConfig"];
21->12 [style = bold, label=""];
4->14 [style = solid, label="tmpDir"];
0->10 [style = bold, label=""];
1->6 [style = bold, label=""];
30->28 [style = bold, label=""];
4->9 [style = solid, label="tmpDir"];
14->11 [style = solid, label="ingestionSpec"];
23->14 [style = solid, label="timestampSpec"];
5->4 [style = bold, label=""];
16->14 [style = dotted, label="true"];
11->22 [style = bold, label=""];
7->25 [style = dashed, label="0"];
16->14 [style = bold, label=""];
29->10 [style = bold, label=""];
7->0 [style = solid, label="indexTask"];
28->27 [style = bold, label=""];
2->24 [style = bold, label=""];
24->8 [style = bold, label=""];
12->19 [style = bold, label=""];
4->18 [style = solid, label="tmpDir"];
18->11 [style = solid, label="ingestionSpec"];
13->21 [style = bold, label=""];
20->15 [style = bold, label=""];
14->11 [style = bold, label=""];
8->25 [style = bold, label=""];
10->1 [style = bold, label=""];
27->2 [style = bold, label=""];
17->4 [style = bold, label=""];
22->13 [style = bold, label=""];
2->8 [style = bold, label=""];
}
