digraph {
14 [style = filled, label = "{for (StreamingQuery query : spark.streams().active()){query.stop()}}@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "StreamingQuery restartedQuery = streamWriter.start()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "MemoryStream<Integer> inputStream = newMemoryStream(1,spark.sqlContext(),Encoders.INT())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "tables.create(SCHEMA,spec,location.toString())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "send(batch2,inputStream)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "File parent = temp.newFolder(\"parquet\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "File parent = temp.newFolder(\"parquet\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Dataset<Row> result = spark.read().format(\"iceberg\").load(location.toString())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testStreamingWriteUpdateMode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "DataStreamWriter<Row> streamWriter = inputStream.toDF().selectExpr(\"value AS id\",\"CAST (value AS STRING) AS data\").writeStream().outputMode(\"update\").format(\"iceberg\").option(\"checkpointLocation\",checkpoint.toString()).option(\"path\",location.toString())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "HadoopTables tables = new HadoopTables(CONF)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "send(batch1,inputStream)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "{for (StreamingQuery query : spark.streams().active()){query.stop()}}@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "File location = new File(parent,\"test-table\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "StreamingQuery query = streamWriter.start()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(\"Number of rows should match\",expected.size(),actual.size())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(\"Result rows should match\",expected,actual)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "exceptionRule.expect()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(\"Number of snapshots should match\",2,Iterables.size(table.snapshots()))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "StreamingQuery query = streamWriter.start()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "PartitionSpec spec = PartitionSpec.builderFor(SCHEMA).identity(\"data\").build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "exceptionRule.expectMessage(\"Output mode Update is not supported\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "File location = new File(parent,\"test-table\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testStreamingWriteAppendMode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "List<Integer> batch1 = Lists.newArrayList(1,2)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testStreamingWriteAppendMode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "restartedQuery.processAllAvailable()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "inputStream.addData(JavaConversions.asScalaBuffer(batch1))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "MemoryStream<Integer> inputStream = new MemoryStream<>(1,spark.sqlContext(),Encoders.INT())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "query.processAllAvailable()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<SimpleRecord> actual = result.orderBy(\"id\").as(Encoders.bean()).collectAsList()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DataStreamWriter<Row> streamWriter = inputStream.toDF().selectExpr(\"value AS id\",\"CAST (value AS STRING) AS data\").writeStream().outputMode(\"append\").format(\"iceberg\").option(\"checkpointLocation\",checkpoint.toString()).option(\"path\",location.toString())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertTrue(\"The commit file must be deleted\",lastCommitFile.delete())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "MemoryStream<Integer> inputStream = new MemoryStream<>(1,spark.sqlContext(),Encoders.INT())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "query.stop()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "inputStream.addData(JavaConversions.asScalaBuffer(batch2))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "File checkpoint = new File(parent,\"checkpoint\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "query.processAllAvailable()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "File lastCommitFile = new File(checkpoint.toString() + \"/commits/1\")@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
32->5 [style = bold, label=""];
4->14 [style = bold, label=""];
7->8 [style = solid, label="expected"];
9->16 [style = solid, label="spec"];
31->30 [style = solid, label="inputStream"];
12->35 [style = dashed, label="0"];
5->20 [style = bold, label=""];
20->9 [style = bold, label=""];
0->1 [style = solid, label="parent"];
17->6 [style = bold, label=""];
7->33 [style = solid, label="spec"];
6->8 [style = solid, label="actual"];
26->3 [style = bold, label=""];
35->22 [style = bold, label=""];
5->9 [style = solid, label="parent"];
28->11 [style = bold, label=""];
0->5 [style = solid, label="parent"];
30->26 [style = bold, label=""];
23->31 [style = dashed, label="0"];
16->7 [style = bold, label=""];
25->18 [style = bold, label=""];
29->0 [style = bold, label=""];
22->28 [style = bold, label=""];
13->30 [style = solid, label="batch2"];
24->11 [style = solid, label="batch1"];
7->31 [style = bold, label=""];
13->30 [style = bold, label=""];
27->22 [style = bold, label=""];
22->24 [style = solid, label="batch1"];
9->16 [style = bold, label=""];
31->12 [style = bold, label=""];
6->15 [style = bold, label=""];
24->28 [style = dashed, label="0"];
3->10 [style = bold, label=""];
7->33 [style = bold, label=""];
13->37 [style = bold, label=""];
13->19 [style = bold, label=""];
2->0 [style = bold, label=""];
19->30 [style = dashed, label="0"];
10->25 [style = bold, label=""];
13->19 [style = solid, label="batch2"];
31->28 [style = solid, label="inputStream"];
24->11 [style = bold, label=""];
0->1 [style = bold, label=""];
19->26 [style = bold, label=""];
22->28 [style = solid, label="batch1"];
7->23 [style = bold, label=""];
11->13 [style = bold, label=""];
5->20 [style = solid, label="parent"];
33->38 [style = bold, label=""];
34->32 [style = bold, label=""];
23->12 [style = bold, label=""];
16->33 [style = dashed, label="0"];
22->24 [style = bold, label=""];
18->21 [style = bold, label=""];
8->4 [style = bold, label=""];
38->35 [style = bold, label=""];
12->27 [style = bold, label=""];
21->17 [style = bold, label=""];
15->8 [style = bold, label=""];
36->34 [style = bold, label=""];
}
