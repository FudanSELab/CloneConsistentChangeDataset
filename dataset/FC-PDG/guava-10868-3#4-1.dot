digraph {
0 [style = filled, label = "assertThat(graph2).isSameAs(graph1)@@@5@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(graph2).isSameInstanceAs(graph1)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "ValueGraph<String,Integer> graph1 = ImmutableValueGraph.copyOf(ValueGraphBuilder.directed().build())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "copyOfImmutableValueGraph_optimized['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ValueGraph<String,Integer> graph2 = ImmutableValueGraph.copyOf(graph1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "copyOfImmutableValueGraph_optimized['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "copyOfImmutableValueGraph_optimized['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2->0 [style = solid, label="graph1"];
5->2 [style = bold, label=""];
1->2 [style = bold, label=""];
0->4 [style = dashed, label="0"];
2->3 [style = solid, label="graph1"];
3->4 [style = bold, label=""];
2->4 [style = solid, label="graph1"];
3->0 [style = bold, label=""];
2->3 [style = bold, label=""];
6->2 [style = bold, label=""];
}
