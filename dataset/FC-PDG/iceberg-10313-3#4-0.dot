digraph {
24 [style = filled, label = "testListProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(10,\"values\",Types.ListType.ofOptional(11,Types.LongType.get())))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(\"Should project entire list\",values,projected.getField(\"values\"))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Assert.assertNull(\"Should not project values list\",projected.getField(\"values\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "record.put(\"id\",34L)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Record record = GenericRecord.create(writeSchema)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Record projected = writeAndRead(\"id_only\",writeSchema,idOnly,record)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<Long> values = ImmutableList.of(56L,57L,58L)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(\"Should project entire list\",values,projected.getField(\"values\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "Record record = GenericRecord.create(writeSchema.asStruct())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "projected = writeAndRead(\"element_only\",writeSchema,elementOnly,record)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(\"Should project entire list\",values,projected.getField(\"values\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Schema idOnly = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testListProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertNull(\"Should not project values list\",projected.getField(\"values\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(\"Should project entire list\",values,projected.get(\"values\"))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertNull(\"Should not project values list\",projected.get(\"values\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "record.setField(\"id\",34L)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "record.setField(\"values\",values)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "record.setField(\"values\",values)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "projected = writeAndRead(\"list_only\",writeSchema,listOnly,record)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Schema elementOnly = writeSchema.select(\"values.element\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(\"Should project entire list\",values,projected.getField(\"values\"))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testListProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "record.put(\"values\",values)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Schema listOnly = writeSchema.select(\"values\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "record.setField(\"id\",34L)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.getField(\"id\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"Should project entire list\",values,projected.get(\"values\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.getField(\"id\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
11->32 [style = dashed, label="0"];
15->10 [style = bold, label=""];
8->23 [style = solid, label="values"];
8->6 [style = solid, label="values"];
13->5 [style = solid, label="record"];
4->30 [style = dashed, label="0"];
27->5 [style = solid, label="record"];
32->34 [style = bold, label=""];
13->2 [style = solid, label="record"];
5->28 [style = bold, label=""];
14->5 [style = solid, label="listOnly"];
7->14 [style = bold, label=""];
8->34 [style = solid, label="values"];
8->36 [style = bold, label=""];
18->22 [style = bold, label=""];
10->8 [style = bold, label=""];
35->37 [style = bold, label=""];
23->17 [style = bold, label=""];
10->13 [style = solid, label="writeSchema"];
2->32 [style = bold, label=""];
16->33 [style = dashed, label="0"];
8->27 [style = bold, label=""];
36->2 [style = solid, label="record"];
7->34 [style = dashed, label="0"];
4->16 [style = bold, label=""];
24->10 [style = bold, label=""];
8->7 [style = solid, label="values"];
12->21 [style = bold, label=""];
27->2 [style = solid, label="record"];
2->18 [style = bold, label=""];
9->17 [style = bold, label=""];
6->31 [style = dashed, label="0"];
9->23 [style = dashed, label="0"];
19->25 [style = bold, label=""];
8->25 [style = solid, label="values"];
8->31 [style = solid, label="values"];
9->37 [style = dashed, label="0"];
1->2 [style = solid, label="elementOnly"];
8->37 [style = solid, label="values"];
11->18 [style = dashed, label="0"];
34->14 [style = bold, label=""];
13->12 [style = solid, label="record"];
0->35 [style = dashed, label="0"];
36->35 [style = bold, label=""];
22->14 [style = bold, label=""];
7->22 [style = dashed, label="0"];
13->0 [style = bold, label=""];
10->5 [style = solid, label="writeSchema"];
27->26 [style = bold, label=""];
3->28 [style = dashed, label="0"];
30->33 [style = bold, label=""];
28->31 [style = bold, label=""];
3->6 [style = bold, label=""];
0->26 [style = dashed, label="0"];
20->1 [style = bold, label=""];
4->21 [style = dashed, label="0"];
10->27 [style = solid, label="writeSchema"];
5->19 [style = bold, label=""];
17->12 [style = bold, label=""];
13->27 [style = dashed, label="0"];
16->1 [style = bold, label=""];
29->10 [style = bold, label=""];
1->2 [style = bold, label=""];
8->22 [style = solid, label="values"];
2->11 [style = bold, label=""];
8->13 [style = bold, label=""];
14->5 [style = bold, label=""];
16->20 [style = dashed, label="0"];
0->9 [style = bold, label=""];
13->36 [style = dashed, label="0"];
37->17 [style = bold, label=""];
27->12 [style = solid, label="record"];
36->5 [style = solid, label="record"];
12->30 [style = bold, label=""];
33->1 [style = bold, label=""];
10->12 [style = solid, label="writeSchema"];
17->12 [style = solid, label="idOnly"];
3->19 [style = dashed, label="0"];
21->20 [style = bold, label=""];
6->25 [style = dashed, label="0"];
12->4 [style = bold, label=""];
26->23 [style = bold, label=""];
8->9 [style = solid, label="values"];
11->7 [style = bold, label=""];
10->2 [style = solid, label="writeSchema"];
36->12 [style = solid, label="record"];
}
