digraph {
31 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,neighborsJoin.getInput1().getLocalStrategy())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "jgg.compileJobGraph(optPlan)@@@47@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "WorksetIterationPlanNode iter = or.getNode(ITERATION_NAME)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,cogroup.getInput2().getShipStrategy())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(set0,iter.getInitialSolutionSetInput().getShipStrategyKeys())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,sink.getInput().getLocalStrategy())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,combiner.getInput().getLocalStrategy())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "SingleInputPlanNode map@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "ConnectedComponentsWithCoGroup cc = new ConnectedComponentsWithCoGroup()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(set0,neighborsJoin.getKeysForInput1())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Assert.assertEquals(DriverStrategy.SORTED_GROUP_COMBINE,combiner.getDriverStrategy())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,iter.getInitialSolutionSetInput().getShipStrategy())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "OptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(optPlan)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(set0,iter.getInitialWorksetInput().getShipStrategyKeys())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,iter.getInitialSolutionSetInput().getLocalStrategy())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "OptimizedPlan optPlan = compileNoStats(plan)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "SinkPlanNode sink@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Plan plan = cc.getPlan(String.valueOf(DEFAULT_PARALLELISM),IN_FILE,IN_FILE,OUT_FILE,String.valueOf(100))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,iter.getInitialWorksetInput().getShipStrategy())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "System.out.println(json)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testWorksetConnectedComponents['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(DriverStrategy.CO_GROUP,cogroup.getDriverStrategy())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,cogroup.getInput1().getLocalStrategy())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals(DriverStrategy.COLLECTOR_MAP,map.getDriverStrategy())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "plan.setExecutionConfig(new ExecutionConfig())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
55 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "SourcePlanNode edgesSource = or.getNode(EDGES_SOURCE)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,sink.getDriverStrategy())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "PRINT_PLAN@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,neighborsJoin.getInput1().getShipStrategy())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(DriverStrategy.INNER_MERGE,neighborsJoin.getDriverStrategy())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,neighborsJoin.getInput2().getLocalStrategy())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "SourcePlanNode vertexSource = or.getNode(VERTEX_SOURCE)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "testWorksetConnectedComponents['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(set0,cogroup.getKeysForInput1())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(DriverStrategy.SORTED_GROUP_REDUCE,reducer.getDriverStrategy())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "combiner != null@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(set0,neighborsJoin.getKeysForInput2())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,cogroup.getInput2().getLocalStrategy())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "System.out.println(json)@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,vertexSource.getDriverStrategy())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,cogroup.getInput1().getShipStrategy())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,edgesSource.getDriverStrategy())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(TempMode.CACHED == neighborsJoin.getInput2().getTempMode())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(neighborsJoin.getInput2().getTempMode().isCached())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "SinkPlanNode sink = or.getNode(SINK)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(set0,cogroup.getKeysForInput2())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "DualInputPlanNode join@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Plan plan = getConnectedComponentsCoGroupPlan()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "DualInputPlanNode neighborsJoin = or.getNode(JOIN_NEIGHBORS_MATCH)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "SingleInputPlanNode reducer@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,map.getInput().getShipStrategy())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "DualInputPlanNode cogroup = or.getNode(MIN_ID_AND_UPDATE)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(set0,neighborsJoin.getInput2().getShipStrategyKeys())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,neighborsJoin.getInput2().getShipStrategy())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "jgg.compileJobGraph(optPlan)@@@48@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,sink.getDriverStrategy())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "JobGraphGenerator jgg = new JobGraphGenerator()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "SingleInputPlanNode combiner@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String json = dumper.getOptimizerPlanAsJSON(optPlan)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,iter.getInitialWorksetInput().getLocalStrategy())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "checkStandardStrategies['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8->10 [style = bold, label=""];
58->50 [style = bold, label=""];
49->16 [style = bold, label=""];
57->62 [style = bold, label=""];
21->24 [style = bold, label=""];
13->49 [style = bold, label=""];
7->8 [style = bold, label=""];
32->6 [style = bold, label=""];
23->0 [style = solid, label="optPlan"];
1->13 [style = dotted, label="true"];
63->55 [style = bold, label=""];
19->9 [style = bold, label=""];
61->51 [style = dotted, label="true"];
37->38 [style = bold, label=""];
1->12 [style = dotted, label="true"];
13->41 [style = solid, label="json"];
25->21 [style = bold, label=""];
18->13 [style = dotted, label="true"];
17->35 [style = bold, label=""];
10->31 [style = bold, label=""];
46->23 [style = solid, label="plan"];
61->53 [style = dotted, label="true"];
12->13 [style = solid, label="json"];
62->60 [style = bold, label=""];
30->27 [style = bold, label=""];
4->19 [style = bold, label=""];
18->12 [style = bold, label=""];
1->49 [style = bold, label=""];
20->3 [style = bold, label=""];
2->50 [style = dashed, label="0"];
1->18 [style = dotted, label="true"];
5->7 [style = bold, label=""];
18->41 [style = dotted, label="true"];
16->39 [style = bold, label=""];
43->34 [style = bold, label=""];
61->63 [style = bold, label=""];
22->11 [style = bold, label=""];
54->57 [style = solid, label="combiner"];
61->54 [style = dotted, label="true"];
57->60 [style = dotted, label="true"];
23->12 [style = solid, label="optPlan"];
21->46 [style = dashed, label="0"];
61->56 [style = dotted, label="true"];
14->42 [style = bold, label=""];
35->32 [style = bold, label=""];
61->59 [style = dotted, label="true"];
23->0 [style = bold, label=""];
45->44 [style = bold, label=""];
48->46 [style = bold, label=""];
13->41 [style = bold, label=""];
12->13 [style = bold, label=""];
11->5 [style = bold, label=""];
0->13 [style = solid, label="optPlan"];
23->45 [style = solid, label="optPlan"];
15->28 [style = bold, label=""];
0->1 [style = bold, label=""];
41->16 [style = bold, label=""];
0->44 [style = solid, label="optPlan"];
31->17 [style = bold, label=""];
47->23 [style = bold, label=""];
38->43 [style = bold, label=""];
24->23 [style = bold, label=""];
9->36 [style = bold, label=""];
18->16 [style = bold, label=""];
33->14 [style = bold, label=""];
57->62 [style = dotted, label="true"];
26->29 [style = bold, label=""];
42->20 [style = bold, label=""];
1->18 [style = bold, label=""];
0->1 [style = solid, label="optPlan"];
3->15 [style = bold, label=""];
37->52 [style = dashed, label="0"];
36->26 [style = bold, label=""];
46->47 [style = bold, label=""];
50->52 [style = bold, label=""];
34->22 [style = bold, label=""];
39->30 [style = bold, label=""];
28->2 [style = bold, label=""];
27->4 [style = bold, label=""];
29->33 [style = bold, label=""];
18->12 [style = dotted, label="true"];
6->40 [style = bold, label=""];
24->0 [style = solid, label="plan"];
40->45 [style = bold, label=""];
2->37 [style = bold, label=""];
52->57 [style = bold, label=""];
34->60 [style = dashed, label="0"];
43->62 [style = dashed, label="0"];
55->58 [style = bold, label=""];
}
