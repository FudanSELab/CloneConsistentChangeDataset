digraph {
2 [style = filled, label = "simplified == null@@@18@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return null@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "RexNode a@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "operands.add(simplified)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final RexNode simplified = simplifyIsNotNull(operand)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "simplifyIsNotNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "((RexCall)a).getOperands()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "RexNode operand@@@16@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "a = simplify(a,UNKNOWN)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return RexUtil.composeConjunction(rexBuilder,operands)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "simplifyIsNotNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "RexUtil.isNull(a)@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "RexNode a@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL,operand))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "simplifyIsNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "throw new AssertionError(\"every CUSTOM policy needs a handler, \" + a.getKind())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "return null@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "a.getKind()@@@29@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "simplified.isAlwaysFalse()@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Strong.policy(a)@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "predicates.pulledUpPredicates.contains(a)@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "RexNode operand@@@16@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "RexNode operand@@@16@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "hasCustomNullabilityRules(a.getKind())@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "return RexUtil.composeDisjunction(rexBuilder,operands,false)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL,operand))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final List<RexNode> operands = new ArrayList<>()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return rexBuilder.makeLiteral(!((RexLiteral)a).isNull())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final RexNode simplified = simplifyIsNull(operand)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "!a.getType().isNullable() && isSafeExpression(a)@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "RexNode a@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "return null@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->9 [style = dotted, label="true"];
5->20 [style = bold, label=""];
2->15 [style = dotted, label="true"];
19->11 [style = bold, label=""];
24->3 [style = dotted, label="false"];
12->21 [style = dotted, label="true"];
12->7 [style = bold, label=""];
6->35 [style = dashed, label="0"];
29->18 [style = bold, label=""];
3->34 [style = bold, label=""];
30->8 [style = solid, label="a"];
12->10 [style = bold, label=""];
18->22 [style = bold, label=""];
15->11 [style = bold, label=""];
2->15 [style = bold, label=""];
2->36 [style = bold, label=""];
20->18 [style = dotted, label="true"];
34->32 [style = bold, label=""];
23->12 [style = bold, label=""];
2->24 [style = bold, label=""];
12->33 [style = dotted, label="true"];
9->30 [style = dashed, label="0"];
11->2 [style = solid, label="simplified"];
12->34 [style = dotted, label="true"];
5->29 [style = bold, label=""];
12->17 [style = dotted, label="true"];
29->18 [style = dotted, label="true"];
22->23 [style = dotted, label="true"];
10->14 [style = bold, label=""];
24->0 [style = bold, label=""];
1->34 [style = dashed, label="0"];
12->2 [style = dotted, label="true"];
37->2 [style = solid, label="simplified"];
3->11 [style = bold, label=""];
5->6 [style = dotted, label="true"];
37->3 [style = solid, label="simplified"];
15->36 [style = dashed, label="0"];
22->23 [style = bold, label=""];
19->1 [style = solid, label="operands"];
19->37 [style = bold, label=""];
12->11 [style = dotted, label="true"];
20->18 [style = bold, label=""];
31->30 [style = dotted, label="true"];
12->27 [style = dotted, label="true"];
5->6 [style = bold, label=""];
12->10 [style = dotted, label="true"];
12->32 [style = dotted, label="true"];
12->19 [style = dotted, label="true"];
24->0 [style = dotted, label="true"];
12->33 [style = bold, label=""];
12->4 [style = dotted, label="true"];
36->37 [style = bold, label=""];
12->7 [style = dotted, label="true"];
24->3 [style = bold, label=""];
12->37 [style = dotted, label="true"];
35->29 [style = bold, label=""];
3->37 [style = bold, label=""];
3->1 [style = bold, label=""];
16->8 [style = bold, label=""];
2->3 [style = bold, label=""];
2->3 [style = dotted, label="false"];
12->17 [style = bold, label=""];
12->32 [style = bold, label=""];
0->11 [style = bold, label=""];
19->34 [style = solid, label="operands"];
26->8 [style = bold, label=""];
17->33 [style = dashed, label="0"];
2->24 [style = dotted, label="false"];
6->20 [style = bold, label=""];
5->35 [style = dotted, label="true"];
10->13 [style = bold, label=""];
10->13 [style = dotted, label="true"];
0->1 [style = bold, label=""];
9->25 [style = dashed, label="0"];
37->2 [style = bold, label=""];
2->36 [style = dotted, label="true"];
14->13 [style = bold, label=""];
33->19 [style = bold, label=""];
31->8 [style = bold, label=""];
5->35 [style = bold, label=""];
36->34 [style = bold, label=""];
15->1 [style = bold, label=""];
9->8 [style = solid, label="a"];
26->25 [style = dotted, label="true"];
8->20 [style = solid, label="a"];
8->5 [style = solid, label="a"];
12->1 [style = dotted, label="true"];
17->19 [style = bold, label=""];
11->2 [style = bold, label=""];
20->22 [style = bold, label=""];
12->28 [style = dotted, label="true"];
25->8 [style = solid, label="a"];
8->12 [style = solid, label="a"];
10->14 [style = dotted, label="true"];
8->5 [style = bold, label=""];
13->7 [style = bold, label=""];
22->12 [style = bold, label=""];
11->3 [style = solid, label="simplified"];
11->37 [style = dashed, label="0"];
8->29 [style = solid, label="a"];
29->22 [style = bold, label=""];
12->19 [style = bold, label=""];
1->10 [style = bold, label=""];
}
