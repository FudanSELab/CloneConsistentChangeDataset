digraph {
48 [style = filled, label = "Assert.assertNull(\"Should not project longitude\",projectedLocation.getField(\"long\"))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "projectedLocation = (Record)projected.get(\"location\")@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertNull(\"Should not project longitude\",projectedLocation.get(\"long\"))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Record projected = writeAndRead(\"id_only\",writeSchema,idOnly,record)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(\"Should project longitude\",-1.539054f,(float)projectedLocation.get(\"long\"),0.000001f)@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(\"Should project latitude\",52.995143f,(float)projectedLocation.getField(\"lat\"),0.000001f)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertNull(\"Should not project latitutde\",projectedLocation.get(\"lat\"))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "projectedLocation = (Record)projected.get(\"location\")@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Schema latOnly = new Schema(Types.NestedField.optional(3,\"location\",Types.StructType.of(Types.NestedField.required(1,\"lat\",Types.FloatType.get()))))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Record projectedLocation = (Record)projected.get(\"location\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Assert.assertNotNull(\"Should project location\",projected.get(\"location\"))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "record.setField(\"id\",34L)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "Assert.assertEquals(\"Should project longitude\",-1.539054f,(float)projectedLocation.getField(\"long\"),0.000001f)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
60 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertNull(\"Should not project location\",projectedLocation)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Assert.assertEquals(\"Should project latitude\",52.995143f,(float)projectedLocation.getField(\"lat\"),0.000001f)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "Assert.assertEquals(\"Should project longitude\",-1.539054f,(float)projectedLocation.getField(\"long\"),0.000001f)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "projectedLocation = (Record)projected.get(\"location\")@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
63 [style = filled, label = "Assert.assertNull(\"Should not project longitude\",projectedLocation.getField(\"long\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertNotNull(\"Should project location\",projected.get(\"location\"))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "record.put(\"id\",34L)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
65 [style = filled, label = "Record location = GenericRecord.create(writeSchema.findType(\"location\").asStructType())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Should project latitude\",52.995143f,(float)projectedLocation.get(\"lat\"),0.000001f)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "record.put(\"location\",location)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "location.put(\"long\",-1.539054f)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "Record projectedLocation = (Record)projected.getField(\"location\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "Assert.assertNotNull(\"Should project location\",projected.getField(\"location\"))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
59 [style = filled, label = "testNestedStructProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "projectedLocation = (Record)projected.getField(\"location\")@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Schema idOnly = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertNotNull(\"Should project location\",projected.get(\"location\"))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "record.setField(\"location\",location)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"Should project latitude\",52.995143f,(float)projectedLocation.get(\"lat\"),0.000001f)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "testNestedStructProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Record record = GenericRecord.create(writeSchema)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "Assert.assertEquals(\"Should project longitude\",-1.539054f,(float)projectedLocation.getField(\"long\"),0.000001f)@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "projectedLocation = (Record)projected.getField(\"location\")@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "projected = writeAndRead(\"location_only\",writeSchema,locationOnly,record)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "record.setField(\"location\",location)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "Record record = GenericRecord.create(writeSchema.asStruct())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "Record projectedLocation = (Record)projected.getField(\"location\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertNull(\"Should not project latitutde\",projectedLocation.getField(\"lat\"))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
67 [style = filled, label = "location.setField(\"lat\",52.995143f)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "Assert.assertEquals(\"Should project latitude\",52.995143f,(float)projectedLocation.getField(\"lat\"),0.000001f)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Should project longitude\",-1.539054f,(float)projectedLocation.get(\"long\"),0.000001f)@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
71 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.getField(\"id\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Record location = GenericRecord.create(writeSchema.findType(\"location\").asStructType())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
64 [style = filled, label = "projectedLocation = (Record)projected.getField(\"location\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "projectedLocation = (Record)projected.getField(\"location\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(3,\"location\",Types.StructType.of(Types.NestedField.required(1,\"lat\",Types.FloatType.get()),Types.NestedField.required(2,\"long\",Types.FloatType.get()))))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "projected = writeAndRead(\"latitude_only\",writeSchema,latOnly,record)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "location.put(\"lat\",52.995143f)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
72 [style = filled, label = "record.setField(\"id\",34L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertNotNull(\"Should project location\",projected.getField(\"location\"))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "Assert.assertEquals(\"Should project longitude\",-1.539054f,(float)projectedLocation.getField(\"long\"),0.000001f)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Schema locationOnly = writeSchema.select(\"location\")@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "projectedLocation = (Record)projected.getField(\"location\")@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "location.setField(\"long\",-1.539054f)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "Assert.assertEquals(\"Should project latitude\",52.995143f,(float)projectedLocation.getField(\"lat\"),0.000001f)@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "projectedLocation = (Record)projected.getField(\"location\")@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "Assert.assertNotNull(\"Should project location\",projected.getField(\"location\"))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
76 [style = filled, label = "location.setField(\"long\",-1.539054f)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Schema longOnly = new Schema(Types.NestedField.optional(3,\"location\",Types.StructType.of(Types.NestedField.required(2,\"long\",Types.FloatType.get()))))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Record location = new Record(fromOption(record.getSchema().getField(\"location\").schema()))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
78 [style = filled, label = "Assert.assertNotNull(\"Should project location\",projected.getField(\"location\"))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "location.setField(\"lat\",52.995143f)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.getField(\"id\"))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
53 [style = filled, label = "testNestedStructProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "Assert.assertNotNull(\"Should project location\",projected.getField(\"location\"))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "Assert.assertNotNull(\"Should project location\",projected.getField(\"location\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "projected = writeAndRead(\"longitude_only\",writeSchema,longOnly,record)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "Assert.assertNull(\"Should not project latitutde\",projectedLocation.getField(\"lat\"))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26->19 [style = solid, label="writeSchema"];
41->20 [style = solid, label="projectedLocation"];
8->10 [style = bold, label=""];
65->67 [style = bold, label=""];
3->33 [style = solid, label="record"];
21->66 [style = dashed, label="0"];
12->35 [style = dashed, label="0"];
13->50 [style = dashed, label="0"];
32->12 [style = bold, label=""];
7->49 [style = dashed, label="0"];
22->60 [style = dashed, label="0"];
71->20 [style = bold, label=""];
2->79 [style = dashed, label="0"];
13->73 [style = dashed, label="0"];
31->40 [style = dashed, label="0"];
11->9 [style = bold, label=""];
45->48 [style = bold, label=""];
29->78 [style = dashed, label="0"];
48->39 [style = bold, label=""];
57->34 [style = bold, label=""];
26->51 [style = bold, label=""];
3->51 [style = dashed, label="0"];
31->72 [style = dashed, label="0"];
17->80 [style = dashed, label="0"];
29->2 [style = bold, label=""];
29->47 [style = dashed, label="0"];
61->68 [style = bold, label=""];
81->20 [style = solid, label="projectedLocation"];
20->16 [style = bold, label=""];
15->11 [style = bold, label=""];
69->58 [style = bold, label=""];
2->36 [style = dashed, label="0"];
43->35 [style = bold, label=""];
50->55 [style = bold, label=""];
73->61 [style = bold, label=""];
26->77 [style = bold, label=""];
70->15 [style = bold, label=""];
32->43 [style = dashed, label="0"];
9->21 [style = bold, label=""];
26->11 [style = solid, label="writeSchema"];
3->8 [style = solid, label="record"];
46->50 [style = bold, label=""];
27->45 [style = dashed, label="0"];
75->60 [style = bold, label=""];
2->28 [style = bold, label=""];
13->14 [style = bold, label=""];
65->80 [style = solid, label="location"];
22->13 [style = bold, label=""];
59->26 [style = bold, label=""];
33->7 [style = bold, label=""];
17->5 [style = bold, label=""];
14->61 [style = dashed, label="0"];
43->38 [style = solid, label="location"];
35->44 [style = bold, label=""];
66->78 [style = bold, label=""];
54->46 [style = bold, label=""];
51->8 [style = solid, label="record"];
76->80 [style = bold, label=""];
34->47 [style = bold, label=""];
30->26 [style = bold, label=""];
7->64 [style = dashed, label="0"];
77->11 [style = solid, label="record"];
28->42 [style = dashed, label="0"];
23->81 [style = dashed, label="0"];
44->38 [style = bold, label=""];
23->20 [style = solid, label="projectedLocation"];
58->63 [style = bold, label=""];
32->17 [style = solid, label="location"];
51->33 [style = solid, label="record"];
18->20 [style = bold, label=""];
21->29 [style = bold, label=""];
19->41 [style = bold, label=""];
16->33 [style = bold, label=""];
3->11 [style = solid, label="record"];
28->24 [style = bold, label=""];
37->45 [style = bold, label=""];
51->11 [style = solid, label="record"];
24->8 [style = bold, label=""];
26->8 [style = solid, label="writeSchema"];
11->62 [style = bold, label=""];
6->63 [style = dashed, label="0"];
11->57 [style = bold, label=""];
47->36 [style = bold, label=""];
19->81 [style = bold, label=""];
36->42 [style = bold, label=""];
38->5 [style = bold, label=""];
1->39 [style = dashed, label="0"];
49->37 [style = bold, label=""];
74->24 [style = bold, label=""];
21->34 [style = dashed, label="0"];
26->51 [style = solid, label="writeSchema"];
5->19 [style = solid, label="idOnly"];
26->3 [style = bold, label=""];
31->32 [style = bold, label=""];
78->79 [style = bold, label=""];
4->69 [style = dashed, label="0"];
0->68 [style = dashed, label="0"];
6->48 [style = dashed, label="0"];
63->70 [style = bold, label=""];
7->4 [style = bold, label=""];
62->66 [style = bold, label=""];
42->24 [style = bold, label=""];
17->38 [style = dashed, label="0"];
25->17 [style = bold, label=""];
12->67 [style = dashed, label="0"];
18->71 [style = dashed, label="0"];
0->52 [style = dashed, label="0"];
5->19 [style = bold, label=""];
6->1 [style = bold, label=""];
51->40 [style = bold, label=""];
26->3 [style = solid, label="writeSchema"];
3->19 [style = solid, label="record"];
72->65 [style = bold, label=""];
80->5 [style = bold, label=""];
25->76 [style = dashed, label="0"];
27->58 [style = dashed, label="0"];
24->8 [style = solid, label="locationOnly"];
9->62 [style = dashed, label="0"];
53->26 [style = bold, label=""];
14->55 [style = dashed, label="0"];
51->19 [style = solid, label="record"];
40->43 [style = bold, label=""];
33->49 [style = bold, label=""];
55->52 [style = bold, label=""];
8->54 [style = bold, label=""];
4->37 [style = dashed, label="0"];
28->74 [style = dashed, label="0"];
10->75 [style = dashed, label="0"];
25->44 [style = dashed, label="0"];
23->18 [style = bold, label=""];
67->76 [style = bold, label=""];
3->77 [style = dashed, label="0"];
10->22 [style = bold, label=""];
39->15 [style = bold, label=""];
18->56 [style = dashed, label="0"];
1->70 [style = dashed, label="0"];
3->31 [style = bold, label=""];
64->69 [style = bold, label=""];
1->15 [style = bold, label=""];
9->57 [style = dashed, label="0"];
22->46 [style = dashed, label="0"];
41->56 [style = bold, label=""];
16->33 [style = solid, label="latOnly"];
77->72 [style = bold, label=""];
8->75 [style = bold, label=""];
32->65 [style = dashed, label="0"];
77->8 [style = solid, label="record"];
27->6 [style = bold, label=""];
15->11 [style = solid, label="longOnly"];
10->54 [style = dashed, label="0"];
14->0 [style = bold, label=""];
77->19 [style = solid, label="record"];
77->33 [style = solid, label="record"];
12->25 [style = bold, label=""];
19->23 [style = bold, label=""];
60->73 [style = bold, label=""];
4->27 [style = bold, label=""];
79->74 [style = bold, label=""];
23->41 [style = dashed, label="0"];
56->20 [style = bold, label=""];
81->71 [style = bold, label=""];
26->33 [style = solid, label="writeSchema"];
33->64 [style = bold, label=""];
}
