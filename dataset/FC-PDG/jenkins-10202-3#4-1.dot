digraph {
3 [style = filled, label = "assertThat(result.stdout(),containsString(\"Builds: \" + System.lineSeparator()))@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\",\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "dummyRangeNumberSingleShouldSuccessIfBuildNumberIsEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "dummyRangeNumberSingleShouldSuccessIfBuildNumberIsEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "dummyRangeNumberSingleShouldSuccessIfBuildNumberIsComma['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(result,succeeded())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->0 [style = solid, label="result"];
0->3 [style = bold, label=""];
1->2 [style = bold, label=""];
2->0 [style = bold, label=""];
6->0 [style = bold, label=""];
2->0 [style = solid, label="result"];
4->2 [style = bold, label=""];
5->6 [style = bold, label=""];
2->6 [style = dashed, label="0"];
}
