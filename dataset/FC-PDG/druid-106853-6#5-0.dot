digraph {
8 [style = filled, label = "Assert.assertFalse(analysis.isGlobal())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testQueryOnLookup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(TABLE_FOO,analysis.getBaseDataSource())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(analysis.isConcreteTableBased())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertFalse(analysis.isConcreteTableBased())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(Optional.of(subquery(join(TABLE_FOO,LOOKUP_LOOKYLOO,\"1.\",JoinType.INNER)).getQuery()),analysis.getBaseQuery())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "testJoinUnderTopLevelSubqueries['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(queryDataSource)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(queryDataSource,analysis.getDataSource())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(LOOKUP_LOOKYLOO,analysis.getBaseDataSource())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(Optional.empty(),analysis.getBaseTableDataSource())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final QueryDataSource queryDataSource = subquery(subquery(join(TABLE_FOO,LOOKUP_LOOKYLOO,\"1.\",JoinType.INNER)))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(Optional.of(TABLE_FOO),analysis.getBaseTableDataSource())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final QueryDataSource queryDataSource = subquery(LOOKUP_LOOKYLOO)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(ImmutableList.of(new PreJoinableClause(\"1.\",LOOKUP_LOOKYLOO,JoinType.INNER,joinClause(\"1.\"))),analysis.getPreJoinableClauses())@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(analysis.isGlobal())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(Optional.of(new MultipleIntervalSegmentSpec(MILLENIUM_INTERVALS)),analysis.getBaseQuerySegmentSpec())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testJoinUnderTopLevelSubqueries['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertTrue(analysis.isQuery())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(analysis.isConcreteBased())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),analysis.getPreJoinableClauses())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12->7 [style = bold, label=""];
8->9 [style = bold, label=""];
18->20 [style = bold, label=""];
10->6 [style = bold, label=""];
9->4 [style = bold, label=""];
19->5 [style = bold, label=""];
3->2 [style = bold, label=""];
0->7 [style = bold, label=""];
15->19 [style = bold, label=""];
2->18 [style = dashed, label="0"];
6->13 [style = bold, label=""];
17->14 [style = bold, label=""];
3->18 [style = bold, label=""];
10->15 [style = dashed, label="0"];
2->8 [style = bold, label=""];
8->20 [style = dashed, label="0"];
14->1 [style = bold, label=""];
7->4 [style = solid, label="queryDataSource"];
1->3 [style = bold, label=""];
14->1 [style = solid, label="queryDataSource"];
5->11 [style = bold, label=""];
14->4 [style = solid, label="queryDataSource"];
11->16 [style = dashed, label="0"];
6->5 [style = bold, label=""];
4->10 [style = bold, label=""];
20->9 [style = bold, label=""];
7->1 [style = bold, label=""];
7->1 [style = solid, label="queryDataSource"];
7->14 [style = dashed, label="0"];
6->19 [style = dashed, label="0"];
4->15 [style = bold, label=""];
5->16 [style = bold, label=""];
13->5 [style = bold, label=""];
}
