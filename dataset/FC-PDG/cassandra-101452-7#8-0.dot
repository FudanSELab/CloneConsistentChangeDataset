digraph {
1 [style = filled, label = "Collection<Range<Token>> ranges = StorageService.instance.getLocalRanges(KEYSPACE5)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "expected.remove(FBUtilities.getBroadcastAddressAndPort())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Set<InetAddressAndPort> expected = addTokens(1 + Keyspace.open(KEYSPACE5).getReplicationStrategy().getReplicationFactor())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "expected.addAll(ars.getRangeAddresses(tmd.cloneOnlyTokenMap()).get(replicaRange))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "addTokens(2 * Keyspace.open(KEYSPACE5).getReplicationStrategy().getReplicationFactor())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "AbstractReplicationStrategy ars = Keyspace.open(KEYSPACE5).getReplicationStrategy()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testGetNeighborsTimesTwoInLocalDC['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Set<InetAddressAndPort> expected = new HashSet<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(expected,neighbors)@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "neighbors.addAll(ActiveRepairService.getNeighbors(KEYSPACE5,ranges,range,Arrays.asList(DatabaseDescriptor.getLocalDataCenter()),null))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Collection<Range<Token>> ranges = StorageService.instance.getLocalRanges(KEYSPACE5)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expected = Sets.intersection(expected,localEndpoints)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TokenMetadata tmd = StorageService.instance.getTokenMetadata()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expected = Sets.intersection(expected,localEndpoints)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testGetNeighborsPlusOneInLocalDC['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "HashSet<InetAddressAndPort> localEndpoints = Sets.newHashSet(topology.getDatacenterEndpoints().get(DatabaseDescriptor.getLocalDataCenter()))@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "neighbors.addAll(ActiveRepairService.getNeighbors(KEYSPACE5,ranges,range,Arrays.asList(DatabaseDescriptor.getLocalDataCenter()),null).endpoints())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "TokenMetadata.Topology topology = tmd.cloneOnlyTokenMap().getTopology()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Iterable<Range<Token>> ranges = StorageService.instance.getLocalReplicas(KEYSPACE5).ranges()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Set<InetAddressAndPort> expected = addTokens(1 + Keyspace.open(KEYSPACE5).getReplicationStrategy().getReplicationFactor().allReplicas)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "HashSet<InetAddressAndPort> localEndpoints = Sets.newHashSet(topology.getDatacenterEndpoints().get(DatabaseDescriptor.getLocalDataCenter()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testGetNeighborsPlusOneInLocalDC['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "expected.remove(FBUtilities.getBroadcastAddressAndPort())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Set<InetAddressAndPort> neighbors = new HashSet<>()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TokenMetadata.Topology topology = tmd.cloneOnlyTokenMap().getTopology()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->9 [style = bold, label=""];
20->17 [style = bold, label=""];
4->24 [style = bold, label=""];
23->24 [style = solid, label="expected"];
15->7 [style = bold, label=""];
4->6 [style = bold, label=""];
7->12 [style = bold, label=""];
11->6 [style = bold, label=""];
8->20 [style = dashed, label="0"];
12->10 [style = solid, label="expected"];
8->12 [style = dashed, label="0"];
6->16 [style = solid, label="ranges"];
5->18 [style = bold, label=""];
6->19 [style = bold, label=""];
7->20 [style = bold, label=""];
7->8 [style = bold, label=""];
12->0 [style = bold, label=""];
22->5 [style = bold, label=""];
17->23 [style = bold, label=""];
14->7 [style = bold, label=""];
19->16 [style = bold, label=""];
1->4 [style = solid, label="ranges"];
1->13 [style = dashed, label="0"];
8->0 [style = bold, label=""];
3->10 [style = bold, label=""];
4->24 [style = solid, label="localEndpoints"];
23->22 [style = bold, label=""];
18->4 [style = bold, label=""];
10->13 [style = bold, label=""];
8->10 [style = solid, label="expected"];
16->21 [style = bold, label=""];
5->4 [style = bold, label=""];
19->21 [style = solid, label="neighbors"];
24->21 [style = solid, label="expected"];
13->5 [style = bold, label=""];
9->3 [style = bold, label=""];
5->11 [style = bold, label=""];
3->10 [style = solid, label="localEndpoints"];
2->7 [style = bold, label=""];
5->6 [style = solid, label="neighbors"];
4->11 [style = dashed, label="0"];
10->1 [style = bold, label=""];
24->6 [style = bold, label=""];
10->6 [style = solid, label="expected"];
}
