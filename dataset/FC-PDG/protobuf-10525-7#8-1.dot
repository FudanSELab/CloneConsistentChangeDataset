digraph {
6 [style = filled, label = "assertEquals(\"InputStream.available()\",stringSize - skipped1 - 1,input.available())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int nearEndIndex = stringSize * 2 / 3@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(\"InputStream.mark() is available\",input.markSupported())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "InputStream input = testString.newInput()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"InputStream.reset(), read()\",testString.byteAt(nearEndIndex) & 0xFF,input.read())@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "long skipped2 = input.skip(stringSize)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "input.mark(0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(input.read(new byte((((,0,0)).isEqualTo(-1)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(\"InputStream.available()\",stringSize - skipped1,input.available())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"InputStream.reset(), read()\",stringUnderTest.byteAt(nearEndIndex) & 0xFF,input.read())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"InputStream.reset() succeeded\",stringSize - skipped1,input.available())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertEquals(\"InputStream.skip(), no more input\",-1,input.read())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"InputStream.skip()\",skipped1,nearEndIndex)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(input.skip(1)).isEqualTo(0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "int stringSize = testString.size()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "long skipped1 = input.skip(nearEndIndex)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "int stringSize = stringUnderTest.size()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(\"InputStream.skip(), read()\",stringUnderTest.byteAt(nearEndIndex) & 0xFF,input.read())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"InputStream.skip() incomplete\",skipped2,stringSize - skipped1 - 1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testNewInput_skip['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "testNewInput_skip['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"InputStream.reset() succeded\",stringSize - skipped1,input.available())@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "input.reset()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testNewInput_skip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"InputStream.skip(), no more input\",0,input.available())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"InputStream.skip(), read()\",testString.byteAt(nearEndIndex) & 0xFF,input.read())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "InputStream input = stringUnderTest.newInput()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12->1 [style = solid, label="stringSize"];
4->10 [style = bold, label=""];
14->24 [style = dashed, label="0"];
13->20 [style = solid, label="nearEndIndex"];
26->7 [style = solid, label="stringSize"];
7->11 [style = bold, label=""];
26->5 [style = solid, label="stringSize"];
15->7 [style = solid, label="skipped1"];
7->18 [style = dashed, label="0"];
5->9 [style = bold, label=""];
21->0 [style = bold, label=""];
9->4 [style = bold, label=""];
18->11 [style = bold, label=""];
13->10 [style = solid, label="nearEndIndex"];
1->3 [style = bold, label=""];
11->22 [style = dashed, label="0"];
13->22 [style = solid, label="nearEndIndex"];
20->6 [style = bold, label=""];
13->16 [style = solid, label="nearEndIndex"];
15->16 [style = bold, label=""];
15->3 [style = solid, label="skipped1"];
10->6 [style = bold, label=""];
26->13 [style = solid, label="stringSize"];
26->13 [style = bold, label=""];
0->7 [style = bold, label=""];
15->16 [style = solid, label="skipped1"];
8->0 [style = bold, label=""];
12->26 [style = dashed, label="0"];
12->6 [style = solid, label="stringSize"];
12->13 [style = bold, label=""];
6->1 [style = bold, label=""];
24->26 [style = bold, label=""];
7->22 [style = bold, label=""];
23->24 [style = bold, label=""];
26->3 [style = solid, label="stringSize"];
13->11 [style = solid, label="nearEndIndex"];
19->14 [style = bold, label=""];
3->2 [style = bold, label=""];
12->13 [style = solid, label="stringSize"];
17->14 [style = bold, label=""];
13->15 [style = solid, label="nearEndIndex"];
15->18 [style = solid, label="skipped1"];
14->12 [style = bold, label=""];
4->20 [style = bold, label=""];
12->5 [style = solid, label="stringSize"];
12->7 [style = solid, label="stringSize"];
16->5 [style = bold, label=""];
15->6 [style = solid, label="skipped1"];
0->18 [style = bold, label=""];
10->20 [style = dashed, label="0"];
26->1 [style = solid, label="stringSize"];
13->15 [style = bold, label=""];
15->5 [style = solid, label="skipped1"];
8->25 [style = bold, label=""];
12->3 [style = solid, label="stringSize"];
1->3 [style = solid, label="skipped2"];
25->21 [style = bold, label=""];
2->8 [style = bold, label=""];
12->18 [style = solid, label="stringSize"];
26->6 [style = solid, label="stringSize"];
}
