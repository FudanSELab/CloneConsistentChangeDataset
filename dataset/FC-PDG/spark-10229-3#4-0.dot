digraph {
12 [style = filled, label = "Assert.assertEquals(expected,result)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(expected,result)@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "JavaPairDStream<String,String> flatMapped = pairStream.flatMapValues(new Function<String,Iterable<String>>(){@Override public Iterable<String> call(String in){List<String> out = new ArrayList<>()out.add(in + \"1\")out.add(in + \"2\")return out}})@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "testFlatMapValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<List<Tuple2<String,String>>> expected = Arrays.asList(Arrays.asList(new Tuple2<>(\"california\",\"dodgers1\"),new Tuple2<>(\"california\",\"dodgers2\"),new Tuple2<>(\"california\",\"giants1\"),new Tuple2<>(\"california\",\"giants2\"),new Tuple2<>(\"new york\",\"yankees1\"),new Tuple2<>(\"new york\",\"yankees2\"),new Tuple2<>(\"new york\",\"mets1\"),new Tuple2<>(\"new york\",\"mets2\")),Arrays.asList(new Tuple2<>(\"california\",\"sharks1\"),new Tuple2<>(\"california\",\"sharks2\"),new Tuple2<>(\"california\",\"ducks1\"),new Tuple2<>(\"california\",\"ducks2\"),new Tuple2<>(\"new york\",\"rangers1\"),new Tuple2<>(\"new york\",\"rangers2\"),new Tuple2<>(\"new york\",\"islanders1\"),new Tuple2<>(\"new york\",\"islanders2\")))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "JavaTestUtils.attachTestOutputStream(flatMapped)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "JavaPairDStream<String,String> flatMapped = pairStream.flatMapValues(null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "JavaTestUtils.attachTestOutputStream(flatMapped)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "JavaDStream<Tuple2<String,String>> stream = JavaTestUtils.attachTestInputStream(ssc,inputData,1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testFlatMapValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testFlatMapValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(expected,result)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<List<Tuple2<String,String>>> result = JavaTestUtils.runStreams(ssc,2,2)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "JavaPairDStream<String,String> flatMapped = pairStream.flatMapValues(null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "List<List<Tuple2<String,String>>> inputData = stringStringKVStream@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<List<Tuple2<String,String>>> result = JavaTestUtils.runStreams(ssc,2,2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "JavaPairDStream<String,String> pairStream = JavaPairDStream.fromJavaDStream(stream)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->11 [style = solid, label="flatMapped"];
0->3 [style = bold, label=""];
16->13 [style = bold, label=""];
8->12 [style = solid, label="expected"];
13->12 [style = solid, label="result"];
2->6 [style = bold, label=""];
15->16 [style = solid, label="flatMapped"];
11->4 [style = bold, label=""];
7->0 [style = bold, label=""];
7->0 [style = solid, label="stream"];
15->16 [style = bold, label=""];
3->4 [style = bold, label=""];
0->15 [style = bold, label=""];
8->7 [style = bold, label=""];
9->6 [style = bold, label=""];
5->1 [style = bold, label=""];
8->5 [style = solid, label="expected"];
0->10 [style = bold, label=""];
13->12 [style = bold, label=""];
4->5 [style = solid, label="result"];
6->8 [style = bold, label=""];
5->1 [style = solid, label="result"];
3->15 [style = dashed, label="0"];
8->1 [style = solid, label="expected"];
3->4 [style = solid, label="flatMapped"];
3->10 [style = dashed, label="0"];
6->7 [style = solid, label="inputData"];
4->5 [style = bold, label=""];
14->6 [style = bold, label=""];
10->11 [style = bold, label=""];
}
