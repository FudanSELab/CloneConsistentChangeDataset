digraph {
10 [style = filled, label = "buildDefaultRecordBatch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "builder.appendWithOffset(1234568,2L,\"b\".getBytes(),\"v\".getBytes())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(pid,batch.producerId())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "record.ensureValid()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertEquals(baseSequence + 1,batch.lastSequence())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ByteBuffer buffer = ByteBuffer.allocate(2048)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MemoryRecords records = builder.build()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(1234568,batch.lastOffset())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(baseSequence,batch.baseSequence())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "long pid = 23423L@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "int baseSequence = 983@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "MemoryRecords records = builder.build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "buildDefaultRecordBatch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "ByteBuffer buffer = ByteBuffer.allocate(2048)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(RecordBatch.NO_SEQUENCE,batch.lastSequence())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(2L,batch.maxTimestamp())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(buffer,RecordBatch.MAGIC_VALUE_V2,CompressionType.NONE,TimestampType.CREATE_TIME,1234567L)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "builder.appendWithOffset(1234567,1L,\"a\".getBytes(),\"v\".getBytes())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(record.isValid())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(batch.isValid())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(1234568,batch.lastOffset())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(record.isValid())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertEquals(epoch,batch.producerEpoch())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(buffer,RecordBatch.MAGIC_VALUE_V2,CompressionType.NONE,TimestampType.CREATE_TIME,1234567L,RecordBatch.NO_TIMESTAMP,pid,epoch,baseSequence)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "buildDefaultRecordBatchWithProducerId['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "builder.appendWithOffset(1234567,1L,\"a\".getBytes(),\"v\".getBytes())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(1234567,batch.baseOffset())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "short epoch = 145@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->16 [style = bold, label=""];
19->23 [style = solid, label="pid"];
11->9 [style = solid, label="buffer"];
4->14 [style = bold, label=""];
19->18 [style = bold, label=""];
3->1 [style = bold, label=""];
7->12 [style = bold, label=""];
26->1 [style = bold, label=""];
18->26 [style = bold, label=""];
7->20 [style = dashed, label="0"];
6->17 [style = dashed, label="0"];
26->17 [style = solid, label="baseSequence"];
6->0 [style = bold, label=""];
18->27 [style = solid, label="epoch"];
26->22 [style = solid, label="baseSequence"];
11->9 [style = bold, label=""];
12->6 [style = bold, label=""];
17->22 [style = bold, label=""];
0->22 [style = dashed, label="0"];
9->23 [style = dashed, label="0"];
1->23 [style = bold, label=""];
24->5 [style = bold, label=""];
26->23 [style = solid, label="baseSequence"];
18->23 [style = solid, label="epoch"];
20->27 [style = bold, label=""];
6->20 [style = bold, label=""];
15->11 [style = bold, label=""];
8->5 [style = bold, label=""];
23->21 [style = bold, label=""];
0->4 [style = bold, label=""];
2->14 [style = bold, label=""];
25->19 [style = bold, label=""];
21->14 [style = bold, label=""];
27->17 [style = bold, label=""];
13->5 [style = bold, label=""];
12->27 [style = dashed, label="0"];
9->3 [style = bold, label=""];
5->7 [style = bold, label=""];
16->14 [style = bold, label=""];
1->2 [style = bold, label=""];
14->8 [style = bold, label=""];
22->24 [style = bold, label=""];
1->23 [style = solid, label="buffer"];
8->13 [style = bold, label=""];
19->20 [style = solid, label="pid"];
10->11 [style = bold, label=""];
}
