digraph {
12 [style = filled, label = "listAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "RegionConfig region = CacheElement.findElement(regions,\"customers2\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "listRegionByName2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "listAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(regions).hasSize(2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "RuntimeRegionConfig element = CacheElement.findElement(regions,\"customers\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "List<RegionConfig> regions = client.list(filter).getConfigResult()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "List<RuntimeRegionConfig> regions = client.list(filter).getResult()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(region.getType()).isIn(\"PARTITION\",\"PARTITION_PROXY\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "RuntimeRegionConfig region = CacheElement.findElement(regions,\"customers2\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertThat(region.getGroup()).isIn(\"group1\",\"group2\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "filter.setName(\"customers2\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(regions.stream().map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "element = CacheElement.findElement(regions,\"customers3\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(element.getGroup()).isNull()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "element = CacheElement.findElement(regions,\"customers1\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(element.getGroup()).isEqualTo(\"group1\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(element.getGroups()).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<RuntimeRegionConfig> regions = client.list(filter).getResult()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "RegionConfig element = CacheElement.findElement(regions,\"customers\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertThat(regions.stream().map(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"PARTITION\",\"PARTITION_PROXY\")@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10->15 [style = dashed, label="0"];
1->10 [style = solid, label="regions"];
0->9 [style = bold, label=""];
16->18 [style = bold, label=""];
3->1 [style = bold, label=""];
7->10 [style = bold, label=""];
4->6 [style = bold, label=""];
13->0 [style = solid, label="regions"];
7->20 [style = dashed, label="0"];
6->0 [style = bold, label=""];
19->17 [style = bold, label=""];
7->20 [style = bold, label=""];
8->14 [style = dashed, label="0"];
11->17 [style = dashed, label="0"];
1->7 [style = bold, label=""];
1->13 [style = dashed, label="0"];
12->13 [style = bold, label=""];
11->5 [style = bold, label=""];
5->2 [style = bold, label=""];
15->11 [style = bold, label=""];
13->7 [style = bold, label=""];
13->14 [style = solid, label="regions"];
2->14 [style = bold, label=""];
1->0 [style = solid, label="regions"];
7->15 [style = bold, label=""];
1->8 [style = solid, label="regions"];
8->4 [style = bold, label=""];
18->7 [style = bold, label=""];
20->19 [style = bold, label=""];
13->15 [style = solid, label="regions"];
1->5 [style = solid, label="regions"];
2->8 [style = bold, label=""];
14->4 [style = bold, label=""];
10->11 [style = bold, label=""];
13->5 [style = solid, label="regions"];
}
