digraph {
10 [style = filled, label = "Set<RangeFieldMapper.Range> ranges@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "out.writeVInt(sortedRanges.size())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "Comparator<RangeFieldMapper.Range> fromComparator = Comparator.comparingDouble(null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "return new BytesRef(encoded,0,out.getPosition())@@@16@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Comparator<RangeFieldMapper.Range> fromComparator = Comparator.comparingLong(null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Comparator<RangeFieldMapper.Range> toComparator = Comparator.comparingLong(null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "byte(( encodedFrom = encodeLong(((Number)range.from).longValue())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "out.writeBytes(encodedTo,encodedTo.length)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "sortedRanges.sort(fromComparator.thenComparing(toComparator))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "out.writeBytes(encodedFrom,encodedFrom.length)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ByteArrayDataOutput out = new ByteArrayDataOutput(encoded)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "encodeDoubleRanges['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "byte(( encodedTo = encodeDouble(((Number)range.to).doubleValue())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final byte(( encoded = new byte((((@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "out.writeBytes(encodedTo,encodedTo.length)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "out.writeVInt(sortedRanges.size())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "encodeLongRanges['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "BytesStreamOutput out = new BytesStreamOutput(5 + (9 * 2) * sortedRanges.size())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "return out.bytes().toBytesRef()@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "encodeLongRanges['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Comparator<RangeFieldMapper.Range> toComparator = Comparator.comparingDouble(null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "out.writeBytes(encodedFrom,encodedFrom.length)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Set<RangeFieldMapper.Range> ranges@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<RangeFieldMapper.Range> sortedRanges = new ArrayList<>(ranges)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "byte(( encodedFrom = encodeDouble(((Number)range.from).doubleValue())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final byte(( encoded = new byte((((@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8->19 [style = dashed, label="0"];
4->3 [style = bold, label=""];
4->14 [style = bold, label=""];
8->16 [style = dashed, label="0"];
14->9 [style = solid, label="encodedFrom"];
23->3 [style = solid, label="encodedTo"];
19->1 [style = solid, label="encoded"];
3->25 [style = bold, label=""];
8->12 [style = solid, label="encoded"];
4->15 [style = bold, label=""];
20->0 [style = solid, label="ranges"];
23->3 [style = bold, label=""];
6->0 [style = bold, label=""];
25->7 [style = solid, label="encodedFrom"];
0->21 [style = bold, label=""];
2->9 [style = bold, label=""];
7->4 [style = bold, label=""];
3->12 [style = bold, label=""];
16->17 [style = bold, label=""];
9->7 [style = bold, label=""];
21->24 [style = bold, label=""];
25->7 [style = bold, label=""];
7->4 [style = solid, label="encodedTo"];
13->16 [style = bold, label=""];
11->13 [style = solid, label="toComparator"];
3->9 [style = bold, label=""];
8->1 [style = bold, label=""];
6->10 [style = dotted, label="true"];
18->10 [style = dotted, label="true"];
19->1 [style = bold, label=""];
13->19 [style = bold, label=""];
22->20 [style = dotted, label="true"];
22->0 [style = bold, label=""];
10->0 [style = solid, label="ranges"];
17->14 [style = bold, label=""];
7->23 [style = bold, label=""];
11->13 [style = bold, label=""];
11->24 [style = dashed, label="0"];
9->25 [style = dashed, label="0"];
5->21 [style = dashed, label="0"];
4->3 [style = solid, label="encodedTo"];
10->20 [style = dashed, label="0"];
8->1 [style = solid, label="encoded"];
14->9 [style = bold, label=""];
5->11 [style = bold, label=""];
1->2 [style = bold, label=""];
9->7 [style = solid, label="encodedFrom"];
19->12 [style = solid, label="encoded"];
13->8 [style = bold, label=""];
2->25 [style = bold, label=""];
4->23 [style = dashed, label="0"];
24->13 [style = solid, label="toComparator"];
18->0 [style = bold, label=""];
0->5 [style = bold, label=""];
24->13 [style = bold, label=""];
}
