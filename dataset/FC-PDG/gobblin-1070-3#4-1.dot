digraph {
3 [style = filled, label = "test1to1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "RecordStreamWithMetadata<String,String> stream = new RecordStreamWithMetadata<>(Flowable.just(\"0\",MyAsyncConverter1to1.FAIL,\"1\").map(null),\"schema\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertFalse(ExponentialBackoff.awaitCondition().maxWait(200L).callable(null).await())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(outputRecords.size(),1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(outputRecords,Sets.newHashSet(\"0\",\"1\",\"2\",\"3\",\"4\"))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "MyAsyncConverter1to1 converter = new MyAsyncConverter1to1()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(ExponentialBackoff.awaitCondition().maxWait(100L).callable(null).await())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(outputRecords.size(),2)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(errors.isEmpty())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(errors.get(0).getCause().getMessage(),\"injected failure\")@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "workUnitState.setProp(AsyncConverter1to1.MAX_CONCURRENT_ASYNC_CONVERSIONS_KEY,3)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertTrue(ExponentialBackoff.awaitCondition().maxWait(100L).callable(null).await())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(ExponentialBackoff.awaitCondition().maxWait(100L).callable(null).await())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "converter.processStream(stream,workUnitState).getRecordStream().subscribeOn(Schedulers.newThread()).subscribe(null,null,null)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(errors.size(),1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "RecordStreamWithMetadata<String,String> stream = new RecordStreamWithMetadata<>(Flowable.range(0,5).map(null).map(null),GlobalMetadata.builder().schema(\"schema\").build())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "WorkUnitState workUnitState = new WorkUnitState()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(ExponentialBackoff.awaitCondition().maxWait(100L).callable(null).await())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(ExponentialBackoff.awaitCondition().maxWait(100L).callable(null).await())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(outputRecords.size(),3)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(ExponentialBackoff.awaitCondition().maxWait(100L).callable(null).await())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Set<String> outputRecords = Sets.newConcurrentHashSet()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(ExponentialBackoff.awaitCondition().maxWait(100L).callable(null).await())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(ExponentialBackoff.awaitCondition().maxWait(100L).callable(null).await())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(ExponentialBackoff.awaitCondition().maxWait(100L).callable(null).await())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(done.get())@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "AtomicBoolean done = new AtomicBoolean(false)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "RecordStreamWithMetadata<String,String> stream = new RecordStreamWithMetadata<>(Flowable.range(0,5).map(null).map(null),\"schema\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "List<Throwable> errors = Lists.newArrayList()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "test1to1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertTrue(ExponentialBackoff.awaitCondition().maxWait(100L).callable(null).await())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testFailedConversion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11->28 [style = bold, label=""];
15->23 [style = bold, label=""];
0->16 [style = bold, label=""];
28->15 [style = bold, label=""];
23->27 [style = bold, label=""];
10->14 [style = bold, label=""];
21->28 [style = dashed, label="0"];
21->15 [style = bold, label=""];
27->30 [style = bold, label=""];
11->21 [style = bold, label=""];
4->19 [style = bold, label=""];
12->11 [style = bold, label=""];
14->22 [style = bold, label=""];
18->17 [style = bold, label=""];
6->24 [style = bold, label=""];
16->2 [style = bold, label=""];
9->8 [style = bold, label=""];
24->18 [style = bold, label=""];
1->9 [style = bold, label=""];
20->4 [style = bold, label=""];
3->10 [style = bold, label=""];
5->1 [style = bold, label=""];
11->26 [style = bold, label=""];
7->5 [style = bold, label=""];
21->26 [style = dashed, label="0"];
30->31 [style = bold, label=""];
6->27 [style = dashed, label="0"];
22->12 [style = bold, label=""];
23->6 [style = bold, label=""];
26->15 [style = bold, label=""];
29->10 [style = bold, label=""];
25->10 [style = bold, label=""];
15->0 [style = solid, label="outputRecords"];
18->31 [style = dashed, label="0"];
19->7 [style = bold, label=""];
8->13 [style = bold, label=""];
13->0 [style = bold, label=""];
17->20 [style = bold, label=""];
}
