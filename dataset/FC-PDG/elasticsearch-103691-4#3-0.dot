digraph {
2 [style = filled, label = "assertThat(list(0(.getFileName().toString(),equalTo(\"foo-\" + id + \".st\"))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(read,equalTo(state))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testVersionMismatch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Path(( dirs = new Path((((@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DummyState read = format.read(NamedXContentRegistry.EMPTY,list(0()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "list = content(\"foo-*\",stateDir)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertThat(read,equalTo(state2))@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1,1000),randomInt(),randomLong(),randomDouble(),randomBoolean())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Path(( list = content(\"*\",file)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(list.length,1)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final long id = addDummyFiles(\"foo-\",dirs)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(list(0(.getFileName().toString(),equalTo(\"foo-\" + (id + 1) + \".st\"))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "format.write(state2,dirs)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Format format = new Format(\"foo-\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Path stateDir = list(0(@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testVersionMismatch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "i < dirs.length@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "dirs(i( = createTempDir()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "format.write(state,dirs)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(list(0(.getFileName().toString(),equalTo(MetaDataStateFormat.STATE_DIR_NAME))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int version = between(0,Integer.MAX_VALUE / 2)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(list.length,1)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(Files.isDirectory(stateDir),is(true))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "list = content(\"foo-*\",stateDir)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "DummyState read = format.read(NamedXContentRegistry.EMPTY,list(0()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final int version2 = between(version,Integer.MAX_VALUE)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Path stateDir = list(0(@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(Files.isDirectory(stateDir),is(true))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(list.length,1)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "DummyState state2 = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1,1000),randomInt(),randomLong(),randomDouble(),randomBoolean())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(list.length,1)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(list(0(.getFileName().toString(),equalTo(MetaDataStateFormat.STATE_DIR_NAME))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testReadWriteState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Path(( list = content(\"*\",file)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->19 [style = bold, label=""];
33->27 [style = bold, label=""];
3->11 [style = solid, label="i"];
16->26 [style = solid, label="read"];
3->11 [style = bold, label=""];
23->25 [style = bold, label=""];
18->20 [style = bold, label=""];
5->8 [style = bold, label=""];
8->9 [style = bold, label=""];
19->6 [style = bold, label=""];
13->5 [style = solid, label="dirs"];
6->7 [style = solid, label="stateDir"];
15->12 [style = bold, label=""];
29->24 [style = solid, label="stateDir"];
12->2 [style = bold, label=""];
4->11 [style = bold, label=""];
20->5 [style = bold, label=""];
25->26 [style = bold, label=""];
26->35 [style = bold, label=""];
28->26 [style = solid, label="list"];
10->8 [style = bold, label=""];
28->23 [style = bold, label=""];
27->32 [style = bold, label=""];
1->18 [style = bold, label=""];
11->1 [style = bold, label=""];
8->6 [style = solid, label="list"];
14->4 [style = solid, label="i"];
0->33 [style = solid, label="version"];
11->14 [style = bold, label=""];
16->10 [style = bold, label=""];
4->11 [style = solid, label="i"];
14->32 [style = solid, label="dirs"];
30->31 [style = bold, label=""];
34->29 [style = solid, label="list"];
26->35 [style = solid, label="read"];
16->10 [style = solid, label="read"];
1->25 [style = solid, label="id"];
27->32 [style = solid, label="state2"];
11->14 [style = dotted, label="true"];
13->32 [style = solid, label="dirs"];
17->13 [style = bold, label=""];
15->16 [style = solid, label="list"];
14->1 [style = solid, label="dirs"];
20->5 [style = solid, label="state"];
27->35 [style = solid, label="state2"];
13->3 [style = bold, label=""];
13->1 [style = solid, label="dirs"];
2->16 [style = bold, label=""];
11->4 [style = dotted, label="true"];
32->34 [style = bold, label=""];
7->15 [style = bold, label=""];
31->29 [style = bold, label=""];
14->4 [style = bold, label=""];
0->5 [style = bold, label=""];
20->0 [style = bold, label=""];
6->7 [style = bold, label=""];
29->24 [style = bold, label=""];
34->30 [style = bold, label=""];
10->33 [style = bold, label=""];
24->28 [style = bold, label=""];
35->34 [style = bold, label=""];
1->2 [style = solid, label="id"];
20->10 [style = solid, label="state"];
22->13 [style = bold, label=""];
14->5 [style = solid, label="dirs"];
29->28 [style = solid, label="stateDir"];
21->13 [style = bold, label=""];
6->15 [style = solid, label="stateDir"];
}
