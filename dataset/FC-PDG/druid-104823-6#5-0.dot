digraph {
7 [style = filled, label = "testSerde['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final CsvInputFormat fromJson = (CsvInputFormat)mapper.readValue(bytes,)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final CsvInputFormat format = new CsvInputFormat(Collections.singletonList(\"a\"),\"|\",null,true,10)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final JsonInputFormat format = new JsonInputFormat(new JSONPathSpec(false,ImmutableList.of(new JSONPathFieldSpec(JSONPathFieldType.ROOT,\"root_baz\",\"baz\"),new JSONPathFieldSpec(JSONPathFieldType.ROOT,\"root_baz2\",\"baz2\"),new JSONPathFieldSpec(JSONPathFieldType.PATH,\"path_omg\",\"$.o.mg\"),new JSONPathFieldSpec(JSONPathFieldType.PATH,\"path_omg2\",\"$.o.mg2\"),new JSONPathFieldSpec(JSONPathFieldType.JQ,\"jq_omg\",\".o.mg\"),new JSONPathFieldSpec(JSONPathFieldType.JQ,\"jq_omg2\",\".o.mg2\"))),ImmutableMap.of(Feature.ALLOW_COMMENTS.name(),true,Feature.ALLOW_UNQUOTED_FIELD_NAMES.name(),false))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(format,fromJson)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final ObjectMapper mapper = new ObjectMapper()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testSerde['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final JsonInputFormat format = new JsonInputFormat(new JSONPathSpec(false,ImmutableList.of(new JSONPathFieldSpec(JSONPathFieldType.ROOT,\"root_baz\",\"baz\"),new JSONPathFieldSpec(JSONPathFieldType.ROOT,\"root_baz2\",\"baz2\"),new JSONPathFieldSpec(JSONPathFieldType.PATH,\"path_omg\",\"$.o.mg\"),new JSONPathFieldSpec(JSONPathFieldType.PATH,\"path_omg2\",\"$.o.mg2\"),new JSONPathFieldSpec(JSONPathFieldType.JQ,\"jq_omg\",\".o.mg\"),new JSONPathFieldSpec(JSONPathFieldType.JQ,\"jq_omg2\",\".o.mg2\"))),ImmutableMap.of(Feature.ALLOW_COMMENTS.name(),true,Feature.ALLOW_UNQUOTED_FIELD_NAMES.name(),false),false)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "final JsonInputFormat fromJson = (JsonInputFormat)mapper.readValue(bytes,)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testSerde['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final byte(( bytes = mapper.writeValueAsBytes(format)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->4 [style = solid, label="fromJson"];
3->1 [style = bold, label=""];
2->3 [style = bold, label=""];
3->6 [style = bold, label=""];
1->4 [style = solid, label="format"];
6->0 [style = bold, label=""];
1->0 [style = bold, label=""];
10->4 [style = solid, label="format"];
7->3 [style = bold, label=""];
3->10 [style = bold, label=""];
1->0 [style = solid, label="format"];
6->0 [style = solid, label="format"];
1->6 [style = dashed, label="0"];
10->0 [style = bold, label=""];
5->4 [style = bold, label=""];
0->8 [style = bold, label=""];
0->5 [style = solid, label="bytes"];
9->3 [style = bold, label=""];
5->8 [style = dashed, label="0"];
5->4 [style = solid, label="fromJson"];
0->8 [style = solid, label="bytes"];
8->4 [style = bold, label=""];
6->4 [style = solid, label="format"];
0->5 [style = bold, label=""];
10->0 [style = solid, label="format"];
}
