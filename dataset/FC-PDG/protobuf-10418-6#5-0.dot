digraph {
2 [style = filled, label = "assertEquals(3,raw.getItemCount())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertThat(raw.getItemCount()).isEqualTo(3)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "TestMessageSet messageSet = TestMessageSet.newBuilder().setExtension(TestMessageSetExtension1.messageSetExtension,TestMessageSetExtension1.newBuilder().setI(123).build()).setExtension(TestMessageSetExtension2.messageSetExtension,TestMessageSetExtension2.newBuilder().setStr(\"foo\").build()).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(message1.getI()).isEqualTo(123)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "RawMessageSet raw = RawMessageSet.parseFrom(data)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"bar\",raw.getItem(2).getMessage().toStringUtf8())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertTrue(raw.getUnknownFields().asMap().isEmpty())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(message2.getStr()).isEqualTo(\"foo\")@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "ExtensionRegistryLite.setEagerlyParseMessageSets(eagerParsing)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(TYPE_ID_2,raw.getItem(1).getTypeId())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertEquals(messageSetText,messageSet.toString())@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testPrintMessageSet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TestMessageSetExtension2 message2 = TestMessageSetExtension2.parseFrom(raw.getItem(1).getMessage())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(raw.getItem(2).getMessage().toStringUtf8()).isEqualTo(\"bar\")@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "ByteString data = messageSet.toByteString()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(raw.getItem(1).getTypeId()).isEqualTo(TYPE_ID_2)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertEquals(123,message1.getI())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertEquals(TYPE_ID_1,raw.getItem(0).getTypeId())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertThat(raw.getItem(0).getTypeId()).isEqualTo(TYPE_ID_1)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(\"foo\",message2.getStr())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "TestMessageSet messageSet = TestMessageSet.newBuilder().setExtension(TestMessageSetExtension1.messageSetExtension,TestMessageSetExtension1.newBuilder().setI(123).build()).setExtension(TestMessageSetExtension2.messageSetExtension,TestMessageSetExtension2.newBuilder().setStr(\"foo\").build()).setUnknownFields(UnknownFieldSet.newBuilder().addField(UNKNOWN_TYPE_ID,UnknownFieldSet.Field.newBuilder().addLengthDelimited(ByteString.copyFromUtf8(\"bar\")).build()).build()).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(UNKNOWN_TYPE_ID,raw.getItem(2).getTypeId())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "TestMessageSetExtension1 message1 = TestMessageSetExtension1.parseFrom(raw.getItem(0).getMessage())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "boolean eagerParsing@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testSerializeMessageSetWithFlag['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(raw.getUnknownFields().asMap()).isEmpty()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "testSerializeMessageSetWithFlag['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertThat(raw.getItem(2).getTypeId()).isEqualTo(UNKNOWN_TYPE_ID)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->9 [style = bold, label=""];
22->19 [style = bold, label=""];
3->21 [style = dashed, label="0"];
6->20 [style = dashed, label="0"];
0->17 [style = bold, label=""];
4->15 [style = bold, label=""];
1->3 [style = bold, label=""];
11->12 [style = bold, label=""];
13->7 [style = dotted, label="true"];
16->23 [style = bold, label=""];
5->14 [style = bold, label=""];
2->4 [style = bold, label=""];
13->11 [style = bold, label=""];
15->22 [style = dashed, label="0"];
15->5 [style = bold, label=""];
9->6 [style = bold, label=""];
8->0 [style = bold, label=""];
7->11 [style = solid, label="eagerParsing"];
12->10 [style = bold, label=""];
23->22 [style = bold, label=""];
10->1 [style = solid, label="data"];
19->14 [style = bold, label=""];
3->2 [style = bold, label=""];
1->21 [style = bold, label=""];
24->11 [style = bold, label=""];
2->16 [style = dashed, label="0"];
9->17 [style = dashed, label="0"];
25->26 [style = bold, label=""];
21->16 [style = bold, label=""];
8->18 [style = dashed, label="0"];
14->18 [style = bold, label=""];
14->8 [style = bold, label=""];
10->1 [style = bold, label=""];
4->23 [style = dashed, label="0"];
5->19 [style = dashed, label="0"];
27->25 [style = bold, label=""];
18->0 [style = bold, label=""];
24->7 [style = dotted, label="true"];
17->20 [style = bold, label=""];
}
