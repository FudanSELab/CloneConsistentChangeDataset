digraph {
8 [style = filled, label = "final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(RowBasedColumnSelectorFactory.create(RowAdapters.standardRow(),null,RowSignature.builder().add(\"x\",ValueType.LONG).build(),false),Parser.parse(SCALE_LONG.getExpression(),TestExprMacroTable.INSTANCE))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "NullHandling.replaceWithDefault()@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(0,selector.getLong(),0.0f)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(0,selector.getDouble(),0.0f)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testExprEvalSelectorWithLongsAndNulls['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(RowBasedColumnSelectorFactory.create(RowAdapters.standardRow(),null,ImmutableMap.of(\"x\",ValueType.LONG),false),Parser.parse(SCALE_LONG.getExpression(),TestExprMacroTable.INSTANCE))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(selector.isNull())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testExprEvalSelectorWithLongsAndNulls['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "testExprEvalSelectorWithDoublesAndNulls['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertFalse(selector.isNull())@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(RowBasedColumnSelectorFactory.create(RowAdapters.standardRow(),null,ImmutableMap.of(\"x\",ValueType.DOUBLE),false),Parser.parse(SCALE_FLOAT.getExpression(),TestExprMacroTable.INSTANCE))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertTrue(selector.getObject().isNumericNull())@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "CURRENT_ROW.set(ROW0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
5->10 [style = bold, label=""];
3->1 [style = bold, label=""];
5->10 [style = dotted, label="true"];
5->1 [style = dotted, label="true"];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
4->2 [style = bold, label=""];
7->4 [style = bold, label=""];
5->3 [style = dotted, label="true"];
9->8 [style = bold, label=""];
4->12 [style = dashed, label="0"];
5->0 [style = dotted, label="false"];
12->2 [style = bold, label=""];
5->6 [style = bold, label=""];
8->2 [style = bold, label=""];
5->6 [style = dotted, label="false"];
4->8 [style = dashed, label="0"];
3->10 [style = dashed, label="0"];
10->1 [style = bold, label=""];
2->5 [style = bold, label=""];
}
