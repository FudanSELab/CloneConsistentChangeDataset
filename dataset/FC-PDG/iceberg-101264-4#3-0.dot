digraph {
10 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,and(greaterThan(\"id\",INT_MIN_VALUE - 25),lessThanOrEqual(\"id\",INT_MIN_VALUE))).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertTrue(\"Should read: and(true, true)\",shouldRead)@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,and(greaterThan(\"id\",5),lessThanOrEqual(\"id\",30))).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Assert.assertFalse(\"Should match: range does not overlap data\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertFalse(\"Should skip: and(false, true)\",shouldRead)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "shouldRead = new StrictMetricsEvaluator(SCHEMA,and(lessThan(\"id\",5),greaterThanOrEqual(\"id\",0))).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "boolean shouldRead = new StrictMetricsEvaluator(SCHEMA,and(greaterThan(\"id\",5),lessThanOrEqual(\"id\",30))).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testAnd['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "shouldRead = new StrictMetricsEvaluator(SCHEMA,and(lessThan(\"id\",85),greaterThanOrEqual(\"id\",0))).eval(FILE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,and(lessThan(\"id\",INT_MIN_VALUE - 25),greaterThanOrEqual(\"id\",INT_MAX_VALUE + 1))).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertFalse(\"Should not match: range overlaps data\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,and(lessThan(\"id\",5),greaterThanOrEqual(\"id\",0))).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertFalse(\"Should skip: and(false, false)\",shouldRead)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(\"Should match: range includes all data\",shouldRead)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testAnd['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testAnd['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,and(lessThan(\"id\",INT_MIN_VALUE - 25),greaterThanOrEqual(\"id\",INT_MIN_VALUE - 30))).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertFalse(\"Should skip: and(false, false)\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->11 [style = bold, label=""];
15->14 [style = solid, label="shouldRead"];
0->4 [style = solid, label="shouldRead"];
15->14 [style = bold, label=""];
0->5 [style = dashed, label="0"];
1->14 [style = dashed, label="0"];
5->6 [style = solid, label="shouldRead"];
2->1 [style = bold, label=""];
0->16 [style = dashed, label="0"];
2->1 [style = solid, label="shouldRead"];
4->2 [style = bold, label=""];
10->7 [style = bold, label=""];
10->7 [style = solid, label="shouldRead"];
3->0 [style = bold, label=""];
11->15 [style = bold, label=""];
2->10 [style = dashed, label="0"];
2->15 [style = dashed, label="0"];
12->13 [style = bold, label=""];
9->1 [style = solid, label="shouldRead"];
5->6 [style = bold, label=""];
8->5 [style = bold, label=""];
0->4 [style = bold, label=""];
14->12 [style = bold, label=""];
12->13 [style = solid, label="shouldRead"];
16->11 [style = solid, label="shouldRead"];
4->11 [style = dashed, label="0"];
6->9 [style = bold, label=""];
9->1 [style = bold, label=""];
1->10 [style = bold, label=""];
17->16 [style = bold, label=""];
}
