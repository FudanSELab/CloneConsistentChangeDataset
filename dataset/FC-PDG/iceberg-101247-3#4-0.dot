digraph {
0 [style = filled, label = "Assert.assertEquals(\"Should create an IN unbound predicate\",IN,op)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Expression expr = unbound.bind(struct)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "UnboundPredicate<Long> unbound = Expressions.in(\"x\",5L,Long.MAX_VALUE)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"Should change the IN operation to EQ\",EQ,bound.op())@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Assert.assertTrue(\"Should be a literal predicate\",bound.isLiteralPredicate())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(\"Should remove aboveMax literal value\",Integer.valueOf(5),bound.asLiteralPredicate().literal().value())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(\"Should create an IN predicate\",IN,op)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "BoundPredicate<Integer> bound = assertAndUnwrap(expr)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"Should remove aboveMax literal value\",Integer.valueOf(5),bound.literal().value())@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(\"Should reference correct field ID\",14,bound.ref().fieldId())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "UnboundPredicate<Long> unbound = Expressions.in(\"x\",Long.MAX_VALUE - 1,Long.MAX_VALUE)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Expression.Operation op = unbound.op()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Should change IN to alwaysFalse expression\",Expressions.alwaysFalse(),expr)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testInPredicateBindingConversionToExpression['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testInPredicateBindingConversionToEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"Should reference correct field ID\",14,bound.ref().fieldId())@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "StructType struct = StructType.of(required(14,\"x\",Types.IntegerType.get()))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testInPredicateBindingConversionToEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4->6 [style = bold, label=""];
3->10 [style = bold, label=""];
8->1 [style = solid, label="struct"];
9->11 [style = solid, label="op"];
7->9 [style = bold, label=""];
1->3 [style = solid, label="expr"];
9->16 [style = bold, label=""];
6->11 [style = bold, label=""];
9->6 [style = solid, label="op"];
9->0 [style = bold, label=""];
8->17 [style = bold, label=""];
1->14 [style = bold, label=""];
3->5 [style = bold, label=""];
0->1 [style = bold, label=""];
5->4 [style = bold, label=""];
2->8 [style = bold, label=""];
10->12 [style = bold, label=""];
7->17 [style = dashed, label="0"];
0->16 [style = dashed, label="0"];
1->3 [style = bold, label=""];
16->1 [style = bold, label=""];
9->0 [style = solid, label="op"];
17->9 [style = bold, label=""];
8->7 [style = bold, label=""];
1->14 [style = solid, label="expr"];
13->8 [style = bold, label=""];
15->8 [style = bold, label=""];
12->6 [style = bold, label=""];
9->16 [style = solid, label="op"];
}
