digraph {
10 [style = filled, label = "readWithNewAPIHadoopFile['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "sequenceFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "rdd.mapToPair(null).saveAsHadoopFile(outputDir,,,)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "readWithNewAPIHadoopFile['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<Tuple2<Integer,String>> pairs = Arrays.asList(new Tuple2<>(1,\"a\"),new Tuple2<>(2,\"aa\"),new Tuple2<>(3,\"aaa\"))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String outputDir = new File(tempDir,\"output\").getAbsolutePath()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "JavaPairRDD<IntWritable,Text> output = sc.newAPIHadoopFile(outputDir,,,,Job.getInstance().getConfiguration())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertEquals(pairs.toString(),output.map(null).collect().toString())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "rdd.mapToPair(null).saveAsHadoopFile(outputDir,,,)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "List<Tuple2<Integer,String>> pairs = Arrays.asList(new Tuple2<>(1,\"a\"),new Tuple2<>(2,\"aa\"),new Tuple2<>(3,\"aaa\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "File tempDir = Files.createTempDir()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(pairs,readRDD.collect())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "String outputDir = new File(tempDir,\"output\").getAbsolutePath()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "tempDir.deleteOnExit()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "JavaPairRDD<Integer,String> readRDD = sc.sequenceFile(outputDir,,).mapToPair(null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(pairs.toString(),output.map(new Function<Tuple2<IntWritable,Text>,String>(){@Override public String call(Tuple2<IntWritable,Text> x){return x.toString()}}).collect().toString())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Utils.deleteRecursively(tempDir)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "JavaPairRDD<Integer,String> rdd = sc.parallelizePairs(pairs)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "JavaPairRDD<IntWritable,Text> output = sc.newAPIHadoopFile(outputDir,,,,Job.getInstance().getConfiguration())@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->7 [style = solid, label="outputDir"];
15->13 [style = bold, label=""];
11->16 [style = solid, label="tempDir"];
2->12 [style = solid, label="outputDir"];
18->11 [style = bold, label=""];
12->15 [style = bold, label=""];
0->9 [style = solid, label="outputDir"];
5->14 [style = bold, label=""];
1->2 [style = solid, label="pairs"];
9->8 [style = bold, label=""];
13->16 [style = bold, label=""];
3->0 [style = bold, label=""];
7->9 [style = bold, label=""];
6->4 [style = bold, label=""];
5->6 [style = bold, label=""];
17->2 [style = bold, label=""];
0->1 [style = bold, label=""];
5->13 [style = solid, label="pairs"];
14->12 [style = bold, label=""];
10->0 [style = bold, label=""];
4->8 [style = dashed, label="0"];
5->14 [style = solid, label="pairs"];
11->17 [style = bold, label=""];
1->2 [style = bold, label=""];
2->7 [style = bold, label=""];
0->6 [style = solid, label="outputDir"];
0->5 [style = solid, label="outputDir"];
2->5 [style = bold, label=""];
}
