digraph {
20 [style = filled, label = "testRetry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final TaskHistory<TestTask> taskHistory = monitor.getCompleteSubTaskSpecHistory(specs.get(i).getId())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,result.getLastStatus().getStatusCode())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(TaskState.FAILED,attemptHistory.get(0).getStatusCode())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "final List<TestTaskSpec> specs = IntStream.range(0,10).mapToObj(null).collect(Collectors.toList())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(2,TimeUnit.SECONDS)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = specs.stream().map(null).collect(Collectors.toList())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(TaskState.FAILED,attemptHistory.get(1).getState())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "Assert.assertNotNull(taskHistory)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(3,attemptHistory.size())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testBasic['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testRetry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(\"specId\" + i,result.getSpec().getId())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,result.getLastState())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final List<TaskStatusPlus> attemptHistory = taskHistory.getAttemptHistory()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(1,TimeUnit.SECONDS)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNotNull(attemptHistory)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertNotNull(result.getLastStatus())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(TaskState.FAILED,attemptHistory.get(1).getStatusCode())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "i < futures.size()@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = IntStream.range(0,10).mapToObj(null).collect(Collectors.toList())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(\"supervisorId\",result.getSpec().getSupervisorTaskId())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,result.getLastStatus().getState())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,result.getLastState())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int i = 0@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(TaskState.FAILED,attemptHistory.get(0).getState())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11->16 [style = bold, label=""];
0->12 [style = dotted, label="true"];
16->0 [style = bold, label=""];
16->18 [style = bold, label=""];
25->1 [style = bold, label=""];
0->5 [style = dotted, label="true"];
8->15 [style = bold, label=""];
0->13 [style = dotted, label="true"];
12->0 [style = solid, label="i"];
21->19 [style = bold, label=""];
25->2 [style = solid, label="i"];
19->12 [style = bold, label=""];
25->0 [style = solid, label="i"];
0->10 [style = dotted, label="true"];
25->1 [style = solid, label="i"];
0->1 [style = solid, label="i"];
0->18 [style = dotted, label="true"];
0->19 [style = dotted, label="true"];
7->21 [style = dashed, label="0"];
1->11 [style = dotted, label="true"];
0->4 [style = dotted, label="true"];
12->10 [style = solid, label="i"];
1->0 [style = bold, label=""];
7->4 [style = bold, label=""];
8->24 [style = dashed, label="0"];
2->10 [style = bold, label=""];
5->17 [style = bold, label=""];
12->0 [style = bold, label=""];
26->24 [style = bold, label=""];
14->12 [style = dashed, label="0"];
4->19 [style = dashed, label="0"];
0->22 [style = dotted, label="true"];
1->16 [style = dotted, label="true"];
1->0 [style = solid, label="i"];
0->14 [style = bold, label=""];
22->18 [style = bold, label=""];
20->8 [style = bold, label=""];
0->21 [style = dotted, label="true"];
3->7 [style = bold, label=""];
13->9 [style = solid, label="attemptHistory"];
15->1 [style = bold, label=""];
1->10 [style = dotted, label="true"];
24->25 [style = bold, label=""];
18->5 [style = bold, label=""];
0->1 [style = bold, label=""];
1->12 [style = solid, label="i"];
1->12 [style = dotted, label="true"];
6->8 [style = bold, label=""];
1->10 [style = solid, label="i"];
1->12 [style = bold, label=""];
11->22 [style = bold, label=""];
4->12 [style = bold, label=""];
9->3 [style = bold, label=""];
0->17 [style = dotted, label="true"];
3->21 [style = bold, label=""];
0->14 [style = dotted, label="true"];
1->23 [style = dotted, label="true"];
14->2 [style = bold, label=""];
17->13 [style = bold, label=""];
13->9 [style = bold, label=""];
12->23 [style = bold, label=""];
23->2 [style = bold, label=""];
0->2 [style = dotted, label="true"];
0->16 [style = dotted, label="true"];
0->3 [style = dotted, label="true"];
1->0 [style = dotted, label="true"];
1->2 [style = dotted, label="true"];
0->11 [style = dotted, label="true"];
5->17 [style = solid, label="taskHistory"];
0->9 [style = dotted, label="true"];
0->7 [style = dotted, label="true"];
16->22 [style = dashed, label="0"];
10->11 [style = bold, label=""];
0->2 [style = solid, label="i"];
}
