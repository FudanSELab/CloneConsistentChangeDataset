digraph {
10 [style = filled, label = "ChildData newData@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "notifyListeners['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "listeners.forEach(new Function<SharedValueListener,Void>(){@Override public Void apply(SharedValueListener listener){try {listener.valueHasChanged(this,localValue)}catch (Exception e) return null}})@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "final byte(( localValue = getValue()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "rebuildTestExchanger.exchange(new Object())@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "notifyListeners['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ChildData previousData = data.getAndSet(newData)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "listeners.forEach(new Function<NodeCacheListener,Void>(){@Override public Void apply(NodeCacheListener listener){try {listener.nodeChanged()}catch (Exception e) return null}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "listeners.forEach(null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "rebuildTestExchanger != null@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "setNewData['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "!Objects.equal(previousData,newData)@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->0 [style = solid, label="localValue"];
5->6 [style = dotted, label="true"];
1->4 [style = bold, label=""];
0->4 [style = dashed, label="0"];
1->0 [style = bold, label=""];
5->6 [style = bold, label=""];
8->5 [style = bold, label=""];
3->1 [style = bold, label=""];
9->11 [style = bold, label=""];
7->8 [style = bold, label=""];
7->8 [style = dotted, label="true"];
9->10 [style = dotted, label="true"];
2->1 [style = bold, label=""];
11->7 [style = bold, label=""];
10->11 [style = solid, label="newData"];
7->5 [style = dotted, label="true"];
}
