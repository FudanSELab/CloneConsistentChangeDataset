digraph {
3 [style = filled, label = "final KeyValueStore<String,Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(output(),hasItems(\"A:1\",\"A:0\",\"A:2\",\"A:0\",\"A:3\"))@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "builder.table(INPUT_TOPIC,CONSUMED).transformValues(new StatefulTransformerSupplier(),Materialized.as(QUERYABLE_NAME).withKeySerde(Serdes.String()).withValueSerde(Serdes.Integer())).groupBy(toForceSendingOfOldValues(),org.apache.kafka.streams.kstream.Serialized.with(Serdes.String(),Serdes.Integer())).reduce(MockReducer.INTEGER_ADDER,MockReducer.INTEGER_SUBTRACTOR).mapValues(mapBackToStrings()).toStream().process(capture)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"a\",0L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "driver = new TopologyTestDriver(builder.build(),props())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"aa\",0L))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"ignore\",0L))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"ignored\",0L))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"ignored\",0L))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(keyValueStore.get(\"A\"),is(3))@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"aaa\",0L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "builder.table(INPUT_TOPIC,CONSUMED).transformValues(new StatefulTransformerSupplier(),Materialized.as(QUERYABLE_NAME).withKeySerde(Serdes.String()).withValueSerde(Serdes.Integer())).groupBy(toForceSendingOfOldValues(),Grouped.with(Serdes.String(),Serdes.Integer())).reduce(MockReducer.INTEGER_ADDER,MockReducer.INTEGER_SUBTRACTOR).mapValues(mapBackToStrings()).toStream().process(capture)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "builder.table(INPUT_TOPIC,CONSUMED).transformValues(new StatelessTransformerSupplier()).groupBy(toForceSendingOfOldValues(),org.apache.kafka.streams.kstream.Serialized.with(Serdes.String(),Serdes.Integer())).reduce(MockReducer.INTEGER_ADDER,MockReducer.INTEGER_SUBTRACTOR).mapValues(mapBackToStrings()).toStream().process(capture)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
1->4 [style = bold, label=""];
11->1 [style = bold, label=""];
7->14 [style = dashed, label="0"];
3->6 [style = bold, label=""];
0->11 [style = dashed, label="0"];
4->2 [style = bold, label=""];
9->10 [style = bold, label=""];
1->13 [style = bold, label=""];
0->10 [style = dashed, label="0"];
8->0 [style = bold, label=""];
2->12 [style = dashed, label="0"];
7->5 [style = bold, label=""];
13->12 [style = bold, label=""];
15->11 [style = bold, label=""];
0->1 [style = bold, label=""];
12->14 [style = bold, label=""];
2->7 [style = bold, label=""];
4->13 [style = dashed, label="0"];
10->1 [style = bold, label=""];
14->5 [style = bold, label=""];
}
