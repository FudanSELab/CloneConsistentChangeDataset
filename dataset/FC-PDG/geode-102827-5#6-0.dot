digraph {
33 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "sn.updateLoad(l1,\"\",new ServerLoad(10,1,1,1))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertNotNull(sn.getServerForConnection(null,Collections.EMPTY_SET))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "sn.updateLoad(l1,\"\",new ServerLoad(200,1,1,1))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119ff3),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "LocatorLoadSnapshot sn = new LocatorLoadSnapshot()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ServerLocation l2 = new ServerLocation(\"localhost\",2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testGroups['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "sn.updateLoad(l2,\"\",new ServerLoad(100,1,1,1))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testUpdateLoad['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119fde),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "sn.removeServer(l1,\"\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "sn.addServer(l1,new String((((,new ServerLoad(1,1,1,1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "sn.addServer(l2,\"\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119f41,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11a04a),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11a037),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "sn.addServer(l2,\"\",new String((((,new ServerLoad(100,.2f,1,.2f),LOAD_POLL_INTERVAL)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertNull(sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testUpdateLoad['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119fa1),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "sn.addServer(l2,new String((((,new ServerLoad(100,.2f,1,.2f))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "sn.addServer(l1,\"\",new String((((,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "sn.updateLoad(l1,new ServerLoad(200,1,1,1))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119fc9),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,-1))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "sn.addServer(l1,\"\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119f2f,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ServerLocation l1 = new ServerLocation(\"localhost\",1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119fb5),sn.getServersForQueue(\"c\",Collections.EMPTY_SET,-1))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
4->34 [style = solid, label="l1"];
0->36 [style = solid, label="l2"];
0->16 [style = bold, label=""];
0->29 [style = solid, label="l2"];
7->1 [style = bold, label=""];
31->25 [style = bold, label=""];
4->23 [style = solid, label="l1"];
4->24 [style = solid, label="l1"];
30->33 [style = bold, label=""];
28->34 [style = bold, label=""];
35->15 [style = bold, label=""];
11->14 [style = bold, label=""];
0->6 [style = bold, label=""];
22->19 [style = bold, label=""];
19->31 [style = bold, label=""];
4->7 [style = solid, label="l1"];
26->3 [style = bold, label=""];
33->28 [style = bold, label=""];
4->11 [style = solid, label="l1"];
6->11 [style = dashed, label="0"];
4->15 [style = solid, label="l1"];
4->2 [style = solid, label="l1"];
18->30 [style = bold, label=""];
0->11 [style = bold, label=""];
10->3 [style = bold, label=""];
32->27 [style = bold, label=""];
16->32 [style = bold, label=""];
0->14 [style = solid, label="l2"];
24->29 [style = bold, label=""];
2->9 [style = bold, label=""];
8->14 [style = dashed, label="0"];
9->7 [style = bold, label=""];
17->22 [style = bold, label=""];
12->1 [style = bold, label=""];
0->1 [style = solid, label="l2"];
3->4 [style = bold, label=""];
4->12 [style = solid, label="l1"];
36->20 [style = bold, label=""];
4->35 [style = solid, label="l1"];
0->32 [style = solid, label="l2"];
4->0 [style = bold, label=""];
0->18 [style = solid, label="l2"];
20->21 [style = bold, label=""];
0->25 [style = solid, label="l2"];
0->35 [style = solid, label="l2"];
5->27 [style = dashed, label="0"];
0->5 [style = solid, label="l2"];
4->16 [style = solid, label="l1"];
6->16 [style = dashed, label="0"];
34->24 [style = bold, label=""];
0->15 [style = solid, label="l2"];
13->3 [style = bold, label=""];
8->2 [style = bold, label=""];
4->20 [style = solid, label="l1"];
6->8 [style = bold, label=""];
0->19 [style = solid, label="l2"];
0->28 [style = solid, label="l2"];
7->12 [style = dashed, label="0"];
4->30 [style = solid, label="l1"];
27->23 [style = bold, label=""];
14->2 [style = bold, label=""];
4->6 [style = solid, label="l1"];
9->12 [style = bold, label=""];
29->35 [style = bold, label=""];
4->36 [style = solid, label="l1"];
0->8 [style = solid, label="l2"];
0->33 [style = solid, label="l2"];
0->21 [style = solid, label="l2"];
0->17 [style = solid, label="l2"];
21->17 [style = bold, label=""];
23->18 [style = bold, label=""];
15->36 [style = bold, label=""];
4->9 [style = solid, label="l1"];
}
