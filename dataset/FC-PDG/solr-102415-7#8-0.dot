digraph {
21 [style = filled, label = "log.info(\"Remove node as live in ZooKeeper:\" + nodePath)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "removeEphemeralLiveNode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ops.add(Op.create(nodeAddedPath,json,zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath),CreateMode.EPHEMERAL))@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "zkClient.multi(ops,true)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ops.add(Op.create(nodeAddedPath,null,zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath),CreateMode.EPHEMERAL))@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ops.add(Op.delete(nodeAddedPath,-1))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "log.info(\"Register node as live in ZooKeeper:\" + nodePath)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "zkRunOnly@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<Op> ops = new ArrayList<>(2)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "createEphemeralLiveNode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "createMarkerNode && !zkClient.exists(nodeAddedPath,true)@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "zkClient.multi(ops,true)@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "ops.add(Op.create(nodePath,null,zkClient.getZkACLProvider().getACLsToAdd(nodePath),CreateMode.EPHEMERAL))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ops.add(Op.delete(nodePath,-1))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String nodeName = getNodeName()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "byte(( json = Utils.toJSON(Collections.singletonMap(\"timestamp\",TimeSource.NANO_TIME.getEpochTimeNs()))@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "zkClient.multi(ops,true)@@@16@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "createEphemeralLiveNode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
10->21 [style = solid, label="nodePath"];
0->10 [style = solid, label="nodeName"];
3->11 [style = bold, label=""];
1->8 [style = dotted, label="true"];
4->7 [style = bold, label=""];
2->4 [style = bold, label=""];
3->14 [style = bold, label=""];
15->1 [style = bold, label=""];
18->20 [style = bold, label=""];
0->5 [style = solid, label="nodeName"];
19->1 [style = bold, label=""];
8->0 [style = bold, label=""];
7->9 [style = bold, label=""];
4->11 [style = solid, label="ops"];
6->11 [style = bold, label=""];
1->8 [style = bold, label=""];
9->3 [style = bold, label=""];
12->1 [style = bold, label=""];
16->13 [style = bold, label=""];
4->14 [style = solid, label="ops"];
3->6 [style = bold, label=""];
16->13 [style = solid, label="json"];
0->10 [style = bold, label=""];
5->20 [style = solid, label="nodeAddedPath"];
5->21 [style = bold, label=""];
3->6 [style = dotted, label="true"];
9->3 [style = solid, label="createMarkerNode"];
2->21 [style = dashed, label="0"];
20->17 [style = bold, label=""];
3->16 [style = bold, label=""];
10->7 [style = solid, label="nodePath"];
13->14 [style = bold, label=""];
5->13 [style = solid, label="nodeAddedPath"];
10->18 [style = solid, label="nodePath"];
3->16 [style = dotted, label="true"];
21->4 [style = bold, label=""];
10->2 [style = solid, label="nodePath"];
3->13 [style = dotted, label="true"];
10->5 [style = bold, label=""];
5->6 [style = solid, label="nodeAddedPath"];
4->18 [style = bold, label=""];
1->0 [style = bold, label=""];
4->17 [style = solid, label="ops"];
}
