digraph {
18 [style = filled, label = "Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(null)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "val userMemento2 = userMemento.withImpersonating(true)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "val userMemento = UserMemento.ofName(\"fredflintstone\").withRoleAdded(\"CAVEMAN\").withRoleAdded(\"HUSBAND\").withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\")).withRealName(\"Fred Flintstone\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assertions.assertThat(userMemento.getMultiTenancyToken()).isEqualTo(\"/USA/Bedrock\")@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "user_and_roles_preserved_and_impersonating_flag_set['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assertions.assertThat(userMemento2.isImpersonating()).isTrue()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assertions.assertThat(userMemento2.isImpersonating()).isTrue()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "happy_case['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\",\"CAVEMAN\",\"HUSBAND\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assertions.assertThat(userMemento2).isNotSameAs(userMemento)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assertions.assertThat(userMemento2.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assertions.assertThat(userMemento.isImpersonating()).isFalse()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "happy_case['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assertions.assertThat(userMemento2).isNotSameAs(userMemento)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assertions.assertThat(userMemento2.getMultiTenancyToken()).isEqualTo(\"/USA/Bedrock\")@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Assertions.assertThat(userMemento.isImpersonating()).isFalse()@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "val userMemento2 = userMemento.withImpersonating(true)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assertions.assertThat(userMemento2.getRoles().size()).isEqualTo(2)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "val userMemento = UserMemento.ofName(\"fredflintstone\").withRoleAdded(\"CAVEMAN\").withRoleAdded(\"HUSBAND\").withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\")).withRealName(\"Fred Flintstone\").withMultiTenancyToken(\"/USA/Bedrock\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\")@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(null)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assertions.assertThat(userMemento.isImpersonating()).isFalse()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
4->9 [style = bold, label=""];
16->11 [style = bold, label=""];
0->13 [style = bold, label=""];
29->30 [style = bold, label=""];
12->21 [style = bold, label=""];
26->25 [style = bold, label=""];
27->9 [style = bold, label=""];
2->12 [style = solid, label="userMemento"];
23->4 [style = bold, label=""];
31->29 [style = bold, label=""];
32->33 [style = bold, label=""];
3->0 [style = bold, label=""];
24->5 [style = bold, label=""];
32->31 [style = solid, label="userMemento"];
20->22 [style = bold, label=""];
22->3 [style = bold, label=""];
5->19 [style = bold, label=""];
8->20 [style = bold, label=""];
9->18 [style = bold, label=""];
25->12 [style = solid, label="userMemento"];
17->2 [style = bold, label=""];
6->16 [style = bold, label=""];
15->24 [style = bold, label=""];
4->27 [style = bold, label=""];
7->6 [style = bold, label=""];
2->25 [style = dashed, label="0"];
1->12 [style = bold, label=""];
33->31 [style = bold, label=""];
21->7 [style = bold, label=""];
34->32 [style = bold, label=""];
14->15 [style = bold, label=""];
25->8 [style = bold, label=""];
19->28 [style = bold, label=""];
10->1 [style = bold, label=""];
11->23 [style = bold, label=""];
18->14 [style = bold, label=""];
2->8 [style = bold, label=""];
}
