digraph {
4 [style = filled, label = "assertEquals(3,v.capacity())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "v = new VectorSet(3,1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "v.add(new Object())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertSame(b,v.elementAt(1))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Object b = new Object()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testRemoveAtFrontWhenSizeEqualsCapacity['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertSame(a,v.elementAt(0))@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Object a = new Object()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "v.add(a)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(v.remove(O))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(2,v.size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertFalse(v.remove(O))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "v.add(b)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testRemoveAtFrontWhenSizeEqualsCapacity['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertSame(a,v.elementAt(0))@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "v.add(O)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testRemoveInMiddleWhenSizeEqualsCapacity['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(3,v.size())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "v.add(O)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->14 [style = solid, label="a"];
0->3 [style = bold, label=""];
4->9 [style = bold, label=""];
17->5 [style = bold, label=""];
16->12 [style = solid, label="b"];
16->15 [style = solid, label="b"];
1->8 [style = bold, label=""];
3->1 [style = bold, label=""];
9->2 [style = bold, label=""];
3->16 [style = bold, label=""];
0->6 [style = solid, label="a"];
3->18 [style = bold, label=""];
6->14 [style = bold, label=""];
0->3 [style = solid, label="a"];
11->0 [style = bold, label=""];
10->5 [style = bold, label=""];
12->4 [style = bold, label=""];
5->0 [style = bold, label=""];
18->1 [style = bold, label=""];
1->16 [style = dashed, label="0"];
7->6 [style = bold, label=""];
13->5 [style = bold, label=""];
14->15 [style = bold, label=""];
5->11 [style = bold, label=""];
8->4 [style = bold, label=""];
2->7 [style = bold, label=""];
16->12 [style = bold, label=""];
}
