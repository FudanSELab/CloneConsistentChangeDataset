digraph {
2 [style = filled, label = "QueryRunner runner = new FinalizeResultsQueryRunner(factory.createRunner(segment),factory.getToolchest())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TimeseriesQueryRunnerFactory factory = new TimeseriesQueryRunnerFactory(new TimeseriesQueryQueryToolChest(QueryRunnerTestHelper.NoopIntervalChunkingQueryRunnerDecorator()),new TimeseriesQueryEngine(),QueryRunnerTestHelper.NOOP_QUERYWATCHER)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testSpatialQueryMorePoints['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TestHelper.assertExpectedResults(expectedResults,runner.run(QueryPlus.wrap(query),context))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testSpatialQueryMorePoints['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Arrays.asList(new Result<TimeseriesResultValue>(DateTimes.of(\"2013-01-01T00:00:00.000Z\"),new TimeseriesResultValue(ImmutableMap.builder().put(\"rows\",1L).put(\"val\",17L).build())),new Result<TimeseriesResultValue>(DateTimes.of(\"2013-01-02T00:00:00.000Z\"),new TimeseriesResultValue(ImmutableMap.builder().put(\"rows\",1L).put(\"val\",29L).build())),new Result<TimeseriesResultValue>(DateTimes.of(\"2013-01-03T00:00:00.000Z\"),new TimeseriesResultValue(ImmutableMap.builder().put(\"rows\",1L).put(\"val\",13L).build())),new Result<TimeseriesResultValue>(DateTimes.of(\"2013-01-04T00:00:00.000Z\"),new TimeseriesResultValue(ImmutableMap.builder().put(\"rows\",1L).put(\"val\",91L).build())),new Result<TimeseriesResultValue>(DateTimes.of(\"2013-01-05T00:00:00.000Z\"),new TimeseriesResultValue(ImmutableMap.builder().put(\"rows\",1L).put(\"val\",47L).build())))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testSpatialQueryMorePoints['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "HashMap<String,Object> context = new HashMap<String,Object>()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"test\").granularity(Granularities.DAY).intervals(Collections.singletonList(Intervals.of(\"2013-01-01/2013-01-07\"))).filters(new SpatialDimFilter(\"dim.geo\",new RectangularBound(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a88619,new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a8861e))).aggregators(Arrays.asList(new CountAggregatorFactory(\"rows\"),new LongSumAggregatorFactory(\"val\",\"val\"))).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TestHelper.assertExpectedResults(expectedResults,runner.run(QueryPlus.wrap(query),new HashMap<>()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "TestHelper.assertExpectedResults(expectedResults,runner.run(QueryPlus.wrap(query),Maps.newHashMap()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4->3 [style = bold, label=""];
8->10 [style = bold, label=""];
4->10 [style = solid, label="query"];
1->2 [style = bold, label=""];
3->5 [style = solid, label="expectedResults"];
4->6 [style = solid, label="query"];
7->4 [style = bold, label=""];
8->10 [style = solid, label="context"];
5->6 [style = dashed, label="0"];
3->1 [style = bold, label=""];
0->4 [style = bold, label=""];
3->10 [style = solid, label="expectedResults"];
2->6 [style = bold, label=""];
4->5 [style = solid, label="query"];
9->4 [style = bold, label=""];
2->8 [style = bold, label=""];
2->5 [style = bold, label=""];
3->6 [style = solid, label="expectedResults"];
}
