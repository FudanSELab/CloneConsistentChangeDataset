digraph {
25 [style = filled, label = "passThroughtStream.getSideOutput(sideOutputTag2).addSink(sideOutputResultSink2)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final OutputTag<String> sideOutputTag1 = new OutputTag<String>(\"side1\"){}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(Arrays.asList(\"sideout1-1-1\",\"sideout1-2-2\",\"sideout2-3-3\",\"sideout2-4-4\",\"sideout2-5-5\"),sideOutputResultSink.getSortedResult())@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TestListResultSink<Integer> resultSink = new TestListResultSink<>()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testKeyedCoProcessFunctionSideOutput['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "DataStream<Integer> ds1 = see.fromCollection(elements)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TestListResultSink<Integer> resultSink = new TestListResultSink<>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testKeyedCoProcessFunctionSideOutput['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(Arrays.asList(\"sideout2-4\",\"sideout2-5\"),sideOutputResultSink2.getSortedResult())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "DataStream<Integer> ds1 = see.fromCollection(elements)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "SingleOutputStreamOperator<Integer> passThroughtStream = ds1.keyBy(null).connect(ds2.keyBy(null)).process(new KeyedCoProcessFunction<Integer,Integer,Integer,Integer>(){@Override public void processElement1(Integer value,Context ctx,Collector<Integer> out){if (value < 3) {out.collect(value)ctx.output(sideOutputTag,\"sideout1-\" + ctx.getCurrentKey() + \"-\" + String.valueOf(value))}}@Override public void processElement2(Integer value,Context ctx,Collector<Integer> out){if (value >= 3) {out.collect(value)ctx.output(sideOutputTag,\"sideout2-\" + ctx.getCurrentKey() + \"-\" + String.valueOf(value))}}})@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "see.execute()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(Arrays.asList(\"sideout1-1\",\"sideout1-2\",\"sideout1-3\"),sideOutputResultSink1.getSortedResult())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "passThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink1)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "DataStream<Integer> ds2 = see.fromCollection(elements)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "SingleOutputStreamOperator<Integer> passThroughtStream = ds1.keyBy(null).connect(ds2.keyBy(null)).process(new CoProcessFunction<Integer,Integer,Integer>(){@Override public void processElement1(Integer value,Context ctx,Collector<Integer> out){if (value < 4) {out.collect(value)ctx.output(sideOutputTag1,\"sideout1-\" + String.valueOf(value))}}@Override public void processElement2(Integer value,Context ctx,Collector<Integer> out){if (value >= 4) {out.collect(value)ctx.output(sideOutputTag2,\"sideout2-\" + String.valueOf(value))}}})@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testKeyedCoProcessFunctionSideOutputWithMultipleConsumers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "see.execute()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final OutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(Arrays.asList(1,2,3,4,5),resultSink.getSortedResult())@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "see.setParallelism(3)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "passThroughtStream.addSink(resultSink)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "see.setParallelism(3)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final OutputTag<String> sideOutputTag2 = new OutputTag<String>(\"side2\"){}@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "passThroughtStream.addSink(resultSink)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(Arrays.asList(1,2,3,4,5),resultSink.getSortedResult())@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(Arrays.asList(\"sideout1-1\",\"sideout1-2\",\"sideout2-3\",\"sideout2-4\",\"sideout2-5\"),sideOutputResultSink.getSortedResult())@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13->12 [style = solid, label="resultSink"];
1->4 [style = bold, label=""];
6->0 [style = solid, label="sideOutputResultSink"];
9->16 [style = dashed, label="0"];
7->11 [style = bold, label=""];
4->14 [style = solid, label="sideOutputTag"];
12->5 [style = bold, label=""];
5->9 [style = bold, label=""];
28->30 [style = bold, label=""];
11->14 [style = bold, label=""];
4->6 [style = bold, label=""];
9->2 [style = bold, label=""];
0->12 [style = bold, label=""];
22->30 [style = solid, label="sideOutputResultSink1"];
23->26 [style = bold, label=""];
22->21 [style = bold, label=""];
4->27 [style = dashed, label="0"];
30->25 [style = bold, label=""];
31->18 [style = bold, label=""];
32->19 [style = bold, label=""];
8->14 [style = dashed, label="0"];
16->2 [style = bold, label=""];
24->22 [style = bold, label=""];
10->7 [style = bold, label=""];
25->17 [style = bold, label=""];
17->23 [style = bold, label=""];
20->27 [style = bold, label=""];
8->0 [style = bold, label=""];
5->16 [style = bold, label=""];
3->10 [style = bold, label=""];
26->31 [style = bold, label=""];
24->28 [style = solid, label="sideOutputTag2"];
13->3 [style = bold, label=""];
14->0 [style = bold, label=""];
21->11 [style = bold, label=""];
4->8 [style = solid, label="sideOutputTag"];
11->17 [style = solid, label="resultSink"];
6->24 [style = dashed, label="0"];
29->32 [style = bold, label=""];
6->13 [style = bold, label=""];
0->30 [style = dashed, label="0"];
9->26 [style = dashed, label="0"];
15->4 [style = bold, label=""];
11->8 [style = bold, label=""];
27->28 [style = solid, label="sideOutputTag1"];
27->24 [style = bold, label=""];
19->28 [style = bold, label=""];
21->25 [style = solid, label="sideOutputResultSink2"];
8->29 [style = bold, label=""];
}
