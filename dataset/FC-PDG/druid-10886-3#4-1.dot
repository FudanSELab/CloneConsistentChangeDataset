digraph {
5 [style = filled, label = "return Sequences.simple(FunctionalIterable.create(segmentIds).trinaryTransform(intervals,results,new TrinaryFn<SegmentId,Interval,Iterable<Result<TopNResultValue>>,Result<TopNResultValue>>(){@Override @SuppressWarnings(\"unchecked\") public Result<TopNResultValue> apply(final SegmentId segmentId,final Interval interval,final Iterable<Result<TopNResultValue>> results){return new Result(interval.getStart(),new BySegmentResultValueClass(Lists.newArrayList(results),segmentId.toString(),interval))}}))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "toQueryableTopNResults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Iterable<String> segmentIds@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "toQueryableTimeBoundaryResults['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Iterable<Iterable<Result<TopNResultValue>>> results@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "toQueryableTopNResults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Iterable<Interval> intervals@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "return Sequences.simple(FunctionalIterable.create(segmentIds).trinaryTransform(intervals,results,new TrinaryFn<String,Interval,Iterable<Result<TopNResultValue>>,Result<TopNResultValue>>(){@Override @SuppressWarnings(\"unchecked\") public Result<TopNResultValue> apply(final String segmentId,final Interval interval,final Iterable<Result<TopNResultValue>> results){return new Result(interval.getStart(),new BySegmentResultValueClass(Lists.newArrayList(results),segmentId,interval))}}))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Iterable<String> segmentIds@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Iterable<Interval> intervals@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Iterable<SegmentId> segmentIds@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "return Sequences.simple(FunctionalIterable.create(segmentIds).trinaryTransform(intervals,results,new TrinaryFn<String,Interval,Iterable<Result<TimeBoundaryResultValue>>,Result<TimeBoundaryResultValue>>(){@Override @SuppressWarnings(\"unchecked\") public Result<TimeBoundaryResultValue> apply(final String segmentId,final Interval interval,final Iterable<Result<TimeBoundaryResultValue>> results){return new Result(results.iterator().next().getTimestamp(),new BySegmentResultValueClass(Lists.newArrayList(results),segmentId,interval))}}))@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Iterable<Iterable<Result<TimeBoundaryResultValue>>> results@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Iterable<Iterable<Result<TopNResultValue>>> results@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Iterable<Interval> intervals@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8->5 [style = solid, label="results"];
4->2 [style = solid, label="intervals"];
1->4 [style = dotted, label="true"];
14->13 [style = solid, label="results"];
12->11 [style = dotted, label="true"];
1->3 [style = dotted, label="true"];
12->13 [style = bold, label=""];
12->14 [style = dotted, label="true"];
6->5 [style = bold, label=""];
4->9 [style = dashed, label="0"];
2->5 [style = dashed, label="0"];
12->10 [style = dotted, label="true"];
6->9 [style = dotted, label="true"];
6->8 [style = dotted, label="true"];
2->13 [style = dashed, label="0"];
6->7 [style = dotted, label="true"];
3->2 [style = solid, label="results"];
4->14 [style = dashed, label="0"];
1->2 [style = bold, label=""];
1->0 [style = dotted, label="true"];
7->5 [style = solid, label="intervals"];
10->13 [style = solid, label="intervals"];
}
