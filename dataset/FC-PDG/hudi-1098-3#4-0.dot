digraph {
12 [style = filled, label = "assertTrue(fs.mkdirs(new Path(partition2)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testAddPartitionMetaWithDryRun['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "rows = paths.stream().map(null).toArray(null)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(fs.mkdirs(new Path(partition3)))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(expected,cr.getResult().toString())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(expected,cr.getResult().toString())@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "String got = removeNonWordAndStripSpace(cr.getResult().toString())@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "String(((( rows = paths.stream().map(null).toArray(null)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testAddPartitionMetaWithRealRun['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "expected = removeNonWordAndStripSpace(expected)@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "List<String> paths = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs,tablePath)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "cr = getShell().executeCommand(\"repair addpartitionmeta\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testAddPartitionMetaWithDryRun['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertEquals(expected,got)@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "String expected = HoodiePrintHelper.print(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@162bd77,rows)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(expected,cr.getResult().toString())@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta --dryrun false\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(cr.isSuccess())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "String expected = HoodiePrintHelper.print(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@162be18,rows)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "expected = HoodiePrintHelper.print(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@162be4b,rows)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(fs.mkdirs(new Path(partition1)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String(((( rows = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs,tablePath).stream().map(null).toArray(null)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->12 [style = solid, label="partition2"];
7->23 [style = bold, label=""];
26->22 [style = bold, label=""];
16->14 [style = solid, label="got"];
3->11 [style = bold, label=""];
23->25 [style = bold, label=""];
8->9 [style = bold, label=""];
18->20 [style = bold, label=""];
19->9 [style = bold, label=""];
6->4 [style = bold, label=""];
26->22 [style = solid, label="rows"];
22->21 [style = solid, label="expected"];
9->2 [style = bold, label=""];
7->6 [style = bold, label=""];
6->4 [style = solid, label="rows"];
4->15 [style = solid, label="expected"];
18->20 [style = solid, label="expected"];
25->18 [style = bold, label=""];
11->17 [style = dashed, label="0"];
10->3 [style = solid, label="partition3"];
4->1 [style = bold, label=""];
11->7 [style = bold, label=""];
0->10 [style = bold, label=""];
4->1 [style = solid, label="expected"];
3->17 [style = bold, label=""];
12->3 [style = bold, label=""];
16->14 [style = bold, label=""];
15->16 [style = bold, label=""];
20->24 [style = bold, label=""];
25->18 [style = solid, label="rows"];
5->12 [style = bold, label=""];
2->0 [style = bold, label=""];
2->5 [style = solid, label="partition1"];
22->21 [style = bold, label=""];
13->9 [style = bold, label=""];
17->7 [style = bold, label=""];
15->14 [style = solid, label="expected"];
4->15 [style = bold, label=""];
24->26 [style = bold, label=""];
10->5 [style = bold, label=""];
6->23 [style = dashed, label="0"];
}
