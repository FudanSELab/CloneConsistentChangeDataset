digraph {
11 [style = filled, label = "assertTrue(getFileUtils().isLeadingPath(new File(\"/foo\"),new File(\"/foo/../foo/bar\"),true))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertTrue(FILE_UTILS.isLeadingPath(new File(\"C:\foo\"),new File(\"C:\foo\bar\"),true))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertFalse(FILE_UTILS.isLeadingPath(new File(\"C:\foo\"),new File(\"C:\bar\"),true))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertTrue(FILE_UTILS.isLeadingPath(new File(\"C:\foo\"),new File(\"C:\foo\..\foo\bar\"),true))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(FILE_UTILS.isLeadingPath(new File(\"/foo\"),new File(\"/foo/../foo/bar\"),true))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertTrue(getFileUtils().isLeadingPath(new File(\"/foo\"),new File(\"/foo/baz/../bar\"),true))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "isLeadingPathCanonicalVersionWorksAsExpectedOnDos['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertFalse(getFileUtils().isLeadingPath(new File(\"/foo\"),new File(\"/bar\"),true))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "isLeadingPathCanonicalVersionWorksAsExpectedOnUnix['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertFalse(FILE_UTILS.isLeadingPath(new File(\"/foo\"),new File(\"/bar\"),true))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assumeFalse(\"Test doesn't run on DOS\",Os.isFamily(\"dos\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assumeTrue(\"Test only runs on DOS\",Os.isFamily(\"dos\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertFalse(FILE_UTILS.isLeadingPath(new File(\"C:\foo\"),new File(\"C:\foobar\"),true))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(FILE_UTILS.isLeadingPath(new File(\"/foo\"),new File(\"/foo/baz/../bar\"),true))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertFalse(FILE_UTILS.isLeadingPath(new File(\"/foo\"),new File(\"/foobar\"),true))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertFalse(getFileUtils().isLeadingPath(new File(\"/foo\"),new File(\"/foobar\"),true))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertTrue(FILE_UTILS.isLeadingPath(new File(\"C:\foo\"),new File(\"C:\foo\baz\..\bar\"),true))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(getFileUtils().isLeadingPath(new File(\"/foo\"),new File(\"/foo/bar\"),true))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "isLeadingPathCanonicalVersionWorksAsExpectedOnUnix['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(FILE_UTILS.isLeadingPath(new File(\"/foo\"),new File(\"/foo/bar\"),true))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->4 [style = bold, label=""];
6->8 [style = dashed, label="0"];
15->13 [style = bold, label=""];
7->11 [style = bold, label=""];
16->18 [style = bold, label=""];
2->6 [style = bold, label=""];
4->2 [style = bold, label=""];
0->12 [style = dashed, label="0"];
17->19 [style = bold, label=""];
12->7 [style = bold, label=""];
2->10 [style = dashed, label="0"];
19->16 [style = bold, label=""];
6->18 [style = dashed, label="0"];
13->17 [style = bold, label=""];
3->5 [style = bold, label=""];
1->17 [style = dashed, label="0"];
10->8 [style = bold, label=""];
5->0 [style = bold, label=""];
5->12 [style = bold, label=""];
11->10 [style = bold, label=""];
0->1 [style = bold, label=""];
2->16 [style = dashed, label="0"];
0->13 [style = dashed, label="0"];
9->5 [style = bold, label=""];
4->19 [style = dashed, label="0"];
14->15 [style = bold, label=""];
4->11 [style = dashed, label="0"];
1->7 [style = dashed, label="0"];
5->15 [style = dashed, label="0"];
}
