digraph {
19 [style = filled, label = "List<UUID> hostIds = new ArrayList<UUID>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Gossiper.instance.clearUnsafe()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(newToken)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.moving(newToken))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "newToken = positionToken(8)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(keyTokens.get(2))))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(endpointTokens.get(2))))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(keyTokens.get(4),tmd.getToken(hosts.get(2)))@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,6)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<InetAddressAndPort> hosts = new ArrayList<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(tmd.getSizeOfLeavingEndpoints() == 0)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(2))))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TokenMetadata tmd = ss.getTokenMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertTrue(tmd.getSizeOfMovingEndpoints() == 0)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertTrue(tmd.isMoving(hosts.get(2)))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.moving(newToken))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(keyTokens.get(2),tmd.getToken(hosts.get(2)))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(newToken,tmd.getToken(hosts.get(2)))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testStateJumpToNormal['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testStateJumpToNormal['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "ArrayList<Token> keyTokens = new ArrayList<Token>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "tmd.clearUnsafe()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(newToken,tmd.getToken(hosts.get(2)))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Token newToken = positionToken(7)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(4))))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "StorageService ss = StorageService.instance@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "IPartitioner partitioner = RandomPartitioner.instance@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertTrue(tmd.getSizeOfMovingEndpoints() == 0)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(newToken)))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(Collections.singleton(keyTokens.get(2)),Gossiper.computeExpireTime()))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testStateJumpToNormal['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(4))))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ArrayList<Token> endpointTokens = new ArrayList<Token>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(newToken)))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(endpointTokens.get(2),tmd.getToken(hosts.get(2)))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(newToken)))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(endpointTokens.get(2),tmd.getToken(hosts.get(2)))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->36 [style = dashed, label="0"];
28->30 [style = bold, label=""];
39->31 [style = bold, label=""];
33->31 [style = solid, label="newToken"];
24->37 [style = bold, label=""];
16->24 [style = bold, label=""];
25->3 [style = bold, label=""];
26->18 [style = bold, label=""];
7->14 [style = solid, label="hosts"];
29->28 [style = solid, label="newToken"];
15->9 [style = bold, label=""];
1->32 [style = dashed, label="0"];
23->31 [style = dashed, label="0"];
3->20 [style = solid, label="partitioner"];
18->14 [style = solid, label="ss"];
15->40 [style = bold, label=""];
12->15 [style = bold, label=""];
13->25 [style = bold, label=""];
21->16 [style = bold, label=""];
32->39 [style = bold, label=""];
17->14 [style = solid, label="endpointTokens"];
1->8 [style = bold, label=""];
8->23 [style = bold, label=""];
11->14 [style = solid, label="keyTokens"];
19->14 [style = solid, label="hostIds"];
6->13 [style = bold, label=""];
33->32 [style = bold, label=""];
33->32 [style = solid, label="newToken"];
29->34 [style = solid, label="newToken"];
0->1 [style = bold, label=""];
38->24 [style = bold, label=""];
5->4 [style = bold, label=""];
3->20 [style = bold, label=""];
4->2 [style = bold, label=""];
10->18 [style = bold, label=""];
11->7 [style = bold, label=""];
34->38 [style = bold, label=""];
29->37 [style = solid, label="newToken"];
4->30 [style = dashed, label="0"];
14->29 [style = bold, label=""];
29->34 [style = bold, label=""];
33->35 [style = solid, label="newToken"];
23->12 [style = bold, label=""];
37->28 [style = bold, label=""];
15->40 [style = dashed, label="0"];
6->3 [style = bold, label=""];
17->11 [style = bold, label=""];
27->18 [style = bold, label=""];
36->33 [style = bold, label=""];
3->14 [style = solid, label="partitioner"];
13->3 [style = bold, label=""];
20->17 [style = bold, label=""];
33->39 [style = solid, label="newToken"];
21->34 [style = dashed, label="0"];
2->0 [style = bold, label=""];
19->14 [style = bold, label=""];
22->21 [style = bold, label=""];
7->19 [style = bold, label=""];
8->39 [style = dashed, label="0"];
9->35 [style = dashed, label="0"];
40->35 [style = bold, label=""];
31->15 [style = bold, label=""];
24->5 [style = bold, label=""];
29->36 [style = solid, label="newToken"];
24->37 [style = dashed, label="0"];
30->36 [style = bold, label=""];
5->28 [style = dashed, label="0"];
18->6 [style = bold, label=""];
14->22 [style = bold, label=""];
}
