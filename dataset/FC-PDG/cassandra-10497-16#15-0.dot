digraph {
15 [style = filled, label = "SinglePartitionSliceCommand command = singlePartitionSlice(cfs,\"0\",slices(cfs,null,null,false),2)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "cf.addColumn(column(\"col4\",\"val4\",1L))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "cf.addColumn(expiringColumn(\"col2\",\"val2\",1L,60))@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertRowsInResult(cfs,command,1)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "cf.addColumn(column(\"col1\",\"val1\",1L))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "cf.addColumn(column(\"col3\",\"val3\",1L))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\",\"0\",0,0)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "final Keyspace keyspace = Keyspace.open(KEYSPACE1)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ColumnFamily cf = ArrayBackedSortedColumns.factory.create(KEYSPACE1,\"Standard1\")@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "cf.addColumn(column(\"col5\",\"val5\",1L))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final DecoratedKey ROW = Util.dk(\"row5\")@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int round = 0@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Runnable verify = new WrappedRunnable(){public void runMayThrow(){ColumnFamily cfcf = cfStore.getColumnFamily(ROW,cellname(\"col5\"),Composites.EMPTY,false,2,System.currentTimeMillis())assertColumns(cf,\"col5\",\"col7\")cf = cfStore.getColumnFamily(ROW,cellname(\"col4\"),Composites.EMPTY,false,2,System.currentTimeMillis())assertColumns(cf,\"col4\",\"col5\",\"col7\")assertColumns(ColumnFamilyStore.removeDeleted(cf,Integer.MAX_VALUE),\"col5\",\"col7\")cf = cfStore.getColumnFamily(ROW,cellname(\"col5\"),Composites.EMPTY,true,2,System.currentTimeMillis())assertColumns(cf,\"col3\",\"col4\",\"col5\")cf = cfStore.getColumnFamily(ROW,cellname(\"col6\"),Composites.EMPTY,true,2,System.currentTimeMillis())assertColumns(cf,\"col3\",\"col4\",\"col5\")cf = cfStore.getColumnFamily(ROW,Composites.EMPTY,Composites.EMPTY,true,2,System.currentTimeMillis())assertColumns(cf,\"col7\",\"col9\")cf = cfStore.getColumnFamily(ROW,cellname(\"col95\"),Composites.EMPTY,false,2,System.currentTimeMillis())assertColumns(cf)cf = cfStore.getColumnFamily(ROW,cellname(\"col0\"),Composites.EMPTY,true,2,System.currentTimeMillis())assertColumns(cf)}}@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\",\"0\",2,2)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "testGetSliceWithExpiration['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "round == 0@@@15@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?) USING TTL 60\",\"0\",1,1)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Mutation rm = new Mutation(KEYSPACE1,ROW.getKey(),cf)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "cf.addColumn(column(\"col9\",\"val9\",1L))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "command = singlePartitionSlice(cfs,\"0\",slices(cfs,1,null,false),1)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "rm.applyUnsafe()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "round++@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "round < 2@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "reTest(keyspace.getColumnFamilyStore(\"Standard1\"),verify)@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "rm = new Mutation(KEYSPACE1,ROW.getKey())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testGetSliceWithExpiration['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "rm.applyUnsafe()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "final DecoratedKey ROW = Util.dk(\"row1\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "cf.addColumn(column(\"col7\",\"val7\",1L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "rm.delete(\"Standard1\",cellname(\"col4\"),2L)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "String tableName = createTable(\"CREATE TABLE %s (a text, b int, c int, PRIMARY KEY (a, b))\")@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "testGetSliceFromBasic['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertRowsInResult(cfs,command,0,1)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "cfs.forceBlockingFlush()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "reTest(keyspace.getColumnFamilyStore(\"Standard1\"),verify)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "final ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2->35 [style = bold, label=""];
13->25 [style = bold, label=""];
4->3 [style = bold, label=""];
0->9 [style = bold, label=""];
7->1 [style = bold, label=""];
14->19 [style = dotted, label="true"];
13->25 [style = solid, label="tableName"];
21->26 [style = solid, label="round"];
29->3 [style = bold, label=""];
35->33 [style = bold, label=""];
23->26 [style = bold, label=""];
31->29 [style = bold, label=""];
14->19 [style = bold, label=""];
34->31 [style = bold, label=""];
1->10 [style = solid, label="cf"];
6->0 [style = bold, label=""];
12->16 [style = bold, label=""];
3->5 [style = solid, label="verify"];
25->24 [style = solid, label="cfs"];
26->23 [style = dotted, label="true"];
3->27 [style = solid, label="verify"];
26->22 [style = dotted, label="true"];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
17->22 [style = bold, label=""];
32->30 [style = bold, label=""];
36->1 [style = bold, label=""];
11->2 [style = bold, label=""];
7->3 [style = solid, label="ROW"];
21->23 [style = solid, label="round"];
1->11 [style = bold, label=""];
3->27 [style = bold, label=""];
1->3 [style = solid, label="cf"];
36->3 [style = solid, label="ROW"];
20->21 [style = bold, label=""];
28->0 [style = bold, label=""];
21->26 [style = bold, label=""];
25->17 [style = solid, label="cfs"];
3->5 [style = bold, label=""];
25->15 [style = solid, label="cfs"];
14->23 [style = bold, label=""];
8->2 [style = bold, label=""];
21->14 [style = solid, label="round"];
25->12 [style = bold, label=""];
17->22 [style = solid, label="command"];
19->23 [style = bold, label=""];
15->24 [style = bold, label=""];
26->24 [style = dotted, label="true"];
26->17 [style = dotted, label="true"];
26->14 [style = dotted, label="true"];
24->17 [style = bold, label=""];
26->15 [style = bold, label=""];
9->25 [style = dashed, label="0"];
18->13 [style = bold, label=""];
10->4 [style = bold, label=""];
30->10 [style = bold, label=""];
23->26 [style = solid, label="round"];
26->15 [style = dotted, label="true"];
11->8 [style = bold, label=""];
33->32 [style = bold, label=""];
23->14 [style = solid, label="round"];
25->22 [style = solid, label="cfs"];
22->14 [style = bold, label=""];
16->20 [style = bold, label=""];
7->36 [style = dashed, label="0"];
4->34 [style = bold, label=""];
15->24 [style = solid, label="command"];
9->36 [style = bold, label=""];
}
