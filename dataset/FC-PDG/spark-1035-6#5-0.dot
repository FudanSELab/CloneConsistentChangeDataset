digraph {
4 [style = filled, label = "i++@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "byte(( strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Set<Long> hashcodes = new HashSet<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "System.arraycopy(strBytes,0,paddedBytes,0,strBytes.length)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "randomizedStressTestPaddedStrings['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "byte(( paddedBytes = new byte((((@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "i < size@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(paddedBytes)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int byteArrSize = 8@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@16@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "randomizedStressTestPaddedStrings['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Set<Integer> hashcodes = new HashSet<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWordsBlock(mb),hasher.hashUnsafeWordsBlock(mb))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "int size = 64000@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWordsBlock(mb))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "randomizedStressTestPaddedStrings['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8->0 [style = solid, label="mb"];
5->3 [style = bold, label=""];
3->11 [style = dotted, label="true"];
6->21 [style = dashed, label="0"];
4->3 [style = bold, label=""];
9->13 [style = solid, label="size"];
11->19 [style = solid, label="byteArrSize"];
3->7 [style = dotted, label="true"];
7->1 [style = bold, label=""];
1->15 [style = solid, label="paddedBytes"];
5->3 [style = solid, label="i"];
5->4 [style = solid, label="i"];
22->9 [style = bold, label=""];
12->15 [style = bold, label=""];
3->11 [style = bold, label=""];
3->4 [style = dotted, label="true"];
9->20 [style = bold, label=""];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
4->3 [style = solid, label="i"];
6->17 [style = dashed, label="0"];
2->9 [style = bold, label=""];
9->10 [style = bold, label=""];
3->16 [style = bold, label=""];
1->8 [style = solid, label="paddedBytes"];
3->6 [style = dotted, label="true"];
20->5 [style = bold, label=""];
3->18 [style = bold, label=""];
1->17 [style = solid, label="paddedBytes"];
15->17 [style = bold, label=""];
3->19 [style = dotted, label="true"];
10->5 [style = bold, label=""];
1->19 [style = solid, label="paddedBytes"];
1->21 [style = solid, label="paddedBytes"];
0->4 [style = bold, label=""];
8->6 [style = solid, label="mb"];
12->8 [style = bold, label=""];
9->18 [style = solid, label="size"];
3->12 [style = dotted, label="true"];
3->21 [style = dotted, label="true"];
3->15 [style = dotted, label="true"];
3->0 [style = dotted, label="true"];
1->12 [style = bold, label=""];
3->13 [style = bold, label=""];
10->20 [style = dashed, label="0"];
14->9 [style = bold, label=""];
9->3 [style = solid, label="size"];
3->17 [style = dotted, label="true"];
11->17 [style = solid, label="byteArrSize"];
1->12 [style = solid, label="paddedBytes"];
13->18 [style = dashed, label="0"];
12->19 [style = bold, label=""];
3->8 [style = dotted, label="true"];
11->15 [style = solid, label="byteArrSize"];
3->1 [style = dotted, label="true"];
7->12 [style = solid, label="strBytes"];
9->16 [style = solid, label="size"];
17->4 [style = bold, label=""];
11->7 [style = bold, label=""];
11->21 [style = solid, label="byteArrSize"];
21->4 [style = bold, label=""];
19->21 [style = bold, label=""];
}
