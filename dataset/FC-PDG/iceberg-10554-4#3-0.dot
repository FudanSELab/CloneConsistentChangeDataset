digraph {
15 [style = filled, label = "Types.MapType map@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Supplier<Type> valueResult@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Supplier<Type> valueResult@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "MapType requestedMap = (MapType)current@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Type valueType = valueResult.get()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Types.MapType map@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "{this.current = m}@@@20@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "this.current = m.valueType()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "map.isValueOptional()@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "MapType m = (MapType)current@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return Types.MapType.ofOptional(map.keyId(),map.valueId(),map.keyType(),valueType)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return map@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Preconditions.checkArgument(current instanceof MapType,\"Not a map: %s\",current)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Supplier<Type> valueResult@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "map.valueType() == valueType@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Preconditions.checkArgument(.isInstance(m.keyType()),\"Invalid map key type (not string): %s\",m.keyType())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Preconditions.checkArgument(m.valueContainsNull() || !map.isValueOptional(),\"Cannot project a map of optional values as required values: %s\",map)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Supplier<Type> keyResult@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "this.current = requestedMap.valueType()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "map['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return Types.MapType.ofRequired(map.keyId(),map.valueId(),map.keyType(),valueType)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Preconditions.checkArgument(requestedMap.valueContainsNull() || !map.isValueOptional(),\"Cannot project a map of optional values as required values: %s\",map)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Types.MapType map@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "map['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "map['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15->20 [style = solid, label="map"];
5->14 [style = dotted, label="true"];
5->14 [style = bold, label=""];
8->7 [style = solid, label="valueType"];
24->13 [style = bold, label=""];
0->1 [style = dotted, label="true"];
18->15 [style = dotted, label="true"];
16->11 [style = solid, label="requestedMap"];
8->5 [style = bold, label=""];
2->14 [style = solid, label="map"];
3->16 [style = dashed, label="0"];
13->17 [style = dashed, label="0"];
0->7 [style = bold, label=""];
3->11 [style = solid, label="m"];
23->10 [style = dotted, label="true"];
9->13 [style = bold, label=""];
14->0 [style = bold, label=""];
8->1 [style = solid, label="valueType"];
7->11 [style = bold, label=""];
0->1 [style = bold, label=""];
8->5 [style = solid, label="valueType"];
1->11 [style = bold, label=""];
12->16 [style = bold, label=""];
10->9 [style = solid, label="map"];
0->7 [style = dotted, label="false"];
6->4 [style = dotted, label="true"];
5->0 [style = bold, label=""];
9->24 [style = bold, label=""];
23->22 [style = dotted, label="true"];
6->10 [style = dotted, label="true"];
23->21 [style = dotted, label="true"];
23->12 [style = bold, label=""];
12->3 [style = bold, label=""];
10->14 [style = solid, label="map"];
3->9 [style = bold, label=""];
18->19 [style = dotted, label="true"];
9->20 [style = dashed, label="0"];
6->12 [style = bold, label=""];
17->8 [style = bold, label=""];
16->20 [style = bold, label=""];
20->17 [style = bold, label=""];
15->14 [style = solid, label="map"];
18->10 [style = dotted, label="true"];
2->9 [style = solid, label="map"];
13->8 [style = bold, label=""];
18->12 [style = bold, label=""];
6->2 [style = dotted, label="true"];
}
