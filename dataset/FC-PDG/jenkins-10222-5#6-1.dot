digraph {
23 [style = filled, label = "dummyRangeRangeSingleShouldFailIfBuildRangeContainsEmptyNumber['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertThat(result,failedWith(3))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1-', expected string with a range M-N\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"-1\" is not a valid option\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse ',2,3', expected correct notation M,N or M-N\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,,3\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,,3', expected correct notation M,N or M-N\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,2,\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,,3\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertThat(result,failedWith(3))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"-\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"-\" is not a valid option\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\",2,3\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\",2,3\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,', expected correct notation M,N or M-N\"))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(result,failedWith(2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"-1\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(result,failedWith(3))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(result,failedWith(2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1-\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24->8 [style = solid, label="result"];
11->10 [style = solid, label="result"];
5->3 [style = bold, label=""];
17->5 [style = solid, label="result"];
18->24 [style = bold, label=""];
21->25 [style = solid, label="result"];
14->4 [style = solid, label="result"];
16->10 [style = bold, label=""];
11->16 [style = dashed, label="0"];
12->6 [style = solid, label="result"];
12->9 [style = solid, label="result"];
21->9 [style = solid, label="result"];
3->18 [style = dashed, label="0"];
3->14 [style = bold, label=""];
25->9 [style = bold, label=""];
22->21 [style = bold, label=""];
16->10 [style = solid, label="result"];
5->18 [style = bold, label=""];
11->17 [style = dashed, label="0"];
21->25 [style = bold, label=""];
11->5 [style = solid, label="result"];
9->7 [style = bold, label=""];
12->6 [style = bold, label=""];
15->16 [style = bold, label=""];
1->13 [style = bold, label=""];
12->21 [style = dashed, label="0"];
3->0 [style = bold, label=""];
1->22 [style = dashed, label="0"];
20->5 [style = bold, label=""];
0->14 [style = dashed, label="0"];
13->9 [style = solid, label="result"];
10->5 [style = bold, label=""];
0->8 [style = solid, label="result"];
6->25 [style = dashed, label="0"];
17->20 [style = solid, label="result"];
7->19 [style = dashed, label="0"];
14->8 [style = solid, label="result"];
11->10 [style = bold, label=""];
13->6 [style = solid, label="result"];
0->8 [style = bold, label=""];
1->12 [style = bold, label=""];
16->5 [style = solid, label="result"];
9->19 [style = bold, label=""];
0->24 [style = dashed, label="0"];
23->17 [style = bold, label=""];
24->4 [style = solid, label="result"];
0->4 [style = solid, label="result"];
4->1 [style = bold, label=""];
14->8 [style = bold, label=""];
12->13 [style = dashed, label="0"];
10->20 [style = dashed, label="0"];
8->4 [style = bold, label=""];
13->6 [style = bold, label=""];
6->9 [style = bold, label=""];
24->8 [style = bold, label=""];
4->22 [style = bold, label=""];
2->11 [style = bold, label=""];
17->20 [style = bold, label=""];
}
