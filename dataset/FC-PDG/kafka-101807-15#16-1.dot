digraph {
2 [style = filled, label = "testTransform['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testTransformWithKey['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testTransform['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final KStream<Integer,Integer> stream@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "stream = builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.Integer()))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "driver.pipeInput(recordFactory.create(topicName,expectedKey,expectedKey * 10,expectedKey / 2L))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "stream.transformValues(valueTransformerSupplier).process(supplier)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "driver.pipeInput(recordFactory.create(topicName,expectedKey,expectedKey * 10,0L))@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final ValueTransformerWithKeySupplier<Integer,Number,Integer> valueTransformerSupplier = null@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final ValueTransformerSupplier<Number,Integer> valueTransformerSupplier = null@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final int(( expectedKeys = {1,10,100,1000}@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertArrayEquals(expected,supplier.theCapturedProcessor().processed.toArray())@@@30@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final String(( expected = {\"1:11 (ts: 0)\",\"10:121 (ts: 0)\",\"100:1221 (ts: 0)\",\"1000:12221 (ts: 0)\"}@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
9->3 [style = bold, label=""];
8->1 [style = bold, label=""];
10->0 [style = bold, label=""];
13->0 [style = bold, label=""];
0->9 [style = bold, label=""];
2->0 [style = bold, label=""];
12->3 [style = bold, label=""];
4->6 [style = solid, label="expected"];
9->12 [style = dashed, label="0"];
5->11 [style = dashed, label="0"];
3->7 [style = bold, label=""];
7->8 [style = bold, label=""];
4->6 [style = bold, label=""];
7->8 [style = solid, label="stream"];
5->4 [style = bold, label=""];
0->12 [style = bold, label=""];
1->11 [style = bold, label=""];
11->4 [style = bold, label=""];
}
