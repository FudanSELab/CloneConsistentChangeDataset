digraph {
9 [style = filled, label = "int bucketSize@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "_zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddr))@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "_versionTTLms = versionTTLms@@@32@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "_zkBaseDataAccessor = new ZkBaseDataAccessor<>(_zkClient)@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "record.setListField(NAME_KEY,LIST_FIELD)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Boolean.getBoolean(SystemPropertyKeys.MULTI_ZK_ENABLED)@@@3@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "_zkBaseDataAccessor = new ZkBaseDataAccessor<>(_zkClient)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "LOG.warn(\"ZkBucketDataAccessor: either multi-zk enabled or zkAddr is null - \" + \"starting ZkBucketDataAccessor in multi-zk mode!\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "_zkClient.setZkSerializer(new ZkSerializer(){@Override public byte(( serialize(Object data){if (data instanceof byte(() {return (byte(()data}throw new HelixException(\"ZkBucketDataAccesor only supports a byte array as an argument!\")}@Override public Object deserialize(byte(( data){return data}})@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "_zkBaseDataAccessor = new ZkBaseDataAccessor<>(zkClient)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "beforeClass['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "_zkSerializer = new ZNRecordJacksonSerializer()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "_zkClient.setZkSerializer(new ZkSerializer(){@Override public byte(( serialize(Object data){if (data instanceof byte(() {return (byte(()data}throw new HelixException(\"ZkBucketDataAccesor only supports a byte array as an argument!\")}@Override public Object deserialize(byte(( data){return data}})@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "IllegalArgumentException|IOException|InvalidRoutingDataException e@@@9@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Boolean.getBoolean(SystemPropertyKeys.MULTI_ZK_ENABLED) || zkAddr == null@@@3@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "RealmAwareZkClient.RealmAwareZkClientConfig clientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String zkAddr@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "throw new HelixException(\"Not able to connect on realm-aware mode\",e)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "ZkBucketDataAccessor['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig = new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "IllegalArgumentException|IOException|InvalidRoutingDataException e@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "_zkClient = new FederatedZkClient(connectionConfig,clientConfig)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig = new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "_zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddr))@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "long versionTTLms@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "_bucketDataAccessor = new ZkBucketDataAccessor(ZK_ADDR,50 * 1024,VERSION_TTL_MS)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "record.setSimpleField(NAME_KEY,NAME_KEY)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "record.setMapField(NAME_KEY,MAP_FIELD)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "int bucketSize@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "ZkBucketDataAccessor['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "zkClient.setZkSerializer(new ZkSerializer(){@Override public byte(( serialize(Object data){if (data instanceof byte(() {return (byte(()data}throw new HelixException(\"ZkBucketDataAccesor only supports a byte array as an argument!\")}@Override public Object deserialize(byte(( data){return data}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String zkAddr@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "HelixZkClient zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "_bucketSize = bucketSize@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->5 [style = dotted, label="true"];
23->16 [style = dotted, label="true"];
0->3 [style = bold, label=""];
23->25 [style = bold, label=""];
25->18 [style = dotted, label="false"];
18->24 [style = bold, label=""];
0->3 [style = solid, label="clientConfig"];
21->0 [style = bold, label=""];
2->6 [style = bold, label=""];
11->10 [style = dotted, label="true"];
28->31 [style = bold, label=""];
12->25 [style = solid, label="zkAddr"];
11->2 [style = dotted, label="false"];
25->18 [style = bold, label=""];
10->3 [style = solid, label="connectionConfig"];
12->18 [style = solid, label="zkAddr"];
9->1 [style = solid, label="bucketSize"];
3->6 [style = bold, label=""];
25->0 [style = dotted, label="true"];
14->17 [style = bold, label=""];
30->32 [style = bold, label=""];
32->27 [style = bold, label=""];
30->27 [style = solid, label="zkClient"];
22->4 [style = solid, label="_zkClient"];
2->8 [style = solid, label="_zkClient"];
3->22 [style = bold, label=""];
1->13 [style = bold, label=""];
11->2 [style = bold, label=""];
15->9 [style = dotted, label="true"];
29->26 [style = bold, label=""];
7->14 [style = bold, label=""];
33->29 [style = bold, label=""];
14->17 [style = dotted, label="true"];
20->19 [style = solid, label="versionTTLms"];
16->13 [style = solid, label="bucketSize"];
23->20 [style = dotted, label="true"];
17->24 [style = bold, label=""];
24->4 [style = bold, label=""];
13->19 [style = bold, label=""];
0->22 [style = solid, label="connectionConfig"];
15->11 [style = bold, label=""];
11->10 [style = bold, label=""];
12->13 [style = solid, label="versionTTLms"];
11->0 [style = dotted, label="true"];
10->0 [style = bold, label=""];
6->8 [style = bold, label=""];
31->30 [style = bold, label=""];
11->25 [style = dashed, label="0"];
25->22 [style = dotted, label="true"];
15->12 [style = dotted, label="true"];
25->3 [style = dotted, label="true"];
8->27 [style = dashed, label="0"];
3->8 [style = solid, label="_zkClient"];
4->1 [style = bold, label=""];
3->22 [style = solid, label="clientConfig"];
27->33 [style = bold, label=""];
8->4 [style = bold, label=""];
22->24 [style = bold, label=""];
18->4 [style = solid, label="_zkClient"];
23->12 [style = dotted, label="true"];
11->3 [style = dotted, label="true"];
14->6 [style = bold, label=""];
25->21 [style = bold, label=""];
25->21 [style = dotted, label="true"];
5->2 [style = solid, label="zkAddr"];
7->14 [style = dotted, label="true"];
}
