digraph {
15 [style = filled, label = "when(selector.getIoBuffer()).thenAnswer(null)@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(selector.isOnCurrentThread()).thenReturn(true)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "selector = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "init['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "context.setSelectionKey(mock())@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "init['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "when(selector.getTaskScheduler()).thenReturn(nioTimer)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "init['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "context = new BytesChannelContext(channel,selector,mock(),handler,channelBuffer)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "outboundBuffer = new SSLOutboundBuffer(null)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "exceptionHandler = mock()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "readConsumer = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "when(channel.getRawChannel()).thenReturn(rawChannel)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "messageLength = randomInt(96) + 20@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "TestReadWriteHandler handler = new TestReadWriteHandler(readConsumer)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "channel = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(selector.isOnCurrentThread()).thenReturn(true)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ByteBuffer buffer = ByteBuffer.allocate(1 << 14)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "nioTimer = mock()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "listener = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestReadWriteHandler readWriteHandler = new TestReadWriteHandler(readConsumer)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "channelBuffer = InboundChannelBuffer.allocatingInstance()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "context = new SSLChannelContext(channel,selector,exceptionHandler,sslDriver,readWriteHandler,channelBuffer)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ByteBuffer buffer = ByteBuffer.allocate(1 << 14)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "sslDriver = mock()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(sslDriver.getOutboundBuffer()).thenReturn(outboundBuffer)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "when(selector.getIoBuffer()).thenAnswer(null)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "rawChannel = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->6 [style = bold, label=""];
21->3 [style = bold, label=""];
11->24 [style = solid, label="readConsumer"];
6->7 [style = solid, label="exceptionHandler"];
9->4 [style = bold, label=""];
12->7 [style = solid, label="channelBuffer"];
22->0 [style = bold, label=""];
12->14 [style = bold, label=""];
14->4 [style = solid, label="outboundBuffer"];
13->7 [style = solid, label="selector"];
11->1 [style = solid, label="readConsumer"];
18->13 [style = bold, label=""];
16->8 [style = bold, label=""];
12->22 [style = solid, label="channelBuffer"];
1->18 [style = bold, label=""];
11->1 [style = bold, label=""];
14->0 [style = bold, label=""];
11->18 [style = bold, label=""];
17->12 [style = bold, label=""];
23->11 [style = bold, label=""];
6->22 [style = dashed, label="0"];
7->21 [style = bold, label=""];
17->25 [style = solid, label="rawChannel"];
12->24 [style = bold, label=""];
2->7 [style = solid, label="channel"];
2->17 [style = bold, label=""];
7->3 [style = bold, label=""];
0->27 [style = bold, label=""];
5->7 [style = solid, label="sslDriver"];
8->2 [style = bold, label=""];
1->7 [style = solid, label="readWriteHandler"];
19->11 [style = bold, label=""];
13->16 [style = bold, label=""];
2->22 [style = solid, label="channel"];
3->9 [style = bold, label=""];
27->26 [style = bold, label=""];
4->10 [style = bold, label=""];
24->22 [style = solid, label="handler"];
5->12 [style = bold, label=""];
10->15 [style = bold, label=""];
24->25 [style = bold, label=""];
17->0 [style = solid, label="rawChannel"];
13->8 [style = bold, label=""];
6->7 [style = bold, label=""];
13->22 [style = solid, label="selector"];
25->22 [style = bold, label=""];
16->9 [style = solid, label="nioTimer"];
17->5 [style = bold, label=""];
20->11 [style = bold, label=""];
}
