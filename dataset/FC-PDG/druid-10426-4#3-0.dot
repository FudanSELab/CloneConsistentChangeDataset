digraph {
3 [style = filled, label = "DateTime now = DateTimes.of(\"2012-12-31T01:00:00\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(includeFutureRule.appliesTo(BUILDER.interval(new Interval(now.plusDays(1),now.plusDays(2))).build(),now))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testIncludeFuture['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PeriodLoadRule notIncludeFutureRule = new PeriodLoadRule(new Period(\"P2D\"),false,ImmutableMap.of(\"\",0))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusWeeks(1),now)).build(),now))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testAppliesToPeriod['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "PeriodLoadRule includeFutureRule = new PeriodLoadRule(new Period(\"P2D\"),true,ImmutableMap.of(\"\",0))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(includeFutureRule.appliesTo(builder.interval(new Interval(now.plusDays(1),now.plusDays(2))).build(),now))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertFalse(notIncludeFutureRule.appliesTo(BUILDER.interval(new Interval(now.plusDays(1),now.plusDays(2))).build(),now))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "PeriodLoadRule rule = new PeriodLoadRule(new Period(\"P1M\"),false,ImmutableMap.of(\"\",0))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(now.plusDays(1),now.plusDays(2))).build(),now))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testIncludeFuture['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertFalse(notIncludeFutureRule.appliesTo(builder.interval(new Interval(now.plusDays(1),now.plusDays(2))).build(),now))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3->7 [style = solid, label="now"];
3->9 [style = solid, label="now"];
4->6 [style = bold, label=""];
8->3 [style = bold, label=""];
3->10 [style = solid, label="now"];
1->3 [style = bold, label=""];
4->2 [style = bold, label=""];
9->10 [style = bold, label=""];
11->9 [style = bold, label=""];
13->11 [style = bold, label=""];
3->11 [style = solid, label="now"];
3->0 [style = bold, label=""];
3->6 [style = solid, label="now"];
3->5 [style = solid, label="now"];
5->10 [style = dashed, label="0"];
0->4 [style = bold, label=""];
2->9 [style = dashed, label="0"];
0->13 [style = dashed, label="0"];
2->6 [style = dashed, label="0"];
3->13 [style = bold, label=""];
12->3 [style = bold, label=""];
5->7 [style = dashed, label="0"];
6->7 [style = bold, label=""];
2->5 [style = bold, label=""];
3->2 [style = solid, label="now"];
}
