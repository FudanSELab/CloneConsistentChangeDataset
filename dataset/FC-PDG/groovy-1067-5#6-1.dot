digraph {
6 [style = filled, label = "List<String> srcList = new ArrayList<String>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String base = \"org/codehaus/groovy/tools/groovydoc/testfiles/Builder\"@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "xmlTool.add(srcList)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "xmlTool.renderToOutput(output,MOCK_DIR)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String builderDoc = output.getText(MOCK_DIR + \"/\" + base + \".html\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "String base = \"groovy/xml/DOMBuilder\"@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "MockOutputTool output = new MockOutputTool()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testExtendsClauseWithSuperClassInTree['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(domBuilderDoc.contains(\"<extends>BuilderSupport</extends>\"))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testPackageName['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertTrue(domBuilderDoc.contains(\"<containingPackage name=\"groovy/xml\">groovy.xml</containingPackage>\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "srcList.add(\"groovy/util/BuilderSupport.java\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "srcList.add(base + \".java\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testPackageName['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNotNull(\"No GroovyDoc found for \" + base,domBuilderDoc)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String domBuilderDoc = output.getText(MOCK_DIR + \"/\" + base + \".html\")@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertNotNull(\"No GroovyDoc found for \" + base,builderDoc)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertTrue(builderDoc.contains(\"<containingPackage name=\"org/codehaus/groovy/tools/groovydoc/testfiles\">org.codehaus.groovy.tools.groovydoc.testfiles</containingPackage>\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->8 [style = solid, label="srcList"];
4->3 [style = bold, label=""];
4->3 [style = solid, label="domBuilderDoc"];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
5->0 [style = solid, label="output"];
2->6 [style = bold, label=""];
7->14 [style = dashed, label="0"];
1->15 [style = bold, label=""];
16->6 [style = bold, label=""];
11->6 [style = bold, label=""];
7->1 [style = solid, label="base"];
7->4 [style = solid, label="base"];
14->1 [style = solid, label="base"];
14->1 [style = bold, label=""];
10->12 [style = solid, label="builderDoc"];
14->10 [style = solid, label="base"];
6->14 [style = bold, label=""];
3->9 [style = bold, label=""];
12->13 [style = bold, label=""];
0->10 [style = bold, label=""];
14->12 [style = solid, label="base"];
3->12 [style = dashed, label="0"];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
0->4 [style = bold, label=""];
10->12 [style = bold, label=""];
9->17 [style = dashed, label="0"];
9->13 [style = dashed, label="0"];
3->17 [style = bold, label=""];
6->7 [style = bold, label=""];
4->10 [style = dashed, label="0"];
15->8 [style = bold, label=""];
7->3 [style = solid, label="base"];
}
