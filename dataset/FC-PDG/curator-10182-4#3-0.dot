digraph {
11 [style = filled, label = "Assert.assertTrue(consumingLatch.await(10,TimeUnit.SECONDS))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(queue.remove(\"id\"),0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testRequeuingWithLock['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "testDeletingWithLock['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(queue.remove(\"id\"),1)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "queue.put(new TestQueueItem(\"test\"),\"id\")@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testRequeuingWithLock['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final CountDownLatch consumingLatch = new CountDownLatch(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DistributedIdQueue<TestQueueItem> queue = null@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "client.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>(){@Override public void consumeMessage(TestQueueItem message){consumingLatch.countDown()waitLatch.await()}@Override public void stateChanged(CuratorFramework client,ConnectionState newState){}}@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Thread.sleep(1000)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "queue.start()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final CountDownLatch waitLatch = new CountDownLatch(1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "queue = QueueBuilder.builder(client,consumer,serializer,QUEUE_PATH).lockPath(\"/locks\").buildIdQueue()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "waitLatch.countDown()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "{CloseableUtils.closeQuietly(queue)CloseableUtils.closeQuietly(client)}@@@25@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(queue.debugIsQueued(\"id\"))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
5->13 [style = dashed, label="0"];
13->10 [style = bold, label=""];
5->10 [style = bold, label=""];
11->16 [style = bold, label=""];
15->2 [style = bold, label=""];
16->18 [style = bold, label=""];
9->0 [style = bold, label=""];
11->1 [style = bold, label=""];
8->10 [style = solid, label="client"];
0->2 [style = bold, label=""];
3->11 [style = bold, label=""];
1->13 [style = bold, label=""];
0->15 [style = bold, label=""];
12->7 [style = bold, label=""];
7->3 [style = bold, label=""];
2->12 [style = bold, label=""];
6->4 [style = bold, label=""];
18->10 [style = bold, label=""];
12->10 [style = solid, label="queue"];
8->9 [style = bold, label=""];
4->8 [style = bold, label=""];
17->4 [style = bold, label=""];
14->4 [style = bold, label=""];
}
