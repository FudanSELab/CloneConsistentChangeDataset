digraph {
11 [style = filled, label = "assertEquals(actual_bar_foo,acl)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "String path = \"/bar/foo\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "CuratorFramework client = createClient(new DefaultACLProvider())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(actual_bar,ZooDefs.Ids.OPEN_ACL_UNSAFE)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "List<ACL> acl = Collections.singletonList(new ACL(ZooDefs.Perms.CREATE | ZooDefs.Perms.READ,ANYONE_ID_UNSAFE))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(actual_bar,ZooDefs.Ids.OPEN_ACL_UNSAFE)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testCreateWithParentsWithAclApplyToParents['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testCreateWithParentsWithAcl['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(actual_bar_foo,acl)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testCreateWithParentsWithAcl['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "client.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<ACL> actual_bar_foo = client.getACL().forPath(path)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(actual_bar,acl)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "client.create().creatingParentsIfNeeded().withACL(acl).forPath(path)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "client.create().creatingParentsIfNeeded().withACL(acl,true).forPath(path)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<ACL> actual_bar = client.getACL().forPath(\"/bar\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
3->13 [style = solid, label="actual_bar"];
8->10 [style = bold, label=""];
15->10 [style = bold, label=""];
0->7 [style = solid, label="client"];
2->15 [style = solid, label="path"];
2->10 [style = solid, label="path"];
8->15 [style = dashed, label="0"];
16->7 [style = bold, label=""];
9->5 [style = solid, label="acl"];
3->6 [style = bold, label=""];
4->2 [style = bold, label=""];
2->9 [style = bold, label=""];
1->0 [style = bold, label=""];
3->16 [style = bold, label=""];
9->8 [style = bold, label=""];
2->8 [style = solid, label="path"];
12->0 [style = bold, label=""];
10->11 [style = solid, label="actual_bar_foo"];
9->16 [style = solid, label="acl"];
9->11 [style = solid, label="acl"];
6->16 [style = dashed, label="0"];
10->5 [style = bold, label=""];
6->13 [style = dashed, label="0"];
14->0 [style = bold, label=""];
5->11 [style = dashed, label="0"];
11->3 [style = bold, label=""];
0->4 [style = bold, label=""];
3->6 [style = solid, label="actual_bar"];
13->7 [style = bold, label=""];
9->15 [style = bold, label=""];
10->5 [style = solid, label="actual_bar_foo"];
3->16 [style = solid, label="actual_bar"];
3->13 [style = bold, label=""];
6->7 [style = bold, label=""];
10->11 [style = bold, label=""];
}
