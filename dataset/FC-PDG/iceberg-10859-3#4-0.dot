digraph {
0 [style = filled, label = "SparkUtil.validatePartitionTransforms(table.spec())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "SparkWrite write = new SparkWrite(table,io,encryptionManager,writeInfo,appId,wapId,writeSchema,dsSchema)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "overwriteDynamic@@@14@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "return new SparkStreamingWrite(table,io,encryptionManager,options,overwriteByFilter,writeQueryId,appId,wapId,writeSchema,dsSchema)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String wapId = spark.conf().get(\"spark.wap.id\",null)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return write.asOverwriteByFilter(overwriteExpr)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "return write.asDynamicOverwrite()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "buildForStreaming['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Broadcast<FileIO> io = lazySparkContext().broadcast(SparkUtil.serializableFileIO(table))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Schema writeSchema = SparkSchemaUtil.convert(table.schema(),dsSchema)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TypeUtil.validateWriteSchema(table.schema(),writeSchema,checkNullability(spark,options),checkOrdering(spark,options))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "overwriteByFilter@@@11@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "return write.asBatchAppend()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Preconditions.checkState(!overwriteDynamic,\"Unsupported streaming operation: dynamic partition overwrite\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Preconditions.checkState(!overwriteByFilter || overwriteExpr == Expressions.alwaysTrue(),\"Unsupported streaming operation: overwrite by filter: %s\",overwriteExpr)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return new SparkBatchWrite(table,io,encryptionManager,options,overwriteDynamic,overwriteByFilter,overwriteExpr,appId,wapId,writeSchema,dsSchema)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "buildForBatch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "buildForBatch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Broadcast<EncryptionManager> encryptionManager = lazySparkContext().broadcast(table.encryption())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String appId = spark.sparkContext().applicationId()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
4->3 [style = bold, label=""];
15->13 [style = bold, label=""];
2->19 [style = bold, label=""];
1->8 [style = bold, label=""];
16->8 [style = bold, label=""];
10->14 [style = bold, label=""];
0->6 [style = bold, label=""];
0->17 [style = bold, label=""];
6->19 [style = solid, label="appId"];
4->19 [style = solid, label="wapId"];
2->15 [style = solid, label="encryptionManager"];
10->14 [style = dotted, label="false"];
3->15 [style = solid, label="io"];
3->5 [style = solid, label="io"];
7->0 [style = bold, label=""];
2->19 [style = solid, label="encryptionManager"];
10->9 [style = dotted, label="true"];
13->11 [style = bold, label=""];
8->7 [style = bold, label=""];
8->15 [style = solid, label="writeSchema"];
6->4 [style = bold, label=""];
3->19 [style = solid, label="io"];
4->5 [style = solid, label="wapId"];
6->15 [style = solid, label="appId"];
3->2 [style = bold, label=""];
4->15 [style = solid, label="wapId"];
18->6 [style = bold, label=""];
12->8 [style = bold, label=""];
17->18 [style = bold, label=""];
2->15 [style = bold, label=""];
8->5 [style = solid, label="writeSchema"];
13->11 [style = dotted, label="true"];
8->7 [style = solid, label="writeSchema"];
10->9 [style = bold, label=""];
13->10 [style = dotted, label="false"];
8->19 [style = solid, label="writeSchema"];
2->5 [style = solid, label="encryptionManager"];
5->15 [style = dashed, label="0"];
5->19 [style = dashed, label="0"];
6->5 [style = solid, label="appId"];
2->5 [style = bold, label=""];
}
