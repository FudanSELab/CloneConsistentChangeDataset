digraph {
0 [style = filled, label = "Proto3Message expected = new Proto3MessageFactory(5,10,2,2).newMessage()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "proto2Roundtrip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Proto3Message actual = Proto3Message.parseFrom(actualBytes)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Proto2Message actual = Proto2Message.parseFrom(actualBytes)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Proto3Message result = fromByteArray(expectedBytes,)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(actual).isEqualTo(expected)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "proto3Roundtrip['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "proto3Roundtrip['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Proto2Message result = fromByteArray(expectedBytes,)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Proto2Message expected = new Proto2MessageFactory(5,10,2,2).newMessage()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "byte(( expectedBytes = expected.toByteArray()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(expected,result)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(result).isEqualTo(expected)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "byte(( actualBytes = toByteArray(result,expectedBytes.length)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(expected,actual)@@@9@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2->5 [style = solid, label="result"];
0->8 [style = solid, label="expected"];
9->0 [style = bold, label=""];
12->5 [style = bold, label=""];
13->5 [style = solid, label="expected"];
0->10 [style = solid, label="expected"];
12->7 [style = solid, label="result"];
4->12 [style = solid, label="expectedBytes"];
7->14 [style = solid, label="actualBytes"];
12->5 [style = solid, label="result"];
4->2 [style = bold, label=""];
6->14 [style = dashed, label="0"];
2->10 [style = bold, label=""];
10->7 [style = bold, label=""];
2->7 [style = solid, label="result"];
3->0 [style = bold, label=""];
14->1 [style = bold, label=""];
7->14 [style = bold, label=""];
6->1 [style = bold, label=""];
13->1 [style = solid, label="expected"];
2->12 [style = dashed, label="0"];
5->10 [style = dashed, label="0"];
0->4 [style = bold, label=""];
11->13 [style = bold, label=""];
6->8 [style = bold, label=""];
7->6 [style = bold, label=""];
0->13 [style = dashed, label="0"];
6->1 [style = solid, label="actual"];
0->1 [style = solid, label="expected"];
4->12 [style = bold, label=""];
7->6 [style = solid, label="actualBytes"];
5->7 [style = bold, label=""];
1->8 [style = dashed, label="0"];
4->2 [style = solid, label="expectedBytes"];
0->5 [style = solid, label="expected"];
14->1 [style = solid, label="actual"];
2->5 [style = bold, label=""];
13->4 [style = bold, label=""];
}
