digraph {
6 [style = filled, label = "supervisorRecordSupplier.assign(anyObject())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
71 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
86 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.READING))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
87 [style = filled, label = "replay(taskStorage)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "EasyMock.replay(taskStorage)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(\"id1\")).andReturn(Futures.immediateFuture(now)).anyTimes()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(2)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(runningTaskId)).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.READING))@@@51@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
79 [style = filled, label = "expect(taskStorage.getTask(iHaveFailed.getId())).andReturn(Optional.of((Task)iHaveFailed)).anyTimes()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "EasyMock.expect(taskStorage.getTask(runningTaskId)).andReturn(Optional.of(captured.getValue())).anyTimes()@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(aNewTaskCapture))).andReturn(true)@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "DateTime now = DateTimes.nowUtc()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "expectLastCall().anyTimes()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "expect(taskClient.getStatusAsync(runningTaskId)).andReturn(Futures.immediateFuture(Status.READING))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "EasyMock.reset(taskQueue)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "EasyMock.expect(taskStorage.getTask(iHaveFailed.getId())).andReturn(Optional.of((Task)iHaveFailed)).anyTimes()@@@49@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
104 [style = filled, label = "List<Task> existingTasks = ImmutableList.of(id1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "supervisorRecordSupplier.assign(EasyMock.anyObject())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(runningTaskId)).andReturn(Optional.of(TaskStatus.running(runningTaskId))).anyTimes()@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectLastCall().anyTimes()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
57 [style = filled, label = "expect(taskClient.getStartTimeAsync(runningTaskId)).andReturn(Futures.immediateFuture(now)).anyTimes()@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(2)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "EasyMock.reset(taskClient)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "expect(taskStorage.getStatus(iHaveFailed.getId())).andReturn(Optional.of(TaskStatus.failure(iHaveFailed.getId())))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "Assert.assertEquals(now,((KafkaIndexTask)captured.getValue()).getIOConfig().getMinimumMessageTime().get())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "verifyAll()@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(runningTaskId)).andReturn(Futures.immediateFuture(now)).anyTimes()@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(captured.getValue())).anyTimes()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(captured.getValue())).anyTimes()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "expect(taskStorage.getTask(runningTaskId)).andReturn(Optional.of(captured.getValue())).anyTimes()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "Capture<Task> captured = Capture.newInstance()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "expectLastCall().anyTimes()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
110 [style = filled, label = "replay(taskQueue)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(2)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "Capture<Task> aNewTaskCapture = Capture.newInstance()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "DateTime maxi = now.plusMinutes(60)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "KinesisIndexTask iHaveFailed = (KinesisIndexTask)existingTasks.get(0)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "expect(taskQueue.add(capture(aNewTaskCapture))).andReturn(true)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpoints = new TreeMap<>()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "TreeMap<Integer,Map<Integer,Long>> checkpoints = new TreeMap<>()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(2)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
93 [style = filled, label = "Assert.assertEquals(now,((KafkaIndexTask)aNewTaskCapture.getValue()).getIOConfig().getMinimumMessageTime().get())@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(now,((KinesisIndexTask)aNewTaskCapture.getValue()).getIOConfig().getMinimumMessageTime().get())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "Task id1 = createKafkaIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"topic\",ImmutableMap.of(0,0L,2,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,2,Long.MAX_VALUE)),now,maxi)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
94 [style = filled, label = "Assert.assertNotEquals(iHaveFailed.getId(),aNewTaskCapture.getValue().getId())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expect(taskQueue.add(capture(captured))).andReturn(true)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "replay(taskClient)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(iHaveFailed.getId())).andReturn(Optional.of(TaskStatus.failure(iHaveFailed.getId())))@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "testRequeueAdoptedTaskWhenFailed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
91 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "testRequeueAdoptedTaskWhenFailed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.emptyList()).anyTimes()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(runningTaskId)).andReturn(Futures.immediateFuture(Status.READING))@@@51@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(iHaveFailed.getIOConfig().getBaseSequenceName(),((KinesisIndexTask)aNewTaskCapture.getValue()).getIOConfig().getBaseSequenceName())@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
75 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "expect(supervisorRecordSupplier.getLatestSequenceNumber(anyObject())).andReturn(\"100\").anyTimes()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
82 [style = filled, label = "addSomeEvents(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "supervisorRecordSupplier.seekToLatest(anyObject())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
70 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "expect(taskStorage.getStatus(runningTaskId)).andReturn(Optional.of(TaskStatus.running(runningTaskId))).anyTimes()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expect(supervisorRecordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
68 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
107 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(0,0L,2,0L))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "supervisor = getTestableSupervisor(2,1,true,\"PT1H\",null,null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "EasyMock.expect(taskStorage.getTask(iHaveFailed.getId())).andReturn(Optional.of(iHaveFailed)).anyTimes()@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "testRequeueAdoptedTaskWhenFailed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "EasyMock.replay(taskQueue)@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "supervisor.start()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "supervisor.runInternal()@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
111 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(existingTasks).anyTimes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "EasyMock.replay(taskClient)@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "supervisor.runInternal()@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "String runningTaskId = captured.getValue().getId()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Task id1 = createKinesisIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),now,maxi)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "EasyMock.reset(taskStorage)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
54 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(existingTasks).anyTimes()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(maxi,((KinesisIndexTask)aNewTaskCapture.getValue()).getIOConfig().getMaximumMessageTime().get())@@@62@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(Status.READING))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
97 [style = filled, label = "verifyAll()@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "supervisor.runInternal()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
109 [style = filled, label = "Assert.assertEquals(iHaveFailed.getIOConfig().getBaseSequenceName(),((KafkaIndexTask)aNewTaskCapture.getValue()).getIOConfig().getBaseSequenceName())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id1\")).andReturn(Futures.immediateFuture(now)).anyTimes()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
98 [style = filled, label = "verifyAll()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
106 [style = filled, label = "KafkaIndexTask iHaveFailed = (KafkaIndexTask)existingTasks.get(0)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(Status.READING))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
77 [style = filled, label = "Assert.assertEquals(maxi,((KafkaIndexTask)aNewTaskCapture.getValue()).getIOConfig().getMaximumMessageTime().get())@@@53@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
100 [style = filled, label = "replayAll()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "Assert.assertEquals(now,((KinesisIndexTask)captured.getValue()).getIOConfig().getMinimumMessageTime().get())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "supervisorRecordSupplier.seek(anyObject(),anyString())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Assert.assertNotEquals(iHaveFailed.getId(),aNewTaskCapture.getValue().getId())@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "EasyMock.expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32->35 [style = bold, label=""];
18->67 [style = dashed, label="0"];
62->3 [style = bold, label=""];
14->65 [style = dashed, label="0"];
16->0 [style = bold, label=""];
74->65 [style = bold, label=""];
38->27 [style = solid, label="id1"];
84->25 [style = bold, label=""];
15->61 [style = bold, label=""];
33->61 [style = dashed, label="0"];
41->90 [style = bold, label=""];
80->98 [style = bold, label=""];
4->73 [style = dashed, label="0"];
36->28 [style = bold, label=""];
40->25 [style = bold, label=""];
95->88 [style = solid, label="now"];
106->108 [style = bold, label=""];
33->0 [style = dashed, label="0"];
42->109 [style = dashed, label="0"];
46->2 [style = solid, label="maxi"];
109->93 [style = bold, label=""];
25->6 [style = bold, label=""];
46->38 [style = solid, label="maxi"];
28->59 [style = dashed, label="0"];
26->75 [style = dashed, label="0"];
21->2 [style = bold, label=""];
26->60 [style = bold, label=""];
43->3 [style = bold, label=""];
7->79 [style = bold, label=""];
60->86 [style = dashed, label="0"];
6->74 [style = dashed, label="0"];
27->17 [style = bold, label=""];
70->68 [style = bold, label=""];
4->8 [style = bold, label=""];
41->45 [style = bold, label=""];
23->36 [style = bold, label=""];
35->64 [style = dashed, label="0"];
48->18 [style = bold, label=""];
95->92 [style = bold, label=""];
29->1 [style = bold, label=""];
42->21 [style = bold, label=""];
105->100 [style = bold, label=""];
55->37 [style = bold, label=""];
57->13 [style = bold, label=""];
60->51 [style = bold, label=""];
11->16 [style = bold, label=""];
46->38 [style = bold, label=""];
76->103 [style = bold, label=""];
7->11 [style = bold, label=""];
78->97 [style = bold, label=""];
11->106 [style = dashed, label="0"];
15->16 [style = dashed, label="0"];
43->89 [style = dashed, label="0"];
65->73 [style = bold, label=""];
51->54 [style = bold, label=""];
94->109 [style = bold, label=""];
92->85 [style = bold, label=""];
39->34 [style = bold, label=""];
50->30 [style = bold, label=""];
100->112 [style = bold, label=""];
24->44 [style = bold, label=""];
45->59 [style = bold, label=""];
53->20 [style = bold, label=""];
58->45 [style = solid, label="now"];
10->87 [style = dashed, label="0"];
51->101 [style = dashed, label="0"];
45->88 [style = dashed, label="0"];
12->48 [style = bold, label=""];
20->102 [style = dashed, label="0"];
110->96 [style = bold, label=""];
33->29 [style = bold, label=""];
52->58 [style = bold, label=""];
64->15 [style = bold, label=""];
56->110 [style = dashed, label="0"];
56->50 [style = bold, label=""];
25->82 [style = bold, label=""];
66->25 [style = bold, label=""];
58->46 [style = bold, label=""];
107->83 [style = bold, label=""];
61->29 [style = bold, label=""];
9->70 [style = dashed, label="0"];
20->19 [style = bold, label=""];
98->88 [style = bold, label=""];
5->22 [style = bold, label=""];
32->64 [style = bold, label=""];
89->27 [style = bold, label=""];
58->21 [style = solid, label="now"];
15->33 [style = bold, label=""];
14->4 [style = bold, label=""];
22->42 [style = bold, label=""];
102->107 [style = bold, label=""];
0->57 [style = bold, label=""];
73->63 [style = bold, label=""];
90->59 [style = bold, label=""];
85->104 [style = bold, label=""];
93->77 [style = bold, label=""];
59->7 [style = bold, label=""];
44->62 [style = bold, label=""];
2->77 [style = dashed, label="0"];
35->15 [style = bold, label=""];
101->111 [style = bold, label=""];
9->31 [style = bold, label=""];
3->27 [style = dashed, label="0"];
112->80 [style = bold, label=""];
38->85 [style = dashed, label="0"];
91->102 [style = bold, label=""];
1->99 [style = dashed, label="0"];
38->27 [style = bold, label=""];
63->70 [style = bold, label=""];
32->7 [style = dashed, label="0"];
75->86 [style = bold, label=""];
67->72 [style = bold, label=""];
83->105 [style = bold, label=""];
31->12 [style = bold, label=""];
104->81 [style = bold, label=""];
47->83 [style = dashed, label="0"];
28->32 [style = bold, label=""];
49->17 [style = dashed, label="0"];
54->24 [style = bold, label=""];
57->99 [style = bold, label=""];
19->47 [style = bold, label=""];
55->105 [style = dashed, label="0"];
95->85 [style = solid, label="now"];
8->63 [style = dashed, label="0"];
30->5 [style = bold, label=""];
35->79 [style = dashed, label="0"];
81->75 [style = bold, label=""];
86->101 [style = bold, label=""];
97->94 [style = bold, label=""];
24->58 [style = dashed, label="0"];
54->111 [style = dashed, label="0"];
44->46 [style = dashed, label="0"];
92->77 [style = solid, label="maxi"];
52->72 [style = dashed, label="0"];
18->52 [style = bold, label=""];
13->34 [style = dashed, label="0"];
37->39 [style = bold, label=""];
99->87 [style = bold, label=""];
108->37 [style = bold, label=""];
12->71 [style = dashed, label="0"];
58->38 [style = solid, label="now"];
29->57 [style = dashed, label="0"];
17->26 [style = bold, label=""];
79->16 [style = bold, label=""];
10->56 [style = bold, label=""];
69->67 [style = bold, label=""];
50->96 [style = dashed, label="0"];
36->90 [style = dashed, label="0"];
48->69 [style = dashed, label="0"];
95->93 [style = solid, label="now"];
96->78 [style = bold, label=""];
34->41 [style = bold, label=""];
88->76 [style = bold, label=""];
85->104 [style = solid, label="id1"];
111->58 [style = bold, label=""];
25->74 [style = bold, label=""];
44->43 [style = bold, label=""];
71->69 [style = bold, label=""];
53->91 [style = dashed, label="0"];
49->53 [style = bold, label=""];
6->14 [style = bold, label=""];
21->93 [style = dashed, label="0"];
17->91 [style = bold, label=""];
47->55 [style = bold, label=""];
68->71 [style = bold, label=""];
72->58 [style = bold, label=""];
8->9 [style = bold, label=""];
13->23 [style = bold, label=""];
23->41 [style = dashed, label="0"];
92->85 [style = solid, label="maxi"];
19->107 [style = dashed, label="0"];
3->49 [style = bold, label=""];
103->106 [style = bold, label=""];
31->68 [style = dashed, label="0"];
1->10 [style = bold, label=""];
43->62 [style = dashed, label="0"];
87->110 [style = bold, label=""];
82->95 [style = bold, label=""];
46->89 [style = bold, label=""];
}
