digraph {
1 [style = filled, label = "Schedulers.single().scheduleDirect(new Runnable(){@SuppressWarnings(\"unchecked\") @Override public void run(){ts.cancel()s(0(.onNext(1)}},200,TimeUnit.MILLISECONDS)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "!ts.isCancelled()@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final TestSubscriber<Object> ts = new TestSubscriber<Object>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "to.assertEmpty()@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "delayed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "delayed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "delayed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final Observer(( s = {null}@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Thread.sleep(100)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final TestObserver<Object> to = new TestObserver<Object>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final Subscriber(( s = {null}@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ts.assertEmpty()@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "!to.isDisposed()@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "new Flowable<Integer>(){@Override protected void subscribeActual(Subscriber<? super Integer> subscriber){subscriber.onSubscribe(new BooleanSubscription())s(0( = subscriber}}.blockingSubscribe(ts)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "new Observable<Integer>(){@Override protected void subscribeActual(Observer<? super Integer> observer){observer.onSubscribe(Disposable.empty())s(0( = observer}}.blockingSubscribe(to)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = solid, label="to"];
1->9 [style = bold, label=""];
4->5 [style = bold, label=""];
7->6 [style = bold, label=""];
5->4 [style = dotted, label="true"];
14->12 [style = bold, label=""];
10->11 [style = bold, label=""];
8->6 [style = bold, label=""];
3->5 [style = bold, label=""];
5->4 [style = bold, label=""];
6->2 [style = bold, label=""];
12->13 [style = bold, label=""];
6->12 [style = dashed, label="0"];
5->0 [style = bold, label=""];
1->3 [style = bold, label=""];
0->11 [style = dashed, label="0"];
10->4 [style = dotted, label="true"];
10->4 [style = bold, label=""];
2->1 [style = bold, label=""];
13->1 [style = bold, label=""];
4->10 [style = bold, label=""];
5->10 [style = dashed, label="0"];
12->9 [style = solid, label="ts"];
3->9 [style = dashed, label="0"];
2->13 [style = dashed, label="0"];
9->10 [style = bold, label=""];
}
