digraph {
9 [style = filled, label = "Query q = qParser.getQuery()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"+(((text:\"crow blackbird\" text:grackl) text:wifi)\" + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",q.toString())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "sowFalseParams.add(\"df\",\"text\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertJQ(req(\"df\",\"shingle23\",\"q\",\"A B C\",\"sow\",\"false\"),\"/response/numFound==1\")@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"+(((text:\"crow blackbird\" text:grackl))\" + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",q.toString())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "qParser = QParser.getParser(\"grackle wi fi\",\"edismax\",req)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Query q = qParser.getQuery()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "QParser qParser = QParser.getParser(\"grackle\",\"edismax\",req)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"+(((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",q.toString())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ModifiableSolrParams sowTrueParams = new ModifiableSolrParams()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "QParser qParser = QParser.getParser(\"text:grackle\",\"edismax\",req)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Query q = qParser.getQuery()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"+spanOr((spanNear((text:crow, text:blackbird(, 0, true), text:grackl()\",q.toString())@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "q = qParser.getQuery()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "q = qParser.getQuery()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Query q = qParser.getQuery()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"+((spanOr((spanNear((text:crow, text:blackbird(, 0, true), text:grackl()\" + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl))) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",q.toString())@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "QParser qParser = QParser.getParser(\"text_sw:grackle\",\"edismax\",req)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testAutoGeneratePhraseQueries['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"+((text:\"crow blackbird\" text:grackl))\",q.toString())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "QParser qParser = QParser.getParser(\"shingle23:(A B C)\",req)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "noSowParams.add(\"df\",\"text\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "sowTrueParams.add(\"df\",\"text\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "sowFalseParams.add(\"sow\",\"false\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testShingleQueries['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"+(spanOr((spanNear((text:crow, text:blackbird(, 0, true), text:grackl()\" + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",q.toString())@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Query q = qParser.getQuery()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(\"+((text:\"crow blackbird\" text:grackl)\" + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",q.toString())@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "sowTrueParams.add(\"sow\",\"true\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertEquals(\"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C\",q.toString())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Query q = qParser.getQuery()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testAutoGeneratePhraseQueries['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "ModifiableSolrParams noSowParams = new ModifiableSolrParams()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\"+(((text:\"crow blackbird\" text:grackl)\" + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl))) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",q.toString())@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "ModifiableSolrParams sowFalseParams = new ModifiableSolrParams()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "params.add(\"sow\",\"false\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "qParser = QParser.getParser(\"grackle wi fi\",\"edismax\",req)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "QParser qParser = QParser.getParser(\"grackle\",\"edismax\",req)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "QParser qParser = QParser.getParser(\"text:grackle\",\"edismax\",req)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(\"+(text:\"crow blackbird\" text:grackl)\",q.toString())@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Stream.of(noSowParams,sowTrueParams,sowFalseParams).forEach(null)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "params.add(\"defType\",\"edismax\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->37 [style = dashed, label="0"];
42->41 [style = bold, label=""];
7->1 [style = bold, label=""];
25->34 [style = dashed, label="0"];
26->38 [style = dashed, label="0"];
5->20 [style = bold, label=""];
9->31 [style = bold, label=""];
31->0 [style = bold, label=""];
18->15 [style = bold, label=""];
12->11 [style = bold, label=""];
30->25 [style = bold, label=""];
10->33 [style = dashed, label="0"];
8->6 [style = bold, label=""];
4->29 [style = bold, label=""];
30->34 [style = bold, label=""];
10->21 [style = bold, label=""];
21->30 [style = bold, label=""];
16->19 [style = bold, label=""];
38->42 [style = bold, label=""];
27->22 [style = bold, label=""];
23->0 [style = bold, label=""];
3->4 [style = bold, label=""];
36->39 [style = bold, label=""];
15->5 [style = bold, label=""];
20->2 [style = bold, label=""];
8->0 [style = bold, label=""];
9->23 [style = bold, label=""];
0->14 [style = bold, label=""];
22->18 [style = bold, label=""];
29->33 [style = bold, label=""];
41->36 [style = bold, label=""];
19->9 [style = bold, label=""];
3->7 [style = bold, label=""];
13->26 [style = bold, label=""];
20->41 [style = dashed, label="0"];
37->38 [style = bold, label=""];
39->35 [style = bold, label=""];
1->12 [style = bold, label=""];
17->3 [style = bold, label=""];
11->17 [style = bold, label=""];
29->10 [style = bold, label=""];
14->8 [style = bold, label=""];
28->27 [style = bold, label=""];
26->28 [style = bold, label=""];
6->7 [style = bold, label=""];
33->21 [style = bold, label=""];
32->13 [style = bold, label=""];
16->20 [style = bold, label=""];
40->37 [style = bold, label=""];
16->39 [style = dashed, label="0"];
24->13 [style = bold, label=""];
2->16 [style = bold, label=""];
}
