digraph {
9 [style = filled, label = "Assert.assertNull(\"Operation should be null\",snapshot.operation())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "long id = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"Files should match\",expected.manifests(),snapshot.manifests())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Snapshot expected = new BaseSnapshot(ops.io(),id,parentId,System.currentTimeMillis(),DataOperations.REPLACE,ImmutableMap.of(\"files-added\",\"4\",\"files-deleted\",\"100\"),manifests)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertNull(\"Summary should be null\",snapshot.summary())@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Snapshot expected = new BaseSnapshot(ops.io(),System.currentTimeMillis(),\"file:/tmp/manifest1.avro\",\"file:/tmp/manifest2.avro\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testJsonConversionWithOperation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(\"Sequence number should default to 0 for v1\",0,snapshot.sequenceNumber())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "long parentId = 1@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"Snapshot ID should match\",expected.snapshotId(),snapshot.snapshotId())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(\"Parent ID should match\",expected.parentId(),snapshot.parentId())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testJsonConversionWithOperation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"Manifest list should match\",expected.manifestListLocation(),snapshot.manifestListLocation())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(\"Operation should match\",expected.operation(),snapshot.operation())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"Timestamp should match\",expected.timestampMillis(),snapshot.timestampMillis())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "String json = SnapshotParser.toJson(expected)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<ManifestFile> manifests = ImmutableList.of(new GenericManifestFile(localInput(\"file:/tmp/manifest1.avro\"),0),new GenericManifestFile(localInput(\"file:/tmp/manifest2.avro\"),0))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(\"Files should match\",expected.manifests(),snapshot.manifests())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testJsonConversion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Snapshot snapshot = SnapshotParser.fromJson(ops.io(),json)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Summary should match\",expected.summary(),snapshot.summary())@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0->6 [style = bold, label=""];
14->5 [style = bold, label=""];
3->10 [style = bold, label=""];
5->16 [style = dashed, label="0"];
7->9 [style = solid, label="json"];
18->20 [style = bold, label=""];
9->11 [style = bold, label=""];
6->7 [style = solid, label="expected"];
8->12 [style = bold, label=""];
16->18 [style = bold, label=""];
7->9 [style = bold, label=""];
12->2 [style = bold, label=""];
10->11 [style = dashed, label="0"];
1->8 [style = bold, label=""];
9->15 [style = bold, label=""];
11->1 [style = bold, label=""];
4->6 [style = solid, label="id"];
18->20 [style = solid, label="json"];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
19->16 [style = bold, label=""];
15->11 [style = bold, label=""];
0->6 [style = solid, label="manifests"];
5->8 [style = solid, label="parentId"];
16->18 [style = solid, label="expected"];
20->17 [style = bold, label=""];
6->7 [style = bold, label=""];
17->7 [style = bold, label=""];
3->9 [style = dashed, label="0"];
13->5 [style = bold, label=""];
4->0 [style = bold, label=""];
5->6 [style = solid, label="parentId"];
0->2 [style = solid, label="manifests"];
}
