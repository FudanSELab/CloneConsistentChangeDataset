digraph {
29 [style = filled, label = "checkWrittenData(tempFile,expected)@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "nextEvent = funcWrapper.getNextEvent()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEmptyDataFiles()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "funcWrapper.invoke(rowData)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "funcWrapper.openFunction()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,nextEvent)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testUpsertWithDelete['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "expected.put(\"par3\",\"(id6,par3,id6,Emma,20,6,par3(\")@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertThat(\"The operator expect to send an event\",nextEvent,instanceOf())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expected.put(\"par1\",\"(id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1(\")@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String instant = funcWrapper.getWriteClient().getLastPendingInstant(getTableType())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "funcWrapper.openFunction()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,nextEvent)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "checkWrittenData(tempFile,EXPECTED1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "checkWrittenData(tempFile,EXPECTED2)@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.REQUESTED,instant)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "funcWrapper.invoke(rowData)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "funcWrapper.checkpointFunction(2)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "OperatorEvent nextEvent = funcWrapper.getNextEvent()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(funcWrapper.isAlreadyBootstrap())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "checkIndexLoaded(new HoodieKey(\"id1\",\"par1\"),new HoodieKey(\"id2\",\"par1\"),new HoodieKey(\"id3\",\"par2\"),new HoodieKey(\"id4\",\"par2\"),new HoodieKey(\"id5\",\"par3\"),new HoodieKey(\"id6\",\"par3\"),new HoodieKey(\"id7\",\"par4\"),new HoodieKey(\"id8\",\"par4\"),new HoodieKey(\"id9\",\"par3\"),new HoodieKey(\"id10\",\"par4\"),new HoodieKey(\"id11\",\"par4\"))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Map<String,String> expected = getExpectedBeforeCheckpointComplete()@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertThat(\"The operator expect to send an event\",nextEvent,instanceOf())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expected.put(\"par2\",\"(id4,par2,id4,Fabian,31,4,par2(\")@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.REQUESTED,instant)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "checkWrittenData(tempFile,expected)@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testIndexStateBootstrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED,true)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "checkWrittenData(tempFile,EXPECTED2)@@@34@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "expected.put(\"par4\",\"(id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4(\")@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "checkWrittenData(tempFile,EXPECTED1)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Map<String,String> expected = new HashMap<>()@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testIndexStateBootstrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22->2 [style = bold, label=""];
19->3 [style = bold, label=""];
16->18 [style = solid, label="instant"];
14->38 [style = bold, label=""];
17->27 [style = bold, label=""];
27->12 [style = bold, label=""];
20->10 [style = bold, label=""];
23->24 [style = bold, label=""];
5->20 [style = solid, label="nextEvent"];
13->0 [style = bold, label=""];
16->4 [style = solid, label="instant"];
12->15 [style = bold, label=""];
9->20 [style = bold, label=""];
16->3 [style = solid, label="instant"];
25->26 [style = bold, label=""];
5->10 [style = solid, label="nextEvent"];
5->21 [style = solid, label="nextEvent"];
24->17 [style = bold, label=""];
20->39 [style = solid, label="expected"];
12->37 [style = bold, label=""];
37->36 [style = solid, label="nextEvent"];
38->34 [style = bold, label=""];
11->1 [style = bold, label=""];
16->19 [style = solid, label="instant"];
8->6 [style = bold, label=""];
3->18 [style = bold, label=""];
1->14 [style = bold, label=""];
2->25 [style = bold, label=""];
0->11 [style = bold, label=""];
13->11 [style = solid, label="nextEvent"];
33->16 [style = bold, label=""];
19->5 [style = dashed, label="0"];
7->13 [style = bold, label=""];
6->16 [style = bold, label=""];
12->16 [style = solid, label="instant"];
37->36 [style = bold, label=""];
4->19 [style = bold, label=""];
4->41 [style = bold, label=""];
21->20 [style = bold, label=""];
5->21 [style = bold, label=""];
10->4 [style = bold, label=""];
41->3 [style = bold, label=""];
31->2 [style = bold, label=""];
29->10 [style = bold, label=""];
16->5 [style = bold, label=""];
14->23 [style = bold, label=""];
26->7 [style = bold, label=""];
36->32 [style = bold, label=""];
40->2 [style = bold, label=""];
34->35 [style = bold, label=""];
21->9 [style = bold, label=""];
35->12 [style = bold, label=""];
32->33 [style = bold, label=""];
15->8 [style = bold, label=""];
12->21 [style = solid, label="instant"];
18->30 [style = bold, label=""];
37->32 [style = solid, label="nextEvent"];
13->0 [style = solid, label="nextEvent"];
21->28 [style = bold, label=""];
28->29 [style = bold, label=""];
3->39 [style = bold, label=""];
28->29 [style = solid, label="expected"];
}
