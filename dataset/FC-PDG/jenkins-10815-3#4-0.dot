digraph {
25 [style = filled, label = "List<String> logLines = r.getLog(10)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "w.print(\"a1b2c3\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Job j = Mockito.mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"(...truncated \" + truncatedCount + \" B...(\",logLines.get(0))@@@26@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Mockito.when(j.getBuildDir()).thenReturn(tempBuildDir)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Run<? extends Job<?,?>,? extends Run<?,?>> r = new Run(j,0){}@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "f.getParentFile().mkdirs()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "w.println(\"dummy\" + i)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "getLogReturnsAnRightOrder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "w.close()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "i++@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "getLogReturnsAllLines['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"c3\",logLines.get(3))@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "i < 10@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "File tempBuildDir = tmp.newFolder()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"dummy\" + (10 + i),logLines.get(i))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"b2\",logLines.get(1))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i < 20@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "File f = r.getLogFile()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"\",logLines.get(2))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int truncatedCount = 10 * (\"dummyN\".length() + System.getProperty(\"line.separator\").length()) - 2@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertEquals(\"(...truncated 68 B...(\",logLines.get(0))@@@25@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "getLogReturnsAnRightOrder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int i = 0@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "PrintWriter w = new PrintWriter(f,\"utf-8\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i++@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int i = 1@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertFalse(logLines.isEmpty())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\"a1\",logLines.get(0))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->6 [style = bold, label=""];
26->24 [style = bold, label=""];
1->13 [style = solid, label="i"];
17->16 [style = solid, label="i"];
27->25 [style = bold, label=""];
28->12 [style = bold, label=""];
17->13 [style = solid, label="i"];
6->7 [style = dotted, label="true"];
15->18 [style = solid, label="f"];
13->17 [style = bold, label=""];
4->6 [style = solid, label="i"];
25->26 [style = bold, label=""];
7->6 [style = bold, label=""];
16->8 [style = bold, label=""];
12->0 [style = solid, label="j"];
14->12 [style = bold, label=""];
11->18 [style = bold, label=""];
9->0 [style = bold, label=""];
16->13 [style = dotted, label="true"];
16->13 [style = bold, label=""];
24->10 [style = bold, label=""];
4->7 [style = solid, label="i"];
10->19 [style = bold, label=""];
4->5 [style = solid, label="i"];
6->10 [style = bold, label=""];
6->5 [style = dotted, label="true"];
16->21 [style = bold, label=""];
0->15 [style = bold, label=""];
21->20 [style = solid, label="truncatedCount"];
21->20 [style = bold, label=""];
15->11 [style = bold, label=""];
12->3 [style = bold, label=""];
1->17 [style = solid, label="i"];
3->9 [style = bold, label=""];
2->1 [style = bold, label=""];
6->5 [style = bold, label=""];
3->9 [style = solid, label="tempBuildDir"];
13->2 [style = dashed, label="0"];
19->2 [style = bold, label=""];
22->12 [style = bold, label=""];
1->16 [style = bold, label=""];
16->17 [style = dotted, label="true"];
17->16 [style = bold, label=""];
1->16 [style = solid, label="i"];
7->5 [style = solid, label="i"];
5->7 [style = bold, label=""];
18->4 [style = bold, label=""];
18->23 [style = bold, label=""];
23->27 [style = bold, label=""];
7->6 [style = solid, label="i"];
}
