digraph {
2 [style = filled, label = "String r = proxy.typedBeanHeaders(new TypedBeanImpl().init(),null,new TypedBean((((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1555a8a,AList.of(new TypedBeanImpl().init(),null),AList.of(new TypedBean((((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1555aa1,null),AMap.of(\"foo\",new TypedBeanImpl().init()),AMap.of(\"foo\",Arrays.asList((TypedBean)new TypedBeanImpl().init())),AMap.of(\"foo\",AList.of(new TypedBean((((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1555aca,null)),AMap.of(1,Arrays.asList((TypedBean)new TypedBeanImpl().init())))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String r = proxy.typedBeanQueries(new TypedBeanImpl().init(),null,new TypedBean((((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1555af9,AList.of(new TypedBeanImpl().init(),null),AList.of(new TypedBean((((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1555b10,null),new AMap<String,TypedBean>().append(\"foo\",new TypedBeanImpl().init()),new AMap<String,List<TypedBean>>().append(\"foo\",Arrays.asList((TypedBean)new TypedBeanImpl().init())),new AMap<String,List<TypedBean((((((>>().append(\"foo\",AList.of(new TypedBean((((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1555b3c,null)),new AMap<Integer,List<TypedBean>>().append(1,Arrays.asList((TypedBean)new TypedBeanImpl().init())))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "a04_typedBeanHeaders['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"OK\",r)@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "a04_typedBeanHeaders['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "b04_typedBeanQueries['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5->1 [style = solid, label="r"];
5->1 [style = bold, label=""];
2->5 [style = dashed, label="0"];
3->2 [style = bold, label=""];
2->1 [style = solid, label="r"];
4->5 [style = bold, label=""];
2->1 [style = bold, label=""];
0->2 [style = bold, label=""];
}
