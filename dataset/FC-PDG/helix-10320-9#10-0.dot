digraph {
1 [style = filled, label = "when(_testNode.getAssignedTopStatePartitionsCount()).thenReturn(20)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testGetAssignmentScoreWhenReplicaIsTopStateHeavyLoad['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "when(_testReplica.isReplicaTopState()).thenReturn(true)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "double normalizedScore = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testWhenInstanceIsFull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "when(_testNode.getAssignedReplicaCount()).thenReturn(10)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "double score = _constraint.getAssignmentScore(_testNode,_testReplica,_clusterContext)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(normalizedScore,0.5)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "float score = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(score,0.5f)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "when(_clusterContext.getEstimatedMaxPartitionCount()).thenReturn(10)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testGetAssignmentScoreWhenReplicaIsTopStateHeavyLoad['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(_clusterContext.getEstimatedMaxTopStateCount()).thenReturn(20)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(score,0.5f)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(score,0.5)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "float score = _constraint.getAssignmentScore(_testNode,_testReplica,_clusterContext)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "float normalizedScore = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(normalizedScore,0.5f)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16->15 [style = bold, label=""];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
7->2 [style = solid, label="normalizedScore"];
4->17 [style = dashed, label="0"];
0->6 [style = bold, label=""];
1->15 [style = dashed, label="0"];
17->14 [style = solid, label="score"];
13->16 [style = bold, label=""];
9->6 [style = bold, label=""];
6->1 [style = bold, label=""];
5->2 [style = bold, label=""];
7->5 [style = bold, label=""];
12->10 [style = bold, label=""];
15->17 [style = bold, label=""];
6->16 [style = dashed, label="0"];
5->10 [style = dashed, label="0"];
3->7 [style = bold, label=""];
17->14 [style = bold, label=""];
7->12 [style = dashed, label="0"];
3->8 [style = dashed, label="0"];
4->8 [style = bold, label=""];
2->11 [style = dashed, label="0"];
3->5 [style = solid, label="score"];
12->11 [style = solid, label="normalizedScore"];
8->12 [style = bold, label=""];
8->10 [style = solid, label="score"];
10->11 [style = bold, label=""];
}
