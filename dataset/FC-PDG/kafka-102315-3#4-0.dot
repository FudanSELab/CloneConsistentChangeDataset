digraph {
8 [style = filled, label = "final RecordCollector collector = new RecordCollectorImpl(logContext,taskId,new StreamsProducer(eosConfig,\"threadId\",new MockClientSupplier(){@Override public Producer<byte((,byte((> getProducer(final Map<String,Object> config){return mockProducer}},taskId,null,logContext),productionExceptionHandler,streamsMetrics)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "shouldNotCloseInternalProducerForEOS['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(thrown.getMessage(),equalTo(\"Could not get partition information for topic topic for task 0_0. This can happen if the topic does not exist.\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "shouldThrowIfTopicIsUnknownOnSendWithPartitioner['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertThat(thrown.getMessage(),equalTo(\"Could not get partition information for topic topic for task 0_0.\" + \" This can happen if the topic does not exist.\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "collector.initialize()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "shouldThrowIfTopicIsUnknownOnSendWithPartitioner['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final StreamsException thrown = assertThrows(,null)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final RecordCollector collector = new RecordCollectorImpl(logContext,taskId,new StreamsProducer(config,\"threadId\",new MockClientSupplier(){@Override public Producer<byte((,byte((> getProducer(final Map<String,Object> config){return new MockProducer<byte((,byte((>(cluster,true,new DefaultPartitioner(),byteArraySerializer,byteArraySerializer){@Override public List<PartitionInfo> partitionsFor(final String topic){return Collections.emptyList()}}}},null,null,logContext),productionExceptionHandler,streamsMetrics)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "streamsProducer.flush()@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "collector.close()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->3 [style = bold, label=""];
1->5 [style = bold, label=""];
3->5 [style = dashed, label="0"];
0->8 [style = dashed, label="0"];
6->0 [style = bold, label=""];
10->8 [style = bold, label=""];
9->7 [style = bold, label=""];
2->1 [style = bold, label=""];
4->0 [style = bold, label=""];
0->2 [style = bold, label=""];
8->9 [style = bold, label=""];
}
